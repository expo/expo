def isNewArchitectureEnabled() {
  return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

if (isNewArchitectureEnabled()) {
  buildscript {
    repositories {
      mavenCentral()
      google()
    }

    dependencies {
      classpath("com.android.tools.build:gradle:7.1.1")
      classpath("com.facebook.react:react-native-gradle-plugin")
      classpath("de.undercouch:gradle-download-task:5.0.1")
    }
  }
}

apply plugin: 'com.android.library'
if (isNewArchitectureEnabled()) {
  apply plugin: 'com.facebook.react'
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['ReactNativeSlider_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['ReactNativeSlider_' + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')
  buildToolsVersion getExtOrDefault('buildToolsVersion')

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
          java.srcDirs += ['src/newarch']
      } else {
          java.srcDirs += ['src/oldarch']
      }
    }
  }
}

repositories {
  google()
  mavenCentral()
}

dependencies {
  //noinspection GradleDynamicVersion
  api 'com.facebook.react:react-native:+'
}

if (isNewArchitectureEnabled()) {
    react {
        jsRootDir = file("../src")
        libraryName = "ReactSlider"
        codegenJavaPackageName = "com.reactnativecommunity.slider"
    }
}
