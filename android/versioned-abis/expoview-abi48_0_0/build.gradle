apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'
apply plugin: 'de.undercouch.download'
apply plugin: 'kotlin-kapt'
apply from: new File(rootDir, "versioning_linking.gradle")

def reactProperties = new Properties()
file("${project(':packages:react-native:ReactAndroid').projectDir}/gradle.properties").withInputStream { reactProperties.load(it) }


def prebuiltHermesDir = findProperty("expo.prebuiltHermesDir") ?: file("${rootDir}/prebuiltHermes")
def prebuiltHermesVersion = file("${prebuiltHermesDir}/.hermesversion").exists() ? file("${prebuiltHermesDir}/.hermesversion").text : null
def currentHermesVersion = file("${project(':packages:react-native:ReactAndroid').projectDir}/../sdks/.hermesversion").exists() ? file("${project(':packages:react-native:ReactAndroid').projectDir}/../sdks/.hermesversion").text : null
def buildHermesSource = currentHermesVersion != prebuiltHermesVersion
logger.info(":expoview - buildHermesSource[${buildHermesSource}]")

buildscript {
  // Simple helper that allows the root project to override versions declared by this library.
  ext.safeExtGet = { prop, fallback ->
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
  }

  repositories {
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
  }
  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${safeExtGet('kotlinVersion', '1.6.10')}")
  }
}

repositories {
  mavenCentral()
  maven { url "https://jitpack.io" }
}

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 33)

  // Used to override the NDK path/version on internal CI or by allowing
  // users to customize the NDK path/version from their root project (e.g. for M1 support)
  if (rootProject.hasProperty("ndkPath")) {
    ndkPath rootProject.ext.ndkPath
  }
  if (rootProject.hasProperty("ndkVersion")) {
    ndkVersion rootProject.ext.ndkVersion
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11.majorVersion
  }

  buildFeatures {
    viewBinding true
  }

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 33)
    versionCode 1
    versionName "1.0"

    missingDimensionStrategy('versioning', 'versioned')

  }

  buildTypes {
    release {
      consumerProguardFiles('proguard-rules.pro')
    }
  }


  // use `versionedRelease` configuration when publishing to maven
  defaultPublishConfig "versionedRelease"
}


dependencies {
  api fileTree(dir: 'libs', include: ['*.jar'])
  api 'androidx.multidex:multidex:2.0.0'
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

  testImplementation 'junit:junit:4.13.2'

  implementation project(":expoview")


  // React native dependencies
  api("androidx.appcompat:appcompat-resources:${reactProperties.getProperty('ANDROIDX_APPCOMPAT_VERSION')}")
  api("androidx.appcompat:appcompat:${reactProperties.getProperty('ANDROIDX_APPCOMPAT_VERSION')}")
  api("androidx.autofill:autofill:${reactProperties.getProperty('ANDROIDX_AUTOFILL_VERSION')}")
  api("androidx.swiperefreshlayout:swiperefreshlayout:${reactProperties.getProperty('SWIPEREFRESH_LAYOUT_VERSION')}")

  api("com.facebook.fbjni:fbjni:${reactProperties.getProperty('FBJNI_VERSION')}")
  api("com.facebook.fresco:fresco:${reactProperties.getProperty('FRESCO_VERSION')}")
  api("com.facebook.fresco:imagepipeline-okhttp3:${reactProperties.getProperty('FRESCO_VERSION')}")
  api("com.facebook.fresco:ui-common:${reactProperties.getProperty('FRESCO_VERSION')}")
  api("com.facebook.infer.annotation:infer-annotation:${reactProperties.getProperty('INFER_ANNOTATIONS_VERSION')}")
  api("com.facebook.soloader:soloader:${reactProperties.getProperty('SO_LOADER_VERSION')}")
  api("com.facebook.yoga:proguard-annotations:${reactProperties.getProperty('PROGUARD_ANNOTATIONS_VERSION')}")

  api("com.google.code.findbugs:jsr305:${reactProperties.getProperty('JSR305_VERSION')}")
  api("com.squareup.okhttp3:okhttp-urlconnection:${reactProperties.getProperty('OKHTTP_VERSION')}")
  api("com.squareup.okhttp3:okhttp:${reactProperties.getProperty('OKHTTP_VERSION')}")
  api("com.squareup.okio:okio:${reactProperties.getProperty('OKIO_VERSION')}")
  api("javax.inject:javax.inject:${reactProperties.getProperty('JAVAX_INJECT_VERSION')}")

  // Our dependencies
  compileOnly 'org.glassfish:javax.annotation:3.1.1'
  api 'de.greenrobot:eventbus:2.4.0'
  api "androidx.room:room-runtime:2.1.0"

  api("com.facebook.fresco:animated-gif:${reactProperties.getProperty('FRESCO_VERSION')}")
  api("com.facebook.fresco:animated-webp:${reactProperties.getProperty('FRESCO_VERSION')}")
  api("com.facebook.fresco:webpsupport:${reactProperties.getProperty('FRESCO_VERSION')}")

  api 'com.squareup.picasso:picasso:2.5.2'
  api 'com.google.android.gms:play-services-analytics:17.0.0'
  api 'com.google.android.gms:play-services-maps:18.0.1'
  api 'com.google.android.gms:play-services-auth:17.0.0'
  api 'com.google.android.gms:play-services-location:20.0.0'
  api 'com.google.android.gms:play-services-fitness:17.0.0'
  api 'com.google.android.gms:play-services-wallet:17.0.0' //may need 10.+
  debugApi 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta1'
  // debugApi 'com.squareup.leakcanary:leakcanary-android:1.4-beta1'
  releaseApi 'com.squareup.leakcanary:leakcanary-android-no-op:1.4-beta1'
  api 'commons-io:commons-io:2.6'
  api 'me.leolin:ShortcutBadger:1.1.4@aar'
  implementation "com.github.CanHub:Android-Image-Cropper:4.3.0"
  api 'commons-codec:commons-codec:1.10'
  api 'net.openid:appauth:0.7.1'
  api 'com.airbnb.android:lottie:3.4.0'
  compileOnly 'io.branch.sdk.android:library:4.1.0'
  api "androidx.exifinterface:exifinterface:1.0.0"
  api "androidx.legacy:legacy-support-v4:1.0.0"
  api "androidx.browser:browser:1.0.0"

  // expo-face-detector
  implementation 'com.google.mlkit:face-detection:16.1.5'

  // expo-ads-admob
  implementation 'com.google.android.gms:play-services-ads:20.5.0'
  // For apps targeting Android 12, add WorkManager dependency.
  // See more at https://developers.google.com/admob/android/rel-notes
  constraints {
    implementation('androidx.work:work-runtime:2.7.0') {
      because '''androidx.work:work-runtime:2.1.0 pulled from
      play-services-ads has a bug using PendingIntent without
      FLAG_IMMUTABLE or FLAG_MUTABLE and will fail in Apps
      targeting S+.'''
    }
  }

  api 'com.google.firebase:firebase-core:21.1.0'
  api 'com.google.firebase:firebase-messaging:22.0.0'
  api 'com.google.maps.android:android-maps-utils:0.5'
  // Remember to update DetachAppTemplate build.gradle if you add any excludes or transitive = false here!

  // expo-file-system
  api 'com.squareup.okhttp3:okhttp:3.10.0'
  api 'com.squareup.okhttp3:okhttp-urlconnection:3.10.0'

  // expo-av
  // See explanation in expo-av/build.gradle
  api 'com.google.android.exoplayer:extension-okhttp:2.18.1'

  // expo-application
  api 'com.android.installreferrer:installreferrer:1.0'

  // expo-barcode-scanner
  implementation "com.google.android.gms:play-services-vision:19.0.0"
  implementation "com.google.zxing:core:3.3.3"

  // expo-store-review
  implementation "com.google.android.play:review:2.0.1"
  implementation "com.google.android.play:review-ktx:2.0.0"

  // expo-image
  def GLIDE_VERSION = "4.13.2"
  implementation "com.github.zjupure:webpdecoder:2.1.${GLIDE_VERSION}"
  api "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
  kapt "com.github.bumptech.glide:compiler:${GLIDE_VERSION}"
  implementation "com.github.bumptech.glide:avif-integration:${GLIDE_VERSION}"
  implementation "jp.wasabeef:glide-transformations:4.3.0"

  //dbflow
  kapt "com.github.Raizlabs.DBFlow:dbflow-processor:${safeExtGet('dbFlowVersion', '4.2.4')}"
  implementation "com.github.Raizlabs.DBFlow:dbflow-core:${safeExtGet('dbFlowVersion', '4.2.4')}"
  implementation "com.github.Raizlabs.DBFlow:dbflow:${safeExtGet('dbFlowVersion', '4.2.4')}"

  implementation 'com.cronutils:cron-utils:4.1.3'

  // @react-native-community/viewpager
  api 'com.github.troZee:ViewPager2:v1.0.6'

  // stripe-react-native
  implementation('com.stripe:stripe-android:20.25.+')
  implementation('com.stripe:financial-connections:20.25.+')
  compileOnly 'com.stripe:stripe-android-issuing-push-provisioning:1.1.0'
  implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
  implementation 'com.google.android.material:material:1.3.0'

  // react-native-webview
  implementation "androidx.webkit:webkit:1.4.0"

  // expo-updates
  implementation 'org.bouncycastle:bcutil-jdk15to18:1.70'

  // react-native-maps
  implementation "androidx.work:work-runtime:2.7.1"
}

project.afterEvaluate {
  // Workaround for AGP 7 local lint aar task with errors from a library project owning other aars.
  // In our case, it's the expoview (library project) owning hermes aar
  // ```
  // Error while evaluating property 'hasLocalAarDeps' of task ':expoview:bundleVersionedReleaseLocalLintAar'
  //   > Direct local .aar file dependencies are not supported when building an AAR.
  //     The resulting AAR would be broken because the classes and Android resources from any local .aar file dependencies would not be packaged in the resulting AAR.
  //     Previous versions of the Android Gradle Plugin produce broken AARs in this case too (despite not throwing this error).
  //     The following direct local .aar file dependencies of the :expoview project caused this error:
  //     /home/runner/work/expo/expo/node_modules/hermes-engine/android/hermes-release.aar
  // ```
  // For the workaround, we just pretend we don't have local aar dependencies.
  tasks.findByName("bundleVersionedReleaseLocalLintAar")?.localAarDeps?.setFrom([])
  tasks.findByName("bundleUnversionedReleaseLocalLintAar")?.localAarDeps?.setFrom([])
}

useVendoredModulesForExpoView('sdk48')
