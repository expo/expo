{"version":3,"file":"validators.js","sourceRoot":"","sources":["../src/validators.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Action,\n  ActionCrop,\n  ActionExtent,\n  ActionFlip,\n  ActionResize,\n  ActionRotate,\n  FlipType,\n  SaveFormat,\n  SaveOptions,\n} from './ImageManipulator.types';\n\nexport function validateArguments(uri: string, actions: Action[], saveOptions: SaveOptions) {\n  validateUri(uri);\n  validateActions(actions);\n  validateSaveOptions(saveOptions);\n}\n\nexport function validateUri(uri: string): void {\n  if (!(typeof uri === 'string')) {\n    throw new TypeError('The \"uri\" argument must be a string');\n  }\n}\n\nexport function validateActions(actions: Action[]): void {\n  if (!Array.isArray(actions)) {\n    throw new TypeError('The \"actions\" argument must be an array');\n  }\n  for (const action of actions) {\n    if (typeof action !== 'object' || action === null) {\n      throw new TypeError('Action must be an object');\n    }\n    const supportedActionTypes = ['crop', 'extent', 'flip', 'rotate', 'resize'];\n    const actionKeys = Object.keys(action);\n    if (actionKeys.length !== 1) {\n      throw new TypeError(\n        `Single action must contain exactly one transformation: ${supportedActionTypes.join(', ')}`\n      );\n    }\n    const actionType = actionKeys[0];\n    if (!supportedActionTypes.includes(actionType)) {\n      throw new TypeError(`Unsupported action type: ${actionType}`);\n    }\n\n    if (actionType === 'crop') {\n      validateCropAction(action as ActionCrop);\n    } else if (actionType === 'extent') {\n      validateExtentAction(action as ActionExtent);\n    } else if (actionType === 'flip') {\n      validateFlipAction(action as ActionFlip);\n    } else if (actionType === 'rotate') {\n      validateRotateAction(action as ActionRotate);\n    } else if (actionType === 'resize') {\n      validateResizeAction(action as ActionResize);\n    }\n  }\n}\n\nfunction validateCropAction(action: ActionCrop): void {\n  const isValid =\n    typeof action.crop === 'object' &&\n    action.crop !== null &&\n    typeof action.crop.originX === 'number' &&\n    typeof action.crop.originY === 'number' &&\n    typeof action.crop.width === 'number' &&\n    typeof action.crop.height === 'number';\n  if (!isValid) {\n    throw new TypeError(\n      'Crop action must be an object of shape { originX: number; originY: number; width: number; height: number }'\n    );\n  }\n}\n\nfunction validateExtentAction(action: ActionExtent): void {\n  const isValid =\n    typeof action.extent === 'object' &&\n    action.extent !== null &&\n    (action.extent.backgroundColor == null || typeof action.extent.backgroundColor === 'string') &&\n    (action.extent.originX == null || typeof action.extent.originX === 'number') &&\n    (action.extent.originY == null || typeof action.extent.originY === 'number') &&\n    typeof action.extent.width === 'number' &&\n    typeof action.extent.height === 'number';\n  if (!isValid) {\n    throw new TypeError(\n      'Extent action must be an object of shape { backgroundColor?: string; originX?: number; originY?: number; width: number; height: number }'\n    );\n  }\n}\n\nfunction validateFlipAction(action: ActionFlip): void {\n  if (\n    typeof action.flip !== 'string' ||\n    ![FlipType.Horizontal, FlipType.Vertical].includes(action.flip)\n  ) {\n    throw new TypeError(`Unsupported flip type: ${action.flip}`);\n  }\n}\n\nfunction validateRotateAction(action: ActionRotate): void {\n  if (typeof action.rotate !== 'number') {\n    throw new TypeError('Rotation must be a number');\n  }\n}\n\nfunction validateResizeAction(action: ActionResize): void {\n  const isValid =\n    typeof action.resize === 'object' &&\n    action.resize !== null &&\n    (typeof action.resize.width === 'number' || typeof action.resize.width === 'undefined') &&\n    (typeof action.resize.height === 'number' || typeof action.resize.height === 'undefined');\n  if (!isValid) {\n    throw new TypeError(\n      'Resize action must be an object of shape { width?: number; height?: number }'\n    );\n  }\n}\n\nexport function validateSaveOptions({ base64, compress, format }: SaveOptions): void {\n  if (base64 !== undefined && typeof base64 !== 'boolean') {\n    throw new TypeError('The \"base64\" argument must be a boolean');\n  }\n  if (compress !== undefined) {\n    if (typeof compress !== 'number') {\n      throw new TypeError('The \"compress\" argument must be a number');\n    }\n    if (compress < 0 || compress > 1) {\n      throw new TypeError('The \"compress\" argument must be a number between 0 and 1');\n    }\n  }\n  const allowedFormats = [SaveFormat.JPEG, SaveFormat.PNG, SaveFormat.WEBP];\n  if (format !== undefined && !allowedFormats.includes(format)) {\n    throw new TypeError(`The \"format\" argument must be one of: ${allowedFormats.join(', ')}`);\n  }\n}\n"]}