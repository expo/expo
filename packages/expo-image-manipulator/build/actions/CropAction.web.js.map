{"version":3,"file":"CropAction.web.js","sourceRoot":"","sources":["../../src/actions/CropAction.web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAG/C,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAErD,eAAe,CAAC,MAAyB,EAAE,OAA2B,EAAE,EAAE;IACxE,6BAA6B;IAC7B,IAAI,EAAE,OAAO,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC;IAClE,MAAM,KAAK,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;IAChE,sBAAsB;IACtB,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IACtC,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;IACvC,OAAO,GAAG,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;IAExC,oBAAoB;IACpB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;IAC1D,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC;IAE7D,IAAI,KAAK,KAAK,CAAC,IAAI,MAAM,KAAK,CAAC,EAAE;QAC/B,MAAM,IAAI,UAAU,CAClB,4BAA4B,EAC5B,oCAAoC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CACxE,CAAC;KACH;IAED,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAChD,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;IAEvB,MAAM,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IACnC,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAEhF,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { ActionCrop } from '../ImageManipulator.types';\nimport { getContext } from '../utils/getContext.web';\n\nexport default (canvas: HTMLCanvasElement, options: ActionCrop['crop']) => {\n  // ensure values are defined.\n  let { originX = 0, originY = 0, width = 0, height = 0 } = options;\n  const clamp = (value, max) => Math.max(0, Math.min(max, value));\n  // lock within bounds.\n  width = clamp(width, canvas.width);\n  height = clamp(height, canvas.height);\n  originX = clamp(originX, canvas.width);\n  originY = clamp(originY, canvas.height);\n\n  // lock sum of crop.\n  width = Math.min(originX + width, canvas.width) - originX;\n  height = Math.min(originY + height, canvas.height) - originY;\n\n  if (width === 0 || height === 0) {\n    throw new CodedError(\n      'ERR_IMAGE_MANIPULATOR_CROP',\n      'Crop size must be greater than 0: ' + JSON.stringify(options, null, 2)\n    );\n  }\n\n  const result = document.createElement('canvas');\n  result.width = width;\n  result.height = height;\n\n  const context = getContext(result);\n  context.drawImage(canvas, originX, originY, width, height, 0, 0, width, height);\n\n  return result;\n};\n"]}