{"version":3,"file":"ImageManipulator.types.js","sourceRoot":"","sources":["../src/ImageManipulator.types.ts"],"names":[],"mappings":"AA4CA,eAAe;AACf,MAAM,CAAN,IAAY,QAGX;AAHD,WAAY,QAAQ;IAClB,iCAAqB,CAAA;IACrB,qCAAyB,CAAA;AAC3B,CAAC,EAHW,QAAQ,KAAR,QAAQ,QAGnB;AA2BD,eAAe;AACf,MAAM,CAAN,IAAY,UAOX;AAPD,WAAY,UAAU;IACpB,2BAAa,CAAA;IACb,yBAAW,CAAA;IACX;;OAEG;IACH,2BAAa,CAAA;AACf,CAAC,EAPW,UAAU,KAAV,UAAU,QAOrB","sourcesContent":["// @needsAudit\nexport type ImageResult = {\n  /**\n   * An URI to the modified image (usable as the source for an `Image` or `Video` element).\n   */\n  uri: string;\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * It is included if the `base64` save option was truthy, and is a string containing the\n   * JPEG/PNG (depending on `format`) data of the image in Base64. Prepend that with `'data:image/xxx;base64,'`\n   * to get a data URI, which you can use as the source for an `Image` element for example\n   * (where `xxx` is `jpeg` or `png`).\n   */\n  base64?: string;\n};\n\n// @needsAudit\nexport type ActionResize = {\n  /**\n   * Values correspond to the result image dimensions. If you specify only one value, the other will\n   * be calculated automatically to preserve image ratio.\n   */\n  resize: {\n    width?: number;\n    height?: number;\n  };\n};\n\n// @needsAudit\nexport type ActionRotate = {\n  /**\n   * Degrees to rotate the image. Rotation is clockwise when the value is positive and\n   * counter-clockwise when negative.\n   */\n  rotate: number;\n};\n\n// @docsMissing\nexport enum FlipType {\n  Vertical = 'vertical',\n  Horizontal = 'horizontal',\n}\n\n// @needsAudit\nexport type ActionFlip = {\n  /**\n   * An axis on which image will be flipped. Only one flip per transformation is available. If you\n   * want to flip according to both axes then provide two separate transformations.\n   */\n  flip: FlipType;\n};\n\n// @needsAudit\nexport type ActionCrop = {\n  /**\n   * Fields specify top-left corner and dimensions of a crop rectangle.\n   */\n  crop: {\n    originX: number;\n    originY: number;\n    width: number;\n    height: number;\n  };\n};\n\n// @docsMissing\nexport type Action = ActionResize | ActionRotate | ActionFlip | ActionCrop;\n\n// @docsMissing\nexport enum SaveFormat {\n  JPEG = 'jpeg',\n  PNG = 'png',\n  /**\n   * @platform web\n   */\n  WEBP = 'webp',\n}\n\n// @needsAudit\n/**\n * A map defining how modified image should be saved.\n */\nexport type SaveOptions = {\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * A value in range `0.0` - `1.0` specifying compression level of the result image. `1` means\n   * no compression (highest quality) and `0` the highest compression (lowest quality).\n   */\n  compress?: number;\n  /**\n   * Specifies what type of compression should be used and what is the result file extension.\n   * `SaveFormat.PNG` compression is lossless but slower, `SaveFormat.JPEG` is faster but the image\n   * has visible artifacts. Defaults to `SaveFormat.JPEG`\n   */\n  format?: SaveFormat;\n};\n"]}