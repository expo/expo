{"version":3,"file":"withExpoStories.js","sourceRoot":"","sources":["../src/withExpoStories.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAwB;AAExB,8CAAkD;AAClD,4CAAgD;AAChD,uCAA6D;AAE7D,SAAsB,eAAe,CAAC,WAAgB;;;;;;oBAC5C,WAAW,GAAoB,WAAW,YAA/B,EAAE,KAAkB,WAAW,SAAhB,EAAb,QAAQ,mBAAG,EAAE,KAAA,CAAiB;oBAE7C,GAAG,GAAG,OAAO,CAAC,cAAI,CAAC,OAAO,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC,CAAC;oBAEzD,UAAU,GAAa,EAAE,CAAC;oBAEhC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,WAAW;wBACpC,IAAM,aAAa,GAAG,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;wBACtE,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;oBACjC,CAAC,CAAC,CAAC;oBAEH,qBAAM,IAAA,gBAAS,EAAC,EAAE,UAAU,YAAA,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oBAA5C,SAA4C,CAAC;oBAC7C,qBAAM,IAAA,kBAAU,EAAC,EAAE,UAAU,YAAA,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oBAA7C,SAA6C,CAAC;oBAExC,UAAU,GAAG,IAAA,sBAAa,EAAC,WAAW,CAAC,CAAC;oBACxC,SAAS,GAAG,IAAA,uBAAc,EAAC,WAAW,CAAC,CAAC;oBAE9C,WAAW,CAAC,YAAY,qBAAO,UAAU,OAAC,CAAC;oBAC3C,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;oBAC3C,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;oBAE1C,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,GAAG,SAAS,CAAC;oBAE5E,WAAW,CAAC,QAAQ,CAAC,gBAAgB,GAAG;wBACtC,cAAI,CAAC,OAAO,CAAC,WAAW,EAAE,cAAc,CAAC;wBACzC,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAU,CAAC;qBACnC,CAAC;oBAEF,+DAA+D;oBAC/D,WAAW,CAAC,QAAQ,CAAC,yBAAyB,GAAG,EAAE,CAAC;oBAEpD,0EAA0E;oBAC1E,WAAW,CAAC,QAAQ,CAAC,SAAS,GAAG;wBAC/B,iBAAiB;wBACjB,wCAAwC;wBACxC,gCAAgC;qBACjC,CAAC;oBAEF,sBAAO,WAAW,EAAC;;;;CACpB;AAxCD,0CAwCC","sourcesContent":["import path from 'path';\n\nimport { buildAsync } from './cli/commands/build';\nimport { initAsync } from './cli/commands/init';\nimport { getStoriesDir, getStoriesFile } from './cli/shared';\n\nexport async function withExpoStories(metroConfig: any) {\n  const { projectRoot, expoRoot = '' } = metroConfig;\n\n  const pkg = require(path.resolve(projectRoot, 'package.json'));\n\n  const watchRoots: string[] = [];\n\n  pkg.expo.symlinks.forEach((packageName) => {\n    const pathToPackage = path.resolve(expoRoot, 'packages', packageName);\n    watchRoots.push(pathToPackage);\n  });\n\n  await initAsync({ watchRoots, projectRoot });\n  await buildAsync({ watchRoots, projectRoot });\n\n  const storiesDir = getStoriesDir(metroConfig);\n  const storyFile = getStoriesFile(metroConfig);\n\n  metroConfig.watchFolders = [...watchRoots];\n  metroConfig.watchFolders.push(projectRoot);\n  metroConfig.watchFolders.push(storiesDir);\n\n  metroConfig.resolver.extraNodeModules['generated-expo-stories'] = storyFile;\n\n  metroConfig.resolver.nodeModulesPaths = [\n    path.resolve(projectRoot, 'node_modules'),\n    path.resolve(expoRoot, 'packages'),\n  ];\n\n  // Use Node-style module resolution instead of Haste everywhere\n  metroConfig.resolver.providesModuleNodeModules = [];\n\n  // Ignore test files and JS files in the native Android and Xcode projects\n  metroConfig.resolver.blockList = [\n    /\\/__tests__\\/.*/,\n    /.*\\/android\\/React(Android|Common)\\/.*/,\n    /.*\\/versioned-react-native\\/.*/,\n  ];\n\n  return metroConfig;\n}\n"]}