{"version":3,"file":"Button.js","sourceRoot":"","sources":["../../src/components/Button.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6DAAuE;AACvE,2CAA+B;AAC/B,6CAAoG;AAUpG,SAAgB,MAAM,CAAC,EAQT;IAPZ,IAAA,OAAO,aAAA,EACP,QAAQ,cAAA,EACR,eAAmB,EAAnB,OAAO,mBAAG,SAAS,KAAA,EACnB,KAAK,WAAA,EACL,UAAU,gBAAA,EACV,KAAK,WAAA,EACF,IAAI,cAPc,kEAQtB,CADQ;IAEP,IAAM,eAAe,GAAG,8BAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC;IAC9D,IAAM,eAAe,GAAG,8BAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC;IAE9D,OAAO,CACL,oBAAC,+BAAgB,aACf,KAAK,EAAE,CAAC,MAAM,CAAC,eAAe,EAAE,EAAE,eAAe,iBAAA,EAAE,EAAE,KAAK,CAAC,EAC3D,OAAO,EAAE,OAAO,IACZ,IAAI;QACP,OAAO,CAAC,KAAK,CAAC,IAAI,CACjB,oBAAC,mBAAI,aAAC,KAAK,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,IAAM,UAAU,GACzE,KAAK,CACD,CACR;QACA,QAAQ,CACQ,CACpB,CAAC;AACJ,CAAC;AAzBD,wBAyBC;AAED,IAAM,MAAM,GAAG,yBAAU,CAAC,MAAM,CAAC;IAC/B,eAAe,aACb,YAAY,EAAE,CAAC,EACf,eAAe,EAAE,2BAAO,CAAC,CAAC,CAAC,EAC3B,cAAc,EAAE,2BAAO,CAAC,CAAC,CAAC,IACvB,2BAAO,CAAC,MAAM,CAClB;IACD,UAAU,EAAE;QACV,QAAQ,EAAE,EAAE;QACZ,UAAU,EAAE,KAAK;QACjB,SAAS,EAAE,QAAQ;KACpB;CACF,CAAC,CAAC","sourcesContent":["import { spacing, lightTheme, shadows } from '@expo/styleguide-native';\nimport * as React from 'react';\nimport { Text, TouchableOpacity, StyleSheet, TouchableOpacityProps, TextProps } from 'react-native';\n\ntype ButtonProps = TouchableOpacityProps & {\n  style?: Pick<TouchableOpacityProps, 'style'>;\n  children?: React.ReactNode;\n  labelProps?: TextProps;\n  label?: string;\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'transparent' | 'ghost';\n};\n\nexport function Button({\n  onPress,\n  children,\n  variant = 'primary',\n  label,\n  labelProps,\n  style,\n  ...rest\n}: ButtonProps) {\n  const backgroundColor = lightTheme.button[variant].background;\n  const foregroundColor = lightTheme.button[variant].foreground;\n\n  return (\n    <TouchableOpacity\n      style={[styles.buttonContainer, { backgroundColor }, style]}\n      onPress={onPress}\n      {...rest}>\n      {Boolean(label) && (\n        <Text style={[styles.buttonText, { color: foregroundColor }]} {...labelProps}>\n          {label}\n        </Text>\n      )}\n      {children}\n    </TouchableOpacity>\n  );\n}\n\nconst styles = StyleSheet.create({\n  buttonContainer: {\n    borderRadius: 4,\n    paddingVertical: spacing[4],\n    marginVertical: spacing[2],\n    ...shadows.button,\n  },\n  buttonText: {\n    fontSize: 18,\n    fontWeight: '700',\n    textAlign: 'center',\n  },\n});\n"]}