{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/TestRunner/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import Immutable from 'immutable';\nimport jasmineModule from 'jasmine-core/lib/jasmine-core/jasmine';\nimport React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\n\nimport ExponentTest from './ExponentTest';\nimport Portal from './components/Portal';\nimport RunnerError from './components/RunnerError';\nimport Suites from './components/Suites';\n\ntype Props = {\n  selectedModules: { test: any }[];\n};\n\ntype State = {\n  portalChildShouldBeVisible: boolean;\n  state: any;\n  testPortal: React.ReactElement<any> | null;\n  numFailed: number;\n  done: boolean;\n  testRunnerError?: null;\n  results?: any;\n};\n\nconst initialState: State = {\n  portalChildShouldBeVisible: false,\n  state: Immutable.fromJS({\n    suites: [],\n    path: ['suites'], // Path to current 'children' List in state\n  }),\n  testPortal: null,\n  numFailed: 0,\n  done: false,\n  testRunnerError: null,\n  results: null,\n};\n\nexport default class TestScreen extends React.Component<Props, State> {\n  state = initialState;\n  _results = '';\n  _failures = '';\n  _scrollViewRef = null;\n  _isMounted: boolean | null = null;\n\n  componentDidMount() {\n    // We get test modules here to make sure that React Native will reload this component when tests were changed.\n    if (!this.props.selectedModules.length) {\n      console.log('[TEST_SUITE]', 'No selected modules');\n    }\n\n    this._runTests(this.props.selectedModules);\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  setPortalChild = (testPortal) => {\n    if (this._isMounted) return this.setState({ testPortal });\n  };\n\n  cleanupPortal = () => {\n    return new Promise<void>((resolve) => {\n      if (this._isMounted) this.setState({ testPortal: null }, resolve);\n    });\n  };\n\n  _runTests = async (modules) => {\n    // Reset results state\n    this.setState(initialState);\n\n    const { jasmineEnv, jasmine } = await this._setupJasmine();\n\n    await Promise.all(\n      modules.map((m) =>\n        m.test(jasmine, {\n          setPortalChild: this.setPortalChild,\n          cleanupPortal: this.cleanupPortal,\n        })\n      )\n    );\n\n    jasmineEnv.execute();\n  };\n\n  async _setupJasmine() {\n    // Init\n    jasmineModule.DEFAULT_TIMEOUT_INTERVAL = 10000;\n    const jasmineCore = jasmineModule.core(jasmineModule);\n    const jasmineEnv = jasmineCore.getEnv();\n\n    // Add our custom reporters too\n    jasmineEnv.addReporter(this._jasmineSetStateReporter());\n    jasmineEnv.addReporter(this._jasmineConsoleReporter());\n\n    // Get the interface and make it support `async ` by default\n    const jasmine = jasmineModule.interface(jasmineCore, jasmineEnv);\n    const doneIfy = (fn) => async (done) => {\n      try {\n        await Promise.resolve(fn());\n        done();\n      } catch (e) {\n        done.fail(e);\n      }\n    };\n    const oldIt = jasmine.it;\n    jasmine.it = (desc, fn, t) => oldIt.apply(jasmine, [desc, doneIfy(fn), t]);\n    const oldXit = jasmine.xit;\n    jasmine.xit = (desc, fn, t) => oldXit.apply(jasmine, [desc, doneIfy(fn), t]);\n    const oldFit = jasmine.fit;\n    jasmine.fit = (desc, fn, t) => oldFit.apply(jasmine, [desc, doneIfy(fn), t]);\n\n    return {\n      jasmineCore,\n      jasmineEnv,\n      jasmine,\n    };\n  }\n\n  // A jasmine reporter that writes results to the console\n  _jasmineConsoleReporter() {\n    const failedSpecs: any[] = [];\n    const app = this;\n\n    return {\n      specDone(result) {\n        if (result.status === 'passed' || result.status === 'failed') {\n          // Open log group if failed\n          const grouping = result.status === 'passed' ? '---' : '+++';\n          if (ExponentTest && ExponentTest.log) {\n            ExponentTest.log(`${result.status === 'passed' ? 'PASS' : 'FAIL'} ${result.fullName}`);\n          }\n          const emoji = result.status === 'passed' ? ':green_heart:' : ':broken_heart:';\n          console.log(`${grouping} ${emoji} ${result.fullName}`);\n          app._results += `${grouping} ${result.fullName}\\n`;\n\n          if (result.status === 'failed') {\n            app._failures += `${grouping} ${result.fullName}\\n`;\n            result.failedExpectations.forEach(({ matcherName = 'NO_MATCHER', message }) => {\n              if (ExponentTest && ExponentTest.log) {\n                ExponentTest.log(`${matcherName}: ${message}`);\n              }\n              console.log(`${matcherName}: ${message}`);\n              app._results += `${matcherName}: ${message}\\n`;\n              app._failures += `${matcherName}: ${message}\\n`;\n            });\n            failedSpecs.push(result);\n            if (app._isMounted) {\n              const result = {\n                magic: '[TEST-SUITE-INPROGRESS]',\n                failed: failedSpecs.length,\n                failures: app._failures,\n                results: app._results,\n              };\n              const jsonResult = JSON.stringify(result);\n              app.setState({ numFailed: failedSpecs.length, results: jsonResult });\n            }\n          }\n        }\n      },\n\n      jasmineStarted() {\n        console.log('--- tests started');\n      },\n\n      jasmineDone() {\n        console.log('--- tests done');\n        console.log('--- sending results to runner');\n\n        const result = {\n          magic: '[TEST-SUITE-END]', // NOTE: Runner/Run.js waits to see this\n          failed: failedSpecs.length,\n          failures: app._failures,\n          results: app._results,\n        };\n\n        const jsonResult = JSON.stringify(result);\n        if (app._isMounted) {\n          app.setState({ done: true, numFailed: failedSpecs.length, results: jsonResult });\n        }\n\n        if (Platform.OS === 'web') {\n          // This log needs to be an object for puppeteer tests\n          console.log(result);\n        } else {\n          console.log(jsonResult);\n        }\n\n        if (ExponentTest) {\n          ExponentTest.completed(\n            JSON.stringify({\n              failed: failedSpecs.length,\n              failures: app._failures,\n              results: app._results,\n            })\n          );\n        }\n      },\n    };\n  }\n\n  // A jasmine reporter that writes results to this.state\n  _jasmineSetStateReporter() {\n    const app = this;\n    return {\n      suiteStarted(jasmineResult) {\n        if (app._isMounted) {\n          app.setState(({ state }) => ({\n            state: state\n              .updateIn(state.get('path'), (children) =>\n                children.push(\n                  Immutable.fromJS({\n                    result: jasmineResult,\n                    children: [],\n                    specs: [],\n                  })\n                )\n              )\n              .update('path', (path) => path.push(state.getIn(path).size, 'children')),\n          }));\n        }\n      },\n\n      suiteDone() {\n        if (app._isMounted) {\n          app.setState(({ state }) => ({\n            state: state\n              .updateIn(state.get('path').pop().pop(), (children) =>\n                children.update(children.size - 1, (child) =>\n                  child.set('result', child.get('result'))\n                )\n              )\n              .update('path', (path) => path.pop().pop()),\n          }));\n        }\n      },\n\n      specStarted(jasmineResult) {\n        if (app._isMounted) {\n          app.setState(({ state }) => ({\n            state: state.updateIn(state.get('path').pop().pop(), (children) =>\n              children.update(children.size - 1, (child) =>\n                child.update('specs', (specs) => specs.push(Immutable.fromJS(jasmineResult)))\n              )\n            ),\n          }));\n        }\n      },\n\n      specDone(jasmineResult) {\n        if (app.state.testPortal) {\n          console.warn(\n            `The test portal has not been cleaned up by \\`${jasmineResult.fullName}\\`. Call \\`cleanupPortal\\` before finishing the test.`\n          );\n        }\n        if (app._isMounted) {\n          app.setState(({ state }) => ({\n            state: state.updateIn(state.get('path').pop().pop(), (children) =>\n              children.update(children.size - 1, (child) =>\n                child.update('specs', (specs) =>\n                  specs.set(specs.size - 1, Immutable.fromJS(jasmineResult))\n                )\n              )\n            ),\n          }));\n        }\n      },\n    };\n  }\n\n  render() {\n    const {\n      testRunnerError,\n      results,\n      done,\n      numFailed,\n      state,\n      portalChildShouldBeVisible,\n      testPortal,\n    } = this.state;\n    if (testRunnerError) {\n      return <RunnerError>{testRunnerError}</RunnerError>;\n    }\n    return (\n      <View testID=\"test_suite_container\" style={styles.container}>\n        <Suites numFailed={numFailed} results={results} done={done} suites={state.get('suites')} />\n        <Portal isVisible={portalChildShouldBeVisible}>{testPortal}</Portal>\n      </View>\n    );\n  }\n}\n\nexport { TestScreen as TestRunner };\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'stretch',\n    justifyContent: 'center',\n  },\n});\n"]}