{"version":3,"file":"watch.js","sourceRoot":"","sources":["../../../src/cli/commands/watch.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAwB;AAGxB,sDAAqD;AACrD,wDAAuD;AAEvD,SAAsB,UAAU,CAAC,MAAoB;;;;YAC3C,UAAU,GAAkB,MAAM,WAAxB,EAAE,WAAW,GAAK,MAAM,YAAX,CAAY;gCAEhC,SAAS;gBAClB,IAAM,OAAO,GAAG,IAAA,cAAI,EAAC,SAAS,EAAE;oBAC9B,IAAI,EAAE,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC;oBACpF,OAAO,EAAE,CAAC,cAAc,CAAC;oBACzB,QAAQ,EAAE,IAAI;iBACf,CAAC,CAAC;gBAEH,kDAAkD;gBAClD,0DAA0D;gBAC1D,oCAAoC;gBACpC,MAAM;gBAEN,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,UAAgB,OAAe;;;;wCAC/C,qBAAM,IAAA,iCAAe,EAAC,CAAC,OAAO,CAAC,EAAE,EAAE,SAAS,WAAA,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oCAA5D,SAA4D,CAAC;oCAC7D,OAAO,CAAC,GAAG,CAAC,gBAAS,OAAO,qBAAkB,CAAC,CAAC;;;;;iBACjD,CAAC,CAAC;gBAEH,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAgB,OAAe;;;;wCAClD,qBAAM,IAAA,mCAAgB,EAAC,OAAO,EAAE,EAAE,SAAS,WAAA,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oCAA3D,SAA2D,CAAC;oCAC5D,OAAO,CAAC,GAAG,CAAC,kBAAW,OAAO,uBAAoB,CAAC,CAAC;;;;;iBACrD,CAAC,CAAC;gBAEH,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE;oBAClB,OAAO,CAAC,GAAG,CAAC,kCAA2B,SAAS,CAAE,CAAC,CAAC;gBACtD,CAAC,CAAC,CAAC;;YAxBL,WAAkC,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU;gBAAvB,SAAS;wBAAT,SAAS;aAyBnB;;;;CACF;AA7BD,gCA6BC","sourcesContent":["import sane from 'sane';\n\nimport { StoryOptions } from '../../types';\nimport { addStoriesAsync } from '../addStoriesAsync';\nimport { removeStoryAsync } from '../removeStoryAsync';\n\nexport async function watchAsync(config: StoryOptions) {\n  const { watchRoots, projectRoot } = config;\n\n  for (const watchRoot of watchRoots) {\n    const watcher = sane(watchRoot, {\n      glob: ['**/*.stories.tsx', '**/*.stories.js', '**/*.stories.ts', '**/*.stories.jsx'],\n      ignored: ['node_modules'],\n      watchman: true,\n    });\n\n    // fast refresh will capture any changes to a file\n    // any other listeners would need to go through websockets\n    // watcher.on('change', relPath => {\n    // });\n\n    watcher.on('add', async function (relPath: string) {\n      await addStoriesAsync([relPath], { watchRoot, projectRoot });\n      console.log(`Added ${relPath} file to stories`);\n    });\n\n    watcher.on('delete', async function (relPath: string) {\n      await removeStoryAsync(relPath, { watchRoot, projectRoot });\n      console.log(`Removed ${relPath} file from stories`);\n    });\n\n    watcher.on('ready', () => {\n      console.log(`Watching for changes in ${watchRoot}`);\n    });\n  }\n}\n"]}