// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lints: fixtures/typescript-analysis-00.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [],
  "output": "type T = {
  a?: {
    b?: {
      c: string;
      method?: () => void;
    };
  };
};

type T2 = {
  a?: {
    b: {
      c: string;
      method?: () => void;
    };
  };
};

export function myFunc(foo: T | null) {
  return foo?.a?.b?.c;
}

export function myFunc2(foo: T2 | null) {
  foo?.a?.b.method && foo.a.b.method();
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "@typescript-eslint/ban-ts-comment",
      ],
      "ruleId": "@typescript-eslint/prefer-ts-expect-error",
    },
  ],
  "warningCount": 0,
}
`;

exports[`lints: fixtures/typescript-analysis-01.ts 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 1,
      "endColumn": 21,
      "endLine": 4,
      "line": 4,
      "message": "For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust iteration method such as for-of or array.forEach instead.",
      "messageId": "forInViolation",
      "nodeType": null,
      "ruleId": "@typescript-eslint/no-for-in-array",
      "severity": 2,
    },
  ],
  "source": "export const arr = [1, 2, 3];

let sum = '';
for (const b in arr) {
  sum += b;
}
export { sum };",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "@typescript-eslint/ban-ts-comment",
      ],
      "ruleId": "@typescript-eslint/prefer-ts-expect-error",
    },
  ],
  "warningCount": 0,
}
`;

exports[`lints: fixtures/typescript-analysis-02.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 12,
      "endColumn": 14,
      "endLine": 4,
      "line": 4,
      "message": "Prefer using nullish coalescing operator (\`??\`) instead of a logical or (\`||\`), as it is a safer operator.",
      "messageId": "preferNullishOverOr",
      "nodeType": "Punctuator",
      "ruleId": "@typescript-eslint/prefer-nullish-coalescing",
      "severity": 1,
      "suggestions": [
        {
          "desc": "Fix to nullish coalescing operator (\`??\`).",
          "fix": {
            "range": [
              162,
              164,
            ],
            "text": "??",
          },
          "messageId": "suggestNullish",
        },
      ],
    },
  ],
  "source": "export function getBlah(): string | null {
  const a: string | null = Math.random() ? '' : null;
  const b: string | null = Math.random() ? '' : null;
  return a || b;
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "@typescript-eslint/ban-ts-comment",
      ],
      "ruleId": "@typescript-eslint/prefer-ts-expect-error",
    },
  ],
  "warningCount": 1,
}
`;

exports[`lints: fixtures/typescript-analysis-03.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 9,
      "endColumn": 10,
      "endLine": 2,
      "line": 2,
      "message": "Expected an error object to be thrown.",
      "messageId": "object",
      "nodeType": "Literal",
      "ruleId": "@typescript-eslint/only-throw-error",
      "severity": 1,
    },
  ],
  "source": "export function wat() {
  throw 3;
}",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "@typescript-eslint/ban-ts-comment",
      ],
      "ruleId": "@typescript-eslint/prefer-ts-expect-error",
    },
  ],
  "warningCount": 1,
}
`;

exports[`lints: fixtures/typescript-analysis-04.ts 1`] = `
{
  "errorCount": 1,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 3,
      "endColumn": 22,
      "endLine": 8,
      "line": 8,
      "message": "Unexpected \`await\` of a non-Promise (non-"Thenable") value.",
      "messageId": "await",
      "nodeType": "AwaitExpression",
      "ruleId": "@typescript-eslint/await-thenable",
      "severity": 1,
      "suggestions": [
        {
          "desc": "Remove unnecessary \`await\`.",
          "fix": {
            "range": [
              156,
              161,
            ],
            "text": "",
          },
          "messageId": "removeAwait",
        },
      ],
    },
    {
      "column": 15,
      "endColumn": 37,
      "endLine": 11,
      "line": 11,
      "message": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
      "messageId": "invalidVoidExpr",
      "nodeType": "CallExpression",
      "ruleId": "@typescript-eslint/no-confusing-void-expression",
      "severity": 1,
    },
    {
      "column": 7,
      "endColumn": 14,
      "endLine": 15,
      "line": 15,
      "message": "Expected non-Promise value in a boolean conditional.",
      "messageId": "conditional",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-misused-promises",
      "severity": 2,
    },
    {
      "column": 5,
      "endColumn": 12,
      "endLine": 21,
      "line": 21,
      "message": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the \`void\` operator.",
      "messageId": "floatingVoid",
      "nodeType": "ExpressionStatement",
      "ruleId": "@typescript-eslint/no-floating-promises",
      "severity": 1,
      "suggestions": [
        {
          "desc": "Add void operator to ignore.",
          "fix": {
            "range": [
              404,
              404,
            ],
            "text": "void ",
          },
          "messageId": "floatingFixVoid",
        },
        {
          "desc": "Add await operator.",
          "fix": {
            "range": [
              404,
              404,
            ],
            "text": "await ",
          },
          "messageId": "floatingFixAwait",
        },
      ],
    },
  ],
  "output": "async function test() {
  return await Promise.resolve('blah');
}

export async function wat() {
  // await-thenable
  const createValue = () => 'value';
  await createValue();

  // no-confusing-void-expression
  console.log(alert('Are you sure?'));

  // no-misused-promises
  const promise = Promise.resolve('value');
  if (promise) {
    console.log('hi');
  }

  // no-floating-promises
  try {
    test(); // needs to be awaited, otherwise try/catch is useless.
  } catch {}
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [
    {
      "replacedBy": [
        "@typescript-eslint/ban-ts-comment",
      ],
      "ruleId": "@typescript-eslint/prefer-ts-expect-error",
    },
  ],
  "warningCount": 3,
}
`;
