// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`doesn't conflict with Prettier: message 1`] = `
"No rules that are unnecessary or conflict with Prettier were found.
"
`;

exports[`doesn't conflict with Prettier: success 1`] = `true`;

exports[`lints with the React Native config: fixtures/all-00.js 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 4,
  "messages": [
    {
      "column": 14,
      "endColumn": 15,
      "endLine": 30,
      "line": 30,
      "message": "'e' is defined but never used. Allowed unused args must match /^_/u.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 1,
    },
    {
      "column": 9,
      "endColumn": 10,
      "endLine": 44,
      "fix": {
        "range": [
          531,
          541,
        ],
        "text": "const f = 1;",
      },
      "line": 44,
      "message": "'f' is never reassigned. Use 'const' instead.",
      "messageId": "useConst",
      "nodeType": "Identifier",
      "ruleId": "prefer-const",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 1,
      "endLine": 48,
      "fix": {
        "range": [
          574,
          575,
        ],
        "text": "",
      },
      "line": 47,
      "message": "Delete \`⏎\`",
      "messageId": "delete",
      "nodeType": null,
      "ruleId": "prettier/prettier",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 5,
      "endLine": 49,
      "fix": {
        "range": [
          598,
          602,
        ],
        "text": "",
      },
      "line": 49,
      "message": "Delete \`····\`",
      "messageId": "delete",
      "nodeType": null,
      "ruleId": "prettier/prettier",
      "severity": 1,
    },
    {
      "column": 9,
      "endColumn": 11,
      "endLine": 60,
      "fix": {
        "range": [
          715,
          717,
        ],
        "text": "* ",
      },
      "line": 60,
      "message": "Replace \`·*\` with \`*·\`",
      "messageId": "replace",
      "nodeType": null,
      "ruleId": "prettier/prettier",
      "severity": 1,
    },
  ],
  "source": "import 'hi';

import a from 'a';
import { b } from 'b';
import c, { c1 } from 'c';
import * as d from 'd';

import e from './e';

export * as f from './f';

export class Example {
  static s = {
    a,
    b,
  };

  m = {};
  #n = null;
  x = 1_000;
  y = 100n;

  hi() {
    _fn() ?? this.byeAsync();
    this.m &&= {};
    Example.s?.a?.();

    try {
      _fn();
    } catch (e) {
      _fn();
    }

    try {
      _fn();
    } catch (_ignored) {
      _fn();
    }

    this.#privateMethod();
  }

  async byeAsync() {
    let f = 1;
    _fn(a, b, c, c1, d, e, f);


    await import('z');
    
    for await (const v of gen()) {
      _fn(v);
    }
  }

  #privateMethod() {}
}

function _fn() {}

function *gen() {}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 5,
}
`;

exports[`lints with the React Native config: fixtures/all-01.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 3,
      "endColumn": 18,
      "endLine": 18,
      "line": 18,
      "message": "Duplicate name 'm'.",
      "messageId": "unexpected",
      "nodeType": "PropertyDefinition",
      "ruleId": "@typescript-eslint/no-dupe-class-members",
      "severity": 1,
    },
    {
      "column": 14,
      "endColumn": 25,
      "endLine": 25,
      "line": 25,
      "message": "'_notIgnored' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": null,
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
  ],
  "source": "import 'hi';

import a from 'a';
import { b } from 'b';
import c, { c1 } from 'c';
import * as d from 'd';

import e from './e';

@d
export class Example {
  static s = {
    a,
    b,
  };

  m: object = {};
  m: object = {};

  hi(): void {
    _fn();

    try {
      _fn();
    } catch (_notIgnored) {
      _fn();
    }
  }

  async byeAsync(): Promise<void> {
    _fn(a, b, c, c1, d, e);
  }
}

function _fn(...args: any): void {}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 2,
}
`;

exports[`lints with the React Native config: fixtures/all-02.js 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 7,
      "endColumn": 14,
      "endLine": 1,
      "line": 1,
      "message": "'unused1' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 1,
    },
    {
      "column": 10,
      "endColumn": 17,
      "endLine": 3,
      "line": 3,
      "message": "'unused2' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 1,
    },
    {
      "column": 9,
      "endColumn": 16,
      "endLine": 4,
      "line": 4,
      "message": "'unused3' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 1,
    },
  ],
  "source": "const unused1 = 0;

function unused2() {
  const unused3 = 'hi';
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 3,
}
`;

exports[`lints with the React Native config: fixtures/all-03.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 1,
  "messages": [
    {
      "column": 7,
      "endColumn": 16,
      "endLine": 1,
      "line": 1,
      "message": "'tsUnused1' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": null,
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    {
      "column": 10,
      "endColumn": 19,
      "endLine": 3,
      "line": 3,
      "message": "'tsUnused2' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": null,
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    {
      "column": 9,
      "endColumn": 15,
      "endLine": 5,
      "line": 5,
      "message": "'asCast' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": null,
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    {
      "column": 9,
      "endColumn": 25,
      "endLine": 6,
      "line": 6,
      "message": "'angleBracketCast' is assigned a value but never used.",
      "messageId": "unusedVar",
      "nodeType": null,
      "ruleId": "@typescript-eslint/no-unused-vars",
      "severity": 1,
    },
    {
      "column": 28,
      "endColumn": 37,
      "endLine": 6,
      "fix": {
        "range": [
          125,
          134,
        ],
        "text": "x as string",
      },
      "line": 6,
      "message": "Use 'as string' instead of '<string>'.",
      "messageId": "as",
      "nodeType": "TSTypeAssertion",
      "ruleId": "@typescript-eslint/consistent-type-assertions",
      "severity": 1,
    },
  ],
  "source": "const tsUnused1 = 0;

function tsUnused2() {
  const x: any = 'hi';
  const asCast = x as string;
  const angleBracketCast = <string>x;
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 5,
}
`;

exports[`lints with the React Native config: fixtures/all-04.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 1,
  "messages": [
    {
      "column": 25,
      "endColumn": 38,
      "endLine": 1,
      "fix": {
        "range": [
          24,
          37,
        ],
        "text": "string[]",
      },
      "line": 1,
      "message": "Array type using 'Array<string>' is forbidden. Use 'string[]' instead.",
      "messageId": "errorStringArray",
      "nodeType": "TSTypeReference",
      "ruleId": "@typescript-eslint/array-type",
      "severity": 1,
    },
  ],
  "source": "export const blah = (): Array<string> => {
  return ['1'];
};
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 1,
}
`;

exports[`lints with the React Native config: fixtures/all-05.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 2,
  "messages": [
    {
      "column": 21,
      "endColumn": 23,
      "endLine": 1,
      "fix": {
        "range": [
          21,
          22,
        ],
        "text": "",
      },
      "line": 1,
      "message": "Forbidden extra non-null assertion.",
      "messageId": "noExtraNonNullAssertion",
      "nodeType": "TSNonNullExpression",
      "ruleId": "@typescript-eslint/no-extra-non-null-assertion",
      "severity": 1,
    },
    {
      "column": 25,
      "endColumn": 25,
      "endLine": 1,
      "fix": {
        "range": [
          24,
          24,
        ],
        "text": "
",
      },
      "line": 1,
      "message": "Insert \`⏎\`",
      "messageId": "insert",
      "nodeType": null,
      "ruleId": "prettier/prettier",
      "severity": 1,
    },
  ],
  "source": "export const blah = 3!!;",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 2,
}
`;

exports[`lints with the React Native config: fixtures/all-06.ts 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 6,
  "messages": [
    {
      "column": 26,
      "endColumn": 32,
      "endLine": 1,
      "fix": {
        "range": [
          25,
          31,
        ],
        "text": "number",
      },
      "line": 1,
      "message": "Prefer using the primitive \`number\` as a type name, rather than the upper-cased \`Number\`.",
      "messageId": "bannedClassType",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-wrapper-object-types",
      "severity": 1,
    },
    {
      "column": 27,
      "endColumn": 34,
      "endLine": 2,
      "fix": {
        "range": [
          73,
          80,
        ],
        "text": "boolean",
      },
      "line": 2,
      "message": "Prefer using the primitive \`boolean\` as a type name, rather than the upper-cased \`Boolean\`.",
      "messageId": "bannedClassType",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-wrapper-object-types",
      "severity": 1,
    },
    {
      "column": 26,
      "endColumn": 32,
      "endLine": 3,
      "fix": {
        "range": [
          121,
          127,
        ],
        "text": "symbol",
      },
      "line": 3,
      "message": "Prefer using the primitive \`symbol\` as a type name, rather than the upper-cased \`Symbol\`.",
      "messageId": "bannedClassType",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-wrapper-object-types",
      "severity": 1,
    },
    {
      "column": 26,
      "endColumn": 32,
      "endLine": 4,
      "fix": {
        "range": [
          168,
          174,
        ],
        "text": "object",
      },
      "line": 4,
      "message": "Prefer using the primitive \`object\` as a type name, rather than the upper-cased \`Object\`.",
      "messageId": "bannedClassType",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-wrapper-object-types",
      "severity": 1,
    },
    {
      "column": 26,
      "endColumn": 32,
      "endLine": 5,
      "fix": {
        "range": [
          215,
          221,
        ],
        "text": "string",
      },
      "line": 5,
      "message": "Prefer using the primitive \`string\` as a type name, rather than the upper-cased \`String\`.",
      "messageId": "bannedClassType",
      "nodeType": "Identifier",
      "ruleId": "@typescript-eslint/no-wrapper-object-types",
      "severity": 1,
    },
    {
      "column": 35,
      "endColumn": 37,
      "endLine": 6,
      "line": 6,
      "message": "The \`{}\` ("empty object") type allows any non-nullish value, including literals like \`0\` and \`""\`.
- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.
- If you want a type meaning "any object", you probably want \`object\` instead.
- If you want a type meaning "any value", you probably want \`unknown\` instead.",
      "messageId": "noEmptyObject",
      "nodeType": "TSTypeLiteral",
      "ruleId": "@typescript-eslint/no-empty-object-type",
      "severity": 1,
      "suggestions": [
        {
          "data": {
            "replacement": "object",
          },
          "desc": "Replace \`{}\` with \`object\`.",
          "fix": {
            "range": [
              271,
              273,
            ],
            "text": "object",
          },
          "messageId": "replaceEmptyObjectType",
        },
        {
          "data": {
            "replacement": "unknown",
          },
          "desc": "Replace \`{}\` with \`unknown\`.",
          "fix": {
            "range": [
              271,
              273,
            ],
            "text": "unknown",
          },
          "messageId": "replaceEmptyObjectType",
        },
      ],
    },
    {
      "column": 52,
      "endColumn": 52,
      "endLine": 6,
      "fix": {
        "range": [
          288,
          288,
        ],
        "text": "
",
      },
      "line": 6,
      "message": "Insert \`⏎\`",
      "messageId": "insert",
      "nodeType": null,
      "ruleId": "prettier/prettier",
      "severity": 1,
    },
  ],
  "source": "export const numberTest: Number | null = null;
export const booleanTest: Boolean | null = null;
export const symbolTest: Symbol | null = null;
export const objectTest: Object | null = null;
export const stringTest: String | null = null;
export const objectShorthandTest: {} | null = null;",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 7,
}
`;

exports[`lints with the React Native config: fixtures/all-07.js 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 10,
  "messages": [
    {
      "column": 11,
      "endColumn": 23,
      "endLine": 1,
      "fix": {
        "range": [
          23,
          23,
        ],
        "text": "
",
      },
      "line": 1,
      "message": "There should be at least one empty line between import groups",
      "nodeType": "CallExpression",
      "ruleId": "import/order",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 21,
      "endLine": 2,
      "fix": {
        "range": [
          44,
          44,
        ],
        "text": "",
      },
      "line": 2,
      "message": "Import in body of module; reorder to top.",
      "nodeType": "ImportDeclaration",
      "ruleId": "import/first",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 21,
      "endLine": 2,
      "fix": {
        "range": [
          44,
          44,
        ],
        "text": "
",
      },
      "line": 2,
      "message": "There should be at least one empty line between import groups",
      "nodeType": "ImportDeclaration",
      "ruleId": "import/order",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 21,
      "endLine": 2,
      "fix": {
        "range": [
          0,
          45,
        ],
        "text": "import d from './d';
const a = require('a');
",
      },
      "line": 2,
      "message": "\`./d\` import should occur before import of \`a\`",
      "nodeType": "ImportDeclaration",
      "ruleId": "import/order",
      "severity": 1,
    },
    {
      "column": 11,
      "endColumn": 23,
      "endLine": 3,
      "fix": {
        "range": [
          68,
          68,
        ],
        "text": "
",
      },
      "line": 3,
      "message": "There should be at least one empty line between import groups",
      "nodeType": "CallExpression",
      "ruleId": "import/order",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 19,
      "endLine": 4,
      "fix": {
        "range": [
          87,
          87,
        ],
        "text": "",
      },
      "line": 4,
      "message": "Import in body of module; reorder to top.",
      "nodeType": "ImportDeclaration",
      "ruleId": "import/first",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 19,
      "endLine": 4,
      "fix": {
        "range": [
          0,
          88,
        ],
        "text": "import c from 'c';
const a = require('a');
import d from './d';
const e = require('e');
",
      },
      "line": 4,
      "message": "\`c\` import should occur before import of \`a\`",
      "nodeType": "ImportDeclaration",
      "ruleId": "import/order",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 19,
      "endLine": 5,
      "fix": {
        "range": [
          0,
          106,
        ],
        "text": "import d from './d';
import c from 'c';
import b from 'b';
const a = require('a');
const e = require('e');",
      },
      "line": 5,
      "message": "Import in body of module; reorder to top.",
      "nodeType": "ImportDeclaration",
      "ruleId": "import/first",
      "severity": 1,
    },
    {
      "column": 1,
      "endColumn": 19,
      "endLine": 5,
      "fix": {
        "range": [
          0,
          107,
        ],
        "text": "import b from 'b';
const a = require('a');
import d from './d';
const e = require('e');
import c from 'c';
",
      },
      "line": 5,
      "message": "\`b\` import should occur before import of \`a\`",
      "nodeType": "ImportDeclaration",
      "ruleId": "import/order",
      "severity": 1,
    },
    {
      "column": 34,
      "endColumn": 34,
      "endLine": 7,
      "fix": {
        "range": [
          141,
          141,
        ],
        "text": "
",
      },
      "line": 7,
      "message": "Insert \`⏎\`",
      "messageId": "insert",
      "nodeType": null,
      "ruleId": "prettier/prettier",
      "severity": 1,
    },
  ],
  "source": "const a = require('a');
import d from './d';
const e = require('e');
import c from 'c';
import b from 'b';

export default a + b + c + d + e;",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 10,
}
`;

exports[`lints with the React Native config: fixtures/web-native-00.js 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [],
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/web-native-01.js 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [],
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/web-native-02.js 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [],
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 0,
}
`;

exports[`lints with the React Native config: fixtures/web-native-03.js 1`] = `
{
  "errorCount": 0,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 1,
  "messages": [
    {
      "column": 23,
      "endColumn": 31,
      "endLine": 5,
      "fix": {
        "range": [
          123,
          131,
        ],
        "text": ""test"",
      },
      "line": 5,
      "message": "Curly braces are unnecessary here.",
      "messageId": "unnecessaryCurly",
      "nodeType": "JSXExpressionContainer",
      "ruleId": "react/jsx-curly-brace-presence",
      "severity": 1,
    },
  ],
  "source": "import React from 'react';
import { View } from 'react-native';

export default function Example() {
  return <View testID={'test'} />;
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 1,
}
`;

exports[`lints with the React Native config: fixtures/web-native-04.js 1`] = `
{
  "errorCount": 2,
  "fatalErrorCount": 0,
  "fixableErrorCount": 0,
  "fixableWarningCount": 0,
  "messages": [
    {
      "column": 5,
      "endColumn": 14,
      "endLine": 10,
      "line": 10,
      "message": "React Hook "useEffect" is called conditionally. React Hooks must be called in the exact same order in every component render.",
      "nodeType": "Identifier",
      "ruleId": "react-hooks/rules-of-hooks",
      "severity": 2,
    },
    {
      "column": 10,
      "endColumn": 18,
      "endLine": 14,
      "line": 14,
      "message": "'notAHook' is defined but never used.",
      "messageId": "unusedVar",
      "nodeType": "Identifier",
      "ruleId": "no-unused-vars",
      "severity": 1,
    },
    {
      "column": 3,
      "endColumn": 12,
      "endLine": 15,
      "line": 15,
      "message": "React Hook "useEffect" is called in function "notAHook" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word "use".",
      "nodeType": "Identifier",
      "ruleId": "react-hooks/rules-of-hooks",
      "severity": 2,
    },
  ],
  "source": "import { useEffect } from 'react';

export default function Example(props) {
  const { dependentVariable } = props;
  useEffect(() => {
    console.log(dependentVariable);
  }, []);

  if (props.badConditionalHook) {
    useEffect(() => {});
  }
}

function notAHook() {
  useEffect(() => {});
}
",
  "suppressedMessages": [],
  "usedDeprecatedRules": [],
  "warningCount": 1,
}
`;
