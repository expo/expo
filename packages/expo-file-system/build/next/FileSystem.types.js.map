{"version":3,"file":"FileSystem.types.js","sourceRoot":"","sources":["../../src/next/FileSystem.types.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * A string representing a file or directory path.\n */\nexport type Path = string;\n\n/**\n * Represents a directory on the file system.\n */\nexport declare class Directory {\n  /**\n   * Creates an instance of a directory.\n   * @param path -  A string representing an arbitrary location on the file system. The location does not need to exist, or it may already contain a file.\n   * @example\n   * ```ts\n   * const directory = new Directory(\"file:///path/to/directory\");\n   * ```\n   */\n  constructor(path: Path);\n\n  /**\n   * Represents the directory path.\n   */\n  readonly path: Path;\n\n  /**\n   * Validates a directory path.\n   * @hidden This method is not meant to be used directly. It is called by the JS constructor.\n   */\n  validatePath(): void;\n\n  /**\n   * Deletes a directory.\n   */\n  delete(): void;\n\n  /**\n   * Checks if a directory exists.\n   *\n   * @returns `true` if the directory exists, `false` otherwise.\n   */\n  exists(): boolean;\n\n  /**\n   * Creates a directory.\n   */\n  create(): void;\n  /**\n   * Copies a directory.\n   */\n  copy(destination: Directory | File);\n  /**\n   * Moves a directory.\n   */\n  move(destination: Directory | File);\n}\n\n/**\n * Represents a file on the file system.\n */\nexport declare class File {\n  /**\n   * Creates an instance of File.\n   *\n   * @param path - A string representing an arbitrary location on the file system. The location does not need to exist, or it may already contain a directory.\n   */\n  constructor(path: Path);\n\n  /**\n   * Represents the file path.\n   */\n  readonly path: string;\n\n  /**\n   * Validates a directory path.\n   * @hidden This method is not meant to be used directly. It is called by the JS constructor.\n   */\n  validatePath(): void;\n\n  /**\n   * Retrieves text from the file.\n   * @returns The contents of the file as string.\n   */\n  text(): string;\n\n  /**\n   * Writes content to the file.\n   * @param content - The content to write into the file.\n   */\n  write(content: string): void;\n\n  /**\n   * Deletes a file.\n   */\n  delete(): void;\n\n  /**\n   * Checks if a file exists.\n   * @returns `true` if the file exists, `false` otherwise.\n   */\n  exists(): boolean;\n\n  /**\n   * Creates a file.\n   */\n  create(): void;\n\n  /**\n   * Copies a file.\n   */\n  copy(destination: Directory | File);\n\n  /**\n   * Moves a directory.\n   */\n  move(destination: Directory | File);\n}\n"]}