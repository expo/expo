{"version":3,"file":"Battery.js","sourceRoot":"","sources":["../src/Battery.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\n\nimport {\n  BatteryLevelEvent,\n  BatteryState,\n  BatteryStateEvent,\n  PowerModeEvent,\n  PowerState,\n} from './Battery.types';\nimport ExpoBattery from './ExpoBattery';\n\nconst BatteryEventEmitter = new EventEmitter(ExpoBattery);\n\n// @needsAudit\n/**\n * Resolves with whether the battery API is available on the current device. The value of this\n * property is `true` on Android and physical iOS devices and `false` on iOS simulators. On web,\n * it depends on whether the browser supports the web battery API.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return Promise.resolve((ExpoBattery && ExpoBattery.isSupported) || false);\n}\n\n// @needsAudit\n/**\n * Gets the battery level of the device as a number between `0` and `1`, inclusive. If the device\n * does not support retrieving the battery level, this method returns `-1`. On web, this method\n * always returns `-1`.\n * @return A `Promise` that fulfils with a number between `0` and `1` representing the battery level,\n * or `-1` if the device does not provide it.\n * @example\n * ```ts\n * await Battery.getBatteryLevelAsync();\n * // 0.759999\n * ```\n */\nexport async function getBatteryLevelAsync(): Promise<number> {\n  if (!ExpoBattery.getBatteryLevelAsync) {\n    return -1;\n  }\n  return await ExpoBattery.getBatteryLevelAsync();\n}\n\n// @needsAudit\n/**\n * Tells the battery's current state. On web, this always returns `BatteryState.UNKNOWN`.\n * @return Returns a `Promise` which fulfills with a [`Battery.BatteryState`](#batterystate) enum\n * value for whether the device is any of the four states.\n * @example\n * ```ts\n * await Battery.getBatteryStateAsync();\n * // BatteryState.CHARGING\n * ```\n */\nexport async function getBatteryStateAsync(): Promise<BatteryState> {\n  if (!ExpoBattery.getBatteryStateAsync) {\n    return BatteryState.UNKNOWN;\n  }\n  return await ExpoBattery.getBatteryStateAsync();\n}\n\n// @needsAudit\n/**\n * Gets the current status of Low Power mode on iOS and Power Saver mode on Android. If a platform\n * doesn't support Low Power mode reporting (like web, older Android devices), the reported low-power\n * state is always `false`, even if the device is actually in low-power mode.\n * @return Returns a `Promise` which fulfills with a `boolean` value of either `true` or `false`,\n * indicating whether low power mode is enabled or disabled, respectively.\n * @example\n * Low Power Mode (iOS) or Power Saver Mode (Android) are enabled.\n * ```ts\n * await Battery.isLowPowerModeEnabledAsync();\n * // true\n * ```\n */\nexport async function isLowPowerModeEnabledAsync(): Promise<boolean> {\n  if (!ExpoBattery.isLowPowerModeEnabledAsync) {\n    return false;\n  }\n  return await ExpoBattery.isLowPowerModeEnabledAsync();\n}\n\n// @needsAudit\n/**\n * Checks whether battery optimization is enabled for your application.\n * If battery optimization is enabled for your app, background tasks might be affected\n * when your app goes into doze mode state. (only on Android 6.0 or later)\n * @return Returns a `Promise` which fulfills with a `boolean` value of either `true` or `false`,\n * indicating whether the battery optimization is enabled or disabled, respectively. (Android only)\n * @example\n * ```ts\n * await Battery.isBatteryOptimizationEnabledAsync();\n * // true\n * ```\n */\nexport async function isBatteryOptimizationEnabledAsync(): Promise<boolean> {\n  if (!ExpoBattery.isBatteryOptimizationEnabledAsync) {\n    return false;\n  }\n  return await ExpoBattery.isBatteryOptimizationEnabledAsync();\n}\n\n/**\n * Gets the power state of the device including the battery level, whether it is plugged in, and if\n * the system is currently operating in Low Power Mode (iOS) or Power Saver Mode (Android). This\n * method re-throws any errors that occur when retrieving any of the power-state information.\n * @return Returns a `Promise` which fulfills with [`PowerState`](#powerstate) object.\n * @example\n * ```ts\n * await Battery.getPowerStateAsync();\n * // {\n * //   batteryLevel: 0.759999,\n * //   batteryState: BatteryState.UNPLUGGED,\n * //   lowPowerMode: true,\n * // }\n * ```\n */\nexport async function getPowerStateAsync(): Promise<PowerState> {\n  const [batteryLevel, batteryState, lowPowerMode] = await Promise.all([\n    getBatteryLevelAsync(),\n    getBatteryStateAsync(),\n    isLowPowerModeEnabledAsync(),\n  ]);\n  return {\n    batteryLevel,\n    batteryState,\n    lowPowerMode,\n  };\n}\n\n// @needsAudit\n/**\n * Subscribe to the battery level change updates.\n *\n * On iOS devices, the event fires when the battery level drops one percent or more, but is only\n * fired once per minute at maximum.\n *\n * On Android devices, the event fires only when significant changes happens, which is when the\n * battery level drops below [`\"android.intent.action.BATTERY_LOW\"`](https://developer.android.com/reference/android/content/Intent#ACTION_BATTERY_LOW)\n * or rises above [`\"android.intent.action.BATTERY_OKAY\"`](https://developer.android.com/reference/android/content/Intent#ACTION_BATTERY_OKAY)\n * from a low battery level. See [here](https://developer.android.com/training/monitoring-device-state/battery-monitoring)\n * to read more from the Android docs.\n *\n * On web, the event never fires.\n * @param listener A callback that is invoked when battery level changes. The callback is provided a\n * single argument that is an object with a `batteryLevel` key.\n * @return A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.s\n */\nexport function addBatteryLevelListener(\n  listener: (event: BatteryLevelEvent) => void\n): Subscription {\n  return BatteryEventEmitter.addListener('Expo.batteryLevelDidChange', listener);\n}\n\n// @needsAudit\n/**\n * Subscribe to the battery state change updates to receive an object with a [`Battery.BatteryState`](#batterystate)\n * enum value for whether the device is any of the four states.\n *\n * On web, the event never fires.\n * @param listener A callback that is invoked when battery state changes. The callback is provided a\n * single argument that is an object with a `batteryState` key.\n * @return A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.\n */\nexport function addBatteryStateListener(\n  listener: (event: BatteryStateEvent) => void\n): Subscription {\n  return BatteryEventEmitter.addListener('Expo.batteryStateDidChange', listener);\n}\n\n// @needsAudit\n/**\n * Subscribe to Low Power Mode (iOS) or Power Saver Mode (Android) updates. The event fires whenever\n * the power mode is toggled.\n *\n * On web, the event never fires.\n * @param listener A callback that is invoked when Low Power Mode (iOS) or Power Saver Mode (Android)\n * changes. The callback is provided a single argument that is an object with a `lowPowerMode` key.\n * @return A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.\n */\nexport function addLowPowerModeListener(listener: (event: PowerModeEvent) => void): Subscription {\n  return BatteryEventEmitter.addListener('Expo.powerModeDidChange', listener);\n}\n\n// @needsAudit\n/**\n * Gets the device's battery level, as in [`getBatteryLevelAsync`](#getbatterylevelasync).\n *\n * @example\n * ```ts\n * const batteryLevel = useBatteryLevel();\n * ```\n *\n * @return The battery level of the device\n */\nexport function useBatteryLevel(): number {\n  const [batteryLevel, setBatteryLevel] = useState(-1);\n\n  useEffect(() => {\n    getBatteryLevelAsync().then(setBatteryLevel);\n    const listener = addBatteryLevelListener((b) => setBatteryLevel(b.batteryLevel));\n    return () => listener.remove();\n  }, []);\n\n  return batteryLevel;\n}\n\n// @needsAudit\n/**\n * Gets the device's battery state, as in [`getBatteryStateAsync`](#getbatterystateasync).\n *\n * @example\n * ```ts\n * const batteryState = useBatteryState();\n * ```\n *\n * @return The battery state of the device\n */\nexport function useBatteryState(): BatteryState {\n  const [batteryState, setBatteryState] = useState(BatteryState.UNKNOWN);\n\n  useEffect(() => {\n    getBatteryStateAsync().then(setBatteryState);\n    const listener = addBatteryStateListener((b) => setBatteryState(b.batteryState));\n    return () => listener.remove();\n  }, []);\n\n  return batteryState;\n}\n\n// @needsAudit\n/**\n * Boolean that indicates if the device is in low power or power saver mode, as in  [`isLowPowerModeEnabledAsync`](#islowpowermodeenabledasync).\n *\n * @example\n * ```ts\n * const lowPowerMode = useLowPowerMode();\n * ```\n *\n * @return boolean indicating if the device is in low power mode\n */\nexport function useLowPowerMode(): boolean {\n  const [lowPowerMode, setLowPowerMode] = useState(false);\n\n  useEffect(() => {\n    isLowPowerModeEnabledAsync().then(setLowPowerMode);\n    const listener = addLowPowerModeListener((b) => setLowPowerMode(b.lowPowerMode));\n    return () => listener.remove();\n  }, []);\n\n  return lowPowerMode;\n}\n\n// @needsAudit\n/**\n * Gets the device's power state information, as in [`getPowerStateAsync`](#getpowerstateasync).\n *\n * @example\n * ```ts\n * const { lowPowerMode, batteryLevel, batteryState } = usePowerState();\n * ```\n *\n * @return power state information\n */\nexport function usePowerState(): PowerState {\n  const [lowPowerMode, setLowPowerMode] = useState(false);\n  const [batteryState, setBatteryState] = useState(BatteryState.UNKNOWN);\n  const [batteryLevel, setBatteryLevel] = useState(-1);\n\n  useEffect(() => {\n    isLowPowerModeEnabledAsync().then(setLowPowerMode);\n    getBatteryStateAsync().then(setBatteryState);\n    getBatteryLevelAsync().then(setBatteryLevel);\n    const modeListener = addLowPowerModeListener((b) => setLowPowerMode(b.lowPowerMode));\n    const levelListener = addBatteryLevelListener((b) => setBatteryLevel(b.batteryLevel));\n    const stateListener = addBatteryStateListener((b) => setBatteryState(b.batteryState));\n    return () => {\n      modeListener.remove();\n      levelListener.remove();\n      stateListener.remove();\n    };\n  }, []);\n\n  return { lowPowerMode, batteryLevel, batteryState };\n}\n\nexport {\n  BatteryLevelEvent,\n  BatteryState,\n  BatteryStateEvent,\n  PowerModeEvent,\n  PowerState,\n  Subscription,\n};\n"]}