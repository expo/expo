{"version":3,"file":"ExpoBattery.web.js","sourceRoot":"","sources":["../src/ExpoBattery.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Platform } from 'expo-modules-core';\n\nimport { BatteryState } from './Battery.types';\n\nconst emitter = new EventEmitter({} as any);\n\ndeclare let navigator: Navigator;\n\ninterface BatteryManager extends BatteryManagerEventTarget {\n  readonly charging: boolean;\n  readonly chargingTime: number;\n  readonly dischargingTime: number;\n  readonly level: number;\n}\n\ninterface BatteryManagerEventTargetEventMap {\n  chargingchange: Event;\n  chargingtimechange: Event;\n  dischargingtimechange: Event;\n  levelchange: Event;\n}\n\ninterface BatteryManagerEventTarget extends EventTarget {\n  onchargingchange: (this: BatteryManager, ev: Event) => any;\n  onlevelchange: (this: BatteryManager, ev: Event) => any;\n  onchargingtimechange: (this: BatteryManager, ev: Event) => any;\n  ondischargingtimechange: (this: BatteryManager, ev: Event) => any;\n  addEventListener<K extends keyof BatteryManagerEventTargetEventMap>(\n    type: K,\n    listener: (this: BatteryManager, ev: BatteryManagerEventTargetEventMap[K]) => any,\n    useCapture?: boolean\n  ): void;\n}\n\nexport default {\n  get isSupported(): boolean {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery#Browser_compatibility\n    return Platform.isDOMAvailable && ('getBattery' in navigator || 'battery' in navigator);\n  },\n\n  async getBatteryLevelAsync(): Promise<number> {\n    const batteryManager = await getBatteryManagerAsync();\n    if (!batteryManager) return -1;\n\n    return batteryManager.level;\n  },\n\n  async getBatteryStateAsync(): Promise<BatteryState> {\n    const batteryManager = await getBatteryManagerAsync();\n    if (!batteryManager) return BatteryState.UNKNOWN;\n    return getBatteryState(batteryManager.charging, batteryManager.level);\n  },\n\n  async startObserving() {\n    const batteryManager = await getBatteryManagerAsync();\n    if (!batteryManager) return;\n    batteryManager.addEventListener('chargingchange', onChargingChange);\n    batteryManager.addEventListener('levelchange', onLevelChange);\n  },\n\n  async stopObserving() {\n    const batteryManager = await getBatteryManagerAsync();\n    if (!batteryManager) return;\n    batteryManager.removeEventListener('chargingchange', onChargingChange);\n    batteryManager.removeEventListener('levelchange', onLevelChange);\n  },\n};\n\nlet lastReportedState: BatteryState = BatteryState.UNKNOWN;\n\nfunction getBatteryState(isCharging: boolean, level: number): BatteryState {\n  return isCharging\n    ? level >= 1.0\n      ? BatteryState.FULL\n      : BatteryState.CHARGING\n    : BatteryState.UNPLUGGED;\n}\n\nfunction emitStateChange(isCharging: boolean, level: number) {\n  const batteryState = getBatteryState(isCharging, level);\n  // prevent sending the same state change twice.\n  if (batteryState === lastReportedState) return;\n  lastReportedState = batteryState;\n  emitter.emit('Expo.batteryStateDidChange', { batteryState });\n}\n\nfunction onChargingChange(this: BatteryManager): void {\n  emitStateChange(this.charging, this.level);\n}\n\nfunction onLevelChange(this: BatteryManager): void {\n  const batteryLevel = this.level;\n  // update the state as well in case the state changed to full.\n  emitStateChange(this.charging, this.level);\n  emitter.emit('Expo.batteryLevelDidChange', { batteryLevel });\n}\n\nasync function getBatteryManagerAsync(): Promise<BatteryManager | null> {\n  if (Platform.isDOMAvailable === false) return null;\n  if ('getBattery' in navigator) {\n    // @ts-ignore\n    return await navigator.getBattery();\n  } else {\n    // @ts-ignore\n    return await navigator.battery;\n  }\n}\n"]}