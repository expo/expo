{"version":3,"file":"BlurView.js","sourceRoot":"","sources":["../src/BlurView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AAC7D,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAQhD,MAAM,cAAc,GAAG,wBAAwB,CAAC,cAAc,CAAC,CAAC;AAChE,MAAM,QAAS,SAAQ,KAAK,CAAC,SAAmD;IAC9E;;;;;;;;;;OAUG;IAEH,MAAM;QACJ,MAAM,EACJ,IAAI,GAAG,SAAS,EAChB,SAAS,GAAG,EAAE,EACd,mBAAmB,GAAG,CAAC,EACvB,KAAK,EACL,QAAQ,EACR,YAAY,EACZ,GAAG,KAAK,EACT,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,OAAO,CACL,oBAAC,IAAI,OAAK,KAAK,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC;YAC/C,oBAAC,cAAc,IACb,GAAG,EAAE,YAAY,EACjB,IAAI,EAAE,IAAI;gBACV,+CAA+C;gBAC/C,SAAS,EAAE,SAAS,EACpB,mBAAmB,EAAE,mBAAmB,EACxC,KAAK,EAAE,UAAU,CAAC,YAAY,GAC9B;YACD,QAAQ,CACJ,CACR,CAAC;IACJ,CAAC;CACF;AAED,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/B,SAAS,EAAE,EAAE,eAAe,EAAE,aAAa,EAAE;CAC9C,CAAC,CAAC;AAEH,kFAAkF;AAClF,qEAAqE;AACrE;;GAEG;AACH,MAAM,wBAAwB,GAAG,KAAK,CAAC,UAAU,CAC/C,CAAC,KAAoB,EAAE,UAAoC,EAAE,EAAE;IAC7D,OAAO,oBAAC,QAAQ,OAAK,KAAK,EAAE,YAAY,EAAE,UAAU,GAAI,CAAC;AAC3D,CAAC,CACF,CAAC;AAEF,eAAe,wBAAwB,CAAC","sourcesContent":["import { requireNativeViewManager } from 'expo-modules-core';\nimport React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\nimport { BlurViewProps } from './BlurView.types';\n\ntype BlurViewForwardedRefProp = {\n  forwardedRef: React.ForwardedRef<View>;\n};\n\nconst NativeBlurView = requireNativeViewManager('ExpoBlurView');\nclass BlurView extends React.Component<BlurViewProps & BlurViewForwardedRefProp> {\n  /**\n   * This component is a composition of the two components, but from the outside it's\n   * just a simple View with additional properties. To properly handle `setNativeProps`\n   * method (used when animating props), we need to properly separate `ViewProps` from `BlurViewProps`\n   * and pass them to the proper underlying views.\n   *\n   * This method handles the native view reference obtained from the parent View component\n   * and overrides its original `setNativeProps` method that is available as its property.\n   * When the `NativeBlurView` native ref is available `BlurView`-only props are forwarded\n   * to this view using `setNativeProps` method exposed by the native runtime.\n   */\n\n  render() {\n    const {\n      tint = 'default',\n      intensity = 50,\n      blurReductionFactor = 4,\n      style,\n      children,\n      forwardedRef,\n      ...props\n    } = this.props;\n    return (\n      <View {...props} style={[styles.container, style]}>\n        <NativeBlurView\n          ref={forwardedRef}\n          tint={tint}\n          // Android uses this prop instead of the `tint`\n          intensity={intensity}\n          blurReductionFactor={blurReductionFactor}\n          style={StyleSheet.absoluteFill}\n        />\n        {children}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: { backgroundColor: 'transparent' },\n});\n\n// This `forwardedRef` mechanism is necessary to make this component work properly\n// with React's `ref` prop and to react to props updates as expected.\n/**\n * A React component that blurs everything underneath the view.\n */\nconst BlurViewWithForwardedRef = React.forwardRef<View, BlurViewProps>(\n  (props: BlurViewProps, forwardRef: React.ForwardedRef<View>) => {\n    return <BlurView {...props} forwardedRef={forwardRef} />;\n  }\n);\n\nexport default BlurViewWithForwardedRef;\n"]}