{"version":3,"file":"ScreenOrientation.types.js","sourceRoot":"","sources":["../src/ScreenOrientation.types.ts"],"names":[],"mappings":"AAAA,cAAc;AACd,MAAM,CAAN,IAAY,WAqBX;AArBD,WAAY,WAAW;IACrB;;OAEG;IACH,mDAAW,CAAA;IACX;;OAEG;IACH,2DAAe,CAAA;IACf;;OAEG;IACH,+DAAiB,CAAA;IACjB;;OAEG;IACH,iEAAkB,CAAA;IAClB;;OAEG;IACH,mEAAmB,CAAA;AACrB,CAAC,EArBW,WAAW,KAAX,WAAW,QAqBtB;AAED,cAAc;AACd;;;;;GAKG;AACH,MAAM,CAAN,IAAY,eA0CX;AA1CD,WAAY,eAAe;IACzB;;;OAGG;IACH,2DAAW,CAAA;IACX;;OAEG;IACH,mDAAO,CAAA;IACP;;OAEG;IACH,6DAAY,CAAA;IACZ;;OAEG;IACH,mEAAe,CAAA;IACf;;OAEG;IACH,uEAAiB,CAAA;IACjB;;OAEG;IACH,+DAAa,CAAA;IACb;;OAEG;IACH,yEAAkB,CAAA;IAClB;;OAEG;IACH,2EAAmB,CAAA;IACnB;;OAEG;IACH,uDAAS,CAAA;IACT;;OAEG;IACH,2DAAW,CAAA;AACb,CAAC,EA1CW,eAAe,KAAf,eAAe,QA0C1B;AAED,cAAc;AACd;;;GAGG;AACH,MAAM,CAAN,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,qDAAW,CAAA;IACX,qDAAW,CAAA;IACX,qDAAW,CAAA;AACb,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAED,cAAc;AACd;;;;;GAKG;AACH,MAAM,CAAN,IAAY,kBAUX;AAVD,WAAY,kBAAkB;IAC5B,2DAAqC,CAAA;IACrC,+DAAyC,CAAA;IACzC,2CAAqB,CAAA;IACrB,6DAAuC,CAAA;IACvC,iEAA2C,CAAA;IAC3C,6CAAuB,CAAA;IACvB,iCAAW,CAAA;IACX,yCAAmB,CAAA;IACnB,yCAAmB,CAAA;AACrB,CAAC,EAVW,kBAAkB,KAAlB,kBAAkB,QAU7B;AAED,eAAe;AACf,MAAM,CAAN,IAAY,cAKX;AALD,WAAY,cAAc;IACxB,uDAAqC,CAAA;IACrC,2DAAyC,CAAA;IACzC,yDAAuC,CAAA;IACvC,6DAA2C,CAAA;AAC7C,CAAC,EALW,cAAc,KAAd,cAAc,QAKzB","sourcesContent":["// @needsAudit\nexport enum Orientation {\n  /**\n   * An unknown screen orientation. For example, the device is flat, perhaps on a table.\n   */\n  UNKNOWN = 0,\n  /**\n   * Right-side up portrait interface orientation.\n   */\n  PORTRAIT_UP = 1,\n  /**\n   * Upside down portrait interface orientation.\n   */\n  PORTRAIT_DOWN = 2,\n  /**\n   * Left landscape interface orientation.\n   */\n  LANDSCAPE_LEFT = 3,\n  /**\n   * Right landscape interface orientation.\n   */\n  LANDSCAPE_RIGHT = 4,\n}\n\n// @needsAudit\n/**\n * An enum whose values can be passed to the [`lockAsync`](#screenorientationlockasyncorientationlock)\n * method.\n * > __Note:__ `OrientationLock.ALL` and `OrientationLock.PORTRAIT` are invalid on devices which\n * > don't support `OrientationLock.PORTRAIT_DOWN`.\n */\nexport enum OrientationLock {\n  /**\n   * The default orientation. On iOS, this will allow all orientations except `Orientation.PORTRAIT_DOWN`.\n   * On Android, this lets the system decide the best orientation.\n   */\n  DEFAULT = 0,\n  /**\n   * All four possible orientations\n   */\n  ALL = 1,\n  /**\n   * Any portrait orientation.\n   */\n  PORTRAIT = 2,\n  /**\n   * Right-side up portrait only.\n   */\n  PORTRAIT_UP = 3,\n  /**\n   * Upside down portrait only.\n   */\n  PORTRAIT_DOWN = 4,\n  /**\n   * Any landscape orientation.\n   */\n  LANDSCAPE = 5,\n  /**\n   * Left landscape only.\n   */\n  LANDSCAPE_LEFT = 6,\n  /**\n   * Right landscape only.\n   */\n  LANDSCAPE_RIGHT = 7,\n  /**\n   * A platform specific orientation. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).\n   */\n  OTHER = 8,\n  /**\n   * An unknown screen orientation lock. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).\n   */\n  UNKNOWN = 9,\n}\n\n// @needsAudit\n/**\n * Each iOS device has a default set of [size classes](https://developer.apple.com/documentation/uikit/uiuserinterfacesizeclass)\n * that you can use as a guide when designing your interface.\n */\nexport enum SizeClassIOS {\n  UNKNOWN = 0,\n  COMPACT = 1,\n  REGULAR = 2,\n}\n\n// @needsAudit\n/**\n * An enum representing the lock policies that can be applied on the web platform, modelled after\n * the [W3C specification](https://w3c.github.io/screen-orientation/#dom-orientationlocktype).\n * These values can be applied through the [`lockPlatformAsync`](#screenorientationlockplatformasyncoptions)\n * method.\n */\nexport enum WebOrientationLock {\n  PORTRAIT_PRIMARY = 'portrait-primary',\n  PORTRAIT_SECONDARY = 'portrait-secondary',\n  PORTRAIT = 'portrait',\n  LANDSCAPE_PRIMARY = 'landscape-primary',\n  LANDSCAPE_SECONDARY = 'landscape-secondary',\n  LANDSCAPE = 'landscape',\n  ANY = 'any',\n  NATURAL = 'natural',\n  UNKNOWN = 'unknown',\n}\n\n// @docsMissing\nexport enum WebOrientation {\n  PORTRAIT_PRIMARY = 'portrait-primary',\n  PORTRAIT_SECONDARY = 'portrait-secondary',\n  LANDSCAPE_PRIMARY = 'landscape-primary',\n  LANDSCAPE_SECONDARY = 'landscape-secondary',\n}\n\n// @needsAudit\nexport type PlatformOrientationInfo = {\n  /**\n   * A constant to set using the Android native [API](https://developer.android.com/reference/android/R.attr#screenOrientation).\n   * For example, in order to set the lock policy to [unspecified](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_UNSPECIFIED),\n   * `-1` should be passed in.\n   * @platform android\n   */\n  screenOrientationConstantAndroid?: number;\n  /**\n   * An array of orientations to allow on the iOS platform.\n   * @platform ios\n   */\n  screenOrientationArrayIOS?: Orientation[];\n  /**\n   * A web orientation lock to apply in the browser.\n   * @platform web\n   */\n  screenOrientationLockWeb?: WebOrientationLock;\n};\n\n// @needsAudit\nexport type ScreenOrientationInfo = {\n  /**\n   * The current orientation of the device.\n   */\n  orientation: Orientation;\n  /**\n   * The [vertical size class](https://developer.apple.com/documentation/uikit/uitraitcollection/1623513-verticalsizeclass)\n   * of the device.\n   * @platform ios\n   */\n  verticalSizeClass?: SizeClassIOS;\n  /**\n   * The [horizontal size class](https://developer.apple.com/documentation/uikit/uitraitcollection/1623508-horizontalsizeclass)\n   * of the device.\n   * @platform ios\n   */\n  horizontalSizeClass?: SizeClassIOS;\n};\n\nexport type OrientationChangeListener = (event: OrientationChangeEvent) => void;\n\n// @needsAudit\nexport type OrientationChangeEvent = {\n  /**\n   * The current `OrientationLock` of the device.\n   */\n  orientationLock: OrientationLock;\n  /**\n   * The current `ScreenOrientationInfo` of the device.\n   */\n  orientationInfo: ScreenOrientationInfo;\n};\n"]}