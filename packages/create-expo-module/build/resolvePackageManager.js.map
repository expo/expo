{"version":3,"file":"resolvePackageManager.js","sourceRoot":"","sources":["../src/resolvePackageManager.ts"],"names":[],"mappings":";;;AAAA,iDAAyC;AAIzC,+GAA+G;AAC/G,SAAgB,qBAAqB;IACnC,2EAA2E;IAC3E,MAAM,SAAS,GAAG,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;IAEpD,IAAI,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,EAAE;QACjC,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,EAAE;QACxC,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,EAAE;QACvC,OAAO,KAAK,CAAC;KACd;SAAM,IAAI,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,EAAE;QACvC,OAAO,KAAK,CAAC;KACd;IAED,mBAAmB;IACnB,IAAI,yBAAyB,CAAC,MAAM,CAAC,EAAE;QACrC,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,yBAAyB,CAAC,MAAM,CAAC,EAAE;QAC5C,OAAO,MAAM,CAAC;KACf;SAAM,IAAI,yBAAyB,CAAC,KAAK,CAAC,EAAE;QAC3C,OAAO,KAAK,CAAC;KACd;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAxBD,sDAwBC;AAED,SAAS,yBAAyB,CAAC,OAA2B;IAC5D,IAAI;QACF,IAAA,wBAAQ,EAAC,GAAG,OAAO,YAAY,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC;KACb;IAAC,MAAM,GAAE;IACV,OAAO,KAAK,CAAC;AACf,CAAC;AAED,SAAgB,gBAAgB,CAAC,OAA2B,EAAE,GAAW;IACvE,QAAQ,OAAO,EAAE;QACf,KAAK,MAAM;YACT,OAAO,YAAY,GAAG,EAAE,CAAC;QAC3B,KAAK,MAAM;YACT,OAAO,QAAQ,GAAG,EAAE,CAAC;QACvB,KAAK,KAAK;YACR,OAAO,WAAW,GAAG,EAAE,CAAC;QAC1B,KAAK,KAAK,CAAC;QACX;YACE,OAAO,WAAW,GAAG,EAAE,CAAC;KAC3B;AACH,CAAC;AAZD,4CAYC","sourcesContent":["import { execSync } from 'child_process';\n\nexport type PackageManagerName = 'npm' | 'pnpm' | 'yarn' | 'bun';\n\n/** Determine which package manager to use for installing dependencies based on how the process was started. */\nexport function resolvePackageManager(): PackageManagerName {\n  // Attempt to detect if the user started the command using `yarn` or `pnpm`\n  const userAgent = process.env.npm_config_user_agent;\n\n  if (userAgent?.startsWith('yarn')) {\n    return 'yarn';\n  } else if (userAgent?.startsWith('pnpm')) {\n    return 'pnpm';\n  } else if (userAgent?.startsWith('npm')) {\n    return 'npm';\n  } else if (userAgent?.startsWith('bun')) {\n    return 'bun';\n  }\n\n  // Try availability\n  if (isPackageManagerAvailable('yarn')) {\n    return 'yarn';\n  } else if (isPackageManagerAvailable('pnpm')) {\n    return 'pnpm';\n  } else if (isPackageManagerAvailable('bun')) {\n    return 'bun';\n  }\n\n  return 'npm';\n}\n\nfunction isPackageManagerAvailable(manager: PackageManagerName): boolean {\n  try {\n    execSync(`${manager} --version`, { stdio: 'ignore' });\n    return true;\n  } catch {}\n  return false;\n}\n\nexport function formatRunCommand(manager: PackageManagerName, cmd: string) {\n  switch (manager) {\n    case 'pnpm':\n      return `pnpm run ${cmd}`;\n    case 'yarn':\n      return `yarn ${cmd}`;\n    case 'bun':\n      return `bun run ${cmd}`;\n    case 'npm':\n    default:\n      return `npm run ${cmd}`;\n  }\n}\n"]}