{"version":3,"file":"prompts.js","sourceRoot":"","sources":["../src/prompts.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport { Answers, PromptObject } from 'prompts';\nimport validateNpmPackage from 'validate-npm-package-name';\n\nimport { findGitHubEmail, findGitHubProfileUrl, findMyName, guessRepoUrl } from './utils';\n\nfunction getInitialName(customTargetPath?: string | null): string {\n  const targetBasename = customTargetPath && path.basename(customTargetPath);\n  return targetBasename && validateNpmPackage(targetBasename).validForNewPackages\n    ? targetBasename\n    : 'my-module';\n}\n\nexport function getSlugPrompt(customTargetPath?: string | null): PromptObject<string> {\n  const initial = getInitialName(customTargetPath);\n  return {\n    type: 'text',\n    name: 'slug',\n    message: 'What is the name of the npm package?',\n    initial,\n    validate: (input) =>\n      validateNpmPackage(input).validForNewPackages || 'Must be a valid npm package name',\n  };\n}\n\nexport function getLocalFolderNamePrompt(customTargetPath?: string | null): PromptObject<string> {\n  const initial = getInitialName(customTargetPath);\n\n  return {\n    type: 'text',\n    name: 'slug',\n    message: 'What is the name of the local module?',\n    initial,\n    validate: (input) =>\n      validateNpmPackage(input).validForNewPackages || 'Must be a valid npm package name',\n  };\n}\n\nexport async function getSubstitutionDataPrompts(slug: string): Promise<PromptObject<string>[]> {\n  return [\n    {\n      type: 'text',\n      name: 'name',\n      message: 'What is the native module name?',\n      initial: () => {\n        return slug\n          .replace(/^@/, '')\n          .replace(/^./, (match) => match.toUpperCase())\n          .replace(/\\W+(\\w)/g, (_, p1) => p1.toUpperCase());\n      },\n      validate: (input) => !!input || 'The native module name cannot be empty',\n    },\n    {\n      type: 'text',\n      name: 'description',\n      message: 'How would you describe the module?',\n      initial: 'My new module',\n      validate: (input) => !!input || 'The description cannot be empty',\n    },\n    {\n      type: 'text',\n      name: 'package',\n      message: 'What is the Android package name?',\n      initial: () => {\n        const namespace = slug\n          .replace(/\\W/g, '')\n          .replace(/^(expo|reactnative)/, '')\n          .toLowerCase();\n        return `expo.modules.${namespace}`;\n      },\n      validate: (input) => !!input || 'The Android package name cannot be empty',\n    },\n    {\n      type: 'text',\n      name: 'authorName',\n      message: 'What is the name of the package author?',\n      initial: await findMyName(),\n      validate: (input) => !!input || 'Cannot be empty',\n    },\n    {\n      type: 'text',\n      name: 'authorEmail',\n      message: 'What is the email address of the author?',\n      initial: await findGitHubEmail(),\n    },\n    {\n      type: 'text',\n      name: 'authorUrl',\n      message: \"What is the URL to the author's GitHub profile?\",\n      initial: async (_, answers: Answers<string>) =>\n        await findGitHubProfileUrl(answers.authorEmail),\n    },\n    {\n      type: 'text',\n      name: 'repo',\n      message: 'What is the URL for the repository?',\n      initial: async (_, answers: Answers<string>) => await guessRepoUrl(answers.authorUrl, slug),\n      validate: (input) => /^https?:\\/\\//.test(input) || 'Must be a valid URL',\n    },\n  ];\n}\n\nexport async function getLocalSubstitutionDataPrompts(\n  slug: string\n): Promise<PromptObject<string>[]> {\n  return [\n    {\n      type: 'text',\n      name: 'name',\n      message: 'What is the native module name?',\n      initial: () => {\n        return slug\n          .replace(/^@/, '')\n          .replace(/^./, (match) => match.toUpperCase())\n          .replace(/\\W+(\\w)/g, (_, p1) => p1.toUpperCase());\n      },\n      validate: (input) => !!input || 'The native module name cannot be empty',\n    },\n    {\n      type: 'text',\n      name: 'package',\n      message: 'What is the Android package name?',\n      initial: () => {\n        const namespace = slug\n          .replace(/\\W/g, '')\n          .replace(/^(expo|reactnative)/, '')\n          .toLowerCase();\n        return `expo.modules.${namespace}`;\n      },\n      validate: (input) => !!input || 'The Android package name cannot be empty',\n    },\n  ];\n}\n"]}