{"version":3,"file":"github.js","sourceRoot":"","sources":["../../src/utils/github.ts"],"names":[],"mappings":";;AAKA,oCAMC;AAGD,0DAgBC;AAGD,4EAmBC;AAlDD,mCAAgC;AAEhC,uFAAuF;AAChF,KAAK,UAAU,YAAY,CAAC,SAAiB,EAAE,IAAY;IAChE,IAAI,+BAA+B,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QACpD,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAClE,OAAO,GAAG,SAAS,IAAI,cAAc,EAAE,CAAC;IAC1C,CAAC;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,4DAA4D;AACrD,KAAK,UAAU,uBAAuB,CAAC,KAAa;IACzD,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,WAAW,EAAE,CAAC,CAAC;IAC/D,MAAM,QAAQ,GAAG,MAAM,IAAA,aAAK,EAAC,uCAAuC,MAAM,EAAE,EAAE;QAC5E,OAAO,EAAE;YACP,YAAY,EAAE,oBAAoB;SACnC;KACF,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAA+C,CAAC;IACnF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;IAC/B,IAAI,IAAI,EAAE,WAAW,GAAG,CAAC,EAAE,CAAC;QAC1B,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;YAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7B,CAAC;IACH,CAAC;IACD,OAAO,MAAM,gCAAgC,CAAC,KAAK,CAAC,CAAC;AACvD,CAAC;AAED,mGAAmG;AAC5F,KAAK,UAAU,gCAAgC,CAAC,KAAa;IAClE,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;QACjC,CAAC,EAAE,gBAAgB,KAAK,EAAE;QAC1B,IAAI,EAAE,aAAa;QACnB,QAAQ,EAAE,GAAG;KACd,CAAC,CAAC;IACH,MAAM,QAAQ,GAAG,MAAM,IAAA,aAAK,EAAC,yCAAyC,MAAM,EAAE,EAAE;QAC9E,OAAO,EAAE;YACP,YAAY,EAAE,oBAAoB;SACnC;KACF,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAiD,CAAC;IACrF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;IAC/B,IAAI,IAAI,EAAE,WAAW,GAAG,CAAC,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,IAAI,IAAI,CAAC;IAChD,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import type { Endpoints } from '@octokit/types';\n\nimport { fetch } from './fetch';\n\n/** Guesses the repository URL based on the author profile URL and the package slug. */\nexport async function guessRepoUrl(authorUrl: string, slug: string) {\n  if (/^https?:\\/\\/github.com\\/[^/]+/.test(authorUrl)) {\n    const normalizedSlug = slug.replace(/^@/, '').replace(/\\//g, '-');\n    return `${authorUrl}/${normalizedSlug}`;\n  }\n  return '';\n}\n\n/** Search GitHub to resolve an email to a GitHub account */\nexport async function findGitHubUserFromEmail(email: string): Promise<string | null> {\n  const params = new URLSearchParams({ q: `${email} in:email` });\n  const response = await fetch(`https://api.github.com/search/users?${params}`, {\n    headers: {\n      'User-Agent': 'create-expo-module',\n    },\n  });\n\n  const json = (await response.json()) as Endpoints['GET /search/users']['response'];\n  const data = json.data ?? json;\n  if (data?.total_count > 0) {\n    if (data.items?.[0]?.login) {\n      return data.items[0].login;\n    }\n  }\n  return await findGitHubUserFromEmailByCommits(email);\n}\n\n/** Search GitHub to resolve an email to a GitHub account, by searching commits instead of users */\nexport async function findGitHubUserFromEmailByCommits(email: string): Promise<string | null> {\n  const params = new URLSearchParams({\n    q: `author-email:${email}`,\n    sort: 'author-date',\n    per_page: '1',\n  });\n  const response = await fetch(`https://api.github.com/search/commits?${params}`, {\n    headers: {\n      'User-Agent': 'create-expo-module',\n    },\n  });\n\n  const json = (await response.json()) as Endpoints['GET /search/commits']['response'];\n  const data = json.data ?? json;\n  if (data?.total_count > 0) {\n    return data.items[0].author?.html_url ?? null;\n  }\n\n  return null;\n}\n"]}