{"version":3,"file":"createExampleApp.js","sourceRoot":"","sources":["../src/createExampleApp.ts"],"names":[],"mappings":"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","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport os from 'os';\nimport path from 'path';\n\nimport { installDependencies } from './packageManager';\nimport { PackageManagerName } from './resolvePackageManager';\nimport { SubstitutionData } from './types';\nimport { newStep } from './utils';\n\nconst debug = require('debug')('create-expo-module:createExampleApp') as typeof console.log;\n\n// These dependencies will be removed from the example app (`expo init` adds them)\nconst DEPENDENCIES_TO_REMOVE = ['expo-status-bar', 'expo-splash-screen'];\nconst EXPO_BETA = getenv.boolish('EXPO_BETA', false);\n\n/**\n * Initializes a new Expo project as an example app.\n */\nexport async function createExampleApp(\n  data: SubstitutionData,\n  targetDir: string,\n  packageManager: PackageManagerName\n): Promise<void> {\n  // Package name for the example app\n  const exampleProjectSlug = `${data.project.slug}-example`;\n\n  // `expo init` creates a new folder with the same name as the project slug\n  const appTmpPath = path.join(targetDir, exampleProjectSlug);\n\n  // Path to the target example dir\n  const appTargetPath = path.join(targetDir, 'example');\n\n  if (!(await fs.pathExists(appTargetPath))) {\n    // The template doesn't include the example app, so just skip this phase\n    return;\n  }\n\n  await newStep('Initializing the example app', async (step) => {\n    const templateVersion = EXPO_BETA ? 'next' : 'latest';\n    const template = `expo-template-blank-typescript@${templateVersion}`;\n    debug(`Using example template: ${template}`);\n    await spawnAsync(\n      packageManager,\n      ['create', 'expo-app', '--', exampleProjectSlug, '--template', template, '--yes'],\n      {\n        cwd: targetDir,\n        stdio: 'ignore',\n      }\n    );\n    step.succeed('Initialized the example app');\n  });\n\n  await newStep('Configuring the example app', async (step) => {\n    // \"example\" folder already exists and contains template files,\n    // that should replace these created by `expo init`.\n    await moveFiles(appTargetPath, appTmpPath);\n\n    // Cleanup the \"example\" dir\n    await fs.rmdir(appTargetPath);\n\n    // Clean up the \".git\" from example app\n    // note, this directory has contents, rmdir will throw\n    await fs.remove(path.join(appTmpPath, '.git'));\n\n    // Move the temporary example app to \"example\" dir\n    await fs.rename(appTmpPath, appTargetPath);\n\n    await addMissingAppConfigFields(appTargetPath, data);\n\n    step.succeed('Configured the example app');\n  });\n\n  await prebuildExampleApp(appTargetPath);\n\n  await modifyPackageJson(appTargetPath);\n\n  await newStep('Installing dependencies in the example app', async (step) => {\n    await installDependencies(packageManager, appTargetPath);\n    if (os.platform() === 'darwin') {\n      await podInstall(appTargetPath);\n      step.succeed('Installed dependencies in the example app');\n    } else {\n      step.succeed('Installed dependencies in the example app (skipped installing CocoaPods)');\n    }\n  });\n}\n\n/**\n * Copies files from one directory to another.\n */\nasync function moveFiles(fromPath: string, toPath: string): Promise<void> {\n  for (const file of await fs.readdir(fromPath)) {\n    await fs.move(path.join(fromPath, file), path.join(toPath, file), {\n      overwrite: true,\n    });\n  }\n}\n\n/**\n * Adds missing configuration that are required to run `npx expo prebuild`.\n */\nasync function addMissingAppConfigFields(appPath: string, data: SubstitutionData): Promise<void> {\n  const appConfigPath = path.join(appPath, 'app.json');\n  const appConfig = await fs.readJson(appConfigPath);\n  const appId = `${data.project.package}.example`;\n\n  // Android package name needs to be added to app.json\n  if (!appConfig.expo.android) {\n    appConfig.expo.android = {};\n  }\n  appConfig.expo.android.package = appId;\n\n  // Specify iOS bundle identifier\n  if (!appConfig.expo.ios) {\n    appConfig.expo.ios = {};\n  }\n  appConfig.expo.ios.bundleIdentifier = appId;\n\n  await fs.writeJson(appConfigPath, appConfig, {\n    spaces: 2,\n  });\n}\n\n/**\n * Applies necessary changes to **package.json** of the example app.\n * It means setting the autolinking config and removing unnecessary dependencies.\n */\nasync function modifyPackageJson(appPath: string): Promise<void> {\n  const packageJsonPath = path.join(appPath, 'package.json');\n  const packageJson = await fs.readJson(packageJsonPath);\n\n  if (!packageJson.expo) {\n    packageJson.expo = {};\n  }\n\n  // Set the native modules dir to the root folder,\n  // so that the autolinking can detect and link the module.\n  packageJson.expo.autolinking = {\n    nativeModulesDir: '..',\n  };\n\n  // Remove unnecessary dependencies\n  for (const dependencyToRemove of DEPENDENCIES_TO_REMOVE) {\n    delete packageJson.dependencies[dependencyToRemove];\n  }\n\n  await fs.writeJson(packageJsonPath, packageJson, {\n    spaces: 2,\n  });\n}\n\n/**\n * Runs `npx expo prebuild` in the example app.\n */\nasync function prebuildExampleApp(exampleAppPath: string): Promise<void> {\n  await newStep('Prebuilding the example app', async (step) => {\n    await spawnAsync('npx', ['expo', 'prebuild', '--no-install'], {\n      cwd: exampleAppPath,\n      stdio: ['ignore', 'ignore', 'pipe'],\n    });\n    step.succeed('Prebuilt the example app');\n  });\n}\n\n/**\n * Runs `pod install` in the iOS project at the given path.\n */\nasync function podInstall(appPath: string): Promise<void> {\n  await spawnAsync('pod', ['install'], {\n    cwd: path.join(appPath, 'ios'),\n    stdio: ['ignore', 'ignore', 'pipe'],\n  });\n}\n"]}