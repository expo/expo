import groovy.json.JsonSlurper

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'maven-publish'

buildscript {
  def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
  if (expoModulesCorePlugin.exists()) {
    apply from: expoModulesCorePlugin
    applyKotlinExpoModulesCorePlugin()
  }

  // Simple helper that allows the root project to override versions declared by this library.
  ext.safeExtGet = { prop, fallback ->
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
  }

  // Ensures backward compatibility
  ext.getKotlinVersion = {
    if (ext.has("kotlinVersion")) {
      ext.kotlinVersion()
    } else {
      ext.safeExtGet("kotlinVersion", "1.8.10")
    }
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${getKotlinVersion()}")
  }
}

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 33)
  namespace "expo.modules.devlauncher"
  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 33)
    versionCode 9
    versionName "2.3.0"
  }

  lintOptions {
    abortOnError false
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }

  kotlinOptions {
    jvmTarget = JavaVersion.VERSION_11.majorVersion
  }

  buildTypes {
    buildTypes.each {
      it.buildConfigField 'String', 'VERSION', "\"${defaultConfig.versionName}\""
    }

    releaseWithDevLauncher {
      initWith release
      matchingFallbacks = ['release', 'debug']
    }
  }

  sourceSets {
    debug {
      java {
        srcDirs += "src/expo-45"

        def rnVersion = getRNVersion()
        if (rnVersion >= versionToNumber(0, 72, 0)) {
          srcDirs += "src/react-native-72"
        } else if (rnVersion >= versionToNumber(0, 69, 0)) {
          srcDirs += "src/react-native-69"
        }

        if (projectIncludesExpoUpdates()) {
          srcDirs += 'src/with-updates'
        } else {
          srcDirs += 'src/without-updates'
        }
      }
    }
    releaseWithDevLauncher {
      setRoot 'src/debug'
    }
  }

  buildFeatures {
    viewBinding true
  }
  publishing {
    singleVariant("release") {
      withSourcesJar()
    }
  }
}

repositories {
  // ref: https://www.baeldung.com/maven-local-repository
  mavenLocal()
  maven {
    // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
    url "$rootDir/../node_modules/react-native/android"
  }
  maven {
    // Android JSC is installed from npm
    url "$rootDir/../node_modules/jsc-android/dist"
  }
  google()
}

dependencies {
  implementation project(":expo-modules-core")
  implementation project(":expo-dev-menu-interface")
  implementation project(":expo-manifests")
  implementation project(":expo-updates-interface")
  implementation project(":expo-dev-menu")

  if (projectIncludesExpoUpdates()) {
    implementation project(":expo-updates")
  }

  //noinspection GradleDynamicVersion
  implementation 'com.facebook.react:react-native:+'  // From node_modules

  implementation 'commons-io:commons-io:2.6'

  implementation 'com.squareup.okhttp3:okhttp:3.14.9'
  implementation 'com.google.code.gson:gson:2.8.6'

  // Fixes
  // Cannot access 'androidx....' which is a supertype of 'expo.modules.devmenu.DevMenuActivity'.
  // Check your module classpath for missing or conflicting dependencies
  api "androidx.appcompat:appcompat:1.1.0"
  api "androidx.lifecycle:lifecycle-extensions:2.2.0"

  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3")
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1")
  implementation "org.jetbrains.kotlin:kotlin-reflect:${getKotlinVersion()}"

  api "io.insert-koin:koin-core:3.1.2"

  testImplementation 'androidx.test:core:1.4.0'
  testImplementation 'androidx.test:core-ktx:1.4.0'
  testImplementation "com.google.truth:truth:1.1.2"
  testImplementation 'com.squareup.okhttp3:mockwebserver:4.3.1'
  testImplementation "io.insert-koin:koin-test:3.1.2"
  testImplementation "io.insert-koin:koin-test-junit4:3.1.2"
  testImplementation 'io.mockk:mockk:1.12.3'
  testImplementation "org.robolectric:robolectric:4.10"
}

// Koin uses a different version of Kotlin under the hood.
configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    def requested = details.requested
    if (requested.group == 'org.jetbrains.kotlin') {
      details.useVersion safeExtGet('kotlinVersion', '1.8.10')
    }
  }
}

def versionToNumber(major, minor, patch) {
  return patch * 100 + minor * 10000 + major * 1000000
}

def getNodeModulesPackageVersion(packageName, overridePropName) {
  def nodeModulesVersion = ["node", "-e", "console.log(require('$packageName/package.json').version);"].execute(null, projectDir).text.trim()
  def version = safeExtGet(overridePropName, nodeModulesVersion)

  def coreVersion = version.split("-")[0]
  def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }

  return versionToNumber(
      major,
      minor,
      patch
  )
}

def getRNVersion() {
  if (System.getenv("REACT_NATIVE_OVERRIDE_VERSION")) {
    def version = System.getenv("REACT_NATIVE_OVERRIDE_VERSION")
    def coreVersion = version.split("-")[0]
    def (major, minor, patch) = coreVersion.tokenize('.').collect { it.toInteger() }
    return versionToNumber(
        major,
        minor,
        patch
    )
  }

  return getNodeModulesPackageVersion("react-native", "reactNativeVersion")
}

def getExpoPackageVersion() {
  return getNodeModulesPackageVersion("expo", "expoPackageVersion")
}

def projectIncludesExpoUpdates() {
  try {
    def version = getNodeModulesPackageVersion("expo-updates", "expoUpdatesVersion")
    return version != null
  } catch (Exception e) {
    return false
  }
}

// [BEGIN] Workaround okhttp/okio compatibility issue
// Remove when we drop support for SDK 44
def okhttpPinnedArtifacts = []
configurations.implementation.getDependencies().removeIf { it ->
  if (it.group == 'com.squareup.okhttp3' && it.name == 'okhttp') {
    okhttpPinnedArtifacts.add(it)
    return true
  }
  return false
}
okhttpPinnedArtifacts.each { artifact ->
  dependencies.add('compileOnly', artifact)
  dependencies.add('testImplementation', artifact)
  configurations.all { conf ->
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      def requested = details.requested
      // Only to pin old okhttp in compile phase because mockwebserver requires okhttp4
      if (conf.name.contains('Compile')) {
        if (requested.group == artifact.group && requested.name == artifact.name) {
          details.useVersion artifact.version
        }
      }
    }
  }
}
// [END] Workaround okhttp/okio compatibility issue
