{"version":3,"file":"DevToolsPluginClientImplApp.js","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClientImplApp.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DevToolsPluginClient,\n  DevToolsPluginMethod,\n  MESSAGE_PROTOCOL_VERSION,\n} from './DevToolsPluginClient';\nimport type { HandshakeMessageParams } from './devtools.types';\nimport * as logger from './logger';\n\n/**\n * The DevToolsPluginClient for the app -> browser communication.\n */\nexport class DevToolsPluginClientImplApp extends DevToolsPluginClient {\n  // Map of pluginName -> browserClientId\n  private browserClientMap: Record<string, string> = {};\n\n  private static ws: WebSocket | null = null;\n  private static refCount: number = 0;\n\n  /**\n   * Initialize the connection.\n   * @hidden\n   */\n  override async initAsync(): Promise<void> {\n    if (DevToolsPluginClientImplApp.ws == null) {\n      DevToolsPluginClientImplApp.ws = await this.connectAsync();\n    }\n    DevToolsPluginClientImplApp.refCount += 1;\n    DevToolsPluginClientImplApp.ws.addEventListener('message', this.handleMessage);\n    this.addHandshakeHandler();\n  }\n\n  /**\n   * Close the connection.\n   */\n  override async closeAsync(): Promise<void> {\n    this.eventEmitter.removeAllListeners();\n    DevToolsPluginClientImplApp.ws?.removeEventListener('message', this.handleMessage);\n    DevToolsPluginClientImplApp.refCount -= 1;\n    if (DevToolsPluginClientImplApp.refCount < 1) {\n      DevToolsPluginClientImplApp.ws?.close();\n      DevToolsPluginClientImplApp.ws = null;\n    }\n  }\n\n  /**\n   * Send a message to the other end of DevTools.\n   * @param method A method name.\n   * @param params any extra payload.\n   */\n  override sendMessage(method: string, params: any): void {\n    if (!this.isConnected()) {\n      throw new Error('Unable to send message in a disconnected state.');\n    }\n\n    const payload: Record<string, any> = {\n      version: MESSAGE_PROTOCOL_VERSION,\n      pluginName: this.connectionInfo.pluginName,\n      method: DevToolsPluginMethod,\n      params: {\n        method,\n        params,\n      },\n    };\n    DevToolsPluginClientImplApp.ws?.send(JSON.stringify(payload));\n  }\n\n  /**\n   * Returns whether the client is connected to the server.\n   */\n  override isConnected(): boolean {\n    return DevToolsPluginClientImplApp.ws?.readyState === WebSocket.OPEN;\n  }\n\n  /**\n   * Get the WebSocket instance. Exposed for testing.\n   * @hidden\n   */\n  public static getWebSocket(): WebSocket | null {\n    return DevToolsPluginClientImplApp.ws;\n  }\n\n  /**\n   * Get the current reference count. Exposed for testing.\n   * @hidden\n   */\n  public static getRefCount(): number {\n    return DevToolsPluginClientImplApp.refCount;\n  }\n\n  private async connectAsync(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket(`ws://${this.connectionInfo.devServer}/message`);\n      ws.addEventListener('open', () => {\n        resolve(ws);\n      });\n      ws.addEventListener('error', (e) => {\n        reject(e);\n      });\n      ws.addEventListener('close', (e: WebSocketCloseEvent) => {\n        logger.info('WebSocket closed', e.code, e.reason);\n        DevToolsPluginClientImplApp.ws = null;\n      });\n    });\n  }\n\n  private addHandshakeHandler() {\n    this.addMessageListener('handshake', (params: HandshakeMessageParams) => {\n      const previousBrowserClientId = this.browserClientMap[params.pluginName];\n      if (previousBrowserClientId != null && previousBrowserClientId !== params.browserClientId) {\n        logger.info(\n          `Terminate the previous browser client connection - previousBrowserClientId[${previousBrowserClientId}]`\n        );\n        this.sendMessage('terminateBrowserClient', { browserClientId: previousBrowserClientId });\n      }\n      this.browserClientMap[params.pluginName] = params.browserClientId;\n    });\n  }\n}\n"]}