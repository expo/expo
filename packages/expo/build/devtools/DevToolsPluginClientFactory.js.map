{"version":3,"file":"DevToolsPluginClientFactory.js","sourceRoot":"","sources":["../../src/devtools/DevToolsPluginClientFactory.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,2BAA2B,EAAE,MAAM,+BAA+B,CAAC;AAC5E,OAAO,EAAE,+BAA+B,EAAE,MAAM,mCAAmC,CAAC;AAEpF,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AAExD,MAAM,WAAW,GAAyE,EAAE,CAAC;AAE7F;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAC9C,cAA8B;IAE9B,IAAI,MAA4B,CAAC;IACjC,IAAI,cAAc,CAAC,MAAM,KAAK,KAAK,EAAE;QACnC,MAAM,GAAG,IAAI,2BAA2B,CAAC,cAAc,CAAC,CAAC;KAC1D;SAAM;QACL,MAAM,GAAG,IAAI,+BAA+B,CAAC,cAAc,CAAC,CAAC;KAC9D;IACD,MAAM,MAAM,CAAC,SAAS,EAAE,CAAC;IACzB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,UAAkB;IAElB,MAAM,cAAc,GAAG,iBAAiB,EAAE,CAAC;IAE3C,IAAI,QAAQ,GACV,WAAW,CAAC,UAAU,CAAC,CAAC;IAC1B,IAAI,QAAQ,IAAI,IAAI,EAAE;QACpB,IAAI,QAAQ,YAAY,OAAO,EAAE;YAC/B,OAAO,QAAQ,CAAC;SACjB;QACD,IACE,QAAQ,CAAC,WAAW,EAAE,KAAK,KAAK;YAChC,QAAQ,CAAC,cAAc,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,EAC9D;YACA,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC;YAC5B,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC;YAC/B,QAAQ,GAAG,IAAI,CAAC;SACjB;KACF;IACD,IAAI,QAAQ,IAAI,IAAI,EAAE;QACpB,MAAM,eAAe,GAAG,0BAA0B,CAAC,EAAE,GAAG,cAAc,EAAE,UAAU,EAAE,CAAC,CAAC;QACtF,WAAW,CAAC,UAAU,CAAC,GAAG,eAAe,CAAC;QAC1C,QAAQ,GAAG,MAAM,eAAe,CAAC;QACjC,WAAW,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;KACpC;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,8BAA8B;IAC5C,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;QACjD,MAAM,QAAQ,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;QACzC,OAAO,WAAW,CAAC,UAAU,CAAC,CAAC;QAC/B,IAAI,QAAQ,YAAY,OAAO,EAAE;YAC/B,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;SACpD;aAAM;YACL,QAAQ,CAAC,UAAU,EAAE,CAAC;SACvB;KACF;AACH,CAAC","sourcesContent":["import type { DevToolsPluginClient } from './DevToolsPluginClient';\nimport { DevToolsPluginClientImplApp } from './DevToolsPluginClientImplApp';\nimport { DevToolsPluginClientImplBrowser } from './DevToolsPluginClientImplBrowser';\nimport type { ConnectionInfo } from './devtools.types';\nimport { getConnectionInfo } from './getConnectionInfo';\n\nconst instanceMap: Record<string, DevToolsPluginClient | Promise<DevToolsPluginClient>> = {};\n\n/**\n * Factory of DevToolsPluginClient based on sender types.\n * @hidden\n */\nexport async function createDevToolsPluginClient(\n  connectionInfo: ConnectionInfo\n): Promise<DevToolsPluginClient> {\n  let client: DevToolsPluginClient;\n  if (connectionInfo.sender === 'app') {\n    client = new DevToolsPluginClientImplApp(connectionInfo);\n  } else {\n    client = new DevToolsPluginClientImplBrowser(connectionInfo);\n  }\n  await client.initAsync();\n  return client;\n}\n\n/**\n * Public API to get the DevToolsPluginClient instance.\n */\nexport async function getDevToolsPluginClientAsync(\n  pluginName: string\n): Promise<DevToolsPluginClient> {\n  const connectionInfo = getConnectionInfo();\n\n  let instance: DevToolsPluginClient | Promise<DevToolsPluginClient> | null =\n    instanceMap[pluginName];\n  if (instance != null) {\n    if (instance instanceof Promise) {\n      return instance;\n    }\n    if (\n      instance.isConnected() === false ||\n      instance.connectionInfo.devServer !== connectionInfo.devServer\n    ) {\n      await instance.closeAsync();\n      delete instanceMap[pluginName];\n      instance = null;\n    }\n  }\n  if (instance == null) {\n    const instancePromise = createDevToolsPluginClient({ ...connectionInfo, pluginName });\n    instanceMap[pluginName] = instancePromise;\n    instance = await instancePromise;\n    instanceMap[pluginName] = instance;\n  }\n  return instance;\n}\n\n/**\n * Internal testing API to cleanup all DevToolsPluginClient instances.\n */\nexport function cleanupDevToolsPluginInstances() {\n  for (const pluginName of Object.keys(instanceMap)) {\n    const instance = instanceMap[pluginName];\n    delete instanceMap[pluginName];\n    if (instance instanceof Promise) {\n      instance.then((instance) => instance.closeAsync());\n    } else {\n      instance.closeAsync();\n    }\n  }\n}\n"]}