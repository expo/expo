{"version":3,"file":"WebSocketWithReconnect.js","sourceRoot":"","sources":["../../src/devtools/WebSocketWithReconnect.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, type EventSubscription } from 'fbemitter';\n\nexport interface Options {\n  /**\n   * Reconnect interval in milliseconds.\n   * @default 1500\n   */\n  retriesInterval?: number;\n\n  /**\n   * The maximum number of retries.\n   * @default 200\n   */\n  maxRetries?: number;\n\n  /**\n   * The timeout in milliseconds for the WebSocket connecting.\n   */\n  connectTimeout?: number;\n\n  /**\n   * The error handler.\n   * @default throwing an error\n   */\n  onError?: (error: Error) => void;\n\n  /**\n   * The callback to be called when the WebSocket is reconnected.\n   * @default no-op\n   */\n  onReconnect?: (reason: string) => void;\n}\n\nexport class WebSocketWithReconnect implements WebSocket {\n  private readonly retriesInterval: number;\n  private readonly maxRetries: number;\n  private readonly connectTimeout: number;\n  private readonly onError: (error: Error) => void;\n  private readonly onReconnect: (reason: string) => void;\n\n  private ws: WebSocket | null = null;\n  private retries = 0;\n  private connectTimeoutHandle: ReturnType<typeof setTimeout> | null = null;\n  private isClosed = false;\n  private sendQueue: (string | ArrayBufferView | Blob | ArrayBufferLike)[] = [];\n  private lastCloseEvent: { code?: number; reason?: string; message?: string } | null = null;\n\n  private readonly emitter = new EventEmitter();\n  private readonly eventSubscriptions: EventSubscription[] = [];\n\n  constructor(\n    public readonly url: string,\n    options?: Options\n  ) {\n    this.retriesInterval = options?.retriesInterval ?? 1500;\n    this.maxRetries = options?.maxRetries ?? 200;\n    this.connectTimeout = options?.connectTimeout ?? 5000;\n    this.onError =\n      options?.onError ??\n      ((error) => {\n        throw error;\n      });\n    this.onReconnect = options?.onReconnect ?? (() => {});\n\n    this.connect();\n  }\n\n  public close(code?: number, reason?: string) {\n    this.clearConnectTimeoutIfNeeded();\n    this.emitter.emit(\n      'close',\n      this.lastCloseEvent ?? {\n        code: code ?? 1000,\n        reason: reason ?? 'Explicit closing',\n        message: 'Explicit closing',\n      }\n    );\n    this.lastCloseEvent = null;\n    this.isClosed = true;\n    this.emitter.removeAllListeners();\n    this.sendQueue = [];\n    if (this.ws != null) {\n      const ws = this.ws;\n      this.ws = null;\n      this.wsClose(ws);\n    }\n  }\n\n  public addEventListener(event: 'message', listener: (event: WebSocketMessageEvent) => void): void;\n  public addEventListener(event: 'open', listener: () => void): void;\n  public addEventListener(event: 'error', listener: (event: WebSocketErrorEvent) => void): void;\n  public addEventListener(event: 'close', listener: (event: WebSocketCloseEvent) => void): void;\n  public addEventListener(event: string, listener: (event: any) => void) {\n    this.eventSubscriptions.push(this.emitter.addListener(event, listener));\n  }\n\n  public removeEventListener(event: string, listener: (event: any) => void) {\n    const index = this.eventSubscriptions.findIndex(\n      (subscription) => subscription.listener === listener\n    );\n    if (index >= 0) {\n      this.eventSubscriptions[index].remove();\n      this.eventSubscriptions.splice(index, 1);\n    }\n  }\n\n  //#region Internals\n\n  private connect() {\n    if (this.ws != null) {\n      return;\n    }\n    this.connectTimeoutHandle = setTimeout(this.handleConnectTimeout, this.connectTimeout);\n\n    this.ws = new WebSocket(this.url.toString());\n    this.ws.addEventListener('message', this.handleMessage);\n    this.ws.addEventListener('open', this.handleOpen);\n    // @ts-ignore TypeScript expects (e: Event) => any, but we want (e: WebSocketErrorEvent) => any\n    this.ws.addEventListener('error', this.handleError);\n    this.ws.addEventListener('close', this.handleClose);\n  }\n\n  public send(data: string | ArrayBufferView | Blob | ArrayBufferLike): void {\n    if (this.isClosed) {\n      this.onError(new Error('Unable to send data: WebSocket is closed'));\n      return;\n    }\n\n    if (this.retries >= this.maxRetries) {\n      this.onError(\n        new Error(`Unable to send data: Exceeded max retries - retries[${this.retries}]`)\n      );\n      return;\n    }\n\n    const ws = this.ws;\n    if (ws != null && ws.readyState === WebSocket.OPEN) {\n      ws.send(data);\n    } else {\n      this.sendQueue.push(data);\n    }\n  }\n\n  private handleOpen = () => {\n    this.clearConnectTimeoutIfNeeded();\n    this.lastCloseEvent = null;\n    this.emitter.emit('open');\n\n    const sendQueue = this.sendQueue;\n    this.sendQueue = [];\n    for (const data of sendQueue) {\n      this.send(data);\n    }\n  };\n\n  private handleMessage = (event: WebSocketMessageEvent) => {\n    this.emitter.emit('message', event);\n  };\n\n  private handleError = (event: WebSocketErrorEvent) => {\n    this.clearConnectTimeoutIfNeeded();\n    this.emitter.emit('error', event);\n    this.reconnectIfNeeded(`WebSocket error - ${event.message}`);\n  };\n\n  private handleClose = (event: WebSocketCloseEvent) => {\n    this.clearConnectTimeoutIfNeeded();\n    this.lastCloseEvent = {\n      code: event.code,\n      reason: event.reason,\n      message: event.message,\n    };\n    this.reconnectIfNeeded(`WebSocket closed - code[${event.code}] reason[${event.reason}]`);\n  };\n\n  private handleConnectTimeout = () => {\n    this.reconnectIfNeeded('Timeout from connecting to the WebSocket');\n  };\n\n  private clearConnectTimeoutIfNeeded() {\n    if (this.connectTimeoutHandle != null) {\n      clearTimeout(this.connectTimeoutHandle);\n      this.connectTimeoutHandle = null;\n    }\n  }\n\n  private reconnectIfNeeded(reason: string) {\n    if (this.ws != null) {\n      this.wsClose(this.ws);\n      this.ws = null;\n    }\n    if (this.isClosed) {\n      return;\n    }\n\n    if (this.retries >= this.maxRetries) {\n      this.onError(new Error('Exceeded max retries'));\n      this.close();\n      return;\n    }\n\n    setTimeout(() => {\n      this.retries += 1;\n      this.connect();\n      this.onReconnect(reason);\n    }, this.retriesInterval);\n  }\n\n  private wsClose(ws: WebSocket) {\n    try {\n      ws.removeEventListener('message', this.handleMessage);\n      ws.removeEventListener('open', this.handleOpen);\n      // @ts-ignore: TypeScript expects (e: Event) => any, but we want (e: WebSocketErrorEvent) => any\n      ws.removeEventListener('error', this.handleError);\n      ws.removeEventListener('close', this.handleClose);\n      ws.close();\n    } catch {}\n  }\n\n  public get readyState() {\n    // Only return closed if the WebSocket is explicitly closed or exceeds max retries.\n    if (this.isClosed) {\n      return WebSocket.CLOSED;\n    }\n\n    const readyState = this.ws?.readyState;\n    if (readyState === WebSocket.CLOSED) {\n      return WebSocket.CONNECTING;\n    }\n    return readyState ?? WebSocket.CONNECTING;\n  }\n\n  //#endregion\n\n  //#region WebSocket API proxy\n\n  public readonly CONNECTING = 0;\n  public readonly OPEN = 1;\n  public readonly CLOSING = 2;\n  public readonly CLOSED = 3;\n\n  public get binaryType() {\n    return this.ws?.binaryType ?? 'blob';\n  }\n\n  public get bufferedAmount() {\n    return this.ws?.bufferedAmount ?? 0;\n  }\n\n  public get extensions() {\n    return this.ws?.extensions ?? '';\n  }\n\n  public get protocol() {\n    return this.ws?.protocol ?? '';\n  }\n\n  public ping(): void {\n    return this.ws?.ping();\n  }\n\n  public dispatchEvent(event: Event) {\n    return this.ws?.dispatchEvent(event) ?? false;\n  }\n\n  //#endregion\n\n  //#regions Unsupported legacy properties\n\n  public set onclose(value: ((e: WebSocketCloseEvent) => any) | null) {\n    throw new Error('Unsupported legacy property, use addEventListener instead');\n  }\n\n  public set onerror(value: ((e: Event) => any) | null) {\n    throw new Error('Unsupported legacy property, use addEventListener instead');\n  }\n\n  public set onmessage(value: ((e: WebSocketMessageEvent) => any) | null) {\n    throw new Error('Unsupported legacy property, use addEventListener instead');\n  }\n\n  public set onopen(value: (() => any) | null) {\n    throw new Error('Unsupported legacy property, use addEventListener instead');\n  }\n\n  //#endregion\n}\n"]}