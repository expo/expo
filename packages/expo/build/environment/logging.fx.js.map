{"version":3,"file":"logging.fx.js","sourceRoot":"","sources":["../../src/environment/logging.fx.ts"],"names":[],"mappings":"AAAA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,YAAY,MAAM,mDAAmD,CAAC;AAE7E,sGAAsG;AACtG,IAAI,OAAO,EAAE;IACX,kFAAkF;IAClF,qFAAqF;IACrF;IACE,yGAAyG;IACzG,SAAS,CAAC,sBAAsB;QAChC,2FAA2F;QAC3F,CAAC,SAAS,CAAC,sBAAsB,CAAC,MAAM,EACxC;QACA,MAAM,aAAa,GAAG,YAAY,EAAE,CAAC;QACrC,wDAAwD;QACxD,IAAI,aAAa,CAAC,sBAAsB,EAAE;YACxC,gCAAgC;YAChC,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC;YAC3F,uHAAuH;YAEvH,MAAM,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;YAC5B,SAAS,CAAC,sBAAsB,CAAC,MAAM,GAAG,MAAM,CAAC;YACjD,IAAI,SAAS,CAAC,YAAY,EAAE;gBAC1B,SAAS,CAAC,YAAY,CAAC,MAAM,GAAG,MAAM,CAAC;aACxC;SACF;KACF;SAAM;IACL,uHAAuH;IACvH,SAAS,CAAC,uBAAuB;QACjC,4FAA4F;QAC5F,CAAC,SAAS,CAAC,uBAAuB,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EACxD;QACA,MAAM,aAAa,GAAG,YAAY,EAAE,CAAC;QACrC,wDAAwD;QACxD,IAAI,aAAa,CAAC,sBAAsB,EAAE;YACxC,gCAAgC;YAChC,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC;YAC3F,uHAAuH;YAEvH,MAAM,MAAM,GAAG,GAAG,GAAG,MAAM,CAAC;YAC5B,IAAI,SAAS,CAAC,uBAAuB,CAAC,KAAK,EAAE,MAAM,EAAE;gBACnD,SAAS,CAAC,uBAAuB,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;aAChE;YACD,IAAI,SAAS,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE;gBACtC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;aAClD;SACF;KACF;IACD,6DAA6D;IAE7D,IACE,SAAS,CAAC,sBAAsB,EAAE,MAAM;QACxC,SAAS,CAAC,uBAAuB,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EACxD;QACA,gGAAgG;QAChG,0GAA0G;QAC1G,IAAI,QAAQ,CAAC,gBAAgB,EAAE;YAC7B,MAAM,aAAa,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC;YAC/D,aAAa,CAAC,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE;gBAC9C,uFAAuF;aACxF,CAAC,CAAC;SACJ;aAAM;YACL,MAAM,IAAI,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;YACrC,IAAI,CAAC,oBAAoB,EAAE,CAAC;SAC7B;KACF;CACF","sourcesContent":["import Constants from 'expo-constants';\nimport { Platform } from 'expo-modules-core';\nimport getDevServer from 'react-native/Libraries/Core/Devtools/getDevServer';\n\n// Metro and terser don't seem to be capable of shaking the imports unless they're wrapped in __DEV__.\nif (__DEV__) {\n  // If the app is being run outside of the Expo Go app and not using expo-dev-menu,\n  // then we can attempt to polyfill the `logUrl` to enable console logging in the CLI.\n  if (\n    // If this is defined then we can be define Constants.manifest.logUrl without worrying about the warning.\n    Constants.__unsafeNoWarnManifest &&\n    // Only attempt to set the URL if `Constants.__unsafeNoWarnManifest.logUrl` is not defined.\n    !Constants.__unsafeNoWarnManifest.logUrl\n  ) {\n    const devServerInfo = getDevServer();\n    // Ensure the URL is remote and not local. i.e `file://`\n    if (devServerInfo.bundleLoadedFromServer) {\n      // url: `http://localhost:8081/`\n      const url = !devServerInfo.url.endsWith('/') ? `${devServerInfo.url}/` : devServerInfo.url;\n      // The standard Expo logUrl is `http://localhost:8081/logs`, this code assumes that the `logs` endpoint doesn't change.\n\n      const logUrl = url + 'logs';\n      Constants.__unsafeNoWarnManifest.logUrl = logUrl;\n      if (Constants.expoGoConfig) {\n        Constants.expoGoConfig.logUrl = logUrl;\n      }\n    }\n  } else if (\n    // If this is defined then we can be define Constants.manifest2.extra.expoGo.logUrl without worrying about the warning.\n    Constants.__unsafeNoWarnManifest2 &&\n    // Only attempt to set the URL if `Constants.__unsafeNoWarnManifest2.logUrl` is not defined.\n    !Constants.__unsafeNoWarnManifest2.extra?.expoGo?.logUrl\n  ) {\n    const devServerInfo = getDevServer();\n    // Ensure the URL is remote and not local. i.e `file://`\n    if (devServerInfo.bundleLoadedFromServer) {\n      // url: `http://localhost:8081/`\n      const url = !devServerInfo.url.endsWith('/') ? `${devServerInfo.url}/` : devServerInfo.url;\n      // The standard Expo logUrl is `http://localhost:8081/logs`, this code assumes that the `logs` endpoint doesn't change.\n\n      const logUrl = url + 'logs';\n      if (Constants.__unsafeNoWarnManifest2.extra?.expoGo) {\n        Constants.__unsafeNoWarnManifest2.extra.expoGo.logUrl = logUrl;\n      }\n      if (Constants.manifest2?.extra?.expoGo) {\n        Constants.manifest2.extra.expoGo.logUrl = logUrl;\n      }\n    }\n  }\n  // TODO: Maybe warn that console logging will not be enabled.\n\n  if (\n    Constants.__unsafeNoWarnManifest?.logUrl ||\n    Constants.__unsafeNoWarnManifest2?.extra?.expoGo?.logUrl\n  ) {\n    // Enable logging to the Expo dev tools only if this JS is not running in a web browser (ex: the\n    // remote debugger). In Expo Web we don't show console logs in the CLI, so there's no special case needed.\n    if (Platform.isAsyncDebugging) {\n      const RemoteLogging = require('../logs/RemoteLogging').default;\n      RemoteLogging.enqueueRemoteLogAsync('info', {}, [\n        'You are now debugging remotely; check your browser console for your application logs.',\n      ]);\n    } else {\n      const Logs = require('../logs/Logs');\n      Logs.enableExpoCliLogging();\n    }\n  }\n}\n"]}