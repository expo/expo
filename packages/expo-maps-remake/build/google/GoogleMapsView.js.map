{"version":3,"file":"GoogleMapsView.js","sourceRoot":"","sources":["../../src/google/GoogleMapsView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAI/B,MAAM,UAAU,GAAkC,iBAAiB,CAAC,sBAAsB,CAAC,CAAC;AAE5F,SAAS,cAAc,CAAI,WAA+B;IACxD,OAAO,KAAK,CAAC,WAAW,CACtB,CAAC,KAAK,EAAE,EAAE;QACR,WAAW,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC,EACD,CAAC,WAAW,CAAC,CACd,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,OAAO,CAAC,EACtB,WAAW,EACX,UAAU,EACV,cAAc,EACd,UAAU,EACV,aAAa,EACb,YAAY,EACZ,OAAO,EACP,GAAG,KAAK,EACC;IACT,MAAM,iBAAiB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QAC/C,WAAW,EAAE,EAAE,CAAC;IAClB,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IAClB,MAAM,gBAAgB,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;IACpD,MAAM,oBAAoB,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC;IAC5D,MAAM,gBAAgB,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;IACpD,MAAM,mBAAmB,GAAG,cAAc,CAAC,aAAa,CAAC,CAAC;IAC1D,MAAM,kBAAkB,GAAG,cAAc,CAAC,YAAY,CAAC,CAAC;IAExD,MAAM,aAAa,GAAG,OAAO,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC9C,GAAG,MAAM;QACT,mBAAmB;QACnB,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,yBAAyB;KAC7C,CAAC,CAAC,CAAC;IAEJ,OAAO,CACL,CAAC,UAAU,CACT,IAAI,KAAK,CAAC,CACV,OAAO,CAAC,CAAC,aAAa,CAAC,CACvB,WAAW,CAAC,CAAC,iBAAiB,CAAC,CAC/B,UAAU,CAAC,CAAC,gBAAgB,CAAC,CAC7B,cAAc,CAAC,CAAC,oBAAoB,CAAC,CACrC,UAAU,CAAC,CAAC,gBAAgB,CAAC,CAC7B,aAAa,CAAC,CAAC,mBAAmB,CAAC,CACnC,YAAY,CAAC,CAAC,kBAAkB,CAAC,EACjC,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport * as React from 'react';\n\nimport type { MapProps } from './GoogleMaps.types';\n\nconst NativeView: React.ComponentType<MapProps> = requireNativeView('ExpoGoogleMapsRemake');\n\nfunction useNativeEvent<T>(userHandler?: (data: T) => void) {\n  return React.useCallback(\n    (event) => {\n      userHandler?.(event.nativeEvent);\n    },\n    [userHandler]\n  );\n}\n\nexport function MapView({\n  onMapLoaded,\n  onMapClick,\n  onMapLongClick,\n  onPOIClick,\n  onMarkerClick,\n  onCameraMove,\n  markers,\n  ...props\n}: MapProps) {\n  const onNativeMapLoaded = React.useCallback(() => {\n    onMapLoaded?.();\n  }, [onMapLoaded]);\n  const onNativeMapClick = useNativeEvent(onMapClick);\n  const onNativeMapLongClick = useNativeEvent(onMapLongClick);\n  const onNativePOIClick = useNativeEvent(onPOIClick);\n  const onNativeMarkerClick = useNativeEvent(onMarkerClick);\n  const onNativeCameraMove = useNativeEvent(onCameraMove);\n\n  const parsedMarkers = markers?.map((marker) => ({\n    ...marker,\n    // @ts-expect-error\n    icon: marker.icon?.__expo_shared_object_id__,\n  }));\n\n  return (\n    <NativeView\n      {...props}\n      markers={parsedMarkers}\n      onMapLoaded={onNativeMapLoaded}\n      onMapClick={onNativeMapClick}\n      onMapLongClick={onNativeMapLongClick}\n      onPOIClick={onNativePOIClick}\n      onMarkerClick={onNativeMarkerClick}\n      onCameraMove={onNativeCameraMove}\n    />\n  );\n}\n"]}