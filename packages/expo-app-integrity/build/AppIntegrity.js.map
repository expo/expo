{"version":3,"file":"AppIntegrity.js","sourceRoot":"","sources":["../src/AppIntegrity.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAElD;;;;GAIG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,QAAQ,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;AAEvF;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW;IAC/B,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IACD,OAAO,gBAAgB,CAAC,WAAW,EAAE,CAAC;AACxC,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,KAAa,EAAE,SAAiB;IAC9D,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IACD,OAAO,gBAAgB,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AACtD,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,KAAa,EAAE,SAAiB;IACtE,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IACD,OAAO,gBAAgB,CAAC,iBAAiB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC9D,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,6BAA6B,CAAC,kBAA0B;IAC5E,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;IAChF,CAAC;IACD,OAAO,gBAAgB,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,CAAC;AAC5E,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,WAAmB;IAC7D,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IACD,OAAO,gBAAgB,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;AAC7D,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,8BAA8B;IAClD,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,gBAAgB,CAAC,8BAA8B,EAAE,CAAC;AAC3D,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAAC,QAAgB,EAAE,SAAiB;IACnF,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAC9E,CAAC;IACD,OAAO,gBAAgB,CAAC,2BAA2B,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC3E,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAAC,QAAgB;IACnE,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;IACjF,CAAC;IACD,OAAO,gBAAgB,CAAC,8BAA8B,CAAC,QAAQ,CAAC,CAAC;AACnE,CAAC","sourcesContent":["import { Platform } from 'react-native';\n\nimport ExpoAppIntegrity from './ExpoAppIntegrity';\n\n/**\n * A boolean value that indicates whether a particular device provides the [App Attest](https://developer.apple.com/documentation/devicecheck/establishing-your-app-s-integrity) service.\n * Not all device types support the App Attest service, so check for support before using the service.\n * @platform ios\n */\nexport const isSupported = Platform.OS === 'ios' ? ExpoAppIntegrity.isSupported : true;\n\n/**\n * Creates a new cryptographic key for use with the App Attest service.\n * @return A Promise that is fulfilled with a string that contains the key identifier. The key itself is stored securely in the Secure Enclave.\n * @platform ios\n */\nexport async function generateKey() {\n  if (Platform.OS !== 'ios') {\n    throw new Error('generateAssertion is only available on iOS');\n  }\n  return ExpoAppIntegrity.generateKey();\n}\n\n/**\n * Asks Apple to attest to the validity of a generated cryptographic key.\n * @param keyId The identifier you received by calling the `generateKey` function.\n * @param challenge A challenge string from your server.\n * @return A Promise that is fulfilled with a string that contains the attestation data. A statement from Apple about the validity of the key associated with keyId. Send this to your server for processing.\n * @platform ios\n */\nexport async function attestKey(keyId: string, challenge: string) {\n  if (Platform.OS !== 'ios') {\n    throw new Error('generateAssertion is only available on iOS');\n  }\n  return ExpoAppIntegrity.attestKey(keyId, challenge);\n}\n\n/**\n * Creates a block of data that demonstrates the legitimacy of an instance of your app running on a device.\n * @param keyId The identifier you received by calling the `generateKey` function.\n * @param challenge A string to be signed with the attested private key.\n * @return A Promise that is fulfilled with a string that contains the assertion object. A data structure that you send to your server for processing.\n * @platform ios\n */\nexport async function generateAssertion(keyId: string, challenge: string) {\n  if (Platform.OS !== 'ios') {\n    throw new Error('generateAssertion is only available on iOS');\n  }\n  return ExpoAppIntegrity.generateAssertion(keyId, challenge);\n}\n\n/**\n * Prepares the integrity token provider for the given cloud project number.\n * @param cloudProjectNumber The cloud project number.\n * @return A Promise that is fulfilled if the integrity token provider is prepared successfully.\n * @platform android\n */\nexport async function prepareIntegrityTokenProvider(cloudProjectNumber: string) {\n  if (Platform.OS !== 'android') {\n    throw new Error('prepareIntegrityTokenProvider is only available on Android');\n  }\n  return ExpoAppIntegrity.prepareIntegrityTokenProvider(cloudProjectNumber);\n}\n\n/**\n * Requests an integrity verdict for the given request hash from Google Play.\n * @param requestHash A string representing the request hash.\n * @return A Promise that is fulfilled with a string that contains the integrity check result.\n * @platform android\n */\nexport async function requestIntegrityCheck(requestHash: string) {\n  if (Platform.OS !== 'android') {\n    throw new Error('requestIntegrityCheck is only available on Android');\n  }\n  return ExpoAppIntegrity.requestIntegrityCheck(requestHash);\n}\n\n/**\n * Checks if hardware attestation is supported on this device.\n * @return A Promise that is fulfilled with a boolean indicating support.\n * @platform android\n */\nexport async function isHardwareAttestationSupported() {\n  if (Platform.OS !== 'android') {\n    return false;\n  }\n  return ExpoAppIntegrity.isHardwareAttestationSupported();\n}\n\n/**\n * Generates a hardware-attested key pair in the Android Keystore.\n * This key can be used for attestation on GrapheneOS and other secure Android distributions.\n * @param keyAlias A unique identifier for the key.\n * @param challenge A challenge string from your server.\n * @return A Promise that resolves when the key is generated successfully.\n * @platform android\n */\nexport async function generateHardwareAttestedKey(keyAlias: string, challenge: string) {\n  if (Platform.OS !== 'android') {\n    throw new Error('generateHardwareAttestedKey is only available on Android');\n  }\n  return ExpoAppIntegrity.generateHardwareAttestedKey(keyAlias, challenge);\n}\n\n/**\n * Retrieves the attestation certificate chain for a hardware-attested key.\n * The certificate chain can be validated on your server to verify device integrity.\n * @param keyAlias The identifier of the key to get certificates for.\n * @return A Promise that is fulfilled with an array of base64-encoded X.509 certificates.\n * @platform android\n */\nexport async function getAttestationCertificateChain(keyAlias: string) {\n  if (Platform.OS !== 'android') {\n    throw new Error('getAttestationCertificateChain is only available on Android');\n  }\n  return ExpoAppIntegrity.getAttestationCertificateChain(keyAlias);\n}\n"]}