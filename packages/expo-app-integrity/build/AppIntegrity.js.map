{"version":3,"file":"AppIntegrity.js","sourceRoot":"","sources":["../src/AppIntegrity.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAElD,MAAM,CAAC,KAAK,UAAU,WAAW;IAC/B,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IACD,OAAO,gBAAgB,CAAC,WAAW,EAAE,CAAC;AACxC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,GAAW,EAAE,SAAiB;IAC5D,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IACD,OAAO,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AACpD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,GAAW,EAAE,IAAY;IAC/D,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAChE,CAAC;IACD,OAAO,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,SAAiB;IAC3D,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;IACxE,CAAC;IACD,OAAO,gBAAgB,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;AAC3D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,6BAA6B,CAAC,kBAA0B;IAC5E,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;IAChF,CAAC;IACD,OAAO,gBAAgB,CAAC,6BAA6B,CAAC,kBAAkB,CAAC,CAAC;AAC5E,CAAC","sourcesContent":["import { Platform } from 'react-native';\n\nimport ExpoAppIntegrity from './ExpoAppIntegrity';\n\nexport async function generateKey() {\n  if (Platform.OS !== 'ios') {\n    throw new Error('generateAssertion is only available on iOS');\n  }\n  return ExpoAppIntegrity.generateKey();\n}\n\nexport async function attestKey(key: string, challenge: string) {\n  if (Platform.OS !== 'ios') {\n    throw new Error('generateAssertion is only available on iOS');\n  }\n  return ExpoAppIntegrity.attestKey(key, challenge);\n}\n\nexport async function generateAssertion(key: string, json: string) {\n  if (Platform.OS !== 'ios') {\n    throw new Error('generateAssertion is only available on iOS');\n  }\n  return ExpoAppIntegrity.generateAssertion(key, json);\n}\n\nexport async function requestIntegrityCheck(challenge: string) {\n  if (Platform.OS !== 'android') {\n    throw new Error('requestIntegrityCheck is only available on Android');\n  }\n  return ExpoAppIntegrity.requestIntegrityCheck(challenge);\n}\n\nexport async function prepareIntegrityTokenProvider(cloudProjectNumber: string) {\n  if (Platform.OS !== 'android') {\n    throw new Error('prepareIntegrityTokenProvider is only available on Android');\n  }\n  return ExpoAppIntegrity.prepareIntegrityTokenProvider(cloudProjectNumber);\n}\n"]}