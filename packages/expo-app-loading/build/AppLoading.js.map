{"version":3,"file":"AppLoading.js","sourceRoot":"","sources":["../src/AppLoading.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,OAAO,gBAAgB,MAAM,2BAA2B,CAAC;AAEzD,MAAM,UAAW,SAAQ,KAAK,CAAC,SAA0B;IACvD,UAAU,GAAY,KAAK,CAAC;IAE5B,iBAAiB;QACf,OAAO,CAAC,IAAI,CACV,uMAAuM,CACxM,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,IAAI,CAAC,6BAA6B,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACnD,OAAO,CAAC,KAAK,CAAC,uDAAuD,KAAK,EAAE,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC1B,CAAC;IAEO,KAAK,CAAC,6BAA6B;QACzC,IAAI,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;YACjC,OAAO;SACR;QAED,IAAI,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACnF;QAED,IAAI,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;YAC9B,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;SAClF;QAED,IAAI;YACF,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;SAC/B;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACpB,OAAO;aACR;YACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;SACvB;gBAAS;YACR,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACpB,OAAO;aACR;YACD,iGAAiG;YACjG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SACvB;IACH,CAAC;IAED,MAAM;QACJ,OAAO,oBAAC,gBAAgB,OAAK,IAAI,CAAC,KAAK,GAAI,CAAC;IAC9C,CAAC;CACF;AAED,eAAe,UAAU,CAAC","sourcesContent":["import React from 'react';\n\nimport { AppLoadingProps } from './AppLoading.types';\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\nclass AppLoading extends React.Component<AppLoadingProps> {\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    console.warn(\n      `expo-app-loading is deprecated in favor of expo-splash-screen: use SplashScreen.preventAutoHideAsync() and SplashScreen.hideAsync() instead. https://docs.expo.dev/versions/latest/sdk/splash-screen/`\n    );\n    this._isMounted = true;\n\n    this.startLoadingAppResourcesAsync().catch((error) => {\n      console.error(`AppLoading threw an unexpected error when loading:\\n${error}`);\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private async startLoadingAppResourcesAsync() {\n    if (!('startAsync' in this.props)) {\n      return;\n    }\n\n    if (!('onFinish' in this.props)) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    if (!('onError' in this.props)) {\n      throw new Error('AppLoading onError prop is required if startAsync is provided');\n    }\n\n    try {\n      await this.props.startAsync();\n    } catch (e) {\n      if (!this._isMounted) {\n        return;\n      }\n      this.props.onError(e);\n    } finally {\n      if (!this._isMounted) {\n        return;\n      }\n      // If we get to this point then we know that either there was no error, or the error was handled.\n      this.props.onFinish();\n    }\n  }\n\n  render() {\n    return <NativeAppLoading {...this.props} />;\n  }\n}\n\nexport default AppLoading;\n"]}