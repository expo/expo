{"version":3,"file":"MailComposer.js","sourceRoot":"","sources":["../src/MailComposer.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAGlD;;;;;GAKG;AACH,MAAM,UAAU,UAAU;IACxB,OAAO,gBAAgB,CAAC,UAAU,EAAE,CAAC;AACvC,CAAC;AAED,cAAc;AACd;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,OAA4B;IAC7D,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACtD,CAAC;AAED,cAAc;AACd;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,MAAM,gBAAgB,CAAC,gBAAgB,EAAE,CAAC;AACnD,CAAC;AAED,cAAc,sBAAsB,CAAC","sourcesContent":["import ExpoMailComposer from './ExpoMailComposer';\nimport { MailClient, MailComposerOptions, MailComposerResult } from './MailComposer.types';\n\n/**\n * Retrieves a list of available email clients installed on the device.\n * This can be used to present options to the user for sending emails through their preferred email client,\n * or to open an email client so the user can access their mailbox â€” for example, to open a confirmation email sent by your app.\n * @returns An array of available mail clients.\n */\nexport function getClients(): MailClient[] {\n  return ExpoMailComposer.getClients();\n}\n\n// @needsAudit\n/**\n * Opens a mail modal for iOS and a mail app intent for Android and fills the fields with provided\n * data. On iOS you will need to be signed into the Mail app.\n * @return A promise fulfilled with an object containing a `status` field that specifies whether an\n * email was sent, saved, or cancelled. Android does not provide this info, so the status is always\n * set as if the email were sent.\n */\nexport async function composeAsync(options: MailComposerOptions): Promise<MailComposerResult> {\n  return await ExpoMailComposer.composeAsync(options);\n}\n\n// @needsAudit\n/**\n * Determine if the `MailComposer` API can be used in this app.\n * @return A promise resolves to `true` if the API can be used, and `false` otherwise.\n * - Returns `true` on iOS when the device has a default email setup for sending mail.\n * - Can return `false` on iOS if an MDM profile is setup to block outgoing mail. If this is the\n * case, you may want to use the Linking API instead.\n * - Always returns `true` in the browser and on Android.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await ExpoMailComposer.isAvailableAsync();\n}\n\nexport * from './MailComposer.types';\n"]}