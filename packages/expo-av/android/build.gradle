apply plugin: 'com.android.library'

group = 'host.exp.exponent'
version = '14.0.5'

def REACT_NATIVE_BUILD_FROM_SOURCE = findProject(":ReactAndroid") != null
def REACT_NATIVE_DIR = REACT_NATIVE_BUILD_FROM_SOURCE
  ? findProject(":ReactAndroid").getProjectDir().parent
  : file(providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('react-native/package.json')")
    }.standardOutput.asText.get().trim()).parent

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
apply from: expoModulesCorePlugin
applyKotlinExpoModulesCorePlugin()
useCoreDependencies()
useDefaultAndroidSdkVersions()
useExpoPublishing()

android {
  if (rootProject.hasProperty("ndkPath")) {
    ndkPath rootProject.ext.ndkPath
  }
  if (rootProject.hasProperty("ndkVersion")) {
    ndkVersion rootProject.ext.ndkVersion
  }

  namespace "expo.modules.av"
  defaultConfig {
    versionCode 24
    versionName "14.0.5"

    externalNativeBuild {
      cmake {
        cppFlags "-O2 -frtti -fexceptions -Wall -fstack-protector-all"
        abiFilters (*reactNativeArchitectures())
        arguments "-DANDROID_STL=c++_shared",
            "-DREACT_NATIVE_DIR=${REACT_NATIVE_DIR}"
      }
    }
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  buildFeatures {
    prefab true
  }

  packagingOptions {
    // Gradle will add cmake target dependencies into packaging.
    // Theses files are intermediated linking files to build reanimated and should not be in final package.
    excludes += [
        "**/libc++_shared.so",
        "**/libreactnativejni.so",
        "**/libglog.so",
        "**/libjscexecutor.so",
        "**/libfbjni.so",
        "**/libfolly_json.so",
        "**/libhermes.so",
        "**/libjsi.so",
    ]
  }


  testOptions {
    unitTests.all {
      useJUnitPlatform()
    }
  }
}

dependencies {
  implementation 'com.facebook.react:react-android'

  compileOnly 'com.facebook.fbjni:fbjni:0.3.0'

  api 'com.google.android.exoplayer:exoplayer:2.18.1'
  api 'com.google.android.exoplayer:extension-okhttp:2.18.1'

  api "com.squareup.okhttp3:okhttp:3.14.9"
  api "com.squareup.okhttp3:okhttp-urlconnection:3.14.9"

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.1"

  testImplementation 'io.mockk:mockk:1.12.3'
}
