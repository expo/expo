{"version":3,"file":"withIosIcons.js","names":["_configPlugins","data","require","_imageUtils","fs","_interopRequireWildcard","_path","_AssetContents","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getProjectName","IOSConfig","XcodeUtils","IMAGE_CACHE_NAME","IMAGESET_PATH","withIosIcons","config","withDangerousMod","setIconsAsync","modRequest","projectRoot","exports","getIcons","_config$ios","ios","icon","WarningAggregator","addWarningIOS","iosNamedProjectRoot","getIosNamedProjectPath","ensureDir","join","imagesJson","generateUniversalIconAsync","cacheKey","platform","writeContentsJsonAsync","images","projectName","getAppleIconName","size","scale","filename","source","generateImageAsync","cacheType","src","name","width","height","removeTransparency","resizeMode","backgroundColor","assetPath","writeFile","idiom"],"sources":["../../../src/plugins/icons/withIosIcons.ts"],"sourcesContent":["import { ConfigPlugin, IOSConfig, WarningAggregator, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\n\nimport { ContentsJson, writeContentsJsonAsync } from './AssetContents';\n\nconst { getProjectName } = IOSConfig.XcodeUtils;\n\nconst IMAGE_CACHE_NAME = 'icons';\nconst IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\n\nexport const withIosIcons: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      await setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getIcons(config: Pick<ExpoConfig, 'icon' | 'ios'>): string | null {\n  // No support for empty strings.\n  return config.ios?.icon || config.icon || null;\n}\n\nexport async function setIconsAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getIcons(config);\n  if (!icon) {\n    WarningAggregator.addWarningIOS(\n      'icon',\n      'This is the image that your app uses on your home screen, you will need to configure it manually.'\n    );\n    return;\n  }\n\n  // Something like projectRoot/ios/MyApp/\n  const iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n\n  // Ensure the Images.xcassets/AppIcon.appiconset path exists\n  await fs.ensureDir(join(iosNamedProjectRoot, IMAGESET_PATH));\n\n  // Store the image JSON data for assigning via the Contents.json\n  const imagesJson: ContentsJson['images'] = await generateUniversalIconAsync(projectRoot, {\n    icon,\n    cacheKey: 'universal-icon',\n    iosNamedProjectRoot,\n    platform: 'ios',\n  });\n\n  // Finally, write the Config.json\n  await writeContentsJsonAsync(join(iosNamedProjectRoot, IMAGESET_PATH), { images: imagesJson });\n}\n\n/**\n * Return the project's named iOS path: ios/MyProject/\n *\n * @param projectRoot Expo project root path.\n */\nfunction getIosNamedProjectPath(projectRoot: string): string {\n  const projectName = getProjectName(projectRoot);\n  return join(projectRoot, 'ios', projectName);\n}\n\nfunction getAppleIconName(size: number, scale: number): string {\n  return `App-Icon-${size}x${size}@${scale}x.png`;\n}\n\nexport async function generateUniversalIconAsync(\n  projectRoot: string,\n  {\n    icon,\n    cacheKey,\n    iosNamedProjectRoot,\n    platform,\n  }: { platform: 'watchos' | 'ios'; icon: string; iosNamedProjectRoot: string; cacheKey: string }\n): Promise<ContentsJson['images']> {\n  const size = 1024;\n  const filename = getAppleIconName(size, 1);\n  // Using this method will cache the images in `.expo` based on the properties used to generate them.\n  // this method also supports remote URLs and using the global sharp instance.\n  const { source } = await generateImageAsync(\n    { projectRoot, cacheType: IMAGE_CACHE_NAME + cacheKey },\n    {\n      src: icon,\n      name: filename,\n      width: size,\n      height: size,\n      removeTransparency: true,\n      // The icon should be square, but if it's not then it will be cropped.\n      resizeMode: 'cover',\n      // Force the background color to solid white to prevent any transparency.\n      // TODO: Maybe use a more adaptive option based on the icon color?\n      backgroundColor: '#ffffff',\n    }\n  );\n  // Write image buffer to the file system.\n  const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n  await fs.writeFile(assetPath, source);\n\n  return [\n    {\n      filename: getAppleIconName(size, 1),\n      idiom: 'universal',\n      platform,\n      size: `${size}x${size}`,\n    },\n  ];\n}\n"],"mappings":"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"}