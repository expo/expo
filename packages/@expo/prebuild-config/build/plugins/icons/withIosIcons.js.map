{"version":3,"file":"withIosIcons.js","names":["getProjectName","IOSConfig","XcodeUtils","withIosIcons","config","withDangerousMod","setIconsAsync","modRequest","projectRoot","IMAGE_CACHE_NAME","IMAGESET_PATH","ICON_CONTENTS","idiom","sizes","size","scales","getIcons","ios","icon","WarningAggregator","addWarningIOS","iosNamedProjectRoot","getIosNamedProjectPath","fs","ensureDir","join","imagesJson","generatedIcons","platform","isMarketing","scale","filename","getAppleIconName","iconSizePx","source","generateImageAsync","cacheType","src","name","width","height","removeTransparency","resizeMode","backgroundColor","assetPath","writeFile","push","writeContentsJsonAsync","images","projectName"],"sources":["../../../src/plugins/icons/withIosIcons.ts"],"sourcesContent":["import { ConfigPlugin, IOSConfig, WarningAggregator, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\n\nimport { ContentsJson, ContentsJsonImageIdiom, writeContentsJsonAsync } from './AssetContents';\n\nconst { getProjectName } = IOSConfig.XcodeUtils;\n\nexport const withIosIcons: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      await setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nconst IMAGE_CACHE_NAME = 'icons';\nconst IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\n\n// Hard-coding seemed like the clearest and safest way to implement the sizes.\nexport const ICON_CONTENTS: {\n  idiom: ContentsJsonImageIdiom;\n  sizes: { size: number; scales: (1 | 2 | 3)[] }[];\n}[] = [\n  {\n    idiom: 'iphone',\n    sizes: [\n      {\n        size: 20,\n        scales: [2, 3],\n      },\n      {\n        size: 29,\n        scales: [1, 2, 3],\n      },\n      {\n        size: 40,\n        scales: [2, 3],\n      },\n      {\n        size: 60,\n        scales: [2, 3],\n      },\n      // TODO: 76x76@2x seems unused now\n      // {\n      //   size: 76,\n      //   scales: [2],\n      // },\n    ],\n  },\n  {\n    idiom: 'ipad',\n    sizes: [\n      {\n        size: 20,\n        scales: [1, 2],\n      },\n      {\n        size: 29,\n        scales: [1, 2],\n      },\n      {\n        size: 40,\n        scales: [1, 2],\n      },\n      {\n        size: 76,\n        scales: [1, 2],\n      },\n      {\n        size: 83.5,\n        scales: [2],\n      },\n    ],\n  },\n  {\n    idiom: 'ios-marketing',\n    sizes: [\n      {\n        size: 1024,\n        scales: [1],\n      },\n    ],\n  },\n];\n\nexport function getIcons(config: Pick<ExpoConfig, 'icon' | 'ios'>): string | null {\n  // No support for empty strings.\n  return config.ios?.icon || config.icon || null;\n}\n\nexport async function setIconsAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getIcons(config);\n  if (!icon) {\n    WarningAggregator.addWarningIOS(\n      'icon',\n      'This is the image that your app uses on your home screen, you will need to configure it manually.'\n    );\n    return;\n  }\n\n  // Something like projectRoot/ios/MyApp/\n  const iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n\n  // Ensure the Images.xcassets/AppIcon.appiconset path exists\n  await fs.ensureDir(join(iosNamedProjectRoot, IMAGESET_PATH));\n\n  // Store the image JSON data for assigning via the Contents.json\n  const imagesJson: ContentsJson['images'] = [];\n\n  // keep track of icons that have been generated so we can reuse them in the Contents.json\n  const generatedIcons: Record<string, boolean> = {};\n\n  for (const platform of ICON_CONTENTS) {\n    const isMarketing = platform.idiom === 'ios-marketing';\n    for (const { size, scales } of platform.sizes) {\n      for (const scale of scales) {\n        // The marketing icon is special because it makes no sense.\n        const filename = isMarketing ? 'ItunesArtwork@2x.png' : getAppleIconName(size, scale);\n        // Only create an image that hasn't already been generated.\n        if (!(filename in generatedIcons)) {\n          const iconSizePx = size * scale;\n\n          // Using this method will cache the images in `.expo` based on the properties used to generate them.\n          // this method also supports remote URLs and using the global sharp instance.\n          const { source } = await generateImageAsync(\n            { projectRoot, cacheType: IMAGE_CACHE_NAME },\n            {\n              src: icon,\n              name: filename,\n              width: iconSizePx,\n              height: iconSizePx,\n              removeTransparency: true,\n              // The icon should be square, but if it's not then it will be cropped.\n              resizeMode: 'cover',\n              // Force the background color to solid white to prevent any transparency.\n              // TODO: Maybe use a more adaptive option based on the icon color?\n              backgroundColor: '#ffffff',\n            }\n          );\n          // Write image buffer to the file system.\n          const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n          await fs.writeFile(assetPath, source);\n          // Save a reference to the generated image so we don't create a duplicate.\n          generatedIcons[filename] = true;\n        }\n        imagesJson.push({\n          idiom: platform.idiom,\n          size: `${size}x${size}`,\n          // @ts-ignore: template types not supported in TS yet\n          scale: `${scale}x`,\n          filename,\n        });\n      }\n    }\n  }\n\n  // Finally, write the Config.json\n  await writeContentsJsonAsync(join(iosNamedProjectRoot, IMAGESET_PATH), { images: imagesJson });\n}\n\n/**\n * Return the project's named iOS path: ios/MyProject/\n *\n * @param projectRoot Expo project root path.\n */\nfunction getIosNamedProjectPath(projectRoot: string): string {\n  const projectName = getProjectName(projectRoot);\n  return join(projectRoot, 'ios', projectName);\n}\n\nfunction getAppleIconName(size: number, scale: number): string {\n  return `App-Icon-${size}x${size}@${scale}x.png`;\n}\n"],"mappings":"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"}