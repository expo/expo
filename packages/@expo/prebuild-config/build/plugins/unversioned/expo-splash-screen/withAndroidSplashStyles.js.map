{"version":3,"file":"withAndroidSplashStyles.js","names":["_configPlugins","data","require","_android","_getAndroidSplashConfig","styleResourceGroup","name","parent","SPLASH_COLOR_NAME","withAndroidSplashStyles","config","props","withAndroidColors","backgroundColor","getSplashBackgroundColor","modResults","setSplashColorsForTheme","withAndroidColorsNight","getSplashDarkBackgroundColor","withAndroidStyles","removeOldSplashStyleGroup","addSplashScreenStyle","exports","styles","resources","style","item","$","_","filter","group","head","matches","getAndroidSplashConfig","getAndroidDarkSplashConfig","setSplashStylesForTheme","AndroidConfig","Styles","assignStylesValue","add","value","colors","Colors","assignColorValue"],"sources":["../../../../src/plugins/unversioned/expo-splash-screen/withAndroidSplashStyles.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withAndroidColorsNight,\n  withAndroidStyles,\n} from '@expo/config-plugins';\nimport { Colors } from '@expo/config-plugins/build/android';\nimport { ExpoConfig } from '@expo/config-types';\n\nimport {\n  AndroidSplashConfig,\n  getAndroidDarkSplashConfig,\n  getAndroidSplashConfig,\n} from './getAndroidSplashConfig';\n\nconst styleResourceGroup = {\n  name: 'Theme.App.SplashScreen',\n  parent: 'Theme.SplashScreen',\n};\n\nconst SPLASH_COLOR_NAME = 'splashscreen_background';\n\nexport const withAndroidSplashStyles: ConfigPlugin<AndroidSplashConfig> = (config, props) => {\n  config = withAndroidColors(config, (config) => {\n    const backgroundColor = getSplashBackgroundColor(config, props);\n    if (!backgroundColor) {\n      return config;\n    }\n    config.modResults = setSplashColorsForTheme(config.modResults, backgroundColor);\n    return config;\n  });\n  config = withAndroidColorsNight(config, (config) => {\n    const backgroundColor = getSplashDarkBackgroundColor(config, props);\n    if (!backgroundColor) {\n      return config;\n    }\n    config.modResults = setSplashColorsForTheme(config.modResults, backgroundColor);\n    return config;\n  });\n  config = withAndroidStyles(config, (config) => {\n    config.modResults = removeOldSplashStyleGroup(config.modResults);\n    config.modResults = addSplashScreenStyle(config.modResults);\n    return config;\n  });\n  return config;\n};\n\n// Add the style that extends Theme.SplashScreen\nfunction addSplashScreenStyle(styles: AndroidConfig.Resources.ResourceXML) {\n  const { resources } = styles;\n  const { style = [] } = resources;\n\n  const item = [\n    {\n      $: { name: 'windowSplashScreenBackground' },\n      _: '@color/splashscreen_background',\n    },\n    {\n      $: { name: 'windowSplashScreenAnimatedIcon' },\n      _: '@drawable/splashscreen_logo',\n    },\n    {\n      $: { name: 'postSplashScreenTheme' },\n      _: '@style/AppTheme',\n    },\n  ];\n\n  styles.resources.style = [\n    ...style.filter(({ $ }) => $.name !== 'Theme.App.SplashScreen'),\n    {\n      $: {\n        ...styleResourceGroup,\n      },\n      item,\n    },\n  ];\n\n  return styles;\n}\n\n// Remove the old style group which didn't extend the base theme properly.\nexport function removeOldSplashStyleGroup(styles: AndroidConfig.Resources.ResourceXML) {\n  const group = {\n    name: 'Theme.App.SplashScreen',\n    parent: 'Theme.AppCompat.Light.NoActionBar',\n  };\n\n  styles.resources.style = styles.resources.style?.filter?.(({ $: head }) => {\n    let matches = head.name === group.name;\n    if (group.parent != null && matches) {\n      matches = head.parent === group.parent;\n    }\n    return !matches;\n  });\n\n  return styles;\n}\n\nexport function getSplashBackgroundColor(\n  config: ExpoConfig,\n  props: AndroidSplashConfig | null\n): string | null {\n  return getAndroidSplashConfig(config, props)?.backgroundColor ?? null;\n}\n\nexport function getSplashDarkBackgroundColor(\n  config: ExpoConfig,\n  props: AndroidSplashConfig | null\n): string | null {\n  return getAndroidDarkSplashConfig(config, props)?.backgroundColor ?? null;\n}\n\nexport function setSplashStylesForTheme(styles: AndroidConfig.Resources.ResourceXML) {\n  // Add splash screen image\n  return AndroidConfig.Styles.assignStylesValue(styles, {\n    add: true,\n    value: '@drawable/splashscreen',\n    name: 'android:windowBackground',\n    parent: styleResourceGroup,\n  });\n}\n\nexport function setSplashColorsForTheme(\n  colors: AndroidConfig.Resources.ResourceXML,\n  backgroundColor: string | null\n): AndroidConfig.Resources.ResourceXML {\n  return Colors.assignColorValue(colors, { value: backgroundColor, name: SPLASH_COLOR_NAME });\n}\n"],"mappings":"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","ignoreList":[]}