{"version":3,"file":"withAndroidSplashImages.js","names":["_configPlugins","data","require","_imageUtils","_fsExtra","_interopRequireDefault","_path","_getAndroidSplashConfig","e","__esModule","default","IMAGE_CACHE_NAME","SPLASH_SCREEN_FILENAME","DRAWABLES_CONFIGS","modes","light","path","dark","dimensionsMultiplier","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","withAndroidSplashImages","config","props","withDangerousMod","setSplashImageDrawablesAsync","modRequest","projectRoot","imageWidth","exports","clearAllExistingSplashImagesAsync","splash","getAndroidSplashConfig","darkSplash","getAndroidDarkSplashConfig","Promise","all","setSplashImageDrawablesForThemeAsync","androidMainPath","join","Object","values","map","filePath","fs","pathExists","resolve","remove","theme","sizes","imageKey","image","enableFullScreenImage_legacy","source","generateImageAsync","cacheType","src","writeDrawable","multiplier","size","canvasSize","background","generateImageBackgroundAsync","width","height","backgroundColor","resizeMode","foreground","composedImage","compositeImagesAsync","x","y","outputPath","folder","dirname","ensureDir","writeFile"],"sources":["../../../../src/plugins/unversioned/expo-splash-screen/withAndroidSplashImages.ts"],"sourcesContent":["import { ConfigPlugin, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport {\n  generateImageAsync,\n  compositeImagesAsync,\n  generateImageBackgroundAsync,\n} from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport {\n  AndroidSplashConfig,\n  getAndroidDarkSplashConfig,\n  getAndroidSplashConfig,\n  SplashScreenConfig,\n} from './getAndroidSplashConfig';\n\ntype DRAWABLE_SIZE = 'default' | 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype THEME = 'light' | 'dark';\n\nconst IMAGE_CACHE_NAME = 'splash-android';\nconst SPLASH_SCREEN_FILENAME = 'splashscreen_logo.png';\nconst DRAWABLES_CONFIGS: {\n  [key in DRAWABLE_SIZE]: {\n    modes: {\n      [key in THEME]: {\n        path: string;\n      };\n    };\n    dimensionsMultiplier: number;\n  };\n} = {\n  default: {\n    modes: {\n      light: {\n        path: `./res/drawable/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1.5,\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 2,\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 3,\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 4,\n  },\n};\n\nexport const withAndroidSplashImages: ConfigPlugin<AndroidSplashConfig> = (config, props) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setSplashImageDrawablesAsync(\n        config,\n        props,\n        config.modRequest.projectRoot,\n        props?.imageWidth ?? 200\n      );\n      return config;\n    },\n  ]);\n};\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn't provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n *\n * @param androidMainPath Absolute path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport async function setSplashImageDrawablesAsync(\n  config: Pick<ExpoConfig, 'android' | 'splash'>,\n  props: AndroidSplashConfig | null,\n  projectRoot: string,\n  imageWidth: number\n) {\n  await clearAllExistingSplashImagesAsync(projectRoot);\n\n  const splash = getAndroidSplashConfig(config, props);\n  const darkSplash = getAndroidDarkSplashConfig(config, props);\n\n  await Promise.all([\n    setSplashImageDrawablesForThemeAsync(splash, 'light', projectRoot, imageWidth),\n    setSplashImageDrawablesForThemeAsync(darkSplash, 'dark', projectRoot, imageWidth),\n  ]);\n}\n\nasync function clearAllExistingSplashImagesAsync(projectRoot: string) {\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    Object.values(DRAWABLES_CONFIGS).map(async ({ modes }) => {\n      await Promise.all(\n        Object.values(modes).map(async ({ path: filePath }) => {\n          if (await fs.pathExists(path.resolve(androidMainPath, filePath))) {\n            await fs.remove(path.resolve(androidMainPath, filePath));\n          }\n        })\n      );\n    })\n  );\n}\n\nexport async function setSplashImageDrawablesForThemeAsync(\n  config: SplashScreenConfig | null,\n  theme: 'dark' | 'light',\n  projectRoot: string,\n  imageWidth: number = 100\n) {\n  if (!config) return;\n  const sizes: DRAWABLE_SIZE[] = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'];\n\n  await Promise.all(\n    sizes.map(async (imageKey) => {\n      // @ts-ignore\n      const image = config[imageKey];\n\n      if (image) {\n        if (config.enableFullScreenImage_legacy) {\n          const { source } = await generateImageAsync(\n            { projectRoot, cacheType: IMAGE_CACHE_NAME },\n            {\n              src: image,\n            } as any\n          );\n\n          return writeDrawable(projectRoot, imageKey, theme, source);\n        }\n\n        const multiplier = DRAWABLES_CONFIGS[imageKey].dimensionsMultiplier;\n        const size = imageWidth * multiplier; // \"imageWidth\" must be replaced by the logo width chosen by the user in its config file\n        const canvasSize = 288 * multiplier;\n\n        const background = await generateImageBackgroundAsync({\n          width: canvasSize,\n          height: canvasSize,\n          backgroundColor: config.backgroundColor ?? 'transparent',\n          resizeMode: 'cover',\n        });\n\n        const { source: foreground } = await generateImageAsync(\n          {\n            projectRoot,\n            cacheType: IMAGE_CACHE_NAME,\n          },\n          {\n            src: image,\n            resizeMode: 'contain',\n            width: size,\n            height: size,\n          }\n        );\n\n        const composedImage = await compositeImagesAsync({\n          background,\n          foreground,\n          x: (canvasSize - size) / 2,\n          y: (canvasSize - size) / 2,\n        });\n\n        await writeDrawable(projectRoot, imageKey, theme, composedImage);\n      }\n      return null;\n    })\n  );\n}\n\nasync function writeDrawable(\n  projectRoot: string,\n  imageKey: DRAWABLE_SIZE,\n  theme: 'dark' | 'light',\n  composedImage: Buffer\n) {\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n  // Get output path for drawable.\n  const outputPath = path.join(androidMainPath, DRAWABLES_CONFIGS[imageKey].modes[theme].path);\n\n  const folder = path.dirname(outputPath);\n  // Ensure directory exists.\n  await fs.ensureDir(folder);\n  await fs.writeFile(outputPath, composedImage);\n}\n"],"mappings":"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","ignoreList":[]}