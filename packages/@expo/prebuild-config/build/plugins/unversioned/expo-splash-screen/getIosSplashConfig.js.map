{"version":3,"file":"getIosSplashConfig.js","names":["defaultResizeMode","defaultBackgroundColor","getIosSplashConfig","config","ios","splash","image","resizeMode","backgroundColor","tabletImage","tabletBackgroundColor","dark"],"sources":["../../../../src/plugins/unversioned/expo-splash-screen/getIosSplashConfig.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\ntype ExpoConfigIosSplash = NonNullable<NonNullable<ExpoConfig['ios']>['splash']>;\n\nconst defaultResizeMode = 'contain';\nconst defaultBackgroundColor = '#ffffff';\n\nexport interface IOSSplashConfig {\n  image?: string | null;\n  // tabletImage: string | null;\n  backgroundColor: string;\n  resizeMode: NonNullable<ExpoConfigIosSplash['resizeMode']>;\n  tabletImage: string | null;\n  // TODO: These are here just to test the functionality, the API should be more robust and account for tablet images.\n  tabletBackgroundColor: string | null;\n  dark?: {\n    image?: string | null;\n    backgroundColor?: string | null;\n    tabletImage?: string | null;\n    tabletBackgroundColor?: string | null;\n  };\n}\n\n// TODO: Maybe use an array on splash with theme value. Then remove the array in serialization for legacy and manifest.\nexport function getIosSplashConfig(config: ExpoConfig): IOSSplashConfig | null {\n  // Respect the splash screen object, don't mix and match across different splash screen objects\n  // in case the user wants the top level splash to apply to every platform except iOS.\n  if (config.ios?.splash) {\n    const splash = config.ios?.splash;\n    const image = splash.image ?? null;\n    return {\n      image,\n      resizeMode: splash.resizeMode ?? defaultResizeMode,\n      backgroundColor: splash.backgroundColor ?? defaultBackgroundColor,\n      tabletImage: splash.tabletImage ?? null,\n      tabletBackgroundColor: splash.tabletBackgroundColor,\n      dark: {\n        image: splash.dark?.image ?? null,\n        backgroundColor: splash.dark?.backgroundColor,\n        tabletImage: splash.dark?.tabletImage ?? null,\n        tabletBackgroundColor: splash.dark?.tabletBackgroundColor,\n      },\n    };\n  }\n\n  if (config.splash) {\n    const splash = config.splash;\n    const image = splash.image ?? null;\n    return {\n      image,\n      resizeMode: splash.resizeMode ?? defaultResizeMode,\n      backgroundColor: splash.backgroundColor ?? defaultBackgroundColor,\n      tabletImage: null,\n      tabletBackgroundColor: null,\n      dark: {\n        image: null,\n        backgroundColor: null,\n        tabletImage: null,\n        tabletBackgroundColor: null,\n      },\n    };\n  }\n\n  return {\n    backgroundColor: '#ffffff',\n    resizeMode: 'contain',\n    tabletImage: null,\n    tabletBackgroundColor: null,\n  };\n}\n"],"mappings":";;;;;;AAIA,MAAMA,iBAAiB,GAAG,SAAS;AACnC,MAAMC,sBAAsB,GAAG,SAAS;AAkBxC;AACO,SAASC,kBAAkB,CAACC,MAAkB,EAA0B;EAAA;EAC7E;EACA;EACA,mBAAIA,MAAM,CAACC,GAAG,wCAAV,YAAYC,MAAM,EAAE;IAAA;IACtB,MAAMA,MAAM,mBAAGF,MAAM,CAACC,GAAG,iDAAV,aAAYC,MAAM;IACjC,MAAMC,KAAK,oBAAGD,MAAM,CAACC,KAAK,yDAAI,IAAI;IAClC,OAAO;MACLA,KAAK;MACLC,UAAU,wBAAEF,MAAM,CAACE,UAAU,mEAAIP,iBAAiB;MAClDQ,eAAe,2BAAEH,MAAM,CAACG,eAAe,yEAAIP,sBAAsB;MACjEQ,WAAW,yBAAEJ,MAAM,CAACI,WAAW,qEAAI,IAAI;MACvCC,qBAAqB,EAAEL,MAAM,CAACK,qBAAqB;MACnDC,IAAI,EAAE;QACJL,KAAK,wCAAED,MAAM,CAACM,IAAI,iDAAX,aAAaL,KAAK,mEAAI,IAAI;QACjCE,eAAe,mBAAEH,MAAM,CAACM,IAAI,kDAAX,cAAaH,eAAe;QAC7CC,WAAW,4CAAEJ,MAAM,CAACM,IAAI,kDAAX,cAAaF,WAAW,yEAAI,IAAI;QAC7CC,qBAAqB,mBAAEL,MAAM,CAACM,IAAI,kDAAX,cAAaD;MACtC;IACF,CAAC;EACH;EAEA,IAAIP,MAAM,CAACE,MAAM,EAAE;IAAA;IACjB,MAAMA,MAAM,GAAGF,MAAM,CAACE,MAAM;IAC5B,MAAMC,KAAK,qBAAGD,MAAM,CAACC,KAAK,2DAAI,IAAI;IAClC,OAAO;MACLA,KAAK;MACLC,UAAU,yBAAEF,MAAM,CAACE,UAAU,qEAAIP,iBAAiB;MAClDQ,eAAe,4BAAEH,MAAM,CAACG,eAAe,2EAAIP,sBAAsB;MACjEQ,WAAW,EAAE,IAAI;MACjBC,qBAAqB,EAAE,IAAI;MAC3BC,IAAI,EAAE;QACJL,KAAK,EAAE,IAAI;QACXE,eAAe,EAAE,IAAI;QACrBC,WAAW,EAAE,IAAI;QACjBC,qBAAqB,EAAE;MACzB;IACF,CAAC;EACH;EAEA,OAAO;IACLF,eAAe,EAAE,SAAS;IAC1BD,UAAU,EAAE,SAAS;IACrBE,WAAW,EAAE,IAAI;IACjBC,qBAAqB,EAAE;EACzB,CAAC;AACH"}