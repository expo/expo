{"version":3,"file":"withIosSplashAssets.js","names":["debug","Debug","IMAGE_CACHE_NAME","IMAGESET_PATH","BACKGROUND_IMAGESET_PATH","PNG_FILENAME","DARK_PNG_FILENAME","TABLET_PNG_FILENAME","DARK_TABLET_PNG_FILENAME","withIosSplashAssets","config","splash","withDangerousMod","iosNamedProjectRoot","IOSConfig","Paths","getSourceRoot","modRequest","projectRoot","createSplashScreenBackgroundImageAsync","configureImageAssets","image","darkImage","dark","tabletImage","darkTabletImage","imageSetPath","path","resolve","fs","remove","writeContentsJsonFileAsync","assetPath","copyImageFiles","createPngFileAsync","color","filePath","png","Jimp","writeAsync","createBackgroundImagesAsync","darkColor","tabletColor","darkTabletColor","generateImagesAssetsAsync","generateImageAsset","item","fileName","anyItem","darkItem","tabletItem","darkTabletItem","source","generateImageAsync","cacheType","src","writeFile","items","filter","Promise","all","map","backgroundColor","tabletBackgroundColor","imagesetPath","join","ensureDir","darkAppearances","appearance","value","buildContentsJsonImages","createContentsJsonItem","idiom","filename","scale","appearances","undefined","Boolean","images","writeContentsJsonAsync"],"sources":["../../../../src/plugins/unversioned/expo-splash-screen/withIosSplashAssets.ts"],"sourcesContent":["import { ConfigPlugin, IOSConfig, withDangerousMod } from '@expo/config-plugins';\nimport { generateImageAsync } from '@expo/image-utils';\nimport Debug from 'debug';\nimport fs from 'fs-extra';\n// @ts-ignore\nimport Jimp from 'jimp-compact';\nimport * as path from 'path';\n\nimport {\n  ContentsJsonImage,\n  ContentsJsonImageAppearance,\n  createContentsJsonItem,\n  writeContentsJsonAsync,\n} from '../../icons/AssetContents';\nimport { IOSSplashConfig } from './getIosSplashConfig';\n\nconst debug = Debug('expo:prebuild-config:expo-splash-screen:ios:assets');\n\nconst IMAGE_CACHE_NAME = 'splash-ios';\nconst IMAGESET_PATH = 'Images.xcassets/SplashScreen.imageset';\nconst BACKGROUND_IMAGESET_PATH = 'Images.xcassets/SplashScreenBackground.imageset';\nconst PNG_FILENAME = 'image.png';\nconst DARK_PNG_FILENAME = 'dark_image.png';\nconst TABLET_PNG_FILENAME = 'tablet_image.png';\nconst DARK_TABLET_PNG_FILENAME = 'dark_tablet_image.png';\n\nexport const withIosSplashAssets: ConfigPlugin<IOSSplashConfig> = (config, splash) => {\n  if (!splash) {\n    return config;\n  }\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      const iosNamedProjectRoot = IOSConfig.Paths.getSourceRoot(config.modRequest.projectRoot);\n\n      await createSplashScreenBackgroundImageAsync({\n        iosNamedProjectRoot,\n        splash,\n      });\n\n      await configureImageAssets({\n        projectRoot: config.modRequest.projectRoot,\n        iosNamedProjectRoot,\n        image: splash.image,\n        darkImage: splash.dark?.image,\n        tabletImage: splash.tabletImage,\n        darkTabletImage: splash.dark?.tabletImage,\n      });\n\n      return config;\n    },\n  ]);\n};\n\n/**\n * Creates imageset containing image for Splash/Launch Screen.\n */\nasync function configureImageAssets({\n  projectRoot,\n  iosNamedProjectRoot,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  projectRoot: string;\n  iosNamedProjectRoot: string;\n  image?: string | null;\n  darkImage?: string | null;\n  tabletImage: string | null;\n  darkTabletImage?: string | null;\n}) {\n  const imageSetPath = path.resolve(iosNamedProjectRoot, IMAGESET_PATH);\n\n  // ensure old SplashScreen imageSet is removed\n  await fs.remove(imageSetPath);\n\n  if (!image) {\n    return;\n  }\n\n  await writeContentsJsonFileAsync({\n    assetPath: imageSetPath,\n    image: PNG_FILENAME,\n    darkImage: darkImage ? DARK_PNG_FILENAME : null,\n    tabletImage: tabletImage ? TABLET_PNG_FILENAME : null,\n    darkTabletImage: darkTabletImage ? DARK_TABLET_PNG_FILENAME : null,\n  });\n\n  await copyImageFiles({\n    projectRoot,\n    iosNamedProjectRoot,\n    image,\n    darkImage,\n    tabletImage,\n    darkTabletImage,\n  });\n}\n\nasync function createPngFileAsync(color: string, filePath: string) {\n  const png = new Jimp(1, 1, color);\n  return png.writeAsync(filePath);\n}\n\nasync function createBackgroundImagesAsync({\n  iosNamedProjectRoot,\n  color,\n  darkColor,\n  tabletColor,\n  darkTabletColor,\n}: {\n  iosNamedProjectRoot: string;\n  color: string;\n  darkColor: string | null;\n  tabletColor: string | null;\n  darkTabletColor: string | null;\n}) {\n  await generateImagesAssetsAsync({\n    async generateImageAsset(item, fileName) {\n      await createPngFileAsync(\n        item,\n        path.resolve(iosNamedProjectRoot, BACKGROUND_IMAGESET_PATH, fileName)\n      );\n    },\n    anyItem: color,\n    darkItem: darkColor,\n    tabletItem: tabletColor,\n    darkTabletItem: darkTabletColor,\n  });\n}\n\nasync function copyImageFiles({\n  projectRoot,\n  iosNamedProjectRoot,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  projectRoot: string;\n  iosNamedProjectRoot: string;\n  image: string;\n  darkImage?: string | null;\n  tabletImage?: string | null;\n  darkTabletImage?: string | null;\n}) {\n  await generateImagesAssetsAsync({\n    async generateImageAsset(item, fileName) {\n      // Using this method will cache the images in `.expo` based on the properties used to generate them.\n      // this method also supports remote URLs and using the global sharp instance.\n      const { source } = await generateImageAsync({ projectRoot, cacheType: IMAGE_CACHE_NAME }, {\n        src: item,\n      } as any);\n      // Write image buffer to the file system.\n      // const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n      await fs.writeFile(path.resolve(iosNamedProjectRoot, IMAGESET_PATH, fileName), source);\n    },\n    anyItem: image,\n    darkItem: darkImage,\n    tabletItem: tabletImage,\n    darkTabletItem: darkTabletImage,\n  });\n}\n\nasync function generateImagesAssetsAsync({\n  generateImageAsset,\n  anyItem,\n  darkItem,\n  tabletItem,\n  darkTabletItem,\n}: {\n  generateImageAsset: (item: string, fileName: string) => Promise<void>;\n  anyItem: string;\n  darkItem?: string | null;\n  tabletItem?: string | null;\n  darkTabletItem?: string | null;\n}) {\n  const items = [\n    [anyItem, PNG_FILENAME],\n    [darkItem, DARK_PNG_FILENAME],\n    [tabletItem, TABLET_PNG_FILENAME],\n    [darkTabletItem, DARK_TABLET_PNG_FILENAME],\n  ].filter(([item]) => !!item) as unknown as [string, string];\n\n  await Promise.all(items.map(([item, fileName]) => generateImageAsset(item, fileName)));\n}\n\nasync function createSplashScreenBackgroundImageAsync({\n  iosNamedProjectRoot,\n  splash,\n}: {\n  // Something like projectRoot/ios/MyApp/\n  iosNamedProjectRoot: string;\n  splash: IOSSplashConfig;\n}) {\n  const color = splash.backgroundColor;\n  const darkColor = splash.dark?.backgroundColor;\n  const tabletColor = splash.tabletBackgroundColor;\n  const darkTabletColor = splash.dark?.tabletBackgroundColor;\n\n  const imagesetPath = path.join(iosNamedProjectRoot, BACKGROUND_IMAGESET_PATH);\n  // Ensure the Images.xcassets/... path exists\n  await fs.remove(imagesetPath);\n  await fs.ensureDir(imagesetPath);\n\n  await createBackgroundImagesAsync({\n    iosNamedProjectRoot,\n    color,\n    darkColor: darkColor ? darkColor : null,\n    tabletColor: tabletColor ? tabletColor : null,\n    darkTabletColor: darkTabletColor ? darkTabletColor : null,\n  });\n\n  await writeContentsJsonFileAsync({\n    assetPath: path.resolve(iosNamedProjectRoot, BACKGROUND_IMAGESET_PATH),\n    image: PNG_FILENAME,\n    darkImage: darkColor ? DARK_PNG_FILENAME : null,\n    tabletImage: tabletColor ? TABLET_PNG_FILENAME : null,\n    darkTabletImage: darkTabletColor ? DARK_TABLET_PNG_FILENAME : null,\n  });\n}\n\nconst darkAppearances: ContentsJsonImageAppearance[] = [\n  {\n    appearance: 'luminosity',\n    value: 'dark',\n  } as ContentsJsonImageAppearance,\n];\n\nexport function buildContentsJsonImages({\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  image: string;\n  tabletImage: string | null;\n  darkImage: string | null;\n  darkTabletImage: string | null;\n}): ContentsJsonImage[] {\n  return [\n    // Phone light\n    createContentsJsonItem({\n      idiom: 'universal',\n      filename: image,\n      scale: '1x',\n    }),\n    createContentsJsonItem({\n      idiom: 'universal',\n      scale: '2x',\n    }),\n    createContentsJsonItem({\n      idiom: 'universal',\n      scale: '3x',\n    }),\n    // Phone dark\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        filename: darkImage,\n        scale: '1x',\n      }),\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        scale: '2x',\n      }),\n    darkImage &&\n      createContentsJsonItem({\n        idiom: 'universal',\n        appearances: darkAppearances,\n        scale: '3x',\n      }),\n    // Tablet light\n    tabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        filename: tabletImage,\n        scale: '1x',\n      }),\n    tabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        scale: '2x',\n      }),\n    // Phone dark\n    darkTabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        appearances: darkAppearances,\n        filename: darkTabletImage ?? undefined,\n        scale: '1x',\n      }),\n    darkTabletImage &&\n      createContentsJsonItem({\n        idiom: 'ipad',\n        appearances: darkAppearances,\n        scale: '2x',\n      }),\n  ].filter(Boolean) as ContentsJsonImage[];\n}\n\nasync function writeContentsJsonFileAsync({\n  assetPath,\n  image,\n  darkImage,\n  tabletImage,\n  darkTabletImage,\n}: {\n  assetPath: string;\n  image: string;\n  darkImage: string | null;\n  tabletImage: string | null;\n  darkTabletImage: string | null;\n}) {\n  const images = buildContentsJsonImages({ image, darkImage, tabletImage, darkTabletImage });\n\n  debug(`create contents.json:`, assetPath);\n  debug(`use images:`, images);\n  await writeContentsJsonAsync(assetPath, { images });\n}\n"],"mappings":"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"}