{"version":3,"file":"renderStaticContent.js","sourceRoot":"","sources":["../../src/static/renderStaticContent.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport '@expo/metro-runtime';\n\nimport * as Font from 'expo-font/build/server';\nimport { ExpoRoot } from 'expo-router';\nimport { ctx } from 'expo-router/_ctx';\nimport { InnerRoot } from 'expo-router/build/static/html';\nimport { registerStaticRootComponent } from 'expo-router/build/static/registerRootComponent';\nimport Head from 'expo-router/head';\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server.node';\n\nimport { getRootComponent } from './getRootComponent';\nimport { PreloadedDataScript } from './html';\n\nconst debug = require('debug')('expo:router:server:renderStaticContent');\n\nfunction resetReactNavigationContexts() {\n  // https://github.com/expo/router/discussions/588\n  // https://github.com/react-navigation/react-navigation/blob/9fe34b445fcb86e5666f61e144007d7540f014fa/packages/elements/src/getNamedContext.tsx#LL3C1-L4C1\n\n  // React Navigation is storing providers in a global, this is fine for the first static render\n  // but subsequent static renders of Stack or Tabs will cause React to throw a warning. To prevent this warning, we'll reset the globals before rendering.\n  const contexts = '__react_navigation__elements_contexts';\n  (globalThis as any)[contexts] = new Map<string, React.Context<any>>();\n}\n\ntype GetStaticContentOptions = {\n  loader?: {\n    data?: any;\n  };\n};\n\nexport async function getStaticContent(\n  location: URL,\n  options?: GetStaticContentOptions\n): Promise<string> {\n  const headContext: { helmet?: any } = {};\n  const Root = getRootComponent();\n\n  const {\n    // NOTE: The `element` that's returned adds two extra Views and\n    // the seemingly unused `RootTagContext.Provider`.\n    element,\n    getStyleElement,\n  } = registerStaticRootComponent(ExpoRoot, {\n    location,\n    context: ctx,\n    wrapper: ({ children }: React.ComponentProps<any>) => (\n      <Root>\n        <div id=\"root\">{children}</div>\n      </Root>\n    ),\n  });\n\n  // Clear any existing static resources from the global scope to attempt to prevent leaking between pages.\n  // This could break if pages are rendered in parallel or if fonts are loaded outside of the React tree\n  Font.resetServerContext();\n\n  // This MUST be run before `ReactDOMServer.renderToString` to prevent\n  // \"Warning: Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.\"\n  resetReactNavigationContexts();\n\n  const loadedData = options?.loader?.data ? { [location.pathname]: options.loader.data } : null;\n\n  const html = ReactDOMServer.renderToString(\n    <Head.Provider context={headContext}>\n      <InnerRoot loadedData={loadedData}>{element}</InnerRoot>\n    </Head.Provider>\n  );\n\n  // Eval the CSS after the HTML is rendered so that the CSS is in the same order\n  const css = ReactDOMServer.renderToStaticMarkup(getStyleElement());\n\n  let output = mixHeadComponentsWithStaticResults(headContext.helmet, html);\n\n  output = output.replace('</head>', `${css}</head>`);\n\n  const fonts = Font.getServerResources();\n  debug(`Pushing static fonts: (count: ${fonts.length})`, fonts);\n  // debug('Push static fonts:', fonts)\n  // Inject static fonts loaded with expo-font\n  output = output.replace('</head>', `${fonts.join('')}</head>`);\n\n  if (loadedData) {\n    const loaderDataScript = ReactDOMServer.renderToStaticMarkup(\n      <PreloadedDataScript data={loadedData} />\n    );\n    output = output.replace('</head>', `${loaderDataScript}</head>`);\n  }\n\n  return '<!DOCTYPE html>' + output;\n}\n\nfunction mixHeadComponentsWithStaticResults(helmet: any, html: string) {\n  // Head components\n  for (const key of ['title', 'priority', 'meta', 'link', 'script', 'style'].reverse()) {\n    const result = helmet?.[key]?.toString();\n    if (result) {\n      html = html.replace('<head>', `<head>${result}`);\n    }\n  }\n\n  // attributes\n  html = html.replace('<html ', `<html ${helmet?.htmlAttributes.toString()} `);\n  html = html.replace('<body ', `<body ${helmet?.bodyAttributes.toString()} `);\n\n  return html;\n}\n\n// Re-export for use in server\nexport { getBuildTimeServerManifestAsync, getManifest } from './getServerManifest';\n"]}