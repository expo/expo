{"version":3,"file":"EasBuild.js","names":["APPLY_EAS_GRADLE","hasApplyLine","content","applyLine","replace","split","some","line","getEasBuildGradlePath","projectRoot","path","join","configureEasBuildAsync","buildGradlePath","Paths","getAppBuildGradleFilePath","easGradlePath","fs","promises","writeFile","gradleScript","buildGradleContent","readFile","hasEasGradleApply","trim","isEasBuildGradleConfiguredAsync","hasEasGradleFile","existsSync"],"sources":["../../src/android/EasBuild.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport gradleScript from './EasBuildGradleScript';\nimport * as Paths from './Paths';\n\nconst APPLY_EAS_GRADLE = 'apply from: \"./eas-build.gradle\"';\n\nfunction hasApplyLine(content: string, applyLine: string): boolean {\n  return (\n    content\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some((line) => line === applyLine || line === applyLine.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function getEasBuildGradlePath(projectRoot: string): string {\n  return path.join(projectRoot, 'android', 'app', 'eas-build.gradle');\n}\n\nexport async function configureEasBuildAsync(projectRoot: string): Promise<void> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  await fs.promises.writeFile(easGradlePath, gradleScript);\n\n  const buildGradleContent = await fs.promises.readFile(path.join(buildGradlePath), 'utf8');\n\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  if (!hasEasGradleApply) {\n    await fs.promises.writeFile(\n      buildGradlePath,\n      `${buildGradleContent.trim()}\\n${APPLY_EAS_GRADLE}\\n`\n    );\n  }\n}\n\nexport async function isEasBuildGradleConfiguredAsync(projectRoot: string): Promise<boolean> {\n  const buildGradlePath = Paths.getAppBuildGradleFilePath(projectRoot);\n  const easGradlePath = getEasBuildGradlePath(projectRoot);\n\n  const hasEasGradleFile = await fs.existsSync(easGradlePath);\n\n  const buildGradleContent = await fs.promises.readFile(path.join(buildGradlePath), 'utf8');\n  const hasEasGradleApply = hasApplyLine(buildGradleContent, APPLY_EAS_GRADLE);\n\n  return hasEasGradleApply && hasEasGradleFile;\n}\n"],"mappings":";;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAiC;AAAA;AAAA;AAEjC,MAAMA,gBAAgB,GAAG,kCAAkC;AAE3D,SAASC,YAAY,CAACC,OAAe,EAAEC,SAAiB,EAAW;EACjE,OACED,OAAO,CACJE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CACtBC,KAAK,CAAC,IAAI;EACX;EAAA,CACCC,IAAI,CAAEC,IAAI,IAAKA,IAAI,KAAKJ,SAAS,IAAII,IAAI,KAAKJ,SAAS,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAElF;AAEO,SAASI,qBAAqB,CAACC,WAAmB,EAAU;EACjE,OAAOC,eAAI,CAACC,IAAI,CAACF,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,kBAAkB,CAAC;AACrE;AAEO,eAAeG,sBAAsB,CAACH,WAAmB,EAAiB;EAC/E,MAAMI,eAAe,GAAGC,KAAK,GAACC,yBAAyB,CAACN,WAAW,CAAC;EACpE,MAAMO,aAAa,GAAGR,qBAAqB,CAACC,WAAW,CAAC;EAExD,MAAMQ,aAAE,CAACC,QAAQ,CAACC,SAAS,CAACH,aAAa,EAAEI,+BAAY,CAAC;EAExD,MAAMC,kBAAkB,GAAG,MAAMJ,aAAE,CAACC,QAAQ,CAACI,QAAQ,CAACZ,eAAI,CAACC,IAAI,CAACE,eAAe,CAAC,EAAE,MAAM,CAAC;EAEzF,MAAMU,iBAAiB,GAAGtB,YAAY,CAACoB,kBAAkB,EAAErB,gBAAgB,CAAC;EAE5E,IAAI,CAACuB,iBAAiB,EAAE;IACtB,MAAMN,aAAE,CAACC,QAAQ,CAACC,SAAS,CACzBN,eAAe,EACd,GAAEQ,kBAAkB,CAACG,IAAI,EAAG,KAAIxB,gBAAiB,IAAG,CACtD;EACH;AACF;AAEO,eAAeyB,+BAA+B,CAAChB,WAAmB,EAAoB;EAC3F,MAAMI,eAAe,GAAGC,KAAK,GAACC,yBAAyB,CAACN,WAAW,CAAC;EACpE,MAAMO,aAAa,GAAGR,qBAAqB,CAACC,WAAW,CAAC;EAExD,MAAMiB,gBAAgB,GAAG,MAAMT,aAAE,CAACU,UAAU,CAACX,aAAa,CAAC;EAE3D,MAAMK,kBAAkB,GAAG,MAAMJ,aAAE,CAACC,QAAQ,CAACI,QAAQ,CAACZ,eAAI,CAACC,IAAI,CAACE,eAAe,CAAC,EAAE,MAAM,CAAC;EACzF,MAAMU,iBAAiB,GAAGtB,YAAY,CAACoB,kBAAkB,EAAErB,gBAAgB,CAAC;EAE5E,OAAOuB,iBAAiB,IAAIG,gBAAgB;AAC9C"}