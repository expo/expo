{"version":3,"file":"plugin-resolver.js","names":["_assert","data","_interopRequireDefault","require","path","_interopRequireWildcard","_resolveFrom","_errors","_modules","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","pluginFileName","exports","resolvePluginForModule","projectRoot","pluginReference","moduleNameIsDirectFileReference","pluginScriptFile","resolveFrom","silent","isPluginFile","filePath","moduleNameIsPackageReference","pluginPackageFile","fileExists","PluginError","pathIsFilePath","name","match","slashCount","split","sep","length","startsWith","normalizeStaticPlugin","plugin","Array","isArray","assert","undefined","assertInternalProjectRoot","resolveConfigPluginFunction","resolveConfigPluginFunctionWithInfo","pluginFile","result","requirePluginFile","error","SyntaxError","learnMoreLink","pluginError","message","stack","resolveConfigPluginExport"],"sources":["../../src/utils/plugin-resolver.ts"],"sourcesContent":["import assert from 'assert';\nimport * as path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { PluginError } from './errors';\nimport { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nimport { fileExists } from './modules';\n// Default plugin entry file name.\nexport const pluginFileName = 'app.plugin.js';\n\n// pluginReference is a node module or a file path, as user entered it in app.config.js\nexport function resolvePluginForModule(\n  projectRoot: string,\n  pluginReference: string\n): { filePath: string; isPluginFile: boolean } {\n  if (moduleNameIsDirectFileReference(pluginReference)) {\n    // Only resolve `./file.js`, `package/file.js`, `@org/package/file.js`\n    const pluginScriptFile = resolveFrom.silent(projectRoot, pluginReference);\n    if (pluginScriptFile) {\n      return { isPluginFile: false, filePath: pluginScriptFile };\n    }\n  } else if (moduleNameIsPackageReference(pluginReference)) {\n    // Only resolve `package -> package/app.plugin.js`, `@org/package -> @org/package/app.plugin.js`\n    const pluginPackageFile = resolveFrom.silent(\n      projectRoot,\n      `${pluginReference}/${pluginFileName}`\n    );\n    if (pluginPackageFile && fileExists(pluginPackageFile)) {\n      return { isPluginFile: true, filePath: pluginPackageFile };\n    }\n  }\n\n  throw new PluginError(\n    `Failed to resolve plugin for module \"${pluginReference}\" relative to \"${projectRoot}\"`,\n    'PLUGIN_NOT_FOUND'\n  );\n}\n\n// TODO: Test windows\nfunction pathIsFilePath(name: string): boolean {\n  // Matches lines starting with: . / ~/\n  return !!name.match(/^(\\.|~\\/|\\/)/g);\n}\n\nexport function moduleNameIsDirectFileReference(name: string): boolean {\n  if (pathIsFilePath(name)) {\n    return true;\n  }\n\n  const slashCount = name.split(path.sep)?.length;\n  // Orgs (like @expo/config ) should have more than one slash to be a direct file.\n  if (name.startsWith('@')) {\n    return slashCount > 2;\n  }\n\n  // Regular packages should be considered direct reference if they have more than one slash.\n  return slashCount > 1;\n}\n\nexport function moduleNameIsPackageReference(name: string): boolean {\n  const slashCount = name.split('/')?.length;\n  return name.startsWith('@') ? slashCount === 2 : slashCount === 1;\n}\n\nexport function normalizeStaticPlugin(plugin: StaticPlugin | ConfigPlugin | string): StaticPlugin {\n  if (Array.isArray(plugin)) {\n    assert(\n      plugin.length > 0 && plugin.length < 3,\n      `Wrong number of arguments provided for static config plugin, expected either 1 or 2, got ${plugin.length}`\n    );\n    return plugin;\n  }\n  return [plugin, undefined];\n}\n\nexport function assertInternalProjectRoot(projectRoot?: string): asserts projectRoot {\n  assert(\n    projectRoot,\n    `Unexpected: Config \\`_internal.projectRoot\\` isn't defined by expo-cli, this is a bug.`\n  );\n}\n\n// Resolve the module function and assert type\nexport function resolveConfigPluginFunction(projectRoot: string, pluginReference: string) {\n  const { plugin } = resolveConfigPluginFunctionWithInfo(projectRoot, pluginReference);\n  return plugin;\n}\n\n// Resolve the module function and assert type\nexport function resolveConfigPluginFunctionWithInfo(projectRoot: string, pluginReference: string) {\n  const { filePath: pluginFile, isPluginFile } = resolvePluginForModule(\n    projectRoot,\n    pluginReference\n  );\n  let result: any;\n  try {\n    result = requirePluginFile(pluginFile);\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      const learnMoreLink = `Learn more: https://docs.expo.dev/guides/config-plugins/#creating-a-plugin`;\n      // If the plugin reference is a node module, and that node module has a syntax error, then it probably doesn't have an official config plugin.\n      if (!isPluginFile && !moduleNameIsDirectFileReference(pluginReference)) {\n        const pluginError = new PluginError(\n          `Package \"${pluginReference}\" does not contain a valid config plugin.\\n${learnMoreLink}\\n\\n${error.message}`,\n          'INVALID_PLUGIN_IMPORT'\n        );\n        pluginError.stack = error.stack;\n        throw pluginError;\n      }\n    }\n    throw error;\n  }\n\n  const plugin = resolveConfigPluginExport({\n    plugin: result,\n    pluginFile,\n    pluginReference,\n    isPluginFile,\n  });\n  return { plugin, pluginFile, pluginReference, isPluginFile };\n}\n\n/**\n * - Resolve the exported contents of an Expo config (be it default or module.exports)\n * - Assert no promise exports\n * - Return config type\n * - Serialize config\n *\n * @param props.plugin plugin results\n * @param props.pluginFile plugin file path\n * @param props.pluginReference the string used to reference the plugin\n * @param props.isPluginFile is file path from the app.plugin.js module root\n */\nexport function resolveConfigPluginExport({\n  plugin,\n  pluginFile,\n  pluginReference,\n  isPluginFile,\n}: {\n  plugin: any;\n  pluginFile: string;\n  pluginReference: string;\n  isPluginFile: boolean;\n}): ConfigPlugin<unknown> {\n  if (plugin.default != null) {\n    plugin = plugin.default;\n  }\n  if (typeof plugin !== 'function') {\n    const learnMoreLink = `Learn more: https://docs.expo.dev/guides/config-plugins/#creating-a-plugin`;\n    // If the plugin reference is a node module, and that node module does not export a function then it probably doesn't have a config plugin.\n    if (!isPluginFile && !moduleNameIsDirectFileReference(pluginReference)) {\n      throw new PluginError(\n        `Package \"${pluginReference}\" does not contain a valid config plugin. Module must export a function from file: ${pluginFile}\\n${learnMoreLink}`,\n        'INVALID_PLUGIN_TYPE'\n      );\n    }\n    throw new PluginError(\n      `Plugin \"${pluginReference}\" must export a function from file: ${pluginFile}. ${learnMoreLink}`,\n      'INVALID_PLUGIN_TYPE'\n    );\n  }\n\n  return plugin;\n}\n\nfunction requirePluginFile(filePath: string): any {\n  try {\n    return require(filePath);\n  } catch (error) {\n    // TODO: Improve error messages\n    throw error;\n  }\n}\n"],"mappings":"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","ignoreList":[]}