{"version":3,"file":"Locales.js","names":["_fs","data","_interopRequireDefault","require","_path","_Xcodeproj","_iosPlugins","_locales","e","__esModule","default","withLocales","config","withXcodeProject","modResults","setLocalesAsync","projectRoot","modRequest","project","exports","writeStringsFile","localesMap","supportingDirectory","fileName","projectName","lang","localizationObj","Object","entries","length","dir","path","join","fs","promises","mkdir","recursive","strings","buffer","plistKey","localVersion","push","writeFile","groupName","group","ensureGroupRecursively","children","some","comment","addResourceFileToGroup","filepath","relative","isBuildFile","verbose","getLocales","locales","localizableStrings","getResolvedLocalesAsync","getProjectName"],"sources":["../../src/ios/Locales.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { addResourceFileToGroup, ensureGroupRecursively, getProjectName } from './utils/Xcodeproj';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { getResolvedLocalesAsync, LocaleJson } from '../utils/locales';\n\nexport const withLocales: ConfigPlugin = (config) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setLocalesAsync(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport async function writeStringsFile({\n  localesMap,\n  supportingDirectory,\n  fileName,\n  projectName,\n  project,\n}: {\n  localesMap: LocaleJson | Record<string, LocaleJson>;\n  supportingDirectory: string;\n  fileName: string;\n  projectName: string;\n  project: XcodeProject;\n}) {\n  for (const [lang, localizationObj] of Object.entries(localesMap)) {\n    if (Object.entries(localizationObj).length === 0) return project;\n    const dir = path.join(supportingDirectory, `${lang}.lproj`);\n    // await fs.ensureDir(dir);\n    await fs.promises.mkdir(dir, { recursive: true });\n\n    const strings = path.join(dir, fileName);\n    const buffer = [];\n    for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n      buffer.push(`${plistKey} = \"${localVersion}\";`);\n    }\n    // Write the file to the file system.\n    await fs.promises.writeFile(strings, buffer.join('\\n'));\n\n    const groupName = `${projectName}/Supporting/${lang}.lproj`;\n    // deep find the correct folder\n    const group = ensureGroupRecursively(project, groupName);\n\n    // Ensure the file doesn't already exist\n    if (!group?.children.some(({ comment }) => comment === fileName)) {\n      // Only write the file if it doesn't already exist.\n      project = addResourceFileToGroup({\n        filepath: path.relative(supportingDirectory, strings),\n        groupName,\n        project,\n        isBuildFile: true,\n        verbose: true,\n      });\n    }\n  }\n  return project;\n}\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport async function setLocalesAsync(\n  config: Pick<ExpoConfig, 'locales'>,\n  { projectRoot, project }: { projectRoot: string; project: XcodeProject }\n): Promise<XcodeProject> {\n  const locales = getLocales(config);\n  if (!locales) {\n    return project;\n  }\n  // possibly validate CFBundleAllowMixedLocalizations is enabled\n  const { locales: localesMap, localizableStrings } = await getResolvedLocalesAsync(\n    projectRoot,\n    locales,\n    'ios'\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const supportingDirectory = path.join(projectRoot, 'ios', projectName, 'Supporting');\n\n  // TODO: Should we delete all before running? Revisit after we land on a lock file.\n  project = await writeStringsFile({\n    localesMap,\n    supportingDirectory,\n    fileName: 'InfoPlist.strings',\n    projectName,\n    project,\n  });\n  if (localizableStrings) {\n    project = await writeStringsFile({\n      localesMap: localizableStrings,\n      supportingDirectory,\n      fileName: 'Localizable.strings',\n      projectName,\n      project,\n    });\n  }\n  return project;\n}\n"],"mappings":"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","ignoreList":[]}