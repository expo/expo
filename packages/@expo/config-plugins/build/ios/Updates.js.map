{"version":3,"file":"Updates.js","names":["CREATE_MANIFEST_IOS_PATH","Config","withUpdates","config","expoUsername","withExpoPlist","projectRoot","modRequest","expoUpdatesPackageVersion","getExpoUpdatesPackageVersion","modResults","setUpdatesConfig","expoPlist","username","newExpoPlist","ENABLED","getUpdatesEnabled","CHECK_ON_LAUNCH","getUpdatesCheckOnLaunch","LAUNCH_WAIT_MS","getUpdatesTimeout","updateUrl","getUpdateUrl","UPDATE_URL","codeSigningCertificate","getUpdatesCodeSigningCertificate","CODE_SIGNING_CERTIFICATE","codeSigningMetadata","getUpdatesCodeSigningMetadata","CODE_SIGNING_METADATA","requestHeaders","getUpdatesRequestHeaders","UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY","setVersionsConfig","runtimeVersion","getRuntimeVersionNullable","RUNTIME_VERSION","Error","sdkVersion","getSDKVersion","SDK_VERSION","formatConfigurationScriptPath","buildScriptPath","resolveFrom","silent","relativePath","path","relative","join","process","platform","replace","getBundleReactNativePhase","project","shellScriptBuildPhase","hash","objects","PBXShellScriptBuildPhase","bundleReactNative","Object","values","find","buildPhase","name","ensureBundleReactNativePhaseContainsConfigurationScript","buildPhaseShellScriptPath","isShellScriptBuildPhaseConfigured","shellScript","includes","RegExp","isPlistConfigurationSet","Boolean","EXUpdatesURL","EXUpdatesSDKVersion","EXUpdatesRuntimeVersion","isPlistConfigurationSynced","EXUpdatesEnabled","EXUpdatesLaunchWaitMs","EXUpdatesCheckOnLaunch","EXUpdatesCodeSigningCertificate","EXUpdatesCodeSigningMetadata","isPlistVersionConfigurationSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"sources":["../../src/ios/Updates.ts"],"sourcesContent":["import * as path from 'path';\nimport resolveFrom from 'resolve-from';\nimport xcode from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/ios-plugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullable,\n  getSDKVersion,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadata,\n  getUpdatesRequestHeaders,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\nimport { ExpoPlist } from './IosConfig.types';\n\nconst CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  SDK_VERSION = 'EXUpdatesSDKVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  RELEASE_CHANNEL = 'EXUpdatesReleaseChannel',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'EXUpdatesRequestHeaders',\n  CODE_SIGNING_CERTIFICATE = 'EXUpdatesCodeSigningCertificate',\n  CODE_SIGNING_METADATA = 'EXUpdatesCodeSigningMetadata',\n}\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withExpoPlist(config, (config) => {\n    const projectRoot = config.modRequest.projectRoot;\n    const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n    config.modResults = setUpdatesConfig(\n      projectRoot,\n      config,\n      config.modResults,\n      expoUsername,\n      expoUpdatesPackageVersion\n    );\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null,\n  expoUpdatesPackageVersion?: string | null\n): ExpoPlist {\n  const newExpoPlist = {\n    ...expoPlist,\n    [Config.ENABLED]: getUpdatesEnabled(config),\n    [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion),\n    [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n  if (codeSigningCertificate) {\n    newExpoPlist[Config.CODE_SIGNING_CERTIFICATE] = codeSigningCertificate;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_CERTIFICATE];\n  }\n\n  const codeSigningMetadata = getUpdatesCodeSigningMetadata(config);\n  if (codeSigningMetadata) {\n    newExpoPlist[Config.CODE_SIGNING_METADATA] = codeSigningMetadata;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_METADATA];\n  }\n\n  const requestHeaders = getUpdatesRequestHeaders(config);\n  if (requestHeaders) {\n    newExpoPlist[Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY] = requestHeaders;\n  } else {\n    delete newExpoPlist[Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexport function setVersionsConfig(config: ExpoConfigUpdates, expoPlist: ExpoPlist): ExpoPlist {\n  const newExpoPlist = { ...expoPlist };\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'ios');\n  if (!runtimeVersion && expoPlist[Config.RUNTIME_VERSION]) {\n    throw new Error(\n      'A runtime version is set in your Expo.plist, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove EXUpdatesRuntimeVersion from your Expo.plist.'\n    );\n  }\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot: string): string {\n  const buildScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\ninterface ShellScriptBuildPhase {\n  isa: 'PBXShellScriptBuildPhase';\n  name: string;\n  shellScript: string;\n  [key: string]: any;\n}\n\nexport function getBundleReactNativePhase(project: xcode.XcodeProject): ShellScriptBuildPhase {\n  const shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase as Record<\n    string,\n    ShellScriptBuildPhase\n  >;\n  const bundleReactNative = Object.values(shellScriptBuildPhase).find(\n    (buildPhase) => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n\nexport function ensureBundleReactNativePhaseContainsConfigurationScript(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): xcode.XcodeProject {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    // check if there's already another path to create-manifest-ios.sh\n    // this might be the case for monorepos\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(\n        new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`),\n        ''\n      );\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\n\nexport function isShellScriptBuildPhaseConfigured(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): boolean {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexport function isPlistConfigurationSet(expoPlist: ExpoPlist): boolean {\n  return Boolean(\n    expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion)\n  );\n}\n\nexport function isPlistConfigurationSynced(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) === expoPlist.EXUpdatesURL &&\n    getUpdatesEnabled(config) === expoPlist.EXUpdatesEnabled &&\n    getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs &&\n    getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch &&\n    getUpdatesCodeSigningCertificate(projectRoot, config) ===\n      expoPlist.EXUpdatesCodeSigningCertificate &&\n    getUpdatesCodeSigningMetadata(config) === expoPlist.EXUpdatesCodeSigningMetadata &&\n    isPlistVersionConfigurationSynced(config, expoPlist)\n  );\n}\n\nexport function isPlistVersionConfigurationSynced(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  expoPlist: ExpoPlist\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'ios');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = expoPlist.EXUpdatesRuntimeVersion ?? null;\n  const currentSdkVersion = expoPlist.EXUpdatesSDKVersion ?? null;\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"],"mappings":"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"}