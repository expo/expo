#!/usr/bin/env bun

import fs from 'fs/promises';
import path from 'path';
import { parseArgs } from 'util';

const packageRoot = path.resolve(__dirname, '..');
const browserScriptsRoot = path.join(packageRoot, 'browserScripts');
const outputPathIos = path.join(packageRoot, 'ios', 'DomWebViewBrowserScripts.swift');

type BuildArtifacts = Awaited<ReturnType<typeof Bun.build>>['outputs'];

const { values: args } = parseArgs({
  args: Bun.argv.slice(2),
  options: {
    h: {
      type: 'boolean',
    },
    platform: {
      type: 'string',
    },
  },
  strict: true,
  allowPositionals: false,
});

async function runAsync() {
  if (args.h) {
    console.log(`Usage: ${path.basename(__filename)} --platform <all|android|ios>`);
    return;
  }
  const buildOutput = await Bun.build({
    entrypoints: [path.join(browserScriptsRoot, 'index.ts')],
    target: 'browser',
  });
  if (!buildOutput.success) {
    const message = buildOutput.logs.map((log) => log.message).join('\n');
    throw new Error(`Failed to build browser scripts: ${message}`);
  }
  const script = await createMergedScriptAsync(buildOutput.outputs);

  const platform = args.platform ?? 'all';
  if (platform === 'ios' || platform === 'all') {
    await createIosFileAsync(script);
  }
}

runAsync().catch((error) => {
  console.error(error);
  process.exit(1);
});

//#region Internals

async function createMergedScriptAsync(outputs: BuildArtifacts): Promise<string> {
  const mergedScript = await Promise.all(outputs.map((output) => output.text()));
  return mergedScript.join('\n').replace(/\\\$\\\$/g, '$$$$');
}

async function createIosFileAsync(script: string) {
  const contents = `\
// Copyright 2015-present 650 Industries. All rights reserved.

// swiftlint:disable line_length

/**
 * This file contains the browser scripts that are injected into the WebView.
 * @generated by buildBrowserScripts.ts
 */
internal let browserScripts: String = """
${script}
"""

// swiftlint:enable line_length
`;

  console.log(`Generating browser scripts for iOS at ${outputPathIos}`);
  await fs.writeFile(outputPathIos, contents);
}

//#endregion Internals
