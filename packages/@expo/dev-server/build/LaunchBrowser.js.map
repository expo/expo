{"version":3,"file":"LaunchBrowser.js","names":["IS_WSL","require","launchBrowserAsync","url","browser","createBrowser","tempBrowserDir","createTempBrowserDir","launchArgs","browserType","LaunchBrowserTypes","CHROME","EDGE","isSupported","isSupportedBrowser","launchAsync","Error","os","platform","LaunchBrowserImplMacOS","LaunchBrowserImplWindows","LaunchBrowserImplLinux"],"sources":["../src/LaunchBrowser.ts"],"sourcesContent":["import os from 'os';\n\nimport { LaunchBrowserTypes, type LaunchBrowserInstance } from './LaunchBrowser.types';\nimport LaunchBrowserImplLinux from './LaunchBrowserImplLinux';\nimport LaunchBrowserImplMacOS from './LaunchBrowserImplMacOS';\nimport LaunchBrowserImplWindows from './LaunchBrowserImplWindows';\n\nexport type { LaunchBrowserInstance };\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\n/**\n * Launch a browser for JavaScript inspector\n */\nexport async function launchBrowserAsync(url: string): Promise<LaunchBrowserInstance> {\n  const browser = createBrowser();\n  const tempBrowserDir = await browser.createTempBrowserDir('expo-inspector');\n\n  // For dev-client connecting metro in LAN, the request to fetch sourcemaps may be blocked by Chromium\n  // with insecure-content (https page send xhr for http resource).\n  // Adding `--allow-running-insecure-content` to overcome this limitation\n  // without users manually allow insecure-content in site settings.\n  // However, if there is existing chromium browser process, the argument will not take effect.\n  // We also pass a `--user-data-dir=` as temporary profile and force chromium to create new browser process.\n  const launchArgs = [\n    `--app=${url}`,\n    '--allow-running-insecure-content',\n    `--user-data-dir=${tempBrowserDir}`,\n    '--no-first-run',\n    '--no-default-browser-check',\n  ];\n\n  for (const browserType of [LaunchBrowserTypes.CHROME, LaunchBrowserTypes.EDGE]) {\n    const isSupported = await browser.isSupportedBrowser(browserType);\n    if (isSupported) {\n      return browser.launchAsync(browserType, launchArgs);\n    }\n  }\n\n  throw new Error(\n    '[LaunchBrowser] Unable to find a browser on the host to open the inspector. Supported browsers: Google Chrome, Microsoft Edge'\n  );\n}\n\nfunction createBrowser() {\n  if (os.platform() === 'darwin') {\n    return new LaunchBrowserImplMacOS();\n  }\n  if (os.platform() === 'win32' || IS_WSL) {\n    return new LaunchBrowserImplWindows();\n  }\n  if (os.platform() === 'linux') {\n    return new LaunchBrowserImplLinux();\n  }\n  throw new Error('[LaunchBrowser] Unsupported host platform');\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAkE;AAIlE,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAACA,OAAO,CAAC,WAAW,CAAC,EAAE;;AAE3D;AACA;AACA;AACO,eAAeC,kBAAkB,CAACC,GAAW,EAAkC;EACpF,MAAMC,OAAO,GAAGC,aAAa,EAAE;EAC/B,MAAMC,cAAc,GAAG,MAAMF,OAAO,CAACG,oBAAoB,CAAC,gBAAgB,CAAC;;EAE3E;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,UAAU,GAAG,CAChB,SAAQL,GAAI,EAAC,EACd,kCAAkC,EACjC,mBAAkBG,cAAe,EAAC,EACnC,gBAAgB,EAChB,4BAA4B,CAC7B;EAED,KAAK,MAAMG,WAAW,IAAI,CAACC,mCAAkB,CAACC,MAAM,EAAED,mCAAkB,CAACE,IAAI,CAAC,EAAE;IAC9E,MAAMC,WAAW,GAAG,MAAMT,OAAO,CAACU,kBAAkB,CAACL,WAAW,CAAC;IACjE,IAAII,WAAW,EAAE;MACf,OAAOT,OAAO,CAACW,WAAW,CAACN,WAAW,EAAED,UAAU,CAAC;IACrD;EACF;EAEA,MAAM,IAAIQ,KAAK,CACb,+HAA+H,CAChI;AACH;AAEA,SAASX,aAAa,GAAG;EACvB,IAAIY,aAAE,CAACC,QAAQ,EAAE,KAAK,QAAQ,EAAE;IAC9B,OAAO,KAAIC,iCAAsB,GAAE;EACrC;EACA,IAAIF,aAAE,CAACC,QAAQ,EAAE,KAAK,OAAO,IAAIlB,MAAM,EAAE;IACvC,OAAO,KAAIoB,mCAAwB,GAAE;EACvC;EACA,IAAIH,aAAE,CAACC,QAAQ,EAAE,KAAK,OAAO,EAAE;IAC7B,OAAO,KAAIG,iCAAsB,GAAE;EACrC;EACA,MAAM,IAAIL,KAAK,CAAC,2CAA2C,CAAC;AAC9D"}