{"version":3,"file":"LaunchBrowserImplWindows.js","names":["_spawnAsync","data","_interopRequireDefault","require","_open","_path","_LaunchBrowser","obj","__esModule","default","_defineProperty","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","IS_WSL","LaunchBrowserImplWindows","constructor","LaunchBrowserTypes","CHROME","appId","fullName","EDGE","isSupportedBrowser","browserType","result","env","getPowershellEnv","status","spawnAsync","MAP","stdio","createTempBrowserDir","baseDirName","tmpDir","stdout","trim","path","join","launchAsync","args","openWithSystemRootEnvironment","arguments","_appId","close","_powershellEnv","PSModulePath","exports","options","oldSystemRoot","process","SYSTEMROOT","_process$env$SYSTEMRO","SystemRoot","open","openApp"],"sources":["../src/LaunchBrowserImplWindows.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport open from 'open';\nimport path from 'path';\n\nimport {\n  LaunchBrowserTypes,\n  type LaunchBrowserImpl,\n  type LaunchBrowserInstance,\n} from './LaunchBrowser.types';\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\n/**\n * Browser implementation for Windows and WSL\n *\n * To minimize the difference between Windows and WSL, the implementation wraps all spawn calls through powershell.\n */\nexport default class LaunchBrowserImplWindows implements LaunchBrowserImpl, LaunchBrowserInstance {\n  private _appId: string | undefined;\n  private _powershellEnv: { [key: string]: string } | undefined;\n\n  MAP = {\n    [LaunchBrowserTypes.CHROME]: {\n      appId: 'chrome',\n      fullName: 'Google Chrome',\n    },\n    [LaunchBrowserTypes.EDGE]: {\n      appId: 'msedge',\n      fullName: 'Microsoft Edge',\n    },\n  };\n\n  async isSupportedBrowser(browserType: LaunchBrowserTypes): Promise<boolean> {\n    let result = false;\n    try {\n      const env = await this.getPowershellEnv();\n      const { status } = await spawnAsync(\n        'powershell.exe',\n        ['-c', `Get-Package -Name '${this.MAP[browserType].fullName}'`],\n        { env, stdio: 'ignore' }\n      );\n      result = status === 0;\n    } catch {\n      result = false;\n    }\n    return result;\n  }\n\n  async createTempBrowserDir(baseDirName: string) {\n    let tmpDir;\n    if (IS_WSL) {\n      // On WSL, the browser is actually launched in host, the `temp-dir` returns the linux /tmp path where host browsers cannot reach into.\n      // We should get the temp path through the `$TEMP` windows environment variable.\n      tmpDir = (await spawnAsync('powershell.exe', ['-c', 'echo \"$Env:TEMP\"'])).stdout.trim();\n      return `${tmpDir}\\\\${baseDirName}`;\n    } else {\n      tmpDir = require('temp-dir');\n      return path.join(tmpDir, baseDirName);\n    }\n  }\n\n  async launchAsync(\n    browserType: LaunchBrowserTypes,\n    args: string[]\n  ): Promise<LaunchBrowserInstance> {\n    const appId = this.MAP[browserType].appId;\n    await openWithSystemRootEnvironment(appId, { arguments: args });\n    this._appId = appId;\n    return this;\n  }\n\n  async close(): Promise<void> {\n    if (this._appId != null) {\n      try {\n        // Since we wrap all spawn calls through powershell as well as from `open.openApp`, the returned ChildProcess is not the browser process.\n        // And we cannot just call `process.kill()` kill it.\n        // The implementation tries to find the pid of target chromium browser process (with --app=https://chrome-devtools-frontend.appspot.com in command arguments),\n        // and uses taskkill to terminate the process.\n        const env = await this.getPowershellEnv();\n        await spawnAsync(\n          'powershell.exe',\n          [\n            '-c',\n            `taskkill.exe /pid @(Get-WmiObject Win32_Process -Filter \"name = '${this._appId}.exe' AND CommandLine LIKE '%chrome-devtools-frontend.appspot.com%'\" | Select-Object -ExpandProperty ProcessId)`,\n          ],\n          { env, stdio: 'ignore' }\n        );\n      } catch {}\n      this._appId = undefined;\n    }\n  }\n\n  /**\n   * This method is used to get the powershell environment variables for `Get-Package` command.\n   * Especially for powershell 7, its default `PSModulePath` is different from powershell 5 and `Get-Package` command is not available.\n   * We need to set the PSModulePath to include the default value of powershell 5.\n   */\n  private async getPowershellEnv(): Promise<{ [key: string]: string }> {\n    if (this._powershellEnv) {\n      return this._powershellEnv;\n    }\n    const PSModulePath = (\n      await spawnAsync('powershell.exe', ['-c', 'echo \"$PSHOME\\\\Modules\"'])\n    ).stdout.trim();\n    this._powershellEnv = {\n      PSModulePath,\n    };\n    return this._powershellEnv;\n  }\n}\n\n/**\n * Due to a bug in `open` on Windows PowerShell, we need to ensure `process.env.SYSTEMROOT` is set.\n * This environment variable is set by Windows on `SystemRoot`, causing `open` to execute a command with an \"unknown\" drive letter.\n *\n * @see https://github.com/sindresorhus/open/issues/205\n */\nasync function openWithSystemRootEnvironment(\n  appId: string | Readonly<string[]>,\n  options?: open.OpenAppOptions\n): Promise<import('child_process').ChildProcess> {\n  const oldSystemRoot = process.env.SYSTEMROOT;\n  try {\n    process.env.SYSTEMROOT = process.env.SYSTEMROOT ?? process.env.SystemRoot;\n    return await open.openApp(appId, options);\n  } finally {\n    process.env.SYSTEMROOT = oldSystemRoot;\n  }\n}\n"],"mappings":"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"}