{"version":3,"file":"LaunchBrowserImplWindows.js","names":["IS_WSL","require","LaunchBrowserImplWindows","LaunchBrowserTypes","CHROME","appId","fullName","EDGE","isSupportedBrowser","browserType","result","status","spawnAsync","MAP","stdio","createTempBrowserDir","baseDirName","tmpDir","stdout","trim","path","join","launchAsync","args","open","openApp","arguments","_appId","close","undefined"],"sources":["../src/LaunchBrowserImplWindows.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport open from 'open';\nimport path from 'path';\n\nimport {\n  LaunchBrowserTypes,\n  type LaunchBrowserImpl,\n  type LaunchBrowserInstance,\n} from './LaunchBrowser.types';\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\n/**\n * Browser implementation for Windows and WSL\n *\n * To minimize the difference between Windows and WSL, the implementation wraps all spawn calls through powershell.\n */\nexport default class LaunchBrowserImplWindows implements LaunchBrowserImpl, LaunchBrowserInstance {\n  private _appId: string | undefined;\n\n  MAP = {\n    [LaunchBrowserTypes.CHROME]: {\n      appId: 'chrome',\n      fullName: 'Google Chrome',\n    },\n    [LaunchBrowserTypes.EDGE]: {\n      appId: 'msedge',\n      fullName: 'Microsoft Edge',\n    },\n  };\n\n  async isSupportedBrowser(browserType: LaunchBrowserTypes): Promise<boolean> {\n    let result = false;\n    try {\n      const { status } = await spawnAsync(\n        'powershell.exe',\n        ['-c', `Get-Package -Name '${this.MAP[browserType].fullName}'`],\n        { stdio: 'ignore' }\n      );\n      result = status === 0;\n    } catch {\n      result = false;\n    }\n    return result;\n  }\n\n  async createTempBrowserDir(baseDirName: string) {\n    let tmpDir;\n    if (IS_WSL) {\n      // On WSL, the browser is actually launched in host, the `temp-dir` returns the linux /tmp path where host browsers cannot reach into.\n      // We should get the temp path through the `$TEMP` windows environment variable.\n      tmpDir = (await spawnAsync('powershell.exe', ['-c', 'echo \"$Env:TEMP\"'])).stdout.trim();\n      return `${tmpDir}\\\\${baseDirName}`;\n    } else {\n      tmpDir = require('temp-dir');\n      return path.join(tmpDir, baseDirName);\n    }\n  }\n\n  async launchAsync(\n    browserType: LaunchBrowserTypes,\n    args: string[]\n  ): Promise<LaunchBrowserInstance> {\n    const appId = this.MAP[browserType].appId;\n    await open.openApp(appId, { arguments: args });\n    this._appId = appId;\n    return this;\n  }\n\n  async close(): Promise<void> {\n    if (this._appId != null) {\n      try {\n        // Since we wrap all spawn calls through powershell as well as from `open.openApp`, the returned ChildProcess is not the browser process.\n        // And we cannot just call `process.kill()` kill it.\n        // The implementation tries to find the pid of target chromium browser process (with --app=https://chrome-devtools-frontend.appspot.com in command arguments),\n        // and uses taskkill to terminate the process.\n        await spawnAsync(\n          'powershell.exe',\n          [\n            '-c',\n            `taskkill.exe /pid @(Get-WmiObject Win32_Process -Filter \"name = '${this._appId}.exe' AND CommandLine LIKE '%chrome-devtools-frontend.appspot.com%'\" | Select-Object -ExpandProperty ProcessId)`,\n          ],\n          { stdio: 'ignore' }\n        );\n      } catch {}\n      this._appId = undefined;\n    }\n  }\n}\n"],"mappings":";;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAI+B;AAAA;AAAA;AAAA;AAE/B,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAACA,OAAO,CAAC,WAAW,CAAC,EAAE;;AAE3D;AACA;AACA;AACA;AACA;AACe,MAAMC,wBAAwB,CAAqD;EAAA;IAAA;IAAA,6BAG1F;MACJ,CAACC,mCAAkB,CAACC,MAAM,GAAG;QAC3BC,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE;MACZ,CAAC;MACD,CAACH,mCAAkB,CAACI,IAAI,GAAG;QACzBF,KAAK,EAAE,QAAQ;QACfC,QAAQ,EAAE;MACZ;IACF,CAAC;EAAA;EAED,MAAME,kBAAkB,CAACC,WAA+B,EAAoB;IAC1E,IAAIC,MAAM,GAAG,KAAK;IAClB,IAAI;MACF,MAAM;QAAEC;MAAO,CAAC,GAAG,MAAM,IAAAC,qBAAU,EACjC,gBAAgB,EAChB,CAAC,IAAI,EAAG,sBAAqB,IAAI,CAACC,GAAG,CAACJ,WAAW,CAAC,CAACH,QAAS,GAAE,CAAC,EAC/D;QAAEQ,KAAK,EAAE;MAAS,CAAC,CACpB;MACDJ,MAAM,GAAGC,MAAM,KAAK,CAAC;IACvB,CAAC,CAAC,MAAM;MACND,MAAM,GAAG,KAAK;IAChB;IACA,OAAOA,MAAM;EACf;EAEA,MAAMK,oBAAoB,CAACC,WAAmB,EAAE;IAC9C,IAAIC,MAAM;IACV,IAAIjB,MAAM,EAAE;MACV;MACA;MACAiB,MAAM,GAAG,CAAC,MAAM,IAAAL,qBAAU,EAAC,gBAAgB,EAAE,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC,EAAEM,MAAM,CAACC,IAAI,EAAE;MACvF,OAAQ,GAAEF,MAAO,KAAID,WAAY,EAAC;IACpC,CAAC,MAAM;MACLC,MAAM,GAAGhB,OAAO,CAAC,UAAU,CAAC;MAC5B,OAAOmB,eAAI,CAACC,IAAI,CAACJ,MAAM,EAAED,WAAW,CAAC;IACvC;EACF;EAEA,MAAMM,WAAW,CACfb,WAA+B,EAC/Bc,IAAc,EACkB;IAChC,MAAMlB,KAAK,GAAG,IAAI,CAACQ,GAAG,CAACJ,WAAW,CAAC,CAACJ,KAAK;IACzC,MAAMmB,eAAI,CAACC,OAAO,CAACpB,KAAK,EAAE;MAAEqB,SAAS,EAAEH;IAAK,CAAC,CAAC;IAC9C,IAAI,CAACI,MAAM,GAAGtB,KAAK;IACnB,OAAO,IAAI;EACb;EAEA,MAAMuB,KAAK,GAAkB;IAC3B,IAAI,IAAI,CAACD,MAAM,IAAI,IAAI,EAAE;MACvB,IAAI;QACF;QACA;QACA;QACA;QACA,MAAM,IAAAf,qBAAU,EACd,gBAAgB,EAChB,CACE,IAAI,EACH,oEAAmE,IAAI,CAACe,MAAO,iHAAgH,CACjM,EACD;UAAEb,KAAK,EAAE;QAAS,CAAC,CACpB;MACH,CAAC,CAAC,MAAM,CAAC;MACT,IAAI,CAACa,MAAM,GAAGE,SAAS;IACzB;EACF;AACF;AAAC"}