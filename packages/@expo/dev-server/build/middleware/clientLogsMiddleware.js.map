{"version":3,"file":"clientLogsMiddleware.js","names":["_chalk","data","_interopRequireDefault","require","obj","__esModule","default","clientLogsMiddleware","logger","req","res","next","deviceId","headers","deviceName","expoPlatform","writeHead","end","body","handleDeviceLogs","toString","logs","devicePlatform","error","tag","stack","isIgnorableBugReportingExtraData","length","isAppRegistryStartupMessage","test","getDevicePlatformFromAppRegistryStartupMessage","_body$0$match$","_body$0$match","match","formatDevicePlatform","platform","formatted","ios","android","web","chalk","bold","log","Array","isArray","level","platformId","args","map","JSON","stringify","logLevel","groupDepth","shouldHide","includesStack"],"sources":["../../src/middleware/clientLogsMiddleware.ts"],"sourcesContent":["import Log from '@expo/bunyan';\nimport chalk from 'chalk';\nimport { HandleFunction } from 'connect';\nimport http from 'http';\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nexport default function clientLogsMiddleware(logger: Log): HandleFunction {\n  return function (\n    req: http.IncomingMessage & { body?: any },\n    res: http.ServerResponse,\n    next: (err?: Error) => void\n  ) {\n    try {\n      const deviceId = req.headers['device-id'];\n      const deviceName = req.headers['device-name'];\n      const expoPlatform = req.headers['expo-platform'];\n      if (!deviceId) {\n        res.writeHead(400).end('Missing Device-Id.');\n        return;\n      }\n      if (!deviceName) {\n        res.writeHead(400).end('Missing Device-Name.');\n        return;\n      }\n      if (!req.body) {\n        res.writeHead(400).end('Missing request body.');\n        return;\n      }\n      handleDeviceLogs(logger, {\n        deviceId: deviceId.toString(),\n        deviceName: deviceName.toString(),\n        logs: req.body,\n        devicePlatform: expoPlatform?.toString(),\n      });\n    } catch (error: any) {\n      logger.error({ tag: 'expo' }, `Error getting device logs: ${error} ${error.stack}`);\n      next(error);\n    }\n    res.end('Success');\n  };\n}\n\nfunction isIgnorableBugReportingExtraData(body: any[]): boolean {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction isAppRegistryStartupMessage(body: any[]): boolean {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\nexport function getDevicePlatformFromAppRegistryStartupMessage(body: string[]): string | null {\n  if (body.length === 1 && typeof body[0] === 'string') {\n    // Dangerously pick the platform out of the request URL\n    // like: http:\\\\\\\\/\\\\\\\\/192.168.6.113:8081\\\\\\\\/index.bundle&platform=android\\dev=true&hot=false&minify=false\n    return body[0].match(/[?|&]platform=(\\w+)[&|\\\\]/)?.[1] ?? null;\n  }\n  return null;\n}\n\nfunction formatDevicePlatform(platform: string): string {\n  // Map the ID like \"ios\" to \"iOS\"\n  const formatted = { ios: 'iOS', android: 'Android', web: 'Web' }[platform] || platform;\n  return `${chalk.bold(formatted)} `;\n}\n\nfunction handleDeviceLogs(\n  logger: Log,\n  {\n    deviceId,\n    deviceName,\n    logs,\n    devicePlatform,\n  }: { deviceId: string; deviceName: string; devicePlatform?: string; logs: any }\n): void {\n  for (const log of logs) {\n    let body = Array.isArray(log.body) ? log.body : [log.body];\n    let { level } = log;\n\n    if (isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (isAppRegistryStartupMessage(body)) {\n      // If the installed version of expo is sending back the `device-platform` header\n      // then use that, otherwise find it in the query string.\n      const platformId = devicePlatform\n        ? devicePlatform\n        : getDevicePlatformFromAppRegistryStartupMessage(body);\n\n      const platform = platformId ? formatDevicePlatform(platformId) : '';\n      body = [`${platform}Running app on ${deviceName}`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    logger[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\n"],"mappings":"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"}