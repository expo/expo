{"version":3,"file":"withExpoSerializers.js","names":["_jscSafeUrl","data","require","_sourceMapString","_interopRequireDefault","_bundleToString","_debugId","_environmentVariableSerializerPlugin","_baseJSBundle","_serializeChunks","_serializerAssets","_env","obj","__esModule","default","withExpoSerializers","config","processors","push","serverPreludeSerializerPlugin","env","EXPO_NO_CLIENT_ENV_VARS","environmentVariableSerializerPlugin","withSerializerPlugins","_config$serializer","originalSerializer","serializer","customSerializer","createSerializerFromSerialProcessors","createDefaultExportCustomSerializer","entryPoint","preModules","graph","options","_config$serializer2","isPossiblyDev","transformOptions","hot","enableDebugId","inlineSourceMap","debugId","loadDebugId","bundle","baseJSBundle","undefined","outputCode","bundleToString","code","stringToUUID","bundleCode","bundleMap","_config$serializer3","map","sourceMapString","getSortedModules","dependencies","values","excludeSource","processModuleFilter","shouldAddToIgnoreList","mutateSourceMapWithDebugId","sourceMap","sourceMapObject","JSON","parse","stringify","getDefaultSerializer","fallbackSerializer","defaultSerializer","props","customSerializerOptions","serializerOptions","supportsNonSerialReturn","output","includeBytecode","outputMode","includeSourceMaps","sourceUrl","isJscSafeUrl","toNormalUrl","url","URL","searchParams","get","assets","graphToSerialAssetsAsync","finalSerializer","processor"],"sources":["../../src/serializer/withExpoSerializers.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { isJscSafeUrl, toNormalUrl } from 'jsc-safe-url';\nimport { MetroConfig, MixedOutput, Module, ReadOnlyGraph, SerializerOptions } from 'metro';\nimport sourceMapString from 'metro/src/DeltaBundler/Serializers/sourceMapString';\nimport bundleToString from 'metro/src/lib/bundleToString';\nimport { ConfigT, InputConfigT } from 'metro-config';\n\nimport { stringToUUID } from './debugId';\nimport {\n  environmentVariableSerializerPlugin,\n  serverPreludeSerializerPlugin,\n} from './environmentVariableSerializerPlugin';\nimport { ExpoSerializerOptions, baseJSBundle } from './fork/baseJSBundle';\nimport { getSortedModules, graphToSerialAssetsAsync } from './serializeChunks';\nimport { SerialAsset } from './serializerAssets';\nimport { env } from '../env';\n\nexport type Serializer = NonNullable<ConfigT['serializer']['customSerializer']>;\n\nexport type SerializerParameters = [\n  string,\n  readonly Module[],\n  ReadOnlyGraph,\n  ExpoSerializerOptions,\n];\n\n// A serializer that processes the input and returns a modified version.\n// Unlike a serializer, these can be chained together.\nexport type SerializerPlugin = (...props: SerializerParameters) => SerializerParameters;\n\nexport function withExpoSerializers(config: InputConfigT): InputConfigT {\n  const processors: SerializerPlugin[] = [];\n  processors.push(serverPreludeSerializerPlugin);\n  if (!env.EXPO_NO_CLIENT_ENV_VARS) {\n    processors.push(environmentVariableSerializerPlugin);\n  }\n\n  return withSerializerPlugins(config, processors);\n}\n\n// There can only be one custom serializer as the input doesn't match the output.\n// Here we simply run\nexport function withSerializerPlugins(\n  config: InputConfigT,\n  processors: SerializerPlugin[]\n): InputConfigT {\n  const originalSerializer = config.serializer?.customSerializer;\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      customSerializer: createSerializerFromSerialProcessors(\n        config,\n        processors,\n        originalSerializer\n      ),\n    },\n  };\n}\n\nexport function createDefaultExportCustomSerializer(config: Partial<MetroConfig>): Serializer {\n  return async (\n    entryPoint: string,\n    preModules: readonly Module<MixedOutput>[],\n    graph: ReadOnlyGraph<MixedOutput>,\n    options: SerializerOptions<MixedOutput>\n  ): Promise<string | { code: string; map: string }> => {\n    const isPossiblyDev = graph.transformOptions.hot;\n    // TODO: This is a temporary solution until we've converged on using the new serializer everywhere.\n    const enableDebugId = options.inlineSourceMap !== true && !isPossiblyDev;\n\n    let debugId: string | undefined;\n    const loadDebugId = () => {\n      if (!enableDebugId || debugId) {\n        return debugId;\n      }\n\n      // TODO: Perform this cheaper.\n      const bundle = baseJSBundle(entryPoint, preModules, graph, {\n        ...options,\n        debugId: undefined,\n      });\n      const outputCode = bundleToString(bundle).code;\n      debugId = stringToUUID(outputCode);\n      return debugId;\n    };\n\n    let bundleCode: string | null = null;\n    let bundleMap: string | null = null;\n\n    if (config.serializer?.customSerializer) {\n      const bundle = await config.serializer?.customSerializer(\n        entryPoint,\n        preModules,\n        graph,\n        options\n      );\n      if (typeof bundle === 'string') {\n        bundleCode = bundle;\n      } else {\n        bundleCode = bundle.code;\n        bundleMap = bundle.map;\n      }\n    } else {\n      bundleCode = bundleToString(\n        baseJSBundle(entryPoint, preModules, graph, {\n          ...options,\n          debugId: loadDebugId(),\n        })\n      ).code;\n    }\n\n    if (isPossiblyDev) {\n      if (bundleMap == null) {\n        return bundleCode;\n      }\n      return {\n        code: bundleCode,\n        map: bundleMap,\n      };\n    }\n\n    // Exports....\n\n    if (!bundleMap) {\n      bundleMap = sourceMapString(\n        [...preModules, ...getSortedModules([...graph.dependencies.values()], options)],\n        {\n          // TODO: Surface this somehow.\n          excludeSource: false,\n          // excludeSource: options.serializerOptions?.excludeSource,\n          processModuleFilter: options.processModuleFilter,\n          shouldAddToIgnoreList: options.shouldAddToIgnoreList,\n        }\n      );\n    }\n\n    if (enableDebugId) {\n      const mutateSourceMapWithDebugId = (sourceMap: string) => {\n        // NOTE: debugId isn't required for inline source maps because the source map is included in the same file, therefore\n        // we don't need to disambiguate between multiple source maps.\n        const sourceMapObject = JSON.parse(sourceMap);\n        sourceMapObject.debugId = loadDebugId();\n        // NOTE: Sentry does this, but bun does not.\n        // sourceMapObject.debug_id = debugId;\n        return JSON.stringify(sourceMapObject);\n      };\n\n      return {\n        code: bundleCode,\n        map: mutateSourceMapWithDebugId(bundleMap),\n      };\n    }\n\n    return {\n      code: bundleCode,\n      map: bundleMap,\n    };\n  };\n}\n\nfunction getDefaultSerializer(\n  config: MetroConfig,\n  fallbackSerializer?: Serializer | null\n): Serializer {\n  const defaultSerializer = fallbackSerializer ?? createDefaultExportCustomSerializer(config);\n\n  return async (\n    ...props: SerializerParameters\n  ): Promise<string | { code: string; map: string }> => {\n    const [, , , options] = props;\n\n    const customSerializerOptions = options.serializerOptions;\n\n    // Custom options can only be passed outside of the dev server, meaning\n    // we don't need to stringify the results at the end, i.e. this is `npx expo export` or `npx expo export:embed`.\n    const supportsNonSerialReturn = !!customSerializerOptions?.output;\n\n    const serializerOptions = (() => {\n      if (customSerializerOptions) {\n        return {\n          includeBytecode: customSerializerOptions.includeBytecode,\n          outputMode: customSerializerOptions.output,\n          includeSourceMaps: customSerializerOptions.includeSourceMaps,\n        };\n      }\n      if (options.sourceUrl) {\n        const sourceUrl = isJscSafeUrl(options.sourceUrl)\n          ? toNormalUrl(options.sourceUrl)\n          : options.sourceUrl;\n\n        const url = new URL(sourceUrl, 'https://expo.dev');\n\n        return {\n          outputMode: url.searchParams.get('serializer.output'),\n          includeSourceMaps: url.searchParams.get('serializer.map') === 'true',\n          includeBytecode: url.searchParams.get('serializer.bytecode') === 'true',\n        };\n      }\n      return null;\n    })();\n\n    if (serializerOptions?.outputMode !== 'static') {\n      return defaultSerializer(...props);\n    }\n\n    // Mutate the serializer options with the parsed options.\n    options.serializerOptions = {\n      ...options.serializerOptions,\n      ...serializerOptions,\n    };\n\n    const assets = await graphToSerialAssetsAsync(\n      config,\n      {\n        includeSourceMaps: !!serializerOptions.includeSourceMaps,\n        includeBytecode: !!serializerOptions.includeBytecode,\n      },\n      ...props\n    );\n\n    if (supportsNonSerialReturn) {\n      // @ts-expect-error: this is future proofing for adding assets to the output as well.\n      return assets;\n    }\n\n    return JSON.stringify(assets);\n  };\n}\n\nexport function createSerializerFromSerialProcessors(\n  config: MetroConfig,\n  processors: (SerializerPlugin | undefined)[],\n  originalSerializer?: Serializer | null\n): Serializer {\n  const finalSerializer = getDefaultSerializer(config, originalSerializer);\n  return (...props: SerializerParameters): ReturnType<Serializer> => {\n    for (const processor of processors) {\n      if (processor) {\n        props = processor(...props);\n      }\n    }\n\n    return finalSerializer(...props);\n  };\n}\n\nexport { SerialAsset };\n"],"mappings":"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"}