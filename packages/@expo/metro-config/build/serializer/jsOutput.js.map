{"version":3,"file":"jsOutput.js","names":["isExpoJsOutput","output","data","isTransformOptionTruthy","option"],"sources":["../../src/serializer/jsOutput.ts"],"sourcesContent":["/**\n * Copyright Â© 2023-present 650 Industries (Expo). All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { FBSourceFunctionMap, MetroSourceMapSegmentTuple } from 'metro-source-map';\n\nexport type JSFileType = 'js/script' | 'js/module' | 'js/module/asset';\n\nexport type JsOutput = {\n  data: {\n    code: string;\n    lineCount: number;\n    map: MetroSourceMapSegmentTuple[];\n    functionMap: FBSourceFunctionMap | null;\n\n    css?: {\n      code: string;\n      lineCount: number;\n      map: MetroSourceMapSegmentTuple[];\n      functionMap: FBSourceFunctionMap | null;\n    };\n  };\n  type: JSFileType;\n};\n\nexport type ExpoJsOutput = Omit<JsOutput, 'data'> & {\n  data: JsOutput['data'] & {\n    profiling?: {\n      start: number;\n      end: number;\n      duration: number;\n    };\n    css?: {\n      code: string;\n      lineCount: number;\n      map: unknown[];\n      functionMap: null;\n      skipCache?: boolean;\n    };\n  };\n};\n\nexport function isExpoJsOutput(output: any): output is ExpoJsOutput {\n  return 'data' in output && typeof output.data === 'object';\n}\n\n// Because transform options can be passed directly during export, or through a query parameter\n// during a request, we need to normalize the options.\nexport function isTransformOptionTruthy(option: any): boolean {\n  return option === true || option === 'true' || option === '1';\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;AAuCO,SAASA,cAAcA,CAACC,MAAW,EAA0B;EAClE,OAAO,MAAM,IAAIA,MAAM,IAAI,OAAOA,MAAM,CAACC,IAAI,KAAK,QAAQ;AAC5D;;AAEA;AACA;AACO,SAASC,uBAAuBA,CAACC,MAAW,EAAW;EAC5D,OAAOA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,GAAG;AAC/D"}