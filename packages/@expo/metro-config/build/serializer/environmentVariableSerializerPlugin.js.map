{"version":3,"file":"environmentVariableSerializerPlugin.js","names":["_CountingSet","data","_interopRequireDefault","require","_countLines","obj","__esModule","default","debug","getTransformEnvironment","url","match","getAllExpoPublicEnvVars","env","key","process","startsWith","isServerEnvironment","graph","options","transformOptions","customTransformOptions","sourceUrl","environment","serverPreludeSerializerPlugin","entryPoint","preModules","prelude","find","module","path","output","code","replace","environmentVariableSerializerPlugin","dev","str","Object","keys","map","JSON","stringify","join","firstModule","restModules","getEnvPrelude","contents","name","lineCount","countLines","dependencies","Map","getSource","Buffer","from","inverseDependencies","CountingSet","type"],"sources":["../../src/serializer/environmentVariableSerializerPlugin.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ReadOnlyGraph, MixedOutput, Module, SerializerOptions } from 'metro';\nimport CountingSet from 'metro/src/lib/CountingSet';\nimport countLines from 'metro/src/lib/countLines';\n\nimport { SerializerParameters } from './withExpoSerializers';\n\nconst debug = require('debug')('expo:metro-config:serializer:env-var') as typeof console.log;\n\nexport function getTransformEnvironment(url: string): string | null {\n  const match = url.match(/[&?]transform\\.environment=([^&]+)/);\n  return match ? match[1] : null;\n}\n\nfunction getAllExpoPublicEnvVars() {\n  // Create an object containing all environment variables that start with EXPO_PUBLIC_\n  const env = {};\n  for (const key in process.env) {\n    if (key.startsWith('EXPO_PUBLIC_')) {\n      // @ts-ignore\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n}\n\nfunction isServerEnvironment(graph: ReadOnlyGraph, options: SerializerOptions): boolean {\n  // Requests from a dev server will use sourceUrl.\n  if (!graph.transformOptions.customTransformOptions) {\n    if (options.sourceUrl) {\n      const env = getTransformEnvironment(options.sourceUrl);\n      return env === 'node';\n    }\n    return false;\n  }\n\n  // Other requests will use customTransformOptions.environment.\n  return graph.transformOptions.customTransformOptions.environment === 'node';\n}\n\n/** Strips the process.env polyfill in server environments to allow for accessing environment variables off the global. */\nexport function serverPreludeSerializerPlugin(\n  entryPoint: string,\n  preModules: readonly Module<MixedOutput>[],\n  graph: ReadOnlyGraph,\n  options: SerializerOptions\n): SerializerParameters {\n  if (isServerEnvironment(graph, options)) {\n    const prelude = preModules.find((module) => module.path === '__prelude__');\n    if (prelude) {\n      debug('Stripping environment variable polyfill in server environment.');\n      prelude.output[0].data.code = prelude.output[0].data.code\n        .replace(/process=this\\.process\\|\\|{},/, '')\n        .replace(\n          /process\\.env=process\\.env\\|\\|{};process\\.env\\.NODE_ENV=process\\.env\\.NODE_ENV\\|\\|\"\\w+\";/,\n          ''\n        );\n    }\n  }\n  return [entryPoint, preModules, graph, options];\n}\n\nexport function environmentVariableSerializerPlugin(\n  entryPoint: string,\n  preModules: readonly Module<MixedOutput>[],\n  graph: ReadOnlyGraph,\n  options: SerializerOptions\n): SerializerParameters {\n  // Skip replacement in Node.js environments.\n  if (isServerEnvironment(graph, options)) {\n    debug('Skipping environment variable inlining in Node.js environment.');\n    return [entryPoint, preModules, graph, options];\n  }\n\n  // In development, we need to add the process.env object to ensure it\n  // persists between Fast Refresh updates.\n  if (!options.dev) {\n    debug(\n      'Skipping environment variable inlining in production environment in favor of babel-preset-expo inlining with source maps.'\n    );\n    return [entryPoint, preModules, graph, options];\n  }\n\n  // Set the process.env object to the current environment variables object\n  // ensuring they aren't iterable, settable, or enumerable.\n  const str = `process.env=Object.defineProperties(process.env, {${Object.keys(\n    getAllExpoPublicEnvVars()\n  )\n    .map((key) => `${JSON.stringify(key)}: { value: ${JSON.stringify(process.env[key])} }`)\n    .join(',')}});`;\n\n  const [firstModule, ...restModules] = preModules;\n  // const envCode = `var process=this.process||{};${str}`;\n  // process.env\n  return [\n    entryPoint,\n    [\n      // First module defines the process.env object.\n      firstModule,\n      // Second module modifies the process.env object.\n      getEnvPrelude(str),\n      // Now we add the rest\n      ...restModules,\n    ],\n    graph,\n    options,\n  ];\n}\n\nfunction getEnvPrelude(contents: string): Module<MixedOutput> {\n  const code = '// HMR env vars from Expo CLI (dev-only)\\n' + contents;\n  const name = '__env__';\n  const lineCount = countLines(code);\n\n  return {\n    dependencies: new Map(),\n    getSource: (): Buffer => Buffer.from(code),\n    inverseDependencies: new CountingSet(),\n    path: name,\n    output: [\n      {\n        type: 'js/script/virtual',\n        data: {\n          code,\n          // @ts-expect-error: typed incorrectly upstream\n          lineCount,\n          map: [],\n        },\n      },\n    ],\n  };\n}\n"],"mappings":"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"}