{"version":3,"file":"environmentVariableSerializerPlugin.js","names":["_CountingSet","data","_interopRequireDefault","require","_countLines","obj","__esModule","default","debug","replaceEnvironmentVariables","code","env","replace","match","_env$name","name","test","value","JSON","stringify","getTransformEnvironment","url","getAllExpoPublicEnvVars","key","process","startsWith","serverPreludeSerializerPlugin","entryPoint","preModules","graph","options","sourceUrl","prelude","find","module","path","output","environmentVariableSerializerPlugin","dev","str","Object","keys","map","join","firstModule","restModules","getEnvPrelude","dependencies","values","index","contents","lineCount","countLines","Map","getSource","Buffer","from","inverseDependencies","CountingSet","type"],"sources":["../../src/serializer/environmentVariableSerializerPlugin.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ReadOnlyGraph, MixedOutput, Module, SerializerOptions } from 'metro';\nimport CountingSet from 'metro/src/lib/CountingSet';\nimport countLines from 'metro/src/lib/countLines';\n\nimport { SerializerParameters } from './withExpoSerializers';\n\nconst debug = require('debug')('expo:metro-config:serializer:env-var') as typeof console.log;\n\nexport function replaceEnvironmentVariables(\n  code: string,\n  env: Record<string, string | undefined>\n): string {\n  // match and replace env variables that aren't NODE_ENV or JEST_WORKER_ID\n  // return code.match(/process\\.env\\.(EXPO_PUBLIC_[A-Z_]+)/g);\n  return code.replace(/process\\.env\\.([a-zA-Z0-9_]+)/gm, (match) => {\n    const name = match.replace('process.env.', '');\n    if (\n      // Must start with EXPO_PUBLIC_ to be replaced\n      !/^EXPO_PUBLIC_/.test(name)\n    ) {\n      return match;\n    }\n\n    const value = JSON.stringify(env[name] ?? '');\n    debug(`Inlining environment variable \"${match}\" with ${value}`);\n    return value;\n  });\n}\n\nexport function getTransformEnvironment(url: string): string | null {\n  const match = url.match(/[&?]transform\\.environment=([^&]+)/);\n  return match ? match[1] : null;\n}\n\nfunction getAllExpoPublicEnvVars() {\n  // Create an object containing all environment variables that start with EXPO_PUBLIC_\n  const env = {};\n  for (const key in process.env) {\n    if (key.startsWith('EXPO_PUBLIC_')) {\n      // @ts-ignore\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n}\n\n/** Strips the process.env polyfill in server environments to allow for accessing environment variables off the global. */\nexport function serverPreludeSerializerPlugin(\n  entryPoint: string,\n  preModules: readonly Module<MixedOutput>[],\n  graph: ReadOnlyGraph,\n  options: SerializerOptions\n): SerializerParameters {\n  if (options.sourceUrl && getTransformEnvironment(options.sourceUrl) === 'node') {\n    const prelude = preModules.find((module) => module.path === '__prelude__');\n    if (prelude) {\n      debug('Stripping environment variable polyfill in server environment.');\n      prelude.output[0].data.code = prelude.output[0].data.code\n        .replace(/process=this\\.process\\|\\|{},/, '')\n        .replace(\n          /process\\.env=process\\.env\\|\\|{};process\\.env\\.NODE_ENV=process\\.env\\.NODE_ENV\\|\\|\"\\w+\";/,\n          ''\n        );\n    }\n  }\n  return [entryPoint, preModules, graph, options];\n}\n\nexport function environmentVariableSerializerPlugin(\n  entryPoint: string,\n  preModules: readonly Module<MixedOutput>[],\n  graph: ReadOnlyGraph,\n  options: SerializerOptions\n): SerializerParameters {\n  // Skip replacement in Node.js environments.\n  if (options.sourceUrl && getTransformEnvironment(options.sourceUrl) === 'node') {\n    debug('Skipping environment variable inlining in Node.js environment.');\n    return [entryPoint, preModules, graph, options];\n  }\n\n  // Adds about 5ms on a blank Expo Router app.\n  // TODO: We can probably cache the results.\n\n  // In development, we need to add the process.env object to ensure it\n  // persists between Fast Refresh updates.\n  if (options.dev) {\n    // Set the process.env object to the current environment variables object\n    // ensuring they aren't iterable, settable, or enumerable.\n    const str = `process.env=Object.defineProperties(process.env, {${Object.keys(\n      getAllExpoPublicEnvVars()\n    )\n      .map((key) => `${JSON.stringify(key)}: { value: ${JSON.stringify(process.env[key])} }`)\n      .join(',')}});`;\n\n    const [firstModule, ...restModules] = preModules;\n    // const envCode = `var process=this.process||{};${str}`;\n    // process.env\n    return [\n      entryPoint,\n      [\n        // First module defines the process.env object.\n        firstModule,\n        // Second module modifies the process.env object.\n        getEnvPrelude(str),\n        // Now we add the rest\n        ...restModules,\n      ],\n      graph,\n      options,\n    ];\n  }\n\n  // In production, inline all process.env variables to ensure they cannot be iterated and read arbitrarily.\n  for (const value of graph.dependencies.values()) {\n    // Skip node_modules, the feature is a bit too sensitive to allow in arbitrary code.\n    if (/node_modules/.test(value.path)) {\n      continue;\n    }\n\n    for (const index in value.output) {\n      // TODO: This probably breaks source maps.\n      const code = replaceEnvironmentVariables(value.output[index].data.code, process.env);\n      value.output[index].data.code = code;\n    }\n  }\n  return [entryPoint, preModules, graph, options];\n}\n\nfunction getEnvPrelude(contents: string): Module<MixedOutput> {\n  const code = '// HMR env vars from Expo CLI (dev-only)\\n' + contents;\n  const name = '__env__';\n  const lineCount = countLines(code);\n\n  return {\n    dependencies: new Map(),\n    getSource: (): Buffer => Buffer.from(code),\n    inverseDependencies: new CountingSet(),\n    path: name,\n    output: [\n      {\n        type: 'js/script/virtual',\n        data: {\n          code,\n          // @ts-expect-error: typed incorrectly upstream\n          lineCount,\n          map: [],\n        },\n      },\n    ],\n  };\n}\n"],"mappings":"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"}