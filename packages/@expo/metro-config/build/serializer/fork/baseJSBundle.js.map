{"version":3,"file":"baseJSBundle.js","names":["_jscSafeUrl","data","require","_CountingSet","_interopRequireDefault","_countLines","_getAppendScripts","_processModules","obj","__esModule","default","getPlatformOption","graph","options","_graph$transformOptio","_url$searchParams$get","transformOptions","platform","sourceUrl","isJscSafeUrl","toNormalUrl","url","URL","searchParams","get","getSplitChunksOption","includeAsyncPaths","getBaseUrlOption","_graph$transformOptio2","_graph$transformOptio3","baseUrl","customTransformOptions","mayBeEncoded","serializerOptions","option","decodeURIComponent","replace","baseJSBundle","entryPoint","preModules","_options$serializerOp","Error","baseJSBundleWithDependencies","dependencies","values","splitChunks","skipWrapping","computedAsyncModulePaths","_options$serializerOp2","module","createModuleId","path","processModulesOptions","filter","processModuleFilter","dev","projectRoot","serverRoot","modulesOnly","preCode","processModules","map","code","src","join","modules","sort","a","b","sourceMapUrl","includeSourceMaps","undefined","modulesWithAnnotations","getAppendScripts","asyncRequireModulePath","getRunModuleStatement","inlineSourceMap","runBeforeMainModule","runModule","shouldAddToIgnoreList","hasExternalMaps","debugId","push","Map","getSource","Buffer","from","inverseDependencies","CountingSet","output","type","lineCount","countLines","postCode","mods","pre","post","id"],"sources":["../../../src/serializer/fork/baseJSBundle.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Fork with bundle splitting and better source map support.\n * https://github.com/facebook/metro/blob/bbdd7d7c5e6e0feb50a9967ffae1f723c1d7c4e8/packages/metro/src/DeltaBundler/Serializers/baseJSBundle.js#L1\n */\n\nimport { isJscSafeUrl, toNormalUrl } from 'jsc-safe-url';\nimport type { MixedOutput, Module, ReadOnlyGraph, SerializerOptions } from 'metro';\nimport CountingSet from 'metro/src/lib/CountingSet';\nimport countLines from 'metro/src/lib/countLines';\nimport getAppendScripts from 'metro/src/lib/getAppendScripts';\n\nimport { processModules } from './processModules';\n\nexport type ModuleMap = [number, string][];\n\nexport type Bundle = {\n  modules: ModuleMap;\n  post: string;\n  pre: string;\n};\n\nexport type ExpoSerializerOptions = SerializerOptions & {\n  serializerOptions?: {\n    baseUrl?: string;\n    skipWrapping?: boolean;\n    output?: string;\n    includeBytecode?: boolean;\n    includeSourceMaps?: boolean;\n  };\n  // Chunk-based stable identifier for the bundle that is used for identifying the bundle.\n  // https://sentry.engineering/blog/the-case-for-debug-ids\n  // https://bun.sh/docs/bundler#sourcemap\n  debugId?: string;\n};\n\nexport function getPlatformOption(\n  graph: Pick<ReadOnlyGraph, 'transformOptions'>,\n  options: Pick<SerializerOptions, 'sourceUrl'>\n): string | null {\n  if (graph.transformOptions?.platform != null) {\n    return graph.transformOptions.platform;\n  }\n  if (!options.sourceUrl) {\n    return null;\n  }\n\n  const sourceUrl = isJscSafeUrl(options.sourceUrl)\n    ? toNormalUrl(options.sourceUrl)\n    : options.sourceUrl;\n  const url = new URL(sourceUrl, 'https://expo.dev');\n  return url.searchParams.get('platform') ?? null;\n}\n\nexport function getSplitChunksOption(\n  graph: Pick<ReadOnlyGraph, 'transformOptions'>,\n  options: Pick<SerializerOptions, 'includeAsyncPaths' | 'sourceUrl'>\n): boolean {\n  // Only enable when the entire bundle is being split, and only run on web.\n  return !options.includeAsyncPaths && getPlatformOption(graph, options) === 'web';\n}\n\nexport function getBaseUrlOption(\n  graph: Pick<ReadOnlyGraph, 'transformOptions'>,\n  options: Pick<ExpoSerializerOptions, 'serializerOptions'>\n): string {\n  const baseUrl = graph.transformOptions?.customTransformOptions?.baseUrl;\n  if (typeof baseUrl === 'string') {\n    // This tells us that the value came over a URL and may be encoded.\n    const mayBeEncoded = options.serializerOptions == null;\n    const option = mayBeEncoded ? decodeURIComponent(baseUrl) : baseUrl;\n\n    return option.replace(/\\/+$/, '') + '/';\n  }\n  return '/';\n}\n\nexport function baseJSBundle(\n  entryPoint: string,\n  preModules: readonly Module[],\n  graph: Pick<ReadOnlyGraph, 'dependencies' | 'transformOptions'>,\n  options: ExpoSerializerOptions\n): Bundle {\n  const platform = getPlatformOption(graph, options);\n  if (platform == null) {\n    throw new Error('platform could not be determined for Metro bundle');\n  }\n\n  return baseJSBundleWithDependencies(entryPoint, preModules, [...graph.dependencies.values()], {\n    ...options,\n    baseUrl: getBaseUrlOption(graph, options),\n    splitChunks: getSplitChunksOption(graph, options),\n    platform,\n    skipWrapping: !!options.serializerOptions?.skipWrapping,\n    computedAsyncModulePaths: null,\n  });\n}\n\nexport function baseJSBundleWithDependencies(\n  entryPoint: string,\n  preModules: readonly Module[],\n  dependencies: Module<MixedOutput>[],\n  options: ExpoSerializerOptions & {\n    platform: string;\n    baseUrl: string;\n    splitChunks: boolean;\n    skipWrapping: boolean;\n    computedAsyncModulePaths: Record<string, string> | null;\n    debugId?: string;\n  }\n): Bundle {\n  for (const module of dependencies) {\n    options.createModuleId(module.path);\n  }\n\n  const processModulesOptions = {\n    filter: options.processModuleFilter,\n    createModuleId: options.createModuleId,\n    dev: options.dev,\n    includeAsyncPaths: options.includeAsyncPaths,\n    projectRoot: options.projectRoot,\n    serverRoot: options.serverRoot,\n    sourceUrl: options.sourceUrl,\n    platform: options.platform,\n    baseUrl: options.baseUrl,\n    splitChunks: options.splitChunks,\n    skipWrapping: options.skipWrapping,\n    computedAsyncModulePaths: options.computedAsyncModulePaths,\n  };\n\n  // Do not prepend polyfills or the require runtime when only modules are requested\n  if (options.modulesOnly) {\n    preModules = [];\n  }\n\n  const preCode = processModules(preModules, processModulesOptions)\n    .map(([, code]) => code.src)\n    .join('\\n');\n\n  const modules = [...dependencies].sort(\n    (a: Module<MixedOutput>, b: Module<MixedOutput>) =>\n      options.createModuleId(a.path) - options.createModuleId(b.path)\n  );\n\n  const sourceMapUrl =\n    options.serializerOptions?.includeSourceMaps === false ? undefined : options.sourceMapUrl;\n\n  const modulesWithAnnotations = getAppendScripts(entryPoint, [...preModules, ...modules], {\n    asyncRequireModulePath: options.asyncRequireModulePath,\n    createModuleId: options.createModuleId,\n    getRunModuleStatement: options.getRunModuleStatement,\n    inlineSourceMap: options.inlineSourceMap,\n    runBeforeMainModule: options.runBeforeMainModule,\n    runModule: options.runModule,\n    shouldAddToIgnoreList: options.shouldAddToIgnoreList,\n    sourceMapUrl,\n    // This directive doesn't make a lot of sense in the context of a large single bundle that represent\n    // multiple files. It's usually used for things like TypeScript where you want the file name to appear with a\n    // different extension. Since it's unclear to me (Bacon) how it is used on native, I'm only disabling in web.\n    sourceUrl: options.platform === 'web' ? undefined : options.sourceUrl,\n  });\n\n  // If the `debugId` annotation is available and we aren't inlining the source map, add it to the bundle.\n  // NOTE: We may want to move this assertion up further.\n  const hasExternalMaps = !options.inlineSourceMap && !!sourceMapUrl;\n  if (hasExternalMaps && options.debugId != null) {\n    const code = `//# debugId=${options.debugId}`;\n    modulesWithAnnotations.push({\n      path: 'debug-id-annotation',\n      dependencies: new Map(),\n      getSource: (): Buffer => Buffer.from(''),\n      inverseDependencies: new CountingSet(),\n      output: [\n        {\n          type: 'js/script/virtual',\n          data: {\n            code,\n            lineCount: countLines(code),\n            map: [],\n          },\n        },\n      ],\n    });\n  }\n\n  const postCode = processModules(modulesWithAnnotations, processModulesOptions)\n    .map(([, code]) => code.src)\n    .join('\\n');\n\n  const mods = processModules([...dependencies], processModulesOptions).map(([module, code]) => [\n    options.createModuleId(module.path),\n    code,\n  ]);\n  return {\n    pre: preCode,\n    post: postCode,\n    modules: mods.map(([id, code]) => [\n      id,\n      typeof code === 'number' ? code : code.src,\n    ]) as ModuleMap,\n  };\n}\n"],"mappings":"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"}