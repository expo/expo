{"version":3,"file":"getAssets.js","names":["_Assets","data","require","_js","_nodeAssert","_interopRequireDefault","_nodeCrypto","_nodePath","obj","__esModule","default","md5Hash","length","hash","crypto","createHash","update","join","digest","assertHashedAssetData","assert","getUniversalAssetData","assetPath","localPath","assetDataPlugins","platform","publicPath","getAssetData","includes","name","fileHashes","getAssets","dependencies","options","promises","processModuleFilter","module","values","isJsModule","getJsOutput","type","path","relative","projectRoot","push","assetPlugins","Promise","all"],"sources":["../../src/transform-worker/getAssets.ts"],"sourcesContent":["/**\n * Copyright 2023-present 650 Industries (Expo). All rights reserved.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { AssetData, Module } from 'metro';\nimport { getAssetData } from 'metro/src/Assets';\nimport { getJsOutput, isJsModule } from 'metro/src/DeltaBundler/Serializers/helpers/js';\nimport assert from 'node:assert';\nimport crypto from 'node:crypto';\nimport path from 'node:path';\n\nimport { ReadOnlyDependencies } from '../serializer/getCssDeps';\n\ntype Options = {\n  processModuleFilter: (modules: Module) => boolean;\n  assetPlugins: readonly string[];\n  platform?: string | null;\n  projectRoot: string;\n  publicPath: string;\n};\n\nfunction md5Hash(data: string[]) {\n  if (data.length === 1) return data[0];\n  const hash = crypto.createHash('md5');\n  hash.update(data.join(''));\n  return hash.digest('hex');\n}\n\nfunction assertHashedAssetData(data: AssetData): asserts data is HashedAssetData {\n  assert(\n    'fileHashes' in data,\n    'Assets must have hashed files. Ensure the expo-asset plugin is installed.'\n  );\n}\n\nexport async function getUniversalAssetData(\n  assetPath: string,\n  localPath: string,\n  assetDataPlugins: readonly string[],\n  platform: string | null | undefined,\n  publicPath: string\n): Promise<HashedAssetData> {\n  const data = await getAssetData(assetPath, localPath, assetDataPlugins, platform, publicPath);\n  assertHashedAssetData(data);\n\n  // NOTE(EvanBacon): This is where we modify the asset to include a hash in the name for web cache invalidation.\n  if (platform === 'web' && publicPath.includes('?export_path=')) {\n    // `local-image.[contenthash]`. Using `.` but this won't work if we ever apply to Android because Android res files cannot contain `.`.\n    // TODO: Prevent one multi-res image from updating the hash in all images.\n    // @ts-expect-error: name is typed as readonly.\n    data.name = `${data.name}.${md5Hash(data.fileHashes)}`;\n  }\n\n  return data;\n}\n\nexport type HashedAssetData = AssetData & { fileHashes: string[]; _name?: string };\n\nexport default async function getAssets(\n  dependencies: ReadOnlyDependencies,\n  options: Options\n): Promise<HashedAssetData[]> {\n  const promises: Promise<HashedAssetData>[] = [];\n  const { processModuleFilter } = options;\n\n  for (const module of dependencies.values()) {\n    if (\n      isJsModule(module) &&\n      processModuleFilter(module) &&\n      getJsOutput(module).type === 'js/module/asset' &&\n      path.relative(options.projectRoot, module.path) !== 'package.json'\n    ) {\n      promises.push(\n        getUniversalAssetData(\n          module.path,\n          path.relative(options.projectRoot, module.path),\n          options.assetPlugins,\n          options.platform,\n          options.publicPath\n        )\n      );\n    }\n  }\n\n  return await Promise.all(promises);\n}\n"],"mappings":"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"}