// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CSS Modules web transforms for dev, minified 1`] = `
{
  "input": "module.exports=Object.assign({"container":"_R_BGG_container"},{unstable_styles:{"container":{"$$css":true,"_":"_R_BGG_container"}}}{});
(() => {
  if (typeof document === 'undefined') {
    return
  }
  const head = document.head || document.getElementsByTagName('head')[0];
  const style = document.createElement('style');
  style.setAttribute('data-expo-css-hmr', "acme_module_css");
  const previousStyle = document.querySelector('[data-expo-css-hmr="acme_module_css"]');
  if (previousStyle) {
    previousStyle.parentNode.removeChild(previousStyle);
  }
  style.setAttribute('data-expo-loader', 'css');
  head.appendChild(style);
  const css = \`._R_BGG_container{background:red}\`;
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
})();",
  "output": {
    "dependencies": [],
    "output": [
      {
        "data": {
          "css": {
            "code": "._R_BGG_container{background:red}",
            "functionMap": null,
            "lineCount": 1,
            "map": [],
          },
        },
        "type": "js/module",
      },
    ],
  },
}
`;

exports[`CSS Modules web transforms for dev, not minified 1`] = `
{
  "input": "module.exports=Object.assign({"container":"_R_BGG_container"},{unstable_styles:{"container":{"$$css":true,"_":"_R_BGG_container"}}}{});
(() => {
  if (typeof document === 'undefined') {
    return
  }
  const head = document.head || document.getElementsByTagName('head')[0];
  const style = document.createElement('style');
  style.setAttribute('data-expo-css-hmr', "acme_module_css");
  const previousStyle = document.querySelector('[data-expo-css-hmr="acme_module_css"]');
  if (previousStyle) {
    previousStyle.parentNode.removeChild(previousStyle);
  }
  style.setAttribute('data-expo-loader', 'css');
  head.appendChild(style);
  const css = \`._R_BGG_container {
  background: red;
}
\`;
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
})();",
  "output": {
    "dependencies": [],
    "output": [
      {
        "data": {
          "css": {
            "code": "._R_BGG_container {
  background: red;
}
",
            "functionMap": null,
            "lineCount": 4,
            "map": [],
          },
        },
        "type": "js/module",
      },
    ],
  },
}
`;

exports[`CSS Modules web transforms for prod, minified 1`] = `"module.exports=Object.assign({"container":"_R_BGG_container"},{unstable_styles:{"container":{"$$css":true,"_":"_R_BGG_container"}}}{});"`;

exports[`CSS Modules web transforms for prod, not minified 1`] = `"module.exports=Object.assign({"container":"_R_BGG_container"},{unstable_styles:{"container":{"$$css":true,"_":"_R_BGG_container"}}}{});"`;

exports[`transforms a global CSS file in dev for web 1`] = `
{
  "input": "(() => {
  if (typeof document === 'undefined') {
    return
  }
  const head = document.head || document.getElementsByTagName('head')[0];
  const style = document.createElement('style');
  style.setAttribute('data-expo-css-hmr', "acme_css");
  const previousStyle = document.querySelector('[data-expo-css-hmr="acme_css"]');
  if (previousStyle) {
    previousStyle.parentNode.removeChild(previousStyle);
  }
  style.setAttribute('data-expo-loader', 'css');
  head.appendChild(style);
  const css = \`body { background: red; }\`;
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
})();",
  "output": {
    "dependencies": [],
    "output": [
      {
        "data": {
          "css": {
            "code": "body {
  background: red;
}
",
            "functionMap": null,
            "lineCount": 4,
            "map": [],
          },
        },
        "type": "js/module",
      },
    ],
  },
}
`;
