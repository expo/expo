{"version":3,"file":"InAppPurchases.types.js","sourceRoot":"","sources":["../src/InAppPurchases.types.ts"],"names":[],"mappings":"AAuBA,cAAc;AACd,MAAM,CAAN,IAAY,eAkBX;AAlBD,WAAY,eAAe;IACzB;;OAEG;IACH,iDAAM,CAAA;IACN;;OAEG;IACH,uEAAiB,CAAA;IACjB;;OAEG;IACH,uDAAS,CAAA;IACT;;;OAGG;IACH,6DAAY,CAAA;AACd,CAAC,EAlBW,eAAe,KAAf,eAAe,QAkB1B;AAED,cAAc;AACd,MAAM,CAAN,IAAY,kBA2BX;AA3BD,WAAY,kBAAkB;IAC5B;;OAEG;IACH,uEAAc,CAAA;IACd;;OAEG;IACH,qEAAa,CAAA;IACb;;OAEG;IACH,+DAAU,CAAA;IACV;;;;OAIG;IACH,mEAAY,CAAA;IACZ;;;;;;OAMG;IACH,mEAAY,CAAA;AACd,CAAC,EA3BW,kBAAkB,KAAlB,kBAAkB,QA2B7B;AAED,cAAc;AACd;;;GAGG;AACH,MAAM,CAAN,IAAY,YAyEX;AAzED,WAAY,YAAY;IACtB;;OAEG;IACH,qDAAW,CAAA;IACX;;;;OAIG;IACH,qEAAmB,CAAA;IACnB;;OAEG;IACH,+EAAwB,CAAA;IACxB;;OAEG;IACH,6EAAuB,CAAA;IACvB;;;OAGG;IACH,qEAAmB,CAAA;IACnB;;;OAGG;IACH,6EAAuB,CAAA;IACvB;;;OAGG;IACH,uEAAoB,CAAA;IACpB;;;;OAIG;IACH,qEAAmB,CAAA;IACnB;;OAEG;IACH,2EAAsB,CAAA;IACtB;;OAEG;IACH,mEAAkB,CAAA;IAClB;;;;OAIG;IACH,kEAAkB,CAAA;IAClB;;;OAGG;IACH,oFAA2B,CAAA;IAC3B;;;OAGG;IACH,gFAAyB,CAAA;IACzB;;;OAGG;IACH,4EAAuB,CAAA;IACvB;;OAEG;IACH,oEAAmB,CAAA;AACrB,CAAC,EAzEW,YAAY,KAAZ,YAAY,QAyEvB;AAED,cAAc;AACd,MAAM,CAAN,IAAY,WASX;AATD,WAAY,WAAW;IACrB;;OAEG;IACH,qDAAY,CAAA;IACZ;;OAEG;IACH,6DAAgB,CAAA;AAClB,CAAC,EATW,WAAW,KAAX,WAAW,QAStB","sourcesContent":["export type QueryResult = InAppPurchase | IAPItemDetails;\n\n// @needsAudit\n/**\n * The response type for queries and purchases.\n */\nexport interface IAPQueryResponse<QueryResult> {\n  /**\n   * The response code from a query or purchase.\n   */\n  responseCode: IAPResponseCode;\n  /**\n   * The array containing the `InAppPurchase` or `IAPItemDetails` objects requested depending on\n   * the method.\n   */\n  results?: QueryResult[];\n  /**\n   * `IAPErrorCode` that provides more detail on why an error occurred. `null` unless `responseCode`\n   * is `IAPResponseCode.ERROR`.\n   */\n  errorCode?: IAPErrorCode;\n}\n\n// @needsAudit\nexport enum IAPResponseCode {\n  /**\n   * Response returned successfully.\n   */\n  OK = 0,\n  /**\n   * User canceled the purchase.\n   */\n  USER_CANCELED = 1,\n  /**\n   * An error occurred. Check the `errorCode` for additional details.\n   */\n  ERROR = 2,\n  /**\n   * Purchase was deferred.\n   * @platform ios\n   */\n  DEFERRED = 3,\n}\n\n// @needsAudit\nexport enum InAppPurchaseState {\n  /**\n   * The transaction is being processed.\n   */\n  PURCHASING = 0,\n  /**\n   * The App Store successfully processed payment.\n   */\n  PURCHASED = 1,\n  /**\n   * The transaction failed.\n   */\n  FAILED = 2,\n  /**\n   * This transaction restores content previously purchased by the user. Read the\n   * `originalTransaction` properties to obtain information about the original purchase.\n   * @platform ios\n   */\n  RESTORED = 3,\n  /**\n   * The transaction has been received, but its final status is pending external\n   * action such as the Ask to Buy feature where a child initiates a new purchase and has to wait\n   * for the family organizer's approval. Update your UI to show the deferred state, and wait for\n   * another callback that indicates the final status.\n   * @platform ios\n   */\n  DEFERRED = 4,\n}\n\n// @needsAudit\n/**\n * Abstracts over the Android [Billing Response Codes](https://developer.android.com/reference/com/android/billingclient/api/BillingClient.BillingResponseCode)\n * and iOS [SKErrorCodes](https://developer.apple.com/documentation/storekit/skerrorcode?language=objc).\n */\nexport enum IAPErrorCode {\n  /**\n   * An unknown or unexpected error occurred. See `SKErrorUnknown` on iOS, `ERROR` on Android.\n   */\n  UNKNOWN = 0,\n  /**\n   * The feature is not allowed on the current device, or the user is not authorized to make payments.\n   * See `SKErrorClientInvalid`, `SKErrorPaymentInvalid`, and `SKErrorPaymentNotAllowed` on iOS,\n   * `FEATURE_NOT_SUPPORTED` on Android.\n   */\n  PAYMENT_INVALID = 1,\n  /**\n   * Play Store service is not connected now. See `SERVICE_DISCONNECTED` on Android.\n   */\n  SERVICE_DISCONNECTED = 2,\n  /**\n   * Network connection is down. See `SERVICE_UNAVAILABLE` on Android.\n   */\n  SERVICE_UNAVAILABLE = 3,\n  /**\n   * The request has reached the maximum timeout before Google Play responds. See `SERVICE_TIMEOUT`\n   * on Android.\n   */\n  SERVICE_TIMEOUT = 4,\n  /**\n   * Billing API version is not supported for the type requested. See `BILLING_UNAVAILABLE` on\n   * Android.\n   */\n  BILLING_UNAVAILABLE = 5,\n  /**\n   * Requested product is not available for purchase. See `SKErrorStoreProductNotAvailable` on iOS,\n   * `ITEM_UNAVAILABLE` on Android.\n   */\n  ITEM_UNAVAILABLE = 6,\n  /**\n   * Invalid arguments provided to the API. This error can also indicate that the application was\n   * not correctly signed or properly set up for In-app Billing in Google Play. See `DEVELOPER_ERROR`\n   * on Android.\n   */\n  DEVELOPER_ERROR = 7,\n  /**\n   * Failure to purchase since item is already owned. See `ITEM_ALREADY_OWNED` on Android.\n   */\n  ITEM_ALREADY_OWNED = 8,\n  /**\n   * Failure to consume since item is not owned. See `ITEM_NOT_OWNED` on Android.\n   */\n  ITEM_NOT_OWNED = 9,\n  /**\n   * Apple Cloud Service connection failed or invalid permissions.\n   * See `SKErrorCloudServicePermissionDenied`, `SKErrorCloudServiceNetworkConnectionFailed` and\n   * `SKErrorCloudServiceRevoked` on iOS.\n   */\n  CLOUD_SERVICE = 10,\n  /**\n   * The user has not yet acknowledged Appleâ€™s privacy policy for Apple Music. See\n   * `SKErrorPrivacyAcknowledgementRequired` on iOS.\n   */\n  PRIVACY_UNACKNOWLEDGED = 11,\n  /**\n   * The app is attempting to use a property for which it does not have the required entitlement.\n   * See `SKErrorUnauthorizedRequestData` on iOS.\n   */\n  UNAUTHORIZED_REQUEST = 12,\n  /**\n   * The offer identifier or price specified in App Store Connect is no longer valid. See\n   * `SKErrorInvalidSignature`, `SKErrorInvalidOfferPrice`, `SKErrorInvalidOfferIdentifier` on iOS.\n   */\n  INVALID_IDENTIFIER = 13,\n  /**\n   * Parameters are missing in a payment discount. See `SKErrorMissingOfferParams` on iOS.\n   */\n  MISSING_PARAMS = 14,\n}\n\n// @needsAudit\nexport enum IAPItemType {\n  /**\n   * One time purchase or consumable.\n   */\n  PURCHASE = 0,\n  /**\n   * Subscription.\n   */\n  SUBSCRIPTION = 1,\n}\n\nexport interface InAppPurchase {\n  /**\n   * Boolean indicating whether this item has been \"acknowledged\" via `finishTransactionAsync`.\n   */\n  acknowledged: boolean;\n  /**\n   * The product ID representing an item inputted in Google Play Console and App Store Connect.\n   * @example `gold`\n   */\n  productId: string;\n  /**\n   * The state of the purchase.\n   */\n  purchaseState: InAppPurchaseState;\n  /**\n   * The time the product was purchased, in milliseconds since the epoch (Jan 1, 1970).\n   */\n  purchaseTime: number;\n  /**\n   * A string that uniquely identifies a successful payment transaction.\n   */\n  orderId: string;\n  /**\n   * The application package from which the purchase originated.\n   * @platform android\n   * @example `com.example.myapp`\n   */\n  packageName?: string;\n  /**\n   * A token that uniquely identifies a purchase for a given item and user pair.\n   * @platform android\n   */\n  purchaseToken?: string;\n  /**\n   * Represents the original order ID for restored purchases.\n   * @platform ios\n   */\n  originalOrderId?: string;\n  /**\n   * Represents the original purchase time for restored purchases.\n   * @platform ios\n   */\n  originalPurchaseTime?: string;\n  /**\n   * The App Store receipt found in the main bundle encoded as a Base64 String.\n   * @platform ios\n   */\n  transactionReceipt?: string;\n}\n\n// @needsAudit\n/**\n * Details about the purchasable item that you inputted in App Store Connect and Google Play Console.\n */\nexport interface IAPItemDetails {\n  /**\n   * User facing description about the item.\n   * @example `Currency used to trade for items in the game`\n   */\n  description: string;\n  /**\n   * The price formatted with the local currency symbol. Use this to display the price, not to make\n   * calculations.\n   * @example `$1.99`\n   */\n  price: string;\n  /**\n   * The price in micro-units, where 1,000,000 micro-units equal one unit of the currency. Use this\n   * for calculations.\n   * @example `1990000`\n   */\n  priceAmountMicros: number;\n  /**\n   * The local currency code from the ISO 4217 code list.\n   * @example `USD`, `CAN`, `RUB`\n   */\n  priceCurrencyCode: string;\n  /**\n   * The product ID representing an item inputted in App Store Connect and Google Play Console.\n   * @example `gold`\n   */\n  productId: string;\n  /**\n   * The title of the purchasable item. This should be displayed to the user and may be different\n   * from the `productId`.\n   * @example `Gold Coin`\n   */\n  title: string;\n  /**\n   * The type of the purchase. Note that this is not very accurate on iOS as this data is only\n   * available on iOS 11.2 and higher and non-renewable subscriptions always return\n   * `IAPItemType.PURCHASE`.\n   */\n  type: IAPItemType;\n  /**\n   * The length of a subscription period specified in ISO 8601 format. In-app purchases return `P0D`.\n   * On iOS, non-renewable subscriptions also return `P0D`.\n   * @example `P0D`, `P6W`, `P3M`, `P6M`, `P1Y`\n   */\n  subscriptionPeriod?: string;\n}\n\n// @needsAudit\nexport type IAPPurchaseHistoryOptions = {\n  /**\n   * A boolean that indicates whether or not you want to make a network request\n   * to sync expired/consumed purchases and those on other devices.\n   *\n   * - If set to `true`, this method returns purchase details **only** for the user's currently\n   *   owned items (active subscriptions and non-consumed one-time purchases). If set to `false`, it\n   *   will make a network request and return the most recent purchase made by the user for each\n   *   product, even if that purchase is expired, canceled, or consumed.\n   * - The return type if this is `false` is actually a subset of when it's `true`. This is because\n   *   Android returns a [`PurchaseHistoryRecord`](https://developer.android.com/reference/com/android/billingclient/api/PurchaseHistoryRecord)\n   *   which only contains the purchase time, purchase token, and product ID, rather than all of the\n   *   attributes found in the [`InAppPurchase`](#inapppurchase) type.\n   *\n   * @platform android\n   * @default true\n   */\n  useGooglePlayCache: boolean;\n};\n\n/**\n * The `purchaseItemAsync` billing context on Android.\n * @platform android\n */\nexport interface IAPPurchaseItemOptions {\n  /**\n   * The `purchaseToken` of the purchase that the user is upgrading or downgrading from.\n   * This is mandatory for replacing an old subscription such as when a user\n   * upgrades from a monthly subscription to a yearly one that provides the same content. You can\n   * get the purchase token from [`getPurchaseHistoryAsync`](#inapppurchasesgetpurchasehistoryasyncoptions).\n   */\n  oldPurchaseToken?: string;\n  /**\n   * Account identifiers, both need to be provided to work with Google Play Store.\n   */\n  accountIdentifiers?: {\n    /**\n     * The obfuscated account id of the user's Google Play account.\n     */\n    obfuscatedAccountId: string;\n    /**\n     * The obfuscated profile id of the user's Google Play account.\n     */\n    obfuscatedProfileId: string;\n  };\n  /**\n   * Whether the purchase is happening in a VR context.\n   */\n  isVrPurchaseFlow?: boolean;\n}\n"]}