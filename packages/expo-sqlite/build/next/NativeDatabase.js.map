{"version":3,"file":"NativeDatabase.js","sourceRoot":"","sources":["../../src/next/NativeDatabase.ts"],"names":[],"mappings":"","sourcesContent":["import { NativeStatement } from './NativeStatement';\n\n/**\n * A class that represents an instance of the SQLite database.\n */\nexport declare class NativeDatabase {\n  constructor(databaseName: string, options?: SQLiteOpenOptions);\n\n  //#region Asynchronous API\n\n  public initAsync(): Promise<void>;\n  public isInTransactionAsync(): Promise<boolean>;\n  public closeAsync(): Promise<void>;\n  public execAsync(source: string): Promise<void>;\n  public prepareAsync(nativeStatement: NativeStatement, source: string): Promise<NativeStatement>;\n\n  //#endregion\n\n  //#region Synchronous API\n\n  public initSync(): void;\n  public isInTransactionSync(): boolean;\n  public closeSync(): void;\n  public execSync(source: string): void;\n  public prepareSync(nativeStatement: NativeStatement, source: string): NativeStatement;\n\n  //#endregion\n}\n\n/**\n * Options for opening a database.\n */\nexport interface SQLiteOpenOptions {\n  /**\n   * Whether to enable the CR-SQLite extension.\n   * @default false\n   */\n  enableCRSQLite?: boolean;\n\n  /**\n   * Whether to call the [`sqlite3_update_hook()`](https://www.sqlite.org/c3ref/update_hook.html) function and enable the `onDatabaseChange` events. You can later subscribe to the change events by [`addDatabaseChangeListener`](#sqliteadddatabasechangelistenerlistener).\n   * @default false\n   */\n  enableChangeListener?: boolean;\n\n  /**\n   * Whether to create new connection even if connection with the same database name exists in cache.\n   * @default false\n   */\n  useNewConnection?: boolean;\n\n  /**\n   * Finalized unclosed statements automatically when the database is closed.\n   * @default true\n   * @hidden\n   */\n  finalizeUnusedStatementsBeforeClosing?: boolean;\n}\n"]}