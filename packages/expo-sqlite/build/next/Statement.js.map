{"version":3,"file":"Statement.js","sourceRoot":"","sources":["../../src/next/Statement.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeDatabase } from './NativeDatabase';\nimport {\n  BindBlobParams,\n  BindParams,\n  BindPrimitiveParams,\n  BindValue,\n  NativeStatement,\n  RunResult,\n  VariadicBindParams,\n  type ColumnNames,\n  type ColumnValues,\n} from './NativeStatement';\n\nexport { BindParams, BindValue, RunResult, VariadicBindParams };\n\n/**\n * A prepared statement returned by [`Database.prepareAsync()`](#prepareasyncsource) or [`Database.prepareSync()`](#preparesyncsource) that can be binded with parameters and executed.\n */\nexport class Statement {\n  constructor(\n    private readonly nativeDatabase: NativeDatabase,\n    private readonly nativeStatement: NativeStatement\n  ) {}\n\n  //#region Asynchronous API\n\n  /**\n   * Run the prepared statement and return the result.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`BindValue`](#bindvalue) for more information about binding values.\n   */\n  public runAsync(params: BindParams): Promise<RunResult>;\n  /**\n   * @hidden\n   */\n  public runAsync(...params: VariadicBindParams): Promise<RunResult>;\n  public async runAsync(...params: unknown[]): Promise<RunResult> {\n    return await this.nativeStatement.runAsync(this.nativeDatabase, ...normalizeParams(...params));\n  }\n\n  /**\n   * Iterate the prepared statement and return results as an async iterable.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`BindValue`](#bindvalue) for more information about binding values.\n   * @example\n   * ```ts\n   * const statement = await db.prepareAsync('SELECT * FROM test');\n   * for await (const row of statement.eachAsync<any>()) {\n   *   console.log(row);\n   * }\n   * await statement.finalizeAsync();\n   * ```\n   */\n  public eachAsync<T>(params: BindParams): AsyncIterableIterator<T>;\n  /**\n   * @hidden\n   */\n  public eachAsync<T>(...params: VariadicBindParams): AsyncIterableIterator<T>;\n  public async *eachAsync<T>(...params: unknown[]): AsyncIterableIterator<T> {\n    const paramTuple = normalizeParams(...params);\n    const func = this.nativeStatement.getAsync.bind(this.nativeStatement);\n\n    const columnNames = await this.getColumnNamesAsync();\n    let result = null;\n    do {\n      result = await func(this.nativeDatabase, ...paramTuple);\n      if (result != null) {\n        yield composeRow<T>(columnNames, result);\n      }\n    } while (result != null);\n  }\n\n  /**\n   * Get one row from the prepared statement.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`BindValue`](#bindvalue) for more information about binding values.\n   */\n  public getAsync<T>(params: BindParams): Promise<T | null>;\n  /**\n   * @hidden\n   */\n  public getAsync<T>(...params: VariadicBindParams): Promise<T | null>;\n  public async getAsync<T>(...params: unknown[]): Promise<T | null> {\n    const columnNames = await this.getColumnNamesAsync();\n    const columnValues = await this.nativeStatement.getAsync(\n      this.nativeDatabase,\n      ...normalizeParams(...params)\n    );\n    return columnValues != null ? composeRow<T>(columnNames, columnValues) : null;\n  }\n\n  /**\n   * Get all rows from the prepared statement.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`BindValue`](#bindvalue) for more information about binding values.\n   */\n  public allAsync<T>(params: BindParams): Promise<T[]>;\n  /**\n   * @hidden\n   */\n  public allAsync<T>(...params: VariadicBindParams): Promise<T[]>;\n  public async allAsync<T>(...params: unknown[]): Promise<T[]> {\n    const columnNames = await this.getColumnNamesAsync();\n    const columnValuesList = await this.nativeStatement.getAllAsync(\n      this.nativeDatabase,\n      ...normalizeParams(...params)\n    );\n    return composeRows<T>(columnNames, columnValuesList);\n  }\n\n  /**\n   * Get the column names of the prepared statement.\n   */\n  public getColumnNamesAsync(): Promise<string[]> {\n    return this.nativeStatement.getColumnNamesAsync();\n  }\n\n  /**\n   * Reset the prepared statement cursor.\n   */\n  public async resetAsync(): Promise<void> {\n    await this.nativeStatement.resetAsync(this.nativeDatabase);\n  }\n\n  /**\n   * Finalize the prepared statement.\n   * > **Note:** Remember to finalize the prepared statement whenever you call `prepareAsync()` to avoid resource leaks.\n   */\n  public async finalizeAsync(): Promise<void> {\n    await this.nativeStatement.finalizeAsync(this.nativeDatabase);\n  }\n\n  //#endregion\n\n  //#region Synchronous API\n\n  /**\n   * Run the prepared statement and return the result.\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`BindValue`](#bindvalue) for more information about binding values.\n   */\n  public runSync(params: BindParams): RunResult;\n  /**\n   * @hidden\n   */\n  public runSync(...params: VariadicBindParams): RunResult;\n  public runSync(...params: unknown[]): RunResult {\n    return this.nativeStatement.runSync(this.nativeDatabase, ...normalizeParams(...params));\n  }\n\n  /**\n   * Iterate the prepared statement and return results as an iterable.\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`BindValue`](#bindvalue) for more information about binding values.\n   */\n  public eachSync<T>(params: BindParams): IterableIterator<T>;\n  /**\n   * @hidden\n   */\n  public eachSync<T>(...params: VariadicBindParams): IterableIterator<T>;\n  public *eachSync<T>(...params: unknown[]): IterableIterator<T> {\n    const paramTuple = normalizeParams(...params);\n    const func = this.nativeStatement.getSync.bind(this.nativeStatement);\n\n    const columnNames = this.getColumnNamesSync();\n    let result = null;\n    do {\n      result = func(this.nativeDatabase, ...paramTuple);\n      if (result != null) {\n        yield composeRow<T>(columnNames, result);\n      }\n    } while (result != null);\n  }\n\n  /**\n   * Get one row from the prepared statement.\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`BindValue`](#bindvalue) for more information about binding values.\n   */\n  public getSync<T>(params: BindParams): T | null;\n  /**\n   * @hidden\n   */\n  public getSync<T>(...params: VariadicBindParams): T | null;\n  public getSync<T>(...params: unknown[]): T | null {\n    const columnNames = this.getColumnNamesSync();\n    const columnValues = this.nativeStatement.getSync(\n      this.nativeDatabase,\n      ...normalizeParams(...params)\n    );\n    return columnValues != null ? composeRow<T>(columnNames, columnValues) : null;\n  }\n\n  /**\n   * Get all rows from the prepared statement.\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`BindValue`](#bindvalue) for more information about binding values.\n   */\n  public allSync<T>(params: BindParams): T[];\n  /**\n   * @hidden\n   */\n  public allSync<T>(...params: VariadicBindParams): T[];\n  public allSync<T>(...params: unknown[]): T[] {\n    const columnNames = this.getColumnNamesSync();\n    const columnValuesList = this.nativeStatement.getAllSync(\n      this.nativeDatabase,\n      ...normalizeParams(...params)\n    );\n    return composeRows<T>(columnNames, columnValuesList);\n  }\n\n  /**\n   * Get the column names of the prepared statement.\n   */\n  public getColumnNamesSync(): string[] {\n    return this.nativeStatement.getColumnNamesSync();\n  }\n\n  /**\n   * Reset the prepared statement cursor.\n   */\n  public resetSync(): void {\n    this.nativeStatement.resetSync(this.nativeDatabase);\n  }\n\n  /**\n   * Finalize the prepared statement.\n   *\n   * > **Note:** Remember to finalize the prepared statement whenever you call `prepareSync()` to avoid resource leaks.\n   *\n   */\n  public finalizeSync(): void {\n    this.nativeStatement.finalizeSync(this.nativeDatabase);\n  }\n\n  //#endregion\n}\n\n/**\n * Normalize the bind params to data structure that can be passed to native module.\n * The data structure is a tuple of [primitiveParams, blobParams, shouldPassAsArray].\n * @hidden\n */\nexport function normalizeParams(...params: any[]): [BindPrimitiveParams, BindBlobParams, boolean] {\n  let bindParams = params.length > 1 ? params : (params[0] as BindParams);\n  if (bindParams == null) {\n    bindParams = [];\n  }\n  if (\n    typeof bindParams !== 'object' ||\n    bindParams instanceof ArrayBuffer ||\n    ArrayBuffer.isView(bindParams)\n  ) {\n    bindParams = [bindParams];\n  }\n  const shouldPassAsArray = Array.isArray(bindParams);\n  if (Array.isArray(bindParams)) {\n    bindParams = bindParams.reduce<Record<string, BindValue>>((acc, value, index) => {\n      acc[index] = value;\n      return acc;\n    }, {});\n  }\n\n  const primitiveParams: BindPrimitiveParams = {};\n  const blobParams: BindBlobParams = {};\n  for (const key in bindParams) {\n    const value = bindParams[key];\n    if (value instanceof Uint8Array) {\n      blobParams[key] = value;\n    } else {\n      primitiveParams[key] = value;\n    }\n  }\n\n  return [primitiveParams, blobParams, shouldPassAsArray];\n}\n\n/**\n * Compose `columnNames` and `columnValues` to an row object.\n * @hidden\n */\nexport function composeRow<T>(columnNames: ColumnNames, columnValues: ColumnValues): T {\n  const row = {};\n  if (columnNames.length !== columnValues.length) {\n    throw new Error(\n      `Column names and values count mismatch. Names: ${columnNames.length}, Values: ${columnValues.length}`\n    );\n  }\n  for (let i = 0; i < columnNames.length; i++) {\n    row[columnNames[i]] = columnValues[i];\n  }\n  return row as T;\n}\n\n/**\n * Compose `columnNames` and `columnValuesList` to an array of row objects.\n * @hidden\n */\nexport function composeRows<T>(columnNames: ColumnNames, columnValuesList: ColumnValues[]): T[] {\n  if (columnValuesList.length === 0) {\n    return [];\n  }\n  if (columnNames.length !== columnValuesList[0].length) {\n    // We only check the first row because SQLite returns the same column count for all rows.\n    throw new Error(\n      `Column names and values count mismatch. Names: ${columnNames.length}, Values: ${columnValuesList[0].length}`\n    );\n  }\n  const results: T[] = [];\n  for (const columnValues of columnValuesList) {\n    const row = {};\n    for (let i = 0; i < columnNames.length; i++) {\n      row[columnNames[i]] = columnValues[i];\n    }\n    results.push(row as T);\n  }\n  return results;\n}\n"]}