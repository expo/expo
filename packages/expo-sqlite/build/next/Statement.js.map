{"version":3,"file":"Statement.js","sourceRoot":"","sources":["../../src/next/Statement.ts"],"names":[],"mappings":"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","sourcesContent":["import { NativeDatabase } from './NativeDatabase';\nimport {\n  BindParams,\n  BindValue,\n  NativeStatement,\n  RunResult,\n  VariadicBindParams,\n} from './NativeStatement';\n\nexport { BindParams, BindValue, RunResult, VariadicBindParams };\n\n/**\n * A prepared statement returned by `Database.prepareAsync()` that can be binded with parameters and executed.\n */\nexport class Statement {\n  constructor(\n    private readonly nativeDatabase: NativeDatabase,\n    private readonly nativeStatement: NativeStatement\n  ) {}\n\n  //#region Asynchronous API\n\n  /**\n   * Run the prepared statement and return the result.\n   *\n   * @param params @see `BindParams`\n   */\n  public runAsync(...params: VariadicBindParams): Promise<RunResult>;\n  public runAsync(params: BindParams): Promise<RunResult>;\n  public async runAsync(...params: unknown[]): Promise<RunResult> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return await this.nativeStatement.objectRunAsync(this.nativeDatabase, bindParams);\n    } else {\n      return await this.nativeStatement.arrayRunAsync(this.nativeDatabase, bindParams);\n    }\n  }\n\n  /**\n   * Iterate the prepared statement and return results as an async iterable.\n   *\n   * @param params @see `BindParams`\n   *\n   * @example\n   * ```ts\n   * const statement = await db.prepareAsync('SELECT * FROM test');\n   * for await (const row of statement.eachAsync<any>()) {\n   *   console.log(row);\n   * }\n   * ```\n   */\n  public eachAsync<T>(...params: VariadicBindParams): AsyncIterableIterator<T>;\n  public eachAsync<T>(params: BindParams): AsyncIterableIterator<T>;\n  public async *eachAsync<T>(...params: unknown[]): AsyncIterableIterator<T> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    const func = shouldPassAsObject\n      ? this.nativeStatement.objectGetAsync.bind(this.nativeStatement)\n      : this.nativeStatement.arrayGetAsync.bind(this.nativeStatement);\n\n    let result: T | null = null;\n    do {\n      result = await func(this.nativeDatabase, bindParams);\n      if (result != null) {\n        yield result;\n      }\n    } while (result != null);\n  }\n\n  /**\n   * Get one row from the prepared statement.\n   *\n   * @param params @see `BindParams`\n   */\n  public getAsync<T>(...params: VariadicBindParams): Promise<T | null>;\n  public getAsync<T>(params: BindParams): Promise<T | null>;\n  public async getAsync<T>(...params: unknown[]): Promise<T | null> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return (await this.nativeStatement.objectGetAsync(this.nativeDatabase, bindParams)) ?? null;\n    } else {\n      return (await this.nativeStatement.arrayGetAsync(this.nativeDatabase, bindParams)) ?? null;\n    }\n  }\n\n  /**\n   * Get all rows from the prepared statement.\n   *\n   * @param params @see `BindParams`\n   */\n  public allAsync<T>(...params: VariadicBindParams): Promise<T[]>;\n  public allAsync<T>(params: BindParams): Promise<T[]>;\n  public async allAsync<T>(...params: unknown[]): Promise<T[]> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return await this.nativeStatement.objectGetAllAsync(this.nativeDatabase, bindParams);\n    } else {\n      return await this.nativeStatement.arrayGetAllAsync(this.nativeDatabase, bindParams);\n    }\n  }\n\n  /**\n   * Reset the prepared statement cursor.\n   */\n  public async resetAsync(): Promise<void> {\n    await this.nativeStatement.resetAsync(this.nativeDatabase);\n  }\n\n  /**\n   * Finalize the prepared statement.\n   * > **Note:** Remember to finalize the prepared statement whenever you call `prepareAsync()` to avoid resource leaks.\n   */\n  public async finalizeAsync(): Promise<void> {\n    await this.nativeStatement.finalizeAsync(this.nativeDatabase);\n  }\n\n  //#endregion\n\n  //#region Synchronous API\n\n  /**\n   * Run the prepared statement and return the result.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance.\n   *\n   * @param params @see `BindParams`\n   */\n  public runSync(...params: VariadicBindParams): RunResult;\n  public runSync(params: BindParams): RunResult;\n  public runSync(...params: unknown[]): RunResult {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return this.nativeStatement.objectRunSync(this.nativeDatabase, bindParams);\n    } else {\n      return this.nativeStatement.arrayRunSync(this.nativeDatabase, bindParams);\n    }\n  }\n\n  /**\n   * Iterate the prepared statement and return results as an iterable.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance.\n   *\n   * @param params @see `BindParams`\n   *\n   * @example\n   * ```ts\n   * const statement = await db.prepareSync('SELECT * FROM test');\n   * for (const row of statement.eachSync<any>()) {\n   *   console.log(row);\n   * }\n   * ```\n   */\n  public eachSync<T>(...params: VariadicBindParams): IterableIterator<T>;\n  public eachSync<T>(params: BindParams): IterableIterator<T>;\n  public *eachSync<T>(...params: unknown[]): IterableIterator<T> {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    const func = shouldPassAsObject\n      ? this.nativeStatement.objectGetSync.bind(this.nativeStatement)\n      : this.nativeStatement.arrayGetSync.bind(this.nativeStatement);\n\n    let result: T | null = null;\n    do {\n      result = func(this.nativeDatabase, bindParams);\n      if (result != null) {\n        yield result;\n      }\n    } while (result != null);\n  }\n\n  /**\n   * Get one row from the prepared statement.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance.\n   *\n   * @param params @see `BindParams`\n   */\n  public getSync<T>(...params: VariadicBindParams): T | null;\n  public getSync<T>(params: BindParams): T | null;\n  public getSync<T>(...params: unknown[]): T | null {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return this.nativeStatement.objectGetSync(this.nativeDatabase, bindParams) ?? null;\n    } else {\n      return this.nativeStatement.arrayGetSync(this.nativeDatabase, bindParams) ?? null;\n    }\n  }\n\n  /**\n   * Get all rows from the prepared statement.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread, affecting performance.\n   *\n   * @param params @see `BindParams`\n   */\n  public allSync<T>(...params: VariadicBindParams): T[];\n  public allSync<T>(params: BindParams): T[];\n  public allSync<T>(...params: unknown[]): T[] {\n    const { params: bindParams, shouldPassAsObject } = normalizeParams(...params);\n    if (shouldPassAsObject) {\n      return this.nativeStatement.objectGetAllSync(this.nativeDatabase, bindParams);\n    } else {\n      return this.nativeStatement.arrayGetAllSync(this.nativeDatabase, bindParams);\n    }\n  }\n\n  /**\n   * Reset the prepared statement cursor.\n   */\n  public resetSync(): void {\n    this.nativeStatement.resetSync(this.nativeDatabase);\n  }\n\n  /**\n   * Finalize the prepared statement.\n   *\n   * > **Note:** Remember to finalize the prepared statement whenever you call `prepareSync()` to avoid resource leaks.\n   *\n   */\n  public finalizeSync(): void {\n    this.nativeStatement.finalizeSync(this.nativeDatabase);\n  }\n\n  //#endregion\n}\n\n/**\n * Normalize the bind params to an array or object.\n * @hidden\n */\nexport function normalizeParams(...params: any[]): {\n  params: BindParams;\n  shouldPassAsObject: boolean;\n} {\n  let bindParams = params.length > 1 ? params : (params[0] as BindParams);\n  if (bindParams == null) {\n    bindParams = [];\n  }\n  if (typeof bindParams !== 'object') {\n    bindParams = [bindParams];\n  }\n  const shouldPassAsObject = !Array.isArray(bindParams);\n  return {\n    params: bindParams,\n    shouldPassAsObject,\n  };\n}\n"]}