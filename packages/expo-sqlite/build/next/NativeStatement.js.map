{"version":3,"file":"NativeStatement.js","sourceRoot":"","sources":["../../src/next/NativeStatement.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Result of a `runAsync` call.\n */\nexport interface RunResult {\n  /**\n   * The last inserted row ID.\n   */\n  lastInsertRowid: number;\n\n  /**\n   * The number of rows affected.\n   */\n  changes: number;\n}\n\n/**\n * Bind parameters to the prepared statement.\n * You can either pass the parameters in the following forms:\n *\n * @example\n * - Variadic arguments for unnamed parameters.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\n * await statement.getAsync('test1', 789);\n * ```\n *\n * @example\n * - A single array for unnamed parameters.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\n * await statement.getAsync(['test1', 789]);\n * ```\n *\n * @example\n * - A single object for [named parameters](https://www.sqlite.org/lang_expr.html)\n *\n *   Through we support multiple named parameter forms like `:VVV`, `@VVV`, and `$VVV`. We recommend using `$VVV` because JavaScript allows using `$` in identifiers without escaping.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = $value AND intValue = $intValue');\n * await statement.getAsync({ $value: 'test1', $intValue: 789 });\n * ```\n */\nexport type BindValue = string | number | null | boolean;\nexport type BindParams = Record<string, BindValue> | BindValue[];\nexport type VariadicBindParams = BindValue[];\n\ntype Row = any;\ntype AnyDatabase = any;\n\n/**\n * A class that represents an instance of the SQLite statement.\n */\nexport declare class NativeStatement {\n  //#region Asynchronous API\n\n  public arrayRunAsync(database: AnyDatabase, params: BindParams): Promise<RunResult>;\n  public objectRunAsync(database: AnyDatabase, params: BindParams): Promise<RunResult>;\n\n  public arrayGetAsync(database: AnyDatabase, params: BindParams): Promise<Row | null>;\n  public objectGetAsync(database: AnyDatabase, params: BindParams): Promise<Row | null>;\n\n  public arrayGetAllAsync(database: AnyDatabase, params: BindParams): Promise<Row[]>;\n  public objectGetAllAsync(database: AnyDatabase, params: BindParams): Promise<Row[]>;\n\n  public resetAsync(database: AnyDatabase): Promise<void>;\n  public finalizeAsync(database: AnyDatabase): Promise<void>;\n\n  //#endregion\n\n  //#region Synchronous API\n\n  public arrayRunSync(database: AnyDatabase, params: BindParams): RunResult;\n  public objectRunSync(database: AnyDatabase, params: BindParams): RunResult;\n\n  public arrayGetSync(database: AnyDatabase, params: BindParams): Row | null;\n  public objectGetSync(database: AnyDatabase, params: BindParams): Row | null;\n\n  public arrayGetAllSync(database: AnyDatabase, params: BindParams): Row[];\n  public objectGetAllSync(database: AnyDatabase, params: BindParams): Row[];\n\n  public resetSync(database: AnyDatabase): void;\n  public finalizeSync(database: AnyDatabase): void;\n\n  //#endregion\n}\n"]}