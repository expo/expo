{"version":3,"file":"NativeStatement.js","sourceRoot":"","sources":["../../src/next/NativeStatement.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Result of a `runAsync` call.\n */\nexport interface RunResult {\n  /**\n   * The last inserted row ID.\n   */\n  lastInsertRowid: number;\n\n  /**\n   * The number of rows affected.\n   */\n  changes: number;\n}\n\n/**\n * Bind parameters to the prepared statement.\n * You can either pass the parameters in the following forms:\n *\n * @example\n * - A single array for unnamed parameters.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\n * await statement.getAsync(['test1', 789]);\n * ```\n *\n * @example\n * - Variadic arguments for unnamed parameters.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\n * await statement.getAsync('test1', 789);\n * ```\n *\n * @example\n * - A single object for [named parameters](https://www.sqlite.org/lang_expr.html)\n *\n * We support multiple named parameter forms such as `:VVV`, `@VVV`, and `$VVV`. We recommend using `$VVV` because JavaScript allows using `$` in identifiers without escaping.\n * ```ts\n * const statement = await db.prepareAsync('SELECT * FROM test WHERE value = $value AND intValue = $intValue');\n * await statement.getAsync({ $value: 'test1', $intValue: 789 });\n * ```\n */\nexport type BindValue = string | number | null | boolean | Uint8Array;\nexport type BindParams = Record<string, BindValue> | BindValue[];\nexport type VariadicBindParams = BindValue[];\n\nexport type BindPrimitiveParams = Record<string, Exclude<BindValue, Uint8Array>>;\nexport type BindBlobParams = Record<string, Uint8Array>;\nexport type ColumnNames = string[];\nexport type ColumnValues = any[];\ntype AnyDatabase = any;\n\n/**\n * A class that represents an instance of the SQLite statement.\n */\nexport declare class NativeStatement {\n  //#region Asynchronous API\n\n  public runAsync(\n    database: AnyDatabase,\n    bindParams: BindPrimitiveParams,\n    bindBlobParams: BindBlobParams,\n    shouldPassAsArray: boolean\n  ): Promise<RunResult>;\n  public getAsync(\n    database: AnyDatabase,\n    bindParams: BindPrimitiveParams,\n    bindBlobParams: BindBlobParams,\n    shouldPassAsArray: boolean\n  ): Promise<ColumnValues | null | undefined>;\n  public getAllAsync(\n    database: AnyDatabase,\n    bindParams: BindPrimitiveParams,\n    bindBlobParams: BindBlobParams,\n    shouldPassAsArray: boolean\n  ): Promise<ColumnValues[]>;\n  public getColumnNamesAsync(): Promise<ColumnNames>;\n\n  public resetAsync(database: AnyDatabase): Promise<void>;\n  public finalizeAsync(database: AnyDatabase): Promise<void>;\n\n  //#endregion\n\n  //#region Synchronous API\n\n  public runSync(\n    database: AnyDatabase,\n    bindParams: BindPrimitiveParams,\n    bindBlobParams: BindBlobParams,\n    shouldPassAsArray: boolean\n  ): RunResult;\n  public getSync(\n    database: AnyDatabase,\n    bindParams: BindPrimitiveParams,\n    bindBlobParams: BindBlobParams,\n    shouldPassAsArray: boolean\n  ): ColumnValues | null | undefined;\n  public getAllSync(\n    database: AnyDatabase,\n    bindParams: BindPrimitiveParams,\n    bindBlobParams: BindBlobParams,\n    shouldPassAsArray: boolean\n  ): ColumnValues[];\n  public getColumnNamesSync(): string[];\n\n  public resetSync(database: AnyDatabase): void;\n  public finalizeSync(database: AnyDatabase): void;\n\n  //#endregion\n}\n"]}