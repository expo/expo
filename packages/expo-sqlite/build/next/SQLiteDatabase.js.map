{"version":3,"file":"SQLiteDatabase.js","sourceRoot":"","sources":["../../src/next/SQLiteDatabase.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter, Subscription } from 'expo-modules-core';\n\nimport ExpoSQLite from './ExpoSQLiteNext';\nimport { NativeDatabase, SQLiteOpenOptions } from './NativeDatabase';\nimport {\n  SQLiteBindParams,\n  SQLiteExecuteAsyncResult,\n  SQLiteExecuteSyncResult,\n  SQLiteRunResult,\n  SQLiteStatement,\n  SQLiteVariadicBindParams,\n} from './SQLiteStatement';\n\nexport { SQLiteOpenOptions };\n\nconst emitter = new EventEmitter(ExpoSQLite);\n\n/**\n * A SQLite database.\n */\nexport class SQLiteDatabase {\n  constructor(\n    public readonly databaseName: string,\n    public readonly options: SQLiteOpenOptions,\n    private readonly nativeDatabase: NativeDatabase\n  ) {}\n\n  /**\n   * Asynchronous call to return whether the database is currently in a transaction.\n   */\n  public isInTransactionAsync(): Promise<boolean> {\n    return this.nativeDatabase.isInTransactionAsync();\n  }\n\n  /**\n   * Close the database.\n   */\n  public closeAsync(): Promise<void> {\n    return this.nativeDatabase.closeAsync();\n  }\n\n  /**\n   * Execute all SQL queries in the supplied string.\n   * > Note: The queries are not escaped for you! Be careful when constructing your queries.\n   *\n   * @param source A string containing all the SQL queries.\n   */\n  public execAsync(source: string): Promise<void> {\n    return this.nativeDatabase.execAsync(source);\n  }\n\n  /**\n   * Create a [prepared SQLite statement](https://www.sqlite.org/c3ref/prepare.html).\n   *\n   * @param source A string containing the SQL query.\n   */\n  public async prepareAsync(source: string): Promise<SQLiteStatement> {\n    const nativeStatement = new ExpoSQLite.NativeStatement();\n    await this.nativeDatabase.prepareAsync(nativeStatement, source);\n    return new SQLiteStatement(this.nativeDatabase, nativeStatement);\n  }\n\n  /**\n   * Execute a transaction and automatically commit/rollback based on the `task` result.\n   *\n   * > **Note:** This transaction is not exclusive and can be interrupted by other async queries.\n   * @example\n   * ```ts\n   * db.withTransactionAsync(async () => {\n   *   await db.execAsync('UPDATE test SET name = \"aaa\"');\n   *\n   *   //\n   *   // We cannot control the order of async/await order, so order of execution is not guaranteed.\n   *   // The following UPDATE query out of transaction may be executed here and break the expectation.\n   *   //\n   *\n   *   const result = await db.getAsync<{ name: string }>('SELECT name FROM Users');\n   *   expect(result?.name).toBe('aaa');\n   * });\n   * db.execAsync('UPDATE test SET name = \"bbb\"');\n   * ```\n   * If you worry about the order of execution, use `withExclusiveTransactionAsync` instead.\n   *\n   * @param task An async function to execute within a transaction.\n   */\n  public async withTransactionAsync(task: () => Promise<void>): Promise<void> {\n    try {\n      await this.execAsync('BEGIN');\n      await task();\n      await this.execAsync('COMMIT');\n    } catch (e) {\n      await this.execAsync('ROLLBACK');\n      throw e;\n    }\n  }\n\n  /**\n   * Execute a transaction and automatically commit/rollback based on the `task` result.\n   *\n   * The transaction may be exclusive.\n   * As long as the transaction is converted into a write transaction,\n   * the other async write queries will abort with `database is locked` error.\n   *\n   * @param task An async function to execute within a transaction. Any queries inside the transaction must be executed on the `txn` object.\n   * The `txn` object has the same interfaces as the [`SQLiteDatabase`](#sqlitedatabase) object. You can use `txn` like a [`SQLiteDatabase`](#sqlitedatabase) object.\n   *\n   * @example\n   * ```ts\n   * db.withExclusiveTransactionAsync(async (txn) => {\n   *   await txn.execAsync('UPDATE test SET name = \"aaa\"');\n   * });\n   * ```\n   */\n  public async withExclusiveTransactionAsync(\n    task: (txn: Transaction) => Promise<void>\n  ): Promise<void> {\n    const transaction = await Transaction.createAsync(this);\n    let error;\n    try {\n      await transaction.execAsync('BEGIN');\n      await task(transaction);\n      await transaction.execAsync('COMMIT');\n    } catch (e) {\n      await transaction.execAsync('ROLLBACK');\n      error = e;\n    } finally {\n      await transaction.closeAsync();\n    }\n    if (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Synchronous call to return whether the database is currently in a transaction.\n   */\n  public isInTransactionSync(): boolean {\n    return this.nativeDatabase.isInTransactionSync();\n  }\n\n  /**\n   * Close the database.\n   */\n  public closeSync(): void {\n    return this.nativeDatabase.closeSync();\n  }\n\n  /**\n   * Execute all SQL queries in the supplied string.\n   *\n   * > **Note:** The queries are not escaped for you! Be careful when constructing your queries.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   *\n   * @param source A string containing all the SQL queries.\n   */\n  public execSync(source: string): void {\n    return this.nativeDatabase.execSync(source);\n  }\n\n  /**\n   * Create a [prepared SQLite statement](https://www.sqlite.org/c3ref/prepare.html).\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   *\n   * @param source A string containing the SQL query.\n   */\n  public prepareSync(source: string): SQLiteStatement {\n    const nativeStatement = new ExpoSQLite.NativeStatement();\n    this.nativeDatabase.prepareSync(nativeStatement, source);\n    return new SQLiteStatement(this.nativeDatabase, nativeStatement);\n  }\n\n  /**\n   * Execute a transaction and automatically commit/rollback based on the `task` result.\n   *\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   *\n   * @param task An async function to execute within a transaction.\n   */\n  public withTransactionSync(task: () => void): void {\n    try {\n      this.execSync('BEGIN');\n      task();\n      this.execSync('COMMIT');\n    } catch (e) {\n      this.execSync('ROLLBACK');\n      throw e;\n    }\n  }\n\n  //#region Statement API shorthands\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public runAsync(source: string, params: SQLiteBindParams): Promise<SQLiteRunResult>;\n\n  /**\n   * @hidden\n   */\n  public runAsync(source: string, ...params: SQLiteVariadicBindParams): Promise<SQLiteRunResult>;\n  public async runAsync(source: string, ...params: any[]): Promise<SQLiteRunResult> {\n    const statement = await this.prepareAsync(source);\n    let result: SQLiteExecuteAsyncResult<unknown>;\n    try {\n      result = await statement.executeAsync(...params);\n    } finally {\n      await statement.finalizeAsync();\n    }\n    return result;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), [`SQLiteExecuteAsyncResult.getFirstAsync()`](#getfirstasync), and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public getFirstAsync<T>(source: string, params: SQLiteBindParams): Promise<T | null>;\n  /**\n   * @hidden\n   */\n  public getFirstAsync<T>(source: string, ...params: SQLiteVariadicBindParams): Promise<T | null>;\n  public async getFirstAsync<T>(source: string, ...params: any[]): Promise<T | null> {\n    const statement = await this.prepareAsync(source);\n    let firstRow: T | null;\n    try {\n      const result = await statement.executeAsync<T>(...params);\n      firstRow = await result.getFirstAsync();\n    } finally {\n      await statement.finalizeAsync();\n    }\n    return firstRow;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), [`SQLiteExecuteAsyncResult`](#sqliteexecuteasyncresult) `AsyncIterator`, and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   * @returns Rather than returning Promise, this function returns an [`AsyncIterableIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator). You can use `for await...of` to iterate over the rows from the SQLite query result.\n   */\n  public getEachAsync<T>(source: string, params: SQLiteBindParams): AsyncIterableIterator<T>;\n  /**\n   * @hidden\n   */\n  public getEachAsync<T>(\n    source: string,\n    ...params: SQLiteVariadicBindParams\n  ): AsyncIterableIterator<T>;\n  public async *getEachAsync<T>(source: string, ...params: any[]): AsyncIterableIterator<T> {\n    const statement = await this.prepareAsync(source);\n    try {\n      const result = await statement.executeAsync<T>(...params);\n      for await (const row of result) {\n        yield row;\n      }\n    } finally {\n      await statement.finalizeAsync();\n    }\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), [`SQLiteExecuteAsyncResult.getAllAsync()`](#getallasync), and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   * @example\n   * ```ts\n   * // For unnamed parameters, you pass values in an array.\n   * db.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', [1, 'Hello']);\n   *\n   * // For unnamed parameters, you pass values in variadic arguments.\n   * db.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', 1, 'Hello');\n   *\n   * // For named parameters, you should pass values in object.\n   * db.getAllAsync('SELECT * FROM test WHERE intValue = $intValue AND name = $name', { $intValue: 1, $name: 'Hello' });\n   * ```\n   */\n  public getAllAsync<T>(source: string, params: SQLiteBindParams): Promise<T[]>;\n  /**\n   * @hidden\n   */\n  public getAllAsync<T>(source: string, ...params: SQLiteVariadicBindParams): Promise<T[]>;\n  public async getAllAsync<T>(source: string, ...params: any[]): Promise<T[]> {\n    const statement = await this.prepareAsync(source);\n    let allRows;\n    try {\n      const result = await statement.executeAsync<T>(...params);\n      allRows = await result.getAllAsync();\n    } finally {\n      await statement.finalizeAsync();\n    }\n    return allRows;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), and [`SQLiteStatement.finalizeSync()`](#finalizesync).\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public runSync(source: string, params: SQLiteBindParams): SQLiteRunResult;\n  /**\n   * @hidden\n   */\n  public runSync(source: string, ...params: SQLiteVariadicBindParams): SQLiteRunResult;\n  public runSync(source: string, ...params: any[]): SQLiteRunResult {\n    const statement = this.prepareSync(source);\n    let result: SQLiteExecuteSyncResult<unknown>;\n    try {\n      result = statement.executeSync(...params);\n    } finally {\n      statement.finalizeSync();\n    }\n    return result;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult.getFirstSync()`](#getfirstsync), and [`SQLiteStatement.finalizeSync()`](#finalizesync).\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public getFirstSync<T>(source: string, params: SQLiteBindParams): T | null;\n  /**\n   * @hidden\n   */\n  public getFirstSync<T>(source: string, ...params: SQLiteVariadicBindParams): T | null;\n  public getFirstSync<T>(source: string, ...params: any[]): T | null {\n    const statement = this.prepareSync(source);\n    let firstRow: T | null;\n    try {\n      const result = statement.executeSync<T>(...params);\n      firstRow = result.getFirstSync();\n    } finally {\n      statement.finalizeSync();\n    }\n    return firstRow;\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult`](#sqliteexecutesyncresult) `Iterator`, and [`SQLiteStatement.finalizeSync()`](#finalizesync).\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   * @returns This function returns an [`IterableIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator). You can use `for...of` to iterate over the rows from the SQLite query result.\n   */\n  public getEachSync<T>(source: string, params: SQLiteBindParams): IterableIterator<T>;\n  /**\n   * @hidden\n   */\n  public getEachSync<T>(source: string, ...params: SQLiteVariadicBindParams): IterableIterator<T>;\n  public *getEachSync<T>(source: string, ...params: any[]): IterableIterator<T> {\n    const statement = this.prepareSync(source);\n    try {\n      const result = statement.executeSync<T>(...params);\n      for (const row of result) {\n        yield row;\n      }\n    } finally {\n      statement.finalizeSync();\n    }\n  }\n\n  /**\n   * A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult.getAllSync()`](#getallsync), and [`SQLiteStatement.finalizeSync()`](#finalizesync).\n   * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n   * @param source A string containing the SQL query.\n   * @param params The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See [`SQLiteBindValue`](#sqlitebindvalue) for more information about binding values.\n   */\n  public getAllSync<T>(source: string, params: SQLiteBindParams): T[];\n  /**\n   * @hidden\n   */\n  public getAllSync<T>(source: string, ...params: SQLiteVariadicBindParams): T[];\n  public getAllSync<T>(source: string, ...params: any[]): T[] {\n    const statement = this.prepareSync(source);\n    let allRows;\n    try {\n      const result = statement.executeSync<T>(...params);\n      allRows = result.getAllSync();\n    } finally {\n      statement.finalizeSync();\n    }\n    return allRows;\n  }\n\n  //#endregion\n}\n\n/**\n * Open a database.\n *\n * @param databaseName The name of the database file to open.\n * @param options Open options.\n */\nexport async function openDatabaseAsync(\n  databaseName: string,\n  options?: SQLiteOpenOptions\n): Promise<SQLiteDatabase> {\n  const openOptions = options ?? {};\n  const nativeDatabase = new ExpoSQLite.NativeDatabase(databaseName, openOptions);\n  await nativeDatabase.initAsync();\n  return new SQLiteDatabase(databaseName, openOptions, nativeDatabase);\n}\n\n/**\n * Open a database.\n *\n * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n *\n * @param databaseName The name of the database file to open.\n * @param options Open options.\n */\nexport function openDatabaseSync(\n  databaseName: string,\n  options?: SQLiteOpenOptions\n): SQLiteDatabase {\n  const openOptions = options ?? {};\n  const nativeDatabase = new ExpoSQLite.NativeDatabase(databaseName, openOptions);\n  nativeDatabase.initSync();\n  return new SQLiteDatabase(databaseName, openOptions, nativeDatabase);\n}\n\n/**\n * Delete a database file.\n *\n * @param databaseName The name of the database file to delete.\n */\nexport async function deleteDatabaseAsync(databaseName: string): Promise<void> {\n  return await ExpoSQLite.deleteDatabaseAsync(databaseName);\n}\n\n/**\n * Delete a database file.\n *\n * > **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance.\n *\n * @param databaseName The name of the database file to delete.\n */\nexport function deleteDatabaseSync(databaseName: string): void {\n  return ExpoSQLite.deleteDatabaseSync(databaseName);\n}\n\n/**\n * The event payload for the listener of [`addDatabaseChangeListener`](#sqliteadddatabasechangelistenerlistener)\n */\nexport type DatabaseChangeEvent = {\n  /** The database name. The value would be `main` by default and other database names if you use `ATTACH DATABASE` statement. */\n  databaseName: string;\n\n  /** The absolute file path to the database. */\n  databaseFilePath: string;\n\n  /** The table name. */\n  tableName: string;\n\n  /** The changed row ID. */\n  rowId: number;\n};\n\n/**\n * Add a listener for database changes.\n * > Note: to enable this feature, you must set [`enableChangeListener` to `true`](#sqliteopenoptions) when opening the database.\n *\n * @param listener A function that receives the `databaseName`, `databaseFilePath`, `tableName` and `rowId` of the modified data.\n * @returns A `Subscription` object that you can call `remove()` on when you would like to unsubscribe the listener.\n */\nexport function addDatabaseChangeListener(\n  listener: (event: DatabaseChangeEvent) => void\n): Subscription {\n  return emitter.addListener('onDatabaseChange', listener);\n}\n\n/**\n * A new connection specific used for [`withExclusiveTransactionAsync`](#withexclusivetransactionasynctask).\n * @hidden not going to pull all the database methods to the document.\n */\nclass Transaction extends SQLiteDatabase {\n  public static async createAsync(db: SQLiteDatabase): Promise<Transaction> {\n    const options = { ...db.options, useNewConnection: true };\n    const nativeDatabase = new ExpoSQLite.NativeDatabase(db.databaseName, options);\n    await nativeDatabase.initAsync();\n    return new Transaction(db.databaseName, options, nativeDatabase);\n  }\n}\n"]}