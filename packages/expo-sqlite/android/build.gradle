import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

group = 'host.exp.exponent'
version = '14.0.3'

def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
apply from: expoModulesCorePlugin
applyKotlinExpoModulesCorePlugin()
useCoreDependencies()
useDefaultAndroidSdkVersions()
useExpoPublishing()

String toPlatformIndependentPath(File path) {
  def result = path.toString()
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    result = result.replace(File.separatorChar, '/' as char)
  }
  return result
}

ext {
  USE_SQLCIPHER = findProperty('expo.sqlite.useSQLCipher') == 'true'
}
def SQLITE3_SRC_DIR = new File("${projectDir}/../vendor/sqlite3")
if (ext.USE_SQLCIPHER) {
  SQLITE3_SRC_DIR = new File("${projectDir}/../vendor/sqlcipher")
}

def getSQLiteBuildFlags() {
  def buildFlags = '-DSQLITE_ENABLE_BYTECODE_VTAB=1 -DSQLITE_TEMP_STORE=2'
  if (findProperty('expo.sqlite.enableFTS') != 'false') {
    buildFlags <<= ' -DSQLITE_ENABLE_FTS4=1 -DSQLITE_ENABLE_FTS3_PARENTHESIS=1 -DSQLITE_ENABLE_FTS5=1'
  }
  if (ext.USE_SQLCIPHER) {
    buildFlags <<= ' -DSQLITE_HAS_CODEC=1 -DSQLCIPHER_CRYPTO_OPENSSL'
  }
  def customBuildFlags = findProperty('expo.sqlite.customBuildFlags') ?: ''
  if (customBuildFlags != '') {
    buildFlags <<= " ${customBuildFlags}"
  }
  logger.info("SQLite build flags: ${buildFlags}")
  return buildFlags
}

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
  namespace "expo.modules.sqlite"
  defaultConfig {
    versionCode 18
    versionName "14.0.3"

    externalNativeBuild {
      cmake {
        abiFilters (*reactNativeArchitectures())
        arguments "-DANDROID_STL=c++_shared",
          "-DSQLITE3_SRC_DIR=${toPlatformIndependentPath(SQLITE3_SRC_DIR)}",
          "-DSQLITE_BUILDFLAGS=${getSQLiteBuildFlags()}",
          "-DUSE_SQLCIPHER=${project.ext.USE_SQLCIPHER}"
      }
    }
  }
  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }
  buildFeatures {
    prefab true
  }
}

dependencies {
  if (project.ext.USE_SQLCIPHER) {
    compileOnly 'com.android.ndk.thirdparty:openssl:1.1.1q-beta-1'
  }
  compileOnly 'com.facebook.fbjni:fbjni:0.3.0'
}
