apply plugin: 'com.android.library'

group = 'expo.modules.ui'
version = '0.1.0'

def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
apply from: expoModulesCorePlugin
applyKotlinExpoModulesCorePlugin()

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.jetbrains.kotlin.plugin.compose:org.jetbrains.kotlin.plugin.compose.gradle.plugin:${kotlinVersion}")
  }
}

apply plugin: 'org.jetbrains.kotlin.plugin.compose'

useCoreDependencies()
useExpoPublishing()

// If you want to use the managed Android SDK versions from expo-modules-core, set this to true.
// The Android SDK versions will be bumped from time to time in SDK releases and may introduce breaking changes in your module code.
// Most of the time, you may like to manage the Android SDK versions yourself.
def useManagedAndroidSdkVersions = false
if (useManagedAndroidSdkVersions) {
  useDefaultAndroidSdkVersions()
} else {
  buildscript {
    // Simple helper that allows the root project to override versions declared by this library.
    ext.safeExtGet = { prop, fallback ->
      rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }
  }
  project.android {
    compileSdkVersion safeExtGet("compileSdkVersion", 34)
    defaultConfig {
      minSdkVersion safeExtGet("minSdkVersion", 21)
      targetSdkVersion safeExtGet("targetSdkVersion", 34)
    }
  }
}

android {
  namespace "expo.modules.ui"
  defaultConfig {
    versionCode 1
    versionName "0.1.0"
  }
  buildFeatures {
    compose true
  }
  lintOptions {
    abortOnError false
  }
}

dependencies {
  implementation 'androidx.compose.foundation:foundation-android:1.7.6'
  implementation 'androidx.compose.ui:ui-android:1.7.6'
  implementation "androidx.compose.material3:material3:1.3.1"
  implementation 'androidx.lifecycle:lifecycle-runtime:2.8.7'
  implementation 'androidx.fragment:fragment-ktx:1.8.5'
  implementation 'androidx.compose.material3:material3-android:1.3.1'
}
