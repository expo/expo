{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/ContextMenu/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAiB,QAAQ,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAIzD,OAAO,EAAe,+BAA+B,EAAE,MAAM,SAAS,CAAC;AAEvE,cAAc,WAAW,CAAC;AAO1B,MAAM,cAAc,GAAmC,iBAAiB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;AAElG,MAAM,qBAAqB,GAA0B,iBAAiB,CACpE,QAAQ,EACR,8BAA8B,CAC/B,CAAC;AAEF,MAAM,qBAAqB,GAA0B,iBAAiB,CACpE,QAAQ,EACR,oBAAoB,CACrB,CAAC;AAsBF;;;;GAIG;AACH,MAAM,UAAU,KAAK,CAAC,KAAoC;IACxD,OAAO,EAAE,GAAG,CAAC;AACf,CAAC;AACD,KAAK,CAAC,GAAG,GAAG,OAAO,CAAC;AAEpB;;GAEG;AACH,MAAM,UAAU,OAAO,CAAC,KAAoC;IAC1D,OAAO,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AAC9C,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,OAAO,CAAC,KAAoC;IAC1D,OAAO,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AAC9C,CAAC;AAED;;;GAGG;AAEH;;;;;;;;GAQG;AACH,SAAS,WAAW,CAAC,KAAuB;IAC1C,MAAM,gBAAgB,GAAkB,EAAE,CAAC;IAC3C,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAClC,KAAK,CAAC,QAAe,EACrB,CAAC,CAAkE,EAAE,EAAE,CACrE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CACrD,CAAC;IACF,MAAM,iBAAiB,GAAG,OAAO,CAC/B,GAAG,EAAE,CAAC,+BAA+B,CAAC,eAAe,EAAE,gBAAgB,CAAC,EACxE,CAAC,eAAe,CAAC,CAClB,CAAC;IAEF,MAAM,kBAAkB,GACtB,CAAC,WAAmB,EAAE,EAAE,CAAC,CAAC,KAA6D,EAAE,EAAE;QACzF,MAAM,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAC,WAAW,CAAC,oBAAoB,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;QACxF,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;IACnB,CAAC,CAAC;IAEJ,OAAO,CACL,CAAC,cAAc,CACb,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAC5B,0BAA0B,CAAC,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAC1D,+BAA+B,CAAC,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CACrE,iCAAiC,CAAC,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAC1E,IAAI,KAAK,CAAC,EACV,CACH,CAAC;AACJ,CAAC;AAED,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;AAC9B,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;AAC9B,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;AAE1B,OAAO,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { ComponentType, Children, useMemo } from 'react';\nimport { NativeSyntheticEvent } from 'react-native';\n\nimport { type ContextMenuProps, type EventHandlers } from './types';\nimport { MenuElement, transformChildrenToElementArray } from './utils';\n\nexport * from './Submenu';\nexport {\n  type ActivationMethod,\n  type ContextMenuProps,\n  type ContextMenuContentProps,\n} from './types';\n\nconst MenuNativeView: ComponentType<NativeMenuProps> = requireNativeView('ExpoUI', 'ContextMenu');\n\nconst MenuNativeTriggerView: ComponentType<object> = requireNativeView(\n  'ExpoUI',\n  'ContextMenuActivationElement'\n);\n\nconst MenuNativePreviewView: ComponentType<object> = requireNativeView(\n  'ExpoUI',\n  'ContextMenuPreview'\n);\n\ntype NativeMenuProps = ContextMenuProps & {\n  elements: MenuElement[];\n  onContextMenuButtonPressed: (\n    event: NativeSyntheticEvent<{ contextMenuElementID: string }>\n  ) => void;\n  onContextMenuSwitchValueChanged: (\n    event: NativeSyntheticEvent<{\n      contextMenuElementID: string;\n      value: boolean;\n    }>\n  ) => void;\n  onContextMenuPickerOptionSelected: (\n    event: NativeSyntheticEvent<{\n      index: number;\n      label: string;\n      contextMenuElementID: string;\n    }>\n  ) => void;\n};\n\n/**\n * Items visible inside the context menu. Pass input components as immidiate children of the tag.\n * `Button`, `Switch` and `Submenu` components are supported on both Android and iOS.\n * The `Picker` component is supported only on iOS. Remember to use components from the `@expo/ui` library.\n */\nexport function Items(props: { children: React.ReactNode }) {\n  return <></>;\n}\nItems.tag = 'Items';\n\n/**\n * The component visible all the time that triggers the menu when tapped or long-pressed.\n */\nexport function Trigger(props: { children: React.ReactNode }) {\n  return <MenuNativeTriggerView {...props} />;\n}\n\n/**\n * The component visible above the menu when it is opened.\n * @platform ios\n */\nexport function Preview(props: { children: React.ReactNode }) {\n  return <MenuNativePreviewView {...props} />;\n}\n\n/**\n * `<ContextMenu>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\n\n/**\n * `ContextMenu` allows you to create a context menu, which can be used to provide additional options to the user.\n *\n * There are some platform-specific differences in the behavior of the context menu:\n * - On Android, the expansion of the context menu is controlled by the `expanded` prop. iOS, does not allow for manual control of the expansion state.\n * - On iOS, the context menu can be triggered by a single press or a long press. The `activationMethod` prop allows you to choose between these two options.\n * - Android does not support nesting in the context menu. All the submenus will be flat-mapped into a single level with multiple sections. The `title` prop of the `Button`, which opens the submenu on iOS will be used as a section title.\n * - Android does not support showing a `Picker` element in the context menu.\n */\nfunction ContextMenu(props: ContextMenuProps) {\n  const eventHandlersMap: EventHandlers = {};\n  const initialChildren = Children.map(\n    props.children as any,\n    (c: { type: { tag: string }; props: { children: React.ReactNode } }) =>\n      c.type.tag === Items.tag ? c.props.children : null\n  );\n  const processedElements = useMemo(\n    () => transformChildrenToElementArray(initialChildren, eventHandlersMap),\n    [initialChildren]\n  );\n\n  const createEventHandler =\n    (handlerType: string) => (event: NativeSyntheticEvent<{ contextMenuElementID: string }>) => {\n      const handler = eventHandlersMap[event.nativeEvent.contextMenuElementID]?.[handlerType];\n      handler?.(event);\n    };\n\n  return (\n    <MenuNativeView\n      elements={processedElements}\n      onContextMenuButtonPressed={createEventHandler('onPress')}\n      onContextMenuSwitchValueChanged={createEventHandler('onValueChange')}\n      onContextMenuPickerOptionSelected={createEventHandler('onOptionSelected')}\n      {...props}\n    />\n  );\n}\n\nContextMenu.Trigger = Trigger;\nContextMenu.Preview = Preview;\nContextMenu.Items = Items;\n\nexport { ContextMenu };\n"]}