{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/swift-ui/modifiers/utils.ts"],"names":[],"mappings":"AASA;;GAEG;AACH,MAAM,UAAU,+BAA+B,CAAC,SAA2B;IACzE,MAAM,cAAc,GAAwC,EAAE,CAAC;IAC/D,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE,CAAC;QACjC,IAAI,QAAQ,CAAC,aAAa,EAAE,CAAC;YAC3B,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC;QAC1D,CAAC;IACH,CAAC;IAED,MAAM,aAAa,GAAiC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE;QACtE,KAAK,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YAC9D,MAAM,QAAQ,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;YAC3C,IAAI,QAAQ,EAAE,CAAC;gBACb,QAAQ,CAAC,MAAM,CAAC,CAAC;YACnB,CAAC;QACH,CAAC;IACH,CAAC,CAAC;IAEF,OAAO;QACL,aAAa;KACd,CAAC;AACJ,CAAC","sourcesContent":["import { type ModifierConfig } from './index';\n\ntype GlobalEventPayload = {\n  [eventName: string]: Record<string, any>;\n};\ntype GlobalEvent = {\n  onGlobalEvent: (event: { nativeEvent: GlobalEventPayload }) => void;\n};\n\n/**\n * Create an event listener for a view modifier.\n */\nexport function createViewModifierEventListener(modifiers: ModifierConfig[]): GlobalEvent {\n  const eventListeners: Record<string, (args: any) => void> = {};\n  for (const modifier of modifiers) {\n    if (modifier.eventListener) {\n      eventListeners[modifier.$type] = modifier.eventListener;\n    }\n  }\n\n  const onGlobalEvent: GlobalEvent['onGlobalEvent'] = ({ nativeEvent }) => {\n    for (const [eventName, params] of Object.entries(nativeEvent)) {\n      const listener = eventListeners[eventName];\n      if (listener) {\n        listener(params);\n      }\n    }\n  };\n\n  return {\n    onGlobalEvent,\n  };\n}\n"]}