{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Label/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAmB/B,MAAM,eAAe,GAAoC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAElG;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,KAAiB;IAC9C,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACxC,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,KAAK,CAAC,KAAoD;IACxE,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,aAAa,CACrC;MAAA,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC,EAC5B;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nimport { Host } from '../Host';\n\nexport type LabelProps = {\n  /**\n   * The title text to be displayed in the label.\n   */\n  title?: string;\n\n  /**\n   * The name of the SFSymbol to be displayed in the label.\n   */\n  systemImage?: string;\n\n  /**\n   * The color of the label icon.\n   */\n  color?: string;\n};\n\nconst LabelNativeView: React.ComponentType<LabelProps> = requireNativeView('ExpoUI', 'LabelView');\n\n/**\n * `<Label>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\nexport function LabelPrimitive(props: LabelProps) {\n  return <LabelNativeView {...props} />;\n}\n\n/**\n * Renders a native label view, which could be used in a list or section.\n *\n * @param {LabelProps} props - The properties passed to the Label component.\n * @returns {JSX.Element} The rendered native Label component.\n * @platform ios\n */\nexport function Label(props: LabelProps & { style?: StyleProp<ViewStyle> }) {\n  return (\n    <Host style={props.style} matchContents>\n      <LabelPrimitive {...props} />\n    </Host>\n  );\n}\n"]}