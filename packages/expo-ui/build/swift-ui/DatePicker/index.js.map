{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/DatePicker/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AA0CrE,SAAS,4BAA4B,CAAC,KAA0B;IAC9D,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAC9C,OAAO;QACL,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,IAAI;QACP,cAAc,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;YAC5C,KAAK,EAAE,cAAc,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1C,CAAC;QACD,OAAO;KACR,CAAC;AACJ,CAAC;AAED,MAAM,oBAAoB,GAA+C,iBAAiB,CACxF,QAAQ,EACR,oBAAoB,CACrB,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,cAAc,CAAC,KAA0B;IACvD,OAAO,CAAC,oBAAoB,CAAC,IAAI,4BAA4B,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC3E,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { type ViewEvent } from '../../types';\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport type IOSVariant = 'wheel' | 'automatic' | 'graphical' | 'compact';\n\nexport type DisplayedComponents = 'date' | 'hourAndMinute' | 'dateAndTime';\n\nexport type DateTimePickerProps = {\n  /**\n   * The initial date to display on the picker.\n   */\n  initialDate?: string | null;\n  /**\n   * A title displayed on the picker on iOS.\n   * @platform ios\n   */\n  title?: string;\n  /**\n   * Callback function that is called when a date is selected.\n   */\n  onDateSelected?: (date: Date) => void;\n  /**\n   * The variant of the picker, which determines its appearance and behavior.\n   * @default 'automatic'\n   */\n  variant?: IOSVariant;\n  /**\n   * The components that the picker should display.\n   * On iOS, you can have a picker that selects both date and time.\n   * @default 'date'\n   */\n  displayedComponents?: DisplayedComponents;\n  /**\n   * The tint color to use on the picker elements.\n   */\n  color?: string;\n} & CommonViewModifierProps;\n\ntype NativeDatePickerProps = Omit<DateTimePickerProps, 'variant' | 'onDateSelected'> & {\n  variant?: IOSVariant;\n} & ViewEvent<'onDateSelected', { date: Date }>;\n\nfunction transformDateTimePickerProps(props: DateTimePickerProps): NativeDatePickerProps {\n  const { variant, modifiers, ...rest } = props;\n  return {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...rest,\n    onDateSelected: ({ nativeEvent: { date } }) => {\n      props?.onDateSelected?.(new Date(date));\n    },\n    variant,\n  };\n}\n\nconst DatePickerNativeView: React.ComponentType<NativeDatePickerProps> = requireNativeView(\n  'ExpoUI',\n  'DateTimePickerView'\n);\n\n/**\n * Renders a `DateTimePicker` component.\n */\nexport function DateTimePicker(props: DateTimePickerProps) {\n  return <DatePickerNativeView {...transformDateTimePickerProps(props)} />;\n}\n"]}