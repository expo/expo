{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/DatePicker/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAwB,UAAU,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAG5E,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAyC/B;;GAEG;AACH,MAAM,UAAU,4BAA4B,CAAC,KAA0B;IACrE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IACnC,OAAO;QACL,GAAG,IAAI;QACP,cAAc,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;YAC5C,KAAK,EAAE,cAAc,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1C,CAAC;QACD,OAAO;KACR,CAAC;AACJ,CAAC;AAED,SAAS,4BAA4B,CACnC,KAAuC;IAEvC,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IAE9E,gEAAgE;IAChE,4CAA4C;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC;IAEzD,0GAA0G;IAC1G,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IACtD,MAAM,eAAe,GAAG,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IAExD,OAAO,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC;AAC/E,CAAC;AAED,MAAM,oBAAoB,GAA+C,iBAAiB,CACxF,QAAQ,EACR,oBAAoB,CACrB,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,uBAAuB,CAAC,KAA0B;IAChE,OAAO,CAAC,oBAAoB,CAAC,IAAI,4BAA4B,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC3E,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,cAAc,CAAC,KAA6D;IAC1F,MAAM,gBAAgB,GAAG,4BAA4B,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACnE,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAC1C;MAAA,CAAC,uBAAuB,CAAC,IAAI,KAAK,CAAC,EACrC;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle, StyleSheet, PixelRatio } from 'react-native';\n\nimport { ViewEvent } from '../../types';\nimport { Host } from '../Host';\n\nexport type IOSVariant = 'wheel' | 'automatic' | 'graphical' | 'compact';\n\nexport type DisplayedComponents = 'date' | 'hourAndMinute' | 'dateAndTime';\n\nexport type DateTimePickerProps = {\n  /**\n   * The initial date to display on the picker.\n   */\n  initialDate?: string | null;\n  /**\n   * A title displayed on the picker on iOS.\n   * @platform ios\n   */\n  title?: string;\n  /**\n   * Callback function that is called when a date is selected.\n   */\n  onDateSelected?: (date: Date) => void;\n  /**\n   * The variant of the picker, which determines its appearance and behavior.\n   * @default 'automatic'\n   */\n  variant?: IOSVariant;\n  /**\n   * The components that the picker should display.\n   * On iOS, you can have a picker that selects both date and time.\n   * @default 'date'\n   */\n  displayedComponents?: DisplayedComponents;\n  /**\n   * The tint color to use on the picker elements.\n   */\n  color?: string;\n};\n\ntype NativeDatePickerProps = Omit<DateTimePickerProps, 'variant' | 'onDateSelected'> & {\n  variant?: IOSVariant;\n} & ViewEvent<'onDateSelected', { date: Date }>;\n\n/**\n * @hidden\n */\nexport function transformDateTimePickerProps(props: DateTimePickerProps): NativeDatePickerProps {\n  const { variant, ...rest } = props;\n  return {\n    ...rest,\n    onDateSelected: ({ nativeEvent: { date } }) => {\n      props?.onDateSelected?.(new Date(date));\n    },\n    variant,\n  };\n}\n\nfunction transformDateTimePickerStyle(\n  style: StyleProp<ViewStyle> | undefined\n): StyleProp<ViewStyle> {\n  const { minWidth, minHeight, ...restStyle } = StyleSheet.flatten(style) || {};\n\n  // On Android, the pickerâ€™s minWidth and minHeight must be 12dp.\n  // Otherwise, the picker will crash the app.\n  const minSize = PixelRatio.getPixelSizeForLayoutSize(12);\n\n  // However, when users pass the minWidth and minHeight props, we trust that they know what they are doing.\n  const parsedMinWidth = minWidth ? minSize : undefined;\n  const parsedMinHeight = minHeight ? minSize : undefined;\n\n  return [restStyle, { minWidth: parsedMinWidth, minHeight: parsedMinHeight }];\n}\n\nconst DatePickerNativeView: React.ComponentType<NativeDatePickerProps> = requireNativeView(\n  'ExpoUI',\n  'DateTimePickerView'\n);\n\n/**\n * `<DateTimePicker>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\nexport function DateTimePickerPrimitive(props: DateTimePickerProps) {\n  return <DatePickerNativeView {...transformDateTimePickerProps(props)} />;\n}\n\n/**\n * Renders a `DateTimePicker` component.\n */\nexport function DateTimePicker(props: DateTimePickerProps & { style?: StyleProp<ViewStyle> }) {\n  const transformedStyle = transformDateTimePickerStyle(props.style);\n  return (\n    <Host style={transformedStyle} matchContents>\n      <DateTimePickerPrimitive {...props} />\n    </Host>\n  );\n}\n"]}