{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Progress/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AA+BrE,MAAM,kBAAkB,GAA6C,iBAAiB,CACpF,QAAQ,EACR,cAAc,CACf,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAAC,KAA4B;IAC3D,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO,CACL,CAAC,kBAAkB,CACjB,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CACzE,IAAI,SAAS,CAAC,CACd,OAAO,CAAC,UAAU,EAClB,CACH,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,cAAc,CAAC,KAA0B;IACvD,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO,CACL,CAAC,kBAAkB,CACjB,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CACzE,IAAI,SAAS,CAAC,CACd,OAAO,CAAC,QAAQ,EAChB,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { ColorValue } from 'react-native';\n\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport type CircularProgressProps = {\n  /**\n   * The current progress value of the slider. This is a number between `0` and `1`.\n   */\n  progress?: number | null;\n  /**\n   * Progress color.\n   */\n  color?: ColorValue;\n} & CommonViewModifierProps;\n\nexport type LinearProgressProps = {\n  /**\n   * The current progress value of the slider. This is a number between `0` and `1`.\n   */\n  progress?: number | null;\n  /**\n   * Progress color.\n   */\n  color?: ColorValue;\n} & CommonViewModifierProps;\n\ntype NativeProgressProps =\n  | CircularProgressProps\n  | (LinearProgressProps & {\n      variant: 'linear' | 'circular';\n    });\n\nconst NativeProgressView: React.ComponentType<NativeProgressProps> = requireNativeView(\n  'ExpoUI',\n  'ProgressView'\n);\n\n/**\n * Renders a `CircularProgress` component.\n */\nexport function CircularProgress(props: CircularProgressProps) {\n  const { modifiers, ...restProps } = props;\n  return (\n    <NativeProgressView\n      modifiers={modifiers}\n      {...(modifiers ? createViewModifierEventListener(modifiers) : undefined)}\n      {...restProps}\n      variant=\"circular\"\n    />\n  );\n}\n\n/**\n * Renders a `LinearProgress` component.\n */\nexport function LinearProgress(props: LinearProgressProps) {\n  const { modifiers, ...restProps } = props;\n  return (\n    <NativeProgressView\n      modifiers={modifiers}\n      {...(modifiers ? createViewModifierEventListener(modifiers) : undefined)}\n      {...restProps}\n      variant=\"linear\"\n    />\n  );\n}\n"]}