{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Host/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AA2BjC,MAAM,cAAc,GAAmC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAE/F;;GAEG;AACH,MAAM,UAAU,IAAI,CAAC,KAAgB;IACnC,MAAM,EAAE,aAAa,EAAE,0BAA0B,EAAE,eAAe,EAAE,KAAK,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAClG,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,QAAQ,CAAmB,IAAI,CAAC,CAAC;IAC7E,OAAO,CACL,CAAC,cAAc,CACb,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;YACrB,eAAe,EAAE,CAAC,CAAC,CAAC,CAAC;YACrB,IAAI,aAAa,EAAE,CAAC;gBAClB,iBAAiB,CAAC;oBAChB,KAAK,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK;oBAC1B,MAAM,EAAE,CAAC,CAAC,WAAW,CAAC,MAAM;iBAC7B,CAAC,CAAC;YACL,CAAC;QACH,CAAC,CAAC,CACF,KAAK,CAAC,CAAC,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,CAC/B,aAAa,CAAC,CAAC,aAAa,CAAC,CAC7B,0BAA0B,CAAC,CAAC,0BAA0B,CAAC,CACvD,IAAI,SAAS,CAAC,EACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { useState } from 'react';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nexport type HostProps = {\n  /**\n   * When true, the host view will update its size in the React Native view tree to match the content's layout from SwiftUI.\n   * @default false\n   */\n  matchContents?: boolean;\n\n  /**\n   * When true and no explicit size is provided, the host will use the viewport size as the proposed size for SwiftUI layout.\n   * This is particularly useful for SwiftUI views that need to fill their available space, such as `Form`.\n   * @default false\n   */\n  useViewportSizeMeasurement?: boolean;\n\n  /**\n   * Callback function that is triggered when the SwiftUI content completes its layout.\n   * Provides the current dimensions of the content, which may change as the content updates.\n   */\n  onLayoutContent?: (event: { nativeEvent: { width: number; height: number } }) => void;\n\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst HostNativeView: React.ComponentType<HostProps> = requireNativeView('ExpoUI', 'HostView');\n\n/**\n * A hosting component for SwiftUI views.\n */\nexport function Host(props: HostProps) {\n  const { matchContents, useViewportSizeMeasurement, onLayoutContent, style, ...restProps } = props;\n  const [containerStyle, setContainerStyle] = useState<ViewStyle | null>(null);\n  return (\n    <HostNativeView\n      onLayoutContent={(e) => {\n        onLayoutContent?.(e);\n        if (matchContents) {\n          setContainerStyle({\n            width: e.nativeEvent.width,\n            height: e.nativeEvent.height,\n          });\n        }\n      }}\n      style={[style, containerStyle]}\n      matchContents={matchContents}\n      useViewportSizeMeasurement={useViewportSizeMeasurement}\n      {...restProps}\n    />\n  );\n}\n"]}