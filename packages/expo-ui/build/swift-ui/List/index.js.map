{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/List/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AAGrE,MAAM,cAAc,GAAyC,iBAAiB,CAC5E,QAAQ,EACR,UAAU,CACX,CAAC;AAEF,SAAS,kBAAkB,CAAC,KAAkC;IAC5D,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO;QACL,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,SAAS;QACZ,YAAY,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,YAAY,EAAE,CAAC,KAAK,CAAC;QAC1E,UAAU,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,UAAU,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;QAC5E,iBAAiB,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,CAAC,KAAK,EAAE,iBAAiB,EAAE,CAAC,SAAS,CAAC;KAC7F,CAAC;AACJ,CAAC;AAmFD;;;;;GAKG;AACH,MAAM,UAAU,IAAI,CAAC,KAAgB;IACnC,MAAM,EAAE,QAAQ,EAAE,GAAG,WAAW,EAAE,GAAG,KAAK,CAAC;IAC3C,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,cAAc,CAAC,CAAC;AAC1F,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { type ViewEvent } from '../../types';\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nconst ListNativeView: React.ComponentType<NativeListProps> = requireNativeView<NativeListProps>(\n  'ExpoUI',\n  'ListView'\n);\n\nfunction transformListProps(props: Omit<ListProps, 'children'>): Omit<NativeListProps, 'children'> {\n  const { modifiers, ...restProps } = props;\n  return {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...restProps,\n    onDeleteItem: ({ nativeEvent: { index } }) => props?.onDeleteItem?.(index),\n    onMoveItem: ({ nativeEvent: { from, to } }) => props?.onMoveItem?.(from, to),\n    onSelectionChange: ({ nativeEvent: { selection } }) => props?.onSelectionChange?.(selection),\n  };\n}\n\nexport type ListStyle = 'automatic' | 'plain' | 'inset' | 'insetGrouped' | 'grouped' | 'sidebar';\n\nexport interface ListProps extends CommonViewModifierProps {\n  /**\n   * One of the predefined ListStyle types in SwiftUI.\n   * @default 'automatic'\n   */\n  listStyle?: ListStyle;\n\n  /**\n   * Allows the selection of list items.\n   * @default false\n   */\n  selectEnabled?: boolean;\n\n  /**\n   * Enables reordering of list items.\n   * @default false\n   */\n  moveEnabled?: boolean;\n\n  /**\n   * Allows the deletion of list items.\n   * @default false\n   */\n  deleteEnabled?: boolean;\n\n  /**\n   * Makes the list scrollable.\n   * @default true\n   * @platform ios 16.0+\n   */\n  scrollEnabled?: boolean;\n\n  /**\n   * Enables SwiftUI edit mode.\n   * @default false\n   */\n  editModeEnabled?: boolean;\n\n  /**\n   * The children elements to be rendered inside the list.\n   */\n  children: React.ReactNode;\n\n  /**\n   * Callback triggered when an item is deleted from the list.\n   */\n  onDeleteItem?: (index: number) => void;\n\n  /**\n   * Callback triggered when an item is moved in the list.\n   */\n  onMoveItem?: (from: number, to: number) => void;\n\n  /**\n   * Callback triggered when the selection changes in a list.\n   */\n  onSelectionChange?: (selection: number[]) => void;\n}\n\n/**\n * DeleteItemEvent represents an event triggered when an item is deleted from the list.\n */\ntype DeleteItemEvent = ViewEvent<'onDeleteItem', { index: number }>;\n/**\n * MoveItemEvent represents an event triggered when an item is moved in the list.\n */\ntype MoveItemEvent = ViewEvent<'onMoveItem', { from: number; to: number }>;\n/**\n * SelectItemEvent represents an event triggered when the selection changes in a list.\n */\ntype SelectItemEvent = ViewEvent<'onSelectionChange', { selection: number[] }>;\n\ntype NativeListProps = Omit<ListProps, 'onDeleteItem' | 'onMoveItem' | 'onSelectionChange'> &\n  DeleteItemEvent &\n  MoveItemEvent &\n  SelectItemEvent & {\n    children: React.ReactNode;\n  };\n\n/**\n * A list component that renders its children using a native SwiftUI list.\n * @param {ListProps} props - The properties for the list component.\n * @returns {JSX.Element | null} The rendered list with its children or null if the platform is unsupported.\n * @platform ios\n */\nexport function List(props: ListProps) {\n  const { children, ...nativeProps } = props;\n  return <ListNativeView {...transformListProps(nativeProps)}>{children}</ListNativeView>;\n}\n"]}