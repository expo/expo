{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Text/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAEzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AA0CrE,MAAM,cAAc,GAClB,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAE1C,SAAS,kBAAkB,CAAC,KAAgB;IAC1C,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAEpD,OAAO;QACL,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,SAAS;QACZ,IAAI,EAAE,QAAQ,IAAI,EAAE;KACrB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,IAAI,CAAC,KAAgB;IACnC,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC3D,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport interface TextProps extends CommonViewModifierProps {\n  children: string;\n  /**\n   * The font weight of the text.\n   * Maps to iOS system font weights.\n   */\n  weight?:\n    | 'ultraLight'\n    | 'thin'\n    | 'light'\n    | 'regular'\n    | 'medium'\n    | 'semibold'\n    | 'bold'\n    | 'heavy'\n    | 'black';\n  /**\n   * The font design of the text.\n   * Maps to iOS system font designs.\n   */\n  design?: 'default' | 'rounded' | 'serif' | 'monospaced';\n  /**\n   * The font size of the text.\n   */\n  size?: number;\n  /**\n   * The line limit of the text.\n   */\n  lineLimit?: number;\n  /**\n   * The color of the text.\n   */\n  color?: string;\n}\n\ntype NativeTextProps = Omit<TextProps, 'children'> & {\n  text: string;\n};\n\nconst TextNativeView: React.ComponentType<Omit<TextProps, 'children'> & { text: string }> =\n  requireNativeView('ExpoUI', 'TextView');\n\nfunction transformTextProps(props: TextProps): NativeTextProps {\n  const { children, modifiers, ...restProps } = props;\n\n  return {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...restProps,\n    text: children ?? '',\n  };\n}\n\nexport function Text(props: TextProps) {\n  return <TextNativeView {...transformTextProps(props)} />;\n}\n"]}