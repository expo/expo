{"version":3,"file":"Next.js","sourceRoot":"","sources":["../../src/swift-ui/Next.tsx"],"names":[],"mappings":"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","sourcesContent":["import { requireNativeView } from 'expo';\nimport { NativeSyntheticEvent, Platform, StyleProp, ViewStyle } from 'react-native';\n\nimport { type ViewEvent } from '../types';\n\n//#region Host Component\nexport type HostProps = {\n  children: React.ReactNode;\n  style: StyleProp<ViewStyle>;\n};\nconst HostNativeView: React.ComponentType<HostProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUIHost') : null;\nexport function Host(props: HostProps) {\n  if (!HostNativeView) {\n    return null;\n  }\n  return <HostNativeView {...props} />;\n}\n//#endregion\n\n//#region Form Component\nexport type FormProps = {\n  children: React.ReactNode;\n};\nconst FormNativeView: React.ComponentType<FormProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUIForm') : null;\nexport function Form(props: FormProps) {\n  if (!FormNativeView) {\n    return null;\n  }\n  return <FormNativeView {...props} />;\n}\n//#endregion\n\n//#region Section Component\nexport type SectionProps = {\n  children: React.ReactNode;\n  title: string;\n};\nconst SectionNativeView: React.ComponentType<SectionProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUISection') : null;\nexport function Section(props: SectionProps) {\n  if (!SectionNativeView) {\n    return null;\n  }\n  return <SectionNativeView {...props} />;\n}\n//#endregion\n\n//#region Button Component\nexport type ButtonProps = {\n  children: React.ReactNode;\n  onPress?: () => void;\n};\ntype NativeButtonProps = Omit<ButtonProps, 'onPress' | 'children'> & {\n  text: string;\n} & ViewEvent<'onButtonPressed', void>;\nconst ButtonNativeView: React.ComponentType<NativeButtonProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUIButton') : null;\nfunction transformButtonProps(props: ButtonProps): NativeButtonProps {\n  const { children, onPress, ...restProps } = props;\n  return {\n    ...restProps,\n    text: children?.toString() ?? '',\n    onButtonPressed: onPress,\n  };\n}\nexport function Button(props: ButtonProps) {\n  if (!ButtonNativeView) {\n    return null;\n  }\n  return <ButtonNativeView {...transformButtonProps(props)} />;\n}\n//#endregion\n\n//#region Picker Component\nexport type PickerProps = {\n  label: string;\n  options: string[];\n  selectedIndex: number | null;\n  onOptionSelected?: (event: { nativeEvent: { index: number; label: string } }) => void;\n  variant?: 'automatic';\n};\nconst PickerNativeView: React.ComponentType<PickerProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUIPicker') : null;\nexport function Picker(props: PickerProps) {\n  if (!PickerNativeView) {\n    return null;\n  }\n  return <PickerNativeView {...props} />;\n}\n//#endregion\n\n//#region Switch Component\nexport type SwitchProps = {\n  label: string;\n  value: boolean;\n  onValueChange: (value: boolean) => void;\n};\ntype NativeSwitchProps = Omit<SwitchProps, 'onValueChange'> & {\n  onValueChange: (event: NativeSyntheticEvent<{ value: boolean }>) => void;\n};\nconst SwitchNativeView: React.ComponentType<NativeSwitchProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUISwitch') : null;\nfunction transformSwitchProps(props: SwitchProps): NativeSwitchProps {\n  const { onValueChange, ...restProps } = props;\n  return {\n    ...restProps,\n    onValueChange: (event: NativeSyntheticEvent<{ value: boolean }>) =>\n      onValueChange(event.nativeEvent.value),\n  };\n}\nexport function Switch(props: SwitchProps) {\n  if (!SwitchNativeView) {\n    return null;\n  }\n  return <SwitchNativeView {...transformSwitchProps(props)} />;\n}\n//#endregion\n\n//#region Text Component\nexport type TextProps = {\n  children: string;\n  /**\n   * The font weight of the text.\n   * Maps to iOS system font weights.\n   */\n  weight?:\n    | 'ultraLight'\n    | 'thin'\n    | 'light'\n    | 'regular'\n    | 'medium'\n    | 'semibold'\n    | 'bold'\n    | 'heavy'\n    | 'black';\n  /**\n   * The font design of the text.\n   * Maps to iOS system font designs.\n   */\n  design?: 'default' | 'rounded' | 'serif' | 'monospaced';\n  /**\n   * The font size of the text.\n   */\n  size?: number;\n  /**\n   * The line limit of the text.\n   */\n  lineLimit?: number;\n};\ntype NativeTextProps = Omit<TextProps, 'children'> & {\n  text: string;\n};\nconst TextNativeView: React.ComponentType<Omit<TextProps, 'children'> & { text: string }> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUIText') : null;\nfunction transformTextProps(props: TextProps): NativeTextProps {\n  const { children, ...restProps } = props;\n  return {\n    ...restProps,\n    text: children ?? '',\n  };\n}\nexport function Text(props: TextProps) {\n  if (!TextNativeView) {\n    return null;\n  }\n  return <TextNativeView {...transformTextProps(props)} />;\n}\n//#endregion\n\ntype StackBaseProps = {\n  children: React.ReactNode;\n  spacing?: number;\n  padding?: number;\n  frame?: {\n    width?: number;\n    height?: number;\n    minWidth?: number;\n    minHeight?: number;\n    maxWidth?: number;\n    maxHeight?: number;\n  };\n};\n\n//#region HStack Component\nexport type HStackProps = StackBaseProps;\nconst HStackNativeView: React.ComponentType<HStackProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUIHStack') : null;\nexport function HStack(props: HStackProps) {\n  if (!HStackNativeView) {\n    return null;\n  }\n  return <HStackNativeView {...props} />;\n}\n//#endregion\n\n//#region VStack Component\nexport type VStackProps = StackBaseProps;\nconst VStackNativeView: React.ComponentType<VStackProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'SwiftUIVStack') : null;\nexport function VStack(props: VStackProps) {\n  if (!VStackNativeView) {\n    return null;\n  }\n  return <VStackNativeView {...props} />;\n}\n//#endregion\n"]}