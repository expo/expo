{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Gauge/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAc,QAAQ,EAAwB,MAAM,cAAc,CAAC;AA8D1E,IAAI,eAAuD,CAAC;AAE5D,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;IAC1B,eAAe,GAAG,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAC7D,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAC,EAAE,IAAI,GAAG,SAAS,EAAE,GAAG,KAAK,EAAc;IAC9D,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACpD,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { ColorValue, Platform, StyleProp, ViewStyle } from 'react-native';\n\n/**\n * The type of `Gauge`.\n * @platform ios\n */\nexport type GaugeType = 'default' | 'circular' | 'circularCapacity' | 'linear' | 'linearCapacity';\n\n/**\n * Value options for the `Gauge` component.\n * @platform ios\n */\nexport type ValueOptions = {\n  /**\n   * Value of the element.\n   */\n  value: number;\n  /**\n   * Label of the element.\n   */\n  label?: string;\n  /**\n   * Color of the label.\n   */\n  color?: ColorValue;\n};\n\nexport type GaugeProps = {\n  /**\n   * A label displayed on the `Gauge`.\n   */\n  label?: string;\n  /**\n   * Color of the label.\n   */\n  labelColor?: ColorValue;\n  /**\n   * Current value options.\n   */\n  current: ValueOptions;\n  /**\n   * Minimum value options.\n   */\n  min?: ValueOptions;\n  /**\n   * Maximum value options.\n   */\n  max?: ValueOptions;\n  /**\n   * The type of `Gauge`.\n   */\n  type?: GaugeType;\n  /**\n   * Color (or array of colors for gradient) of the `Gauge`.\n   */\n  color?: ColorValue | ColorValue[];\n  /**\n   * Optional style to apply to the `Gauge` component.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nlet GaugeNativeView: React.ComponentType<GaugeProps> | null;\n\nif (Platform.OS === 'ios') {\n  GaugeNativeView = requireNativeView('ExpoUI', 'GaugeView');\n}\n\n/**\n * Renders a native `Gauge` component.\n * @platform ios\n */\nexport function Gauge({ type = 'default', ...props }: GaugeProps) {\n  if (!GaugeNativeView) {\n    return null;\n  }\n  return <GaugeNativeView type={type} {...props} />;\n}\n"]}