{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Gauge/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AA2DrE,MAAM,eAAe,GAAoC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAElG;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAC,EAAE,IAAI,GAAG,SAAS,EAAE,SAAS,EAAE,GAAG,KAAK,EAAc;IACzE,OAAO,CACL,CAAC,eAAe,CACd,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CACzE,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,IAAI,KAAK,CAAC,EACV,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { ColorValue } from 'react-native';\n\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\n/**\n * The type of `Gauge`.\n * @platform ios\n */\nexport type GaugeType = 'default' | 'circular' | 'circularCapacity' | 'linear' | 'linearCapacity';\n\n/**\n * Value options for the `Gauge` component.\n * @platform ios\n */\nexport type ValueOptions = {\n  /**\n   * Value of the element.\n   */\n  value: number;\n  /**\n   * Label of the element.\n   */\n  label?: string;\n  /**\n   * Color of the label.\n   */\n  color?: ColorValue;\n};\n\nexport type GaugeProps = {\n  /**\n   * A label displayed on the `Gauge`.\n   */\n  label?: string;\n  /**\n   * Color of the label.\n   */\n  labelColor?: ColorValue;\n  /**\n   * Current value options.\n   */\n  current: ValueOptions;\n  /**\n   * Minimum value options.\n   */\n  min?: ValueOptions;\n  /**\n   * Maximum value options.\n   */\n  max?: ValueOptions;\n  /**\n   * The type of `Gauge`.\n   */\n  type?: GaugeType;\n  /**\n   * Color (or array of colors for gradient) of the `Gauge`.\n   */\n  color?: ColorValue | ColorValue[];\n} & CommonViewModifierProps;\n\nconst GaugeNativeView: React.ComponentType<GaugeProps> = requireNativeView('ExpoUI', 'GaugeView');\n\n/**\n * Renders a native `Gauge` component.\n * @platform ios\n */\nexport function Gauge({ type = 'default', modifiers, ...props }: GaugeProps) {\n  return (\n    <GaugeNativeView\n      modifiers={modifiers}\n      {...(modifiers ? createViewModifierEventListener(modifiers) : undefined)}\n      type={type}\n      {...props}\n    />\n  );\n}\n"]}