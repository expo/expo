{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Button/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AA2FzC,wFAAwF;AACxF,MAAM,gBAAgB,GAA2C,iBAAiB,CAChF,QAAQ,EACR,QAAQ,CACT,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAkB;IACrD,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IACrE,OAAO;QACL,GAAG,SAAS;QACZ,IAAI,EAAE,QAAQ,IAAI,EAAE;QACpB,UAAU,EAAE,IAAI;QAChB,WAAW;QACX,eAAe,EAAE,OAAO;KACzB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAG,CAAC;AACnF,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nimport { ViewEvent } from '../../types';\n\n/**\n * The role of the button.\n * - `default` - The default button role.\n * - `cancel` - A button that cancels the current operation.\n * - `destructive` - A button that deletes data or performs a destructive action.\n */\nexport type ButtonRole = 'default' | 'cancel' | 'destructive';\n\n/**\n * The built-in button styles available on iOS.\n *\n * Common styles:\n * - `default` - The default system button style.\n * - `bordered` - A button with a light fill. On Android, equivalent to `FilledTonalButton`.\n * - `borderless` - A button with no background or border. On Android, equivalent to `TextButton`.\n * - `borderedProminent` - A bordered button with a prominent appearance.\n * - `plain` - A button with no border or background and a less prominent text.\n * macOS-only styles:\n * - `accessoryBar` - A button style for accessory bars.\n * - `accessoryBarAction` - A button style for accessory bar actions.\n * - `card` - A button style for cards.\n * - `link` - A button style for links.\n */\nexport type ButtonVariant =\n  // Common\n  | 'default'\n  | 'bordered'\n  | 'plain'\n  // Apple-only\n  | 'borderedProminent'\n  | 'borderless'\n  // MacOS-only;\n  | 'accessoryBar'\n  | 'accessoryBarAction'\n  | 'card'\n  | 'link';\n\nexport type ButtonProps = {\n  /**\n   * A callback that is called when the button is pressed.\n   */\n  onPress?: () => void;\n  /**\n   * A string describing the system image to display in the button.\n   * Uses Material Icons on Android and SF Symbols on iOS.\n   */\n  systemImage?: string;\n  /**\n   * Indicated the role of the button.\n   * @platform ios\n   */\n  role?: ButtonRole;\n  /**\n   * The button variant.\n   */\n  variant?: ButtonVariant;\n  /**\n   * Additional styles to apply to the button.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * The text to display inside the button.\n   */\n  children: string;\n  /**\n   * Button color.\n   */\n  color?: string;\n  /**\n   * Disabled state of the button.\n   */\n  disabled?: boolean;\n};\n\n/**\n * @hidden\n */\nexport type NativeButtonProps = Omit<\n  ButtonProps,\n  'role' | 'onPress' | 'children' | 'systemImage'\n> & {\n  buttonRole?: ButtonRole;\n  text: string;\n  systemImage?: string;\n} & ViewEvent<'onButtonPressed', void>;\n\n// We have to work around the `role` and `onPress` props being reserved by React Native.\nconst ButtonNativeView: React.ComponentType<NativeButtonProps> = requireNativeView(\n  'ExpoUI',\n  'Button'\n);\n\n/**\n * @hidden\n */\nexport function transformButtonProps(props: ButtonProps): NativeButtonProps {\n  const { role, children, onPress, systemImage, ...restProps } = props;\n  return {\n    ...restProps,\n    text: children ?? '',\n    buttonRole: role,\n    systemImage,\n    onButtonPressed: onPress,\n  };\n}\n\n/**\n * Displays a native button component.\n */\nexport function Button(props: ButtonProps) {\n  return <ButtonNativeView {...transformButtonProps(props)} style={props.style} />;\n}\n"]}