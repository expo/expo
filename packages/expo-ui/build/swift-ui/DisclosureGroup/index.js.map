{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/DisclosureGroup/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AAoBrE,MAAM,yBAAyB,GAC7B,iBAAiB,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;AAErD,MAAM,UAAU,eAAe,CAAC,KAA2B;IACzD,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAEpD,SAAS,iBAAiB,CAAC,KAA+C;QACxE,aAAa,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC;IAED,MAAM,gBAAgB,GAAG;QACvB,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,IAAI;KACR,CAAC;IAEF,OAAO,CAAC,yBAAyB,CAAC,IAAI,gBAAgB,CAAC,CAAC,aAAa,CAAC,CAAC,iBAAiB,CAAC,EAAG,CAAC;AAC/F,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { type ViewEvent } from '../../types';\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport interface DisclosureGroupProps extends CommonViewModifierProps {\n  label: string;\n  children: React.ReactNode;\n  /**\n   * Controls whether the disclosure group is expanded.\n   */\n  isExpanded?: boolean;\n  /**\n   * A callback that is called when the expansion state changes.\n   */\n  onStateChange?: (isExpanded: boolean) => void;\n}\n\ntype StateChangeEvent = ViewEvent<'onStateChange', { isExpanded: boolean }>;\n\ntype NativeDisclosureGroupProps = Omit<DisclosureGroupProps, 'onStateChange'> & StateChangeEvent;\n\nconst DisclosureGroupNativeView: React.ComponentType<NativeDisclosureGroupProps> =\n  requireNativeView('ExpoUI', 'DisclosureGroupView');\n\nexport function DisclosureGroup(props: DisclosureGroupProps) {\n  const { onStateChange, modifiers, ...rest } = props;\n\n  function handleStateChange(event: { nativeEvent: { isExpanded: boolean } }) {\n    onStateChange?.(event.nativeEvent.isExpanded);\n  }\n\n  const transformedProps = {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...rest,\n  };\n\n  return <DisclosureGroupNativeView {...transformedProps} onStateChange={handleStateChange} />;\n}\n"]}