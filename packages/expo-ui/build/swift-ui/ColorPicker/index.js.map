{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/ColorPicker/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AACpC,OAAO,EAAwB,YAAY,EAAwB,MAAM,cAAc,CAAC;AA2BxF,MAAM,qBAAqB,GAKvB,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;AAEnD;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,EAAE,SAAS,EAAE,cAAc,EAAE,GAAG,SAAS,EAAoB;IACvF,MAAM,oBAAoB,GAAG,WAAW,CACtC,CAAC,KAA0B,EAAE,EAAE;QAC7B,cAAc,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,EACD,CAAC,cAAc,CAAC,CACjB,CAAC;IACF,OAAO,CACL,CAAC,qBAAqB,CACpB,SAAS,CAAC,CAAC,YAAY,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CACzC,cAAc,CAAC,CAAC,oBAAoB,CAAC,CACrC,IAAI,SAAS,CAAC,EACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { useCallback } from 'react';\nimport { NativeSyntheticEvent, processColor, StyleProp, ViewStyle } from 'react-native';\n\nexport type ColorPickerProps = {\n  /**\n   * The currently selected color in the format `#RRGGBB` or `#RRGGBBAA`.\n   */\n  selection: string | null;\n  /**\n   * A label displayed on the `ColorPicker`.\n   */\n  label?: string;\n  /**\n   * Callback function that is called when a new color is selected.\n   */\n  onValueChanged?: (value: string) => void;\n  /**\n   * Optional style to apply to the `ColorPicker` component.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether the color picker should support opacity.\n   */\n  supportsOpacity?: boolean;\n};\n\ntype OnValueChangedEvent = NativeSyntheticEvent<{ value: string }>;\n\nconst ColorPickerNativeView: React.ComponentType<\n  Omit<ColorPickerProps, 'selection' | 'onValueChanged'> & {\n    selection: ReturnType<typeof processColor>;\n    onValueChanged: (event: OnValueChangedEvent) => void;\n  }\n> = requireNativeView('ExpoUI', 'ColorPickerView');\n\n/**\n * Renders a `ColorPicker` component using SwiftUI.\n * @platform ios\n */\nexport function ColorPicker({ selection, onValueChanged, ...restProps }: ColorPickerProps) {\n  const onNativeValueChanged = useCallback(\n    (event: OnValueChangedEvent) => {\n      onValueChanged?.(event.nativeEvent.value);\n    },\n    [onValueChanged]\n  );\n  return (\n    <ColorPickerNativeView\n      selection={processColor(selection || '')}\n      onValueChanged={onNativeValueChanged}\n      {...restProps}\n    />\n  );\n}\n"]}