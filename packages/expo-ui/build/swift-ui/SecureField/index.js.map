{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/SecureField/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAKzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AAgCrE,wFAAwF;AACxF,MAAM,qBAAqB,GAAgD,iBAAiB,CAC1F,QAAQ,EACR,iBAAiB,CAClB,CAAC;AAEF,SAAS,yBAAyB,CAAC,KAAuB;IACxD,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO;QACL,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,SAAS;QACZ,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;YACxB,KAAK,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,KAAuB;IACjD,OAAO,CAAC,qBAAqB,CAAC,IAAI,yBAAyB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AACzE,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { Ref } from 'react';\n\nimport { type ViewEvent } from '../../types';\nimport { TextFieldKeyboardType } from '../TextField';\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\n/**\n * Can be used for imperatively setting text on the SecureField component.\n */\nexport type SecureFieldRef = {\n  setText: (newText: string) => Promise<void>;\n};\n\nexport type SecureFieldProps = {\n  ref?: Ref<SecureFieldRef>;\n  /**\n   * Initial value that the SecureField displays when being mounted. As the SecureField is an uncontrolled component, change the key prop if you need to change the text value.\n   */\n  defaultValue?: string;\n  /**\n   * A text that is displayed when the field is empty.\n   */\n  placeholder?: string;\n  /**\n   * A callback triggered when user types in text into the SecureField.\n   */\n  onChangeText: (value: string) => void;\n  keyboardType?: TextFieldKeyboardType;\n} & CommonViewModifierProps;\n\ntype NativeSecureFieldProps = Omit<SecureFieldProps, 'onChangeText'> & {} & ViewEvent<\n    'onValueChanged',\n    { value: string }\n  >;\n\n// We have to work around the `role` and `onPress` props being reserved by React Native.\nconst SecureFieldNativeView: React.ComponentType<NativeSecureFieldProps> = requireNativeView(\n  'ExpoUI',\n  'SecureFieldView'\n);\n\nfunction transformSecureFieldProps(props: SecureFieldProps): NativeSecureFieldProps {\n  const { modifiers, ...restProps } = props;\n  return {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...restProps,\n    onValueChanged: (event) => {\n      props.onChangeText?.(event.nativeEvent.value);\n    },\n  };\n}\n\n/**\n * Renders a `SecureField` component. Should mostly be used for embedding text inputs inside of SwiftUI lists and sections. Is an uncontrolled component.\n */\nexport function SecureField(props: SecureFieldProps) {\n  return <SecureFieldNativeView {...transformSecureFieldProps(props)} />;\n}\n"]}