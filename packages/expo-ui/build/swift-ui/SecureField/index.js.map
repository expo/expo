{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/SecureField/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAIzC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAwB/B,wFAAwF;AACxF,MAAM,qBAAqB,GAAgD,iBAAiB,CAC1F,QAAQ,EACR,iBAAiB,CAClB,CAAC;AAEF;;GAEG;AACH,SAAS,yBAAyB,CAAC,KAAuB;IACxD,OAAO;QACL,GAAG,KAAK;QACR,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;YACxB,KAAK,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,KAA0D;IACpF,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,aAAa,CACrC;MAAA,CAAC,oBAAoB,CAAC,IAAI,KAAK,CAAC,EAClC;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAuB;IAC1D,OAAO,CAAC,qBAAqB,CAAC,IAAI,yBAAyB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AACzE,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nimport { ViewEvent } from '../../types';\nimport { Host } from '../Host';\nimport { TextFieldKeyboardType } from '../TextField';\n\nexport type SecureFieldProps = {\n  /**\n   * Initial value that the SecureField displays when being mounted. As the SecureField is an uncontrolled component, change the key prop if you need to change the text value.\n   */\n  defaultValue?: string;\n  /**\n   * A text that is displayed when the field is empty.\n   */\n  placeholder?: string;\n  /**\n   * A callback triggered when user types in text into the SecureField.\n   */\n  onChangeText: (value: string) => void;\n  keyboardType?: TextFieldKeyboardType;\n};\n\nexport type NativeSecureFieldProps = Omit<SecureFieldProps, 'onChangeText'> & {} & ViewEvent<\n    'onValueChanged',\n    { value: string }\n  >;\n\n// We have to work around the `role` and `onPress` props being reserved by React Native.\nconst SecureFieldNativeView: React.ComponentType<NativeSecureFieldProps> = requireNativeView(\n  'ExpoUI',\n  'SecureFieldView'\n);\n\n/**\n * @hidden\n */\nfunction transformSecureFieldProps(props: SecureFieldProps): NativeSecureFieldProps {\n  return {\n    ...props,\n    onValueChanged: (event) => {\n      props.onChangeText?.(event.nativeEvent.value);\n    },\n  };\n}\n\n/**\n * Renders a `SecureField` component. Should mostly be used for embedding text inputs inside of SwiftUI lists and sections. Is an uncontrolled component.\n */\nexport function SecureField(props: SecureFieldProps & { style?: StyleProp<ViewStyle> }) {\n  return (\n    <Host style={props.style} matchContents>\n      <SecureFieldPrimitive {...props} />\n    </Host>\n  );\n}\n\n/**\n * `<SecureField>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\nexport function SecureFieldPrimitive(props: SecureFieldProps) {\n  return <SecureFieldNativeView {...transformSecureFieldProps(props)} />;\n}\n"]}