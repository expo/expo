{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/ShareLink/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAEzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AA8BrE,MAAM,mBAAmB,GAAwC,iBAAiB,CAChF,QAAQ,EACR,eAAe,CAChB,CAAC;AAEF;;;;;;GAMG;AACH,MAAM,UAAU,SAAS,CAAC,KAAqB;IAC7C,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO,CACL,CAAC,mBAAmB,CAClB,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CACzE,IAAI,SAAS,CAAC,EACd,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport type ShareLinkProps = {\n  /**\n   * The URL or item to be shared.\n   * This can be a web URL, a file path, or any other shareable item.\n   */\n  item: string;\n  /**\n   * Optional subject for the share action.\n   * This is typically used as the title of the shared content.\n   */\n  subject?: string;\n  /**\n   * Optional message for the share action.\n   * This is typically used as a description or additional information about the shared content.\n   */\n  message?: string;\n  /**\n   * Optional preview for the share action.\n   * This can include a title and an image to be displayed in the share dialog.\n   */\n  preview?: { title: string; image: string };\n  /**\n   * Optional children to be rendered inside the share link.\n   */\n  children?: React.ReactNode;\n} & CommonViewModifierProps;\n\nconst ShareLinkNativeView: React.ComponentType<ShareLinkProps> = requireNativeView(\n  'ExpoUI',\n  'ShareLinkView'\n);\n\n/**\n * Renders the native ShareLink component with the provided properties.\n *\n * @param {ShareLinkProps} props - The properties passed to the ShareLink component.\n * @returns {JSX.Element} The rendered native ShareLink component.\n * @platform ios\n */\nexport function ShareLink(props: ShareLinkProps) {\n  const { modifiers, ...restProps } = props;\n  return (\n    <ShareLinkNativeView\n      modifiers={modifiers}\n      {...(modifiers ? createViewModifierEventListener(modifiers) : undefined)}\n      {...restProps}\n    />\n  );\n}\n"]}