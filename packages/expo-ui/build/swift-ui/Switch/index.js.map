{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Switch/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAiDzC,MAAM,gBAAgB,GAA2C,iBAAiB,CAChF,QAAQ,EACR,YAAY,CACb,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAkB;IACrD,OAAO;QACL,GAAG,KAAK;QACR,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,QAAQ;QAClC,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,aAAa,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;YAC5C,KAAK,EAAE,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;KACmB,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { NativeSyntheticEvent, StyleProp, ViewStyle } from 'react-native';\n\nexport type SwitchProps = {\n  /**\n   * Indicates whether the switch is checked.\n   */\n  value: boolean;\n  /**\n   * Label for the switch.\n   */\n  label?: string;\n\n  /**\n   * Type of the switch component. Can be `'checkbox'`, `'switch'`, or `'button'`.\n   * @default 'switch'\n   */\n  variant?: 'checkbox' | 'switch' | 'button';\n  /**\n   * Callback function that is called when the checked state changes.\n   */\n  onValueChange?: (value: boolean) => void;\n  /**\n   * Optional style for the switch component.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Picker color. On iOS, it only applies to the `menu` variant.\n   */\n  color?: string;\n} & (SwitchSwitchVariantProps | SwitchCheckboxVariantProps | SwitchButtonVariantProps);\n\nexport type SwitchSwitchVariantProps = {\n  variant?: 'switch';\n};\n\nexport type SwitchCheckboxVariantProps = {\n  variant: 'checkbox';\n};\n\nexport type SwitchButtonVariantProps = {\n  variant: 'button';\n  elementColors?: undefined;\n};\n\ntype NativeSwitchProps = Omit<SwitchProps, 'onValueChange'> & {\n  onValueChange: (event: NativeSyntheticEvent<{ value: boolean }>) => void;\n};\n\nconst SwitchNativeView: React.ComponentType<NativeSwitchProps> = requireNativeView(\n  'ExpoUI',\n  'SwitchView'\n);\n\n/**\n * @hidden\n */\nexport function transformSwitchProps(props: SwitchProps): NativeSwitchProps {\n  return {\n    ...props,\n    variant: props.variant ?? 'switch',\n    color: props.color,\n    onValueChange: ({ nativeEvent: { value } }) => {\n      props?.onValueChange?.(value);\n    },\n  } as NativeSwitchProps;\n}\n\nexport function Switch(props: SwitchProps) {\n  return <SwitchNativeView {...transformSwitchProps(props)} />;\n}\n"]}