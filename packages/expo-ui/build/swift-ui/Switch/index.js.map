{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Switch/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AA4C/B,MAAM,gBAAgB,GAA2C,iBAAiB,CAChF,QAAQ,EACR,YAAY,CACb,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAkB;IACrD,OAAO;QACL,GAAG,KAAK;QACR,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,QAAQ;QAClC,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,aAAa,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;YAC5C,KAAK,EAAE,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;KACmB,CAAC;AACzB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,KAAkB;IAChD,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,MAAM,CAAC,KAAqD;IAC1E,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,aAAa,CACrC;MAAA,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,EAC7B;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { NativeSyntheticEvent, StyleProp, ViewStyle } from 'react-native';\n\nimport { Host } from '../Host';\n\nexport type SwitchProps = {\n  /**\n   * Indicates whether the switch is checked.\n   */\n  value: boolean;\n  /**\n   * Label for the switch.\n   */\n  label?: string;\n\n  /**\n   * Type of the switch component. Can be `'checkbox'`, `'switch'`, or `'button'`.\n   * @default 'switch'\n   */\n  variant?: 'checkbox' | 'switch' | 'button';\n  /**\n   * Callback function that is called when the checked state changes.\n   */\n  onValueChange?: (value: boolean) => void;\n  /**\n   * Picker color. On iOS, it only applies to the `menu` variant.\n   */\n  color?: string;\n} & (SwitchSwitchVariantProps | SwitchCheckboxVariantProps | SwitchButtonVariantProps);\n\nexport type SwitchSwitchVariantProps = {\n  variant?: 'switch';\n};\n\nexport type SwitchCheckboxVariantProps = {\n  variant: 'checkbox';\n};\n\nexport type SwitchButtonVariantProps = {\n  variant: 'button';\n  elementColors?: undefined;\n};\n\ntype NativeSwitchProps = Omit<SwitchProps, 'onValueChange'> & {\n  onValueChange: (event: NativeSyntheticEvent<{ value: boolean }>) => void;\n};\n\nconst SwitchNativeView: React.ComponentType<NativeSwitchProps> = requireNativeView(\n  'ExpoUI',\n  'SwitchView'\n);\n\n/**\n * @hidden\n */\nexport function transformSwitchProps(props: SwitchProps): NativeSwitchProps {\n  return {\n    ...props,\n    variant: props.variant ?? 'switch',\n    color: props.color,\n    onValueChange: ({ nativeEvent: { value } }) => {\n      props?.onValueChange?.(value);\n    },\n  } as NativeSwitchProps;\n}\n\n/**\n * `<Switch>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\nexport function SwitchPrimitive(props: SwitchProps) {\n  return <SwitchNativeView {...transformSwitchProps(props)} />;\n}\n\n/**\n * Displays a native switch component.\n */\nexport function Switch(props: SwitchProps & { style?: StyleProp<ViewStyle> }) {\n  return (\n    <Host style={props.style} matchContents>\n      <SwitchPrimitive {...props} />\n    </Host>\n  );\n}\n"]}