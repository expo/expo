{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Picker/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAEzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AAgCrE,MAAM,gBAAgB,GAAqC,iBAAiB,CAC1E,QAAQ,EACR,YAAY,CACb,CAAC;AAIF,SAAS,oBAAoB,CAAC,KAAkB;IAC9C,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO;QACL,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,SAAS;QACZ,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,WAAW;QACrC,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport type PickerProps = {\n  /**\n   * An array of options to be displayed in the picker.\n   */\n  options: string[];\n  /**\n   * The index of the currently selected option.\n   */\n  selectedIndex: number | null;\n  /**\n   * A label displayed on the picker when in `'menu'` variant inside a form section on iOS.\n   */\n  label?: string;\n  /**\n   * Callback function that is called when an option is selected.\n   */\n  onOptionSelected?: (event: { nativeEvent: { index: number; label: string } }) => void;\n  /**\n   * The variant of the picker, which determines its appearance and behavior.\n   * The `'wheel'`, `'inline'`, `'palette'` and `'menu'` variants are iOS only, the `'radio'` variant is Android only. The `'inline'` variant can only be used inside sections or lists. The `'palette'` variant displays differently inside menus.\n   * @default 'segmented'\n   */\n  variant?: 'wheel' | 'segmented' | 'menu' | 'inline' | 'palette';\n  /**\n   * Picker color. On iOS it only applies to the `'menu'` variant.\n   */\n  color?: string;\n} & CommonViewModifierProps;\n\nconst PickerNativeView: React.ComponentType<PickerProps> = requireNativeView(\n  'ExpoUI',\n  'PickerView'\n);\n\ntype NativePickerProps = PickerProps;\n\nfunction transformPickerProps(props: PickerProps): NativePickerProps {\n  const { modifiers, ...restProps } = props;\n  return {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...restProps,\n    variant: props.variant ?? 'segmented',\n    color: props.color,\n  };\n}\n\n/**\n * Displays a native picker component. Depending on the variant it can be a segmented button, an inline picker, a list of choices or a radio button.\n */\nexport function Picker(props: PickerProps) {\n  return <PickerNativeView {...transformPickerProps(props)} />;\n}\n"]}