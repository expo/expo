{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Section/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAU/B,MAAM,iBAAiB,GAAsC,iBAAiB,CAC5E,QAAQ,EACR,aAAa,CACd,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,gBAAgB,CAAC,KAAmB;IAClD,OAAO,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AAC1C,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,OAAO,CAAC,KAAsD;IAC5E,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,aAAa,CACrC;MAAA,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,EAC9B;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nimport { Host } from '../Host';\n\nexport type SectionProps = {\n  /**\n   * On iOS, section titles are usually capitalized for consistency with platform conventions.\n   */\n  title?: string;\n  children: any;\n};\n\nconst SectionNativeView: React.ComponentType<SectionProps> = requireNativeView(\n  'ExpoUI',\n  'SectionView'\n);\n\n/**\n * `<Section>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\nexport function SectionPrimitive(props: SectionProps) {\n  return <SectionNativeView {...props} />;\n}\n\n/**\n * Section component uses the native [Section](https://developer.apple.com/documentation/swiftui/section) component.\n * It has no intrinsic dimensions, so it needs explicit height or flex set to display content (like ScrollView).\n * @platform ios\n */\nexport function Section(props: SectionProps & { style?: StyleProp<ViewStyle> }) {\n  return (\n    <Host style={props.style} matchContents>\n      <SectionPrimitive {...props} />\n    </Host>\n  );\n}\n"]}