{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/TextInput/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAIzC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAyH/B,wFAAwF;AACxF,MAAM,mBAAmB,GAA8C,iBAAiB,CACtF,QAAQ,EACR,eAAe,CAChB,CAAC;AAEF;;GAEG;AACH,SAAS,uBAAuB,CAAC,KAAqB;IACpD,OAAO;QACL,GAAG,KAAK;QACR,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;YACxB,KAAK,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;QACD,gBAAgB,EAAE,GAAG,EAAE;YACrB,KAAK,CAAC,gBAAgB,EAAE,EAAE,CAAC;QAC7B,CAAC;QACD,eAAe,EAAE,GAAG,EAAE;YACpB,KAAK,CAAC,eAAe,EAAE,EAAE,CAAC;QAC5B,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,KAAwD;IAChF,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,aAAa,CACrC;MAAA,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,EAChC;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAAC,KAAqB;IACtD,OAAO,CAAC,mBAAmB,CAAC,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AACrE,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nimport { ViewEvent } from '../../types';\nimport { Host } from '../Host';\n\n/**\n * @hidden Not used anywhere yet.\n */\nexport type TextInputRole = 'default' | 'cancel' | 'destructive';\n\ninterface TextStyleProps {\n  color?: string;\n  size?: number;\n  lineHeight?: number;\n  letterSpacing?: number;\n  height?: number;\n  fontFamily?: string;\n  fontWeight?: string;\n}\n\nexport type TextInputProps = {\n  /**\n   * Initial value that the TextInput displays when being mounted. As the TextInput is an uncontrolled component, change the key prop if you need to change the text value.\n   */\n  defaultValue?: string;\n  /**\n   * A callback triggered when user types in text into the TextInput.\n   */\n  onChangeText: (value: string) => void;\n  /**\n   * A callback triggered when user focus TextInput.\n   */\n  onTextFieldFocus: () => void;\n  /**\n   * A callback triggered when user blur TextInput.\n   */\n  onTextFieldBlur: () => void;\n  /**\n   * The string that will be rendered before text input has been entered.\n   */\n  placeholder?: string;\n  /**\n   * If true, the text input can be multiple lines.\n   * While the content will wrap, there's no keyboard button to insert a new line.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to display when `multiline` is set to true.\n   * If the number of lines in the view is above this number, the view scrolls.\n   * @default undefined, which means unlimited lines.\n   */\n  numberOfLines?: number;\n  /**\n   * Determines which keyboard to open. For example, `'numeric'`.\n   *\n   * Available options:\n   * - default\n   * - numeric\n   * - email-address\n   * - phone-pad\n   * - decimal-pad\n   * - ascii-capable\n   * - url\n   * - numbers-and-punctuation\n   * - name-phone-pad\n   * - twitter\n   * - web-search\n   * - ascii-capable-number-pad\n   *\n   * @default default\n   */\n  keyboardType?:\n    | 'default'\n    | 'email-address'\n    | 'numeric'\n    | 'phone-pad'\n    | 'ascii-capable'\n    | 'numbers-and-punctuation'\n    | 'url'\n    | 'name-phone-pad'\n    | 'decimal-pad'\n    | 'twitter'\n    | 'web-search'\n    | 'ascii-capable-number-pad';\n  /**\n   * If true, autocorrection is enabled.\n   * @default true\n   */\n  autocorrection?: boolean;\n  /**\n   * If true, the text input is editable.\n   */\n  editable: boolean;\n  /**\n   * The string with the testId for E2E tests.\n   */\n  testID: string;\n  /**\n   * Text styles object.\n   * @default undefined, which means default text style.\n   */\n  style: TextStyleProps | undefined;\n  /**\n   * If true, password text field will be showed.\n   */\n  secureEntry: boolean;\n  /**\n   * The mask that should be aplied to the field. Please follow the following pattern:\n   * [0]: mandatory digit. For instance, [000] will allow entering three digits: 123.\n     [9]: optional digit.For instance, [00099] will allow entering up to five digits, but at least three.\n     [A]: mandatory letter. For instance, [AAA] will allow entering three letters: ABC.\n     [a]: optional letter. [АААааа] will allow entering from three to six letters.\n     [_]: mandatory symbol (digit or letter).\n     [-]: optional symbol (digit or letter).\n     […]: ellipsis. Allows to enter endless count of symbols.\n   */\n  mask?: string;\n};\n\nexport type NativeTextInputProps = Omit<TextInputProps, 'onChangeText'> & {} & ViewEvent<\n    'onValueChanged',\n    { value: string }\n  >;\n\n// We have to work around the `role` and `onPress` props being reserved by React Native.\nconst TextInputNativeView: React.ComponentType<NativeTextInputProps> = requireNativeView(\n  'ExpoUI',\n  'TextInputView'\n);\n\n/**\n * @hidden\n */\nfunction transformTextInputProps(props: TextInputProps): NativeTextInputProps {\n  return {\n    ...props,\n    onValueChanged: (event) => {\n      props.onChangeText?.(event.nativeEvent.value);\n    },\n    onTextFieldFocus: () => {\n      props.onTextFieldFocus?.();\n    },\n    onTextFieldBlur: () => {\n      props.onTextFieldBlur?.();\n    }\n  };\n}\n\n/**\n * Renders a `TextInput` component. Should mostly be used for embedding text inputs inside of SwiftUI lists and sections. Is an uncontrolled component.\n */\nexport function TextInput(props: TextInputProps & { style?: StyleProp<ViewStyle> }) {\n  return (\n    <Host style={props.style} matchContents>\n      <TextInputPrimitive {...props} />\n    </Host>\n  );\n}\n\n/**\n * `<TextInput>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\nexport function TextInputPrimitive(props: TextInputProps) {\n  return <TextInputNativeView {...transformTextInputProps(props)} />;\n}\n"]}