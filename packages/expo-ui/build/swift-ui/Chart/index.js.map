{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Chart/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AAqKrE,MAAM,eAAe,GAAoC,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAElG;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAC,EACpB,KAAK,EACL,IAAI,EACJ,SAAS,EACT,GAAG,KAAK,EACsC;IAC9C,OAAO,CACL,CAAC,eAAe,CACd,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,SAAS,CAAC,CAAC,SAAS,CAAC,CACrB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CACzE,IAAI,KAAK,CAAC,EACV,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { ColorValue, StyleProp, ViewStyle } from 'react-native';\n\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { CommonViewModifierProps } from '../types';\n\n/**\n * The type of chart to display.\n * - `line` charts show continuous lines with optional dash array, width, point symbols, and color.\n * - `point` charts show discrete colored points with optional point style (circle, square, diamond) and size.\n * - `bar` charts show vertical bars using system colors or individual ChartDataPoint colors, with optional corner radius and width styling.\n * - `area` charts show filled areas under lines with color.\n * - `pie` charts show pie slices with optional inner radius and angular inset. Pie charts require iOS 17.0+.\n * @platform ios\n */\nexport type ChartType = 'line' | 'point' | 'bar' | 'area' | 'pie';\n\n/**\n * Point symbol style options.\n * @platform ios\n */\nexport type PointStyle = 'circle' | 'square' | 'diamond';\n\n/**\n * Data point for the chart.\n * @platform ios\n */\nexport type ChartDataPoint = {\n  /**\n   * X-axis value (label).\n   */\n  x: string;\n  /**\n   * Y-axis value (numeric).\n   */\n  y: number;\n  /**\n   * Optional color for this specific data point.\n   */\n  color?: ColorValue;\n};\n\n/**\n * Line chart specific styling options.\n */\nexport type LineChartStyle = {\n  /**\n   * Dash pattern array. Empty array or undefined for solid lines.\n   * @example [5, 5] for dashed line, [2, 2] for dotted line\n   */\n  dashArray?: number[];\n  /**\n   * Line stroke width.\n   */\n  width?: number;\n  /**\n   * Point symbol style.\n   */\n  pointStyle?: PointStyle;\n  /**\n   * Point symbol size.\n   */\n  pointSize?: number;\n  /**\n   * Line color.\n   */\n  color?: ColorValue;\n};\n\n/**\n * Area chart specific styling options.\n */\nexport type AreaChartStyle = {\n  /**\n   * Area fill color.\n   */\n  color?: ColorValue;\n};\n\n/**\n * Bar chart specific styling options.\n */\nexport type BarChartStyle = {\n  /**\n   * Corner radius for rounded bar corners.\n   */\n  cornerRadius?: number;\n  /**\n   * Custom bar width.\n   */\n  width?: number;\n};\n\n/**\n * Pie chart specific styling options.\n */\nexport type PieChartStyle = {\n  /**\n   * Inner radius ratio (0.0 = full pie, 0.5 = donut).\n   */\n  innerRadius?: number;\n  /**\n   * Space between slices in points.\n   */\n  angularInset?: number;\n};\n\n/**\n * Point chart specific styling options.\n */\nexport type PointChartStyle = {\n  /**\n   * Point symbol style.\n   */\n  pointStyle?: PointStyle;\n  /**\n   * Point symbol size.\n   */\n  pointSize?: number;\n};\n\nexport type ChartProps = {\n  /**\n   * Array of data points to display.\n   */\n  data: ChartDataPoint[];\n  /**\n   * Type of chart to render.\n   */\n  type?: ChartType;\n  /**\n   * Whether to show grid lines.\n   */\n  showGrid?: boolean;\n  /**\n   * Whether to animate chart changes.\n   */\n  animate?: boolean;\n  /**\n   * Whether to show chart legend.\n   * - Only works when individual dataPoint colors are NOT provided (uses categorical styling)\n   * - Useful for `bar` and `pie` charts (shows category colors)\n   * - Not applicable for `line` and `area` charts (single-series data)\n   * - If dataPoint has individual colors, legend won't appear - use data without colors to see legend\n   */\n  showLegend?: boolean;\n  /**\n   * Line chart specific styling options.\n   */\n  lineStyle?: LineChartStyle;\n  /**\n   * Point chart specific styling options.\n   */\n  pointStyle?: PointChartStyle;\n  /**\n   * Area chart specific styling options.\n   */\n  areaStyle?: AreaChartStyle;\n  /**\n   * Bar chart specific styling options.\n   */\n  barStyle?: BarChartStyle;\n  /**\n   * Pie chart specific styling options.\n   */\n  pieStyle?: PieChartStyle;\n} & CommonViewModifierProps;\n\nconst ChartNativeView: React.ComponentType<ChartProps> = requireNativeView('ExpoUI', 'ChartView');\n\n/**\n * Renders a native Chart component using Swift Charts.\n * @platform ios\n */\nexport function Chart({\n  style,\n  data,\n  modifiers,\n  ...props\n}: ChartProps & { style?: StyleProp<ViewStyle> }) {\n  return (\n    <ChartNativeView\n      data={data}\n      modifiers={modifiers}\n      {...(modifiers ? createViewModifierEventListener(modifiers) : undefined)}\n      {...props}\n    />\n  );\n}\n"]}