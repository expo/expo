{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/TextField/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAIzC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AA0E/B,wFAAwF;AACxF,MAAM,mBAAmB,GAA8C,iBAAiB,CACtF,QAAQ,EACR,eAAe,CAChB,CAAC;AAEF;;GAEG;AACH,SAAS,uBAAuB,CAAC,KAAqB;IACpD,OAAO;QACL,GAAG,KAAK;QACR,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;YACxB,KAAK,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,KAAwD;IAChF,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,aAAa,CACrC;MAAA,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,EAChC;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,kBAAkB,CAAC,KAAqB;IACtD,OAAO,CAAC,mBAAmB,CAAC,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AACrE,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nimport { ViewEvent } from '../../types';\nimport { Host } from '../Host';\n\n/**\n * Determines which keyboard to open. For example, `'numeric'`.\n *\n * Available options:\n * - default\n * - numeric\n * - email-address\n * - phone-pad\n * - decimal-pad\n * - ascii-capable\n * - url\n * - numbers-and-punctuation\n * - name-phone-pad\n * - twitter\n * - web-search\n * - ascii-capable-number-pad\n *\n * @default default\n */\nexport type TextFieldKeyboardType =\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'decimal-pad'\n  | 'twitter'\n  | 'web-search'\n  | 'ascii-capable-number-pad';\n\nexport type TextFieldProps = {\n  /**\n   * Initial value that the TextField displays when being mounted. As the TextField is an uncontrolled component, change the key prop if you need to change the text value.\n   */\n  defaultValue?: string;\n  /**\n   * A text that is displayed when the field is empty.\n   */\n  placeholder?: string;\n  /**\n   * A callback triggered when user types in text into the TextField.\n   */\n  onChangeText: (value: string) => void;\n  /**\n   * If true, the text input can be multiple lines.\n   * While the content will wrap, there's no keyboard button to insert a new line.\n   */\n  multiline?: boolean;\n  allowNewlines?: boolean;\n  /**\n   * The number of lines to display when `multiline` is set to true.\n   * If the number of lines in the view is above this number, the view scrolls.\n   * @default undefined, which means unlimited lines.\n   */\n  numberOfLines?: number;\n\n  keyboardType?: TextFieldKeyboardType;\n  /**\n   * If true, autocorrection is enabled.\n   * @default true\n   */\n  autocorrection?: boolean;\n};\n\nexport type NativeTextFieldProps = Omit<TextFieldProps, 'onChangeText'> & {} & ViewEvent<\n    'onValueChanged',\n    { value: string }\n  >;\n\n// We have to work around the `role` and `onPress` props being reserved by React Native.\nconst TextFieldNativeView: React.ComponentType<NativeTextFieldProps> = requireNativeView(\n  'ExpoUI',\n  'TextFieldView'\n);\n\n/**\n * @hidden\n */\nfunction transformTextFieldProps(props: TextFieldProps): NativeTextFieldProps {\n  return {\n    ...props,\n    onValueChanged: (event) => {\n      props.onChangeText?.(event.nativeEvent.value);\n    },\n  };\n}\n\n/**\n * Renders a `TextField` component. Should mostly be used for embedding text inputs inside of SwiftUI lists and sections. Is an uncontrolled component.\n */\nexport function TextField(props: TextFieldProps & { style?: StyleProp<ViewStyle> }) {\n  return (\n    <Host style={props.style} matchContents>\n      <TextFieldPrimitive {...props} />\n    </Host>\n  );\n}\n\n/**\n * `<TextField>` component without a host view.\n * You should use this with a `Host` component in ancestor.\n */\nexport function TextFieldPrimitive(props: TextFieldProps) {\n  return <TextFieldNativeView {...transformTextFieldProps(props)} />;\n}\n"]}