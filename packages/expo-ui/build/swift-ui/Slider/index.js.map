{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Slider/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC,OAAO,EAAE,+BAA+B,EAAE,MAAM,oBAAoB,CAAC;AAqCrE,MAAM,gBAAgB,GAA2C,iBAAiB,CAChF,QAAQ,EACR,YAAY,CACb,CAAC;AAEF,SAAS,oBAAoB,CAAC,KAAkB;IAC9C,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO;QACL,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,SAAS;QACZ,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;QACnB,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;QACnB,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,CAAC;QACvB,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,CAAC;QACvB,cAAc,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;YAC7C,KAAK,EAAE,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QACD,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { type ViewEvent } from '../../types';\nimport { createViewModifierEventListener } from '../modifiers/utils';\nimport { type CommonViewModifierProps } from '../types';\n\nexport type SliderProps = {\n  /**\n   * The current value of the slider.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * The number of steps between the minimum and maximum values, `0` signifies infinite steps.\n   * @default 0\n   */\n  steps?: number;\n  /**\n   * The minimum value of the slider. Updating this value does not trigger callbacks if the current value is below `min`.\n   * @default 0\n   */\n  min?: number;\n  /**\n   * The maximum value of the slider. Updating this value does not trigger callbacks if the current value is above `max`.\n   * @default 1\n   */\n  max?: number;\n  /**\n   * Slider color.\n   */\n  color?: string;\n  /**\n   * Callback triggered on dragging along the slider.\n   */\n  onValueChange?: (value: number) => void;\n} & CommonViewModifierProps;\n\ntype NativeSliderProps = Omit<SliderProps, 'onValueChange'> &\n  ViewEvent<'onValueChanged', { value: number }>;\n\nconst SliderNativeView: React.ComponentType<NativeSliderProps> = requireNativeView(\n  'ExpoUI',\n  'SliderView'\n);\n\nfunction transformSliderProps(props: SliderProps): NativeSliderProps {\n  const { modifiers, ...restProps } = props;\n  return {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...restProps,\n    min: props.min ?? 0,\n    max: props.max ?? 1,\n    steps: props.steps ?? 0,\n    value: props.value ?? 0,\n    onValueChanged: ({ nativeEvent: { value } }) => {\n      props?.onValueChange?.(value);\n    },\n    color: props.color,\n  };\n}\n\nexport function Slider(props: SliderProps) {\n  return <SliderNativeView {...transformSliderProps(props)} />;\n}\n"]}