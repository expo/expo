{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/swift-ui/Slider/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAIzC,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAoC/B,MAAM,gBAAgB,GAA2C,iBAAiB,CAChF,QAAQ,EACR,YAAY,CACb,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAkB;IACrD,OAAO;QACL,GAAG,KAAK;QACR,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;QACnB,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC;QACnB,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,CAAC;QACvB,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,CAAC;QACvB,cAAc,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;YAC7C,KAAK,EAAE,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;QACD,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,KAAkB;IAChD,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAqD;IAC1E,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,aAAa,CACrC;MAAA,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,EAC7B;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nimport { ViewEvent } from '../../types';\nimport { Host } from '../Host';\n\nexport type SliderProps = {\n  /**\n   * The current value of the slider.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * The number of steps between the minimum and maximum values, `0` signifies infinite steps.\n   * @default 0\n   */\n  steps?: number;\n  /**\n   * The minimum value of the slider. Updating this value does not trigger callbacks if the current value is below `min`.\n   * @default 0\n   */\n  min?: number;\n  /**\n   * The maximum value of the slider. Updating this value does not trigger callbacks if the current value is above `max`.\n   * @default 1\n   */\n  max?: number;\n  /**\n   * Slider color.\n   */\n  color?: string;\n  /**\n   * Callback triggered on dragging along the slider.\n   */\n  onValueChange?: (value: number) => void;\n};\n\ntype NativeSliderProps = Omit<SliderProps, 'onValueChange'> &\n  ViewEvent<'onValueChanged', { value: number }>;\n\nconst SliderNativeView: React.ComponentType<NativeSliderProps> = requireNativeView(\n  'ExpoUI',\n  'SliderView'\n);\n\n/**\n * @hidden\n */\nexport function transformSliderProps(props: SliderProps): NativeSliderProps {\n  return {\n    ...props,\n    min: props.min ?? 0,\n    max: props.max ?? 1,\n    steps: props.steps ?? 0,\n    value: props.value ?? 0,\n    onValueChanged: ({ nativeEvent: { value } }) => {\n      props?.onValueChange?.(value);\n    },\n    color: props.color,\n  };\n}\n\nexport function SliderPrimitive(props: SliderProps) {\n  return <SliderNativeView {...transformSliderProps(props)} />;\n}\n\nexport function Slider(props: SliderProps & { style?: StyleProp<ViewStyle> }) {\n  return (\n    <Host style={props.style} matchContents>\n      <SliderPrimitive {...props} />\n    </Host>\n  );\n}\n"]}