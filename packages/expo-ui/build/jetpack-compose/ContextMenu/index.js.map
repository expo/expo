{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/jetpack-compose/ContextMenu/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAE,QAAQ,EAA2B,OAAO,EAAE,MAAM,OAAO,CAAC;AAGnE,OAAO,EAAe,+BAA+B,EAAE,MAAM,SAAS,CAAC;AAKvE,MAAM,cAAc,GAAyC,iBAAiB,CAC5E,QAAQ,EACR,aAAa,CACd,CAAC;AAmGF,MAAM,UAAU,OAAO;IACrB,OAAO,EAAE,GAAG,CAAC;AACf,CAAC;AAED,MAAM,UAAU,KAAK;IACnB,OAAO,EAAE,GAAG,CAAC;AACf,CAAC;AACD,KAAK,CAAC,GAAG,GAAG,OAAO,CAAC;AAEpB,MAAM,UAAU,OAAO,CAAC,KAAoC;IAC1D,OAAO,EAAE,GAAG,CAAC;AACf,CAAC;AACD,OAAO,CAAC,GAAG,GAAG,SAAS,CAAC;AAExB,MAAM,UAAU,OAAO,CAAC,KAAoC;IAC1D,OAAO,EAAE,GAAG,CAAC;AACf,CAAC;AAED,SAAS,WAAW,CAAC,KAAuB;IAC1C,MAAM,gBAAgB,GAAkB,EAAE,CAAC;IAC3C,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAClC,KAAK,CAAC,QAAe,EACrB,CAAC,CAAkE,EAAE,EAAE,CACrE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CACrD,CAAC;IACF,MAAM,iBAAiB,GAAG,OAAO,CAC/B,GAAG,EAAE,CAAC,+BAA+B,CAAC,eAAe,EAAE,gBAAgB,CAAC,EACxE,CAAC,eAAe,CAAC,CAClB,CAAC;IAEF,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CACpC,KAAK,CAAC,QAAe,EACrB,CAAC,CAAkE,EAAE,EAAE,CACrE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CACvD,CAAC;IAEF,MAAM,kBAAkB,GACtB,CAAC,WAAmB,EAAE,EAAE,CAAC,CAAC,CAAyD,EAAE,EAAE;QACrF,MAAM,OAAO,GAAG,gBAAgB,CAAC,CAAC,CAAC,WAAW,CAAC,oBAAoB,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;QACpF,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC;IAEJ,OAAO,CACL,CAAC,cAAc,CACb,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CACnB,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAC5B,0BAA0B,CAAC,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAC1D,+BAA+B,CAAC,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CACrE,iCAAiC,CAAC,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC,CAC1E,IAAI,KAAK,CAAC,CACV;MAAA,CAAC,iBAAiB,CACpB;IAAA,EAAE,cAAc,CAAC,CAClB,CAAC;AACJ,CAAC;AAED,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;AAC9B,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;AAC9B,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC;AAE1B,OAAO,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { Children, ReactElement, ReactNode, useMemo } from 'react';\nimport { NativeSyntheticEvent, StyleProp, ViewStyle } from 'react-native';\n\nimport { MenuElement, transformChildrenToElementArray } from './utils';\nimport { ButtonProps } from '../Button';\nimport { PickerProps } from '../Picker';\nimport { SwitchProps } from '../Switch';\n\nconst MenuNativeView: React.ComponentType<NativeMenuProps> = requireNativeView(\n  'ExpoUI',\n  'ContextMenu'\n);\n\ntype SubmenuElement =\n  | ReactElement<ButtonProps>\n  | ReactElement<SwitchProps>\n  | ReactElement<PickerProps>\n  | ReactElement<SubmenuProps>;\n\nexport type ContextMenuContentProps = {\n  children: SubmenuElement | SubmenuElement[];\n};\n\n/**\n * @hidden\n */\nexport type EventHandlers = Record<\n  string,\n  Record<string, (event: NativeSyntheticEvent<any>) => void>\n>;\n\n/**\n * @hidden\n */\nexport type ContextMenuElementBase = { contextMenuElementID: string };\n\n/**\n * Activation method of the context menu.\n * - `singlePress`: The context menu is opened with a single tap. Does not isolate the content.\n * - `longPress`: The context menu is opened with a long press. On iOS additionally Highlights the content by blurring the background.\n */\nexport type ActivationMethod = 'singlePress' | 'longPress';\n\n/**\n * Props of the `ContextMenu` component.\n */\nexport type ContextMenuProps = {\n  /**\n   * Determines how the context menu will be activated.\n   *\n   * @platform ios\n   */\n  activationMethod?: ActivationMethod;\n\n  /**\n   * The contents of the submenu are used as an anchor for the context menu.\n   * The children will be wrapped in a pressable element, which triggers opening of the context menu.\n   */\n  children: ReactNode;\n\n  /**\n   * The color of the container holding the context menu items.\n   *\n   * @platform android\n   */\n  color?: string;\n\n  /**\n   * Optional styles to apply to the `ContextMenu`.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Props of the `Submenu` component.\n */\nexport type SubmenuProps = {\n  /**\n   * The button that will be used to expand the submenu. On Android the `text` prop of the `Button` will be used as a section title.\n   */\n  button: ReactElement<ButtonProps>;\n  /**\n   * Children of the submenu. Only `Button`, `Switch`, `Picker` and `Submenu` elements should be used.\n   */\n  children: ReactNode;\n};\n\n/**\n * @hidden\n */\ntype NativeMenuProps = ContextMenuProps & {\n  elements: MenuElement[];\n  onContextMenuButtonPressed: (\n    event: NativeSyntheticEvent<{ contextMenuElementID: string }>\n  ) => void;\n  onContextMenuSwitchValueChanged: (\n    event: NativeSyntheticEvent<{\n      contextMenuElementID: string;\n      value: boolean;\n    }>\n  ) => void;\n  onContextMenuPickerOptionSelected: (\n    event: NativeSyntheticEvent<{\n      index: number;\n      label: string;\n      contextMenuElementID: string;\n    }>\n  ) => void;\n};\n\nexport function Submenu() {\n  return <></>;\n}\n\nexport function Items() {\n  return <></>;\n}\nItems.tag = 'Items';\n\nexport function Trigger(props: { children: React.ReactNode }) {\n  return <></>;\n}\nTrigger.tag = 'Trigger';\n\nexport function Preview(props: { children: React.ReactNode }) {\n  return <></>;\n}\n\nfunction ContextMenu(props: ContextMenuProps) {\n  const eventHandlersMap: EventHandlers = {};\n  const initialChildren = Children.map(\n    props.children as any,\n    (c: { type: { tag: string }; props: { children: React.ReactNode } }) =>\n      c.type.tag === Items.tag ? c.props.children : null\n  );\n  const processedElements = useMemo(\n    () => transformChildrenToElementArray(initialChildren, eventHandlersMap),\n    [initialChildren]\n  );\n\n  const activationElement = Children.map(\n    props.children as any,\n    (c: { type: { tag: string }; props: { children: React.ReactNode } }) =>\n      c.type.tag === Trigger.tag ? c.props.children : null\n  );\n\n  const createEventHandler =\n    (handlerType: string) => (e: NativeSyntheticEvent<{ contextMenuElementID: string }>) => {\n      const handler = eventHandlersMap[e.nativeEvent.contextMenuElementID]?.[handlerType];\n      handler?.(e);\n    };\n\n  return (\n    <MenuNativeView\n      style={props.style}\n      elements={processedElements}\n      onContextMenuButtonPressed={createEventHandler('onPress')}\n      onContextMenuSwitchValueChanged={createEventHandler('onValueChange')}\n      onContextMenuPickerOptionSelected={createEventHandler('onOptionSelected')}\n      {...props}>\n      {activationElement}\n    </MenuNativeView>\n  );\n}\n\nContextMenu.Trigger = Trigger;\nContextMenu.Preview = Preview;\nContextMenu.Items = Items;\n\nexport { ContextMenu };\n"]}