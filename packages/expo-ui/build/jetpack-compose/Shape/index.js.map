{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/jetpack-compose/Shape/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAmCzC,MAAM,eAAe,GAA6B,iBAAiB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;AAE3F,SAAS,IAAI,CAAC,KAAiB;IAC7B,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAG,CAAC;AACxE,CAAC;AAED,SAAS,QAAQ,CAAC,KAAiB;IACjC,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAU,EAAG,CAAC;AAC5E,CAAC;AAED,SAAS,IAAI,CAAC,KAAwD;IACpE,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,MAAM,EAAG,CAAC;AACxE,CAAC;AAED,SAAS,MAAM,CAAC,KAAuE;IACrF,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAG,CAAC;AAC1E,CAAC;AAED,SAAS,SAAS,CAAC,KAA2E;IAC5F,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,WAAW,EAAG,CAAC;AAC7E,CAAC;AAED,SAAS,OAAO,CACd,KAA6F;IAE7F,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,EAAG,CAAC;AAC3E,CAAC;AAED,MAAM,CAAC,MAAM,KAAK,GAAG;IACnB,IAAI;IACJ,QAAQ;IACR,IAAI;IACJ,MAAM;IACN,SAAS;IACT,OAAO;CACR,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { ViewStyle } from 'react-native';\n\nexport type ShapeProps = {\n  /**\n   * Corner rounding percentage. Multiplied by the shorter dimension of the view to produce pixel values.\n   * @default 0.0\n   */\n  cornerRounding?: number;\n  /**\n   * Number between `0.0` and `1.0` that determines how much each line between vertices is \"smoothed\".\n   * @default 0.0\n   */\n  smoothing?: number;\n  /**\n   * Number of vertices. For `'POLYGON'` it must be at least `3.0`. For `'STAR'` and `'PILL_STAR'` it is a number of vertices for each of two radii (A 5-pointed star has 10 vertices.)\n   * @default 6.0\n   */\n  verticesCount?: number;\n  /**\n   * Inner radius of star-related shapes (`'STAR'` and `'PILL_STAR'`). Multiplied by the shorter dimension of the view to produce pixel values.\n   * @default 1.0\n   */\n  innerRadius?: number;\n  /**\n   * Radius of the circular shape. Multiplied by the shorter dimension of the view to produce pixel values.\n   * @default 1.0\n   */\n  radius?: number;\n  /** Style of the component */\n  style?: ViewStyle;\n  /** Color of the shape */\n  color?: string;\n};\n\nconst ShapeNativeView: React.ComponentType<any> = requireNativeView('ExpoUI', 'ShapeView');\n\nfunction Star(props: ShapeProps) {\n  return <ShapeNativeView {...props} style={props.style} type=\"star\" />;\n}\n\nfunction PillStar(props: ShapeProps) {\n  return <ShapeNativeView {...props} style={props.style} type=\"pillStar\" />;\n}\n\nfunction Pill(props: Pick<ShapeProps, 'smoothing' | 'style' | 'color'>) {\n  return <ShapeNativeView {...props} style={props.style} type=\"pill\" />;\n}\n\nfunction Circle(props: Pick<ShapeProps, 'radius' | 'verticesCount' | 'style' | 'color'>) {\n  return <ShapeNativeView {...props} style={props.style} type=\"circle\" />;\n}\n\nfunction Rectangle(props: Pick<ShapeProps, 'smoothing' | 'cornerRounding' | 'style' | 'color'>) {\n  return <ShapeNativeView {...props} style={props.style} type=\"rectangle\" />;\n}\n\nfunction Polygon(\n  props: Pick<ShapeProps, 'smoothing' | 'cornerRounding' | 'verticesCount' | 'style' | 'color'>\n) {\n  return <ShapeNativeView {...props} style={props.style} type=\"polygon\" />;\n}\n\nexport const Shape = {\n  Star,\n  PillStar,\n  Pill,\n  Circle,\n  Rectangle,\n  Polygon,\n};\n"]}