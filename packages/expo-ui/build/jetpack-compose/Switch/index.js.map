{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/jetpack-compose/Switch/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAqFzC,MAAM,gBAAgB,GAA2C,iBAAiB,CAChF,QAAQ,EACR,YAAY,CACb,CAAC;AAEF,SAAS,gBAAgB,CAAC,KAAkB;IAC1C,IAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;QAC/B,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC;QACzB,IAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;YAC/B,OAAO;gBACL,iBAAiB,EAAE,KAAK,CAAC,KAAK;aAC/B,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,YAAY,EAAE,KAAK,CAAC,KAAK;aAC1B,CAAC;QACJ,CAAC;IACH,CAAC;IACD,OAAO,KAAK,CAAC,aAAa,CAAC;AAC7B,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAkB;IACrD,OAAO;QACL,GAAG,KAAK;QACR,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,QAAQ;QAClC,aAAa,EAAE,gBAAgB,CAAC,KAAK,CAAC;QACtC,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,aAAa,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;YAC5C,KAAK,EAAE,aAAa,EAAE,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC;KACmB,CAAC;AACzB,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { NativeSyntheticEvent, StyleProp, ViewStyle } from 'react-native';\n\n// @docsMissing\n/**\n * Only for switch.\n */\ntype SwitchElementColors = {\n  checkedThumbColor?: string;\n  checkedTrackColor?: string;\n  uncheckedThumbColor?: string;\n  uncheckedTrackColor?: string;\n};\n\n// @docsMissing\n/**\n * Only for checkbox.\n */\ntype CheckboxElementColors = {\n  checkedColor?: string;\n  disabledCheckedColor?: string;\n  uncheckedColor?: string;\n  disabledUncheckedColor?: string;\n  checkmarkColor?: string;\n  disabledIndeterminateColor?: string;\n};\n\nexport type SwitchProps = {\n  /**\n   * Indicates whether the switch is checked.\n   */\n  value: boolean;\n  /**\n   * Label for the switch.\n   *\n   * > On Android, the label has an effect only when the `Switch` is used inside a `ContextMenu`.\n   */\n  label?: string;\n\n  /**\n   * Type of the switch component. Can be `'checkbox'`, `'switch'`, or `'button'`. The `'button'` style is iOS only.\n   * @default 'switch'\n   */\n  variant?: 'checkbox' | 'switch' | 'button';\n  /**\n   * Callback function that is called when the checked state changes.\n   */\n  onValueChange?: (value: boolean) => void;\n  /**\n   * Optional style for the switch component.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Picker color. On iOS, it only applies to the `menu` variant.\n   */\n  color?: string;\n} & (SwitchSwitchVariantProps | SwitchCheckboxVariantProps | SwitchButtonVariantProps);\n\nexport type SwitchSwitchVariantProps = {\n  variant?: 'switch';\n  /**\n   * Colors for switch's core elements.\n   * @platform android\n   */\n  elementColors?: SwitchElementColors;\n};\n\nexport type SwitchCheckboxVariantProps = {\n  variant: 'checkbox';\n  /**\n   * Colors for checkbox core elements.\n   * @platform android\n   */\n  elementColors?: CheckboxElementColors;\n};\n\nexport type SwitchButtonVariantProps = {\n  variant: 'button';\n  elementColors?: undefined;\n};\n\ntype NativeSwitchProps = Omit<SwitchProps, 'onValueChange'> & {\n  onValueChange: (event: NativeSyntheticEvent<{ value: boolean }>) => void;\n};\n\nconst SwitchNativeView: React.ComponentType<NativeSwitchProps> = requireNativeView(\n  'ExpoUI',\n  'SwitchView'\n);\n\nfunction getElementColors(props: SwitchProps) {\n  if (props.variant === 'button') {\n    return undefined;\n  }\n  if (!props.elementColors) {\n    if (props.variant === 'switch') {\n      return {\n        checkedTrackColor: props.color,\n      };\n    } else {\n      return {\n        checkedColor: props.color,\n      };\n    }\n  }\n  return props.elementColors;\n}\n\n/**\n * @hidden\n */\nexport function transformSwitchProps(props: SwitchProps): NativeSwitchProps {\n  return {\n    ...props,\n    variant: props.variant ?? 'switch',\n    elementColors: getElementColors(props),\n    color: props.color,\n    onValueChange: ({ nativeEvent: { value } }) => {\n      props?.onValueChange?.(value);\n    },\n  } as NativeSwitchProps;\n}\n\nexport function Switch(props: SwitchProps) {\n  return <SwitchNativeView {...transformSwitchProps(props)} />;\n}\n"]}