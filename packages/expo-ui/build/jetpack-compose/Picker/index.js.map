{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/jetpack-compose/Picker/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAuDzC,MAAM,gBAAgB,GAAqC,iBAAiB,CAC1E,QAAQ,EACR,YAAY,CACb,CAAC;AAIF;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAkB;IACrD,OAAO;QACL,GAAG,KAAK;QACR,OAAO,EAAE,KAAK,CAAC,OAAO,IAAI,WAAW;QACrC,aAAa,EAAE,KAAK,CAAC,aAAa;YAChC,CAAC,CAAC,KAAK,CAAC,aAAa;YACrB,CAAC,CAAC,KAAK,CAAC,KAAK;gBACX,CAAC,CAAC;oBACE,oBAAoB,EAAE,KAAK,CAAC,KAAK;iBAClC;gBACH,CAAC,CAAC,SAAS;QACf,KAAK,EAAE,KAAK,CAAC,KAAK;KACnB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\n/**\n * Colors for picker's core elements.\n */\nexport type PickerElementColors = {\n  activeBorderColor?: string;\n  activeContentColor?: string;\n  inactiveBorderColor?: string;\n  inactiveContentColor?: string;\n  disabledActiveBorderColor?: string;\n  disabledActiveContentColor?: string;\n  disabledInactiveBorderColor?: string;\n  disabledInactiveContentColor?: string;\n  activeContainerColor?: string;\n  inactiveContainerColor?: string;\n  disabledActiveContainerColor?: string;\n  disabledInactiveContainerColor?: string;\n};\n\nexport type PickerProps = {\n  /**\n   * An array of options to be displayed in the picker.\n   */\n  options: string[];\n  /**\n   * The index of the currently selected option.\n   */\n  selectedIndex: number | null;\n  /**\n   * Callback function that is called when an option is selected.\n   */\n  onOptionSelected?: (event: { nativeEvent: { index: number; label: string } }) => void;\n  /**\n   * The variant of the picker, which determines its appearance and behavior.\n   * The `'wheel'`, `'inline'`, `'palette'` and `'menu'` variants are iOS only, the `'radio'` variant is Android only. The `'inline'` variant can only be used inside sections or lists. The `'palette'` variant displays differently inside menus.\n   * @default 'segmented'\n   */\n  variant?: 'segmented' | 'radio';\n  /**\n   * Optional style to apply to the picker component.\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * Colors for picker's core elements.\n   */\n  elementColors?: PickerElementColors;\n  /**\n   * Picker color.\n   */\n  color?: string;\n};\n\nconst PickerNativeView: React.ComponentType<PickerProps> = requireNativeView(\n  'ExpoUI',\n  'PickerView'\n);\n\ntype NativePickerProps = PickerProps;\n\n/**\n * @hidden\n */\nexport function transformPickerProps(props: PickerProps): NativePickerProps {\n  return {\n    ...props,\n    variant: props.variant ?? 'segmented',\n    elementColors: props.elementColors\n      ? props.elementColors\n      : props.color\n        ? {\n            activeContainerColor: props.color,\n          }\n        : undefined,\n    color: props.color,\n  };\n}\n\n/**\n * Displays a native picker component. Depending on the variant it can be a segmented button, an inline picker, a list of choices or a radio button.\n */\nexport function Picker(props: PickerProps) {\n  return <PickerNativeView {...transformPickerProps(props)} />;\n}\n"]}