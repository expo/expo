{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/jetpack-compose/Carousel/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAa,MAAM,OAAO,CAAC;AAE5D,OAAO,EAAE,YAAY,EAAyD,MAAM,SAAS,CAAC;AAI9F;;GAEG;AACH,SAAS,2BAA2B,CAAC,QAAmB;IAItD,MAAM,QAAQ,GAAsB,EAAE,CAAC;IACvC,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAmC,CAAC;IAEpE,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;QAClD,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;YACzD,MAAM,KAAK,GAAG,KAAK,CAAC,KAA0B,CAAC;YAC/C,QAAQ,CAAC,IAAI,CAAC;gBACZ,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,YAAY,EAAE,KAAK,CAAC,YAAY;aACjC,CAAC,CAAC;YAEH,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC;gBAClB,gBAAgB,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC;AACxC,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,sBAAsB,CAAC,KAAoB;IACzD,MAAM,EAAE,QAAQ,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAEzC,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;IAE7E,6CAA6C;IAC7C,MAAM,WAAW,GAAG,CAAC,KAAyC,EAAE,EAAE;QAChE,MAAM,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC;QACtC,MAAM,OAAO,GAAG,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,OAAO,EAAE,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,CAAC;QACjB,CAAC;IACH,CAAC,CAAC;IAEF,OAAO;QACL,GAAG,SAAS;QACZ,QAAQ;QACR,WAAW;QACX,mBAAmB;QACnB,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC;KACpE,CAAC;AACJ,CAAC","sourcesContent":["import { Children, isValidElement, ReactNode } from 'react';\n\nimport { CarouselItem, CarouselItemProps, CarouselProps, NativeCarouselProps } from './index';\n\nexport type CarouselElement = Omit<CarouselItemProps, 'onPress'>;\n\n/**\n * Transforms children to elements array for native component\n */\nfunction transformChildrenToElements(children: ReactNode): {\n  elements: CarouselElement[];\n  onPressCallbacks: Map<number, (index: number) => void>;\n} {\n  const elements: CarouselElement[] = [];\n  const onPressCallbacks = new Map<number, (index: number) => void>();\n\n  Children.toArray(children).forEach((child, index) => {\n    if (isValidElement(child) && child.type === CarouselItem) {\n      const props = child.props as CarouselItemProps;\n      elements.push({\n        image: props.image,\n        title: props.title,\n        textColor: props.textColor,\n        textStyle: props.textStyle,\n        cornerRadius: props.cornerRadius,\n      });\n\n      if (props.onPress) {\n        onPressCallbacks.set(index, props.onPress);\n      }\n    }\n  });\n\n  return { elements, onPressCallbacks };\n}\n\n/**\n * Transforms Carousel props to native format, converting children to elements array\n * and setting up press event handling.\n */\nexport function transformCarouselProps(props: CarouselProps): NativeCarouselProps {\n  const { children, ...restProps } = props;\n\n  const { elements, onPressCallbacks } = transformChildrenToElements(children);\n\n  // Create event handler for item press events\n  const onItemPress = (event: { nativeEvent: { index: number } }) => {\n    const index = event.nativeEvent.index;\n    const onPress = onPressCallbacks.get(index);\n    if (onPress) {\n      onPress(index);\n    }\n  };\n\n  return {\n    ...restProps,\n    elements,\n    onItemPress,\n    // @ts-expect-error\n    modifiers: props.modifiers?.map((m) => m.__expo_shared_object_id__),\n  };\n}\n"]}