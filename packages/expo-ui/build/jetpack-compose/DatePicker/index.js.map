{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/jetpack-compose/DatePicker/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAwB,UAAU,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAsD5E;;GAEG;AACH,MAAM,UAAU,4BAA4B,CAAC,KAA0B;IACrE,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IACnC,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IAEnF,gEAAgE;IAChE,4CAA4C;IAC5C,MAAM,OAAO,GAAG,UAAU,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC;IAEzD,0GAA0G;IAC1G,MAAM,cAAc,GAAG,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IACtD,MAAM,eAAe,GAAG,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;IAExD,OAAO;QACL,GAAG,IAAI;QACP,cAAc,EAAE,CAAC,EAAE,WAAW,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE;YAC5C,KAAK,EAAE,cAAc,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1C,CAAC;QACD,OAAO;QACP,KAAK,EAAE,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,cAAc,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;KAC7E,CAAC;AACJ,CAAC;AAED,MAAM,oBAAoB,GAA+C,iBAAiB,CACxF,QAAQ,EACR,oBAAoB,CACrB,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,cAAc,CAAC,KAA0B;IACvD,OAAO,CAAC,oBAAoB,CAAC,IAAI,4BAA4B,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC3E,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle, StyleSheet, PixelRatio } from 'react-native';\n\nimport { ViewEvent } from '../../types';\n\nexport type AndroidVariant = 'picker' | 'input';\n\nexport type DisplayedComponents = 'date' | 'hourAndMinute' | 'dateAndTime';\n\nexport type DateTimePickerProps = {\n  /**\n   * The initial date to display on the picker.\n   */\n  initialDate?: string | null;\n  /**\n   * Callback function that is called when a date is selected.\n   */\n  onDateSelected?: (date: Date) => void;\n  /**\n   * The variant of the picker, which determines its appearance and behavior.\n   * @default 'picker'\n   */\n  variant?: AndroidVariant;\n  /**\n   * Show to button to toggle between variants on Android.\n   * @default true\n   */\n  showVariantToggle?: boolean;\n  /**\n   * The components that the picker should display.\n   * On Android, you can have a picker that selects just the date or just the time.\n   * `dateAndTime` is only available on iOS and will result in a date picker on Android.\n   * On iOS, you can have a picker that selects both date and time.\n   * @default 'date'\n   */\n  displayedComponents?: DisplayedComponents;\n  /**\n   * Optional style to apply to the component.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * The tint color to use on the picker elements.\n   */\n  color?: string;\n  /**\n   * Determines what format the clock should be displayed in on Android.\n   * @default true\n   */\n  is24Hour?: boolean;\n};\n\ntype NativeDatePickerProps = Omit<DateTimePickerProps, 'variant' | 'onDateSelected'> & {\n  variant?: AndroidVariant;\n} & ViewEvent<'onDateSelected', { date: Date }>;\n\n/**\n * @hidden\n */\nexport function transformDateTimePickerProps(props: DateTimePickerProps): NativeDatePickerProps {\n  const { variant, ...rest } = props;\n  const { minWidth, minHeight, ...restStyle } = StyleSheet.flatten(rest.style) || {};\n\n  // On Android, the pickerâ€™s minWidth and minHeight must be 12dp.\n  // Otherwise, the picker will crash the app.\n  const minSize = PixelRatio.getPixelSizeForLayoutSize(12);\n\n  // However, when users pass the minWidth and minHeight props, we trust that they know what they are doing.\n  const parsedMinWidth = minWidth ? minSize : undefined;\n  const parsedMinHeight = minHeight ? minSize : undefined;\n\n  return {\n    ...rest,\n    onDateSelected: ({ nativeEvent: { date } }) => {\n      props?.onDateSelected?.(new Date(date));\n    },\n    variant,\n    style: [restStyle, { minWidth: parsedMinWidth, minHeight: parsedMinHeight }],\n  };\n}\n\nconst DatePickerNativeView: React.ComponentType<NativeDatePickerProps> = requireNativeView(\n  'ExpoUI',\n  'DateTimePickerView'\n);\n\n/**\n * Renders a `DateTimePicker` component.\n */\nexport function DateTimePicker(props: DateTimePickerProps) {\n  return <DatePickerNativeView {...transformDateTimePickerProps(props)} />;\n}\n"]}