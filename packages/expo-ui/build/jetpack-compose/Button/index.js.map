{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/jetpack-compose/Button/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAa,UAAU,EAAa,MAAM,cAAc,CAAC;AAsEhE,wFAAwF;AACxF,MAAM,gBAAgB,GAA2C,iBAAiB,CAChF,QAAQ,EACR,QAAQ,CACT,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,oBAAoB,CAAC,KAAkB;IACrD,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC/D,OAAO;QACL,GAAG,SAAS;QACZ,IAAI,EAAE,QAAQ,IAAI,EAAE;QACpB,WAAW;QACX,eAAe,EAAE,OAAO;QACxB,aAAa,EAAE,KAAK,CAAC,aAAa;YAChC,CAAC,CAAC,KAAK,CAAC,aAAa;YACrB,CAAC,CAAC,KAAK,CAAC,KAAK;gBACX,CAAC,CAAC;oBACE,cAAc,EAAE,KAAK,CAAC,KAAK;iBAC5B;gBACH,CAAC,CAAC,SAAS;KAChB,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,4EAA4E;IAC5E,OAAO,CACL,CAAC,gBAAgB,CACf,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAChC,KAAK,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,EACxE,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, StyleSheet, ViewStyle } from 'react-native';\n\nimport { MaterialIcon } from './types';\nimport { ViewEvent } from '../../types';\n\n/**\n * The built-in button styles available on Android.\n * - `outlined` - A button with an outline.\n * - `elevated` - A filled button with a shadow.\n */\nexport type ButtonVariant = 'default' | 'bordered' | 'borderless' | 'outlined' | 'elevated';\n\n/**\n * Colors for button's core elements.\n */\nexport type ButtonElementColors = {\n  containerColor?: string;\n  contentColor?: string;\n  disabledContainerColor?: string;\n  disabledContentColor?: string;\n};\n\nexport type ButtonProps = {\n  /**\n   * A callback that is called when the button is pressed.\n   */\n  onPress?: () => void;\n  /**\n   * A string describing the system image to display in the button.\n   * Uses Material Icons on Android.\n   */\n  systemImage?: MaterialIcon;\n  /**\n   * The button variant.\n   */\n  variant?: ButtonVariant;\n  /**\n   * Additional styles to apply to the button.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * The text to display inside the button.\n   */\n  children: string;\n  /**\n   * Colors for button's core elements.\n   * @platform android\n   */\n  elementColors?: ButtonElementColors;\n  /**\n   * Button color.\n   */\n  color?: string;\n  /**\n   * Disabled state of the button.\n   */\n  disabled?: boolean;\n};\n\n/**\n * @hidden\n */\nexport type NativeButtonProps = Omit<\n  ButtonProps,\n  'role' | 'onPress' | 'children' | 'systemImage'\n> & {\n  text: string;\n  systemImage?: string;\n} & ViewEvent<'onButtonPressed', void>;\n\n// We have to work around the `role` and `onPress` props being reserved by React Native.\nconst ButtonNativeView: React.ComponentType<NativeButtonProps> = requireNativeView(\n  'ExpoUI',\n  'Button'\n);\n\n/**\n * @hidden\n */\nexport function transformButtonProps(props: ButtonProps): NativeButtonProps {\n  const { children, onPress, systemImage, ...restProps } = props;\n  return {\n    ...restProps,\n    text: children ?? '',\n    systemImage,\n    onButtonPressed: onPress,\n    elementColors: props.elementColors\n      ? props.elementColors\n      : props.color\n        ? {\n            containerColor: props.color,\n          }\n        : undefined,\n  };\n}\n\n/**\n * Displays a native button component.\n */\nexport function Button(props: ButtonProps) {\n  // Min height from https://m3.material.io/components/buttons/specs, minWidth\n  return (\n    <ButtonNativeView\n      {...transformButtonProps(props)}\n      style={StyleSheet.compose({ minWidth: 80, minHeight: 40 }, props.style)}\n    />\n  );\n}\n"]}