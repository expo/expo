{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/jetpack-compose/TextInput/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAsEzC,wFAAwF;AACxF,MAAM,mBAAmB,GAA8C,iBAAiB,CACtF,QAAQ,EACR,eAAe,CAChB,CAAC;AAEF;;GAEG;AACH,SAAS,uBAAuB,CAAC,KAAqB;IACpD,OAAO;QACL,GAAG,KAAK;QACR,cAAc,EAAE,CAAC,KAAK,EAAE,EAAE;YACxB,KAAK,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,SAAS,CAAC,KAAqB;IAC7C,OAAO,CAAC,mBAAmB,CAAC,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAG,CAAC;AACzF,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { StyleProp, ViewStyle } from 'react-native';\n\nimport { ViewEvent } from '../../types';\n\n/**\n * @hidden Not used anywhere yet.\n */\nexport type TextInputRole = 'default' | 'cancel' | 'destructive';\n\nexport type TextInputProps = {\n  /**\n   * Additional styles to apply to the TextInput.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Initial value that the TextInput displays when being mounted. As the TextInput is an uncontrolled component, change the key prop if you need to change the text value.\n   */\n  defaultValue?: string;\n  /**\n   * A callback triggered when user types in text into the TextInput.\n   */\n  onChangeText: (value: string) => void;\n  /**\n   * If true, the text input can be multiple lines.\n   * While the content will wrap, there's no keyboard button to insert a new line.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to display when `multiline` is set to true.\n   * If the number of lines in the view is above this number, the view scrolls.\n   * @default undefined, which means unlimited lines.\n   */\n  numberOfLines?: number;\n  /**\n   * Determines which keyboard to open. For example, `'numeric'`.\n   *\n   * Available options:\n   * - default\n   * - numeric\n   * - email-address\n   * - phone-pad\n   * - decimal-pad\n   * - ascii-capable\n   * - url\n   * - password\n   * - password-numeric\n   *\n   * @default default\n   */\n  keyboardType?:\n    | 'default'\n    | 'email-address'\n    | 'numeric'\n    | 'phone-pad'\n    | 'ascii-capable'\n    | 'url'\n    | 'decimal-pad';\n  /**\n   * If true, autocorrection is enabled.\n   * @default true\n   */\n  autocorrection?: boolean;\n};\n\nexport type NativeTextInputProps = Omit<TextInputProps, 'onChangeText'> & {} & ViewEvent<\n    'onValueChanged',\n    { value: string }\n  >;\n\n// We have to work around the `role` and `onPress` props being reserved by React Native.\nconst TextInputNativeView: React.ComponentType<NativeTextInputProps> = requireNativeView(\n  'ExpoUI',\n  'TextInputView'\n);\n\n/**\n * @hidden\n */\nfunction transformTextInputProps(props: TextInputProps): NativeTextInputProps {\n  return {\n    ...props,\n    onValueChanged: (event) => {\n      props.onChangeText?.(event.nativeEvent.value);\n    },\n  };\n}\n\n/**\n * Renders a `TextInput` component.\n */\nexport function TextInput(props: TextInputProps) {\n  return <TextInputNativeView {...transformTextInputProps(props)} style={props.style} />;\n}\n"]}