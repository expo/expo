{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/jetpack-compose/Snackbar/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAGzC;;GAEG;AACH,MAAM,CAAN,IAAY,gBAaX;AAbD,WAAY,gBAAgB;IAC1B;;OAEG;IACH,6CAAyB,CAAA;IACzB;;OAEG;IACH,iCAAa,CAAA;IACb;;OAEG;IACH,mCAAe,CAAA;AACjB,CAAC,EAbW,gBAAgB,KAAhB,gBAAgB,QAa3B;AAkDD,MAAM,kBAAkB,GAA6C,iBAAiB,CACpF,QAAQ,EACR,cAAc,CACf,CAAC;AAEF;;GAEG;AACH,MAAM,UAAU,QAAQ,CAAC,KAAoB;IAC3C,OAAO,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AAC3C,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport type { ColorValue } from 'react-native';\n\n/**\n * Possible durations for the Snackbar.\n */\nexport enum SnackbarDuration {\n  /**\n   * Show the Snackbar indefinitely until explicitly dismissed or action is clicked.\n   */\n  Indefinite = 'indefinite',\n  /**\n   * Show the Snackbar for a long period of time.\n   */\n  Long = 'long',\n  /**\n   * Show the Snackbar for a short period of time.\n   */\n  Short = 'short',\n}\n\n/**\n * Colors for snackbar's core elements.\n */\nexport type SnackbarColors = {\n  containerColor?: ColorValue;\n  contentColor?: ColorValue;\n  actionColor?: ColorValue;\n  actionContentColor?: ColorValue;\n  dismissActionContentColor?: ColorValue;\n};\n\nexport type SnackbarProps = {\n  /**\n   * Optional action label to show as button in the Snackbar.\n   */\n  actionLabel?: string;\n  /**\n   * Duration of the Snackbar.\n   */\n  duration?: SnackbarDuration;\n  /**\n   * Text to be shown in the Snackbar.\n   */\n  message?: string;\n  /**\n   * A boolean to show a dismiss action in the Snackbar.\n   */\n  withDismissAction?: boolean;\n  /**\n   * Whether the snackbar is visible.\n   */\n  visible?: boolean;\n  /**\n   * Colors for snackbar's core elements.\n   */\n  colors?: SnackbarColors;\n  /**\n   * Callback that is called when the user presses the action button.\n   */\n  onActionPressed?: () => void;\n  /**\n   * Callback that is called when the snackbar is dismissed (auto-hide or user interaction).\n   */\n  onDismissed?: () => void;\n};\n\nexport type NativeSnackbarProps = SnackbarProps;\n\nconst SnackbarNativeView: React.ComponentType<NativeSnackbarProps> = requireNativeView(\n  'ExpoUI',\n  'SnackbarView'\n);\n\n/**\n * Renders a `Snackbar` component.\n */\nexport function Snackbar(props: SnackbarProps) {\n  return <SnackbarNativeView {...props} />;\n}\n"]}