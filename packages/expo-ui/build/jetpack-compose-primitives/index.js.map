{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/jetpack-compose-primitives/index.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAc,QAAQ,EAAmC,MAAM,cAAc,CAAC;AA6BrF,MAAM,aAAa,GACjB,QAAQ,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAC5E,MAAM,UAAU,GAAG,CAAC,KAAe;IACjC,IAAI,CAAC,aAAa,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACtC,CAAC;AAKD,MAAM,gBAAgB,GACpB,QAAQ,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAC/E,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACtB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,gBAAgB,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACzC,CAAC;AAQD,MAAM,mBAAmB,GACvB,QAAQ,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAClF,MAAM,UAAU,SAAS,CAAC,KAAqB;IAC7C,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACzB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,mBAAmB,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AAC5C,CAAC;AA0BD,MAAM,cAAc,GAClB,QAAQ,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAI7E,SAAS,kBAAkB,CAAC,KAAgB;IAC1C,MAAM,EAAE,QAAQ,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IACzC,OAAO;QACL,GAAG,SAAS;QACZ,IAAI,EAAE,QAAQ,IAAI,EAAE;QACpB,KAAK,EAAE;YACL,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,GAAG,CAAC,KAAK,EAAE,KAAK,IAAI,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;SACxE;KACF,CAAC;AACJ,CAAC;AACD,MAAM,UAAU,IAAI,CAAC,KAAgB;IACnC,IAAI,CAAC,cAAc,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,cAAc,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC3D,CAAC;AACD,YAAY","sourcesContent":["import { requireNativeView } from 'expo';\nimport { ColorValue, Platform, StyleProp, TextStyle, ViewStyle } from 'react-native';\n\nexport type HorizontalArrangement =\n  | 'start'\n  | 'end'\n  | 'center'\n  | 'spaceBetween'\n  | 'spaceAround'\n  | 'spaceEvenly';\nexport type VerticalArrangement =\n  | 'top'\n  | 'bottom'\n  | 'center'\n  | 'spaceBetween'\n  | 'spaceAround'\n  | 'spaceEvenly';\nexport type HorizontalAlignment = 'start' | 'end' | 'center';\nexport type VerticalAlignment = 'top' | 'bottom' | 'center';\n\ntype LayoutBaseProps = {\n  children?: React.ReactNode;\n  horizontalArrangement?: HorizontalArrangement;\n  verticalArrangement?: VerticalArrangement;\n  horizontalAlignment?: HorizontalAlignment;\n  verticalAlignment?: VerticalAlignment;\n};\n\n//#region Row Component\nexport type RowProps = LayoutBaseProps;\nconst RowNativeView: React.ComponentType<RowProps> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'RowView') : null;\nexport function Row(props: RowProps) {\n  if (!RowNativeView) {\n    return null;\n  }\n  return <RowNativeView {...props} />;\n}\n//#endregion\n\n//#region Column Component\nexport type ColumnProps = LayoutBaseProps;\nconst ColumnNativeView: React.ComponentType<ColumnProps> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'ColumnView') : null;\nexport function Column(props: ColumnProps) {\n  if (!ColumnNativeView) {\n    return null;\n  }\n  return <ColumnNativeView {...props} />;\n}\n//#endregion\n\n//#region Container Component\nexport type ContainerProps = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\nconst ContainerNativeView: React.ComponentType<ColumnProps> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'ContainerView') : null;\nexport function Container(props: ContainerProps) {\n  if (!ContainerNativeView) {\n    return null;\n  }\n  return <ContainerNativeView {...props} />;\n}\n//#endregion\n\n//#region Text Component\n\nexport type TextFontWeight =\n  | 'normal'\n  | 'bold'\n  | '100'\n  | '200'\n  | '300'\n  | '400'\n  | '500'\n  | '600'\n  | '700'\n  | '800'\n  | '900';\n\nexport type TextProps = {\n  children: string;\n  color?: ColorValue;\n  fontSize?: number;\n  fontWeight?: TextFontWeight;\n  style?: StyleProp<Pick<TextStyle, 'color' | 'fontSize' | 'fontWeight' | 'fontFamily'>>;\n};\n\nconst TextNativeView: React.ComponentType<Omit<TextProps, 'children'> & { text: string }> | null =\n  Platform.OS === 'android' ? requireNativeView('ExpoUI', 'TextView') : null;\ntype NativeTextProps = Omit<TextProps, 'children'> & {\n  text: string;\n};\nfunction transformTextProps(props: TextProps): NativeTextProps {\n  const { children, ...restProps } = props;\n  return {\n    ...restProps,\n    text: children ?? '',\n    style: {\n      color: props.color,\n      fontSize: props.fontSize,\n      fontWeight: props.fontWeight,\n      ...(props?.style && typeof props.style === 'object' ? props.style : {}),\n    },\n  };\n}\nexport function Text(props: TextProps) {\n  if (!TextNativeView) {\n    return null;\n  }\n  return <TextNativeView {...transformTextProps(props)} />;\n}\n//#endregion\n"]}