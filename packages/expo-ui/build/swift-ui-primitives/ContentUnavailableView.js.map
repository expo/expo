{"version":3,"file":"ContentUnavailableView.js","sourceRoot":"","sources":["../../src/swift-ui-primitives/ContentUnavailableView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,OAAO,EAAE,+BAA+B,EAAE,MAAM,mBAAmB,CAAC;AAoBpE,MAAM,gCAAgC,GACpC,QAAQ,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAEvF;;;;GAIG;AACH,SAAS,oCAAoC,CAC3C,KAAkC;IAElC,MAAM,EAAE,SAAS,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IAC1C,OAAO;QACL,SAAS;QACT,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QACvE,GAAG,SAAS;KACb,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,KAAkC;IACvE,IAAI,CAAC,gCAAgC,EAAE,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,gCAAgC,CAAC,IAAI,oCAAoC,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/F,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\nimport { Platform } from 'react-native';\n\nimport { createViewModifierEventListener } from './modifiers/utils';\nimport { CommonViewModifierProps } from './types';\n\nexport interface ContentUnavailableViewProps extends CommonViewModifierProps {\n  /**\n   * A short title that describes why the content is not available.\n   */\n  title?: string;\n\n  /**\n   * SF Symbol indicating why the content is not available.\n   */\n  systemImage?: string;\n\n  /**\n   * Description of why the content is not available.\n   */\n  description?: string;\n}\n\nconst ContentUnavailableViewNativeView: React.ComponentType<ContentUnavailableViewProps> | null =\n  Platform.OS === 'ios' ? requireNativeView('ExpoUI', 'ContentUnavailableView') : null;\n\n/**\n * Displays a native Swift UI ContentUnavailableView.\n * @platform ios 17.0+\n *\n */\nfunction transformContentUnavailableViewProps(\n  props: ContentUnavailableViewProps\n): ContentUnavailableViewProps {\n  const { modifiers, ...restProps } = props;\n  return {\n    modifiers,\n    ...(modifiers ? createViewModifierEventListener(modifiers) : undefined),\n    ...restProps,\n  };\n}\n\nexport function ContentUnavailableView(props: ContentUnavailableViewProps) {\n  if (!ContentUnavailableViewNativeView) {\n    return null;\n  }\n  return <ContentUnavailableViewNativeView {...transformContentUnavailableViewProps(props)} />;\n}\n"]}