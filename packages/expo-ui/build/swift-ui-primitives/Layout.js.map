{"version":3,"file":"Layout.js","sourceRoot":"","sources":["../../src/swift-ui-primitives/Layout.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAqBzC,SAAS,oBAAoB,CAAC,KAAqB;IACjD,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,CAAC;IACxC,OAAO;QACL,GAAG,SAAS;QACZ,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;KACtE,CAAC;AACJ,CAAC;AAOD,MAAM,gBAAgB,GAA0C,iBAAiB,CAC/E,QAAQ,EACR,YAAY,CACb,CAAC;AAEF,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC;AAQD,MAAM,gBAAgB,GAA0C,iBAAiB,CAC/E,QAAQ,EACR,YAAY,CACb,CAAC;AAEF,MAAM,UAAU,MAAM,CAAC,KAAkB;IACvC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC/D,CAAC;AAcD,MAAM,eAAe,GAA0C,iBAAiB,CAC9E,QAAQ,EACR,WAAW,CACZ,CAAC;AAEF,MAAM,UAAU,KAAK,CAAC,KAAiB;IACrC,OAAO,CAAC,eAAe,CAAC,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC,EAAG,CAAC;AAC9D,CAAC;AACD,YAAY","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { type CommonViewModifierProps } from './types';\nimport { ViewEvent } from '../types';\n\ntype TapEvent = ViewEvent<'onTap', object> & {\n  useTapGesture?: boolean;\n};\n\ninterface StackBaseProps extends CommonViewModifierProps {\n  children: React.ReactNode;\n  spacing?: number;\n  backgroundColor?: string;\n\n  /**\n   * Callback triggered when the view is pressed.\n   */\n  onPress?: () => void;\n}\nexport type NativeStackProps = Omit<StackBaseProps, 'onPress'> | TapEvent;\n\nfunction transformNativeProps(props: StackBaseProps): NativeStackProps {\n  const { onPress, ...restProps } = props;\n  return {\n    ...restProps,\n    ...(onPress ? { useTapGesture: true, onTap: () => onPress() } : null),\n  };\n}\n\n//#region HStack Component\nexport interface HStackProps extends StackBaseProps {\n  alignment?: 'top' | 'center' | 'bottom' | 'firstTextBaseline' | 'lastTextBaseline';\n}\n\nconst HStackNativeView: React.ComponentType<NativeStackProps> = requireNativeView(\n  'ExpoUI',\n  'HStackView'\n);\n\nexport function HStack(props: HStackProps) {\n  return <HStackNativeView {...transformNativeProps(props)} />;\n}\n//#endregion\n\n//#region VStack Component\nexport interface VStackProps extends StackBaseProps {\n  alignment?: 'leading' | 'center' | 'trailing';\n}\n\nconst VStackNativeView: React.ComponentType<NativeStackProps> = requireNativeView(\n  'ExpoUI',\n  'VStackView'\n);\n\nexport function VStack(props: VStackProps) {\n  return <VStackNativeView {...transformNativeProps(props)} />;\n}\n//#endregion\n\n//#region Group Component\nexport interface GroupProps extends CommonViewModifierProps {\n  children: React.ReactNode;\n\n  /**\n   * Callback triggered when the view is pressed.\n   */\n  onPress?: () => void;\n}\n\ntype NativeGroupProps = Omit<GroupProps, 'onPress'> | TapEvent;\nconst GroupNativeView: React.ComponentType<NativeGroupProps> = requireNativeView(\n  'ExpoUI',\n  'GroupView'\n);\n\nexport function Group(props: GroupProps) {\n  return <GroupNativeView {...transformNativeProps(props)} />;\n}\n//#endregion\n"]}