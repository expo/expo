{"version":3,"file":"DisclosureGroup.js","sourceRoot":"","sources":["../../src/swift-ui-primitives/DisclosureGroup.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AAwBzC,MAAM,yBAAyB,GAAoD,iBAAiB,CAClG,QAAQ,EACR,qBAAqB,CACtB,CAAC;AAEF,MAAM,UAAU,eAAe,CAAC,KAA2B;IACzD,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IAEzC,SAAS,iBAAiB,CAAC,KAA+C;QACxE,aAAa,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC;IAED,OAAO,CACL,CAAC,yBAAyB,CACxB,IAAI,IAAI,CAAC,CACT,aAAa,CAAC,CAAC,iBAAiB,CAAC,EACjC,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { requireNativeView } from 'expo';\n\nimport { type CommonViewModifierProps } from './types';\nimport { ViewEvent } from '../types';\n\nexport interface DisclosureGroupProps extends CommonViewModifierProps {\n  label: string;\n  children: React.ReactNode;\n  /**\n   * Controls whether the disclosure group is expanded.\n   */\n  isExpanded?: boolean;\n  /**\n   * A callback that is called when the expansion state changes.\n   */\n  onStateChange?: (isExpanded: boolean) => void;\n}\n\n\ntype StateChangeEvent = ViewEvent<'onStateChange', { isExpanded: boolean }>;\n\nexport type NativeDisclosureGroupProps = Omit<DisclosureGroupProps, 'onStateChange'> & StateChangeEvent\n\n\nconst DisclosureGroupNativeView: React.ComponentType<NativeDisclosureGroupProps> = requireNativeView(\n  'ExpoUI',\n  'DisclosureGroupView'\n);\n\nexport function DisclosureGroup(props: DisclosureGroupProps) {\n  const { onStateChange, ...rest } = props;\n\n  function handleStateChange(event: { nativeEvent: { isExpanded: boolean } }) {\n    onStateChange?.(event.nativeEvent.isExpanded);\n  }\n\n  return (\n    <DisclosureGroupNativeView\n      {...rest}\n      onStateChange={handleStateChange}\n    />\n  );\n}"]}