{"version":3,"file":"SystemBars.js","sourceRoot":"","sources":["../src/SystemBars.ts"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Appearance, Platform, StatusBar, useColorScheme } from 'react-native';\n\nimport ExpoSystemUI, { SystemBarsConfig } from './ExpoSystemUI';\n\nexport type SystemBarStyle = 'auto' | 'light' | 'dark';\n\nexport type SystemBarsProps = {\n  statusBarStyle?: SystemBarStyle;\n  statusBarHidden?: boolean;\n  navigationBarHidden?: boolean;\n};\n\nfunction getColorScheme(): 'light' | 'dark' {\n  return Appearance?.getColorScheme() ?? 'light';\n}\n\n/**\n * Merges the props stack.\n */\nfunction mergePropsStack(propsStack: SystemBarsProps[]): SystemBarsProps | null {\n  const mergedEntry = propsStack.reduce<SystemBarsProps>(\n    (prev, cur) => {\n      for (const prop in cur) {\n        if (cur[prop] != null) {\n          prev[prop] = cur[prop];\n        }\n      }\n      return prev;\n    },\n    {\n      statusBarStyle: undefined,\n      statusBarHidden: undefined,\n      navigationBarHidden: undefined,\n    }\n  );\n\n  if (\n    mergedEntry.statusBarStyle == null &&\n    mergedEntry.statusBarHidden == null &&\n    mergedEntry.navigationBarHidden == null\n  ) {\n    return null;\n  } else {\n    return mergedEntry;\n  }\n}\n\nconst propsStack: SystemBarsProps[] = [];\n\n// Timer for updating the native module values at the end of the frame.\nlet updateImmediate: number | null = null;\n\n// The current merged values from the props stack.\nlet currentMergedProps: SystemBarsProps | null = null;\n\n/**\n * Updates the native system bars with the props from the stack.\n */\nfunction updatePropsStack() {\n  if (updateImmediate != null) {\n    clearImmediate(updateImmediate);\n  }\n\n  updateImmediate = setImmediate(() => {\n    const prevMergedProps = currentMergedProps;\n    const mergedProps = mergePropsStack(propsStack);\n\n    if (mergedProps != null) {\n      if (\n        prevMergedProps?.statusBarStyle !== mergedProps.statusBarStyle ||\n        prevMergedProps?.statusBarHidden !== mergedProps.statusBarHidden ||\n        prevMergedProps?.navigationBarHidden !== mergedProps.navigationBarHidden\n      ) {\n        const { statusBarHidden, navigationBarHidden } = mergedProps;\n\n        const statusBarStyle: SystemBarsConfig['statusBarStyle'] =\n          mergedProps.statusBarStyle === 'auto'\n            ? getColorScheme() === 'light'\n              ? 'dark'\n              : 'light'\n            : mergedProps.statusBarStyle;\n\n        if (Platform.OS === 'android') {\n          ExpoSystemUI.setSystemBarsConfigAsync({\n            statusBarStyle,\n            statusBarHidden,\n            navigationBarHidden,\n          });\n        } else {\n          // Emulate android behavior with react-native StatusBar\n          if (statusBarStyle != null) {\n            StatusBar.setBarStyle(`${statusBarStyle}-content`, true);\n          }\n          if (statusBarHidden != null) {\n            StatusBar.setHidden(statusBarHidden, 'fade'); // 'slide' doesn't work in this context\n          }\n        }\n      }\n\n      currentMergedProps = mergedProps;\n    } else {\n      currentMergedProps = null;\n    }\n  });\n}\n\n/**\n * Push a SystemBars entry onto the stack.\n * The return value should be passed to `popStackEntry` when complete.\n *\n * @param props Object containing the SystemBars props to use in the stack entry.\n */\nfunction pushStackEntry(props: SystemBarsProps): SystemBarsProps {\n  const copy = { ...props };\n  propsStack.push(copy);\n  updatePropsStack();\n  return copy;\n}\n\n/**\n * Pop a SystemBars entry from the stack.\n *\n * @param entry Entry returned from `pushStackEntry`.\n */\nfunction popStackEntry(entry: SystemBarsProps): void {\n  const index = propsStack.indexOf(entry);\n  if (index !== -1) {\n    propsStack.splice(index, 1);\n  }\n  updatePropsStack();\n}\n\n/**\n * Replace an existing SystemBars stack entry with new props.\n *\n * @param entry Entry returned from `pushStackEntry` to replace.\n * @param props Object containing the SystemBars props to use in the replacement stack entry.\n */\nfunction replaceStackEntry(entry: SystemBarsProps, props: SystemBarsProps): SystemBarsProps {\n  const copy = { ...props };\n  const index = propsStack.indexOf(entry);\n  if (index !== -1) {\n    propsStack[index] = copy;\n  }\n  updatePropsStack();\n  return copy;\n}\n\nexport function SystemBars({\n  statusBarStyle,\n  statusBarHidden,\n  navigationBarHidden,\n}: SystemBarsProps) {\n  const stableProps = React.useMemo(\n    () => ({\n      statusBarStyle,\n      statusBarHidden,\n      navigationBarHidden,\n    }),\n    [statusBarStyle, statusBarHidden, navigationBarHidden]\n  );\n\n  const colorScheme = useColorScheme();\n  const stackEntryRef = React.useRef<SystemBarsProps | null>(null);\n\n  React.useEffect(() => {\n    // Every time a SystemBars component is mounted, we push it's prop to a stack\n    // and always update the native system bars with the props from the top of then\n    // stack. This allows having multiple SystemBars components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    stackEntryRef.current = pushStackEntry(stableProps);\n\n    return () => {\n      // When a SystemBars is unmounted, remove itself from the stack and update\n      // the native bars with the next props.\n      if (stackEntryRef.current) {\n        popStackEntry(stackEntryRef.current);\n      }\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (stackEntryRef.current) {\n      stackEntryRef.current = replaceStackEntry(stackEntryRef.current, stableProps);\n    }\n  }, [colorScheme, stableProps]);\n\n  return null;\n}\n\nSystemBars.pushStackEntry = pushStackEntry;\nSystemBars.popStackEntry = popStackEntry;\nSystemBars.replaceStackEntry = replaceStackEntry;\n"]}