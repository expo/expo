{"version":3,"file":"verifyCommand.js","sourceRoot":"","sources":["../../src/commands/verifyCommand.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport commander from 'commander';\nimport fs from 'fs';\nimport path from 'path';\n\nimport {\n  AutolinkingCommonArguments,\n  createAutolinkingOptionsLoader,\n  registerAutolinkingArguments,\n} from './autolinkingOptions';\nimport {\n  type BaseDependencyResolution,\n  type DependencyResolution,\n  type ResolutionResult,\n  DependencyResolutionSource,\n  makeCachedDependenciesLinker,\n  mergeResolutionResults,\n  scanDependencyResolutionsForPlatform,\n} from '../dependencies';\n\ninterface VerifyArguments extends AutolinkingCommonArguments {\n  verbose?: boolean | null;\n  json?: boolean | null;\n}\n\nexport function verifyCommand(cli: commander.CommanderStatic) {\n  return registerAutolinkingArguments(cli.command('verify'))\n    .option('-v, --verbose', 'Output all results instead of just warnings.', () => true, false)\n    .option('-j, --json', 'Output results in the plain JSON format.', () => true, false)\n    .option(\n      '-p, --platform [platform]',\n      'The platform to validate native modules for. Available options: \"android\", \"ios\", \"both\"',\n      'both'\n    )\n    .action(async (commandArguments: VerifyArguments) => {\n      const platforms =\n        commandArguments.platform === 'both' ? ['android', 'ios'] : [commandArguments.platform!];\n      const autolinkingOptionsLoader = createAutolinkingOptionsLoader(commandArguments);\n      const appRoot = await autolinkingOptionsLoader.getAppRoot();\n      const linker = makeCachedDependenciesLinker({ projectRoot: appRoot });\n      const results = mergeResolutionResults(\n        await Promise.all(\n          platforms.map((platform) => scanDependencyResolutionsForPlatform(linker, platform))\n        )\n      );\n      await verifySearchResults(results, {\n        appRoot,\n        verbose: !!commandArguments.verbose,\n        json: !!commandArguments.json,\n      });\n    });\n}\n\ninterface VerifyOptions {\n  appRoot: string;\n  verbose?: boolean;\n  json?: boolean;\n}\n\ninterface VerifyGroups {\n  reactNativeProjectConfig: DependencyResolution[];\n  searchPaths: DependencyResolution[];\n  dependencies: DependencyResolution[];\n  duplicates: DependencyResolution[];\n}\n\n/**\n * Verifies the search results by checking whether there are no duplicates.\n */\nexport async function verifySearchResults(\n  results: ResolutionResult,\n  options: VerifyOptions\n): Promise<void> {\n  const { appRoot } = options;\n\n  async function getHumanReadableDependency(dependency: BaseDependencyResolution): Promise<string> {\n    let version = dependency.version || null;\n    if (!version) {\n      try {\n        const pkgContents = await fs.promises.readFile(\n          path.join(dependency.path, 'package.json'),\n          'utf8'\n        );\n        const pkg: unknown = JSON.parse(pkgContents);\n        if (pkg && typeof pkg === 'object' && 'version' in pkg && typeof pkg.version === 'string') {\n          version = pkg.version;\n        }\n      } catch (error) {\n        version = null;\n      }\n    }\n    const relative = path.relative(appRoot, dependency.originPath);\n    return version\n      ? `${dependency.name}@${version} (at: ${relative})`\n      : `${dependency.name} at: ${relative}`;\n  }\n\n  const groups: VerifyGroups = {\n    reactNativeProjectConfig: [],\n    searchPaths: [],\n    dependencies: [],\n    duplicates: [],\n  };\n\n  for (const moduleName in results) {\n    const revision = results[moduleName];\n    if (!revision) {\n      continue;\n    } else if (revision.duplicates?.length) {\n      groups.duplicates.push(revision);\n    } else {\n      switch (revision.source) {\n        case DependencyResolutionSource.RN_CLI_LOCAL:\n          groups.reactNativeProjectConfig.push(revision);\n          break;\n        case DependencyResolutionSource.SEARCH_PATH:\n          groups.searchPaths.push(revision);\n          break;\n        case DependencyResolutionSource.RECURSIVE_RESOLUTION:\n          groups.dependencies.push(revision);\n          break;\n      }\n    }\n  }\n\n  if (options.json) {\n    console.log(JSON.stringify(groups));\n    return;\n  }\n\n  if (options.verbose) {\n    if (groups.reactNativeProjectConfig.length) {\n      console.log(\n        `üîé  Found ${groups.reactNativeProjectConfig.length} modules from React Native project config`\n      );\n      for (const revision of groups.reactNativeProjectConfig) {\n        console.log(` - ${await getHumanReadableDependency(revision)}`);\n      }\n    }\n\n    if (groups.searchPaths.length) {\n      console.log(`üîé  Found ${groups.searchPaths.length} modules in search paths`);\n      for (const revision of groups.searchPaths) {\n        console.log(` - ${await getHumanReadableDependency(revision)}`);\n      }\n    }\n\n    console.log(`üîé  Found ${groups.dependencies.length} modules in dependencies`);\n    for (const revision of groups.dependencies) {\n      console.log(` - ${await getHumanReadableDependency(revision)}`);\n    }\n  }\n\n  if (groups.duplicates.length) {\n    for (const revision of groups.duplicates) {\n      console.warn(`‚ö†Ô∏è  Found duplicate installations for ${chalk.green(revision.name)}`);\n      const revisions = [revision, ...(revision.duplicates ?? [])];\n      for (let idx = 0; idx < revisions.length; idx++) {\n        const prefix = idx !== revisions.length - 1 ? '‚îú‚îÄ' : '‚îî‚îÄ';\n        const duplicate = revisions[idx];\n        console.log(`  ${prefix} ${await getHumanReadableDependency(duplicate)}`);\n      }\n    }\n\n    console.warn(\n      '‚ö†Ô∏è  Multiple versions of the same module may introduce some side effects or compatibility issues.\\n' +\n        `Resolve your dependency issues and deduplicate your dependencies. Learn more: https://expo.fyi/resolving-dependency-issues`\n    );\n  } else {\n    console.log('‚úÖ Everything is fine!');\n  }\n}\n"]}