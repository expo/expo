{"version":3,"file":"resolveCommand.js","sourceRoot":"","sources":["../../src/commands/resolveCommand.ts"],"names":[],"mappings":";;AA+BA,wCAqEC;AAlGD,6DAI8B;AAC9B,4DAA8D;AAC9D,sEAAmE;AACnE,kEAGuC;AAQvC,SAAS,eAAe,CACtB,MAAwB;IAExB,OAAQ,MAAuC,CAAC,YAAY,KAAK,SAAS,CAAC;AAC7E,CAAC;AAMD,uFAAuF;AACvF,SAAgB,cAAc,CAAC,GAA8B;IAC3D,OAAO,IAAA,iDAA4B,EAAC,GAAG,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;SACzE,MAAM,CAAC,YAAY,EAAE,0CAA0C,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;SACnF,MAAM,CAAC,KAAK,EAAE,WAA4B,EAAE,gBAAkC,EAAE,EAAE;QACjF,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,IAAI,OAAO,CAAC;QACtD,MAAM,wBAAwB,GAAG,IAAA,mDAA8B,EAAC;YAC9D,GAAG,gBAAgB;YACnB,WAAW;SACZ,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAAG,MAAM,wBAAwB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACvF,MAAM,OAAO,GAAG,MAAM,wBAAwB,CAAC,UAAU,EAAE,CAAC;QAE5D,MAAM,wBAAwB,GAAG,MAAM,IAAA,8BAAgB,EAAC;YACtD,kBAAkB;YAClB,OAAO;SACR,CAAC,CAAC;QAEH,MAAM,yBAAyB,GAAG,MAAM,IAAA,oCAAmB,EACzD,wBAAwB,EACxB,kBAAkB,CACnB,CAAC;QAEF,MAAM,iBAAiB,GAAG,MAAM,IAAA,mDAAkC,EAAC;YACjE,WAAW,EAAE,wBAAwB,CAAC,cAAc,EAAE;YACtD,QAAQ;SACT,CAAC,CAAC;QAEH,MAAM,aAAa,GAAG,IAAA,mCAAgB,EAAC,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAE/D,MAAM,YAAY,GAAG;YACnB,GAAG,yBAAyB,CAAC,MAAM,CAAc,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;gBAC/D,IAAI,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC5B,MAAM,QAAQ,GAAG,MAAM,CAAC,YAAY,IAAI,EAAE,CAAC;oBAC3C,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,CAAC;wBAC/B,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;oBACnB,CAAC;oBACD,OAAO,GAAG,CAAC;gBACb,CAAC;gBAED,OAAO,GAAG,CAAC;YACb,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC;SACd,CAAC;QAEF,IAAI,gBAAgB,CAAC,IAAI,EAAE,CAAC;YAC1B,OAAO,CAAC,GAAG,CACT,IAAI,CAAC,SAAS,CAAC;gBACb,iBAAiB;gBACjB,YAAY;gBACZ,OAAO,EAAE,yBAAyB;gBAClC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;aAC5C,CAAC,CACH,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CACT,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CACrB;gBACE,iBAAiB;gBACjB,YAAY;gBACZ,OAAO,EAAE,yBAAyB;gBAClC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;aAC5C,EACD,KAAK,EACL,IAAI,EACJ,IAAI,CACL,CACF,CAAC;QACJ,CAAC;IACH,CAAC,CAAC,CAAC;AACP,CAAC","sourcesContent":["import commander from 'commander';\n\nimport {\n  AutolinkingCommonArguments,\n  createAutolinkingOptionsLoader,\n  registerAutolinkingArguments,\n} from './autolinkingOptions';\nimport { findModulesAsync } from '../autolinking/findModules';\nimport { getConfiguration } from '../autolinking/getConfiguration';\nimport {\n  resolveModulesAsync,\n  resolveExtraBuildDependenciesAsync,\n} from '../autolinking/resolveModules';\nimport type {\n  ModuleDescriptor,\n  CommonNativeModuleDescriptor,\n  ModuleDescriptorAndroid,\n  ModuleDescriptorIos,\n} from '../types';\n\nfunction hasCoreFeatures(\n  module: ModuleDescriptor\n): module is ModuleDescriptorAndroid | ModuleDescriptorIos {\n  return (module as CommonNativeModuleDescriptor).coreFeatures !== undefined;\n}\n\ninterface ResolveArguments extends AutolinkingCommonArguments {\n  json?: boolean | null;\n}\n\n/** Searches for available expo modules and resolves the results for given platform. */\nexport function resolveCommand(cli: commander.CommanderStatic) {\n  return registerAutolinkingArguments(cli.command('resolve [searchPaths...]'))\n    .option('-j, --json', 'Output results in the plain JSON format.', () => true, false)\n    .action(async (searchPaths: string[] | null, commandArguments: ResolveArguments) => {\n      const platform = commandArguments.platform ?? 'apple';\n      const autolinkingOptionsLoader = createAutolinkingOptionsLoader({\n        ...commandArguments,\n        searchPaths,\n      });\n\n      const autolinkingOptions = await autolinkingOptionsLoader.getPlatformOptions(platform);\n      const appRoot = await autolinkingOptionsLoader.getAppRoot();\n\n      const expoModulesSearchResults = await findModulesAsync({\n        autolinkingOptions,\n        appRoot,\n      });\n\n      const expoModulesResolveResults = await resolveModulesAsync(\n        expoModulesSearchResults,\n        autolinkingOptions\n      );\n\n      const extraDependencies = await resolveExtraBuildDependenciesAsync({\n        commandRoot: autolinkingOptionsLoader.getCommandRoot(),\n        platform,\n      });\n\n      const configuration = getConfiguration({ autolinkingOptions });\n\n      const coreFeatures = [\n        ...expoModulesResolveResults.reduce<Set<string>>((acc, module) => {\n          if (hasCoreFeatures(module)) {\n            const features = module.coreFeatures ?? [];\n            for (const feature of features) {\n              acc.add(feature);\n            }\n            return acc;\n          }\n\n          return acc;\n        }, new Set()),\n      ];\n\n      if (commandArguments.json) {\n        console.log(\n          JSON.stringify({\n            extraDependencies,\n            coreFeatures,\n            modules: expoModulesResolveResults,\n            ...(configuration ? { configuration } : {}),\n          })\n        );\n      } else {\n        console.log(\n          require('util').inspect(\n            {\n              extraDependencies,\n              coreFeatures,\n              modules: expoModulesResolveResults,\n              ...(configuration ? { configuration } : {}),\n            },\n            false,\n            null,\n            true\n          )\n        );\n      }\n    });\n}\n"]}