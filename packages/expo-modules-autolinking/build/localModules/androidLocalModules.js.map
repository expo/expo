{"version":3,"file":"androidLocalModules.js","sourceRoot":"","sources":["../../src/localModules/androidLocalModules.ts"],"names":[],"mappings":";;;;;AAKA,kEAcC;AAED,oEA0BC;AA/CD,4CAAoB;AACpB,gDAAwB;AAExB,iDAAkE;AAE3D,KAAK,UAAU,2BAA2B,CAAC,UAAkB,EAAE,WAAqB;IACzF,MAAM,kBAAkB,GAAG,MAAM,IAAA,mCAAoB,EAAC,WAAW,CAAC,CAAC;IACnE,MAAM,OAAO,GAAG,MAAM,IAAA,yBAAU,GAAE,CAAC;IAEnC,KAAK,MAAM,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI,kBAAkB,CAAC,KAAK,EAAE,CAAC;QACpE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YAC9B,SAAS;QACX,CAAC;QACD,MAAM,sBAAsB,GAAG,cAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;QACvE,MAAM,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;QAEpE,YAAE,CAAC,SAAS,CAAC,cAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5D,YAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACvC,CAAC;AACH,CAAC;AAEM,KAAK,UAAU,4BAA4B,CAChD,oBAA4B,EAC5B,WAAqB;IAErB,MAAM,kBAAkB,GAAG,MAAM,IAAA,mCAAoB,EAAC,WAAW,CAAC,CAAC;IACnE,MAAM,WAAW,GAAG;;;;;;;;;;;;;QAad,kBAAkB,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,SAAS,WAAW,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;;;;CAItG,CAAC;IAEA,YAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxD,YAAE,CAAC,aAAa,CAAC,cAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,2BAA2B,CAAC,EAAE,WAAW,CAAC,CAAC;AACjG,CAAC","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { getAppRoot, getMirrorStateObject } from './localModules';\n\nexport async function createSymlinksToKotlinFiles(mirrorPath: string, watchedDirs: string[]) {\n  const localModulesObject = await getMirrorStateObject(watchedDirs);\n  const appRoot = await getAppRoot();\n\n  for (const { filePath, watchedDirRoot } of localModulesObject.files) {\n    if (!filePath.endsWith('.kt')) {\n      continue;\n    }\n    const filePathRelativeToRoot = path.relative(watchedDirRoot, filePath);\n    const targetPath = path.resolve(mirrorPath, filePathRelativeToRoot);\n\n    fs.mkdirSync(path.dirname(targetPath), { recursive: true });\n    fs.symlinkSync(filePath, targetPath);\n  }\n}\n\nexport async function generateLocalModulesListFile(\n  localModulesListPath: string,\n  watchedDirs: string[]\n) {\n  const localModulesObject = await getMirrorStateObject(watchedDirs);\n  const fileContent = `\npackage local.modules;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport expo.modules.kotlin.ModulesProvider;\nimport expo.modules.kotlin.modules.Module;\n\npublic class ExpoLocalModulesList implements ModulesProvider {\n  @Override\n  public List<Class<? extends Module>> getModulesList() {\n    return Arrays.<Class<? extends Module>>asList(\n      ${localModulesObject.kotlinClasses.map((moduleClass) => `      ${moduleClass}.class`).join(',\\n')}\n    );\n  }\n}\n`;\n\n  fs.mkdirSync(localModulesListPath, { recursive: true });\n  fs.writeFileSync(path.resolve(localModulesListPath, 'ExpoLocalModulesList.java'), fileContent);\n}\n"]}