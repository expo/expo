{"version":3,"file":"android.js","sourceRoot":"","sources":["../../src/platforms/android.ts"],"names":[],"mappings":"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","sourcesContent":["import glob from 'fast-glob';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ModuleDescriptorAndroid, PackageRevision } from '../types';\n\n/**\n * Generates Java file that contains all autolinked packages.\n */\nexport async function generatePackageListAsync(\n  modules: ModuleDescriptorAndroid[],\n  targetPath: string,\n  namespace: string\n): Promise<void> {\n  const generatedFileContent = await generatePackageListFileContentAsync(modules, namespace);\n  await fs.outputFile(targetPath, generatedFileContent);\n}\n\nasync function findGradleFilesAsync(revision: PackageRevision): Promise<string[]> {\n  const configGradlePaths = revision.config?.androidGradlePaths();\n  if (configGradlePaths && configGradlePaths.length) {\n    return configGradlePaths;\n  }\n\n  const buildGradleFiles = await glob('*/build.gradle', {\n    cwd: revision.path,\n    ignore: ['**/node_modules/**'],\n  });\n\n  return buildGradleFiles;\n}\n\nexport async function resolveModuleAsync(\n  packageName: string,\n  revision: PackageRevision\n): Promise<ModuleDescriptorAndroid | null> {\n  // TODO: Relative source dir should be configurable through the module config.\n\n  // Don't link itself... :D\n  if (packageName === '@unimodules/react-native-adapter') {\n    return null;\n  }\n\n  const buildGradleFiles = await findGradleFilesAsync(revision);\n  // Just in case where the module doesn't have its own `build.gradle`.\n  if (!buildGradleFiles.length) {\n    return null;\n  }\n\n  const projects = buildGradleFiles.map((buildGradleFile) => {\n    const gradleFilePath = path.join(revision.path, buildGradleFile);\n    return {\n      name: convertPackageNameToProjectName(\n        packageName,\n        path.relative(revision.path, gradleFilePath)\n      ),\n      sourceDir: path.dirname(gradleFilePath),\n    };\n  });\n\n  return {\n    packageName,\n    projects,\n    modules: revision.config?.androidModules() ?? [],\n  };\n}\n\n/**\n * Generates the string to put into the generated package list.\n */\nasync function generatePackageListFileContentAsync(\n  modules: ModuleDescriptorAndroid[],\n  namespace: string\n): Promise<string> {\n  // TODO: Instead of ignoring `expo` here, make the package class paths configurable from `expo-module.config.json`.\n  const packagesClasses = await findAndroidPackagesAsync(\n    modules.filter((module) => module.packageName !== 'expo')\n  );\n\n  const modulesClasses = await findAndroidModules(modules);\n\n  return `package ${namespace};\n\nimport java.util.Arrays;\nimport java.util.List;\nimport expo.modules.core.interfaces.Package;\nimport expo.modules.kotlin.modules.Module;\nimport expo.modules.kotlin.ModulesProvider;\n\npublic class ExpoModulesPackageList implements ModulesProvider {\n  private static class LazyHolder {\n    static final List<Package> packagesList = Arrays.<Package>asList(\n${packagesClasses.map((packageClass) => `      new ${packageClass}()`).join(',\\n')}\n    );\n\n    static final List<Class<? extends Module>> modulesList = Arrays.<Class<? extends Module>>asList(\n      ${modulesClasses.map((moduleClass) => `      ${moduleClass}.class`).join(',\\n')}\n    );\n  }\n\n  public static List<Package> getPackageList() {\n    return LazyHolder.packagesList;\n  }\n\n  @Override\n  public List<Class<? extends Module>> getModulesList() {\n    return LazyHolder.modulesList;\n  }\n}\n`;\n}\n\nfunction findAndroidModules(modules: ModuleDescriptorAndroid[]): string[] {\n  const modulesToProvide = modules.filter((module) => module.modules.length > 0);\n  const classNames = ([] as string[]).concat(...modulesToProvide.map((module) => module.modules));\n  return classNames;\n}\n\nasync function findAndroidPackagesAsync(modules: ModuleDescriptorAndroid[]): Promise<string[]> {\n  const classes: string[] = [];\n\n  const flattenedSourceDirList: string[] = [];\n  for (const module of modules) {\n    for (const project of module.projects) {\n      flattenedSourceDirList.push(project.sourceDir);\n    }\n  }\n\n  await Promise.all(\n    flattenedSourceDirList.map(async (sourceDir) => {\n      const files = await glob('**/*Package.{java,kt}', {\n        cwd: sourceDir,\n      });\n\n      for (const file of files) {\n        const fileContent = await fs.readFile(path.join(sourceDir, file), 'utf8');\n\n        const packageRegex = (() => {\n          if (process.env.EXPO_SHOULD_USE_LEGACY_PACKAGE_INTERFACE) {\n            return /\\bimport\\s+org\\.unimodules\\.core\\.(interfaces\\.Package|BasePackage)\\b/;\n          } else {\n            return /\\bimport\\s+expo\\.modules\\.core\\.(interfaces\\.Package|BasePackage)\\b/;\n          }\n        })();\n\n        // Very naive check to skip non-expo packages\n        if (!packageRegex.test(fileContent)) {\n          continue;\n        }\n\n        const classPathMatches = fileContent.match(/^package ([\\w.]+)\\b/m);\n\n        if (classPathMatches) {\n          const basename = path.basename(file, path.extname(file));\n          classes.push(`${classPathMatches[1]}.${basename}`);\n        }\n      }\n    })\n  );\n  return classes.sort();\n}\n\n/**\n * Converts the package name and gradle file path to Android's project name.\n *   `$` to indicate subprojects\n *   `/` path will transform as `-`\n *\n * Example: `@expo/example` + `android/build.gradle` → `expo-example`\n *\n * Example: multiple projects\n *   - `expo-test` + `android/build.gradle` → `react-native-third-party`\n *   - `expo-test` + `subproject/build.gradle` → `react-native-third-party$subproject`\n */\nexport function convertPackageNameToProjectName(\n  packageName: string,\n  buildGradleFile: string\n): string {\n  const name = packageName.replace(/^@/g, '').replace(/\\W+/g, '-');\n  const baseDir = path.dirname(buildGradleFile).replace(/\\//g, '-');\n  return baseDir === 'android' ? name : `${name}$${baseDir}`;\n}\n"]}