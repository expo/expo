{"version":3,"file":"ios.js","sourceRoot":"","sources":["../../src/platforms/ios.ts"],"names":[],"mappings":"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","sourcesContent":["import glob from 'fast-glob';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport {\n  ModuleDescriptorIos,\n  ModuleIosPodspecInfo,\n  PackageRevision,\n  SearchOptions,\n} from '../types';\n\nconst indent = '  ';\n\nasync function findPodspecFiles(revision: PackageRevision): Promise<string[]> {\n  const configPodspecPaths = revision.config?.iosPodspecPaths();\n  if (configPodspecPaths && configPodspecPaths.length) {\n    return configPodspecPaths;\n  }\n\n  const podspecFiles = await glob('*/*.podspec', {\n    cwd: revision.path,\n    ignore: ['**/node_modules/**'],\n  });\n\n  return podspecFiles;\n}\n\nexport function getSwiftModuleNames(\n  pods: ModuleIosPodspecInfo[],\n  swiftModuleNames: string[] | undefined\n): string[] {\n  if (swiftModuleNames && swiftModuleNames.length) {\n    return swiftModuleNames;\n  }\n  // by default, non-alphanumeric characters in the pod name are replaced by _ in the module name\n  return pods.map((pod) => pod.podName.replace(/[^a-zA-Z0-9]/g, '_'));\n}\n\n/**\n * Resolves module search result with additional details required for iOS platform.\n */\nexport async function resolveModuleAsync(\n  packageName: string,\n  revision: PackageRevision,\n  options: SearchOptions\n): Promise<ModuleDescriptorIos | null> {\n  const podspecFiles = await findPodspecFiles(revision);\n  if (!podspecFiles.length) {\n    return null;\n  }\n\n  const pods = podspecFiles.map((podspecFile) => ({\n    podName: path.basename(podspecFile, path.extname(podspecFile)),\n    podspecDir: path.dirname(path.join(revision.path, podspecFile)),\n  }));\n\n  const swiftModuleNames = getSwiftModuleNames(pods, revision.config?.iosSwiftModuleNames());\n\n  return {\n    packageName,\n    pods,\n    swiftModuleNames,\n    flags: options.flags,\n    modules: revision.config?.iosModules() ?? [],\n    appDelegateSubscribers: revision.config?.iosAppDelegateSubscribers() ?? [],\n    reactDelegateHandlers: revision.config?.iosReactDelegateHandlers() ?? [],\n    debugOnly: revision.config?.iosDebugOnly() ?? false,\n  };\n}\n\n/**\n * Generates Swift file that contains all autolinked Swift packages.\n */\nexport async function generatePackageListAsync(\n  modules: ModuleDescriptorIos[],\n  targetPath: string\n): Promise<void> {\n  const className = path.basename(targetPath, path.extname(targetPath));\n  const generatedFileContent = await generatePackageListFileContentAsync(modules, className);\n\n  await fs.outputFile(targetPath, generatedFileContent);\n}\n\n/**\n * Generates the string to put into the generated package list.\n */\nasync function generatePackageListFileContentAsync(\n  modules: ModuleDescriptorIos[],\n  className: string\n): Promise<string> {\n  const iosModules = modules.filter(\n    (module) =>\n      module.modules.length ||\n      module.appDelegateSubscribers.length ||\n      module.reactDelegateHandlers.length\n  );\n\n  const modulesToImport = iosModules.filter((module) => !module.debugOnly);\n  const debugOnlyModules = iosModules.filter((module) => module.debugOnly);\n\n  const swiftModules = ([] as string[])\n    .concat(...modulesToImport.map((module) => module.swiftModuleNames))\n    .filter(Boolean);\n\n  const debugOnlySwiftModules = ([] as string[])\n    .concat(...debugOnlyModules.map((module) => module.swiftModuleNames))\n    .filter(Boolean);\n\n  const modulesClassNames = ([] as string[])\n    .concat(...modulesToImport.map((module) => module.modules))\n    .filter(Boolean);\n\n  const debugOnlyModulesClassNames = ([] as string[])\n    .concat(...debugOnlyModules.map((module) => module.modules))\n    .filter(Boolean);\n\n  const appDelegateSubscribers = ([] as string[]).concat(\n    ...modulesToImport.map((module) => module.appDelegateSubscribers)\n  );\n\n  const debugOnlyAppDelegateSubscribers = ([] as string[]).concat(\n    ...debugOnlyModules.map((module) => module.appDelegateSubscribers)\n  );\n\n  const reactDelegateHandlerModules = modulesToImport.filter(\n    (module) => !!module.reactDelegateHandlers.length\n  );\n\n  const debugOnlyReactDelegateHandlerModules = debugOnlyModules.filter(\n    (module) => !!module.reactDelegateHandlers.length\n  );\n\n  return `/**\n * Automatically generated by expo-modules-autolinking.\n *\n * This autogenerated class provides a list of classes of native Expo modules,\n * but only these that are written in Swift and use the new API for creating Expo modules.\n */\n\nimport ExpoModulesCore\n${generateCommonImportList(swiftModules)}\n${generateDebugOnlyImportList(debugOnlySwiftModules)}\n@objc(${className})\npublic class ${className}: ModulesProvider {\n  public override func getModuleClasses() -> [AnyModule.Type] {\n${generateModuleClasses(modulesClassNames, debugOnlyModulesClassNames)}\n  }\n\n  public override func getAppDelegateSubscribers() -> [ExpoAppDelegateSubscriber.Type] {\n${generateModuleClasses(appDelegateSubscribers, debugOnlyAppDelegateSubscribers)}\n  }\n\n  public override func getReactDelegateHandlers() -> [ExpoReactDelegateHandlerTupleType] {\n${generateReactDelegateHandlers(reactDelegateHandlerModules, debugOnlyReactDelegateHandlerModules)}\n  }\n}\n`;\n}\n\nfunction generateCommonImportList(swiftModules: string[]): string {\n  return swiftModules.map((moduleName) => `import ${moduleName}`).join('\\n');\n}\n\nfunction generateDebugOnlyImportList(swiftModules: string[]): string {\n  if (!swiftModules.length) {\n    return '';\n  }\n\n  return (\n    wrapInDebugConfigurationCheck(\n      0,\n      swiftModules.map((moduleName) => `import ${moduleName}`).join('\\n')\n    ) + '\\n'\n  );\n}\n\nfunction generateModuleClasses(classNames: string[], debugOnlyClassName: string[]): string {\n  const commonClassNames = formatArrayOfClassNames(classNames);\n  if (debugOnlyClassName.length > 0) {\n    return wrapInDebugConfigurationCheck(\n      2,\n      `return ${formatArrayOfClassNames(classNames.concat(debugOnlyClassName))}`,\n      `return ${commonClassNames}`\n    );\n  } else {\n    return `${indent.repeat(2)}return ${commonClassNames}`;\n  }\n}\n\n/**\n * Formats an array of class names to Swift's array containing these classes.\n */\nfunction formatArrayOfClassNames(classNames: string[]): string {\n  return `[${classNames.map((className) => `\\n${indent.repeat(3)}${className}.self`).join(',')}\n${indent.repeat(2)}]`;\n}\n\nfunction generateReactDelegateHandlers(\n  module: ModuleDescriptorIos[],\n  debugOnlyModules: ModuleDescriptorIos[]\n): string {\n  const commonModules = formatArrayOfReactDelegateHandler(module);\n  if (debugOnlyModules.length > 0) {\n    return wrapInDebugConfigurationCheck(\n      2,\n      `return ${formatArrayOfReactDelegateHandler(module.concat(debugOnlyModules))}`,\n      `return ${commonModules}`\n    );\n  } else {\n    return `${indent.repeat(2)}return ${commonModules}`;\n  }\n}\n\n/**\n * Formats an array of modules to Swift's array containing ReactDelegateHandlers\n */\nexport function formatArrayOfReactDelegateHandler(modules: ModuleDescriptorIos[]): string {\n  const values: string[] = [];\n  for (const module of modules) {\n    for (const handler of module.reactDelegateHandlers) {\n      values.push(`(packageName: \"${module.packageName}\", handler: ${handler}.self)`);\n    }\n  }\n  return `[${values.map((value) => `\\n${indent.repeat(3)}${value}`).join(',')}\n${indent.repeat(2)}]`;\n}\n\nfunction wrapInDebugConfigurationCheck(\n  indentationLevel: number,\n  debugBlock: string,\n  releaseBlock: string | null = null\n) {\n  if (releaseBlock) {\n    return `${indent.repeat(indentationLevel)}#if EXPO_CONFIGURATION_DEBUG\\n${indent.repeat(\n      indentationLevel\n    )}${debugBlock}\\n${indent.repeat(indentationLevel)}#else\\n${indent.repeat(\n      indentationLevel\n    )}${releaseBlock}\\n${indent.repeat(indentationLevel)}#endif`;\n  }\n\n  return `${indent.repeat(indentationLevel)}#if EXPO_CONFIGURATION_DEBUG\\n${indent.repeat(\n    indentationLevel\n  )}${debugBlock}\\n${indent.repeat(indentationLevel)}#endif`;\n}\n"]}