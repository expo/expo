{"version":3,"file":"rncliLocal.js","sourceRoot":"","sources":["../../src/dependencies/rncliLocal.ts"],"names":[],"mappings":";;;;;AAUA,kFAkCC;AA5CD,gDAAwB;AAGxB,mCAAwE;AAOjE,KAAK,UAAU,mCAAmC,CACvD,OAAe,EACf,aAAsD,EACtD,EAAE,uBAAuB,GAAG,sCAA8B,KAAwB,EAAE;IAEpF,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAa,EAAC,OAAO,CAAC,CAAC;IAC9C,MAAM,aAAa,GAAqB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5D,IAAI,CAAC,QAAQ,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;QAC/D,OAAO,aAAa,CAAC;IACvB,CAAC;IAED,KAAK,MAAM,cAAc,IAAI,aAAa,CAAC,YAAY,EAAE,CAAC;QACxD,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,EAAE,CAAC;YAC7C,SAAS;QACX,CAAC;QACD,MAAM,gBAAgB,GAAG,aAAa,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;QACpE,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,IAAI,IAAI,OAAO,gBAAgB,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;YAC3F,MAAM,UAAU,GAAG,cAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACjE,MAAM,QAAQ,GAAG,MAAM,IAAA,qBAAa,EAAC,UAAU,CAAC,CAAC;YACjD,IAAI,QAAQ,EAAE,CAAC;gBACb,aAAa,CAAC,cAAc,CAAC,GAAG;oBAC9B,MAAM,iDAAyC;oBAC/C,IAAI,EAAE,cAAc;oBACpB,OAAO,EAAE,EAAE;oBACX,IAAI,EAAE,QAAQ;oBACd,UAAU;oBACV,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,CAAC;iBACT,CAAC;YACJ,CAAC;QACH,CAAC;IACH,CAAC;IAED,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["import path from 'path';\n\nimport { DependencyResolutionSource, type ResolutionResult } from './types';\nimport { defaultShouldIncludeDependency, maybeRealpath } from './utils';\nimport { RNConfigReactNativeProjectConfig } from '../reactNativeConfig';\n\ninterface ResolutionOptions {\n  shouldIncludeDependency?(name: string): boolean;\n}\n\nexport async function scanDependenciesFromRNProjectConfig(\n  rawPath: string,\n  projectConfig: RNConfigReactNativeProjectConfig | null,\n  { shouldIncludeDependency = defaultShouldIncludeDependency }: ResolutionOptions = {}\n): Promise<ResolutionResult> {\n  const rootPath = await maybeRealpath(rawPath);\n  const searchResults: ResolutionResult = Object.create(null);\n  if (!rootPath || !projectConfig || !projectConfig.dependencies) {\n    return searchResults;\n  }\n\n  for (const dependencyName in projectConfig.dependencies) {\n    if (!shouldIncludeDependency(dependencyName)) {\n      continue;\n    }\n    const dependencyConfig = projectConfig.dependencies[dependencyName];\n    if (dependencyConfig && dependencyConfig.root && typeof dependencyConfig.root === 'string') {\n      const originPath = path.resolve(rootPath, dependencyConfig.root);\n      const realPath = await maybeRealpath(originPath);\n      if (realPath) {\n        searchResults[dependencyName] = {\n          source: DependencyResolutionSource.RN_CLI_LOCAL,\n          name: dependencyName,\n          version: '',\n          path: realPath,\n          originPath,\n          duplicates: null,\n          depth: 0,\n        };\n      }\n    }\n  }\n\n  return searchResults;\n}\n"]}