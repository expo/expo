{"version":3,"file":"reactNativeConfig.js","sourceRoot":"","sources":["../../src/reactNativeConfig/reactNativeConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs/promises';\nimport path from 'path';\n\nimport {\n  findGradleAndManifestAsync,\n  parsePackageNameAsync,\n  resolveDependencyConfigImplAndroidAsync,\n} from './androidResolver';\nimport { loadConfigAsync } from './config';\nimport { resolveDependencyConfigImplIosAsync } from './iosResolver';\nimport type {\n  RNConfigCommandOptions,\n  RNConfigDependency,\n  RNConfigReactNativeAppProjectConfig,\n  RNConfigReactNativeLibraryConfig,\n  RNConfigReactNativeProjectConfig,\n  RNConfigResult,\n} from './reactNativeConfig.types';\nimport { getIsolatedModulesPath } from '../autolinking/utils';\nimport { fileExistsAsync } from '../fileUtils';\nimport type { SupportedPlatform } from '../types';\n\n/**\n * Create config for react-native core autolinking.\n */\nexport async function createReactNativeConfigAsync({\n  platform,\n  projectRoot,\n  searchPaths,\n}: RNConfigCommandOptions): Promise<RNConfigResult> {\n  const projectConfig = await loadConfigAsync<RNConfigReactNativeProjectConfig>(projectRoot);\n  const dependencyRoots = await findDependencyRootsAsync(projectRoot, searchPaths);\n  const reactNativePath = dependencyRoots['react-native'];\n\n  const dependencyConfigs = await Promise.all(\n    Object.entries(dependencyRoots).map(async ([name, packageRoot]) => {\n      const config = await resolveDependencyConfigAsync(platform, name, packageRoot, projectConfig);\n      return [name, config];\n    })\n  );\n  const dependencyResults = Object.fromEntries<RNConfigDependency>(\n    dependencyConfigs.filter(([, config]) => config != null) as Iterable<\n      [string, RNConfigDependency]\n    >\n  );\n  const projectData = await resolveAppProjectConfigAsync(projectRoot, platform);\n  return {\n    root: projectRoot,\n    reactNativePath,\n    dependencies: dependencyResults,\n    project: projectData,\n  };\n}\n\n/**\n * Find all dependencies and their directories from the project.\n */\nexport async function findDependencyRootsAsync(\n  projectRoot: string,\n  searchPaths: string[]\n): Promise<Record<string, string>> {\n  const packageJson = JSON.parse(await fs.readFile(path.join(projectRoot, 'package.json'), 'utf8'));\n  const dependencies = [\n    ...Object.keys(packageJson.dependencies ?? {}),\n    ...Object.keys(packageJson.devDependencies ?? {}),\n  ];\n\n  const results: Record<string, string> = {};\n  // `searchPathSet` can be mutated to discover all \"isolated modules groups\", when using isolated modules\n  const searchPathSet = new Set(searchPaths);\n\n  for (const name of dependencies) {\n    for (const searchPath of searchPathSet) {\n      const packageConfigPath = path.resolve(searchPath, name, 'package.json');\n      if (await fileExistsAsync(packageConfigPath)) {\n        const packageRoot = path.dirname(packageConfigPath);\n        results[name] = packageRoot;\n\n        const maybeIsolatedModulesPath = getIsolatedModulesPath(packageRoot, name);\n        if (maybeIsolatedModulesPath) {\n          searchPathSet.add(maybeIsolatedModulesPath);\n        }\n        break;\n      }\n    }\n  }\n\n  return results;\n}\n\nexport async function resolveDependencyConfigAsync(\n  platform: SupportedPlatform,\n  name: string,\n  packageRoot: string,\n  projectConfig: RNConfigReactNativeProjectConfig | null\n): Promise<RNConfigDependency | null> {\n  const libraryConfig = await loadConfigAsync<RNConfigReactNativeLibraryConfig>(packageRoot);\n  const reactNativeConfig = {\n    ...libraryConfig?.dependency,\n    ...projectConfig?.dependencies[name],\n  };\n\n  if (Object.keys(libraryConfig?.platforms ?? {}).length > 0) {\n    // Package defines platforms would be a platform host package.\n    // The rnc-cli will skip this package.\n    return null;\n  }\n  if (name === 'react-native') {\n    // Starting from version 0.76, the `react-native` package only defines platforms\n    // when @react-native-community/cli-platform-android/ios is installed.\n    // Therefore, we need to manually filter it out.\n    return null;\n  }\n\n  let platformData = null;\n  if (platform === 'android') {\n    platformData = await resolveDependencyConfigImplAndroidAsync(\n      packageRoot,\n      reactNativeConfig.platforms?.android\n    );\n  } else if (platform === 'ios') {\n    platformData = await resolveDependencyConfigImplIosAsync(\n      packageRoot,\n      reactNativeConfig.platforms?.ios\n    );\n  }\n  if (!platformData) {\n    return null;\n  }\n  return {\n    root: packageRoot,\n    name,\n    platforms: {\n      [platform]: platformData,\n    },\n  };\n}\n\nexport async function resolveAppProjectConfigAsync(\n  projectRoot: string,\n  platform: SupportedPlatform\n): Promise<RNConfigReactNativeAppProjectConfig> {\n  if (platform === 'android') {\n    const androidDir = path.join(projectRoot, 'android');\n    const { gradle, manifest } = await findGradleAndManifestAsync({ androidDir, isLibrary: false });\n    if (gradle == null || manifest == null) {\n      return {};\n    }\n    const packageName = await parsePackageNameAsync(androidDir, manifest, gradle);\n\n    return {\n      android: {\n        packageName: packageName ?? '',\n        sourceDir: path.join(projectRoot, 'android'),\n      },\n    };\n  }\n\n  if (platform === 'ios') {\n    return {\n      ios: {\n        sourceDir: path.join(projectRoot, 'ios'),\n      },\n    };\n  }\n\n  return {};\n}\n"]}