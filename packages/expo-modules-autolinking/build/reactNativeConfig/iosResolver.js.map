{"version":3,"file":"iosResolver.js","sourceRoot":"","sources":["../../src/reactNativeConfig/iosResolver.ts"],"names":[],"mappings":";;;;;AAqBA,kFAyCC;AA9DD,4CAAoB;AACpB,gDAAwB;AAQxB,mDAAmD;AACnD,MAAM,eAAe,GAAG,KAAK,EAAE,UAAkB,EAAE,EAAE;IACnD,IAAI,CAAC;QACH,MAAM,OAAO,GAAG,CAAC,MAAM,YAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;aAC7E,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aACpE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAChD,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5E,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEK,KAAK,UAAU,mCAAmC,CACvD,UAA6C,EAC7C,iBAA2E,EAC3E,gBAA0C;IAE1C,IAAI,iBAAiB,KAAK,IAAI,EAAE,CAAC;QAC/B,qCAAqC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,kBAAkB,GAAG,cAAI,CAAC,IAAI,CAClC,UAAU,CAAC,IAAI,EACf,cAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,UAAU,CAC5C,CAAC;IACF,MAAM,WAAW,GAAG,YAAE,CAAC,UAAU,CAAC,kBAAkB,CAAC;QACnD,CAAC,CAAC,kBAAkB;QACpB,CAAC,CAAC,MAAM,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,iBAAiB,KAAK,SAAS,IAAI,gBAAgB,EAAE,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC;QACnF,oEAAoE;QACpE,MAAM,sBAAsB,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;YACtF,MAAM,eAAe,GAAG,cAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAC/D,OAAO,eAAe,KAAK,WAAW,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,6EAA6E;QAC7E,2EAA2E;QAC3E,+CAA+C;QAC/C,IAAI,sBAAsB,IAAI,IAAI,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,OAAO;QACL,WAAW;QACX,OAAO,EAAE,UAAU,CAAC,OAAO;QAC3B,cAAc,EAAE,iBAAiB,EAAE,cAAc,IAAI,EAAE;QACvD,YAAY,EAAE,iBAAiB,EAAE,YAAY,IAAI,EAAE;KACpD,CAAC;AACJ,CAAC","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport type {\n  RNConfigDependencyIos,\n  RNConfigReactNativePlatformsConfigIos,\n} from './reactNativeConfig.types';\nimport type { ExpoModuleConfig } from '../ExpoModuleConfig';\n\n/** Find all *.podspec files in target directory */\nconst findPodspecFile = async (targetPath: string) => {\n  try {\n    const entries = (await fs.promises.readdir(targetPath, { withFileTypes: true }))\n      .filter((entry) => entry.isFile() && entry.name.endsWith('.podspec'))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return entries.length > 0 ? path.join(targetPath, entries[0].name) : null;\n  } catch {\n    return null;\n  }\n};\n\nexport async function resolveDependencyConfigImplIosAsync(\n  resolution: { path: string; version: string },\n  reactNativeConfig: RNConfigReactNativePlatformsConfigIos | null | undefined,\n  expoModuleConfig?: ExpoModuleConfig | null\n): Promise<RNConfigDependencyIos | null> {\n  if (reactNativeConfig === null) {\n    // Skip autolinking for this package.\n    return null;\n  }\n\n  const mainPackagePodspec = path.join(\n    resolution.path,\n    path.basename(resolution.path) + '.podspec'\n  );\n  const podspecPath = fs.existsSync(mainPackagePodspec)\n    ? mainPackagePodspec\n    : await findPodspecFile(resolution.path);\n  if (!podspecPath) {\n    return null;\n  }\n\n  if (reactNativeConfig === undefined && expoModuleConfig?.supportsPlatform('apple')) {\n    // Check if Expo podspec files contain the React Native podspec file\n    const overlappingPodspecPath = expoModuleConfig.applePodspecPaths().find((targetFile) => {\n      const expoPodspecPath = path.join(resolution.path, targetFile);\n      return expoPodspecPath === podspecPath;\n    });\n    // NOTE(@kitten): If we don't have a react-native.config.{js,ts} file and the\n    // package is also an Expo module, we only link it as a React Native module\n    // if both don't point at the same podspec file\n    if (overlappingPodspecPath != null) {\n      return null;\n    }\n  }\n\n  return {\n    podspecPath,\n    version: resolution.version,\n    configurations: reactNativeConfig?.configurations || [],\n    scriptPhases: reactNativeConfig?.scriptPhases || [],\n  };\n}\n"]}