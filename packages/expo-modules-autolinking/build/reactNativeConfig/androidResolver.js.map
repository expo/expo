{"version":3,"file":"androidResolver.js","sourceRoot":"","sources":["../../src/reactNativeConfig/androidResolver.ts"],"names":[],"mappings":";;;;;AAcA,0FAiGC;AAKD,sDAmBC;AAsCD,4EAmCC;AAID,kEAwBC;AAED,sDA+BC;AAED,wEAmBC;AAmDD,gEAoBC;AAzWD,2DAA6B;AAC7B,gDAAwB;AAQxB,MAAM,eAAe,GAAG,KAAK,EAAE,IAAY,EAA0B,EAAE;IACrE,MAAM,IAAI,GAAG,MAAM,kBAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC;IACnD,OAAO,IAAI,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AACtC,CAAC,CAAC;AAEK,KAAK,UAAU,uCAAuC,CAC3D,WAAmB,EACnB,iBAA+E,EAC/E,gBAA0C;IAE1C,IAAI,iBAAiB,KAAK,IAAI,EAAE,CAAC;QAC/B,qCAAqC;QACrC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,uGAAuG;IACvG,8FAA8F;IAE9F,MAAM,SAAS,GAAG,iBAAiB,EAAE,SAAS,IAAI,SAAS,CAAC;IAC5D,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACrD,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,0BAA0B,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IAE/F,MAAM,mBAAmB,GACvB,iBAAiB,EAAE,6BAA6B,IAAI,IAAI;QACxD,iBAAiB,EAAE,uBAAuB,IAAI,IAAI;QAClD,iBAAiB,EAAE,mBAAmB,IAAI,IAAI;QAC9C,CAAC,QAAQ;QACT,CAAC,MAAM,CAAC;IAEV,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACjD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,iBAAiB,KAAK,SAAS,IAAI,gBAAgB,EAAE,gBAAgB,CAAC,SAAS,CAAC,EAAE,CAAC;QACrF,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC;YACjE,wFAAwF;YACxF,6DAA6D;YAC7D,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,IAAI,eAAe,GAAkB,IAAI,CAAC;IAC1C,IAAI,iBAAiB,GAAkB,IAAI,CAAC;IAC5C,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACzB,MAAM,WAAW,GACf,iBAAiB,EAAE,WAAW,IAAI,CAAC,MAAM,qBAAqB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;QACpF,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,sBAAsB,GAAG,MAAM,gCAAgC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAC/F,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC5B,OAAO,IAAI,CAAC;QACd,CAAC;QACD,iBAAiB;YACf,iBAAiB,EAAE,iBAAiB,IAAI,UAAU,WAAW,IAAI,sBAAsB,GAAG,CAAC;QAC7F,eAAe,GAAG,iBAAiB,EAAE,eAAe,IAAI,OAAO,sBAAsB,IAAI,CAAC;IAC5F,CAAC;IAED,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,kBAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC;IAClG,MAAM,UAAU,GAAG,iBAAiB,EAAE,UAAU,IAAI,EAAE,CAAC;IACvD,MAAM,uBAAuB,GAAG,iBAAiB,EAAE,uBAAuB,CAAC;IAC3E,MAAM,WAAW,GACf,iBAAiB,EAAE,WAAW,IAAI,CAAC,MAAM,qBAAqB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAC3F,MAAM,oBAAoB,GACxB,iBAAiB,EAAE,oBAAoB;QACvC,CAAC,MAAM,8BAA8B,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;IACnE,IAAI,cAAc,GAAG,iBAAiB,EAAE,cAAc;QACpD,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,iBAAiB,EAAE,cAAc,CAAC;QAC1D,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,mDAAmD,CAAC,CAAC;IAC/E,MAAM,6BAA6B,GAAG,iBAAiB,EAAE,6BAA6B,IAAI,IAAI,CAAC;IAC/F,MAAM,mBAAmB,GAAG,iBAAiB,EAAE,mBAAmB,IAAI,IAAI,CAAC;IAC3E,IAAI,uBAAuB,GAAG,iBAAiB,EAAE,uBAAuB;QACtE,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,iBAAiB,EAAE,uBAAuB,CAAC;QACnE,CAAC,CAAC,IAAI,CAAC;IACT,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;QACjC,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACpD,IAAI,uBAAuB,EAAE,CAAC;YAC5B,uBAAuB,GAAG,uBAAuB,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QACxE,CAAC;IACH,CAAC;IAED,MAAM,MAAM,GAA8B;QACxC,SAAS,EAAE,UAAU;QACrB,iBAAiB;QACjB,eAAe;QACf,uBAAuB;QACvB,UAAU;QACV,WAAW;QACX,oBAAoB;QACpB,cAAc;QACd,6BAA6B;QAC7B,uBAAuB;QACvB,mBAAmB;QACnB,mBAAmB;KACpB,CAAC;IACF,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QACxB,OAAO,MAAM,CAAC,WAAW,CAAC;IAC5B,CAAC;IACD,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;QACpC,OAAO,MAAM,CAAC,uBAAuB,CAAC;IACxC,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,qBAAqB,CACzC,YAA2B,EAC3B,UAAyB;IAEzB,IAAI,UAAU,EAAE,CAAC;QACf,MAAM,cAAc,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAC7D,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACvE,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IACD,IAAI,YAAY,EAAE,CAAC;QACjB,MAAM,gBAAgB,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QACjE,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACxD,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,KAAK,SAAS,CAAC,CAAC,oBAAoB,CAClC,UAAkB,EAClB,gBAAgE,EAChE,IAAI,GAAG,CAAC,kBAAE,CAAC,OAAO;IAElB,MAAM,KAAK,GAAG,CAAC,UAAU,CAAC,CAAC;IAC3B,IAAI,UAA8B,CAAC;IACnC,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;QAChE,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,IAAI;gBAClB,CAAC,CAAC,CAAC,MAAM,kBAAE,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACpE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAC7B;gBACH,CAAC,CAAC,MAAM,kBAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACjC,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,OAAO,EAAE,CAAC;gBAClC,IAAI,KAAK,CAAC,WAAW,EAAE,IAAI,KAAK,CAAC,IAAI,KAAK,cAAc,EAAE,CAAC;oBACzD,IAAI,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;wBAClE,KAAK,CAAC,IAAI,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBAChD,CAAC;gBACH,CAAC;qBAAM,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;oBAC1B,MAAM;wBACJ,IAAI,EAAE,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC;wBACvC,UAAU,EAAE,UAAU;wBACtB,IAAI,EAAE,KAAK,CAAC,IAAI;qBACR,CAAC;gBACb,CAAC;YACH,CAAC;QACH,CAAC;QAAC,MAAM,CAAC;YACP,SAAS;QACX,CAAC;IACH,CAAC;AACH,CAAC;AAED;;GAEG;AACI,KAAK,UAAU,gCAAgC,CACpD,WAAmB,EACnB,UAAkB;IAElB,+CAA+C;IAC/C,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,oBAAoB,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC;QAC5E,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;YAC7E,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC/C,MAAM,OAAO,GAAG,2BAA2B,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAClE,IAAI,OAAO,EAAE,CAAC;oBACZ,OAAO,OAAO,CAAC;gBACjB,CAAC;YACH,CAAC;YAAC,MAAM,CAAC;gBACP,SAAS;YACX,CAAC;QACH,CAAC;IACH,CAAC;IAED,+CAA+C;IAC/C,IAAI,MAAM,eAAe,CAAC,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,yBAAyB,CAAC,CAAC,EAAE,CAAC;QAC7E,OAAO,IAAI,CAAC;IACd,CAAC;IAED,kCAAkC;IAClC,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,oBAAoB,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC;QAC5E,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YAC/D,MAAM,QAAQ,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,OAAO,GAAG,2BAA2B,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAClE,IAAI,OAAO,EAAE,CAAC;gBACZ,OAAO,OAAO,CAAC;YACjB,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,IAAI,qBAAqB,GAAkB,IAAI,CAAC;AAChD,IAAI,0BAA0B,GAAkB,IAAI,CAAC;AACrD,SAAgB,2BAA2B,CAAC,SAAiB,EAAE,QAAgB;IAC7E,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAEzC,yBAAyB;IACzB,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC3B,qBAAqB;YACnB,gFAAgF,CAAC;IACrF,CAAC;IACD,MAAM,iBAAiB,GAAG,YAAY,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACpE,IAAI,iBAAiB,EAAE,CAAC;QACtB,OAAO,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,qCAAqC;IACrC,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAChC,0BAA0B;YACxB,yFAAyF,CAAC;IAC9F,CAAC;IACD,MAAM,sBAAsB,GAAG,YAAY,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;IAC9E,IAAI,sBAAsB,EAAE,CAAC;QAC3B,OAAO,sBAAsB,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,qBAAqB,CACzC,UAAkB,EAClB,WAAgB;IAEhB,6CAA6C;IAC7C,IAAI,WAAW,CAAC,aAAa,EAAE,IAAI,EAAE,CAAC;QACpC,OAAO,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC;IACxC,CAAC;IAED,MAAM,iBAAiB,GAAG,4BAA4B,CAAC;IACvD,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IACzD,sCAAsC;IACtC,IAAI,MAAM,eAAe,CAAC,UAAU,CAAC,EAAE,CAAC;QACtC,MAAM,mBAAmB,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAClE,MAAM,KAAK,GAAG,mBAAmB,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAC3D,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IAED,0CAA0C;IAC1C,MAAM,aAAa,GAAG,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;IAChE,IAAI,MAAM,eAAe,CAAC,aAAa,CAAC,EAAE,CAAC;QACzC,MAAM,mBAAmB,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;QACrE,MAAM,KAAK,GAAG,mBAAmB,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAC3D,IAAI,KAAK,EAAE,CAAC;YACV,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;IACH,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAEM,KAAK,UAAU,8BAA8B,CAClD,WAAmB,EACnB,WAAgB;IAEhB,MAAM,MAAM,GAAG,WAAW,EAAE,aAAa,EAAE,SAAS;QAClD,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC;QAC7D,CAAC,CAAC,WAAW,CAAC;IAChB,MAAM,KAAK,GAAG,YAAY,CAAC;IAC3B,MAAM,OAAO,GAAG,IAAI,GAAG,EAAU,CAAC;IAClC,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC;QACvD,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;YAC3B,MAAM,QAAQ,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/C,MAAM,OAAO,GAAG,yBAAyB,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAChE,IAAI,OAAO,EAAE,CAAC;gBACZ,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACvB,CAAC;QACH,CAAC;IACH,CAAC;IACD,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACzD,CAAC;AAED,IAAI,yBAAyB,GAAkB,IAAI,CAAC;AACpD,SAAS,yBAAyB,CAAC,SAAiB,EAAE,QAAgB;IACpE,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAEzC,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAC/B,yBAAyB;YACvB,yFAAyF,CAAC;IAC9F,CAAC;IACD,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC5D,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC3C,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,qBAAqB,CAAC;IAC1C,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,yBAAyB,GAAG,KAAK,EAAE,UAAkB,EAAE,EAAE;IAC7D,MAAM,KAAK,GAAG,oBAAoB,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE;QAClE,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,OAAO,CAAC;YACb,KAAK,OAAO,CAAC;YACb,KAAK,UAAU,CAAC;YAChB,KAAK,UAAU,CAAC;YAChB,KAAK,MAAM;gBACT,OAAO,KAAK,CAAC;YACf,KAAK,SAAS;gBACZ,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACnD,KAAK,aAAa,CAAC;YACnB,KAAK,MAAM;gBACT,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACvC;gBACE,OAAO,IAAI,CAAC;QAChB,CAAC;IACH,CAAC,CAAC,CAAC;IACH,MAAM,aAAa,GAAa,EAAE,CAAC;IACnC,IAAI,KAAK,EAAE,MAAM,KAAK,IAAI,KAAK,EAAE,CAAC;QAChC,IAAI,KAAK,CAAC,IAAI,KAAK,qBAAqB,EAAE,CAAC;YACzC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IACD,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,KAAK,EAAE,UAAkB,EAAE,SAAmB,EAAE,EAAE;IAC/E,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,GAAG,CACnC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,eAAe,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,CAC9E,CAAC;IACF,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC,CAAC;AAEK,KAAK,UAAU,0BAA0B,CAAC,EAC/C,UAAU,EACV,SAAS,GAIV;IACC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QAC7C,yBAAyB,CAAC,UAAU,CAAC;QACrC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,cAAI,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,EAAE;YAC5E,cAAc;YACd,kBAAkB;SACnB,CAAC;KACH,CAAC,CAAC;IACH,mHAAmH;IACnH,MAAM,QAAQ,GACZ,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC5D,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,OAAO,EAAE,MAAM,EAAE,MAAM,IAAI,IAAI,EAAE,QAAQ,EAAE,QAAQ,IAAI,IAAI,EAAE,CAAC;AAChE,CAAC","sourcesContent":["import fs from 'fs/promises';\nimport path from 'path';\n\nimport type {\n  RNConfigDependencyAndroid,\n  RNConfigReactNativePlatformsConfigAndroid,\n} from './reactNativeConfig.types';\nimport type { ExpoModuleConfig } from '../ExpoModuleConfig';\n\nconst fileExistsAsync = async (file: string): Promise<string | null> => {\n  const stat = await fs.stat(file).catch(() => null);\n  return stat?.isFile() ? file : null;\n};\n\nexport async function resolveDependencyConfigImplAndroidAsync(\n  packageRoot: string,\n  reactNativeConfig: RNConfigReactNativePlatformsConfigAndroid | null | undefined,\n  expoModuleConfig?: ExpoModuleConfig | null\n): Promise<RNConfigDependencyAndroid | null> {\n  if (reactNativeConfig === null) {\n    // Skip autolinking for this package.\n    return null;\n  }\n\n  // NOTE(@kitten): We allow `reactNativeConfig === undefined` here. That indicates a missing config file\n  // However, React Native modules with left out config files are explicitly supported and valid\n\n  const sourceDir = reactNativeConfig?.sourceDir || 'android';\n  const androidDir = path.join(packageRoot, sourceDir);\n  const { gradle, manifest } = await findGradleAndManifestAsync({ androidDir, isLibrary: true });\n\n  const isPureCxxDependency =\n    reactNativeConfig?.cxxModuleCMakeListsModuleName != null &&\n    reactNativeConfig?.cxxModuleCMakeListsPath != null &&\n    reactNativeConfig?.cxxModuleHeaderName != null &&\n    !manifest &&\n    !gradle;\n\n  if (!manifest && !gradle && !isPureCxxDependency) {\n    return null;\n  }\n\n  if (reactNativeConfig === undefined && expoModuleConfig?.supportsPlatform('android')) {\n    if (!!gradle && !expoModuleConfig?.rawConfig.android?.gradlePath) {\n      // If the React Native module has a gradle file and the Expo module doesn't redirect it,\n      // they will conflict and we can't link both at the same time\n      return null;\n    }\n  }\n\n  let packageInstance: string | null = null;\n  let packageImportPath: string | null = null;\n  if (!isPureCxxDependency) {\n    const packageName =\n      reactNativeConfig?.packageName || (await parsePackageNameAsync(manifest, gradle));\n    if (!packageName) {\n      return null;\n    }\n    const nativePackageClassName = await parseNativePackageClassNameAsync(packageRoot, androidDir);\n    if (!nativePackageClassName) {\n      return null;\n    }\n    packageImportPath =\n      reactNativeConfig?.packageImportPath || `import ${packageName}.${nativePackageClassName};`;\n    packageInstance = reactNativeConfig?.packageInstance || `new ${nativePackageClassName}()`;\n  }\n\n  const packageJson = JSON.parse(await fs.readFile(path.join(packageRoot, 'package.json'), 'utf8'));\n  const buildTypes = reactNativeConfig?.buildTypes || [];\n  const dependencyConfiguration = reactNativeConfig?.dependencyConfiguration;\n  const libraryName =\n    reactNativeConfig?.libraryName || (await parseLibraryNameAsync(androidDir, packageJson));\n  const componentDescriptors =\n    reactNativeConfig?.componentDescriptors ||\n    (await parseComponentDescriptorsAsync(packageRoot, packageJson));\n  let cmakeListsPath = reactNativeConfig?.cmakeListsPath\n    ? path.join(androidDir, reactNativeConfig?.cmakeListsPath)\n    : path.join(androidDir, 'build/generated/source/codegen/jni/CMakeLists.txt');\n  const cxxModuleCMakeListsModuleName = reactNativeConfig?.cxxModuleCMakeListsModuleName || null;\n  const cxxModuleHeaderName = reactNativeConfig?.cxxModuleHeaderName || null;\n  let cxxModuleCMakeListsPath = reactNativeConfig?.cxxModuleCMakeListsPath\n    ? path.join(androidDir, reactNativeConfig?.cxxModuleCMakeListsPath)\n    : null;\n  if (process.platform === 'win32') {\n    cmakeListsPath = cmakeListsPath.replace(/\\\\/g, '/');\n    if (cxxModuleCMakeListsPath) {\n      cxxModuleCMakeListsPath = cxxModuleCMakeListsPath.replace(/\\\\/g, '/');\n    }\n  }\n\n  const result: RNConfigDependencyAndroid = {\n    sourceDir: androidDir,\n    packageImportPath,\n    packageInstance,\n    dependencyConfiguration,\n    buildTypes,\n    libraryName,\n    componentDescriptors,\n    cmakeListsPath,\n    cxxModuleCMakeListsModuleName,\n    cxxModuleCMakeListsPath,\n    cxxModuleHeaderName,\n    isPureCxxDependency,\n  };\n  if (!result.libraryName) {\n    delete result.libraryName;\n  }\n  if (!result.dependencyConfiguration) {\n    delete result.dependencyConfiguration;\n  }\n  return result;\n}\n\n/**\n * Parse the `RNConfigDependencyAndroid.packageName`\n */\nexport async function parsePackageNameAsync(\n  manifestPath: string | null,\n  gradlePath: string | null\n): Promise<string | null> {\n  if (gradlePath) {\n    const gradleContents = await fs.readFile(gradlePath, 'utf8');\n    const match = gradleContents.match(/namespace\\s*[=]*\\s*[\"'](.+?)[\"']/);\n    if (match) {\n      return match[1];\n    }\n  }\n  if (manifestPath) {\n    const manifestContents = await fs.readFile(manifestPath, 'utf8');\n    const match = manifestContents.match(/package=\"(.+?)\"/);\n    if (match) {\n      return match[1];\n    }\n  }\n  return null;\n}\n\nasync function* scanFilesRecursively(\n  parentPath: string,\n  includeDirectory?: (parentPath: string, name: string) => boolean,\n  sort = !fs.opendir\n) {\n  const queue = [parentPath];\n  let targetPath: string | undefined;\n  while (queue.length > 0 && (targetPath = queue.shift()) != null) {\n    try {\n      const entries = sort\n        ? (await fs.readdir(targetPath, { withFileTypes: true })).sort((a, b) =>\n            a.name.localeCompare(b.name)\n          )\n        : await fs.opendir(targetPath);\n      for await (const entry of entries) {\n        if (entry.isDirectory() && entry.name !== 'node_modules') {\n          if (!includeDirectory || includeDirectory(targetPath, entry.name)) {\n            queue.push(path.join(targetPath, entry.name));\n          }\n        } else if (entry.isFile()) {\n          yield {\n            path: path.join(targetPath, entry.name),\n            parentPath: targetPath,\n            name: entry.name,\n          } as const;\n        }\n      }\n    } catch {\n      continue;\n    }\n  }\n}\n\n/**\n * Parse the Java or Kotlin class name to for `ReactPackage` or `(Base|Turbo)ReactPackage`.\n */\nexport async function parseNativePackageClassNameAsync(\n  packageRoot: string,\n  androidDir: string\n): Promise<string | null> {\n  // Search for **/*Package.{java,kt} files first\n  for await (const entry of scanFilesRecursively(androidDir, undefined, true)) {\n    if (entry.name.endsWith('Package.java') || entry.name.endsWith('Package.kt')) {\n      try {\n        const contents = await fs.readFile(entry.path);\n        const matched = matchNativePackageClassName(entry.path, contents);\n        if (matched) {\n          return matched;\n        }\n      } catch {\n        continue;\n      }\n    }\n  }\n\n  // Early return if the module is an Expo module\n  if (await fileExistsAsync(path.join(packageRoot, 'expo-module.config.json'))) {\n    return null;\n  }\n\n  // Search all **/*.{java,kt} files\n  for await (const entry of scanFilesRecursively(androidDir, undefined, true)) {\n    if (entry.name.endsWith('.java') || entry.name.endsWith('.kt')) {\n      const contents = await fs.readFile(entry.path);\n      const matched = matchNativePackageClassName(entry.path, contents);\n      if (matched) {\n        return matched;\n      }\n    }\n  }\n  return null;\n}\n\nlet lazyReactPackageRegex: RegExp | null = null;\nlet lazyTurboReactPackageRegex: RegExp | null = null;\nexport function matchNativePackageClassName(_filePath: string, contents: Buffer): string | null {\n  const fileContents = contents.toString();\n\n  // [0] Match ReactPackage\n  if (!lazyReactPackageRegex) {\n    lazyReactPackageRegex =\n      /class\\s+(\\w+[^(\\s]*)[\\s\\w():]*(\\s+implements\\s+|:)[\\s\\w():,]*[^{]*ReactPackage/;\n  }\n  const matchReactPackage = fileContents.match(lazyReactPackageRegex);\n  if (matchReactPackage) {\n    return matchReactPackage[1];\n  }\n\n  // [1] Match (Base|Turbo)ReactPackage\n  if (!lazyTurboReactPackageRegex) {\n    lazyTurboReactPackageRegex =\n      /class\\s+(\\w+[^(\\s]*)[\\s\\w():]*(\\s+extends\\s+|:)[\\s\\w():,]*[^{]*(Base|Turbo)ReactPackage/;\n  }\n  const matchTurboReactPackage = fileContents.match(lazyTurboReactPackageRegex);\n  if (matchTurboReactPackage) {\n    return matchTurboReactPackage[1];\n  }\n\n  return null;\n}\n\nexport async function parseLibraryNameAsync(\n  androidDir: string,\n  packageJson: any\n): Promise<string | null> {\n  // [0] `codegenConfig.name` from package.json\n  if (packageJson.codegenConfig?.name) {\n    return packageJson.codegenConfig.name;\n  }\n\n  const libraryNameRegExp = /libraryName = [\"'](.+)[\"']/;\n  const gradlePath = path.join(androidDir, 'build.gradle');\n  // [1] `libraryName` from build.gradle\n  if (await fileExistsAsync(gradlePath)) {\n    const buildGradleContents = await fs.readFile(gradlePath, 'utf8');\n    const match = buildGradleContents.match(libraryNameRegExp);\n    if (match) {\n      return match[1];\n    }\n  }\n\n  // [2] `libraryName` from build.gradle.kts\n  const gradleKtsPath = path.join(androidDir, 'build.gradle.kts');\n  if (await fileExistsAsync(gradleKtsPath)) {\n    const buildGradleContents = await fs.readFile(gradleKtsPath, 'utf8');\n    const match = buildGradleContents.match(libraryNameRegExp);\n    if (match) {\n      return match[1];\n    }\n  }\n\n  return null;\n}\n\nexport async function parseComponentDescriptorsAsync(\n  packageRoot: string,\n  packageJson: any\n): Promise<string[]> {\n  const jsRoot = packageJson?.codegenConfig?.jsSrcsDir\n    ? path.join(packageRoot, packageJson.codegenConfig.jsSrcsDir)\n    : packageRoot;\n  const extRe = /\\.[tj]sx?$/;\n  const results = new Set<string>();\n  for await (const entry of scanFilesRecursively(jsRoot)) {\n    if (extRe.test(entry.name)) {\n      const contents = await fs.readFile(entry.path);\n      const matched = matchComponentDescriptors(entry.path, contents);\n      if (matched) {\n        results.add(matched);\n      }\n    }\n  }\n  return [...results].sort((a, b) => a.localeCompare(b));\n}\n\nlet lazyCodegenComponentRegex: RegExp | null = null;\nfunction matchComponentDescriptors(_filePath: string, contents: Buffer): string | null {\n  const fileContents = contents.toString();\n\n  if (!lazyCodegenComponentRegex) {\n    lazyCodegenComponentRegex =\n      /codegenNativeComponent(<.*>)?\\s*\\(\\s*[\"'`](\\w+)[\"'`](,?[\\s\\S]+interfaceOnly:\\s*(\\w+))?/m;\n  }\n  const match = fileContents.match(lazyCodegenComponentRegex);\n  if (!(match?.[4] === 'true') && match?.[2]) {\n    return `${match[2]}ComponentDescriptor`;\n  }\n  return null;\n}\n\nconst findAndroidManifestsAsync = async (targetPath: string) => {\n  const files = scanFilesRecursively(targetPath, (parentPath, name) => {\n    switch (name) {\n      case 'build':\n      case 'debug':\n      case 'Examples':\n      case 'examples':\n      case 'Pods':\n        return false;\n      case 'android':\n        return !/[\\\\/]sdks[\\\\/]hermes$/.test(parentPath);\n      case 'androidTest':\n      case 'test':\n        return !/[\\\\/]src$/.test(parentPath);\n      default:\n        return true;\n    }\n  });\n  const manifestPaths: string[] = [];\n  for await (const entry of files) {\n    if (entry.name === 'AndroidManifest.xml') {\n      manifestPaths.push(entry.path);\n    }\n  }\n  return manifestPaths.sort((a, b) => a.localeCompare(b));\n};\n\nconst getFileCandidatesAsync = async (targetPath: string, fileNames: string[]) => {\n  const gradlePaths = await Promise.all(\n    fileNames.map((fileName) => fileExistsAsync(path.join(targetPath, fileName)))\n  );\n  return gradlePaths.filter((file) => file != null).sort((a, b) => a.localeCompare(b));\n};\n\nexport async function findGradleAndManifestAsync({\n  androidDir,\n  isLibrary,\n}: {\n  androidDir: string;\n  isLibrary: boolean;\n}): Promise<{ gradle: string | null; manifest: string | null }> {\n  const [manifests, gradles] = await Promise.all([\n    findAndroidManifestsAsync(androidDir),\n    getFileCandidatesAsync(isLibrary ? androidDir : path.join(androidDir, 'app'), [\n      'build.gradle',\n      'build.gradle.kts',\n    ]),\n  ]);\n  // TODO(@kitten): We can't optimise this because of the prior `includes()` pattern. Is this meant to be startsWith?\n  const manifest =\n    manifests.find((manifest) => manifest.includes('src/main/')) ??\n    manifests.sort((a, b) => a.localeCompare(b))[0];\n  const gradle = gradles.sort((a, b) => a.localeCompare(b))[0];\n  return { gradle: gradle || null, manifest: manifest || null };\n}\n"]}