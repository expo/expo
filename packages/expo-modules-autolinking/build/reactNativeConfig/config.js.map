{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/reactNativeConfig/config.ts"],"names":[],"mappings":";;;;;;AAAA,2DAA6B;AAC7B,gDAAwB;AACxB,8EAAoD;AACpD,gEAAuC;AAGvC,4CAA+C;AAE/C,IAAI,MAAM,GAAmD,SAAS,CAAC;AAEvE;;GAEG;AACI,KAAK,UAAU,eAAe,CACnC,WAAmB;IAEnB,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;IACtE,IAAI,MAAM,IAAA,2BAAe,EAAC,YAAY,CAAC,EAAE;QACvC,IAAI;YACF,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;SAC9B;QAAC,MAAM;YACN,OAAO,IAAI,CAAC;SACb;KACF;IAED,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;IACtE,IAAI,MAAM,IAAA,2BAAe,EAAC,YAAY,CAAC,EAAE;QACvC,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,MAAM,GAAG,sBAAW,CAAC,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;YAC7D,IAAI,MAAM,EAAE;gBACV,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;aAC1B;SACF;aAAM,IAAI,MAAM,IAAI,IAAI,EAAE;YACzB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,cAAc,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAC/D,MAAM,kBAAkB,GAAG,MAAM,EAAE,eAAe,CAAC,cAAc,EAAE;YACjE,eAAe,EAAE;gBACf,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,QAAQ;gBAClC,gBAAgB,EAAE,MAAM,CAAC,oBAAoB,CAAC,QAAQ;gBACtD,MAAM,EAAE,MAAM,CAAC,YAAY,CAAC,MAAM;aACnC;SACF,CAAC,CAAC;QACH,MAAM,UAAU,GAAG,kBAAkB,EAAE,UAAU,CAAC;QAClD,IAAI,MAAM,CAAC;QACX,IAAI;YACF,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,IAAA,6BAAiB,EAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SAC5D;QAAC,MAAM,GAAE;QACV,OAAO,MAAM,EAAE,OAAO,IAAI,MAAM,IAAI,IAAI,CAAC;KAC1C;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAxCD,0CAwCC","sourcesContent":["import fs from 'fs/promises';\nimport path from 'path';\nimport requireFromString from 'require-from-string';\nimport resolveFrom from 'resolve-from';\n\nimport type { RNConfigReactNativeConfig } from './reactNativeConfig.types';\nimport { fileExistsAsync } from '../fileUtils';\n\nlet tsMain: typeof import('typescript') | null | undefined = undefined;\n\n/**\n * Load the `react-native.config.js` or `react-native.config.ts` from the package.\n */\nexport async function loadConfigAsync<T extends RNConfigReactNativeConfig>(\n  packageRoot: string\n): Promise<T | null> {\n  const configJsPath = path.join(packageRoot, 'react-native.config.js');\n  if (await fileExistsAsync(configJsPath)) {\n    try {\n      return require(configJsPath);\n    } catch {\n      return null;\n    }\n  }\n\n  const configTsPath = path.join(packageRoot, 'react-native.config.ts');\n  if (await fileExistsAsync(configTsPath)) {\n    if (tsMain === undefined) {\n      const tsPath = resolveFrom.silent(packageRoot, 'typescript');\n      if (tsPath) {\n        tsMain = require(tsPath);\n      }\n    } else if (tsMain == null) {\n      return null;\n    }\n\n    const configContents = await fs.readFile(configTsPath, 'utf8');\n    const transpiledContents = tsMain?.transpileModule(configContents, {\n      compilerOptions: {\n        module: tsMain.ModuleKind.NodeNext,\n        moduleResolution: tsMain.ModuleResolutionKind.NodeNext,\n        target: tsMain.ScriptTarget.ESNext,\n      },\n    });\n    const outputText = transpiledContents?.outputText;\n    let config;\n    try {\n      config = outputText ? requireFromString(outputText) : null;\n    } catch {}\n    return config?.default ?? config ?? null;\n  }\n\n  return null;\n}\n"]}