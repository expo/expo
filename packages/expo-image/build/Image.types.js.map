{"version":3,"file":"Image.types.js","sourceRoot":"","sources":["../src/Image.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ImageStyle as RNImageStyle, ViewProps } from 'react-native';\n\nexport type ImageSource = {\n  /**\n   * A string representing the resource identifier for the image,\n   * which could be an http address, a local file path, or the name of a static image resource.\n   */\n  uri?: string;\n  /**\n   * An object representing the HTTP headers to send along with the request for a remote image.\n   * @platform android\n   * @platform ios\n   */\n  headers?: Record<string, string>;\n  /**\n   * Can be specified if known at build time, in which case the value\n   * will be used to set the default `<Image/>` component dimension\n   */\n  width?: number;\n  /**\n   * Can be specified if known at build time, in which case the value\n   * will be used to set the default `<Image/>` component dimension\n   */\n  height?: number;\n\n  /**\n   * The blurhash string to use to generate the image. You can read more about the blurhash\n   * on [`woltapp/blurhash`](https://github.com/woltapp/blurhash) repo. Ignored when `uri` is provided.\n   * When using the blurhash, you should also provide `width` and `height` (higher values reduce performance),\n   * otherwise their default value is `16`.\n   */\n  blurhash?: string;\n\n  /**\n   * The cache key used to query and store this specific image.\n   * If not provided, the `uri` is used also as the cache key.\n   */\n  cacheKey?: string;\n};\n\n/**\n * @hidden\n */\nexport type ImageStyle = RNImageStyle;\n\n/**\n * Determines how the image should be resized to fit its container.\n * @hidden Described in the {@link ImageProps['contentFit']}\n */\nexport type ImageContentFit = 'cover' | 'contain' | 'fill' | 'none' | 'scale-down';\n\n/**\n * Some props are from React Native Image that Expo Image supports (more or less) for easier migration,\n * but all of them are deprecated and might be removed in the future.\n */\nexport interface ImageProps extends ViewProps {\n  /** @hidden */\n  style?: RNImageStyle | RNImageStyle[];\n\n  /**\n   * The image source, either a remote URL, a local file resource or a number that is the result of the `require()` function.\n   * When provided as an array of sources, the source that fits best into the container size and is closest to the screen scale\n   * will be chosen. In this case it is important to provide `width`, `height` and `scale` properties.\n   */\n  source?: ImageSource | string | number | ImageSource[] | string[] | null;\n\n  /**\n   * An image to display while loading the proper image and no image has been displayed yet or the source is unset.\n   */\n  placeholder?: ImageSource | string | number | ImageSource[] | string[] | null;\n\n  /**\n   * Determines how the image should be resized to fit its container. This property tells the image to fill the container\n   * in a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\".\n   * It mirrors the CSS [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property.\n   *\n   * - `'cover'` - The image is sized to maintain its aspect ratio while filling the container box.\n   * If the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.\n   *\n   * - `'contain'` - The image is scaled down or up to maintain its aspect ratio while fitting within the container box.\n   *\n   * - `'fill'` - The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit.\n   *\n   * - `'none'` - The image is not resized and is centered by default.\n   * When specified, the exact position can be controlled with [`contentPosition`](#contentposition) prop.\n   *\n   * - `'scale-down'` - The image is sized as if `none` or `contain` were specified, whichever would result in a smaller concrete image size.\n   *\n   * @default 'cover'\n   */\n  contentFit?: ImageContentFit;\n\n  /**\n   * Determines how the placeholder should be resized to fit its container\n   * @hidden Described in the {@link ImageProps['contentFit']}\n   * @default 'scale-down'\n   */\n  placeholderContentFit?: ImageContentFit;\n\n  /**\n   * It is used together with [`contentFit`](#contentfit) to specify how the image should be positioned with x/y coordinates inside its own container.\n   * An equivalent of the CSS [`object-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) property.\n   * @default 'center'\n   */\n  contentPosition?: ImageContentPosition;\n\n  /**\n   * Describes how the image view should transition the contents when switching the image source.\\\n   * If provided as a number, it is the duration in milliseconds of the `'cross-dissolve'` effect.\n   */\n  transition?: ImageTransition | number | null;\n\n  /**\n   * The radius of the blur in points, `0` means no blur effect.\n   * This effect is not applied to placeholders.\n   * @default 0\n   */\n  blurRadius?: number;\n\n  /**\n   * A color used to tint template images (a bitmap image where only the opacity matters).\n   * The color is applied to every non-transparent pixel, causing the imageâ€™s shape to adopt that color.\n   * This effect is not applied to placeholders.\n   * @default null\n   * @platform android\n   * @platform ios\n   */\n  tintColor?: string | null;\n\n  /**\n   * Priorities for completing loads. If more than one load is queued at a time,\n   * the load with the higher priority will be started first.\n   * Priorities are considered best effort, there are no guarantees about the order in which loads will start or finish.\n   * @default 'normal'\n   */\n  priority?: 'low' | 'normal' | 'high' | null;\n\n  /**\n   * Determines whether to cache the image and where: on the disk, in the memory or both.\n   *\n   * - `'none'` - Image is not cached at all.\n   *\n   * - `'disk'` - Image is queried from the disk cache if exists, otherwise it's downloaded and then stored on the disk.\n   *\n   * - `'memory'` - Image is cached in memory. Might be useful when you render a high-resolution picture many times.\n   * Memory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.\n   *\n   * - `'memory-disk'` - Image is cached in memory, but with a fallback to the disk cache.\n   *\n   * @default 'disk'\n   */\n  cachePolicy?: 'none' | 'disk' | 'memory' | 'memory-disk' | /** @hidden */ null;\n\n  /**\n   * Determines whether to choose image source based on container size only on mount or on every resize.\n   * Use `initial` to improve performance.\n   * @default \"live\"\n   * @platform web\n   */\n  responsivePolicy?: 'live' | 'initial';\n\n  /**\n   * Changing this prop resets the image view content to blank or a placeholder before loading and rendering the final image.\n   * This is especially useful for any kinds of recycling views like [FlashList](https://github.com/shopify/flash-list)\n   * to prevent showing the previous source before the new one fully loads.\n   * @default null\n   * @platform android\n   * @platform ios\n   */\n  recyclingKey?: string | null;\n\n  /**\n   * Called when the image starts to load.\n   */\n  onLoadStart?: () => void;\n\n  /**\n   * Called when the image load completes successfully.\n   */\n  onLoad?: (event: ImageLoadEventData) => void;\n\n  /**\n   * Called when the image is loading. Can be called multiple times before the image has finished loading.\n   * The event object provides details on how many bytes were loaded so far and what's the expected total size.\n   */\n  onProgress?: (event: ImageProgressEventData) => void;\n\n  /**\n   * Called on an image fetching error.\n   */\n  onError?: (event: ImageErrorEventData) => void;\n\n  /**\n   * Called when the image load either succeeds or fails.\n   */\n  onLoadEnd?: () => void;\n\n  // DEPRECATED\n\n  /**\n   * @deprecated Provides compatibility for [`defaultSource` from React Native Image](https://reactnative.dev/docs/image#defaultsource).\n   * Use [`placeholder`](#placeholder) prop instead.\n   */\n  defaultSource?: ImageSource | null;\n\n  /**\n   * @deprecated Provides compatibility for [`loadingIndicatorSource` from React Native Image](https://reactnative.dev/docs/image#loadingindicatorsource).\n   * Use [`placeholder`](#placeholder) prop instead.\n   */\n  loadingIndicatorSource?: ImageSource | null;\n\n  /**\n   * @deprecated Provides compatibility for [`resizeMode` from React Native Image](https://reactnative.dev/docs/image#resizemode).\n   * Note that `\"repeat\"` option is not supported at all.\n   * Use the more powerful [`contentFit`](#contentfit) and [`contentPosition`](#contentposition) props instead.\n   */\n  resizeMode?: 'cover' | 'contain' | 'stretch' | 'repeat' | 'center';\n\n  /**\n   * @deprecated Provides compatibility for [`fadeDuration` from React Native Image](https://reactnative.dev/docs/image#fadeduration-android).\n   * Instead use [`transition`](#transition) with the provided duration.\n   */\n  fadeDuration?: number;\n\n  /**\n   * Whether this View should be focusable with a non-touch input device and receive focus with a hardware keyboard.\n   * @default false\n   * @platform android\n   */\n  focusable?: boolean;\n\n  /**\n   * When true, indicates that the view is an accessibility element.\n   * When a view is an accessibility element, it groups its children into a single selectable component.\n   *\n   * On Android, the `accessible` property will be translated into the native `isScreenReaderFocusable`,\n   * so it's only affecting the screen readers behaviour.\n   * @default false\n   * @platform android\n   * @platform ios\n   */\n  accessible?: boolean;\n\n  /**\n   * The text that's read by the screen reader when the user interacts with the image.\n   * @default undefined\n   * @platform android\n   * @platform ios\n   */\n  accessibilityLabel?: string;\n\n  /**\n   * Enables Live Text interaction with the image. Check official [Apple documentation](https://developer.apple.com/documentation/visionkit/enabling_live_text_interactions_with_images) for more details.\n   * @default false\n   * @platform ios 16.0+\n   */\n  enableLiveTextInteraction?: boolean;\n}\n\n/**\n * It narrows down some props to types expected by the native/web side.\n * @hidden\n */\nexport interface ImageNativeProps extends ImageProps {\n  style?: RNImageStyle;\n  source?: ImageSource[];\n  placeholder?: ImageSource[];\n  contentPosition?: ImageContentPositionObject;\n  transition?: ImageTransition | null;\n}\n\n/**\n * A value that represents the relative position of a single axis.\n *\n * If `number`, it is a distance in points (logical pixels) from the respective edge.\\\n * If `string`, it must be a percentage value where `'100%'` is the difference in size between the container and the image along the respective axis,\n * or `'center'` which is an alias for `'50%'` that is the default value. You can read more regarding percentages on the MDN docs for\n * [`background-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position#regarding_percentages) that describes this concept well.\n */\nexport type ImageContentPositionValue = number | string | `${number}%` | `${number}` | 'center';\n\n// eslint-disable\n// prettier-ignore\n/**\n * Specifies the position of the image inside its container. One value controls the x-axis and the second value controls the y-axis.\n *\n * Additionally, it supports stringified shorthand form that specifies the edges to which to align the image content:\\\n * `'center'`, `'top'`, `'right'`, `'bottom'`, `'left'`, `'top center'`, `'top right'`, `'top left'`, `'right center'`, `'right top'`,\n * `'right bottom'`, `'bottom center'`, `'bottom right'`, `'bottom left'`, `'left center'`, `'left top'`, `'left bottom'`.\\\n * If only one keyword is provided, then the other dimension is set to `'center'` (`'50%'`), so the image is placed in the middle of the specified edge.\\\n * As an example, `'top right'` is the same as `{ top: 0, right: 0 }` and `'bottom'` is the same as `{ bottom: 0, left: '50%' }`.\n */\nexport type ImageContentPosition =\n  /**\n   * An object that positions the image relatively to the top-right corner.\n   */\n  {\n    top?: ImageContentPositionValue;\n    right?: ImageContentPositionValue;\n  } |\n  /**\n   * An object that positions the image relatively to the top-left corner.\n   */\n  {\n    top?: ImageContentPositionValue;\n    left?: ImageContentPositionValue;\n  } |\n  /**\n   * An object that positions the image relatively to the bottom-right corner.\n   */\n  {\n    bottom?: ImageContentPositionValue;\n    right?: ImageContentPositionValue;\n  } |\n  /**\n   * An object that positions the image relatively to the bottom-left corner.\n   */\n  {\n    bottom?: ImageContentPositionValue;\n    left?: ImageContentPositionValue;\n  }\n  | ImageContentPositionString;\n// eslint-enable\n\n/**\n * @hidden It's described as part of {@link ImageContentPosition}.\n */\nexport type ImageContentPositionString =\n  | 'center'\n  | 'top'\n  | 'right'\n  | 'bottom'\n  | 'left'\n  | 'top center'\n  | 'top right'\n  | 'top left'\n  | 'right center'\n  | 'right top'\n  | 'right bottom'\n  | 'bottom center'\n  | 'bottom right'\n  | 'bottom left'\n  | 'left center'\n  | 'left top'\n  | 'left bottom';\n\ntype OnlyObject<T> = T extends object ? T : never;\n\n/**\n * @hidden It's a conditional type that matches only objects of {@link ImageContentPosition}.\n */\nexport type ImageContentPositionObject = OnlyObject<ImageContentPosition>;\n\n/**\n * An object that describes the smooth transition when switching the image source.\n */\nexport type ImageTransition = {\n  /**\n   * The duration of the transition in milliseconds.\n   * @default 0\n   */\n  duration?: number;\n\n  /**\n   * Specifies the speed curve of the transition effect and how intermediate values are calculated.\n   * @default 'ease-in-out'\n   */\n  timing?: 'ease-in-out' | 'ease-in' | 'ease-out' | 'linear';\n\n  /**\n   * An animation effect used for transition.\n   * @default 'cross-dissolve'\n   *\n   * On Android, only `'cross-dissolve'` is supported.\n   * On Web, `'curl-up'` and `'curl-down'` effects are not supported.\n   */\n  effect?:\n    | 'cross-dissolve'\n    | 'flip-from-top'\n    | 'flip-from-right'\n    | 'flip-from-bottom'\n    | 'flip-from-left'\n    | 'curl-up'\n    | 'curl-down'\n    | null;\n};\n\nexport type ImageLoadEventData = {\n  cacheType: 'none' | 'disk' | 'memory';\n  source: {\n    url: string;\n    width: number;\n    height: number;\n    mediaType: string | null;\n  };\n};\n\nexport type ImageProgressEventData = {\n  loaded: number;\n  total: number;\n};\n\nexport type ImageErrorEventData = {\n  error: string;\n};\n"]}