{"version":3,"file":"Manifests.js","sourceRoot":"","sources":["../src/Manifests.ts"],"names":[],"mappings":"","sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\n// @docsMissing\nexport interface ManifestAsset {\n  url: string;\n}\n// @docsMissing\nexport type ManifestExtra = ClientScopingConfig & {\n  expoClient?: ExpoConfig & {\n    /**\n     * Only present during development using @expo/cli.\n     */\n    hostUri?: string;\n  };\n  expoGo?: ExpoGoConfig;\n  eas?: EASConfig;\n};\n\n// @needsAudit\nexport type EASConfig = {\n  /**\n   * The ID for this project if it's using EAS. UUID. This value will not change when a project is\n   * transferred between accounts or renamed.\n   */\n  projectId?: string;\n};\n\n// @needsAudit\nexport type ClientScopingConfig = {\n  /**\n   * An opaque unique string for scoping client-side data to this project. This value\n   * will not change when a project is transferred between accounts or renamed.\n   */\n  scopeKey?: string;\n};\n\n// @docsMissing\nexport type ExpoGoConfig = {\n  mainModuleName?: string;\n  debuggerHost?: string;\n  developer?: {\n    tool?: string;\n    [key: string]: any;\n  };\n  packagerOpts?: ExpoGoPackagerOpts;\n};\n\n// @docsMissing\nexport type ExpoGoPackagerOpts = {\n  hostType?: string;\n  dev?: boolean;\n  strict?: boolean;\n  minify?: boolean;\n  urlType?: string;\n  urlRandomness?: string;\n  lanType?: string;\n  [key: string]: any;\n};\n\nexport type ExpoClientConfig = ExpoConfig & {\n  /**\n   * Published apps only.\n   */\n  releaseId?: string;\n  revisionId?: string;\n  releaseChannel?: string;\n  bundleUrl: string;\n  hostUri?: string;\n  publishedTime?: string;\n  /**\n   * The Expo account name and slug for this project.\n   * @deprecated Prefer `projectId` or `originalFullName` instead for identification and\n   * `scopeKey` for scoping due to immutability.\n   */\n  id?: string;\n  /**\n   * The original Expo account name and slug for this project. Formatted like `@username/slug`.\n   * When unauthenticated, the username is `@anonymous`. For published projects, this value\n   * will not change when a project is transferred between accounts or renamed.\n   */\n  originalFullName?: string;\n  /**\n   * The Expo account name and slug used for display purposes. Formatted like `@username/slug`.\n   * When unauthenticated, the username is `@anonymous`. For published projects, this value\n   * may change when a project is transferred between accounts or renamed.\n   */\n  currentFullName?: string;\n};\n\n/**\n * Represents an intersection of all possible Config types.\n */\nexport type LegacyManifest = ExpoClientConfig &\n  ExpoGoConfig &\n  EASConfig &\n  ClientScopingConfig &\n  Record<string, any>;\n\n/**\n * A modern manifest.\n */\nexport type NewManifest = {\n  id: string;\n  createdAt: string;\n  runtimeVersion: string;\n  launchAsset: ManifestAsset;\n  assets: ManifestAsset[];\n  metadata: object;\n  extra?: ManifestExtra;\n};\n\n/**\n * An embedded bare manifest.\n *\n * Generated during build in createManifest.js build step script.\n */\nexport type BareManifest = {\n  id: string;\n  commitTime: number;\n  assets: any[]; // intentionally underspecified for now since there are no uses in JS\n};\n"]}