{"version":3,"file":"Events.js","sourceRoot":"","sources":["../src/Events.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAmC,MAAM,mBAAmB,CAAC;AAClF,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAUxC,OAAO,EAAE,yBAAyB,EAAE,0BAA0B,EAAE,MAAM,YAAY,CAAC;AAEnF,IAAI,MAAyB,CAAC;AAC9B,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;IACzB,MAAM,GAAG,yBAAyB,CAAC;CACpC;KAAM;IACL,MAAM,GAAG,0BAA0B,CAAC;CACrC;AAED,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC;AAEzC,MAAM,eAAe,GAAG;IACtB,qBAAqB,EAAE,eAAe;IACtC,4BAA4B,EAAE,qBAAqB;IACnD,0BAA0B,EAAE,mBAAmB;CAChD,CAAC;AA4GF;;;GAGG;AACH,MAAM,UAAU,wBAAwB,CACtC,QAA2C;IAE3C,OAAO,OAAO,CAAC,WAAW,CAAmB,eAAe,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;AAChG,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,+BAA+B;IAC7C,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC;AACpE,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,8BAA8B,CAC5C,QAAiD;IAEjD,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,4BAA4B,EAC5C,QAAQ,CACT,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,qCAAqC;IACnD,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,4BAA4B,CAAC,CAAC;AAC3E,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,4BAA4B,CAC1C,QAA+C;IAE/C,OAAO,OAAO,CAAC,WAAW,CACxB,eAAe,CAAC,0BAA0B,EAC1C,QAAQ,CACT,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,mCAAmC;IACjD,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,0BAA0B,CAAC,CAAC;AACzE,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,mBAAmB,CAAC,YAA0B;IAC5D,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;AAC3C,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,kBAAkB;IAChC,KAAK,MAAM,KAAK,IAAI,eAAe,EAAE;QACnC,OAAO,CAAC,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;KACpD;AACH,CAAC","sourcesContent":["import { EventEmitter, Subscription, ProxyNativeModule } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport {\n  CameraPosition,\n  MapCluster,\n  Marker,\n  Point,\n  PointOfInterest,\n  UserLocation,\n} from './Common.types';\nimport { NativeExpoAppleMapsModule, NativeExpoGoogleMapsModule } from './ExpoMaps';\n\nlet module: ProxyNativeModule;\nif (Platform.OS === 'ios') {\n  module = NativeExpoAppleMapsModule;\n} else {\n  module = NativeExpoGoogleMapsModule;\n}\n\nconst emitter = new EventEmitter(module);\n\nconst MapsEventsNames = {\n  ON_MARKER_CLICK_EVENT: 'onMarkerClick',\n  ON_MARKER_DRAG_STARTED_EVENT: 'onMarkerDragStarted',\n  ON_MARKER_DRAG_ENDED_EVENT: 'onMarkerDragEnded',\n};\n\n/**\n * Type of an argument of MarkerClick listener.\n */\nexport type MarkerClickEvent = {\n  /**\n   * Id of the marker that was clicked.\n   */\n  id: string;\n};\n\n/**\n * Type of an argument of MarkerDragEnded listener.\n */\nexport type MarkerDragEndedEvent = {\n  /**\n   * Id of the marker that was dragged.\n   */\n  id: string;\n  /**\n   * Latitude of the dragged marker.\n   */\n  latitude: number;\n  /**\n   * Longitude of the dragged marker.\n   */\n  longitude: number;\n};\n\n/**\n * Type of an argument of MarkerDragStarted listener.\n */\nexport type MarkerDragStartedEvent = {\n  /**\n   * Id of the marker that was dragged.\n   */\n  id: string;\n};\n\n/**\n * Represents data returned on click event.\n */\nexport type OnMapPressEvent = {\n  /**\n   * Coordinates the place where the user clicked.\n   * Represented by {@link Point}\n   */\n  nativeEvent: Point;\n};\n\n/**\n * Type used for marker related events. eq. onMarkerClick, onMarkerDrag etc. contains marker's ID and position\n */\nexport type MarkerEvent = {\n  nativeEvent: Marker;\n};\n\n/**\n * Represents data returned when a cluster press event is called\n */\nexport type ClusterPressEvent = {\n  nativeEvent: MapCluster;\n};\n\n/**\n * Represents data returned on RegionChangeEvent\n */\nexport type OnRegionChangeEvent = {\n  /**\n   * Information on cameraPosition.\n   * Represented by {@link CameraPosition}\n   */\n  nativeEvent: CameraPosition;\n};\n\n/**\n * Represents data returned on PoiClickEvent\n */\nexport type OnPoiClickEvent = {\n  /**\n   * Information on the clicked point of interest.\n   * Represented by {@link PointOfInterest}\n   */\n  nativeEvent: PointOfInterest;\n};\n\n/**\n * Event returned when the location button is pressed\n */\nexport type OnLocationButtonPressEvent = {\n  nativeEvent: UserLocation;\n};\n\n/**\n * Event returned when the current location dot is pressed\n */\nexport type OnLocationDotPressEvent = {\n  nativeEvent: UserLocation;\n};\n\n/**\n * Event returned when the user changes their location\n */\nexport type OnLocationChangeEvent = {\n  nativeEvent: UserLocation;\n};\n\n/**\n * Adds a new listener to be called when a marker or cluster is clicked.\n * @returns Subscription which can be used later to remove this particular listener.\n */\nexport function addOnMarkerClickListener(\n  listener: (event: MarkerClickEvent) => void\n): Subscription {\n  return emitter.addListener<MarkerClickEvent>(MapsEventsNames.ON_MARKER_CLICK_EVENT, listener);\n}\n\n/**\n * Removes all listeners registered to listen for MarkerClick event.\n */\nexport function removeAllOnMarkerClickListeners() {\n  emitter.removeAllListeners(MapsEventsNames.ON_MARKER_CLICK_EVENT);\n}\n\n/**\n * Adds a new listener to be called when a user starts dragging a marker.\n * Does not work for markers which are children of Cluster.\n * @returns Subscription which can be used later to remove this particular listener.\n */\nexport function addOnMarkerDragStartedListener(\n  listener: (event: MarkerDragStartedEvent) => void\n): Subscription {\n  return emitter.addListener<MarkerDragStartedEvent>(\n    MapsEventsNames.ON_MARKER_DRAG_STARTED_EVENT,\n    listener\n  );\n}\n\n/**\n * Removes all listeners registered to listen for MarkerDragStarted event.\n */\nexport function removeAllOnMarkerDragStartedListeners() {\n  emitter.removeAllListeners(MapsEventsNames.ON_MARKER_DRAG_STARTED_EVENT);\n}\n\n/**\n * Adds a new listener to be called when a user drops a marker.\n * Does not work for markers which are children of Cluster.\n * @returns Subscription which can be used later to remove this particular listener.\n */\nexport function addOnMarkerDragEndedListener(\n  listener: (event: MarkerDragEndedEvent) => void\n): Subscription {\n  return emitter.addListener<MarkerDragEndedEvent>(\n    MapsEventsNames.ON_MARKER_DRAG_ENDED_EVENT,\n    listener\n  );\n}\n\n/**\n * Removes all listeners registered to listen for MarkerDragEnded event.\n */\nexport function removeAllOnMarkerDragEndedListeners() {\n  emitter.removeAllListeners(MapsEventsNames.ON_MARKER_DRAG_ENDED_EVENT);\n}\n\n/**\n * Removes particular listener, which was earlier registered.\n */\nexport function removeEventListener(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\n/**\n * Removes all registered listeners.\n */\nexport function removeAllListeners() {\n  for (const event in MapsEventsNames) {\n    emitter.removeAllListeners(MapsEventsNames[event]);\n  }\n}\n"]}