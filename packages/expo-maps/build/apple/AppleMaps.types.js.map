{"version":3,"file":"AppleMaps.types.js","sourceRoot":"","sources":["../../src/apple/AppleMaps.types.ts"],"names":[],"mappings":"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","sourcesContent":["import type { SharedRefType } from 'expo';\nimport type { Ref } from 'react';\nimport type { ProcessedColorValue, StyleProp, ViewStyle } from 'react-native';\n\nimport { CameraPosition, Coordinates } from '../shared.types';\n\n/**\n * @platform ios\n */\nexport type AppleMapsMarker = {\n  /**\n   * The unique identifier for the marker. This can be used to identify the clicked marker in the `onMarkerClick` event.\n   */\n  id?: string;\n\n  /**\n   * The SF Symbol to display for the marker.\n   */\n  systemImage?: string;\n\n  /**\n   * The coordinates of the marker.\n   */\n  coordinates?: Coordinates;\n\n  /**\n   * The title of the marker, displayed in the callout when the marker is clicked.\n   */\n  title?: string;\n\n  /**\n   * The tint color of the marker.\n   */\n  tintColor?: string;\n};\n\n/**\n * @platform ios\n */\nexport type AppleMapsUISettings = {\n  /**\n   * Whether the compass is enabled on the map.\n   * If enabled, the compass is only visible when the map is rotated.\n   */\n  compassEnabled?: boolean;\n\n  /**\n   * Whether the my location button is visible.\n   */\n  myLocationButtonEnabled?: boolean;\n\n  /**\n   * Whether the scale bar is displayed when zooming.\n   */\n  scaleBarEnabled?: boolean;\n\n  /**\n   * Whether the user is allowed to change the pitch type.\n   */\n  togglePitchEnabled?: boolean;\n};\n\n/**\n * The type of map to display.\n * @platform ios\n */\nexport enum AppleMapsMapType {\n  /**\n   * A satellite image of the area with road and road name layers on top.\n   */\n  HYBRID = 'HYBRID',\n  /**\n   * A street map that shows the position of all roads and some road names.\n   */\n  STANDARD = 'STANDARD',\n  /**\n   * A satellite image of the area.\n   */\n  IMAGERY = 'IMAGERY',\n}\n\n/**\n * The style of the polyline.\n * @platform ios\n */\nexport enum AppleMapsContourStyle {\n  /**\n   * A straight line.\n   */\n  STRAIGHT = 'STRAIGHT',\n  /**\n   * A geodesic line.\n   */\n  GEODESIC = 'GEODESIC',\n}\n\n/**\n * @platform ios\n */\nexport enum AppleMapsMapStyleElevation {\n  /**\n   * The default elevation style, that renders a flat, 2D map.\n   */\n  AUTOMATIC = 'AUTOMATIC',\n  /**\n   * A flat elevation style.\n   */\n  FLAT = 'FLAT',\n  /**\n   * A value that renders a realistic, 3D map.\n   */\n  REALISTIC = 'REALISTIC',\n}\n\n/**\n * @platform ios\n */\nexport enum AppleMapsMapStyleEmphasis {\n  /**\n   * The default level of emphasis.\n   */\n  AUTOMATIC = 'AUTOMATIC',\n  /**\n   * A muted emphasis style, that deemphasizes the mapâ€™s imagery.\n   */\n  MUTED = 'MUTED',\n}\n\n/**\n * @platform ios\n * @see https://developer.apple.com/documentation/mapkit/AppleMapPointOfInterestCategory\n */\nexport enum AppleMapPointOfInterestCategory {\n  // Arts and culture\n  MUSEUM = 'MUSEUM',\n  MUSIC_VENUE = 'MUSIC_VENUE',\n  THEATER = 'THEATER',\n\n  // Education\n  LIBRARY = 'LIBRARY',\n  PLANETARIUM = 'PLANETARIUM',\n  SCHOOL = 'SCHOOL',\n  UNIVERSITY = 'UNIVERSITY',\n\n  // Entertainment\n  MOVIE_THEATER = 'MOVIE_THEATER',\n  NIGHTLIFE = 'NIGHTLIFE',\n\n  // Health and safety\n  FIRE_STATION = 'FIRE_STATION',\n  HOSPITAL = 'HOSPITAL',\n  PHARMACY = 'PHARMACY',\n  POLICE = 'POLICE',\n\n  // Historical and cultural landmarks\n  CASTLE = 'CASTLE',\n  FORTRESS = 'FORTRESS',\n  LANDMARK = 'LANDMARK',\n  NATIONAL_MONUMENT = 'NATIONAL_MONUMENT',\n\n  // Food and drink\n  BAKERY = 'BAKERY',\n  BREWERY = 'BREWERY',\n  CAFE = 'CAFE',\n  DISTILLERY = 'DISTILLERY',\n  FOOD_MARKET = 'FOOD_MARKET',\n  RESTAURANT = 'RESTAURANT',\n  WINERY = 'WINERY',\n\n  // Personal services\n  ANIMAL_SERVICE = 'ANIMAL_SERVICE',\n  ATM = 'ATM',\n  AUTOMOTIVE_REPAIR = 'AUTOMOTIVE_REPAIR',\n  BANK = 'BANK',\n  BEAUTY = 'BEAUTY',\n  EV_CHARGER = 'EV_CHARGER',\n  FITNESS_CENTER = 'FITNESS_CENTER',\n  LAUNDRY = 'LAUNDRY',\n  MAILBOX = 'MAILBOX',\n  POST_OFFICE = 'POST_OFFICE',\n  RESTROOM = 'RESTROOM',\n  SPA = 'SPA',\n  STORE = 'STORE',\n\n  // Parks and recreation\n  AMUSEMENT_PARK = 'AMUSEMENT_PARK',\n  AQUARIUM = 'AQUARIUM',\n  BEACH = 'BEACH',\n  CAMPGROUND = 'CAMPGROUND',\n  FAIRGROUND = 'FAIRGROUND',\n  MARINA = 'MARINA',\n  NATIONAL_PARK = 'NATIONAL_PARK',\n  PARK = 'PARK',\n  RV_PARK = 'RV_PARK',\n  ZOO = 'ZOO',\n\n  // Sports\n  BASEBALL = 'BASEBALL',\n  BASKETBALL = 'BASKETBALL',\n  BOWLING = 'BOWLING',\n  GO_KART = 'GO_KART',\n  GOLF = 'GOLF',\n  HIKING = 'HIKING',\n  MINI_GOLF = 'MINI_GOLF',\n  ROCK_CLIMBING = 'ROCK_CLIMBING',\n  SKATE_PARK = 'SKATE_PARK',\n  SKATING = 'SKATING',\n  SKIING = 'SKIING',\n  SOCCER = 'SOCCER',\n  STADIUM = 'STADIUM',\n  TENNIS = 'TENNIS',\n  VOLLEYBALL = 'VOLLEYBALL',\n\n  // Travel\n  AIRPORT = 'AIRPORT',\n  CAR_RENTAL = 'CAR_RENTAL',\n  CONVENTION_CENTER = 'CONVENTION_CENTER',\n  GAS_STATION = 'GAS_STATION',\n  HOTEL = 'HOTEL',\n  PARKING = 'PARKING',\n  PUBLIC_TRANSPORT = 'PUBLIC_TRANSPORT',\n\n  // Water sports\n  FISHING = 'FISHING',\n  KAYAKING = 'KAYAKING',\n  SURFING = 'SURFING',\n  SWIMMING = 'SWIMMING',\n}\n\n/**\n * @platform ios\n */\nexport type AppleMapsPointOfInterestCategories = {\n  /**\n   * The POI categories to include.\n   * To hide all POIs, set this to an empty array.\n   */\n  including?: AppleMapPointOfInterestCategory[];\n\n  /**\n   * The POI categories to exclude.\n   * To show all POIs, set this to an empty array.\n   */\n  excluding?: AppleMapPointOfInterestCategory[];\n};\n\n/**\n * @platform ios\n */\nexport type AppleMapsProperties = {\n  /**\n   * Whether the user location is shown on the map.\n   * @default false\n   */\n  isMyLocationEnabled?: boolean;\n\n  /**\n   * Whether the traffic layer is enabled on the map.\n   */\n  isTrafficEnabled?: boolean;\n\n  /**\n   * Defines which map type should be used.\n   */\n  mapType?: AppleMapsMapType;\n\n  /**\n   * A structure you use to define points of interest to include or exclude on a map.\n   */\n  pointsOfInterest?: AppleMapsPointOfInterestCategories;\n\n  /**\n   * Values you use to determine whether a map renders elevation.\n   */\n  elevation?: AppleMapsMapStyleElevation;\n\n  /**\n   * Values that control how the framework emphasizes map features.\n   */\n  emphasis?: AppleMapsMapStyleEmphasis;\n\n  /**\n   * If true, the user can select a location on the map to get more information.\n   */\n  selectionEnabled?: boolean;\n\n  /**\n   * The maximum distance in meters from a tap of a polyline for it to be considered a hit.\n   * If the distance is greater than the threshold, the polyline is not considered a hit.\n   * If a hit occurs, the `onPolylineClick` event will be triggered.\n   * Defaults to 20 meters.\n   */\n  polylineTapThreshold?: number;\n};\n\n/**\n * @platform ios\n */\nexport type AppleMapsAnnotation = {\n  /**\n   * The background color of the annotation.\n   */\n  backgroundColor?: string;\n  /**\n   * The text to display in the annotation.\n   */\n  text?: string;\n  /**\n   * The text color of the annotation.\n   */\n  textColor?: string;\n  /**\n   * The custom icon to display in the annotation.\n   */\n  icon?: SharedRefType<'image'>;\n} & AppleMapsMarker;\n\n/**\n * @platform ios\n */\nexport type AppleMapsPolyline = {\n  /**\n   * The unique identifier for the polyline. This can be used to identify the clicked polyline in the `onPolylineClick` event.\n   */\n  id?: string;\n  /**\n   * The coordinates of the polyline.\n   */\n  coordinates: Coordinates[];\n  /**\n   * The color of the polyline.\n   */\n  color?: ProcessedColorValue | string;\n  /**\n   * The width of the polyline.\n   */\n  width?: number;\n  /**\n   * The style of the polyline.\n   */\n  contourStyle?: AppleMapsContourStyle;\n};\n\n/**\n * @platform ios\n */\nexport type AppleMapsCircle = {\n  /**\n   * The unique identifier for the circle. This can be used to identify the clicked circle in the `onCircleClick` event.\n   */\n  id?: string;\n\n  /**\n   * The coordinates of the circle.\n   */\n  center: Coordinates;\n\n  /**\n   * The radius of the circle (in meters).\n   */\n  radius: number;\n\n  /**\n   * The color of the circle.\n   */\n  color?: ProcessedColorValue | string;\n\n  /**\n   * The width of the circle.\n   */\n  width?: number;\n\n  /**\n   * The color of the circle line.\n   */\n  lineColor?: ProcessedColorValue | string;\n\n  /**\n   * The width of the circle line.\n   */\n  lineWidth?: number;\n};\n\n/**\n * @platform ios\n */\nexport type AppleMapsPolygon = {\n  /**\n   * The unique identifier for the polygon. This can be used to identify the clicked polygon in the `onPolygonClick` event.\n   */\n  id?: string;\n\n  /**\n   * The coordinates of the circle.\n   */\n  coordinates: Coordinates[];\n\n  /**\n   * The color of the polygon.\n   */\n  color?: ProcessedColorValue | string;\n\n  /**\n   * The width of the polygon.\n   */\n  lineWidth?: number;\n\n  /**\n   * The color of the polygon.\n   */\n  lineColor?: ProcessedColorValue | string;\n};\n\n/**\n * @platform ios\n */\nexport type AppleMapsViewProps = {\n  ref?: Ref<AppleMapsViewType>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * The initial camera position of the map.\n   */\n  cameraPosition?: CameraPosition;\n\n  /**\n   * The array of markers to display on the map.\n   */\n  markers?: AppleMapsMarker[];\n\n  /**\n   * The array of polylines to display on the map.\n   */\n  polylines?: AppleMapsPolyline[];\n\n  /**\n   * The array of polygons to display on the map.\n   */\n  polygons?: AppleMapsPolygon[];\n\n  /**\n   * The array of circles to display on the map.\n   */\n  circles?: AppleMapsCircle[];\n\n  /**\n   * The array of annotations to display on the map.\n   */\n  annotations?: AppleMapsAnnotation[];\n\n  /**\n   * The `MapUiSettings` to be used for UI-specific settings on the map.\n   */\n  uiSettings?: AppleMapsUISettings;\n\n  /**\n   * The properties for the map.\n   */\n  properties?: AppleMapsProperties;\n\n  /**\n   * Lambda invoked when the user clicks on the map.\n   * It won't be invoked if the user clicks on POI or a marker.\n   */\n  onMapClick?: (event: { coordinates: Coordinates }) => void;\n\n  /**\n   * Lambda invoked when the marker is clicked\n   * @platform ios 18.0+\n   */\n  onMarkerClick?: (event: AppleMapsMarker) => void;\n\n  /**\n   * Lambda invoked when the polyline is clicked\n   * @platform ios 18.0+\n   */\n  onPolylineClick?: (event: AppleMapsPolyline) => void;\n\n  /**\n   * Lambda invoked when the polygon is clicked\n   * @platform ios 18.0+\n   */\n  onPolygonClick?: (event: AppleMapsPolygon) => void;\n\n  /**\n   * Lambda invoked when the circle is clicked\n   * @platform ios 18.0+\n   */\n  onCircleClick?: (event: AppleMapsCircle) => void;\n\n  /**\n   * Lambda invoked when the map was moved by the user.\n   */\n  onCameraMove?: (event: {\n    coordinates: Coordinates;\n    zoom: number;\n    tilt: number;\n    bearing: number;\n  }) => void;\n};\n\n/**\n * @platform ios\n */\nexport type AppleMapsViewType = {\n  /**\n   * Update camera position.\n   * Animation duration is not supported on iOS.\n   *\n   * @param config New camera postion.\n   */\n  setCameraPosition: (config?: CameraPosition) => void;\n\n  /**\n   * Opens the look around view at specified coordinates.\n   *\n   * @param coordinates The coordinates of the location to open the look around view at.\n   */\n  openLookAroundAsync: (coordinates: Coordinates) => Promise<void>;\n};\n"]}