{"version":3,"file":"AppleMaps.types.js","sourceRoot":"","sources":["../../src/apple/AppleMaps.types.ts"],"names":[],"mappings":"AA+DA;;GAEG;AACH,MAAM,CAAN,IAAY,OAaX;AAbD,WAAY,OAAO;IACjB;;OAEG;IACH,4BAAiB,CAAA;IACjB;;OAEG;IACH,gCAAqB,CAAA;IACrB;;OAEG;IACH,8BAAmB,CAAA;AACrB,CAAC,EAbW,OAAO,KAAP,OAAO,QAalB","sourcesContent":["import type { SharedRef as SharedRefType } from 'expo/types';\nimport type { StyleProp, ViewStyle } from 'react-native';\n\nimport { Coordinates } from '../shared.types';\n\nexport type Marker = {\n  /**\n   * The SF symbol to display for the marker.\n   */\n  systemImage?: string;\n\n  /**\n   * The coordinates of the marker.\n   */\n  coordinates?: Coordinates;\n\n  /**\n   * The title of the marker, displayed in the callout when the marker is clicked.\n   */\n  title?: string;\n\n  /**\n   * The tint color of the marker.\n   */\n  tintColor?: string;\n};\n\nexport type CameraPosition = {\n  /**\n   * The middle point of the camera.\n   */\n  coordinates?: Coordinates;\n\n  /**\n   * The zoom level of the camera.\n   * For some view sizez, lower zoom levels might not be available.\n   */\n  zoom?: number;\n};\n\nexport type MapUiSettings = {\n  /**\n   * Whether the compass is enabled on the map.\n   * If enabled, the compass is only visible when the map is rotated.\n   */\n  compassEnabled?: boolean;\n\n  /**\n   * Whether the my location button is visible.\n   */\n  myLocationButtonEnabled?: boolean;\n\n  /**\n   * Whether the scale bar is displayed when zooming.\n   */\n  scaleBarEnabled?: boolean;\n\n  /**\n   * Whether the user is allowed to change the pitch type.\n   */\n  togglePitchEnabled?: boolean;\n};\n\n/**\n * The type of map to display.\n */\nexport enum MapType {\n  /**\n   * Satellite imagery with roads and points of interest overlayed.\n   */\n  HYBRID = 'HYBRID',\n  /**\n   * Standard road map.\n   */\n  STANDARD = 'STANDARD',\n  /**\n   * Satellite imagery.\n   */\n  IMAGERY = 'IMAGERY',\n}\n\nexport type MapProperties = {\n  /**\n   * Whether the traffic layer is enabled on the map.\n   */\n  isTrafficEnabled?: boolean;\n\n  /**\n   * Defines which map type should be used.\n   */\n  mapType?: MapType;\n\n  /**\n   * If true, the user can select a location on the map to get more information.\n   */\n  selectionEnabled?: boolean;\n};\n\nexport type Annotation = {\n  /**\n   * The background color of the annotation.\n   */\n  backgroundColor?: string;\n  /**\n   * The text to display in the annotation.\n   */\n  text?: string;\n  /**\n   * The text color of the annotation.\n   */\n  textColor?: string;\n  /**\n   * The custom icon to display in the annotation.\n   */\n  icon?: SharedRefType<'image'>;\n} & Marker;\n\nexport type MapProps = {\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * The initial camera position of the map.\n   */\n  cameraPosition?: CameraPosition;\n\n  /**\n   * The array of markers to display on the map.\n   */\n  markers?: Marker[];\n\n  /**\n   * The array of annotations to display on the map.\n   */\n  annotations?: Annotation[];\n\n  /**\n   * The `MapUiSettings` to be used for UI-specific settings on the map.\n   */\n  uiSettings?: MapUiSettings;\n\n  /**\n   * The properties for the map.\n   */\n  properties?: MapProperties;\n\n  /**\n   * Lambda invoked when the user clicks on the map.\n   * It won't be invoked if the user clicks on POI or a marker.\n   */\n  onMapClick?: (event: { coordinates: Coordinates }) => void;\n\n  /**\n   * Lambda invoked when the marker is clicked\n   */\n  onMarkerClick?: (event: Marker) => void;\n\n  /**\n   * Lambda invoked when the map was moved by the user.\n   */\n  onCameraMove?: (event: {\n    coordinates: Coordinates;\n    zoom: number;\n    tilt: number;\n    bearing: number;\n  }) => void;\n};\n"]}