{"version":3,"file":"GoogleMaps.types.js","sourceRoot":"","sources":["../../src/google/GoogleMaps.types.ts"],"names":[],"mappings":"AAgIA;;GAEG;AACH,MAAM,CAAN,IAAY,OAiBX;AAjBD,WAAY,OAAO;IACjB;;OAEG;IACH,4BAAiB,CAAA;IACjB;;OAEG;IACH,4BAAiB,CAAA;IACjB;;OAEG;IACH,kCAAuB,CAAA;IACvB;;OAEG;IACH,8BAAmB,CAAA;AACrB,CAAC,EAjBW,OAAO,KAAP,OAAO,QAiBlB;AA+CD,MAAM,CAAN,IAAY,cAIX;AAJD,WAAY,cAAc;IACxB,iCAAe,CAAA;IACf,+BAAa,CAAA;IACb,iDAA+B,CAAA;AACjC,CAAC,EAJW,cAAc,KAAd,cAAc,QAIzB","sourcesContent":["import type { SharedRef as SharedRefType } from 'expo/types';\nimport type { PermissionResponse } from 'expo-modules-core';\nimport type { StyleProp, ViewStyle } from 'react-native';\n\nimport { Coordinates } from '../shared.types';\n\nexport type Marker = {\n  /**\n   * The coordinates of the marker.\n   */\n  coordinates?: Coordinates;\n\n  /**\n   * The title of the marker, displayed in the callout when the marker is clicked.\n   */\n  title?: string;\n\n  /**\n   * The snippet of the marker, Displayed in the callout when the marker is clicked.\n   */\n  snippet?: string;\n\n  /**\n   * Whether the marker is draggable.\n   */\n  draggable?: boolean;\n\n  /**\n   * Whether the callout should be shown when the marker is clicked.\n   */\n  showCallout?: boolean;\n\n  /**\n   * The custom icon to display for the marker.\n   */\n  icon?: SharedRefType<'image'>;\n};\n\nexport type UserLocation = {\n  /**\n   * User location coordinates.\n   */\n  coordinates: Coordinates;\n\n  /**\n   * Should the camera follow the users location.\n   */\n  followUserLocation: boolean;\n};\n\nexport type CameraPosition = {\n  /**\n   * The middle point of the camera.\n   */\n  coordinates?: Coordinates;\n\n  /**\n   * The zoom level of the camera.\n   * For some view sizez, lower zoom levels might not be available.\n   */\n  zoom?: number;\n};\n\nexport type MapUiSettings = {\n  /**\n   * Whether the compass is enabled on the map.\n   * If enabled, the compass is only visible when the map is rotated.\n   */\n  compassEnabled?: boolean;\n\n  /**\n   * Whether the indoor level picker is enabled .\n   */\n  indoorLevelPickerEnabled?: boolean;\n\n  /**\n   * Whether the map toolbar is visible.\n   */\n  mapToolbarEnabled?: boolean;\n\n  /**\n   * Whether the my location button is visible.\n   */\n  myLocationButtonEnabled?: boolean;\n\n  /**\n   * Whether rotate gestures are enabled.\n   */\n  rotationGesturesEnabled?: boolean;\n\n  /**\n   * Whether the scroll gestures are enabled.\n   */\n  scrollGesturesEnabled?: boolean;\n\n  /**\n   * Whether the scroll gestures are enabled during rotation or zoom.\n   */\n  scrollGesturesEnabledDuringRotateOrZoom?: boolean;\n\n  /**\n   * Whether the tilt gestures are enabled.\n   */\n  tiltGesturesEnabled?: boolean;\n\n  /**\n   * Whether the zoom controls are visible.\n   */\n  zoomControlsEnabled?: boolean;\n\n  /**\n   * Whether the zoom gestures are enabled.\n   */\n  zoomGesturesEnabled?: boolean;\n\n  /**\n   * Whether the scale bar is displayed when zooming.\n   * @platform ios\n   */\n  scaleBarEnabled?: boolean;\n\n  /**\n   * Whether the user is allowed to change the pitch type.\n   * @platform ios\n   */\n  togglePitchEnabled?: boolean;\n};\n\n/**\n * The type of map to display.\n */\nexport enum MapType {\n  /**\n   * Satellite imagery with roads and points of interest overlayed.\n   */\n  HYBRID = 'HYBRID',\n  /**\n   * Standard road map.\n   */\n  NORMAL = 'NORMAL',\n  /**\n   * Satellite imagery.\n   */\n  SATELLITE = 'SATELLITE',\n  /**\n   * Topographic data.\n   */\n  TERRAIN = 'TERRAIN',\n}\n\nexport type MapProperties = {\n  /**\n   * Whether the building layer is enabled on the map.\n   */\n  isBuildingEnabled?: boolean;\n\n  /**\n   * Whether the indoor layer is enabled on the map.\n   */\n  isIndoorEnabled?: boolean;\n\n  /**\n   * Whether finding the user's location is enabled on the map.\n   */\n  isMyLocationEnabled?: boolean;\n\n  /**\n   * Whether the traffic layer is enabled on the map.\n   */\n  isTrafficEnabled?: boolean;\n\n  /**\n   * Defines which map type should be used.\n   */\n  mapType?: MapType;\n\n  /**\n   * If true, the user can select a location on the map to get more information.\n   * @platform ios\n   */\n  selectionEnabled?: boolean;\n\n  /**\n   * The maximum zoom level for the map.\n   * @platform android\n   */\n  maxZoomPreference?: number;\n\n  /**\n   * The minimum zoom level for the map.\n   * @platform android\n   */\n  minZoomPreference?: number;\n};\n\nexport enum MapColorScheme {\n  LIGHT = 'LIGHT',\n  DARK = 'DARK',\n  FOLLOW_SYSTEM = 'FOLLOW_SYSTEM',\n}\n\nexport type MapProps = {\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * The initial camera position of the map.\n   */\n  cameraPosition?: CameraPosition;\n\n  /**\n   * The array of markers to display on the map.\n   */\n  markers?: Marker[];\n\n  /**\n   * The `MapUiSettings` to be used for UI-specific settings on the map.\n   */\n  uiSettings?: MapUiSettings;\n\n  /**\n   * The properties for the map.\n   */\n  properties?: MapProperties;\n\n  /**\n   * Defines the color scheme for the map.\n   */\n  colorScheme?: MapColorScheme;\n\n  /**\n   * User location, overrides default behavior.\n   */\n  userLocation?: UserLocation;\n\n  /**\n   * Lambda invoked when the map is loaded.\n   */\n  onMapLoaded?: () => void;\n\n  /**\n   * Lambda invoked when the user clicks on the map.\n   * It won't be invoked if the user clicks on POI or a marker.\n   */\n  onMapClick?: (event: { coordinates: Coordinates }) => void;\n\n  /**\n   * Lambda invoked when the user long presses on the map.\n   */\n  onMapLongClick?: (event: { coordinates: Coordinates }) => void;\n\n  /**\n   * Lambda invoked when a POI is clicked.\n   */\n  onPOIClick?: (event: { name: string; coordinates: Coordinates }) => void;\n\n  /**\n   * Lambda invoked when the marker is clicked\n   */\n  onMarkerClick?: (event: Marker) => void;\n\n  /**\n   * Lambda invoked when the map was moved by the user.\n   */\n  onCameraMove?: (event: {\n    coordinates: Coordinates;\n    zoom: number;\n    tilt: number;\n    bearing: number;\n  }) => void;\n};\n\nexport type StreetViewProps = {\n  style?: StyleProp<ViewStyle>;\n\n  position?: Coordinates;\n  isPanningGesturesEnabled?: boolean;\n  isStreetNamesEnabled?: boolean;\n  isUserNavigationEnabled?: boolean;\n  isZoomGesturesEnabled?: boolean;\n};\n\nexport type GoogleMapsModule = {\n  /**\n   * Asks the user to grant permissions for location.\n   * @return A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  requestPermissionsAsync(): Promise<PermissionResponse>;\n  /**\n   * Checks user's permissions for accessing location.\n   * @return A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  getPermissionsAsync(): Promise<PermissionResponse>;\n};\n"]}