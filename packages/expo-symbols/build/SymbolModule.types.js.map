{"version":3,"file":"SymbolModule.types.js","sourceRoot":"","sources":["../src/SymbolModule.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ViewProps } from 'react-native';\n\nexport interface SymbolViewProps extends ViewProps {\n  /**\n   * The name of the symbol. Can be found in the [Apple SF Symbols app](https://developer.apple.com/sf-symbols/).\n   */\n  name: string;\n  /**\n   * Fallback to render on Android where SF symbols are not available.\n   */\n  fallback?: React.ReactNode;\n  /**\n   * The type of symbol to render.\n   * @default 'monochrome'\n   */\n  type?: SymbolType;\n  /**\n   * The scale of the symbol to render.\n   * @default 'unspecified'\n   */\n  scale?: SymbolScale;\n  /**\n   * The weight of the symbol to render.\n   * @default 'unspecified'\n   */\n  weight?: SymbolWeight;\n  /**\n   * An array of colors to use when the [SymbolType](#symboltype) is 'palette'.\n   */\n  colors?: string | string[] | null;\n  /**\n   * The tint color to apply to the symbol.\n   * @default null\n   */\n  tintColor?: string | null;\n  /**\n   * The content mode to apply to the symbol.\n   * @default 'scaleToAspectFit'\n   */\n  resizeMode?: SymbolContentMode;\n  /**\n   * The animation configuration to apply to the symbol.\n   */\n  animationSpec?: AnimationSpec;\n}\n\nexport interface NativeSymbolViewProps extends ViewProps {\n  name: string;\n  type: SymbolType;\n  scale?: SymbolScale;\n  weight?: SymbolWeight;\n  animated: boolean;\n  colors?: string | string[];\n  tint?: string;\n  resizeMode?: SymbolContentMode;\n  animationSpec?: AnimationSpec;\n}\n\ntype SymbolWeight =\n  | 'unspecified'\n  | 'ultraLight'\n  | 'thin'\n  | 'light'\n  | 'regular'\n  | 'medium'\n  | 'semibold'\n  | 'bold'\n  | 'heavy'\n  | 'black';\n\ntype SymbolScale = 'default' | 'unspecified' | 'small' | 'medium' | 'large';\n\ntype SymbolContentMode =\n  | 'scaleToFill'\n  | 'scaleAspectFit'\n  | 'scaleAspectFill'\n  | 'redraw'\n  | 'center'\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right'\n  | 'topLeft'\n  | 'topRight'\n  | 'bottomLeft'\n  | 'bottomRight';\n\nexport type AnimationSpec = {\n  /**\n   * The effect to apply to the symbol.\n   */\n  effect?: AnimationEffect;\n  /**\n   * If the animation should repeat.\n   */\n  repeating?: boolean;\n  /**\n   * The number of times the animation should repeat.\n   */\n  repeatCount?: number;\n  /**\n   * The duration of the animation in seconds.\n   */\n  speed?: number;\n  variableAnimationSpec?: VariableAnimationSpec;\n};\n\nexport type AnimationEffect = {\n  /**\n   * The type of animation to apply to the symbol.\n   */\n  type: AnimationType;\n  /**\n   * Whether the entire symbol should animate or just the individual layers.\n   */\n  wholeSymbol?: boolean;\n  /**\n   * The direction of the animation.\n   */\n  direction?: 'up' | 'down';\n};\n\ntype AnimationType = 'bounce' | 'pulse' | 'scale';\n\ntype VariableAnimationSpec = {\n  reversing?: boolean;\n  cumulative?: boolean;\n  iterative?: boolean;\n  hideInactiveLayers?: boolean;\n  dimInactiveLayers?: boolean;\n};\n\ntype SymbolType = 'monochrome' | 'hierarchical' | 'palette' | 'multicolor';\n"]}