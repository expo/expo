{"version":3,"file":"SymbolView.js","sourceRoot":"","sources":["../src/SymbolView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,qCAAqC,CAAC;AAC/D,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAChC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AAG7D,OAAO,EAAE,qBAAqB,EAAE,MAAM,WAAW,CAAC;AAClD,OAAO,OAAO,MAAM,2BAA2B,CAAC;AAEhD,sCAAsC;AACtC,MAAM,oBAAoB,GACxB,QAAQ,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,oCAAoC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAE9F,SAAS,OAAO,CAAC,MAAiC;IAChD,MAAM,cAAc,GAAG,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1E,IAAI,CAAC,cAAc;QAAE,OAAO,OAAO,CAAC;IAEpC,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAsB;IAC/C,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACrC,MAAM,IAAI,GACR,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ;QAC5B,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;QAC3D,CAAC,CAAC,IAAI,CAAC;IACX,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,OAAO,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;IAC/B,CAAC;IACD,OAAO,CACL,CAAC,IAAI,CACH,KAAK,CAAC,CAAC;YACL,UAAU,EAAE,IAAI,CAAC,IAAI;YACrB,KAAK,EAAE,KAAK,CAAC,SAAS,IAAI,oBAAoB;YAC9C,QAAQ,EAAE,KAAK,CAAC,IAAI,IAAI,EAAE;SAC3B,CAAC,CACF;MAAA,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAC9B;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC","sourcesContent":["import { useFonts } from '@expo-google-fonts/material-symbols';\nimport { useMemo } from 'react';\nimport { Platform, PlatformColor, Text } from 'react-native';\n\nimport { SymbolViewProps } from './SymbolModule.types';\nimport { androidSymbolToString } from './android';\nimport regular from './android/weights/regular';\n\n// trying to mirror iOS implementation\nconst DEFAULT_SYMBOL_COLOR =\n  Platform.OS === 'android' ? PlatformColor('@android:color/system_primary_dark') : '#7d9bd4';\n\nfunction getFont(weight: SymbolViewProps['weight']) {\n  const platformWeight = typeof weight === 'object' ? weight.android : null;\n  if (!platformWeight) return regular;\n\n  return platformWeight;\n}\n\nexport function SymbolView(props: SymbolViewProps) {\n  const font = useMemo(() => getFont(props.weight), [props.weight]);\n  useFonts({ [font.name]: font.font });\n  const name =\n    typeof props.name === 'object'\n      ? props.name[Platform.OS === 'android' ? 'android' : 'web']\n      : null;\n  if (!name) {\n    return <>{props.fallback}</>;\n  }\n  return (\n    <Text\n      style={{\n        fontFamily: font.name,\n        color: props.tintColor ?? DEFAULT_SYMBOL_COLOR,\n        fontSize: props.size ?? 24,\n      }}>\n      {androidSymbolToString(name)}\n    </Text>\n  );\n}\n"]}