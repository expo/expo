{"version":3,"file":"SymbolView.js","sourceRoot":"","sources":["../src/SymbolView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,wBAAwB,EAAE,MAAM,mBAAmB,CAAC;AACvE,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAI5C,IAAI,UAAU,GAAsD,IAAI,CAAC;AAEzE,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE,CAAC;IAC1B,UAAU,GAAG,wBAAwB,CAAC,cAAc,CAAC,CAAC;AACxD,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAsB;IAC/C,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;IAC/B,CAAC;IAED,MAAM,WAAW,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IAC1C,OAAO,CAAC,UAAU,CAAC,IAAI,WAAW,CAAC,EAAG,CAAC;AACzC,CAAC;AAED,SAAS,cAAc,CAAC,KAAsB;IAC5C,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC/F,MAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC;IAChD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,YAAY,CAAC;IACxC,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC;IAC9B,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK;QACvB,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC;QAC9C,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IAClC,MAAM,IAAI,GAAG,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;IAC1E,MAAM,MAAM,GAAG,OAAO,KAAK,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;IAElF,OAAO;QACL,GAAG,KAAK;QACR,IAAI;QACJ,KAAK;QACL,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAC1C,IAAI,EAAE,YAAY,CAAC,KAAK,CAAC,SAAS,CAAC;QACnC,MAAM;QACN,QAAQ;QACR,IAAI;KACL,CAAC;AACJ,CAAC","sourcesContent":["import { Platform, requireNativeViewManager } from 'expo-modules-core';\nimport { processColor } from 'react-native';\n\nimport { NativeSymbolViewProps, SymbolViewProps } from './SymbolModule.types';\n\nlet NativeView: React.ComponentType<NativeSymbolViewProps> | null = null;\n\nif (Platform.OS === 'ios') {\n  NativeView = requireNativeViewManager('SymbolModule');\n}\n\nexport function SymbolView(props: SymbolViewProps) {\n  if (!NativeView) {\n    return <>{props.fallback}</>;\n  }\n\n  const nativeProps = getNativeProps(props);\n  return <NativeView {...nativeProps} />;\n}\n\nfunction getNativeProps(props: SymbolViewProps): NativeSymbolViewProps {\n  const colors = Array.isArray(props.colors) ? props.colors : props.colors ? [props.colors] : [];\n  const animated = !!props.animationSpec || false;\n  const type = props.type || 'monochrome';\n  const size = props.size || 24;\n  const style = props.style\n    ? [{ width: size, height: size }, props.style]\n    : { width: size, height: size };\n  const name = typeof props.name === 'object' ? props.name.ios : props.name;\n  const weight = typeof props.weight === 'object' ? props.weight.ios : props.weight;\n\n  return {\n    ...props,\n    name,\n    style,\n    colors: colors.map((c) => processColor(c)),\n    tint: processColor(props.tintColor),\n    weight,\n    animated,\n    type,\n  };\n}\n"]}