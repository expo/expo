{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../src/Utils.ts"],"names":[],"mappings":";;;;;;AAAA,oEAA2C;AAC3C,iDAA0C;AAE1C,yCAAsC;AAEtC,SAAgB,WAAW,CAAC,IAAY;IACtC,IAAA,yBAAS,EAAC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9E,CAAC;AAFD,kCAEC;AAEM,MAAM,KAAK,GAAkC,CAAC,EAAE,EAAE,EAAE,CACzD,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AADvC,QAAA,KAAK,SACkC;AAE7C,KAAK,UAAU,iBAAiB;IACrC,IAAI;QACF,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAC1C,MAAM,IAAA,qBAAU,EAAC,KAAK,EAAE,CAAC,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;QACtF,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;KACrC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;AACH,CAAC;AATD,8CASC;AAEM,KAAK,UAAU,kBAAkB;IACtC,IAAI;QACF,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAC3C,MAAM,IAAA,qBAAU,EAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;QAC/E,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;KACtC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;AACH,CAAC;AATD,gDASC;AAEM,KAAK,UAAU,uBAAuB,CAAC,QAAkB;IAC9D,IAAI,CAAC,QAAQ,GAAG,mBAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QACrC,MAAM,iBAAiB,EAAE,CAAC;KAC3B;IAED,IAAI,CAAC,QAAQ,GAAG,mBAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACjC,MAAM,kBAAkB,EAAE,CAAC;KAC5B;AACH,CAAC;AARD,0DAQC","sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport { spawnSync } from 'child_process';\n\nimport { Platform } from './Platform';\n\nexport function yarnInstall(path: string) {\n  spawnSync('yarn', ['install', '--silent'], { stdio: 'inherit', cwd: path });\n}\n\nexport const delay: (ms: number) => Promise<void> = (ms) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\nexport async function killEmulatorAsync(): Promise<void> {\n  try {\n    console.log('Trying to kill emulator...');\n    await spawnAsync('adb', ['-s', 'emulator-5554', 'emu', 'kill'], { stdio: 'inherit' });\n    console.log('Emulator was killed.');\n  } catch (e) {\n    console.log(\"Couldn't kill emulator\");\n    console.log(e);\n  }\n}\n\nexport async function killSimulatorAsync(): Promise<void> {\n  try {\n    console.log('Trying to kill simulator...');\n    await spawnAsync('xcrun', ['simctl', 'shutdown', 'all'], { stdio: 'inherit' });\n    console.log('Simulator was killed.');\n  } catch (e) {\n    console.log(\"Couldn't kill simulator.\");\n    console.log(e);\n  }\n}\n\nexport async function killVirtualDevicesAsync(platform: Platform): Promise<void> {\n  if ((platform & Platform.Android) > 0) {\n    await killEmulatorAsync();\n  }\n\n  if ((platform & Platform.iOS) > 0) {\n    await killSimulatorAsync();\n  }\n}\n"]}