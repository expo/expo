{"version":3,"file":"TemplateFile.js","sourceRoot":"","sources":["../src/TemplateFile.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport { dirname, join } from 'path';\n\nimport { SelfPath } from './Paths';\nimport { Platform } from './Platform';\nimport TemplateEvaluator from './TemplateEvaluator';\n\nexport interface ProjectFile {\n  platform: Platform;\n  copy(projectPath: string, outputPath: string): Promise<void>;\n  evaluate(projectPath: string, filePath: string, evaluator: TemplateEvaluator): Promise<void>;\n}\n\nexport class TemplateFile implements ProjectFile {\n  constructor(\n    public template: string,\n    public platform: Platform = Platform.Both,\n    public shouldBeEvaluated: boolean = false\n  ) {}\n\n  async copy(projectPath: string, outputPath: string): Promise<void> {\n    const src = join(SelfPath, 'templates', this.template, outputPath);\n    const dest = join(projectPath, outputPath);\n    const stat = await fs.promises.stat(src);\n    if (!stat.isFile()) {\n      // NOTE(@kitten): Explicit error was added when switching from fs-extra.copy, which defaults to recursive copying\n      // However, this should only be used on single files, so an explicit error was added\n      throw new TypeError(`Expected outputPath (${outputPath}) to be path to a single file`);\n    }\n    await fs.promises.mkdir(dirname(dest), { recursive: true });\n    return fs.promises.copyFile(src, dest);\n  }\n\n  async evaluate(\n    projectPath: string,\n    filePath: string,\n    evaluator: TemplateEvaluator\n  ): Promise<void> {\n    if (this.shouldBeEvaluated) {\n      return evaluator.compileFileAsync(join(projectPath, filePath));\n    }\n\n    return Promise.resolve();\n  }\n}\n\nexport class UserFile implements ProjectFile {\n  constructor(\n    public userFilePath: string,\n    public platform: Platform = Platform.Both,\n    public shouldBeEvaluated: boolean = false\n  ) {}\n\n  copy(projectPath: string, outputPath: string): Promise<void> {\n    return fs.promises.cp(this.userFilePath, join(projectPath, outputPath), {\n      recursive: true,\n    });\n  }\n\n  evaluate(projectPath: string, filePath: string, evaluator: any): Promise<void> {\n    if (this.shouldBeEvaluated) {\n      return evaluator.compileFileAsync(join(projectPath, filePath));\n    }\n\n    return Promise.resolve();\n  }\n}\n\nexport class TemplateFilesFactory {\n  constructor(private template: string) {}\n\n  file(shouldBeEvaluated: boolean = false): TemplateFile {\n    return new TemplateFile(this.template, Platform.Both, shouldBeEvaluated);\n  }\n\n  androidFile(shouldBeEvaluated: boolean = false): TemplateFile {\n    return new TemplateFile(this.template, Platform.Android, shouldBeEvaluated);\n  }\n\n  iosFile(shouldBeEvaluated: boolean = false): TemplateFile {\n    return new TemplateFile(this.template, Platform.iOS, shouldBeEvaluated);\n  }\n}\n"]}