{"version":3,"file":"RunTest.js","sourceRoot":"","sources":["../../src/commands/RunTest.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAA0B;AAE1B,6CAA+B;AAG/B,yEAAiD;AACjD,wDAAqE;AAMrE,SAAS,QAAQ,CAAC,MAAc,EAAE,IAAY;IAC5C,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,YAAY,EAAE;QACzC,MAAM,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAEzC,KAAK,MAAM,QAAQ,IAAI,GAAG,CAAC,KAAK,EAAE;YAChC,IAAI,IAAI,KAAK,QAAQ,EAAE;gBACrB,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;aACvB;SACF;KACF;IAED,MAAM,IAAI,KAAK,CAAC,uBAAuB,IAAI,EAAE,CAAC,CAAC;AACjD,CAAC;AAED,KAAK,UAAU,YAAY,CAAC,MAAc,EAAE,OAAuB;IACjE,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;IACtD,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAErC,IAAI,GAAG,CAAC,MAAM,KAAK,OAAO,EAAE;QAC1B,OAAO,CAAC,GAAG,CAAC,SAAS,eAAK,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,IAAI,yBAAe,CAAC,GAAG,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;QAEvF,OAAO,CAAC,GAAG,CAAC,wBAAwB,eAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClE,MAAM,MAAM,CAAC,sBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAElD,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAEvC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC9B,MAAM,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAErC,IAAI,OAAO,CAAC,eAAe,EAAE;YAC3B,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YACzB,MAAM,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC/B;KACF;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,mBAAmB,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;KAClD;AACH,CAAC;AAED,kBAAe,CAAC,OAAwB,EAAE,EAAE;IAC1C,IAAA,iCAAe,EAAC,OAAO,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC,MAAM,CACvD,qBAAqB,EACrB,+BAA+B,CAChC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import chalk from 'chalk';\nimport { CommanderStatic } from 'commander';\nimport * as fs from 'fs-extra';\n\nimport { Application, Config } from '../Config';\nimport TemplateProject from '../TemplateProject';\nimport { DefaultOptions, registerCommand } from '../registerCommand';\n\ninterface RunTestOptions extends DefaultOptions {\n  test: string;\n}\n\nfunction findTest(config: Config, test: string): [string, Application] {\n  for (const appName in config.applications) {\n    const app = config.applications[appName];\n\n    for (const testName in app.tests) {\n      if (test === testName) {\n        return [appName, app];\n      }\n    }\n  }\n\n  throw new Error(`Couldn't find test: ${test}`);\n}\n\nasync function runTestAsync(config: Config, options: RunTestOptions) {\n  const [appName, app] = findTest(config, options.test);\n  const test = app.tests[options.test];\n\n  if (app.preset === 'detox') {\n    console.log(`Using ${chalk.green('detox')} preset.`);\n    const preset = new TemplateProject(app, appName, options.platform, options.configFile);\n\n    console.log(`Creating test app in ${chalk.green(options.path)}.`);\n    await preset.createApplicationAsync(options.path);\n\n    console.log(`Building app.`);\n    await preset.build(options.path, test);\n\n    console.log(`Running tests.`);\n    await preset.run(options.path, test);\n\n    if (options.shouldBeCleaned) {\n      console.log(`Cleaning.`);\n      await fs.remove(options.path);\n    }\n  } else {\n    throw new Error(`Unknown preset: ${app.preset}`);\n  }\n}\n\nexport default (program: CommanderStatic) => {\n  registerCommand(program, 'run-test', runTestAsync).option(\n    '-t, --test [string]',\n    'Name of the test case to run.'\n  );\n};\n"]}