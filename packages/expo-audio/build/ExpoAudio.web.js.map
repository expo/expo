{"version":3,"file":"ExpoAudio.web.js","sourceRoot":"","sources":["../src/ExpoAudio.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { useEvent } from 'expo';\nimport { PermissionResponse } from 'expo-modules-core';\nimport { useEffect, useState, useMemo } from 'react';\n\nimport {\n  AudioMode,\n  AudioPlayerOptions,\n  AudioSource,\n  AudioStatus,\n  RecorderState,\n  RecordingOptions,\n  RecordingStatus,\n} from './Audio.types';\nimport {\n  AUDIO_SAMPLE_UPDATE,\n  PLAYBACK_STATUS_UPDATE,\n  RECORDING_STATUS_UPDATE,\n} from './AudioEventKeys';\nimport { AudioPlayer, AudioRecorder, AudioSample } from './AudioModule.types';\nimport * as AudioModule from './AudioModule.web';\nimport { createRecordingOptions } from './utils/options';\nimport { resolveSource, resolveSourceWithDownload } from './utils/resolveSource';\n\n// Global registry for cleaning up object URLs when players are garbage collected\n// Since we are using blob urls, we need to clean them up when the player is garbage collected\n// this is only used for createAudioPlayer, as we have lifecycle management in useAudioPlayer\nconst objectUrlRegistry = new FinalizationRegistry((objectUrl: string) => {\n  URL.revokeObjectURL(objectUrl);\n});\n\nexport function createAudioPlayer(\n  source: AudioSource | string | number | null = null,\n  options: AudioPlayerOptions = {}\n): AudioPlayer {\n  const { downloadFirst = false } = options;\n\n  // If downloadFirst is true, we don't need to resolve the source, because it will be replaced once the source is downloaded.\n  // If downloadFirst is false, we resolve the source here.\n  const initialSource = downloadFirst ? null : resolveSource(source);\n  const player = new AudioModule.AudioPlayerWeb(initialSource, options);\n\n  // we call .replace() on the player to replace the source with the downloaded one\n  // only relevant if downloadFirst is true and source is not null\n  if (downloadFirst && source) {\n    resolveSourceWithDownload(source)\n      .then((resolved) => {\n        if (resolved) {\n          // Register object URL for automatic cleanup when player is garbage collected\n          if (\n            resolved &&\n            typeof resolved === 'object' &&\n            resolved.uri &&\n            resolved.uri.startsWith('blob:')\n          ) {\n            objectUrlRegistry.register(player, resolved.uri);\n          }\n          player.replace(resolved);\n        }\n      })\n      .catch((error) => {\n        console.warn('expo-audio: Failed to download source, using fallback:', error);\n        const fallback = resolveSource(source);\n        if (fallback) {\n          player.replace(fallback);\n        }\n      });\n  }\n\n  return player;\n}\n\nexport function useAudioPlayer(\n  source: AudioSource | string | number | null = null,\n  options: AudioPlayerOptions = {}\n): AudioModule.AudioPlayerWeb {\n  const { downloadFirst = false } = options;\n\n  // If downloadFirst is true, we don't need to resolve the source, because it will be resolved in the useEffect below.\n  // If downloadFirst is false, we resolve the source here.\n  // we call .replace() in the useEffect below to replace the source with the downloaded one.\n  const initialSource = useMemo(() => {\n    return downloadFirst ? null : resolveSource(source);\n  }, [JSON.stringify(source), downloadFirst]);\n\n  const player = useMemo(\n    () => new AudioModule.AudioPlayerWeb(initialSource, options),\n    [JSON.stringify(initialSource), JSON.stringify(options)]\n  );\n\n  // Handle async source resolution for downloadFirst\n  useEffect(() => {\n    if (!downloadFirst || source === null) {\n      return;\n    }\n\n    let isCancelled = false;\n    let objectUrl: string | null = null;\n\n    // We resolve the source with expo-asset and replace the player's source with the downloaded one.\n    async function resolveAndReplaceSource() {\n      try {\n        const resolved = await resolveSourceWithDownload(source);\n        if (\n          !isCancelled &&\n          resolved &&\n          JSON.stringify(resolved) !== JSON.stringify(initialSource)\n        ) {\n          // Track the object URL for cleanup\n          if (\n            resolved &&\n            typeof resolved === 'object' &&\n            resolved.uri &&\n            resolved.uri.startsWith('blob:')\n          ) {\n            objectUrl = resolved.uri;\n          }\n          player.replace(resolved);\n        }\n      } catch (error) {\n        if (!isCancelled) {\n          console.warn('expo-audio: Failed to download source, using original:', error);\n        }\n      }\n    }\n\n    resolveAndReplaceSource();\n\n    return () => {\n      isCancelled = true;\n      player.remove();\n      // Revoke the object URL created by this hook instance\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [player, JSON.stringify(source), downloadFirst]);\n\n  return player;\n}\n\nexport function useAudioPlayerStatus(player: AudioModule.AudioPlayerWeb): AudioStatus {\n  const currentStatus = useMemo(() => player.currentStatus, [player.id]);\n  return useEvent(player, PLAYBACK_STATUS_UPDATE, currentStatus);\n}\n\nexport function useAudioSampleListener(\n  player: AudioModule.AudioPlayerWeb,\n  listener: (data: AudioSample) => void\n) {\n  player.setAudioSamplingEnabled(true);\n  useEffect(() => {\n    const subscription = player.addListener(AUDIO_SAMPLE_UPDATE, listener);\n    return () => {\n      player.setAudioSamplingEnabled(false);\n      subscription.remove();\n    };\n  }, [player.id]);\n}\n\nexport function useAudioRecorder(\n  options: RecordingOptions,\n  statusListener?: (status: RecordingStatus) => void\n): AudioModule.AudioRecorderWeb {\n  const platformOptions = createRecordingOptions(options);\n  const recorder = useMemo(() => {\n    return new AudioModule.AudioRecorderWeb(platformOptions);\n  }, [JSON.stringify(platformOptions)]);\n\n  useEffect(() => {\n    const subscription = recorder.addListener(RECORDING_STATUS_UPDATE, (status) => {\n      statusListener?.(status);\n    });\n    return () => {\n      recorder.clearTimeouts();\n      subscription.remove();\n    };\n  }, [recorder.id]);\n\n  return recorder;\n}\n\nexport function useAudioRecorderState(recorder: AudioRecorder, interval: number = 500) {\n  const [state, setState] = useState<RecorderState>(recorder.getStatus());\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setState(recorder.getStatus());\n    }, interval);\n\n    return () => clearInterval(id);\n  }, [recorder.id]);\n\n  return state;\n}\n\nexport async function setIsAudioActiveAsync(active: boolean): Promise<void> {\n  return await AudioModule.setIsAudioActiveAsync(active);\n}\n\nexport async function setAudioModeAsync(mode: AudioMode): Promise<void> {\n  return await AudioModule.setAudioModeAsync(mode);\n}\n\nexport async function requestRecordingPermissionsAsync(): Promise<PermissionResponse> {\n  return await AudioModule.requestRecordingPermissionsAsync();\n}\n\nexport async function getRecordingPermissionsAsync(): Promise<PermissionResponse> {\n  return await AudioModule.getRecordingPermissionsAsync();\n}\n\nexport { AudioModule };\n"]}