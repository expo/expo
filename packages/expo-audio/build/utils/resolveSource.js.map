{"version":3,"file":"resolveSource.js","sourceRoot":"","sources":["../../src/utils/resolveSource.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\n\nimport { AudioSource } from '../Audio.types';\n\ntype AudioSourceObject = Exclude<AudioSource, string | number | null>;\n\nfunction getAssetFromSource(source?: AudioSource | string | number | Asset | null): Asset | null {\n  if (!source) {\n    return null;\n  }\n\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  if (typeof source === 'object') {\n    if ('assetId' in source && typeof source.assetId === 'number') {\n      return Asset.fromModule(source.assetId);\n    }\n    if ('uri' in source && typeof source.uri === 'string') {\n      return Asset.fromURI(source.uri);\n    }\n  }\n\n  if (typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  return null;\n}\n\nfunction createSourceFromAsset(\n  asset: Asset,\n  extras: { assetId?: number; headers?: Record<string, string> } = {}\n): AudioSourceObject {\n  const uri = asset.localUri ?? asset.uri;\n  const result: AudioSourceObject = { uri };\n\n  if (extras.assetId != null) {\n    result.assetId = extras.assetId;\n  }\n  if (extras.headers) {\n    result.headers = extras.headers;\n  }\n\n  return result;\n}\n\nexport function resolveSource(source?: AudioSource | string | number | null): AudioSource | null {\n  if (source == null) {\n    return null;\n  }\n\n  if (source instanceof Asset) {\n    return createSourceFromAsset(source);\n  }\n\n  if (typeof source === 'string') {\n    return { uri: source };\n  }\n  if (typeof source === 'number') {\n    const asset = Asset.fromModule(source);\n    return createSourceFromAsset(asset, { assetId: source });\n  }\n\n  if (typeof source === 'object') {\n    if ('assetId' in source && typeof source.assetId === 'number') {\n      const asset = Asset.fromModule(source.assetId);\n      return {\n        ...source,\n        uri: asset.localUri ?? asset.uri,\n      };\n    }\n    if ('uri' in source && typeof source.uri === 'string') {\n      return source;\n    }\n  }\n\n  return source ?? null;\n}\n\n/**\n * Resolves and optionally downloads an audio source before loading.\n * Similar to expo-av's getNativeSourceAndFullInitialStatusForLoadAsync but simplified for expo-audio.\n */\nexport async function resolveSourceWithDownload(\n  source: AudioSource | string | number | null\n): Promise<AudioSource | null> {\n  const asset = getAssetFromSource(source);\n  const fallbackSource = resolveSource(source);\n\n  if (asset) {\n    let assetToDownload: Asset = asset;\n    try {\n      // iOS AVPlayer fails to load the asset if the type is not set or can't be inferred\n      // since this is an audio asset, we can safely set the type to mp3 or any other audio type\n      // and iOS will be able to download and play the asset\n      // Since expo-asset caches, this will only run once per asset, as long as the asset is not deleted from the cache\n      if (!assetToDownload.type) {\n        assetToDownload = new Asset({\n          name: asset.name,\n          type: 'mp3',\n          uri: asset.uri,\n        });\n      }\n\n      // FYI: downloadAsync is a no-op on web and immediately returns a promise that resolves to the original url\n      // TODO(@hirbod): evaluate if we should implement downloadAsync for web instead\n      await assetToDownload.downloadAsync();\n\n      // Use the local URI if available after download\n      if (assetToDownload.localUri) {\n        let finalUri = assetToDownload.localUri;\n\n        // On web, we need to fetch the audio file and create a blob URL\n        // this fully downloads the file to the user's device memory and makes it available for the user to play\n        // fetch() is subject to CORS restrictions, so we need to document this for the users on web\n        // TODO(@hirbod): evaluate if we should implement a downloadAsync for web instead of using fetch here\n        if (Platform.OS === 'web') {\n          const response = await fetch(assetToDownload.localUri);\n          const blob = await response.blob();\n          finalUri = URL.createObjectURL(blob);\n        }\n\n        if (fallbackSource && typeof fallbackSource === 'object') {\n          return {\n            ...fallbackSource,\n            uri: finalUri,\n          };\n        }\n\n        return { uri: finalUri };\n      } else {\n        console.warn(\n          'No localUri found, asset may not have downloaded properly, returning the original source'\n        );\n      }\n    } catch (error) {\n      // If download fails, fall back to original source\n      console.warn('expo-audio: Failed to download asset, falling back to original source:', error);\n    }\n  }\n\n  // Fallback to normal resolution\n  return fallbackSource;\n}\n"]}