{"version":3,"file":"resolveSource.js","sourceRoot":"","sources":["../../src/utils/resolveSource.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\n\nimport { AudioSource } from '../Audio.types';\n\nexport function resolveSource(source?: AudioSource | string | number | null): AudioSource | null {\n  if (typeof source === 'string') {\n    return { uri: source };\n  }\n  if (typeof source === 'number') {\n    const asset = Asset.fromModule(source);\n    return { uri: asset.uri, assetId: source };\n  }\n  return source ?? null;\n}\n\n/**\n * Resolves and optionally downloads an audio source before loading.\n * Similar to expo-av's getNativeSourceAndFullInitialStatusForLoadAsync but simplified for expo-audio.\n */\nexport async function resolveSourceWithDownload(\n  source: AudioSource | string | number | null\n): Promise<AudioSource | null> {\n  let asset: Asset | null = null;\n\n  // Get asset from different source types\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  } else if (typeof source === 'string') {\n    // For remote URLs, create an asset from URI\n    asset = Asset.fromURI(source);\n  } else if (source && typeof source === 'object' && source.uri) {\n    // For source objects with URI\n    asset = Asset.fromURI(source.uri);\n  } else if (source && typeof source === 'object' && source.assetId) {\n    // For source objects with assetId\n    asset = Asset.fromModule(source.assetId);\n  }\n\n  if (asset) {\n    try {\n      // iOS AVPlayer fails to load the asset if the type is not set or can't be inferred\n      // since this is an audio asset, we can safely set the type to mp3 or any other audio type\n      // and iOS will be able to download and play the asset\n      // Since expo-asset caches, this will only run once per asset, as long as the asset is not deleted from the cache\n      if (!asset.type) {\n        asset = new Asset({\n          name: asset.name,\n          type: 'mp3',\n          uri: asset.uri,\n        });\n      }\n\n      // FYI: downloadAsync is a no-op on web and immediately returns a promise that resolves to the original url\n      // TODO(@hirbod): evaluate if we should implement downloadAsync for web instead\n      await asset.downloadAsync();\n\n      // Use the local URI if available after download\n      if (asset.localUri) {\n        let finalUri = asset.localUri;\n\n        // On web, we need to fetch the audio file and create a blob URL\n        // this fully downloads the file to the user's device memory and makes it available for the user to play\n        // fetch() is subject to CORS restrictions, so we need to document this for the users on web\n        // TODO(@hirbod): evaluate if we should implement a downloadAsync for web instead of using fetch here\n        if (Platform.OS === 'web') {\n          const response = await fetch(asset.localUri);\n          const blob = await response.blob();\n          finalUri = URL.createObjectURL(blob);\n        }\n\n        return { uri: finalUri };\n      } else {\n        console.warn(\n          'No localUri found, asset may not have downloaded properly, returning the original source'\n        );\n      }\n    } catch (error) {\n      // If download fails, fall back to original source\n      console.warn('expo-audio: Failed to download asset, falling back to original source:', error);\n    }\n  }\n\n  // Fallback to normal resolution\n  return resolveSource(source);\n}\n"]}