{"version":3,"file":"CoreModule.js","sourceRoot":"","sources":["../../src/web/CoreModule.ts"],"names":[],"mappings":"AAGA,OAAO,IAAI,MAAM,SAAS,CAAC;AAE3B,MAAM,YAAY;IACR,SAAS,CAAwC;IAEzD,cAAc,CACZ,SAAoB,EACpB,QAA+B;QAE/B,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAC;IACD,kBAAkB,CAAqC,SAAoB;QACzE,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,CAAC;IAC1C,CAAC;IACD,IAAI,CACF,SAAoB,EACpB,GAAG,IAAuC;QAE1C,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAC3E,CAAC;IACD,WAAW,CACT,SAAoB,EACpB,QAA+B;QAE/B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;SAC5B;QACD,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE;YACnC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;SAC3C;QACD,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;CACF;AAED,MAAM,YACJ,SAAQ,YAAwB;IAIhC,aAAa,CAAsB;IACnC,oBAAoB,CAAU;CAC/B;AAED,MAAM,YACJ,SAAQ,YAAwB;IAGhC,OAAO;QACL,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF;AAED,UAAU,CAAC,IAAI,GAAG;IAChB,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,OAAO,EAAE,EAAE;IACX,MAAM,EAAE,IAAI,CAAC,EAAE;IACf,MAAM,EAAE,IAAI,CAAC,EAAE;IACf,aAAa,EAAE,GAAG,EAAE;QAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF,CAAC","sourcesContent":["import type { EventEmitter as EventEmitterType } from '../ts-declarations/EventEmitter';\nimport type { NativeModule as NativeModuleType } from '../ts-declarations/NativeModule';\nimport type { SharedObject as SharedObjectType } from '../ts-declarations/SharedObject';\nimport uuid from '../uuid';\n\nclass EventEmitter<TEventsMap extends Record<never, never>> implements EventEmitterType {\n  private listeners?: Map<keyof TEventsMap, Set<Function>>;\n\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    this.listeners?.get(eventName)?.delete(listener);\n  }\n  removeAllListeners<EventName extends keyof TEventsMap>(eventName: EventName): void {\n    this.listeners?.get(eventName)?.clear();\n  }\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void {\n    this.listeners?.get(eventName)?.forEach((listener) => listener(...args));\n  }\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n    this.listeners?.get(eventName)?.add(listener);\n  }\n}\n\nclass NativeModule<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements NativeModuleType\n{\n  [key: string]: any;\n  ViewPrototype?: object | undefined;\n  __expo_module_name__?: string;\n}\n\nclass SharedObject<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements SharedObjectType\n{\n  release(): void {\n    throw new Error('Method not implemented.');\n  }\n}\n\nglobalThis.expo = {\n  EventEmitter,\n  NativeModule,\n  SharedObject,\n  modules: {},\n  uuidv4: uuid.v4,\n  uuidv5: uuid.v5,\n  getViewConfig: () => {\n    throw new Error('Method not implemented.');\n  },\n};\n"]}