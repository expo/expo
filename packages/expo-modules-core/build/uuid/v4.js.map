{"version":3,"file":"v4.js","sourceRoot":"","sources":["../../src/uuid/v4.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,mBAAmB,CAAC;AAC5C,OAAO,GAAG,MAAM,WAAW,CAAC;AAO5B,MAAM,UAAU,MAAM,CACpB,OAAqC,EACrC,GAAO,EACP,MAAe;IAEf,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;IAE/B,IAAI,MAAM,GAAoB,IAAI,CAAC;IAEnC,IAAI,OAAO,OAAO,IAAI,QAAQ,EAAE;QAC9B,MAAM,GAAG,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QACrD,OAAO,GAAG,SAAS,CAAC;KACrB;IAED,OAAO,GAAG,OAAO,IAAI,SAAS,CAAC;IAE/B,IAAI,IAAI,GAAa,EAAE,CAAC;IACxB,IAAI,OAAO,IAAI,QAAQ,IAAI,OAAO,EAAE;QAClC,IAAI,GAAG,OAAO,CAAC,MAAkB,CAAC;KACnC;SAAM,IAAI,OAAO,IAAI,KAAK,IAAI,OAAO,EAAE;QACtC,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,EAAc,CAAC;KAC3C;IAED,gEAAgE;IAChE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;IAClC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;IAElC,oCAAoC;IACpC,IAAI,MAAM,EAAE;QACV,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE;YAC9B,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC;SAC3B;KACF;IAED,OAAO,MAAM,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import bytesToUuid from './lib/bytesToUuid';\nimport rng from './lib/rng';\nimport { OutputBuffer, V4Options } from './types/uuid.types';\n\n/**\n * DO NOT USE this function in security-sensitive contexts.\n */\nexport function uuidv4(options?: V4Options): string;\nexport function uuidv4<T extends OutputBuffer>(\n  options: V4Options | null | undefined,\n  buf?: T,\n  offset?: number\n) {\n  const i = (buf && offset) || 0;\n\n  let buffer: number[] | null = null;\n\n  if (typeof options == 'string') {\n    buffer = options === 'binary' ? new Array(16) : null;\n    options = undefined;\n  }\n\n  options = options || undefined;\n\n  let rnds: number[] = [];\n  if (options && 'random' in options) {\n    rnds = options.random as number[];\n  } else if (options && 'rng' in options) {\n    rnds = (options.rng || rng)() as number[];\n  }\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buffer) {\n    for (let ii = 0; ii < 16; ++ii) {\n      buffer[i + ii] = rnds[ii];\n    }\n  }\n\n  return buffer || bytesToUuid(rnds);\n}\n"]}