{"version":3,"file":"useReleasingSharedObject.js","sourceRoot":"","sources":["../../src/hooks/useReleasingSharedObject.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAInE;;GAEG;AACH,MAAM,UAAU,wBAAwB,CACtC,OAA4B,EAC5B,YAA4B;IAE5B,MAAM,SAAS,GAAG,MAAM,CAAuB,IAAI,CAAC,CAAC;IACrD,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;IACpC,MAAM,oBAAoB,GAAG,MAAM,CAAiB,YAAY,CAAC,CAAC;IAElE,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,EAAE;QAC7B,SAAS,CAAC,OAAO,GAAG,OAAO,EAAE,CAAC;KAC/B;IAED,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE;QAC1B,IAAI,SAAS,GAAG,SAAS,CAAC,OAAO,CAAC;QAClC,MAAM,oBAAoB,GACxB,oBAAoB,CAAC,OAAO,EAAE,MAAM,KAAK,YAAY,CAAC,MAAM;YAC5D,YAAY,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAEtF,qHAAqH;QACrH,sEAAsE;QACtE,IAAI,CAAC,SAAS,IAAI,CAAC,oBAAoB,EAAE;YACvC,SAAS,CAAC,OAAO,EAAE,OAAO,EAAE,CAAC;YAC7B,SAAS,GAAG,OAAO,EAAE,CAAC;YACtB,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC;YAC9B,oBAAoB,CAAC,OAAO,GAAG,YAAY,CAAC;SAC7C;aAAM;YACL,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;SAC9B;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,EAAE,YAAY,CAAC,CAAC;IAEjB,SAAS,CAAC,GAAG,EAAE;QACb,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;QAE9B,OAAO,GAAG,EAAE;YACV,+GAA+G;YAC/G,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,EAAE;gBAC/C,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;aAC7B;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,MAAM,CAAC;AAChB,CAAC","sourcesContent":["import { DependencyList, useRef, useMemo, useEffect } from 'react';\n\nimport type { SharedObject } from '../ts-declarations/SharedObject';\n\n/**\n * Returns a shared object, which is automatically cleaned up when the component is unmounted.\n */\nexport function useReleasingSharedObject<TSharedObject extends SharedObject>(\n  factory: () => TSharedObject,\n  dependencies: DependencyList\n): TSharedObject {\n  const objectRef = useRef<TSharedObject | null>(null);\n  const isFastRefresh = useRef(false);\n  const previousDependencies = useRef<DependencyList>(dependencies);\n\n  if (objectRef.current == null) {\n    objectRef.current = factory();\n  }\n\n  const object = useMemo(() => {\n    let newObject = objectRef.current;\n    const dependenciesAreEqual =\n      previousDependencies.current?.length === dependencies.length &&\n      dependencies.every((value, index) => value === previousDependencies.current[index]);\n\n    // If the dependencies have changed, release the previous object and create a new one, otherwise this has been called\n    // because of a fast refresh, and we don't want to release the object.\n    if (!newObject || !dependenciesAreEqual) {\n      objectRef.current?.release();\n      newObject = factory();\n      objectRef.current = newObject;\n      previousDependencies.current = dependencies;\n    } else {\n      isFastRefresh.current = true;\n    }\n    return newObject;\n  }, dependencies);\n\n  useEffect(() => {\n    isFastRefresh.current = false;\n\n    return () => {\n      // This will be called on every fast refresh and on unmount, but we only want to release the object on unmount.\n      if (!isFastRefresh.current && objectRef.current) {\n        objectRef.current.release();\n      }\n    };\n  }, []);\n\n  return object;\n}\n"]}