{"version":3,"file":"ensureNativeModulesAreInstalled.js","sourceRoot":"","sources":["../src/ensureNativeModulesAreInstalled.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAEvD;;;GAGG;AACH,MAAM,UAAU,+BAA+B;IAC7C,IAAI,UAAU,CAAC,IAAI,EAAE;QACnB,OAAO;KACR;IACD,IAAI;QACF,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;YACzB,6DAA6D;YAC7D,OAAO,CAAC,OAAO,CAAC,CAAC;SAClB;aAAM;YACL,oDAAoD;YACpD,sEAAsE;YACtE,yEAAyE;YACzE,aAAa,CAAC,eAAe,EAAE,cAAc,EAAE,CAAC;SACjD;KACF;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,mCAAmC,KAAK,EAAE,CAAC,CAAC;KAC3D;AACH,CAAC","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\n/**\n * Ensures that the native modules are installed in the current runtime.\n * Otherwise, it synchronously calls a native function that installs them.\n */\nexport function ensureNativeModulesAreInstalled(): void {\n  if (globalThis.expo) {\n    return;\n  }\n  try {\n    if (Platform.OS === 'web') {\n      // Requiring web folder sets up the `globalThis.expo` object.\n      require('./web');\n    } else {\n      // TODO: ExpoModulesCore shouldn't be optional here,\n      // but to keep backwards compatibility let's just ignore it in SDK 50.\n      // In most cases the modules were already installed from the native side.\n      NativeModules.ExpoModulesCore?.installModules();\n    }\n  } catch (error) {\n    console.error(`Unable to install Expo modules: ${error}`);\n  }\n}\n"]}