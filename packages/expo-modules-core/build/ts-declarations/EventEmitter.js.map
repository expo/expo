{"version":3,"file":"EventEmitter.js","sourceRoot":"","sources":["../../src/ts-declarations/EventEmitter.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Base type of the events map, whose keys represent supported event names\n * and values are the signatures of the listener for that specific event.\n */\nexport type EventsMap = Record<string, (...args: any[]) => void>;\n\n/**\n * A subscription object that allows to conveniently remove an event listener from the emitter.\n */\nexport type EventSubscription = {\n  /**\n   * Removes an event listener for which the subscription has been created.\n   * After calling this function, the listener will no longer receive any events from the emitter.\n   */\n  remove(): void;\n};\n\n/**\n * A class that provides a consistent API for emitting and listening to events.\n * It shares many concepts with other emitter APIs, such as Node's EventEmitter and `fbemitter`.\n * When the event is emitted, all of the functions attached to that specific event are called *synchronously*.\n * Any values returned by the called listeners are *ignored* and discarded.\n * Its implementation is written in C++ and common for all the platforms.\n */\nexport declare class EventEmitter<TEventsMap extends EventsMap = Record<never, never>> {\n  /**\n   * Creates a new event emitter instance.\n   */\n  constructor();\n\n  /**\n   * Adds a listener for the given event name.\n   */\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): EventSubscription;\n\n  /**\n   * Removes a listener for the given event name.\n   */\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void;\n\n  /**\n   * Removes all listeners for the given event name.\n   */\n  removeAllListeners(eventName: keyof TEventsMap): void;\n\n  /**\n   * Synchronously calls all of the listeners attached to that specific event.\n   * The event can include any number of arguments that will be passed to the listeners.\n   */\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void;\n\n  /**\n   * Returns a number of listeners added to the given event.\n   */\n  listenerCount<EventName extends keyof TEventsMap>(eventName: EventName): number;\n}\n"]}