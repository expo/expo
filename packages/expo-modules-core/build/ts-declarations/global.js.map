{"version":3,"file":"global.js","sourceRoot":"","sources":["../../src/ts-declarations/global.ts"],"names":[],"mappings":"","sourcesContent":["import type { EventEmitter } from './EventEmitter';\nimport type { NativeModule } from './NativeModule';\nimport type { SharedObject } from './SharedObject';\n\nexport interface ExpoGlobal {\n  /**\n   * Host object that is used to access native Expo modules.\n   */\n  modules: Record<string, any>;\n\n  // Natively defined JS classes\n\n  /**\n   * @see EventEmitter\n   */\n  EventEmitter: typeof EventEmitter;\n\n  /**\n   * @see SharedObject\n   */\n  SharedObject: typeof SharedObject;\n\n  /**\n   * @see NativeModule\n   */\n  NativeModule: typeof NativeModule;\n\n  // Utils\n\n  /**\n   * Generates a random UUID v4 string.\n   */\n  uuidv4(): string;\n\n  /**\n   * Generates a UUID v5 string representation of the value in the specified namespace.\n   */\n  uuidv5(name: string, namespace: string): string;\n\n  /**\n   * Returns a static view config of the native view with the given name\n   * or `null` if the view has not been registered.\n   */\n  getViewConfig(viewName: string): ViewConfig | null;\n\n  /**\n   * Reloads the app.\n   */\n  reloadAppAsync(reason: string): Promise<void>;\n}\n\ntype ViewConfig = {\n  validAttributes: Record<string, any>;\n  directEventTypes: Record<string, { registrationName: string }>;\n};\n\n/* eslint-disable no-var */\n\ndeclare global {\n  /**\n   * Global object containing all the native bindings installed by Expo.\n   * This object is not available in projects without the `expo` package installed.\n   */\n  var expo: ExpoGlobal;\n}\n"]}