{"version":3,"file":"LightSensor.js","sourceRoot":"","sources":["../src/LightSensor.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAShD;;GAEG;AACH,MAAM,OAAO,WAAY,SAAQ,YAAoC;IACnE;;;;;;OAMG;IACH,KAAK,CAAC,gBAAgB;QACpB,OAAO,KAAK,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAED;;;;;;;OAOG;IACH,WAAW,CAAC,QAA0C;QACpD,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;CACF;AAED,eAAe,IAAI,WAAW,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC","sourcesContent":["import DeviceSensor from './DeviceSensor';\nimport type { Listener, Subscription } from './DeviceSensor';\nimport ExpoLightSensor from './ExpoLightSensor';\n\nexport type LightSensorMeasurement = {\n  /**\n   * Ambient light level registered by the device measured in lux (lx).\n   */\n  illuminance: number;\n};\n\n/**\n * @platform android\n */\nexport class LightSensor extends DeviceSensor<LightSensorMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Returns whether the light sensor is available and enabled on the device. Requires at least Android 2.3 (API Level 9).\n   *\n   * @return A promise that resolves to a `boolean` denoting the availability of the light sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the light sensor.\n   *\n   * @param listener A callback that is invoked when a LightSensor update is available. When invoked,\n   * the listener is provided a single argument that is the illuminance value.\n   *\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<LightSensorMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new LightSensor(ExpoLightSensor, 'lightSensorDidUpdate');\n"]}