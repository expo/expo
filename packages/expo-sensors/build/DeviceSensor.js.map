{"version":3,"file":"DeviceSensor.js","sourceRoot":"","sources":["../src/DeviceSensor.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,gBAAgB,EAEhB,QAAQ,GAET,MAAM,mBAAmB,CAAC;AAS3B;;;GAGG;AACH,MAAM,CAAC,OAAO,OAAO,YAAY;IAC/B,aAAa,CAAqB;IAClC,gBAAgB,CAAS;IAEzB,YAAY,kBAAsC,EAAE,eAAuB;QACzE,IAAI,CAAC,aAAa,GAAG,kBAAkB,CAAC;QACxC,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAC;IAC1C,CAAC;IAED,WAAW,CAAC,QAA+B;QACzC,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACzE,CAAC;IAED;;OAEG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACrE,CAAC;IAED;;OAEG;IACH,gBAAgB;QACd,OAAO,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,kBAAkB;QAChB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,YAA+B;QAChD,YAAY,CAAC,MAAM,EAAE,CAAC;IACxB,CAAC;IAED;;;;;;;;;OASG;IACH,iBAAiB,CAAC,UAAkB;QAClC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE;YACzC,OAAO,CAAC,IAAI,CAAC,yDAAyD,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;SACtF;aAAM;YACL,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;SAClD;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,gBAAgB;QACpB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE;YACxC,OAAO,KAAK,CAAC;SACd;aAAM;YACL,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC;SACpD;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB;QACvB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE;YAC3C,OAAO,0BAA0B,CAAC;SACnC;aAAM;YACL,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC;SACvD;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,uBAAuB;QAC3B,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,uBAAuB,EAAE;YAC/C,OAAO,0BAA0B,CAAC;SACnC;aAAM;YACL,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,uBAAuB,EAAE,CAAC;SAC3D;IACH,CAAC;CACF;AAED,MAAM,0BAA0B,GAAuB;IACrD,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,OAAO;IAChB,WAAW,EAAE,IAAI;IACjB,MAAM,EAAE,gBAAgB,CAAC,OAAO;CACjC,CAAC;AAEF,OAAO,EAAE,gBAAgB,EAAE,CAAC","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  type EventSubscription,\n  Platform,\n  PermissionExpiration,\n} from 'expo-modules-core';\n\n/**\n * @hidden\n */\nexport type Listener<E> = (event: E) => void;\n\ntype NativeSensorModule = any;\n\n/**\n * A base class for subscribable sensors. The events emitted by this class are measurements\n * specified by the parameter type `Measurement`.\n */\nexport default class DeviceSensor<Measurement> {\n  _nativeModule: NativeSensorModule;\n  _nativeEventName: string;\n\n  constructor(nativeSensorModule: NativeSensorModule, nativeEventName: string) {\n    this._nativeModule = nativeSensorModule;\n    this._nativeEventName = nativeEventName;\n  }\n\n  addListener(listener: Listener<Measurement>): EventSubscription {\n    return this._nativeModule.addListener(this._nativeEventName, listener);\n  }\n\n  /**\n   * Returns boolean which signifies if sensor has any listeners registered.\n   */\n  hasListeners(): boolean {\n    return this._nativeModule.listenerCount(this._nativeEventName) > 0;\n  }\n\n  /**\n   * Returns the registered listeners count.\n   */\n  getListenerCount(): number {\n    return this._nativeModule.listenerCount(this._nativeEventName);\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners(): void {\n    this._nativeModule.removeAllListeners(this._nativeEventName);\n  }\n\n  /**\n   * Removes the given subscription.\n   * @param subscription A subscription to remove.\n   */\n  removeSubscription(subscription: EventSubscription): void {\n    subscription.remove();\n  }\n\n  /**\n   * Set the sensor update interval.\n   *\n   * @param intervalMs Desired interval in milliseconds between sensor updates.\n   * > Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.\n   * >\n   * > If you need an update interval less than 200ms, you should:\n   * > * add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [**app.json** `permissions` field](/versions/latest/config/app/#permissions)\n   * > * or if you are using bare workflow, add `<uses-permission android:name=\"android.permission.HIGH_SAMPLING_RATE_SENSORS\"/>` to **AndroidManifest.xml**.\n   */\n  setUpdateInterval(intervalMs: number): void {\n    if (!this._nativeModule.setUpdateInterval) {\n      console.warn(`expo-sensors: setUpdateInterval() is not supported on ${Platform.OS}`);\n    } else {\n      this._nativeModule.setUpdateInterval(intervalMs);\n    }\n  }\n\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    if (!this._nativeModule.isAvailableAsync) {\n      return false;\n    } else {\n      return await this._nativeModule.isAvailableAsync();\n    }\n  }\n\n  /**\n   * Checks user's permissions for accessing sensor.\n   */\n  async getPermissionsAsync(): Promise<PermissionResponse> {\n    if (!this._nativeModule.getPermissionsAsync) {\n      return defaultPermissionsResponse;\n    } else {\n      return await this._nativeModule.getPermissionsAsync();\n    }\n  }\n\n  /**\n   * Asks the user to grant permissions for accessing sensor.\n   */\n  async requestPermissionsAsync(): Promise<PermissionResponse> {\n    if (!this._nativeModule.requestPermissionsAsync) {\n      return defaultPermissionsResponse;\n    } else {\n      return await this._nativeModule.requestPermissionsAsync();\n    }\n  }\n}\n\nconst defaultPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport { PermissionStatus };\nexport type { EventSubscription as Subscription, PermissionResponse, PermissionExpiration };\n"]}