{"version":3,"file":"Magnetometer.js","sourceRoot":"","sources":["../src/Magnetometer.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AAoB1D;;;GAGG;AACH,MAAM,OAAO,kBAAmB,SAAQ,YAAqC;IAC3E;;;;;OAKG;IACH,KAAK,CAAC,gBAAgB;QACpB,OAAO,KAAK,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACH,WAAW,CAAC,QAA2C;QACrD,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;CACF;AAED,eAAe,IAAI,kBAAkB,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,CAAC","sourcesContent":["import DeviceSensor from './DeviceSensor';\nimport type { Listener, Subscription } from './DeviceSensor';\nimport ExponentMagnetometer from './ExponentMagnetometer';\n\n/**\n * Each of these keys represents the strength of magnetic field along that particular axis measured in microteslas (`Î¼T`).\n */\nexport type MagnetometerMeasurement = {\n  /**\n   * Value representing strength of magnetic field recorded in X axis.\n   */\n  x: number;\n  /**\n   * Value representing strength of magnetic field recorded in Y axis.\n   */\n  y: number;\n  /**\n   * Value representing strength of magnetic field recorded in Z axis.\n   */\n  z: number;\n};\n\n/**\n * @platform android\n * @platform ios\n */\nexport class MagnetometerSensor extends DeviceSensor<MagnetometerMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Check the availability of the device magnetometer. Requires at least Android 2.3 (API Level 9) and iOS 8.\n   * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the magnetometer.\n   * @param listener A callback that is invoked when a barometer update is available. When invoked, the listener is provided with a single argument that is `MagnetometerMeasurement`.\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<MagnetometerMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new MagnetometerSensor(ExponentMagnetometer, 'magnetometerDidUpdate');\n"]}