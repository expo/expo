{"version":3,"file":"Pedometer.js","sourceRoot":"","sources":["../src/Pedometer.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,gBAAgB,EAChB,YAAY,EAEZ,mBAAmB,GACpB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,SAAS,MAAM,WAAW,CAAC;AAElC,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AAEpD,MAAM,qBAAqB,GAAG,IAAI,YAAY,CAAC,iBAAiB,CAAC,CAAC;AAclE,cAAc;AACd;;;;;;GAMG;AACH,MAAM,UAAU,cAAc,CAAC,QAAiC;IAC9D,OAAO,qBAAqB,CAAC,WAAW,CAAC,0BAA0B,EAAE,QAAQ,CAAC,CAAC;AACjF,CAAC;AAED,cAAc;AACd;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,KAAW,EAAE,GAAS;IAC5D,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE;QACxC,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;KACzE;IACD,SAAS,CAAC,KAAK,IAAI,GAAG,EAAE,sDAAsD,CAAC,CAAC;IAChF,OAAO,MAAM,iBAAiB,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;AACnF,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,OAAO,MAAM,iBAAiB,CAAC,gBAAgB,EAAE,CAAC;AACpD,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,mBAAmB;IACvC,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,EAAE;QAC1C,OAAO,0BAA0B,CAAC;KACnC;SAAM;QACL,OAAO,MAAM,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;KACtD;AACH,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB;IAC3C,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,EAAE;QAC9C,OAAO,0BAA0B,CAAC;KACnC;SAAM;QACL,OAAO,MAAM,iBAAiB,CAAC,uBAAuB,EAAE,CAAC;KAC1D;AACH,CAAC;AAED,MAAM,0BAA0B,GAAuB;IACrD,OAAO,EAAE,IAAI;IACb,OAAO,EAAE,OAAO;IAChB,WAAW,EAAE,IAAI;IACjB,MAAM,EAAE,gBAAgB,CAAC,OAAO;CACjC,CAAC;AAEF,OAAO,EAAoC,gBAAgB,EAAwB,CAAC","sourcesContent":["import {\n  PermissionExpiration,\n  PermissionResponse,\n  PermissionStatus,\n  EventEmitter,\n  Subscription,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExponentPedometer from './ExponentPedometer';\n\nconst PedometerEventEmitter = new EventEmitter(ExponentPedometer);\n\nexport type PedometerResult = {\n  /**\n   * Number of steps taken between the given dates.\n   */\n  steps: number;\n};\n\n/**\n * Callback function providing event result as an argument.\n */\nexport type PedometerUpdateCallback = (result: PedometerResult) => void;\n\n// @needsAudit\n/**\n * Subscribe to pedometer updates.\n * @param callback A callback that is invoked when new step count data is available. The callback is\n * provided with a single argument that is [`PedometerResult`](#pedometerresult).\n * @return Returns a [`Subscription`](#subscription) that enables you to call\n * `remove()` when you would like to unsubscribe the listener.\n */\nexport function watchStepCount(callback: PedometerUpdateCallback): Subscription {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\n\n// @needsAudit\n/**\n * Get the step count between two dates.\n * @param start A date indicating the start of the range over which to measure steps.\n * @param end A date indicating the end of the range over which to measure steps.\n * @return Returns a promise that fulfills with a [`PedometerResult`](#pedometerresult).\n *\n * As [Apple documentation states](https://developer.apple.com/documentation/coremotion/cmpedometer/1613946-querypedometerdatafromdate?language=objc):\n * > Only the past seven days worth of data is stored and available for you to retrieve. Specifying\n * > a start date that is more than seven days in the past returns only the available data.\n * @platform ios\n */\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  if (!ExponentPedometer.getStepCountAsync) {\n    throw new UnavailabilityError('ExponentPedometer', 'getStepCountAsync');\n  }\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\n/**\n * Returns whether the pedometer is enabled on the device.\n * @return Returns a promise that fulfills with a `boolean`, indicating whether the pedometer is\n * available on this device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await ExponentPedometer.isAvailableAsync();\n}\n\n/**\n * Checks user's permissions for accessing pedometer.\n */\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExponentPedometer.getPermissionsAsync) {\n    return defaultPermissionsResponse;\n  } else {\n    return await ExponentPedometer.getPermissionsAsync();\n  }\n}\n\n/**\n * Asks the user to grant permissions for accessing pedometer.\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExponentPedometer.requestPermissionsAsync) {\n    return defaultPermissionsResponse;\n  } else {\n    return await ExponentPedometer.requestPermissionsAsync();\n  }\n}\n\nconst defaultPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport { Subscription, PermissionResponse, PermissionStatus, PermissionExpiration };\n"]}