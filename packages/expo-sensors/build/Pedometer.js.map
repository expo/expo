{"version":3,"file":"Pedometer.js","sourceRoot":"","sources":["../src/Pedometer.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionExpiration,\n  PermissionResponse,\n  PermissionStatus,\n  type EventSubscription,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport ExponentPedometer from './ExponentPedometer';\n\nexport type PedometerResult = {\n  /**\n   * Number of steps taken between the given dates.\n   */\n  steps: number;\n};\n\nexport type PedometerEvent = {\n  /**\n   * Type of the pedometer event, indicating whether updates have paused or resumed.\n   */\n  type: 'pause' | 'resume';\n  /**\n   * Timestamp (in ms since the Unix epoch) associated with the pedometer event.\n   */\n  date: number;\n};\n\nexport type PedometerEventCallback = (event: PedometerEvent) => void;\n\n/**\n * Callback function providing event result as an argument.\n */\nexport type PedometerUpdateCallback = (result: PedometerResult) => void;\n\n// @needsAudit\n/**\n * Subscribe to pedometer updates.\n * @param callback A callback that is invoked when new step count data is available. The callback is\n * provided with a single argument that is [`PedometerResult`](#pedometerresult).\n * @return Returns a [`Subscription`](#subscription) that enables you to call\n * `remove()` when you would like to unsubscribe the listener.\n *\n * > Pedometer updates will not be delivered while the app is in the background.\n * The `getStepCountAsync` method can be used to get the step count between two dates.\n * On Android, this is subject to Play Services Recording API availability.\n */\nexport function watchStepCount(callback: PedometerUpdateCallback): EventSubscription {\n  if (!ExponentPedometer.addListener) {\n    return {\n      remove() {},\n    };\n  }\n  return ExponentPedometer.addListener('Exponent.pedometerUpdate', callback);\n}\n\n/**\n * Listen for pedometer pause/resume events emitted by the underlying platform.\n * Call {@link startEventUpdatesAsync} to begin receiving events.\n * @platform android ios\n */\nexport function watchEventUpdates(callback: PedometerEventCallback): EventSubscription {\n  if (!ExponentPedometer.addListener) {\n    return {\n      remove() {},\n    };\n  }\n  return ExponentPedometer.addListener('Exponent.pedometerEvent', callback);\n}\n\n/**\n * Check if Recording API is available to track steps.\n * Resolves to `false` on iOS because the platform does not expose a Recording API toggle.\n * @return Returns a promise that fulfills with a `boolean`, indicating whether\n * historical step count data is available via the background Recording API on this device.\n *\n * > On Android, this checks for the availability of the required Play Services components.\n */\nexport function isRecordingAvailableAsync(): Promise<boolean> {\n  if (!ExponentPedometer.isRecordingAvailableAsync) {\n    return Promise.resolve(false);\n  }\n  return ExponentPedometer.isRecordingAvailableAsync();\n}\n\n/**\n * Start pedometer pause/resume event tracking.\n * Resolves to `false` when the platform does not support pedometer events.\n * @platform android ios\n */\nexport async function startEventUpdatesAsync(): Promise<boolean> {\n  if (!ExponentPedometer.startEventUpdates) {\n    return false;\n  }\n  return await ExponentPedometer.startEventUpdates();\n}\n\n/**\n * Stop pedometer pause/resume event tracking.\n * @platform android ios\n */\nexport async function stopEventUpdatesAsync(): Promise<void> {\n  if (!ExponentPedometer.stopEventUpdates) {\n    return;\n  }\n  await ExponentPedometer.stopEventUpdates();\n}\n\n/**\n * Subscribe to pedometer tracking. Step count will be tracked by Google Play Services\n * Recording API, if available, until unsubscribed. Subsequent calls are safe and ignored.\n * @return Returns a promise that fulfills when the subscription is successful.\n *\n * As [Google documentation states](https://developer.android.com/health-and-fitness/guides/recording-api):\n * > `LocalRecordingClient` stores up to 10 days of data.\n * @platform android\n */\nexport async function subscribeRecording(): Promise<void> {\n  if (!ExponentPedometer.subscribeRecording) {\n    return;\n  }\n  return await ExponentPedometer.subscribeRecording();\n}\n\n/**\n * Unsubscribe from pedometer tracking.\n * @return Returns a promise that fulfills when the unsubscription is successful.\n *\n * As [Google documentation states](https://developer.android.com/health-and-fitness/guides/recording-api):\n * > To free up resources, you should make sure to unsubscribe from\n * > the collection of sensor data when your app is no longer in need of it.\n * > Unsubscribing will also reset the historical data that was collected.\n * @platform android\n */\nexport async function unsubscribeRecording(): Promise<void> {\n  if (!ExponentPedometer.unsubscribeRecording) {\n    return;\n  }\n  return await ExponentPedometer.unsubscribeRecording();\n}\n\n// @needsAudit\n/**\n * Get the step count between two dates.\n * @param start A date indicating the start of the range over which to measure steps.\n * @param end A date indicating the end of the range over which to measure steps.\n * @return Returns a promise that fulfills with a [`PedometerResult`](#pedometerresult).\n *\n * As [Apple documentation states](https://developer.apple.com/documentation/coremotion/cmpedometer/1613946-querypedometerdatafromdate?language=objc):\n * > Only the past seven days worth of data is stored and available for you to retrieve. Specifying\n * > a start date that is more than seven days in the past returns only the available data.\n *\n * As [Google documentation states](https://developer.android.com/health-and-fitness/guides/recording-api):\n * > `LocalRecordingClient` stores up to 10 days of data.\n */\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  if (!ExponentPedometer.getStepCountAsync) {\n    throw new UnavailabilityError('ExponentPedometer', 'getStepCountAsync');\n  }\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\n/**\n * Returns whether the pedometer is enabled on the device.\n * @return Returns a promise that fulfills with a `boolean`, indicating whether the pedometer is\n * available on this device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await ExponentPedometer.isAvailableAsync();\n}\n\n/**\n * Checks user's permissions for accessing pedometer.\n */\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExponentPedometer.getPermissionsAsync) {\n    return defaultPermissionsResponse;\n  } else {\n    return await ExponentPedometer.getPermissionsAsync();\n  }\n}\n\n/**\n * Asks the user to grant permissions for accessing pedometer.\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExponentPedometer.requestPermissionsAsync) {\n    return defaultPermissionsResponse;\n  } else {\n    return await ExponentPedometer.requestPermissionsAsync();\n  }\n}\n\nconst defaultPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport {\n  EventSubscription as Subscription,\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n};\n"]}