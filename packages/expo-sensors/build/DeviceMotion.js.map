{"version":3,"file":"DeviceMotion.js","sourceRoot":"","sources":["../src/DeviceMotion.ts"],"names":[],"mappings":"AAAA,OAAO,YAAwC,MAAM,gBAAgB,CAAC;AACtE,OAAO,oBAAoB,MAAM,wBAAwB,CAAC;AA0D1D,MAAM,CAAN,IAAY,uBAKX;AALD,WAAY,uBAAuB;IACjC,6EAAY,CAAA;IACZ,0FAAmB,CAAA;IACnB,mFAAgB,CAAA;IAChB,yFAAmB,CAAA;AACrB,CAAC,EALW,uBAAuB,KAAvB,uBAAuB,QAKlC;AAED,MAAM,OAAO,kBAAmB,SAAQ,YAAqC;IAC3E;;OAEG;IACH,OAAO,GAAW,oBAAoB,CAAC,OAAO,CAAC;IAE/C;;;;;;;;;;;;;OAaG;IACH,KAAK,CAAC,gBAAgB;QACpB,OAAO,KAAK,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAED;;;;;;;OAOG;IACH,WAAW,CAAC,QAA2C;QACrD,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;CACF;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,OAAO,GAAW,oBAAoB,CAAC,OAAO,CAAC;AAE5D,eAAe,IAAI,kBAAkB,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,CAAC","sourcesContent":["import DeviceSensor, { Listener, Subscription } from './DeviceSensor';\nimport ExponentDeviceMotion from './ExponentDeviceMotion';\n\nexport type DeviceMotionMeasurement = {\n  /**\n   * Device acceleration on the three axis as an object with `x`, `y`, `z` keys. Expressed in meters per second squared (m/s^2).\n   */\n  acceleration: null | {\n    x: number;\n    y: number;\n    z: number;\n  };\n  /**\n   * Device acceleration with the effect of gravity on the three axis as an object with `x`, `y`, `z` keys. Expressed in meters per second squared (m/s^2).\n   */\n  accelerationIncludingGravity: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  /**\n   * Device's orientation in space as an object with alpha, beta, gamma keys where alpha is for rotation around Z axis, beta for X axis rotation and gamma for Y axis rotation.\n   */\n  rotation: {\n    alpha: number;\n    beta: number;\n    gamma: number;\n  };\n  /**\n   * Device's rate of rotation in space expressed in degrees per second (deg/s).\n   */\n  rotationRate: null | {\n    /**\n     * Rotation in X axis.\n     */\n    alpha: number;\n    /**\n     * Rotation in Y axis.\n     */\n    beta: number;\n    /**\n     * Rotation in Z axis.\n     */\n    gamma: number;\n  };\n  /**\n   * Interval at which data is obtained from the native platform. Expressed in **milliseconds** (ms).\n   */\n  interval: number;\n  /**\n   * Device orientation based on screen rotation. Value is one of:\n   * - `0` (portrait),\n   * - `90` (right landscape),\n   * - `180` (upside down),\n   * - `-90` (left landscape).\n   */\n  orientation: DeviceMotionOrientation;\n};\n\nexport enum DeviceMotionOrientation {\n  Portrait = 0,\n  RightLandscape = 90,\n  UpsideDown = 180,\n  LeftLandscape = -90,\n}\n\nexport class DeviceMotionSensor extends DeviceSensor<DeviceMotionMeasurement> {\n  /**\n   * Constant value representing standard gravitational acceleration for Earth (`9.80665` m/s^2).\n   */\n  Gravity: number = ExponentDeviceMotion.Gravity;\n\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Returns whether the accelerometer is enabled on the device.\n   *\n   * On mobile web, you must first invoke `DeviceMotion.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module.\n   * If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.\n   *\n   * On **web** this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the **device orientation** API disabled in\n   * **Settings > Safari > Motion & Orientation Access**. Some devices will also not fire if the site isn't hosted with **HTTPS** as `DeviceMotion` is now considered a secure API.\n   * There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.\n   *\n   * @return A promise that resolves to a `boolean` denoting the availability of device motion sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the device motion sensor.\n   *\n   * @param listener A callback that is invoked when a device motion sensor update is available. When invoked,\n   * the listener is provided a single argument that is a `DeviceMotionMeasurement` object.\n   *\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<DeviceMotionMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\n/**\n * Constant value representing standard gravitational acceleration for Earth (`9.80665` m/s^2).\n */\nexport const Gravity: number = ExponentDeviceMotion.Gravity;\n\nexport default new DeviceMotionSensor(ExponentDeviceMotion, 'deviceMotionDidUpdate');\n"]}