{"version":3,"file":"Accelerometer.js","sourceRoot":"","sources":["../src/Accelerometer.ts"],"names":[],"mappings":"AACA,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAC1C,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAsB5D,MAAM,OAAO,mBAAoB,SAAQ,YAAsC;IAC7E;;;;;;;;;;;;;OAaG;IACH,KAAK,CAAC,gBAAgB;QACpB,OAAO,KAAK,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAED;;;;;;;OAOG;IACH,WAAW,CAAC,QAA4C;QACtD,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;CACF;AAED,eAAe,IAAI,mBAAmB,CAAC,qBAAqB,EAAE,wBAAwB,CAAC,CAAC","sourcesContent":["import type { Listener, Subscription } from './DeviceSensor';\nimport DeviceSensor from './DeviceSensor';\nimport ExponentAccelerometer from './ExponentAccelerometer';\n\n/**\n * Each of these keys represents the acceleration along that particular axis in g-force (measured in `g`s).\n *\n * A `g` is a unit of gravitational force equal to that exerted by the earthâ€™s gravitational field (`9.81 m/s^2`).\n */\nexport type AccelerometerMeasurement = {\n  /**\n   * Value of `g`s device reported in X axis.\n   */\n  x: number;\n  /**\n   * Value of `g`s device reported in Y axis.\n   */\n  y: number;\n  /**\n   * Value of `g`s device reported in Z axis.\n   */\n  z: number;\n};\n\nexport class AccelerometerSensor extends DeviceSensor<AccelerometerMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Returns whether the accelerometer is enabled on the device.\n   *\n   * On mobile web, you must first invoke `Accelerometer.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module.\n   * If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.\n   *\n   * On **web** this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the **device orientation** API disabled in\n   * **Settings > Safari > Motion & Orientation Access**. Some devices will also not fire if the site isn't hosted with **HTTPS** as `DeviceMotion` is now considered a secure API.\n   * There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.\n   *\n   * @return A promise that resolves to a `boolean` denoting the availability of the accelerometer.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the accelerometer.\n   *\n   * @param listener A callback that is invoked when an accelerometer update is available. When invoked,\n   * the listener is provided a single argument that is an `AccelerometerMeasurement` object.\n   *\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<AccelerometerMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new AccelerometerSensor(ExponentAccelerometer, 'accelerometerDidUpdate');\n"]}