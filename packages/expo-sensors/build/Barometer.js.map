{"version":3,"file":"Barometer.js","sourceRoot":"","sources":["../src/Barometer.ts"],"names":[],"mappings":"AACA,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAC1C,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAiB5C;;;GAGG;AACH,MAAM,OAAO,eAAgB,SAAQ,YAAkC;IACrE;;;;;OAKG;IACH,KAAK,CAAC,gBAAgB;QACpB,OAAO,KAAK,CAAC,gBAAgB,EAAE,CAAC;IAClC,CAAC;IAED;;;;;;;;;;;OAWG;IACH,WAAW,CAAC,QAAwC;QAClD,OAAO,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;CACF;AAED,eAAe,IAAI,eAAe,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC","sourcesContent":["import type { Listener, Subscription } from './DeviceSensor';\nimport DeviceSensor from './DeviceSensor';\nimport ExpoBarometer from './ExpoBarometer';\n\n/**\n * The altitude data returned from the native sensors.\n */\nexport type BarometerMeasurement = {\n  /**\n   * Measurement in hectopascals (`hPa`).\n   */\n  pressure: number;\n  /**\n   * Measurement in meters (`m`).\n   * @platform ios\n   */\n  relativeAltitude?: number;\n};\n\n/**\n * @platform android\n * @platform ios\n */\nexport class BarometerSensor extends DeviceSensor<BarometerMeasurement> {\n  /**\n   * > **info** You should always check the sensor availability before attempting to use it.\n   *\n   * Check the availability of the device barometer. Requires at least Android 2.3 (API Level 9) and iOS 8.\n   * @return A promise that resolves to a `boolean` denoting the availability of the sensor.\n   */\n  async isAvailableAsync(): Promise<boolean> {\n    return super.isAvailableAsync();\n  }\n\n  /**\n   * Subscribe for updates to the barometer.\n   * @param listener A callback that is invoked when a barometer update is available. When invoked, the listener is provided with a single argument that is `BarometerMeasurement`.\n   *\n   * @example\n   * ```ts\n   * const subscription = Barometer.addListener(({ pressure, relativeAltitude }) => {\n   *   console.log({ pressure, relativeAltitude });\n   * });\n   * ```\n   * @return A subscription that you can call `remove()` on when you would like to unsubscribe the listener.\n   */\n  addListener(listener: Listener<BarometerMeasurement>): Subscription {\n    return super.addListener(listener);\n  }\n}\n\nexport default new BarometerSensor(ExpoBarometer, 'barometerDidUpdate');\n"]}