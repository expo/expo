{"version":3,"file":"mockgen.js","sourceRoot":"","sources":["../src/mockgen.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n'use strict';\n\nimport fs from 'fs';\nimport path from 'path';\nimport * as prettier from 'prettier';\nimport ts from 'typescript';\n\nimport { Closure, ClosureTypes, OutputModuleDefinition } from './types';\n\nconst directoryPath = process.cwd();\n\nfunction maybeUnwrapSwiftArray(type: string) {\n  const isArray = type.startsWith('[') && type.endsWith(']');\n  if (!isArray) {\n    return type;\n  }\n  const innerType = type.substring(1, type.length - 1);\n  return innerType;\n}\n\nfunction isSwiftArray(type: string) {\n  return type.startsWith('[') && type.endsWith(']');\n}\n\nfunction mapSwiftTypeToTsType(\n  type: string\n): ts.KeywordTypeNode | ts.TypeReferenceNode | ts.ArrayTypeNode {\n  if (!type) {\n    return ts.factory.createKeywordTypeNode(ts.SyntaxKind.VoidKeyword);\n  }\n  if (isSwiftArray(type)) {\n    return ts.factory.createArrayTypeNode(mapSwiftTypeToTsType(maybeUnwrapSwiftArray(type)));\n  }\n  switch (type) {\n    case 'unknown':\n      return ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword);\n    case 'String':\n      return ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword);\n    case 'Bool':\n      return ts.factory.createKeywordTypeNode(ts.SyntaxKind.BooleanKeyword);\n    case 'Int':\n    case 'Float':\n    case 'Double':\n      return ts.factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword);\n    default:\n      return ts.factory.createTypeReferenceNode(type);\n  }\n}\n\nfunction getMockReturnStatements(\n  tsReturnType: ts.KeywordTypeNode | ts.TypeReferenceNode | ts.ArrayTypeNode\n) {\n  if (!tsReturnType) {\n    return [];\n  }\n  switch (tsReturnType.kind) {\n    case ts.SyntaxKind.AnyKeyword:\n      return [ts.factory.createReturnStatement(ts.factory.createNull())];\n    case ts.SyntaxKind.StringKeyword:\n      return [ts.factory.createReturnStatement(ts.factory.createStringLiteral(''))];\n    case ts.SyntaxKind.BooleanKeyword:\n      return [ts.factory.createReturnStatement(ts.factory.createFalse())];\n    case ts.SyntaxKind.NumberKeyword:\n      return [ts.factory.createReturnStatement(ts.factory.createNumericLiteral('0'))];\n    case ts.SyntaxKind.VoidKeyword:\n      return [];\n    case ts.SyntaxKind.ArrayType:\n      return [ts.factory.createReturnStatement(ts.factory.createArrayLiteralExpression())];\n    case ts.SyntaxKind.TypeReference:\n      // can be improved by expanding a set of default mocks\n      return [\n        ts.addSyntheticTrailingComment(\n          ts.factory.createReturnStatement(ts.factory.createNull()),\n          ts.SyntaxKind.SingleLineCommentTrivia,\n          ` TODO: Replace with mock for value of type ${\n            (tsReturnType.typeName as any)?.escapedText ?? ''\n          }.`\n        ),\n      ];\n  }\n  return [];\n}\n\nfunction wrapWithAsync(tsType: ts.TypeNode) {\n  return ts.factory.createTypeReferenceNode('Promise', [tsType]);\n}\n\nfunction getMockedFunctions(functions: Closure[], async = false) {\n  return functions.map((fnStructure) => {\n    const name = ts.factory.createIdentifier(fnStructure.name);\n    const returnType = mapSwiftTypeToTsType(fnStructure.types?.returnType);\n    const func = ts.factory.createFunctionDeclaration(\n      [\n        ts.factory.createToken(ts.SyntaxKind.ExportKeyword),\n        async ? ts.factory.createToken(ts.SyntaxKind.AsyncKeyword) : undefined,\n      ].filter((f) => !!f) as ts.ModifierToken<any>[],\n      undefined,\n      name,\n      undefined,\n      fnStructure?.types?.parameters.map((p) =>\n        ts.factory.createParameterDeclaration(\n          undefined,\n          undefined,\n          p.name,\n          undefined,\n          mapSwiftTypeToTsType(p.typename),\n          undefined\n        )\n      ) ?? [],\n      async ? wrapWithAsync(returnType) : returnType,\n      ts.factory.createBlock(getMockReturnStatements(returnType), true)\n    );\n    return func;\n  });\n}\n\nfunction getTypesToMock(module: OutputModuleDefinition) {\n  const foundTypes: string[] = [];\n\n  Object.values(module)\n    .flatMap((t) => (Array.isArray(t) ? t?.map((t2) => (t2 as Closure)?.types) : [] ?? []))\n    .forEach((types: ClosureTypes | null) => {\n      types?.parameters.forEach(({ typename }) => {\n        foundTypes.push(maybeUnwrapSwiftArray(typename));\n      });\n      types?.returnType && foundTypes.push(maybeUnwrapSwiftArray(types.returnType));\n    });\n  return new Set(\n    foundTypes.filter((ft) => mapSwiftTypeToTsType(ft).kind === ts.SyntaxKind.TypeReference)\n  );\n}\n\nfunction getMockedTypes(types: Set<string>) {\n  return Array.from(types).map((type) => {\n    const name = ts.factory.createIdentifier(type);\n    const typeAlias = ts.factory.createTypeAliasDeclaration(\n      [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],\n      name,\n      undefined,\n      ts.factory.createKeywordTypeNode(ts.SyntaxKind.AnyKeyword)\n    );\n    return typeAlias;\n  });\n}\n\nconst prefix = `\nAutomatically generated by expo-modules-test-core.\n\nThis autogenerated file provides a mock for native Expo module,\nand works out of the box with the expo jest preset.\n`;\nfunction getPrefix() {\n  return [ts.factory.createJSDocComment(prefix)];\n}\n\nfunction getMockForModule(module: OutputModuleDefinition) {\n  return ([] as (ts.TypeAliasDeclaration | ts.FunctionDeclaration | ts.JSDoc)[]).concat(\n    getMockedTypes(getTypesToMock(module)),\n    getPrefix(),\n    getMockedFunctions(module.functions),\n    getMockedFunctions(module.asyncFunctions, true)\n  );\n}\n\nexport async function generateMocks(modules: OutputModuleDefinition[]) {\n  const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });\n\n  for (const m of modules) {\n    const resultFile = ts.createSourceFile(\n      m.name + '.ts',\n      '',\n      ts.ScriptTarget.Latest,\n      false,\n      ts.ScriptKind.TSX\n    );\n    fs.mkdirSync(path.join(directoryPath, 'mocks'), { recursive: true });\n    const filePath = path.join(directoryPath, 'mocks', m.name + '.ts');\n    // get ts nodearray from getMockForModule(m) array\n    const mock = ts.factory.createNodeArray(getMockForModule(m));\n    const printedTs = printer.printList(ts.ListFormat.MultiLine, mock, resultFile);\n    const compiledJs = ts.transpileModule(printedTs, {\n      compilerOptions: {\n        module: ts.ModuleKind.ESNext,\n        target: ts.ScriptTarget.ESNext,\n      },\n    }).outputText;\n    const prettyJs = await prettier.format(compiledJs, {\n      parser: 'babel',\n      tabWidth: 2,\n      singleQuote: true,\n    });\n    fs.writeFileSync(filePath, prettyJs);\n  }\n}\n"]}