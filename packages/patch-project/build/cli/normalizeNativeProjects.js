"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revertNormalizeNativeProjectsAsync = exports.normalizeNativeProjectsAsync = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
/**
 * Normalize the native projects to minimize the diff between prebuilds.
 */
async function normalizeNativeProjectsAsync(params) {
    if (params.platform === 'ios') {
        return await normalizeIosProjectsAsync(params);
    }
    return {};
}
exports.normalizeNativeProjectsAsync = normalizeNativeProjectsAsync;
/**
 * Revert the changes made by `normalizeNativeProjectsAsync()`.
 */
async function revertNormalizeNativeProjectsAsync(backupFileMappings) {
    await Promise.all(Object.entries(backupFileMappings).map(([originalPath, backupPath]) => promises_1.default.copyFile(backupPath, originalPath)));
}
exports.revertNormalizeNativeProjectsAsync = revertNormalizeNativeProjectsAsync;
/**
 * `normalizeNativeProjectsAsync()` implementation for iOS.
 */
async function normalizeIosProjectsAsync({ projectRoot, workingDirectories, backup, }) {
    const backupFileMappings = {};
    // Normalize the pbxproj file since it has some dynamic IDs that change between prebuilds.
    const xcodeProjectPath = config_plugins_1.IOSConfig.Paths.getPBXProjectPath(projectRoot);
    const xcodeProjectPathBackup = path_1.default.join(workingDirectories.tmpDir, path_1.default.basename(xcodeProjectPath));
    if (backup) {
        await promises_1.default.copyFile(xcodeProjectPath, xcodeProjectPathBackup);
        backupFileMappings[xcodeProjectPath] = xcodeProjectPathBackup;
    }
    await normalizeXcodeProjectAsync(projectRoot, xcodeProjectPath);
    return backupFileMappings;
}
/**
 * Normalize the Xcode project file by removing some dynamic values.
 * - Remove the `noop-file.swift` file that is generated by the prebuild process.
 * - Remove the Swift bridging header file that is generated by the prebuild process.
 * - Remove the `ExpoModulesProvider.swift` that is generated by expo-modules-autolinking and `pod install`.
 * - Remove the `[Expo] Configure project` build phase that is generated by expo-modules-autolinking and `pod install`.
 * - Remove the CocoaPods build phases that are generated by `pod install`.
 */
async function normalizeXcodeProjectAsync(projectRoot, xcodeProjectPath) {
    const projectName = config_plugins_1.IOSConfig.XcodeUtils.getProjectName(projectRoot);
    const project = config_plugins_1.IOSConfig.XcodeUtils.getPbxproj(projectRoot);
    const mainAppGroup = findXcodeProjectMainAppGroupKey(project, projectName);
    project.removeSourceFile('noop-file.swift', null, mainAppGroup);
    project.removeSourceFile('ExpoModulesProvider.swift', null, mainAppGroup);
    project.removeSourceFile(`${projectName}-Bridging-Header.h`, null, mainAppGroup);
    removeXcodeProjectBuildPhase(project, '[Expo] Configure project');
    removeXcodeProjectBuildPhase(project, '[CP] Embed Pods Frameworks');
    removeXcodeProjectBuildPhase(project, '[CP] Check Pods Manifest.lock');
    removeXcodeProjectBuildPhase(project, '[CP] Copy Pods Resources');
    await promises_1.default.writeFile(xcodeProjectPath, project.writeSync(), 'utf8');
}
/**
 * Find the main app group key in the Xcode project.
 */
function findXcodeProjectMainAppGroupKey(project, projectName) {
    const targetGroupKey = project.findPBXGroupKey({ name: projectName });
    // Sanity check
    const { firstProject } = project.getFirstProject();
    const mainGroup = project.getPBXGroupByKey(firstProject.mainGroup);
    // @ts-expect-error
    const targetGroupKey2 = mainGroup?.children.find(({ comment }) => comment === projectName)?.value;
    if (!targetGroupKey || targetGroupKey !== targetGroupKey2) {
        throw new Error('Unable to find the main app group key');
    }
    return targetGroupKey;
}
/**
 * Remove a shell script build phase from the Xcode project.
 */
function removeXcodeProjectBuildPhase(project, name) {
    const [, nativeTarget] = config_plugins_1.IOSConfig.Target.findFirstNativeTarget(project);
    // @ts-expect-error
    const index = nativeTarget.buildPhases.findIndex((item) => item.comment === name);
    if (index < 0) {
        return;
    }
    const buildPhaseId = nativeTarget.buildPhases[index].value;
    nativeTarget.buildPhases.splice(index, 1);
    const buildPhases = project.getPBXObject('PBXShellScriptBuildPhase');
    delete buildPhases[buildPhaseId];
    delete buildPhases[`${buildPhaseId}_comment`];
}
//# sourceMappingURL=normalizeNativeProjects.js.map