{"version":3,"file":"ScreenCapture.js","sourceRoot":"","sources":["../src/ScreenCapture.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  UnavailabilityError,\n  PermissionResponse,\n  PermissionStatus,\n  createPermissionHook,\n  PermissionHookOptions,\n  EventSubscription,\n} from 'expo-modules-core';\nimport { useEffect } from 'react';\n\nimport ExpoScreenCapture from './ExpoScreenCapture';\n\nconst activeTags: Set<string> = new Set();\n\nconst onScreenshotEventName = 'onScreenshot';\n\n// @needsAudit\n/**\n * Returns whether the Screen Capture API is available on the current device.\n *\n * @returns A promise that resolves to a `boolean` indicating whether the Screen Capture API is available on the current\n * device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoScreenCapture.preventScreenCapture && !!ExpoScreenCapture.allowScreenCapture;\n}\n\n// @needsAudit\n/**\n * Prevents screenshots and screen recordings until `allowScreenCaptureAsync` is called or the app is restarted. If you are\n * already preventing screen capture, this method does nothing (unless you pass a new and unique `key`).\n *\n * > On iOS, this prevents screen recordings and screenshots, and is only available on iOS 11+ (recordings) and iOS 13+ (screenshots). On older\n * iOS versions, this method does nothing.\n *\n * @param key Optional. If provided, this will help prevent multiple instances of the `preventScreenCaptureAsync`\n * and `allowScreenCaptureAsync` methods (and `usePreventScreenCapture` hook) from conflicting with each other.\n * When using multiple keys, you'll have to re-allow each one in order to re-enable screen capturing.\n *\n * @platform android\n * @platform ios\n */\nexport async function preventScreenCaptureAsync(key: string = 'default'): Promise<void> {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'preventScreenCaptureAsync');\n  }\n\n  if (!activeTags.has(key)) {\n    activeTags.add(key);\n    await ExpoScreenCapture.preventScreenCapture();\n  }\n}\n\n// @needsAudit\n/**\n * Re-allows the user to screen record or screenshot your app. If you haven't called\n * `preventScreenCapture()` yet, this method does nothing.\n *\n * @param key This will prevent multiple instances of the `preventScreenCaptureAsync` and\n * `allowScreenCaptureAsync` methods from conflicting with each other. If provided, the value must\n * be the same as the key passed to `preventScreenCaptureAsync` in order to re-enable screen\n * capturing.\n */\nexport async function allowScreenCaptureAsync(key: string = 'default'): Promise<void> {\n  if (!ExpoScreenCapture.preventScreenCapture) {\n    throw new UnavailabilityError('ScreenCapture', 'allowScreenCaptureAsync');\n  }\n\n  activeTags.delete(key);\n  if (activeTags.size === 0) {\n    await ExpoScreenCapture.allowScreenCapture();\n  }\n}\n\n// @needsAudit\n/**\n * A React hook to prevent screen capturing for as long as the owner component is mounted.\n *\n * @param key If provided, this will prevent multiple instances of this hook or the\n * `preventScreenCaptureAsync` and `allowScreenCaptureAsync` methods from conflicting with each other.\n * This argument is useful if you have multiple active components using the `allowScreenCaptureAsync`\n * hook.\n */\nexport function usePreventScreenCapture(key: string = 'default'): void {\n  useEffect(() => {\n    preventScreenCaptureAsync(key);\n\n    return () => {\n      allowScreenCaptureAsync(key);\n    };\n  }, [key]);\n}\n\n// @needsAudit\n/**\n * Enables a privacy protection blur overlay that hides sensitive content when the app is not in focus.\n * The overlay applies a customizable blur effect when the app is in the app switcher, background, or during interruptions\n * (calls, Siri, Control Center, etc.), and automatically removes it when the app becomes active again.\n *\n * This provides visual privacy protection by preventing sensitive app content from being visible in:\n * - App switcher previews\n * - Background app snapshots\n * - Screenshots taken during inactive states\n *\n * For Android, app switcher protection is automatically provided by `preventScreenCaptureAsync()`\n * using the FLAG_SECURE window flag, which shows a blank screen in the recent apps preview.\n *\n * @param blurIntensity The intensity of the blur effect, from 0.0 (no blur) to 1.0 (maximum blur). Default is 0.5.\n *\n * @platform ios\n *\n */\nexport async function enableAppSwitcherProtectionAsync(blurIntensity: number = 0.5): Promise<void> {\n  if (!ExpoScreenCapture.enableAppSwitcherProtection) {\n    throw new UnavailabilityError('ScreenCapture', 'enableAppSwitcherProtectionAsync');\n  }\n\n  await ExpoScreenCapture.enableAppSwitcherProtection(blurIntensity);\n}\n\n// @needsAudit\n/**\n * Disables the privacy protection overlay that was previously enabled with `enableAppSwitcherProtectionAsync`.\n *\n * @platform ios\n */\nexport async function disableAppSwitcherProtectionAsync(): Promise<void> {\n  if (!ExpoScreenCapture.disableAppSwitcherProtection) {\n    throw new UnavailabilityError('ScreenCapture', 'disableAppSwitcherProtectionAsync');\n  }\n\n  await ExpoScreenCapture.disableAppSwitcherProtection();\n}\n\n// @needsAudit\n/**\n * Adds a listener that will fire whenever the user takes a screenshot while the app is foregrounded.\n *\n * Permission requirements for this method depend on your device's Android version:\n * - **Android 14+**: Uses modern `DETECT_SCREEN_CAPTURE` permission (no runtime permission needed)\n * - **Android 13 and below**: No permissions required by default (screenshot detection disabled)\n * - **Legacy mode**: Can be enabled with `useLegacyPermissions: true` for full compatibility\n *\n * > **Warning**: Legacy mode requests broad permissions (`READ_EXTERNAL_STORAGE`, `READ_MEDIA_IMAGES`)\n * > that may cause Google Play Store rejection.\n *\n * You can request the appropriate permissions by using [`MediaLibrary.requestPermissionsAsync()`](./media-library/#medialibraryrequestpermissionsasync).\n *\n * @param listener The function that will be executed when the user takes a screenshot.\n * This function accepts no arguments.\n *\n * @return A `Subscription` object that you can use to unregister the listener, either by calling\n * `remove()` or passing it to `removeScreenshotListener`.\n */\nexport function addScreenshotListener(listener: () => void): EventSubscription {\n  return ExpoScreenCapture.addListener(onScreenshotEventName, listener);\n}\n\n// @needsAudit\n/**\n * Removes the subscription you provide, so that you are no longer listening for screenshots.\n * You can also call `remove()` on that `Subscription` object.\n *\n * @param subscription Subscription returned by `addScreenshotListener`.\n *\n * @example\n * ```ts\n * let mySubscription = addScreenshotListener(() => {\n *   console.log(\"You took a screenshot!\");\n * });\n * ...\n * mySubscription.remove();\n * // OR\n * removeScreenshotListener(mySubscription);\n * ```\n */\nexport function removeScreenshotListener(subscription: EventSubscription) {\n  subscription.remove();\n}\n\n// @needsAudit\n/**\n * A React hook that listens for screenshots taken while the component is mounted.\n *\n * @param listener A function that will be called whenever a screenshot is detected.\n *\n * This hook automatically starts listening when the component mounts, and stops\n * listening when the component unmounts.\n */\nexport function useScreenshotListener(listener: () => void) {\n  useEffect(() => {\n    const subscription = addScreenshotListener(listener);\n\n    return () => {\n      removeScreenshotListener(subscription);\n    };\n  }, [listener]);\n}\n\n/**\n * Checks user's permissions for detecting when a screenshot is taken.\n * > Only Android requires additional permissions to detect screenshots. On iOS devices, this method will always resolve to a `granted` permission response.\n *\n * @param useLegacyPermissions Whether to use legacy permissions for Android 13 and below.\n *   - `false` (default): Uses only modern `DETECT_SCREEN_CAPTURE` permission (Android 14+ only)\n *   - `true`: Uses `READ_EXTERNAL_STORAGE` and `READ_MEDIA_IMAGES` for full compatibility\n *\n * > **Warning**: Setting `useLegacyPermissions: true` requests broad permissions that may cause Google Play Store rejection.\n * @return A promise that resolves to a [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function getPermissionsAsync(\n  useLegacyPermissions?: boolean\n): Promise<PermissionResponse> {\n  if (ExpoScreenCapture.getPermissionsAsync) {\n    return ExpoScreenCapture.getPermissionsAsync(useLegacyPermissions);\n  }\n  return defaultPermissionsResponse;\n}\n\n/**\n * Asks the user to grant permissions necessary for detecting when a screenshot is taken.\n * > Only Android requires additional permissions to detect screenshots. On iOS devices, this method will always resolve to a `granted` permission response.\n *\n * @param useLegacyPermissions Whether to use legacy permissions for Android 13 and below.\n *   - `false` (default): Uses only modern `DETECT_SCREEN_CAPTURE` permission (Android 14+ only)\n *   - `true`: Uses `READ_EXTERNAL_STORAGE` and `READ_MEDIA_IMAGES` for full compatibility\n *\n * > **Warning**: Setting `useLegacyPermissions: true` requests broad permissions that may cause Google Play Store rejection.\n * @return A promise that resolves to a [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function requestPermissionsAsync(\n  useLegacyPermissions?: boolean\n): Promise<PermissionResponse> {\n  if (ExpoScreenCapture.requestPermissionsAsync) {\n    return ExpoScreenCapture.requestPermissionsAsync(useLegacyPermissions);\n  }\n  return defaultPermissionsResponse;\n}\n\n/**\n * Check or request permissions necessary for detecting when a screenshot is taken.\n * This uses both [`requestPermissionsAsync`](#screencapturerequestpermissionsasync) and [`getPermissionsAsync`](#screencapturegetpermissionsasync) to interact with the permissions.\n *\n * @example\n * ```js\n * const [status, requestPermission] = ScreenCapture.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: (options?: { useLegacyPermissions?: boolean }) =>\n    getPermissionsAsync(options?.useLegacyPermissions),\n  requestMethod: (options?: { useLegacyPermissions?: boolean }) =>\n    requestPermissionsAsync(options?.useLegacyPermissions),\n});\n\nconst defaultPermissionsResponse: PermissionResponse = {\n  granted: true,\n  expires: 'never',\n  canAskAgain: true,\n  status: PermissionStatus.GRANTED,\n};\n\nexport {\n  EventSubscription as Subscription,\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n};\n"]}