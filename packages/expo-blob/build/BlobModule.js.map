{"version":3,"file":"BlobModule.js","sourceRoot":"","sources":["../src/BlobModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,mBAAmB,EAAgB,MAAM,MAAM,CAAC;AAGvE,OAAO,EAAE,qBAAqB,EAAE,MAAM,SAAS,CAAC;AAehD,MAAM,gBAAgB,GAAG,mBAAmB,CAAiB,UAAU,CAAC,CAAC;AAEzE,MAAM,OAAO,QAAS,SAAQ,gBAAgB,CAAC,IAAI;IACjD,YAAY,SAAiB,EAAE,OAAyB;QACtD,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,KAAK,CAAC,KAAc,EAAE,GAAY,EAAE,WAAoB;QACtD,MAAM,cAAc,GAAG,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,cAAc,CAAC,CAAC;QAC3D,MAAM,CAAC,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;QACtD,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,MAAM;QACJ,MAAM,IAAI,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC9B,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;QAClC,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,OAAO,IAAI,cAAc,CAAa;YACpC,IAAI,CAAC,UAAU;gBACb,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;oBAC1B,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC3C,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;gBACxB,CAAC;qBAAM,CAAC;oBACN,UAAU,CAAC,KAAK,EAAE,CAAC;gBACrB,CAAC;YACH,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,KAAK;aACT,KAAK,EAAE;aACP,IAAI,CAAC,CAAC,KAAiB,EAAE,EAAE,CAC1B,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC,CAC1E,CAAC;IACN,CAAC;CACF","sourcesContent":["import { NativeModule, requireNativeModule, SharedObject } from 'expo';\n\nimport { Blob, BlobPart } from './BlobModule.types';\nimport { normalizedContentType } from './utils';\ndeclare class NativeBlob extends SharedObject {\n  readonly size: number;\n  readonly type: string;\n  constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);\n  slice(start?: number, end?: number, contentType?: string): ExpoBlob;\n  bytes(): Promise<Uint8Array>;\n  text(): Promise<string>;\n  syncText(): string;\n}\n\ndeclare class ExpoBlobModule extends NativeModule {\n  Blob: typeof NativeBlob;\n}\n\nconst NativeBlobModule = requireNativeModule<ExpoBlobModule>('ExpoBlob');\n\nexport class ExpoBlob extends NativeBlobModule.Blob implements Blob {\n  constructor(blobParts?: any[], options?: BlobPropertyBag) {\n    super(blobParts?.flat(Infinity) ?? [], options);\n  }\n\n  slice(start?: number, end?: number, contentType?: string): ExpoBlob {\n    const normalizedType = normalizedContentType(contentType);\n    const slicedBlob = super.slice(start, end, normalizedType);\n    Object.setPrototypeOf(slicedBlob, ExpoBlob.prototype);\n    return slicedBlob;\n  }\n\n  stream(): ReadableStream {\n    const text = super.syncText();\n    const encoder = new TextEncoder();\n    const uint8 = encoder.encode(text);\n    let offset = 0;\n    return new ReadableStream<Uint8Array>({\n      pull(controller) {\n        if (offset < uint8.length) {\n          controller.enqueue(uint8.subarray(offset));\n          offset = uint8.length;\n        } else {\n          controller.close();\n        }\n      },\n    });\n  }\n\n  async arrayBuffer(): Promise<ArrayBufferLike> {\n    return super\n      .bytes()\n      .then((bytes: Uint8Array) =>\n        bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength)\n      );\n  }\n}\n"]}