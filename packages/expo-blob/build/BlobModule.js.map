{"version":3,"file":"BlobModule.js","sourceRoot":"","sources":["../src/BlobModule.ts"],"names":[],"mappings":"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","sourcesContent":["import { requireNativeModule } from 'expo';\n\nimport { Blob, ExpoBlobModule } from './BlobModule.types';\nimport {\n  DEFAULT_CHUNK_SIZE,\n  isTypedArray,\n  normalizedContentType,\n  preprocessOptions,\n} from './utils';\n\nconst NativeBlobModule = requireNativeModule<ExpoBlobModule>('ExpoBlob');\n\nexport class ExpoBlob extends NativeBlobModule.Blob implements Blob {\n  constructor(blobParts?: any[] | Iterable<any>, options?: BlobPropertyBag) {\n    const inputMapping = (v: any) => {\n      if (v instanceof ArrayBuffer) {\n        return new Uint8Array(v);\n      }\n      if (v instanceof ExpoBlob || isTypedArray(v)) {\n        return v;\n      }\n      return String(v);\n    };\n\n    const bps: any[] = [];\n\n    if (blobParts === undefined) {\n      super([], preprocessOptions(options));\n    } else if (blobParts === null || typeof blobParts !== 'object') {\n      throw TypeError();\n    } else {\n      for (const bp of blobParts) {\n        bps.push(inputMapping(bp));\n      }\n      super(bps, preprocessOptions(options));\n    }\n  }\n\n  slice(start?: number, end?: number, contentType?: string): ExpoBlob {\n    const normalizedType = normalizedContentType(contentType);\n    const slicedBlob = super.slice(start, end, normalizedType);\n    Object.setPrototypeOf(slicedBlob, ExpoBlob.prototype);\n    return slicedBlob;\n  }\n\n  stream(): ReadableStream {\n    const self = this;\n    let offset = 0;\n    let bytesPromise: Promise<Uint8Array> | null = null;\n\n    return new ReadableStream({\n      type: 'bytes',\n      async pull(controller: any) {\n        if (!bytesPromise) {\n          bytesPromise = self.bytes();\n        }\n        const bytes = await bytesPromise;\n        if (offset >= bytes.length) {\n          controller.close();\n          return;\n        }\n\n        if (controller.byobRequest?.view) {\n          const view = controller.byobRequest.view;\n          const end = Math.min(offset + view.byteLength, bytes.length);\n          const chunk = bytes.subarray(offset, end);\n          view.set(chunk, 0);\n          controller.byobRequest.respond(chunk.length);\n          offset = end;\n          if (offset >= bytes.length) {\n            controller.close();\n          }\n          return;\n        }\n\n        const chunkSize = DEFAULT_CHUNK_SIZE;\n        const end = Math.min(offset + chunkSize, bytes.length);\n        controller.enqueue(bytes.subarray(offset, end));\n        offset = end;\n      },\n    });\n  }\n\n  async arrayBuffer(): Promise<ArrayBufferLike> {\n    return super\n      .bytes()\n      .then((bytes: Uint8Array) =>\n        bytes.buffer.slice(bytes.byteOffset, bytes.byteOffset + bytes.byteLength)\n      );\n  }\n\n  toString(): string {\n    return '[object Blob]';\n  }\n\n  // Changed the length property to match that of the default js implementation\n  static get length() {\n    return 0;\n  }\n}\n"]}