{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,qBAAqB,CAAC,IAAa;IACjD,MAAM,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC;IACtB,MAAM,cAAc,GAAG,gBAAgB,CAAC;IACxC,IAAI,IAAI,KAAK,SAAS,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC;QAAE,OAAO,EAAE,CAAC;IAC/D,OAAO,GAAG,CAAC,WAAW,EAAE,CAAC;AAC3B,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,UAAU,YAAY,CAAC,GAAQ;IACnC,OAAO,CACL,GAAG,YAAY,SAAS;QACxB,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,aAAa;QAC5B,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,WAAW;QAC1B,GAAG,YAAY,WAAW;QAC1B,GAAG,YAAY,cAAc;QAC7B,GAAG,YAAY,YAAY;QAC3B,GAAG,YAAY,YAAY,CAC5B,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,OAAyB,EAA+B,EAAE;IAC1F,IAAI,CAAC,OAAO;QAAE,OAAO,OAAO,CAAC;IAC7B,IAAI,CAAC,CAAC,OAAO,YAAY,MAAM,CAAC,EAAE,CAAC;QACjC,MAAM,SAAS,CAAC,6DAA6D,GAAG,OAAO,OAAO,CAAC,CAAC;IAClG,CAAC;IAED,IAAI,OAAO,GAAuB,OAAO,CAAC,OAAO,CAAC;IAClD,IAAI,IAAI,GAAuB,OAAO,CAAC,IAAI,CAAC;IAC5C,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;QAC3C,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IACD,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;QACrC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IACD,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,QAAQ,IAAI,OAAO,KAAK,aAAa,EAAE,CAAC;QAC/E,MAAM,SAAS,CACb,YAAY;YACV,OAAO;YACP,wFAAwF,CAC3F,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO;QACP,IAAI,EAAE,qBAAqB,CAAC,IAAI,CAAC;KAClC,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,MAAM,CAAC","sourcesContent":["/**\n * Normalizes the content type string for a `Blob`.\n *\n * Returns the lowercased content type if it is valid, or an empty string otherwise.\n *\n * A valid content type:\n *  - Is not undefined\n *  - Contains only printable ASCII characters (0x20â€“0x7E)\n *\n * If any of these conditions are not met, returns an empty string to indicate an invalid or unsafe content type.\n *\n * @param type The content type string to normalize.\n * @returns The normalized (lowercased) content type, or an empty string if invalid.\n */\nexport function normalizedContentType(type?: string): string {\n  const str = '' + type;\n  const asciiPrintable = /^[\\x20-\\x7E]+$/;\n  if (type === undefined || !asciiPrintable.test(str)) return '';\n  return str.toLowerCase();\n}\n\n/**\n * Checks if the given object is a JavaScript `TypedArray`.\n *\n * This function detects all standard `TypedArray` types including:\n * - `Int8Array`, `Int16Array`, `Int32Array`, `BigInt64Array`\n * - `Uint8Array`, `Uint16Array`, `Uint32Array`, `BigUint64Array`\n * - `Float32Array`, `Float64Array`\n *\n * @param obj The object to check.\n * @returns `true` if the object is a TypedArray, `false` otherwise.\n */\nexport function isTypedArray(obj: any): boolean {\n  return (\n    obj instanceof Int8Array ||\n    obj instanceof Int16Array ||\n    obj instanceof Int32Array ||\n    obj instanceof BigInt64Array ||\n    obj instanceof Uint8Array ||\n    obj instanceof Uint16Array ||\n    obj instanceof Uint32Array ||\n    obj instanceof BigUint64Array ||\n    obj instanceof Float32Array ||\n    obj instanceof Float64Array\n  );\n}\n\n/**\n * Processes the options object if defined and not null.\n * The function coerces `options.type` value and rest of `options` to `string` (if they are defined objects).\n * `TypeError` is thrown when the options is not an object or `options.endings` value is invalid.\n *\n * @param options The `BlobPropertyBag` object to preprocess.\n * @returns `BlobPropertyBag` object.\n */\nexport const preprocessOptions = (options?: BlobPropertyBag): BlobPropertyBag | undefined => {\n  if (!options) return options;\n  if (!(options instanceof Object)) {\n    throw TypeError(\"The 'options' argument must be a dictionary. Received type \" + typeof options);\n  }\n\n  let endings: string | undefined = options.endings;\n  let type: string | undefined = options.type;\n  if (endings && typeof endings === 'object') {\n    endings = String(endings);\n  }\n  if (type && typeof type === 'object') {\n    type = String(type);\n  }\n  if (endings !== undefined && endings !== 'native' && endings !== 'transparent') {\n    throw TypeError(\n      \"Provided '\" +\n        endings +\n        \"' endings value is not a valid enum value of EndingType, try 'native' or 'transparent'\"\n    );\n  }\n\n  return {\n    endings,\n    type: normalizedContentType(type),\n  };\n};\n\n/**\n * The default chunk size (64 kB) used for binary streaming operations.\n *\n * This value is not specified by the W3C File API specification or MDN documentation.\n * It is chosen as a widely adopted industry standard that balances performance\n * (by reducing the number of read operations) and memory usage (by avoiding excessively large buffers).\n * This value is commonly used in Node.js streams and V8 engine implementations.\n *\n * @see [Node.js commit: set default chunk size to 64kB](https://github.com/nodejs/node/commit/1abff073921bcb0631602032aef0135bccfaee0d#diff-b290649355ee6b2639720a644520e93878144584f931f60f06d5c15eecd9067fR12)\n */\nexport const DEFAULT_CHUNK_SIZE = 65_536;\n"]}