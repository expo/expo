{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,qBAAqB,CAAC,IAAa;IACjD,MAAM,GAAG,GAAG,EAAE,GAAG,IAAI,CAAC;IACtB,MAAM,cAAc,GAAG,gBAAgB,CAAC;IACxC,IAAI,IAAI,KAAK,SAAS,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC;QAAE,OAAO,EAAE,CAAC;IAC/D,OAAO,GAAG,CAAC,WAAW,EAAE,CAAC;AAC3B,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,GAAQ;IACnC,OAAO,CACL,GAAG,YAAY,SAAS;QACxB,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,aAAa;QAC5B,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,WAAW;QAC1B,GAAG,YAAY,WAAW;QAC1B,GAAG,YAAY,cAAc;QAC7B,GAAG,YAAY,YAAY;QAC3B,GAAG,YAAY,YAAY,CAC5B,CAAC;AACJ,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,OAAyB,EAA+B,EAAE;IAC1F,IAAI,CAAC,OAAO;QAAE,OAAO,OAAO,CAAC;IAC7B,IAAI,CAAC,CAAC,OAAO,YAAY,MAAM,CAAC,EAAE,CAAC;QACjC,MAAM,SAAS,EAAE,CAAC;IACpB,CAAC;IAED,IAAI,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;IACxB,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IACrB,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QAC/B,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;IACD,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QAC/B,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChB,CAAC;IACD,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,aAAa,EAAE,CAAC;QAC7D,MAAM,SAAS,EAAE,CAAC;IACpB,CAAC;IAED,OAAO;QACL,OAAO,EAAE,CAAC;QACV,IAAI,EAAE,qBAAqB,CAAC,CAAC,CAAC;KAC/B,CAAC;AACJ,CAAC,CAAC;AAEF;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,MAAM,CAAC","sourcesContent":["/**\n * Normalizes the content type string for a Blob.\n *\n * Returns the lowercased content type if it is valid, or an empty string otherwise.\n *\n * A valid content type:\n *  - Is not undefined\n *  - Contains only printable ASCII characters (0x20â€“0x7E)\n *\n * If any of these conditions are not met, returns an empty string to indicate an invalid or unsafe content type.\n *\n * @param type The content type string to normalize.\n * @returns The normalized (lowercased) content type, or an empty string if invalid.\n */\nexport function normalizedContentType(type?: string): string {\n  const str = '' + type;\n  const asciiPrintable = /^[\\x20-\\x7E]+$/;\n  if (type === undefined || !asciiPrintable.test(str)) return '';\n  return str.toLowerCase();\n}\n\n/**\n * @param obj The object to check whether it's a Typed Array or not.\n * @returns boolean indicating whether the obj is a Typed Array or not.\n */\nexport function isTypedArray(obj: any): boolean {\n  return (\n    obj instanceof Int8Array ||\n    obj instanceof Int16Array ||\n    obj instanceof Int32Array ||\n    obj instanceof BigInt64Array ||\n    obj instanceof Uint8Array ||\n    obj instanceof Uint16Array ||\n    obj instanceof Uint32Array ||\n    obj instanceof BigUint64Array ||\n    obj instanceof Float32Array ||\n    obj instanceof Float64Array\n  );\n}\n\n/**\n * Processes the options object if defined and not null.\n * The function coerces .type and .options to 'string' (if they are defined objects)\n * TypeError is thrown when the options is not an object or .endings are invalid.\n *\n * @param options\n * @returns BlobPropertyBag object\n */\nexport const preprocessOptions = (options?: BlobPropertyBag): BlobPropertyBag | undefined => {\n  if (!options) return options;\n  if (!(options instanceof Object)) {\n    throw TypeError();\n  }\n\n  let e = options.endings;\n  let t = options.type;\n  if (e && typeof e === 'object') {\n    e = String(e);\n  }\n  if (t && typeof t === 'object') {\n    t = String(t);\n  }\n  if (e !== undefined && e !== 'native' && e !== 'transparent') {\n    throw TypeError();\n  }\n\n  return {\n    endings: e,\n    type: normalizedContentType(t),\n  };\n};\n\n/**\n * The default chunk size (64 KB) used for binary streaming operations.\n *\n * This value is not specified by the W3C File API specification or MDN documentation.\n * It is chosen as a widely adopted industry standard that balances performance\n * (by reducing the number of read operations) and memory usage (by avoiding excessively large buffers).\n *\n * @see https://w3c.github.io/FileAPI/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nexport const DEFAULT_CHUNK_SIZE = 65_536;\n"]}