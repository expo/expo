{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,qBAAqB,CAAC,IAAa;IACjD,IAAI,IAAI,KAAK,IAAI;QAAE,OAAO,MAAM,CAAC;IACjC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,EAAE,CAAC;IAC1C,MAAM,cAAc,GAAG,gBAAgB,CAAC;IACxC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC;QAAE,OAAO,EAAE,CAAC;IAC1C,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC;AAC5B,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,GAAQ;IACnC,OAAO,CACL,GAAG,YAAY,SAAS;QACxB,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,aAAa;QAC5B,GAAG,YAAY,UAAU;QACzB,GAAG,YAAY,WAAW;QAC1B,GAAG,YAAY,WAAW;QAC1B,GAAG,YAAY,cAAc;QAC7B,GAAG,YAAY,YAAY;QAC3B,GAAG,YAAY,YAAY,CAC5B,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,OAAyB,EAA+B,EAAE;IAC1F,IAAI,OAAO,EAAE,CAAC;QACZ,IAAI,CAAC,CAAC,OAAO,YAAY,MAAM,CAAC,EAAE,CAAC;YACjC,MAAM,SAAS,EAAE,CAAC;QACpB,CAAC;QAED,IAAI,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;QACxB,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC;QACrB,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;YAC/B,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;YAC/B,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAChB,CAAC;QACD,IAAI,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,QAAQ,IAAI,CAAC,KAAK,aAAa,EAAE,CAAC;YAC7D,MAAM,SAAS,EAAE,CAAC;QACpB,CAAC;QAED,OAAO;YACL,OAAO,EAAE,CAAC;YACV,IAAI,EAAE,qBAAqB,CAAC,CAAC,CAAC;SAC/B,CAAC;IACJ,CAAC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF;;;;;;;;;GASG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,MAAM,CAAC","sourcesContent":["/**\n * Normalizes the content type string for a Blob.\n *\n * Returns the lowercased content type if it is valid, or an empty string otherwise.\n *\n * A valid content type:\n *  - Is not null, undefined, or empty\n *  - Contains only printable ASCII characters (0x20â€“0x7E)\n *  - Does not contain forbidden control characters: NUL (\\x00), LF (\\x0A), or CR (\\x0D)\n *\n * If any of these conditions are not met, returns an empty string to indicate an invalid or unsafe content type.\n *\n * @param type The content type string to normalize.\n * @returns The normalized (lowercased) content type, or an empty string if invalid.\n */\nexport function normalizedContentType(type?: string): string {\n  if (type === null) return 'null';\n  if (!type || type.length === 0) return '';\n  const asciiPrintable = /^[\\x20-\\x7E]+$/;\n  if (!asciiPrintable.test(type)) return '';\n  return type.toLowerCase();\n}\n\n/**\n * @param obj The object to check whether it's a Typed Array or not.\n * @returns boolean indicating whether the obj is a Typed Array or not.\n */\nexport function isTypedArray(obj: any): boolean {\n  return (\n    obj instanceof Int8Array ||\n    obj instanceof Int16Array ||\n    obj instanceof Int32Array ||\n    obj instanceof BigInt64Array ||\n    obj instanceof Uint8Array ||\n    obj instanceof Uint16Array ||\n    obj instanceof Uint32Array ||\n    obj instanceof BigUint64Array ||\n    obj instanceof Float32Array ||\n    obj instanceof Float64Array\n  );\n}\n\n/**\n * Processes the options object and\n * @param options\n * @returns BlobPropertyBag object\n */\nexport const preprocessOptions = (options?: BlobPropertyBag): BlobPropertyBag | undefined => {\n  if (options) {\n    if (!(options instanceof Object)) {\n      throw TypeError();\n    }\n\n    let e = options.endings;\n    let t = options.type;\n    if (e && typeof e === 'object') {\n      e = String(e);\n    }\n    if (t && typeof t === 'object') {\n      t = String(t);\n    }\n    if (e !== undefined && e !== 'native' && e !== 'transparent') {\n      throw TypeError();\n    }\n\n    return {\n      endings: e,\n      type: normalizedContentType(t),\n    };\n  }\n\n  return options;\n};\n\n/**\n * The default chunk size (64 KB) used for binary streaming operations.\n *\n * This value is not specified by the W3C File API specification or MDN documentation.\n * It is chosen as a widely adopted industry standard that balances performance\n * (by reducing the number of read operations) and memory usage (by avoiding excessively large buffers).\n *\n * @see https://w3c.github.io/FileAPI/\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nexport const DEFAULT_CHUNK_SIZE = 65_536;\n"]}