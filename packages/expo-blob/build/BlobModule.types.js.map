{"version":3,"file":"BlobModule.types.js","sourceRoot":"","sources":["../src/BlobModule.types.ts"],"names":[],"mappings":"","sourcesContent":["import { NativeModule, SharedObject } from 'expo';\n\nimport { ExpoBlob } from './BlobModule';\n\n/**\n * Represents immutable raw binary data, similar to the web Blob API.\n * Allows for efficient storage and manipulation of binary data, such as files or network responses.\n */\nexport declare class Blob {\n  /**\n   * Creates a new Blob object containing a concatenation of the given blobParts.\n   * @param blobParts An array of BlobPart to include in the Blob.\n   * @param options An optional BlobPropertyBag dictionary that may specify the endings and MIME type.\n   */\n  constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);\n\n  /**\n   * Returns a new Blob object containing the data in the specified range of bytes of the source Blob.\n   * @param start The starting byte index (inclusive).\n   * @param end The ending byte index (exclusive).\n   * @param contentType The MIME type of the new Blob. If not provided, defaults to an empty string.\n   * @returns A new Blob object containing the specified bytes.\n   */\n  slice(start?: number, end?: number, contentType?: string): Blob;\n\n  /**\n   * Returns a ReadableStream that allows streaming the Blob's data in chunks.\n   * Note: The current implementation loads the entire Blob into memory before streaming.\n   * @returns A ReadableStream of the Blob's data.\n   */\n  stream(): ReadableStream;\n\n  /**\n   * Returns a Promise that resolves with the entire contents of the Blob as an ArrayBuffer.\n   * @returns Promise resolving to the Blob's binary data as an ArrayBuffer.\n   */\n  arrayBuffer(): Promise<ArrayBufferLike>;\n}\n\n/**\n * Native representation of a Blob, used for communication with the native layer.\n * Exposes methods for slicing and retrieving the Blob's data as bytes or text.\n */\nexport declare class NativeBlob extends SharedObject {\n  /**\n   * The size of the Blob in bytes.\n   */\n  readonly size: number;\n  /**\n   * The MIME type of the Blob.\n   */\n  readonly type: string;\n\n  /**\n   * Creates a new NativeBlob object from the given parts and options.\n   * @param blobParts An array of BlobPart to include in the Blob.\n   * @param options An optional BlobPropertyBag dictionary.\n   */\n  constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);\n\n  /**\n   * Returns a new Blob from native implementation object containing the data in the specified range of bytes of the source Blob.\n   * @param start The starting byte index (inclusive).\n   * @param end The ending byte index (exclusive).\n   * @param contentType The MIME type of the new Blob. If not provided, defaults to an empty string.\n   * @returns A new Blob from native implementation object containing the specified bytes.\n   */\n  slice(start?: number, end?: number, contentType?: string): ExpoBlob;\n\n  /**\n   * Returns a Promise that resolves with the entire contents of the Blob as a Uint8Array.\n   * @returns Promise resolving to the Blob's binary data as a Uint8Array.\n   */\n  bytes(): Promise<Uint8Array>;\n\n  /**\n   * Returns a Promise that resolves with the entire contents of the Blob as a UTF-8 string.\n   * @returns Promise resolving to the Blob's text contents.\n   */\n  text(): Promise<string>;\n}\n\n/**\n * Native module interface for ExpoBlob, exposing the Blob class to JavaScript.\n */\nexport declare class ExpoBlobModule extends NativeModule {\n  /**\n   * The native Blob class constructor.\n   */\n  Blob: typeof NativeBlob;\n}\n\n/**\n * Represents a part of a Blob. Can be a string, ArrayBuffer, ArrayBufferView, or another Blob.\n */\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob;\n"]}