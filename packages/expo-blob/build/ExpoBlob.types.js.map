{"version":3,"file":"ExpoBlob.types.js","sourceRoot":"","sources":["../src/ExpoBlob.types.ts"],"names":[],"mappings":"","sourcesContent":["import { NativeModule, SharedObject } from 'expo';\n\nexport declare class Blob {\n  /**\n   * The size of the `Blob` in bytes.\n   */\n  readonly size: number;\n  /**\n   * The MIME type of the `Blob`, or the empty string if the type cannot be determined.\n   */\n  readonly type: string;\n\n  /**\n   * Creates a new `Blob` object from the given parts and options.\n   * @param blobParts An array of `BlobPart` to include in the `Blob`.\n   * @param options An optional `BlobPropertyBag` dictionary.\n   */\n  constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);\n\n  /**\n   * @param start The starting byte index (inclusive) represented as a signed 32 bit integer (up to 2^31 - 1).\n   * @param end The ending byte index (exclusive) represented as a signed 32 bit integer (up to 2^31 - 1).\n   * @param contentType The MIME type of the new `Blob`. If not provided, defaults to an empty string.\n   * @returns A new `Blob` object containing the data in the specified range of bytes of the source `Blob`.\n   */\n  slice(start?: number, end?: number, contentType?: string): Blob;\n\n  /**\n   * @returns Promise resolving to the `Blob`'s binary data as a `Uint8Array`.\n   */\n  bytes(): Promise<Uint8Array>;\n\n  /**\n   * @returns Promise that resolves with the entire contents of the `Blob` as a UTF-8 string.\n   */\n  text(): Promise<string>;\n  /**\n   * > **Note**: The current implementation loads the entire `Blob` into memory before streaming.\n   * @returns A `ReadableStream` of the `Blob`'s data.\n   */\n  stream(): ReadableStream;\n\n  /**\n   * @returns Promise resolving to the `Blob`'s binary data as an `ArrayBuffer`.\n   */\n  arrayBuffer(): Promise<ArrayBuffer>;\n}\n\n/**\n * @hidden\n * @private\n */\nexport declare class NativeBlob extends SharedObject {\n  readonly size: number;\n  readonly type: string;\n\n  constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);\n\n  slice(start?: number, end?: number, contentType?: string): Blob;\n  bytes(): Promise<Uint8Array>;\n  text(): Promise<string>;\n}\n\n/**\n * @hidden\n * @private\n */\nexport declare class ExpoBlobModule extends NativeModule {\n  Blob: typeof NativeBlob;\n}\n\n/**\n * Represents a part of a `Blob`. Can be a `string`, `ArrayBuffer`, `ArrayBufferView`, or another `Blob`.\n */\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob;\n"]}