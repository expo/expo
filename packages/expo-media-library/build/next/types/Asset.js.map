{"version":3,"file":"Asset.js","sourceRoot":"","sources":["../../../src/next/types/Asset.ts"],"names":[],"mappings":"","sourcesContent":["import { Album } from './Album';\nimport { MediaType } from './MediaType';\n\n/**\n * Represents a single media asset on the device (image, video, or audio).\n *\n * An `Asset` instance corresponds to an entry in the device's media store.\n * It exposes metadata (such as filename, dimensions, or creation time) and utility methods (like deleting).\n *\n * To create a new asset, use {@link Asset.create}.\n */\nexport declare class Asset {\n  /**\n   * Reinitialize an instance of an asset with a given content URI.\n   * @param contentUri - The content URI of the asset in MediaStore.\n   */\n  constructor(contentUri: string);\n\n  /**\n   * ID of the asset.\n   * Can be used to re-instantiate an `Asset` later.\n   * For android it is a contentUri and PHAsset localIdentifier for iOS.\n   */\n  id: string;\n\n  /**\n   * Gets the creation time of the asset.\n   * @returns A promise resolving to the UNIX timestamp in milliseconds, or `null` if unavailable.\n   */\n  getCreationTime(): Promise<number | null>;\n\n  /**\n   * Gets the duration of the asset.\n   * Applies only to media types like video or audio.\n   * @returns A promise resolving to the duration in milliseconds, or `null` if not applicable.\n   */\n  getDuration(): Promise<number | null>;\n\n  /**\n   * Gets the filename of the asset, including its extension.\n   * @returns A promise resolving to the filename string.\n   * @throws AssetPropertyNotFoundException if the name cannot be retrieved (e.g. asset deleted).\n   */\n  getFilename(): Promise<string>;\n\n  /**\n   * Gets the height of the asset in pixels.\n   * Only applicable for image and video assets.\n   * @returns A promise resolving to the height in pixels.\n   */\n  getHeight(): Promise<number>;\n\n  /**\n   * Gets the media type of the asset.\n   * @returns A promise resolving to a numeric media type (e.g., image, video, audio).\n   */\n  getMediaType(): Promise<MediaType>;\n\n  /**\n   * Gets the last modification time of the asset.\n   * @returns A promise resolving to the UNIX timestamp in milliseconds, or `null` if unavailable.\n   */\n  getModificationTime(): Promise<number | null>;\n\n  /**\n   * Gets the URI pointing to the asset’s location in the system (e.g. `content://` on Android).\n   * @returns A promise resolving to the string URI.\n   */\n  getUri(): Promise<string>;\n\n  /**\n   * Gets the width of the asset in pixels.\n   * Only applicable for image and video assets.\n   * @returns A promise resolving to the width in pixels.\n   */\n  getWidth(): Promise<number>;\n\n  /**\n   * Deletes the asset from the device’s media store.\n   * @returns A promise that resolves once the deletion has completed.\n   * @example\n   * ```ts\n   * await asset.delete();\n   * ```\n   */\n  delete(): Promise<void>;\n\n  /**\n   * Creates a new asset from a given file path.\n   * Optionally associates the asset with an album.\n   *\n   * @param filePath - Local filesystem path (e.g., `file:///...`) of the file to import.\n   * @param album - Optional `Album` instance to place the asset in.\n   * @returns A promise resolving to the created `Asset`.\n   *\n   * @example\n   * ```ts\n   * const asset = await Asset.create(\"file:///path/to/photo.png\");\n   * console.log(await asset.getFilename()); // \"photo.png\"\n   * ```\n   */\n  static create(filePath: string, album?: Album): Promise<Asset>;\n}\n"]}