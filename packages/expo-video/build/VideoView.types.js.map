{"version":3,"file":"VideoView.types.js","sourceRoot":"","sources":["../src/VideoView.types.ts"],"names":[],"mappings":"","sourcesContent":["import type { SharedObject } from 'expo-modules-core';\nimport { ViewProps } from 'react-native';\n\n/**\n * A class that represents an instance of the video player.\n */\nexport declare class VideoPlayer extends SharedObject<VideoPlayerEvents> {\n  /**\n   * Boolean value whether the player is currently playing.\n   * > This property is get-only, use `play` and `pause` methods to control the playback.\n   */\n  playing: boolean;\n\n  /**\n   * Determines whether the player should automatically replay after reaching the end of the video.\n   * @default false\n   */\n  loop: boolean;\n\n  /**\n   * Boolean value whether the player is currently muted.\n   * @default false\n   */\n  muted: boolean;\n\n  /**\n   * Integer value representing the current position in seconds.\n   */\n  currentTime: number;\n\n  /**\n   * Float value between 0 and 1 representing the current volume.\n   * Muting the player doesn't affect the volume. In other words, when the player is muted, the volume is the same as\n   * when unmuted. Similarly, setting the volume doesn't unmute the player.\n   * @default 1.0\n   */\n  volume: number;\n\n  /**\n   * Boolean value indicating if the player should correct audio pitch when the playback speed changes.\n   * > On web, changing this property is not supported, the player will always correct the pitch.\n   * @default true\n   * @platform android\n   * @platform ios\n   */\n  preservesPitch: boolean;\n\n  /**\n   * Float value between 0 and 16 indicating the current playback speed of the player.\n   * @default 1.0\n   */\n  playbackRate: number;\n\n  /**\n   * Indicates the current status of the player.\n   * > This property is get-only\n   */\n  status: VideoPlayerStatus;\n\n  /**\n   * Determines whether the player should continue playing after the app enters the background.\n   * @default false\n   * @platform ios\n   * @platform android\n   */\n  staysActiveInBackground: boolean;\n\n  /**\n   * Resumes the player.\n   */\n  play(): void;\n\n  /**\n   * Pauses the player.\n   */\n  pause(): void;\n\n  /**\n   * Replaces the current source with a new one.\n   */\n  replace(source: VideoSource): void;\n\n  /**\n   * Seeks the playback by the given number of seconds.\n   */\n  seekBy(seconds: number): void;\n\n  /**\n   * Seeks the playback to the beginning.\n   */\n  replay(): void;\n}\n\n/**\n * Describes how a video should be scaled to fit in a container.\n * - `contain`: The video maintains its aspect ratio and fits inside the container, with possible letterboxing/pillarboxing.\n * - `cover`: The video maintains its aspect ratio and covers the entire container, potentially cropping some portions.\n * - `fill`: The video stretches/squeezes to completely fill the container, potentially causing distortion.\n */\nexport type VideoContentFit = 'contain' | 'cover' | 'fill';\n\n/**\n * Describes the current status of the player.\n * - `idle`: The player is not playing or loading any videos.\n * - `loading`: The player is loading video data from the provided source\n * - `readyToPlay`: The player has loaded enough data to start playing or to continue playback.\n * - `error`: The player has encountered an error while loading or playing the video.\n */\nexport type VideoPlayerStatus = 'idle' | 'loading' | 'readyToPlay' | 'error';\n\nexport interface VideoViewProps extends ViewProps {\n  /**\n   * A player instance â€“ use `useVideoPlayer()` to create one.\n   */\n  player: VideoPlayer;\n\n  /**\n   * Determines whether native controls should be displayed or not.\n   * @default true\n   */\n  nativeControls?: boolean;\n\n  /**\n   * Describes how the video should be scaled to fit in the container.\n   * Options are 'contain', 'cover', and 'fill'.\n   * @default 'contain'\n   */\n  contentFit?: VideoContentFit;\n\n  /**\n   * Determines whether fullscreen mode is allowed or not.\n   * @default true\n   */\n  allowsFullscreen?: boolean;\n\n  /**\n   * Determines whether the timecodes should be displayed or not.\n   * @default true\n   * @platform ios\n   */\n  showsTimecodes?: boolean;\n\n  /**\n   * Determines whether the player allows the user to skip media content.\n   * @default false\n   * @platform android\n   * @platform ios\n   */\n  requiresLinearPlayback?: boolean;\n\n  /**\n   * Determines the position offset of the video inside the container.\n   * @default { dx: 0, dy: 0 }\n   * @platform ios\n   */\n  contentPosition?: { dx?: number; dy?: number };\n\n  /**\n   * A callback to call after the video player enters Picture in Picture (PiP) mode.\n   * @platform android\n   * @platform ios 14+\n   */\n  onPictureInPictureStart?: () => void;\n\n  /**\n   * A callback to call after the video player exits Picture in Picture (PiP) mode.\n   * @platform android\n   * @platform ios 14+\n   */\n  onPictureInPictureStop?: () => void;\n\n  /**\n   * Determines whether the player allows Picture in Picture (PiP) mode.\n   * @default false\n   * @platform ios 14+\n   */\n  allowsPictureInPicture?: boolean;\n\n  /**\n   * Determines whether the player should start Picture in Picture (PiP) automatically when the app is in the background.\n   * > **Note:** Only one player can be in Picture in Picture (PiP) mode at a time.\n   * @default false\n   * @platform android 12+\n   * @platform ios 14.2+\n   */\n  startsPictureInPictureAutomatically?: boolean;\n}\n\n/**\n * Specifies which type of DRM to use. Android supports Widevine, PlayReady and ClearKey, iOS supports FairPlay.\n * */\nexport type DRMType = 'clearkey' | 'fairplay' | 'playready' | 'widevine';\n\n/**\n * Specifies DRM options which will be used by the player while loading the video.\n */\nexport type DRMOptions = {\n  /**\n   * Determines which type of DRM to use.\n   */\n  type: DRMType;\n\n  /**\n   * Determines the license server URL.\n   */\n  licenseServer: string;\n\n  /**\n   * Determines headers sent to the license server on license requests.\n   */\n  headers?: { [key: string]: string };\n\n  /**\n   * Specifies whether the DRM is a multi-key DRM.\n   * @platform android\n   */\n  multiKey?: boolean;\n\n  /**\n   * Specifies the content ID of the stream.\n   * @platform ios\n   */\n  contentId?: string;\n\n  /**\n   * Specifies the certificate URL for the FairPlay DRM.\n   * @platform ios\n   */\n  certificateUrl?: string;\n};\n\nexport type VideoSource = string | { uri: string; drm?: DRMOptions } | null;\n\n/**\n * Handlers for events which can be emitted by the player.\n */\nexport type VideoPlayerEvents = {\n  /**\n   * Handler for an event emitted when the status of the player changes.\n   */\n  statusChange: (\n    newStatus: VideoPlayerStatus,\n    oldStatus: VideoPlayerStatus,\n    error: PlayerError\n  ) => void;\n  /**\n   * Handler for an event emitted when the player starts or stops playback.\n   */\n  playingChange: (newIsPlaying: boolean, oldIsPlaying: boolean) => void;\n  /**\n   * Handler for an event emitted when the `playbackRate` property of the player changes.\n   */\n  playbackRateChange: (newPlaybackRate: number, oldPlaybackRate: number) => void;\n  /**\n   * Handler for an event emitted when the `volume` property of the player changes.\n   */\n  volumeChange: (newVolume: VolumeEvent, oldVolume: VolumeEvent) => void;\n  /**\n   * Handler for an event emitted when the player plays to the end of the current source.\n   */\n  playToEnd: () => void;\n  /**\n   * Handler for an event emitted when the current media source of the player changes.\n   */\n  sourceChange: (newSource: VideoSource, previousSource: VideoSource) => void;\n};\n\n/**\n * Contains information about any errors that the player encountered during the playback\n */\nexport type PlayerError = {\n  message: string;\n};\n\n/**\n * Contains information about the current volume and whether the player is muted.\n */\nexport type VolumeEvent = {\n  volume: number;\n  isMuted: boolean;\n};\n"]}