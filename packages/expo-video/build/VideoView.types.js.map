{"version":3,"file":"VideoView.types.js","sourceRoot":"","sources":["../src/VideoView.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ViewProps } from 'react-native';\n\n/**\n * A class that represents an instance of the video player.\n */\nexport declare class VideoPlayer {\n  /**\n   * Boolean value whether the player is currently playing.\n   */\n  isPlaying: boolean;\n\n  /**\n   * Boolean value whether the player is currently muted.\n   */\n  isMuted: boolean;\n\n  /**\n   * Float value between 0 and 1 representing the current volume. This value will be ignored if the player is muted.\n   *\n   * @platform android\n   */\n  volume: number;\n\n  /**\n   * Resumes the player.\n   */\n  play(): void;\n\n  /**\n   * Pauses the player.\n   */\n  pause(): void;\n\n  /**\n   * Replaces the current source with a new one.\n   */\n  replace(source: string): void;\n\n  /**\n   * Seeks the playback by the given number of seconds.\n   */\n  seekBy(seconds: number): void;\n\n  /**\n   * Seeks the playback to the beginning.\n   */\n  replay(): void;\n}\n\n/**\n * Describes how a video should be scaled to fit in a container.\n * 'contain': The video maintains its aspect ratio and fits inside the container, with possible letterboxing/pillarboxing.\n * 'cover': The video maintains its aspect ratio and covers the entire container, potentially cropping some portions.\n * 'fill': The video stretches/squeezes to completely fill the container, potentially causing distortion.\n */\ntype VideoContentFit = 'contain' | 'cover' | 'fill';\n\nexport interface VideoViewProps extends ViewProps {\n  /**\n   * A player instance â€“ use `useVideoPlayer()` to create one.\n   * @platform ios, web\n   */\n  player: VideoPlayer;\n\n  /**\n   * Determines whether native controls should be displayed or not.\n   */\n  nativeControls: boolean | undefined;\n\n  /**\n   * Describes how the video should be scaled to fit in the container.\n   * Options are 'contain', 'cover', and 'fill'.\n   * @platform ios, web\n   */\n  contentFit: VideoContentFit | undefined;\n\n  /**\n   * Determines whether fullscreen mode is allowed or not.\n   * @platform ios, web\n   */\n  allowsFullscreen: boolean | undefined;\n\n  /**\n   * Determines whether the timecodes should be displayed or not.\n   * @platform ios\n   */\n  showsTimecodes: boolean | undefined;\n\n  /**\n   * Determines whether the player allows the user to skip media content.\n   * @platform ios\n   */\n  requiresLinearPlayback: boolean | undefined;\n\n  /**\n   * Determines the position offset of the video inside the container.\n   * @platform ios\n   */\n  contentPosition: { dx?: number; dy?: number } | undefined;\n\n  /**\n   * A callback to call after the video player enters Picture in Picture (PiP) mode.\n   * @platform ios 14+\n   */\n  onPictureInPictureStart?: () => void;\n\n  /**\n   * A callback to call after the video player exits Picture in Picture (PiP) mode.\n   * @platform ios 14+\n   */\n  onPictureInPictureStop?: () => void;\n\n  /**\n   * Determines whether the player allows Picture in Picture (PiP) mode.\n   * @default false\n   * @platform ios 14+\n   */\n  allowsPictureInPicture?: boolean;\n\n  /**\n   * Determines whether the player should start Picture in Picture (PiP) automatically when the app is in the background.\n   * > **Note:** Only one player can be in Picture in Picture (PiP) mode at a time.\n   * @default false\n   * @platform ios 14.2+\n   */\n  startsPictureInPictureAutomatically?: boolean;\n}\n"]}