{"version":3,"file":"VideoView.js","sourceRoot":"","sources":["../src/VideoView.tsx"],"names":[],"mappings":"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","sourcesContent":["import { SharedObject } from 'expo-modules-core';\nimport {\n  ReactNode,\n  PureComponent,\n  DependencyList,\n  createRef,\n  useRef,\n  useMemo,\n  useEffect,\n} from 'react';\n\nimport NativeVideoModule from './NativeVideoModule';\nimport NativeVideoView from './NativeVideoView';\nimport { VideoPlayer, VideoSource, VideoViewProps } from './VideoView.types';\n\nexport function useVideoPlayer(source: VideoSource): VideoPlayer {\n  const parsedSource = typeof source === 'string' ? { uri: source } : source;\n\n  return useReleasingSharedObject(\n    () => new NativeVideoModule.VideoPlayer(parsedSource),\n    [JSON.stringify(parsedSource)]\n  );\n}\n\n/**\n * Returns whether the current device supports Picture in Picture (PiP) mode.\n * @returns A `boolean` which is `true` if the device supports PiP mode, and `false` otherwise.\n * @platform android\n * @platform ios\n */\nexport function isPictureInPictureSupported(): Promise<boolean> {\n  return NativeVideoModule.isPictureInPictureSupported();\n}\n\nexport class VideoView extends PureComponent<VideoViewProps> {\n  nativeRef = createRef<any>();\n\n  replace(source: VideoSource) {\n    if (typeof source === 'string') {\n      this.nativeRef.current?.replace({ uri: source });\n      return;\n    }\n    this.nativeRef.current?.replace(source);\n  }\n\n  enterFullscreen() {\n    this.nativeRef.current?.enterFullscreen();\n  }\n\n  exitFullscreen() {\n    this.nativeRef.current?.exitFullscreen();\n  }\n\n  /**\n   * Enters Picture in Picture (PiP) mode. Throws an exception if the device does not support PiP.\n   * > **Note:** Only one player can be in Picture in Picture (PiP) mode at a time.\n   * @platform android\n   * @platform ios 14+\n   */\n  startPictureInPicture() {\n    return this.nativeRef.current?.startPictureInPicture();\n  }\n\n  /**\n   * Exits Picture in Picture (PiP) mode.\n   * @platform android\n   * @platform ios 14+\n   */\n  stopPictureInPicture() {\n    return this.nativeRef.current?.stopPictureInPicture();\n  }\n\n  render(): ReactNode {\n    const { player, ...props } = this.props;\n    const playerId = getPlayerId(player);\n\n    return <NativeVideoView {...props} player={playerId} ref={this.nativeRef} />;\n  }\n}\n\n// Temporary solution to pass the shared object ID instead of the player object.\n// We can't really pass it as an object in the old architecture.\n// Technically we can in the new architecture, but it's not possible yet.\nfunction getPlayerId(player: number | VideoPlayer): number | null {\n  if (player instanceof NativeVideoModule.VideoPlayer) {\n    // @ts-expect-error\n    return player.__expo_shared_object_id__;\n  }\n  if (typeof player === 'number') {\n    return player;\n  }\n  return null;\n}\n\n/**\n * Returns a shared object, which is automatically cleaned up when the component is unmounted.\n */\nfunction useReleasingSharedObject<T extends SharedObject>(\n  factory: () => T,\n  dependencies: DependencyList\n): T {\n  const objectRef = useRef<T | null>(null);\n  const isFastRefresh = useRef(false);\n  const previousDependencies = useRef<DependencyList>(dependencies);\n\n  if (objectRef.current == null) {\n    objectRef.current = factory();\n  }\n\n  const object = useMemo(() => {\n    let newObject = objectRef.current;\n    const dependenciesAreEqual =\n      previousDependencies.current?.length === dependencies.length &&\n      dependencies.every((value, index) => value === previousDependencies.current[index]);\n\n    // If the dependencies have changed, release the previous object and create a new one, otherwise this has been called\n    // because of a fast refresh, and we don't want to release the object.\n    if (!newObject || !dependenciesAreEqual) {\n      objectRef.current?.release();\n      newObject = factory();\n      objectRef.current = newObject;\n      previousDependencies.current = dependencies;\n    } else {\n      isFastRefresh.current = true;\n    }\n    return newObject;\n  }, dependencies);\n\n  useEffect(() => {\n    isFastRefresh.current = false;\n\n    return () => {\n      // This will be called on every fast refresh and on unmount, but we only want to release the object on unmount.\n      if (!isFastRefresh.current && objectRef.current) {\n        objectRef.current.release();\n      }\n    };\n  }, []);\n\n  return object;\n}\n"]}