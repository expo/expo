{"version":3,"file":"VideoView.js","sourceRoot":"","sources":["../src/VideoView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAa,aAAa,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAErE,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAGhD,MAAM,UAAU,cAAc,CAAC,SAAwB,IAAI;IACzD,OAAO,OAAO,CAAC,GAAG,EAAE;QAClB,OAAO,IAAI,iBAAiB,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACnD,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAED,MAAM,OAAO,SAAU,SAAQ,aAA6B;IAC1D,SAAS,GAAG,SAAS,EAAO,CAAC;IAE7B,eAAe;QACb,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,eAAe,EAAE,CAAC;IAC5C,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,cAAc,EAAE,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,qBAAqB;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,qBAAqB,EAAE,CAAC;IACzD,CAAC;IAED;;;OAGG;IACH,oBAAoB;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,oBAAoB,EAAE,CAAC;IACxD,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACxC,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;QAErC,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAG,CAAC;IAC/E,CAAC;CACF;AAED,gFAAgF;AAChF,gEAAgE;AAChE,yEAAyE;AACzE,SAAS,WAAW,CAAC,MAA4B;IAC/C,IAAI,MAAM,YAAY,iBAAiB,CAAC,WAAW,EAAE;QACnD,mBAAmB;QACnB,OAAO,MAAM,CAAC,yBAAyB,CAAC;KACzC;IACD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,OAAO,MAAM,CAAC;KACf;IACD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { ReactNode, PureComponent, useMemo, createRef } from 'react';\n\nimport NativeVideoModule from './NativeVideoModule';\nimport NativeVideoView from './NativeVideoView';\nimport { VideoPlayer, VideoViewProps } from './VideoView.types';\n\nexport function useVideoPlayer(source: string | null = null): VideoPlayer {\n  return useMemo(() => {\n    return new NativeVideoModule.VideoPlayer(source);\n  }, []);\n}\n\nexport class VideoView extends PureComponent<VideoViewProps> {\n  nativeRef = createRef<any>();\n\n  enterFullscreen() {\n    this.nativeRef.current?.enterFullscreen();\n  }\n\n  exitFullscreen() {\n    this.nativeRef.current?.exitFullscreen();\n  }\n\n  /**\n   * Enters Picture in Picture (PiP) mode. Throws an exception if the device does not support PiP.\n   * > **Note:** Only one player can be in Picture in Picture (PiP) mode at a time.\n   * @platform ios 14+\n   */\n  startPictureInPicture() {\n    return this.nativeRef.current?.startPictureInPicture();\n  }\n\n  /**\n   * Exits Picture in Picture (PiP) mode.\n   * @platform ios 14+\n   */\n  stopPictureInPicture() {\n    return this.nativeRef.current?.stopPictureInPicture();\n  }\n\n  render(): ReactNode {\n    const { player, ...props } = this.props;\n    const playerId = getPlayerId(player);\n\n    return <NativeVideoView {...props} player={playerId} ref={this.nativeRef} />;\n  }\n}\n\n// Temporary solution to pass the shared object ID instead of the player object.\n// We can't really pass it as an object in the old architecture.\n// Technically we can in the new architecture, but it's not possible yet.\nfunction getPlayerId(player: number | VideoPlayer): number | null {\n  if (player instanceof NativeVideoModule.VideoPlayer) {\n    // @ts-expect-error\n    return player.__expo_shared_object_id__;\n  }\n  if (typeof player === 'number') {\n    return player;\n  }\n  return null;\n}\n"]}