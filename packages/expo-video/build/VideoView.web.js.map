{"version":3,"file":"VideoView.web.js","sourceRoot":"","sources":["../src/VideoView.web.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,mBAAmB,EAAE,MAAM,OAAO,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAE1C,OAAoB,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAG9D,SAAS,kBAAkB;IACzB,OAAO,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1E,CAAC;AAED,SAAS,kBAAkB,CAAC,YAAiC;IAC3D,MAAM,YAAY,GAAG,YAAY,EAAE,UAAU,EAAE,IAAI,IAAI,CAAC;IAExD,IAAI,YAAY,IAAI,YAAY,EAAE;QAChC,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAC5B,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;KAChD;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,SAAS,SAAS,CAAC,KAA8B;IAC/C,MAAM,eAAe,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAClD,qIAAqI;IACrI,OAAO,eAAsC,CAAC;AAChD,CAAC;AAED,MAAM,CAAC,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,KAAgD,EAAE,GAAG,EAAE,EAAE;IAC5F,MAAM,QAAQ,GAAG,MAAM,CAA0B,IAAI,CAAC,CAAC;IACvD,MAAM,YAAY,GAAG,MAAM,CAAqC,IAAI,CAAC,CAAC;IAEtE;;;;;OAKG;IACH,MAAM,eAAe,GAAG,MAAM,CAAsB,IAAI,CAAC,CAAC;IAC1D,MAAM,eAAe,GAAG,MAAM,CAAkB,IAAI,CAAC,CAAC;IAEtD,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QAC9B,eAAe,EAAE,GAAG,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;gBAC3B,OAAO;aACR;YACD,QAAQ,CAAC,OAAO,EAAE,iBAAiB,EAAE,CAAC;QACxC,CAAC;QACD,cAAc,EAAE,GAAG,EAAE;YACnB,QAAQ,CAAC,cAAc,EAAE,CAAC;QAC5B,CAAC;KACF,CAAC,CAAC,CAAC;IAEJ,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAG,eAAe,CAAC,OAAO,CAAC;QAC7C,MAAM,YAAY,GAAG,eAAe,CAAC,OAAO,CAAC;QAC7C,MAAM,SAAS,GAAG,YAAY,CAAC,OAAO,CAAC;QAEvC,IAAI,QAAQ,CAAC,OAAO,EAAE;YACpB,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;SAChD;QAED,IAAI,YAAY,IAAI,YAAY,IAAI,SAAS,EAAE;YAC7C,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;SACpE;aAAM;YACL,OAAO,CAAC,IAAI,CACV,uHAAuH,CACxH,CAAC;SACH;QAED,OAAO,GAAG,EAAE;YACV,IAAI,QAAQ,CAAC,OAAO,EAAE;gBACpB,KAAK,CAAC,MAAM,EAAE,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAClD;YACD,IAAI,QAAQ,CAAC,OAAO,IAAI,YAAY,IAAI,SAAS,EAAE;gBACjD,KAAK,CAAC,MAAM,EAAE,gBAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;aAC3E;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;IAEnB,OAAO,CACL,CAAC,KAAK,CACJ,QAAQ,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAC/B,YAAY,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,CAClE,WAAW,CAAC,WAAW,CACvB,KAAK,CAAC,CAAC;YACL,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC;YACzB,SAAS,EAAE,KAAK,CAAC,UAAU;SAC5B,CAAC,CACF,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE;YACd,+EAA+E;YAC/E,6EAA6E;YAC7E,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACnD,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC;gBAC1B,MAAM,YAAY,GAAG,kBAAkB,EAAE,CAAC;gBAC1C,eAAe,CAAC,OAAO,GAAG,YAAY,CAAC;gBACvC,eAAe,CAAC,OAAO,GAAG,kBAAkB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;gBACtE,YAAY,CAAC,OAAO,GAAG,YAAY;oBACjC,CAAC,CAAC,YAAY,CAAC,wBAAwB,CAAC,MAAM,CAAC;oBAC/C,CAAC,CAAC,IAAI,CAAC;aACV;QACH,CAAC,CAAC,CACF,GAAG,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,EAAE,CAAC,EAC3C,CACH,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,eAAe,SAAS,CAAC","sourcesContent":["import React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport VideoPlayer, { getSourceUri } from './VideoPlayer.web';\nimport type { VideoViewProps } from './VideoView.types';\n\nfunction createAudioContext(): AudioContext | null {\n  return typeof window !== 'undefined' ? new window.AudioContext() : null;\n}\n\nfunction createZeroGainNode(audioContext: AudioContext | null): GainNode | null {\n  const zeroGainNode = audioContext?.createGain() ?? null;\n\n  if (audioContext && zeroGainNode) {\n    zeroGainNode.gain.value = 0;\n    zeroGainNode.connect(audioContext.destination);\n  }\n  return zeroGainNode;\n}\n\nfunction mapStyles(style: VideoViewProps['style']): React.CSSProperties {\n  const flattenedStyles = StyleSheet.flatten(style);\n  // Looking through react-native-web source code they also just pass styles directly without further conversions, so it's just a cast.\n  return flattenedStyles as React.CSSProperties;\n}\n\nexport const VideoView = forwardRef((props: { player?: VideoPlayer } & VideoViewProps, ref) => {\n  const videoRef = useRef<null | HTMLVideoElement>(null);\n  const mediaNodeRef = useRef<null | MediaElementAudioSourceNode>(null);\n\n  /**\n   * Audio context is used to mute all but one video when multiple video views are playing from one player simultaneously.\n   * Using audio context nodes allows muting videos without displaying the mute icon in the video player.\n   * We have to keep the context that called createMediaElementSource(videoRef), as the method can't be called\n   * for the second time with another context and there is no way to unbind the video and audio context afterward.\n   */\n  const audioContextRef = useRef<null | AudioContext>(null);\n  const zeroGainNodeRef = useRef<null | GainNode>(null);\n\n  useImperativeHandle(ref, () => ({\n    enterFullscreen: () => {\n      if (!props.allowsFullscreen) {\n        return;\n      }\n      videoRef.current?.requestFullscreen();\n    },\n    exitFullscreen: () => {\n      document.exitFullscreen();\n    },\n  }));\n\n  useEffect(() => {\n    const audioContext = audioContextRef.current;\n    const zeroGainNode = zeroGainNodeRef.current;\n    const mediaNode = mediaNodeRef.current;\n\n    if (videoRef.current) {\n      props.player?.mountVideoView(videoRef.current);\n    }\n\n    if (audioContext && zeroGainNode && mediaNode) {\n      props.player.mountAudioNode(audioContext, zeroGainNode, mediaNode);\n    } else {\n      console.warn(\n        \"Couldn't mount audio node, this might affect the audio playback when using multiple video views with the same player.\"\n      );\n    }\n\n    return () => {\n      if (videoRef.current) {\n        props.player?.unmountVideoView(videoRef.current);\n      }\n      if (videoRef.current && audioContext && mediaNode) {\n        props.player?.unmountAudioNode(videoRef.current, audioContext, mediaNode);\n      }\n    };\n  }, [props.player]);\n\n  return (\n    <video\n      controls={props.nativeControls}\n      controlsList={props.allowsFullscreen ? undefined : 'nofullscreen'}\n      crossOrigin=\"anonymous\"\n      style={{\n        ...mapStyles(props.style),\n        objectFit: props.contentFit,\n      }}\n      ref={(newRef) => {\n        // This is called with a null value before `player.unmountVideoView` is called,\n        // we can't assign null to videoRef if we want to unmount it from the player.\n        if (newRef && !newRef.isEqualNode(videoRef.current)) {\n          videoRef.current = newRef;\n          const audioContext = createAudioContext();\n          audioContextRef.current = audioContext;\n          zeroGainNodeRef.current = createZeroGainNode(audioContextRef.current);\n          mediaNodeRef.current = audioContext\n            ? audioContext.createMediaElementSource(newRef)\n            : null;\n        }\n      }}\n      src={getSourceUri(props.player?.src) ?? ''}\n    />\n  );\n});\n\nexport default VideoView;\n"]}