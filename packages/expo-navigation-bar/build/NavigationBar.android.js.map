{"version":3,"file":"NavigationBar.android.js","sourceRoot":"","sources":["../src/NavigationBar.android.ts"],"names":[],"mappings":"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","sourcesContent":["import { type EventSubscription } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { Appearance, processColor } from 'react-native';\nimport { isEdgeToEdge } from 'react-native-is-edge-to-edge';\n\nimport ExpoNavigationBar from './ExpoNavigationBar';\nimport type {\n  NavigationBarBehavior,\n  NavigationBarButtonStyle,\n  NavigationBarPosition,\n  NavigationBarStyle,\n  NavigationBarVisibility,\n  NavigationBarVisibilityEvent,\n} from './NavigationBar.types';\n\nfunction isLightColorScheme() {\n  const colorScheme = Appearance?.getColorScheme() ?? 'light';\n  return colorScheme === 'light';\n}\n\nfunction navigationBarStyleToButtonStyle(\n  navigationBarStyle: NavigationBarStyle\n): NavigationBarButtonStyle {\n  switch (navigationBarStyle) {\n    case 'auto':\n      return isLightColorScheme() ? 'dark' : 'light';\n    case 'light':\n      return 'dark';\n    case 'dark':\n      return 'light';\n    case 'inverted':\n      return isLightColorScheme() ? 'light' : 'dark';\n  }\n}\n\nexport function addVisibilityListener(\n  listener: (event: NavigationBarVisibilityEvent) => void\n): EventSubscription {\n  return ExpoNavigationBar.addListener('ExpoNavigationBar.didChange', listener);\n}\n\nexport async function setBackgroundColorAsync(color: string): Promise<void> {\n  if (isEdgeToEdge()) {\n    console.warn('`setBackgroundColorAsync` is not supported with edge-to-edge enabled.');\n    return;\n  }\n\n  const colorNumber = processColor(color);\n  await ExpoNavigationBar.setBackgroundColorAsync(colorNumber);\n}\n\nexport async function getBackgroundColorAsync(): Promise<string> {\n  if (isEdgeToEdge()) {\n    console.warn('`getBackgroundColorAsync` is not supported with edge-to-edge enabled.');\n    return `#00000000`;\n  }\n\n  return await ExpoNavigationBar.getBackgroundColorAsync();\n}\n\nexport async function setBorderColorAsync(color: string): Promise<void> {\n  if (isEdgeToEdge()) {\n    console.warn('`setBorderColorAsync` is not supported with edge-to-edge enabled.');\n    return;\n  }\n\n  const colorNumber = processColor(color);\n  await ExpoNavigationBar.setBorderColorAsync(colorNumber);\n}\n\nexport async function getBorderColorAsync(): Promise<string> {\n  if (isEdgeToEdge()) {\n    console.warn('`getBorderColorAsync` is not supported with edge-to-edge enabled.');\n    return `#00000000`;\n  }\n\n  return await ExpoNavigationBar.getBorderColorAsync();\n}\n\nexport async function setVisibilityAsync(visibility: NavigationBarVisibility): Promise<void> {\n  await ExpoNavigationBar.setVisibilityAsync(visibility);\n}\n\nexport async function getVisibilityAsync(): Promise<NavigationBarVisibility> {\n  return ExpoNavigationBar.getVisibilityAsync();\n}\n\nexport async function setButtonStyleAsync(style: NavigationBarButtonStyle): Promise<void> {\n  await ExpoNavigationBar.setButtonStyleAsync(style);\n}\n\nexport async function getButtonStyleAsync(): Promise<NavigationBarButtonStyle> {\n  if (isEdgeToEdge()) {\n    console.warn('`getButtonStyleAsync` is not supported with edge-to-edge enabled.');\n    return 'light';\n  }\n\n  return await ExpoNavigationBar.getButtonStyleAsync();\n}\n\nexport async function setPositionAsync(position: NavigationBarPosition): Promise<void> {\n  if (isEdgeToEdge()) {\n    console.warn('`setPositionAsync` is not supported with edge-to-edge enabled.');\n    return;\n  }\n\n  await ExpoNavigationBar.setPositionAsync(position);\n}\n\nexport async function unstable_getPositionAsync(): Promise<NavigationBarPosition> {\n  if (isEdgeToEdge()) {\n    console.warn('`unstable_getPositionAsync` is not supported with edge-to-edge enabled.');\n    return 'relative';\n  }\n\n  return await ExpoNavigationBar.unstable_getPositionAsync();\n}\n\nexport async function setBehaviorAsync(behavior: NavigationBarBehavior): Promise<void> {\n  if (isEdgeToEdge()) {\n    console.warn('`setBehaviorAsync` is not supported with edge-to-edge enabled.');\n    return;\n  }\n\n  await ExpoNavigationBar.setBehaviorAsync(behavior);\n}\n\nexport async function getBehaviorAsync(): Promise<NavigationBarBehavior> {\n  if (isEdgeToEdge()) {\n    console.warn('`getBehaviorAsync` is not supported with edge-to-edge enabled.');\n    return 'inset-touch';\n  }\n\n  return await ExpoNavigationBar.getBehaviorAsync();\n}\n\nexport function setStyle(style: NavigationBarStyle) {\n  ExpoNavigationBar.setButtonStyleAsync(navigationBarStyleToButtonStyle(style));\n}\n\nexport function useVisibility(): NavigationBarVisibility | null {\n  const [visibility, setVisible] = useState<NavigationBarVisibility | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    getVisibilityAsync().then((visibility) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    const listener = addVisibilityListener(({ visibility }) => {\n      if (isMounted) {\n        setVisible(visibility);\n      }\n    });\n\n    return () => {\n      listener.remove();\n      isMounted = false;\n    };\n  }, []);\n\n  return visibility;\n}\n"]}