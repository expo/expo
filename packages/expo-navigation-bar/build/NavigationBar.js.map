{"version":3,"file":"NavigationBar.js","sourceRoot":"","sources":["../src/NavigationBar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AACxC,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAE5D,OAAO,EAAE,kBAAkB,IAAI,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;AAGhG,cAAc,uBAAuB,CAAC;AAEtC,gFAAgF;AAChF,gFAAgF;AAChF,2EAA2E;AAC3E,4EAA4E;AAC5E,oBAAoB;AACpB,IAAI,UAAU,GAAiE,IAAI,CAAC;AAEpF,IAAI,YAAY,EAAE,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;IAChD,UAAU,GAAG,OAAO,CAAC,2BAA2B,CAAC,CAAC,UAAU,CAAC;AAC/D,CAAC;AAED,6CAA6C;AAC7C;;;GAGG;AACH,MAAM,UAAU,QAAQ,CAAC,KAAyB;IAChD,IAAI,CAAC,YAAY,EAAE,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QACjD,OAAO,CAAC,IAAI,CACV,yIAAyI,CAC1I,CAAC;QACF,OAAO;IACT,CAAC;IACD,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,OAAO,CAAC,IAAI,CAAC,gDAAgD,CAAC,CAAC;QAC/D,OAAO;IACT,CAAC;IACD,UAAU,EAAE,QAAQ,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAC;AACjD,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,kBAAkB,CAAC,UAAmC;IACpE,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,EAAE,CAAC;QAC9B,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QACzE,OAAO;IACT,CAAC;IAED,IAAI,YAAY,EAAE,IAAI,UAAU,EAAE,CAAC;QACjC,OAAO,UAAU,CAAC,SAAS,CAAC,EAAE,aAAa,EAAE,UAAU,KAAK,QAAQ,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,OAAO,0BAA0B,CAAC,UAAU,CAAC,CAAC;AAChD,CAAC;AAED,0CAA0C;AAE1C,OAAO,EACL,qBAAqB,EACrB,uBAAuB,EACvB,uBAAuB,EACvB,mBAAmB,EACnB,kBAAkB,EAClB,mBAAmB,EACnB,mBAAmB,EACnB,gBAAgB,EAChB,yBAAyB,EACzB,gBAAgB,EAChB,gBAAgB,EAChB,aAAa,EACb,mBAAmB,GACpB,MAAM,8BAA8B,CAAC","sourcesContent":["import { Platform } from 'react-native';\nimport { isEdgeToEdge } from 'react-native-is-edge-to-edge';\n\nimport { setVisibilityAsync as originalSetVisibilityAsync } from './NativeNavigationBarWrapper';\nimport { NavigationBarStyle, NavigationBarVisibility } from './NavigationBar.types';\n\nexport * from './NavigationBar.types';\n\n// This line only imports the type information for TypeScript type checking.  It\n// doesn't import the actual module in the compiled JavaScript code.  The actual\n// module is imported conditionally with require() below, in order to avoid\n// importing the module if edge-to-edge is not enabled (which could throw if\n// it's not linked).\nlet SystemBars: typeof import('react-native-edge-to-edge').SystemBars | null = null;\n\nif (isEdgeToEdge() && Platform.OS === 'android') {\n  SystemBars = require('react-native-edge-to-edge').SystemBars;\n}\n\n// MARK: react-native-edge-to-edge based APIs\n/**\n * Sets the style of the navigation bar.\n * > This is only supported on Android when edge-to-edge is enabled.\n */\nexport function setStyle(style: NavigationBarStyle) {\n  if (!isEdgeToEdge() && Platform.OS === 'android') {\n    console.warn(\n      '`setStyle` is only supported on Android when edge-to-edge is enabled. Enable edge-to-edge or use the `setButtonStyle` function instead.'\n    );\n    return;\n  }\n  if (Platform.OS !== 'android') {\n    console.warn('`setStyle` method is only available on Android');\n    return;\n  }\n  SystemBars?.setStyle({ navigationBar: style });\n}\n\n/**\n * Set the navigation bar's visibility.\n *\n * @example\n * ```ts\n * NavigationBar.setVisibilityAsync(\"hidden\");\n * ```\n * @param visibility Based on CSS visibility property.\n */\nexport function setVisibilityAsync(visibility: NavigationBarVisibility) {\n  if (Platform.OS !== 'android') {\n    console.warn('`setVisibilityAsync` method is only available on Android');\n    return;\n  }\n\n  if (isEdgeToEdge() && SystemBars) {\n    return SystemBars.setHidden({ navigationBar: visibility === 'hidden' });\n  }\n\n  return originalSetVisibilityAsync(visibility);\n}\n\n// MARK: existing expo-navigation-bar APIs\n\nexport {\n  addVisibilityListener,\n  setBackgroundColorAsync,\n  getBackgroundColorAsync,\n  setBorderColorAsync,\n  getVisibilityAsync,\n  setButtonStyleAsync,\n  getButtonStyleAsync,\n  setPositionAsync,\n  unstable_getPositionAsync,\n  setBehaviorAsync,\n  getBehaviorAsync,\n  useVisibility,\n  getBorderColorAsync,\n} from './NativeNavigationBarWrapper';\n"]}