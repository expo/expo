{"version":3,"file":"VideoThumbnails.js","sourceRoot":"","sources":["../src/VideoThumbnails.ts"],"names":[],"mappings":"AAAA,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,EACL,oBAAoB,GAGrB,MAAM,8BAA8B,CAAC;AAEtC,OAAO,EAAiD,oBAAoB,EAAE,CAAC;AAE/E,cAAc;AACd;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,cAAsB,EACtB,UAAkC,EAAE;IAEpC,OAAO,MAAM,mBAAmB,CAAC,YAAY,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AACzE,CAAC;AAED;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,cAAsB,EACtB,UAAkC,EAAE;IAEpC,OAAO,MAAM,mBAAmB,CAAC,kBAAkB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AAC/E,CAAC","sourcesContent":["import ExpoVideoThumbnails from './ExpoVideoThumbnails';\nimport {\n  NativeVideoThumbnail,\n  VideoThumbnailsOptions,\n  VideoThumbnailsResult,\n} from './VideoThumbnailsTypes.types';\n\nexport { VideoThumbnailsOptions, VideoThumbnailsResult, NativeVideoThumbnail };\n\n// @needsAudit\n/**\n * Create an image thumbnail from video provided via `sourceFilename`.\n *\n * @param sourceFilename An URI of the video, local or remote.\n * @param options A map defining how modified thumbnail should be created.\n *\n * @return Returns a promise which fulfils with [`VideoThumbnailsResult`](#videothumbnailsresult).\n */\nexport async function getThumbnailAsync(\n  sourceFilename: string,\n  options: VideoThumbnailsOptions = {}\n): Promise<VideoThumbnailsResult> {\n  return await ExpoVideoThumbnails.getThumbnail(sourceFilename, options);\n}\n\n/**\n * Create an image thumbnail and pass the result as a native image reference.\n *\n * @param sourceFilename An URI of the video, local or remote.\n * @param options A map defining how modified thumbnail should be created.\n * @returns Returns a promise which fulfills with ['NativeVideoThumbnail'](#nativevideothumbnail).\n */\nexport async function getNativeThumbnailAsync(\n  sourceFilename: string,\n  options: VideoThumbnailsOptions = {}\n): Promise<NativeVideoThumbnail | null> {\n  return await ExpoVideoThumbnails.getNativeThumbnail(sourceFilename, options);\n}\n"]}