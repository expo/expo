{"version":3,"file":"TrackingTransparency.js","sourceRoot":"","sources":["../src/TrackingTransparency.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,gBAAgB,EAGhB,oBAAoB,GACrB,MAAM,mBAAmB,CAAC;AAE3B,OAAO,wBAAwB,MAAM,4BAA4B,CAAC;AAElE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AACH,MAAM,UAAU,gBAAgB;IAC9B,MAAM,aAAa,GAAG,wBAAwB,CAAC,gBAAgB,EAAE,CAAC;IAClE,IAAI,aAAa,KAAK,sCAAsC,EAAE,CAAC;QAC7D,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,aAAa,CAAC;AACvB,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACH,MAAM,CAAC,KAAK,UAAU,+BAA+B;IACnD,OAAO,wBAAwB,CAAC,uBAAuB,EAAE,CAAC;AAC5D,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B;IAC/C,OAAO,wBAAwB,CAAC,mBAAmB,EAAE,CAAC;AACxD,CAAC;AAED;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,oBAAoB,CAAC;IACzD,SAAS,EAAE,2BAA2B;IACtC,aAAa,EAAE,+BAA+B;CAC/C,CAAC,CAAC;AAEH;;;;;GAKG;AACH,MAAM,UAAU,WAAW;IACzB,OAAO,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAC3C,CAAC;AAED,OAAO,EAAsB,gBAAgB,EAA+C,CAAC","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  createPermissionHook,\n} from 'expo-modules-core';\n\nimport ExpoTrackingTransparency from './ExpoTrackingTransparency';\n\n/**\n * Gets the advertising ID, a UUID string intended only for advertising. Use this string for\n * frequency capping, attribution, conversion events, estimating the number of unique users,\n * advertising fraud detection, and debugging.\n *\n * As a best practice, don't store the advertising ID. Instead, call this function each time your\n * app needs to use the advertising ID. Users can change whether they allow app tracking and can\n * reset their advertising ID at any time in their system settings. Check your app's authorization\n * using [`getTrackingPermissionsAsync()`](#gettrackingpermissionsasync) to determine the user's\n * intent.\n *\n * On Android, this function returns the \"Android Advertising ID\"\n * ([AAID](https://developers.google.com/android/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient.Info#public-string-getid)).\n * On Android devices that support multiple users, including guest users, it's possible for your app\n * to obtain different advertising IDs on the same device. These different IDs correspond to\n * different users who could be signed in on that device. See Google's documentation for more\n * information: [Get a user-resettable advertising ID](https://developer.android.com/training/articles/ad-id).\n *\n * On iOS, this function returns the \"Identifier for Advertisers\"\n * ([IDFA](https://developer.apple.com/documentation/adsupport/asidentifiermanager/advertisingidentifier)),\n * a string that's unique to each device. Your app must request tracking authorization using\n * [`requestTrackingPermissionsAsync()`](#requesttrackingpermissionsasync) before it can get the\n * advertising identifier.\n *\n * @return Returns either a UUID `string` or `null`. It returns null in the following cases:\n * - On Android, when the user has enabled \"Opt out of Ads Personalization\" in their device settings\n * - In the iOS simulator, regardless of any settings\n * - On iOS if you haven't received permission using [`requestTrackingPermissionsAsync()`](#requesttrackingpermissionsasync)\n * - On iOS, if you've requested permission and the user declines\n * - On iOS, when a profile or configuration restricts access to the advertising identifier, such as\n *   when the user has turned off the system-wide \"Allow Apps to Request to Track\" setting\n *\n * @example\n * ```ts\n * TrackingTransparency.getAdvertisingId();\n * // \"E9228286-4C4E-4789-9D95-15827DCB291B\"\n * ```\n */\nexport function getAdvertisingId(): string | null {\n  const advertisingId = ExpoTrackingTransparency.getAdvertisingId();\n  if (advertisingId === '00000000-0000-0000-0000-000000000000') {\n    return null;\n  }\n  return advertisingId;\n}\n\n/**\n * Requests the user to authorize or deny access to app-related data that can be used for tracking\n * the user or the device. Examples of data used for tracking include email address, device ID,\n * advertising ID, and so on.\n *\n * On iOS, this method shows the App Tracking Transparency permission dialog. The system remembers\n * the user's choice and doesn't prompt again unless a user uninstalls and then reinstalls the app.\n * If the user denies permission, any attempt to collect the [`getAdvertisingId()`](#getadvertisingid)\n * will return `null`.\n *\n * On Android, this method returns the current tracking permission status based on the \"Opt out of\n * Ads Personalization\" setting (no dialog is shown). When this setting is enabled, the permission\n * will be denied.\n *\n * On web, this method always returns a granted permission.\n *\n * @example\n * ```typescript\n * const { granted } = await requestTrackingPermissionsAsync();\n *\n * if (granted) {\n *   // Your app is authorized to track the user or their device\n * }\n * ```\n */\nexport async function requestTrackingPermissionsAsync(): Promise<PermissionResponse> {\n  return ExpoTrackingTransparency.requestPermissionsAsync();\n}\n\n/**\n * Checks whether or not the user has authorized the app to access app-related data that can be used\n * for tracking the user or the device. See [`requestTrackingPermissionsAsync()`](#requesttrackingpermissionsasync)\n * for more details.\n *\n * On iOS, this method returns the current App Tracking Transparency permission status.\n *\n * On Android, this method returns the current tracking permission status based on the \"Opt out of\n * Ads Personalization\" setting. When this setting is enabled, the permission will be denied.\n *\n * On web, this method always returns a granted permission.\n *\n * @example\n * ```typescript\n * const { granted } = await getTrackingPermissionsAsync();\n *\n * if (granted) {\n *   // Your app is authorized to track the user or their device\n * }\n * ```\n */\nexport async function getTrackingPermissionsAsync(): Promise<PermissionResponse> {\n  return ExpoTrackingTransparency.getPermissionsAsync();\n}\n\n/**\n * Check or request the user to authorize or deny access to app-related data that can be used for\n * tracking the user or the device. Examples of data used for tracking include email address, device\n * ID, advertising ID, and so on.\n *\n * On iOS, requesting permission shows the App Tracking Transparency dialog. The system remembers\n * the user's choice and doesn't prompt again unless a user uninstalls and then reinstalls the app.\n * If the user denies permission, any attempt to collect the [`getAdvertisingId()`](#getadvertisingid)\n * will return `null`.\n *\n * On Android, requesting permission returns the current status based on the \"Opt out of Ads\n * Personalization\" setting (no dialog is shown).\n *\n * On web, this method always returns a granted permission.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = useTrackingPermissions();\n * ```\n */\nexport const useTrackingPermissions = createPermissionHook({\n  getMethod: getTrackingPermissionsAsync,\n  requestMethod: requestTrackingPermissionsAsync,\n});\n\n/**\n * Returns whether the TrackingTransparency API is available on the current device.\n *\n * @returns On devices where the Tracking Transparency API is unavailable,\n * the get and request permissions methods will always resolve to `granted`.\n */\nexport function isAvailable(): boolean {\n  return Boolean(ExpoTrackingTransparency);\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions };\n"]}