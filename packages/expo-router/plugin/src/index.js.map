{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAAA,wDAAkE;AAClE,+CAAwC;AAExC,MAAM,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAE1C,MAAM,eAAe,GAAiB,CAAC,MAAM,EAAE,EAAE;IAC/C,OAAO,IAAA,8BAAa,EAAC,MAAM,EAAE,CAAC,MAAM,EAAE,EAAE;QACtC,oCAAoC;QACpC,sDAAsD;QAEtD,gDAAgD;QAChD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE;YACzD,MAAM,CAAC,UAAU,CAAC,mBAAmB,GAAG,EAAE,CAAC;SAC5C;QACD,uEAAuE;QACvE,4FAA4F;QAC5F,oCAAoC;QACpC,MAAM,YAAY,GAAG,+CAA+C,CAAC;QACrE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACjE,MAAM,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAC1D;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAeF,MAAM,UAAU,GAAgD,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE;IACjF,MAAM,KAAK,GAAG,MAAM,IAAI,EAAE,CAAC;IAC3B,IAAA,uBAAQ,EAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAExB,eAAe,CAAC,MAAM,CAAC,CAAC;IAExB,OAAO;QACL,GAAG,MAAM;QACT,KAAK,EAAE;YACL,GAAG,MAAM,CAAC,KAAK;YACf,MAAM,EAAE;gBACN,MAAM,EAAE,KAAK;gBACb,GAAG,MAAM,CAAC,KAAK,EAAE,MAAM;gBACvB,GAAG,KAAK;aACT;SACF;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,kBAAe,UAAU,CAAC","sourcesContent":["import { ConfigPlugin, withInfoPlist } from 'expo/config-plugins';\nimport { validate } from 'schema-utils';\n\nconst schema = require('../options.json');\n\nconst withExpoHeadIos: ConfigPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    // TODO: Add a way to enable this...\n    // config.modResults.CoreSpotlightContinuation = true;\n\n    // $(PRODUCT_BUNDLE_IDENTIFIER).expo.index_route\n    if (!Array.isArray(config.modResults.NSUserActivityTypes)) {\n      config.modResults.NSUserActivityTypes = [];\n    }\n    // This ensures that stored `NSUserActivityType`s can be opened in-app.\n    // This is important for moving between native devices or from opening a link that was saved\n    // in a Quick Note or Siri Reminder.\n    const activityType = '$(PRODUCT_BUNDLE_IDENTIFIER).expo.index_route';\n    if (!config.modResults.NSUserActivityTypes.includes(activityType)) {\n      config.modResults.NSUserActivityTypes.push(activityType);\n    }\n    return config;\n  });\n};\n\nexport type ExpoRouterConfigPlugin = {\n  /** Production origin URL where assets in the public folder are hosted. The fetch function is polyfilled to support relative requests from this origin in production, development origin is inferred using the Expo CLI development server. */\n  origin?: string;\n  /** A more specific origin URL used in the `expo-router/head` module for iOS handoff. Defaults to `origin`. */\n  headOrigin?: string;\n  /** Should Async Routes be enabled. `production` is currently web-only and will be disabled on native. */\n  root?: string;\n  /** Should Async Routes be enabled, currently only `development` is supported. */\n  asyncRoutes?: string | { android?: string; ios?: string; web?: string; default?: string };\n  /** Generate partial typed routes */\n  partialTypedGroups?: boolean;\n};\n\nconst withRouter: ConfigPlugin<ExpoRouterConfigPlugin | void> = (config, _props) => {\n  const props = _props || {};\n  validate(schema, props);\n\n  withExpoHeadIos(config);\n\n  return {\n    ...config,\n    extra: {\n      ...config.extra,\n      router: {\n        origin: false,\n        ...config.extra?.router,\n        ...props,\n      },\n    },\n  };\n};\n\nexport default withRouter;\n"]}