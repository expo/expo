{"version":3,"file":"TabTrigger.js","sourceRoot":"","sources":["../../src/ui/TabTrigger.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Slot } from '@radix-ui/react-slot';\nimport { useNavigation } from '@react-navigation/native';\nimport { ReactNode, useContext, ReactElement, ComponentProps, useCallback } from 'react';\nimport { View, StyleSheet, Pressable, PressableProps } from 'react-native';\n\nimport { TabTriggerMapContext, TabsStateContext } from './TabContext';\nimport { ExpoTabActionType } from './TabRouter';\nimport { router } from '../imperative-api';\nimport { Href } from '../types';\n\ntype PressablePropsWithoutFunctionChildren = Omit<PressableProps, 'children'> & {\n  children?: ReactNode | undefined;\n};\n\nexport type TabTriggerProps<T extends string | object> = PressablePropsWithoutFunctionChildren & {\n  name: string;\n  href?: Href<T>;\n  /** Forward props to child component. Useful for custom wrappers. */\n  asChild?: boolean;\n  /** Reset the route when switching to the tab */\n  reset?: SwitchToOptions['reset'] | 'onLongPress';\n};\n\nexport type TabTriggerOptions<T extends string | object> = {\n  name: string;\n  href: Href<T>;\n};\n\nexport type TabTriggerSlotProps = PressablePropsWithoutFunctionChildren &\n  React.RefAttributes<View> & {\n    isFocused?: boolean;\n  };\n\nconst TabTriggerSlot = Slot as React.ForwardRefExoticComponent<TabTriggerSlotProps>;\n\nexport function TabTrigger<T extends string | object>({\n  asChild,\n  name,\n  href,\n  reset = 'onFocus',\n  ...props\n}: TabTriggerProps<T>) {\n  const { switchTab, isFocused } = useTabTrigger();\n\n  const handleOnPress = useCallback<NonNullable<PressableProps['onPress']>>(\n    (event) => {\n      props.onPress?.(event);\n      if (event?.isDefaultPrevented()) {\n        return;\n      }\n      switchTab(name, { reset: reset !== 'onLongPress' ? reset : undefined });\n    },\n    [props.onPress, reset]\n  );\n\n  const handleOnLongPress = useCallback<NonNullable<PressableProps['onPress']>>(\n    (event) => {\n      props.onLongPress?.(event);\n      if (event?.isDefaultPrevented()) {\n        return;\n      }\n      switchTab(name, {\n        reset: reset === 'onLongPress' ? 'always' : reset,\n      });\n    },\n    [props.onPress, reset]\n  );\n\n  // Pressable doesn't accept the extra props, so only pass them if we are using asChild\n  if (asChild) {\n    return (\n      <TabTriggerSlot\n        style={styles.tabTrigger}\n        {...props}\n        onPress={handleOnPress}\n        onLongPress={handleOnLongPress}\n        isFocused={isFocused(name)}>\n        {props.children}\n      </TabTriggerSlot>\n    );\n  } else {\n    return (\n      <Pressable\n        style={styles.tabTrigger}\n        {...props}\n        onPress={handleOnPress}\n        onLongPress={handleOnLongPress}>\n        {props.children}\n      </Pressable>\n    );\n  }\n}\n\nexport function isTabTrigger(\n  child: ReactElement<any>\n): child is ReactElement<ComponentProps<typeof TabTrigger>> {\n  return child.type === TabTrigger;\n}\n\nexport type SwitchToOptions = Omit<\n  Extract<ExpoTabActionType, { type: 'SWITCH_TABS' }>['payload'],\n  'name'\n>;\n\nexport function useTabTrigger() {\n  const navigation = useNavigation();\n  const triggerMap = useContext(TabTriggerMapContext);\n  const state = useContext(TabsStateContext);\n\n  const switchTab = useCallback(\n    (name: string, options?: SwitchToOptions) => {\n      const config = triggerMap[name];\n\n      if (!config) {\n        throw new Error(`Unable to find trigger with name ${name}`);\n      }\n\n      if (config.type === 'internal') {\n        const action: Extract<ExpoTabActionType, { type: 'SWITCH_TABS' }> = {\n          type: 'SWITCH_TABS',\n          payload: {\n            name,\n            ...options,\n          },\n        };\n\n        return navigation.dispatch(action);\n      } else {\n        return router.navigate(config.href);\n      }\n    },\n    [navigation, triggerMap]\n  );\n\n  const isFocused = useCallback(\n    (name: string) => {\n      const config = triggerMap[name];\n\n      if (!config) {\n        throw new Error(`Unable to find trigger with name ${name}`);\n      }\n\n      return state.index === config.index;\n    },\n    [triggerMap]\n  );\n\n  return {\n    switchTab,\n    isFocused,\n  };\n}\n\nconst styles = StyleSheet.create({\n  tabTrigger: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n});\n"]}