{"version":3,"file":"Tabs.js","sourceRoot":"","sources":["../../src/ui/Tabs.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,qDAOkC;AAClC,iCAQe;AACf,+CAA2D;AAE3D,6CAOsB;AACtB,uCAAsC;AACtC,2CAAkE;AAClE,uCAAsC;AACtC,6CAA4C;AAC5C,qCAA8E;AAC9E,iDAA8C;AAC9C,oCAAuD;AACvD,oCAAwC;AACxC,uCAA2C;AAC3C,sCAAoD;AAEpD,+CAA6B;AAC7B,4CAA0B;AAC1B,4CAA0B;AAC1B,+CAA6B;AAkB7B,SAAgB,IAAI,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,KAAK,EAAa;IACtE,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,yBAAgB,CAAC,CAAC,CAAC,mBAAI,CAAC;IAE/C,MAAM,EAAE,iBAAiB,EAAE,GAAG,mBAAmB,CAAC;QAChD,0EAA0E;QAC1E,QAAQ,EAAE,OAAO,IAAI,IAAA,sBAAc,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ;QAClF,GAAG,OAAO;KACX,CAAC,CAAC;IAEH,OAAO,CACL,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,CAAC,CACtC;MAAA,CAAC,iBAAiB,CAAC,CAAC,QAAQ,CAAC,EAAE,iBAAiB,CAClD;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC;AAdD,oBAcC;AAUD,SAAgB,mBAAmB,CAAC,EAAE,QAAQ,EAAE,GAAG,OAAO,EAA8B;IACtF,OAAO,mBAAmB,CAAC,EAAE,QAAQ,EAAE,yBAAyB,CAAC,QAAQ,CAAC,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;AAC5F,CAAC;AAFD,kDAEC;AAED,SAAgB,mBAAmB,CAA4B,EAC7D,QAAQ,EACR,GAAG,OAAO,EACoB;IAC9B,uEAAuE;IACvE,MAAM,gBAAgB,GAAG,IAAA,kBAAU,EAAC,iCAAoB,CAAC,CAAC;IAC1D,MAAM,SAAS,GAAG,IAAA,oBAAY,GAAE,CAAC;IACjC,MAAM,UAAU,GAAG,IAAA,qBAAa,GAAE,CAAC;IACnC,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,uBAAc,CAAC,CAAC,OAAO,CAAC;IACnD,MAAM,SAAS,GAAG,IAAA,oBAAY,GAAE,CAAC;IAEjC,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,EAAE;QAC1B,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;KACvE;IAED,MAAM,gBAAgB,GAAG,SAAS,CAAC,gBAAgB,CAAC;IAEpD,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAA,0BAAiB,EAChD,QAAQ,EACR,SAAS,EACT,OAAO,EACP,gBAAgB,EAChB,gBAAgB,EAChB,SAAS,EACT,UAAU,CACX,CAAC;IAEF,MAAM,EACJ,KAAK,EACL,WAAW,EACX,UAAU,EACV,iBAAiB,EAAE,mBAAmB,GACvC,GAAG,IAAA,6BAAoB,EAMtB,yBAAa,EAAE;QACf,QAAQ;QACR,GAAG,OAAO;QACV,UAAU;QACV,EAAE,EAAE,UAAU;QACd,gBAAgB;KACjB,CAAC,CAAC;IAEH,MAAM,iBAAiB,GAAG,IAAA,2BAAY,EAAC,CAAC,QAAyB,EAAE,EAAE,CAAC,CACpE,CAAC,iCAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAC/C;MAAA,CAAC,iCAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAC/C;QAAA,CAAC,mCAAsB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,WAAW,CAAC,CAClD;UAAA,CAAC,6BAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CACtC;YAAA,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,EAAE,mBAAmB,CACtD;UAAA,EAAE,6BAAgB,CAAC,QAAQ,CAC7B;QAAA,EAAE,mCAAsB,CAAC,QAAQ,CACnC;MAAA,EAAE,iCAAoB,CAAC,QAAQ,CACjC;IAAA,EAAE,iCAAoB,CAAC,QAAQ,CAAC,CACjC,CAAC,CAAC;IAEH,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,iBAAiB,EAAE,CAAC;AAC/D,CAAC;AA3DD,kDA2DC;AAED,SAAS,yBAAyB,CAChC,QAAmB,EACnB,iBAAuC,EAAE,EACzC,WAAW,GAAG,KAAK;IAEnB,gBAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;QACnC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,IAAI,IAAA,mBAAS,EAAC,KAAK,CAAC,EAAE;YACxD,OAAO;SACR;QAED,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,KAAK,CAAC,QAAQ,KAAK,UAAU,EAAE;YACnE,OAAO,yBAAyB,CAC9B,KAAK,CAAC,KAAK,CAAC,QAAQ,EACpB,cAAc,EACd,WAAW,IAAI,IAAA,mBAAS,EAAC,KAAK,CAAC,CAChC,CAAC;SACH;QAED,IAAI,IAAA,mBAAS,EAAC,KAAK,CAAC,IAAI,OAAO,KAAK,CAAC,KAAK,CAAC,QAAQ,KAAK,UAAU,EAAE;YAClE,IAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;YAEpC,iFAAiF;YACjF,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,IAAI,IAAA,sBAAc,EAAC,QAAQ,CAAC,EAAE;gBACnD,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;aACpC;YAED,OAAO,yBAAyB,CAAC,QAAQ,EAAE,cAAc,EAAE,WAAW,IAAI,IAAA,mBAAS,EAAC,KAAK,CAAC,CAAC,CAAC;SAC7F;QAED,8FAA8F;QAC9F,IAAI,CAAC,WAAW,IAAI,CAAC,IAAA,yBAAY,EAAC,KAAK,CAAC,EAAE;YACxC,OAAO;SACR;QAED,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;QAEnC,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;gBAC1C,OAAO,CAAC,IAAI,CACV,qBAAqB,IAAI,+FAA+F,CACzH,CAAC;aACH;YACD,OAAO;SACR;QAED,MAAM,YAAY,GAAG,IAAA,kBAAW,EAAC,IAAI,CAAC,CAAC;QAEvC,IAAI,IAAA,0BAAoB,EAAC,YAAY,CAAC,EAAE;YACtC,OAAO,cAAc,CAAC,IAAI,CAAC;gBACzB,IAAI,EAAE,UAAU;gBAChB,IAAI;gBACJ,IAAI,EAAE,YAAY;aACnB,CAAC,CAAC;SACJ;QAED,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;gBAC1C,OAAO,CAAC,IAAI,CACV,yGAAyG,CAC1G,CAAC;aACH;YACD,OAAO;SACR;QAED,OAAO,cAAc,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC;AACxB,CAAC;AAED,SAAS,UAAU,CACjB,KAAwB;IAExB,OAAO,KAAK,CAAC,IAAI,KAAK,gBAAQ,CAAC;AACjC,CAAC;AAED,MAAM,MAAM,GAAG,yBAAU,CAAC,MAAM,CAAC;IAC/B,QAAQ,EAAE;QACR,IAAI,EAAE,CAAC;KACR;CACF,CAAC,CAAC","sourcesContent":["import {\n  DefaultNavigatorOptions,\n  LinkingContext,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport {\n  Children,\n  ComponentProps,\n  Fragment,\n  ReactElement,\n  ReactNode,\n  isValidElement,\n  useContext,\n} from 'react';\nimport { StyleSheet, ViewProps, View } from 'react-native';\n\nimport {\n  ExpoTabsScreenOptions,\n  TabNavigationEventMap,\n  TabTriggerMapContext,\n  TabsDescriptorsContext,\n  TabsNavigatorContext,\n  TabsStateContext,\n} from './TabContext';\nimport { isTabList } from './TabList';\nimport { ExpoTabRouter, ExpoTabRouterOptions } from './TabRouter';\nimport { isTabSlot } from './TabSlot';\nimport { isTabTrigger } from './TabTrigger';\nimport { SafeAreaViewSlot, ScreenTrigger, triggersToScreens } from './common';\nimport { useComponent } from './useComponent';\nimport { useRouteNode, useContextKey } from '../Route';\nimport { useRouteInfo } from '../hooks';\nimport { resolveHref } from '../link/href';\nimport { shouldLinkExternally } from '../utils/url';\n\nexport * from './TabContext';\nexport * from './TabList';\nexport * from './TabSlot';\nexport * from './TabTrigger';\n\nexport type UseTabsOptions = Omit<\n  DefaultNavigatorOptions<\n    ParamListBase,\n    TabNavigationState<any>,\n    ExpoTabsScreenOptions,\n    TabNavigationEventMap\n  >,\n  'children'\n> &\n  Omit<ExpoTabRouterOptions, 'initialRouteName' | 'triggerMap'>;\n\nexport type TabsProps = ViewProps & {\n  asChild?: boolean;\n  options?: UseTabsOptions;\n};\n\nexport function Tabs({ children, asChild, options, ...props }: TabsProps) {\n  const Comp = asChild ? SafeAreaViewSlot : View;\n\n  const { NavigationContent } = useTabsWithChildren({\n    // asChild adds an extra layer, so we need to process the child's children\n    children: asChild && isValidElement(children) ? children.props.children : children,\n    ...options,\n  });\n\n  return (\n    <Comp style={styles.tabsRoot} {...props}>\n      <NavigationContent>{children}</NavigationContent>\n    </Comp>\n  );\n}\n\nexport type UseTabsWithChildrenOptions = UseTabsOptions & {\n  children: ReactNode;\n};\n\nexport type UseTabsWithTriggersOptions<T extends string | object> = UseTabsOptions & {\n  triggers: ScreenTrigger<T>[];\n};\n\nexport function useTabsWithChildren({ children, ...options }: UseTabsWithChildrenOptions) {\n  return useTabsWithTriggers({ triggers: parseTriggersFromChildren(children), ...options });\n}\n\nexport function useTabsWithTriggers<T extends string | object>({\n  triggers,\n  ...options\n}: UseTabsWithTriggersOptions<T>) {\n  // Ensure we extend the parent triggers, so we can trigger them as well\n  const parentTriggerMap = useContext(TabTriggerMapContext);\n  const routeNode = useRouteNode();\n  const contextKey = useContextKey();\n  const linking = useContext(LinkingContext).options;\n  const routeInfo = useRouteInfo();\n\n  if (!routeNode || !linking) {\n    throw new Error('No RouteNode. This is likely a bug in expo-router.');\n  }\n\n  const initialRouteName = routeNode.initialRouteName;\n\n  const { children, triggerMap } = triggersToScreens(\n    triggers,\n    routeNode,\n    linking,\n    initialRouteName,\n    parentTriggerMap,\n    routeInfo,\n    contextKey\n  );\n\n  const {\n    state,\n    descriptors,\n    navigation,\n    NavigationContent: RNNavigationContent,\n  } = useNavigationBuilder<\n    TabNavigationState<any>,\n    ExpoTabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    ExpoTabsScreenOptions,\n    TabNavigationEventMap\n  >(ExpoTabRouter, {\n    children,\n    ...options,\n    triggerMap,\n    id: contextKey,\n    initialRouteName,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => (\n    <TabTriggerMapContext.Provider value={triggerMap}>\n      <TabsNavigatorContext.Provider value={navigation}>\n        <TabsDescriptorsContext.Provider value={descriptors}>\n          <TabsStateContext.Provider value={state}>\n            <RNNavigationContent>{children}</RNNavigationContent>\n          </TabsStateContext.Provider>\n        </TabsDescriptorsContext.Provider>\n      </TabsNavigatorContext.Provider>\n    </TabTriggerMapContext.Provider>\n  ));\n\n  return { state, descriptors, navigation, NavigationContent };\n}\n\nfunction parseTriggersFromChildren(\n  children: ReactNode,\n  screenTriggers: ScreenTrigger<any>[] = [],\n  isInTabList = false\n) {\n  Children.forEach(children, (child) => {\n    if (!child || !isValidElement(child) || isTabSlot(child)) {\n      return;\n    }\n\n    if (isFragment(child) && typeof child.props.children !== 'function') {\n      return parseTriggersFromChildren(\n        child.props.children,\n        screenTriggers,\n        isInTabList || isTabList(child)\n      );\n    }\n\n    if (isTabList(child) && typeof child.props.children !== 'function') {\n      let children = child.props.children;\n\n      // <TabList asChild /> adds an extra layer. We need to parse the child's children\n      if (child.props.asChild && isValidElement(children)) {\n        children = children.props.children;\n      }\n\n      return parseTriggersFromChildren(children, screenTriggers, isInTabList || isTabList(child));\n    }\n\n    // We should only process TabTriggers within the TabList. All other components will be ignored\n    if (!isInTabList || !isTabTrigger(child)) {\n      return;\n    }\n\n    const { href, name } = child.props;\n\n    if (!href) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          `<TabTrigger name={${name}}> does not have a 'href' prop. TabTriggers within a <TabList /> are required to have a href.`\n        );\n      }\n      return;\n    }\n\n    const resolvedHref = resolveHref(href);\n\n    if (shouldLinkExternally(resolvedHref)) {\n      return screenTriggers.push({\n        type: 'external',\n        name,\n        href: resolvedHref,\n      });\n    }\n\n    if (!name) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\n          `<TabTrigger> does not have a 'name' prop. TabTriggers within a <TabList /> are required to have a name.`\n        );\n      }\n      return;\n    }\n\n    return screenTriggers.push({ type: 'internal', href: resolvedHref, name });\n  });\n\n  return screenTriggers;\n}\n\nfunction isFragment(\n  child: ReactElement<any>\n): child is ReactElement<ComponentProps<typeof Fragment>> {\n  return child.type === Fragment;\n}\n\nconst styles = StyleSheet.create({\n  tabsRoot: {\n    flex: 1,\n  },\n});\n"]}