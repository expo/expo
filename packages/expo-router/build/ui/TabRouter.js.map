{"version":3,"file":"TabRouter.js","sourceRoot":"","sources":["../../src/ui/TabRouter.tsx"],"names":[],"mappings":";;;AAAA,qDAQkC;AAGlC,+DAAqD;AAgBrD,SAAgB,aAAa,CAAC,EAAE,UAAU,EAAE,GAAG,OAAO,EAAwB;IAC5E,MAAM,WAAW,GAAG,IAAA,kBAAW,EAAC,OAAO,CAAC,CAAC;IAEzC,MAAM,MAAM,GAGR;QACF,GAAG,WAAW;QACd,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO;YACtC,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE;gBACjC,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;gBACjC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;gBAEjC,IAAI,CAAC,OAAO,EAAE;oBACZ,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;wBAC1C,OAAO,CAAC,IAAI,CAAC,qCAAqC,IAAI,sBAAsB,CAAC,CAAC;qBAC/E;oBACD,OAAO,KAAK,CAAC;iBACd;qBAAM,IAAI,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;oBACtC,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;oBACzC,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC;oBAClD,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;oBAEnE,IAAI,WAAW,IAAI,CAAC,QAAQ,EAAE;wBAC5B,6CAA6C;wBAC7C,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;qBACzB;yBAAM;wBACL,uBAAuB;wBACvB,MAAM,GAAG;4BACP,IAAI,EAAE,SAAS;4BACf,OAAO,EAAE;gCACP,IAAI;6BACL;yBACF,CAAC;qBACH;iBACF;qBAAM;oBACL,oBAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC7B,OAAO,KAAK,CAAC;iBACd;gBAED,OAAO,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAa,EAAE,OAAO,CAAC,CAAC;aACrE;iBAAM;gBACL,OAAO,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;aAC9D;QACH,CAAC;KACF,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AAhDD,sCAgDC","sourcesContent":["import {\n  CommonNavigationAction,\n  ParamListBase,\n  TabRouter as RNTabRouter,\n  Router,\n  TabActionType as RNTabActionType,\n  TabNavigationState,\n  TabRouterOptions as RNTabRouterOptions,\n} from '@react-navigation/native';\n\nimport { TriggerMap } from './common';\nimport { store } from '../global-state/router-store';\n\nexport type ExpoTabRouterOptions = RNTabRouterOptions & {\n  triggerMap: TriggerMap;\n};\n\nexport type ExpoTabActionType =\n  | RNTabActionType\n  | CommonNavigationAction\n  | {\n      type: 'SWITCH_TABS';\n      payload: { name: string; reset?: boolean };\n      source?: string;\n      target?: string;\n    };\n\nexport function ExpoTabRouter({ triggerMap, ...options }: ExpoTabRouterOptions) {\n  const rnTabRouter = RNTabRouter(options);\n\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    ExpoTabActionType | CommonNavigationAction\n  > = {\n    ...rnTabRouter,\n    getStateForAction(state, action, options) {\n      if (action.type === 'SWITCH_TABS') {\n        const name = action.payload.name;\n        const trigger = triggerMap[name];\n\n        if (!trigger) {\n          if (process.env.NODE_ENV === 'development') {\n            console.warn(`Unable to switch to tab with name ${name}. Tab does not exist`);\n          }\n          return state;\n        } else if (trigger.type === 'internal') {\n          const name = trigger.action.payload.name;\n          const shouldReset = action.payload.reset === true;\n          const isLoaded = state.routes.find((route) => route.name === name);\n\n          if (shouldReset || !isLoaded) {\n            // Load the tab with the tabs specified route\n            action = trigger.action;\n          } else {\n            // Else swap to the tab\n            action = {\n              type: 'JUMP_TO',\n              payload: {\n                name,\n              },\n            };\n          }\n        } else {\n          store.navigate(trigger.href);\n          return state;\n        }\n\n        return rnTabRouter.getStateForAction(state, action as any, options);\n      } else {\n        return rnTabRouter.getStateForAction(state, action, options);\n      }\n    },\n  };\n\n  return router;\n}\n"]}