{"version":3,"file":"TabRouter.js","sourceRoot":"","sources":["../../src/ui/TabRouter.tsx"],"names":[],"mappings":";;;AAAA,qDAQkC;AAmBlC,SAAgB,SAAS,CAAC,EAAE,UAAU,EAAE,GAAG,OAAO,EAAoB;IACpE,MAAM,WAAW,GAAG,IAAA,kBAAW,EAAC,OAAO,CAAC,CAAC;IAEzC,MAAM,MAAM,GAGR;QACF,GAAG,WAAW;QACd,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO;YACtC,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE;gBACjC,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;gBACjC,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAErC,IAAI,CAAC,OAAO,EAAE;oBACZ,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;wBAC1C,OAAO,CAAC,IAAI,CAAC,qCAAqC,IAAI,sBAAsB,CAAC,CAAC;qBAC/E;oBACD,OAAO,KAAK,CAAC;iBACd;gBAED,MAAM,GAAG;oBACP,IAAI,EAAE,SAAS;oBACf,GAAG,OAAO,CAAC,QAAQ;iBACpB,CAAC;gBAEF,OAAO,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAa,EAAE,OAAO,CAAC,CAAC;aACrE;iBAAM;gBACL,OAAO,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;aAC9D;QACH,CAAC;KACF,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AAjCD,8BAiCC","sourcesContent":["import {\n  CommonNavigationAction,\n  ParamListBase,\n  TabRouter as RNTabRouter,\n  Router,\n  TabActionType as RNTabActionType,\n  TabNavigationState,\n  TabRouterOptions as RNTabRouterOptions,\n} from '@react-navigation/native';\n\nimport { TriggerMap } from './common';\nimport { Href } from '../types';\n\nexport type TabRouterOptions = RNTabRouterOptions & {\n  triggerMap: TriggerMap;\n};\n\nexport type TabActionType<T extends string | object> =\n  | RNTabActionType\n  | CommonNavigationAction\n  | {\n      type: 'SWITCH_TABS';\n      payload: { name: string; href?: Href<T> };\n      source?: string;\n      target?: string;\n    };\n\nexport function TabRouter({ triggerMap, ...options }: TabRouterOptions) {\n  const rnTabRouter = RNTabRouter(options);\n\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType<any> | CommonNavigationAction\n  > = {\n    ...rnTabRouter,\n    getStateForAction(state, action, options) {\n      if (action.type === 'SWITCH_TABS') {\n        const name = action.payload.name;\n        const payload = triggerMap.get(name);\n\n        if (!payload) {\n          if (process.env.NODE_ENV === 'development') {\n            console.warn(`Unable to switch to tab with name ${name}. Tab does not exist`);\n          }\n          return state;\n        }\n\n        action = {\n          type: 'JUMP_TO',\n          ...payload.navigate,\n        };\n\n        return rnTabRouter.getStateForAction(state, action as any, options);\n      } else {\n        return rnTabRouter.getStateForAction(state, action, options);\n      }\n    },\n  };\n\n  return router;\n}\n"]}