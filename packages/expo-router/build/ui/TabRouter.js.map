{"version":3,"file":"TabRouter.js","sourceRoot":"","sources":["../../src/ui/TabRouter.tsx"],"names":[],"mappings":";;;AAAA,qDAQkC;AAGlC,+DAAqD;AAgBrD,SAAgB,aAAa,CAAC,EAAE,UAAU,EAAE,GAAG,OAAO,EAAwB;IAC5E,MAAM,WAAW,GAAG,IAAA,kBAAW,EAAC,OAAO,CAAC,CAAC;IAEzC,MAAM,MAAM,GAGR;QACF,GAAG,WAAW;QACd,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO;YACtC,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE;gBACjC,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;gBACjC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;gBAEjC,IAAI,CAAC,OAAO,EAAE;oBACZ,kDAAkD;oBAClD,OAAO,IAAI,CAAC;iBACb;qBAAM,IAAI,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;oBACtC,oBAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC7B,OAAO,KAAK,CAAC;iBACd;gBAED,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAEnF,IAAI,CAAC,KAAK,EAAE;oBACV,oFAAoF;oBACpF,OAAO,IAAI,CAAC;iBACb;gBAED,MAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC;gBAClD,MAAM,YAAY,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,KAAK,KAAK,EAAE,GAAG,CAAC,CAAC;gBAE3E,IAAI,WAAW,IAAI,CAAC,YAAY,EAAE;oBAChC,OAAO,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;iBACtE;qBAAM;oBACL,KAAK,GAAG,WAAW,CAAC,qBAAqB,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;oBAC5D,OAAO,KAAK,CAAC;iBACd;aACF;iBAAM;gBACL,OAAO,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;aAC9D;QACH,CAAC;KACF,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AA5CD,sCA4CC","sourcesContent":["import {\n  CommonNavigationAction,\n  ParamListBase,\n  TabRouter as RNTabRouter,\n  Router,\n  TabActionType as RNTabActionType,\n  TabNavigationState,\n  TabRouterOptions as RNTabRouterOptions,\n} from '@react-navigation/native';\n\nimport { TriggerMap } from './common';\nimport { store } from '../global-state/router-store';\n\nexport type ExpoTabRouterOptions = RNTabRouterOptions & {\n  triggerMap: TriggerMap;\n};\n\nexport type ExpoTabActionType =\n  | RNTabActionType\n  | CommonNavigationAction\n  | {\n      type: 'SWITCH_TABS';\n      payload: { name: string; reset?: boolean };\n      source?: string;\n      target?: string;\n    };\n\nexport function ExpoTabRouter({ triggerMap, ...options }: ExpoTabRouterOptions) {\n  const rnTabRouter = RNTabRouter(options);\n\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    ExpoTabActionType | CommonNavigationAction\n  > = {\n    ...rnTabRouter,\n    getStateForAction(state, action, options) {\n      if (action.type === 'SWITCH_TABS') {\n        const name = action.payload.name;\n        const trigger = triggerMap[name];\n\n        if (!trigger) {\n          // Maybe this trigger is handled by a parent Tabs?\n          return null;\n        } else if (trigger.type === 'external') {\n          store.navigate(trigger.href);\n          return state;\n        }\n\n        const route = state.routes.find((route) => route.name === trigger.routeNode.route);\n\n        if (!route) {\n          // Maybe we have two <Tabs /> with triggers with the same name, but different routes\n          return null;\n        }\n\n        const shouldReset = action.payload.reset === true;\n        const historyState = state.history.find((item) => item.key === route?.key);\n\n        if (shouldReset || !historyState) {\n          return rnTabRouter.getStateForAction(state, trigger.action, options);\n        } else {\n          state = rnTabRouter.getStateForRouteFocus(state, route.key);\n          return state;\n        }\n      } else {\n        return rnTabRouter.getStateForAction(state, action, options);\n      }\n    },\n  };\n\n  return router;\n}\n"]}