{"version":3,"file":"TabList.js","sourceRoot":"","sources":["../../src/ui/TabList.tsx"],"names":[],"mappings":";;;AAAA,iCAAoC;AACpC,+CAAsF;AAEtF,2CAA4C;AAC5C,qCAAmD;AAoBnD,SAAgB,OAAO,CAAC,EAAE,OAAO,EAAE,GAAG,KAAK,EAAgB;IACzD,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,iBAAQ,CAAC,CAAC,CAAC,mBAAI,CAAC;IACvC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACpD,CAAC;AAHD,0BAGC;AAED,SAAgB,UAAU,CAA4B,EACpD,OAAO,EACP,IAAI,EACJ,IAAI,EACJ,GAAG,KAAK,EACW;IACnB,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,sBAAa,CAAC,CAAC,CAAC,wBAAS,CAAC;IACjD,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,yBAAa,GAAE,CAAC;IAEtC,MAAM,aAAa,GAAG,IAAA,mBAAW,EAC/B,CAAC,KAAK,EAAE,EAAE;QACR,KAAK,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;QACvB,IAAI,KAAK,EAAE,kBAAkB,EAAE,EAAE;YAC/B,OAAO;SACR;QACD,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxB,CAAC,EACD,CAAC,KAAK,CAAC,OAAO,CAAC,CAChB,CAAC;IAEF,MAAM,iBAAiB,GAAG,IAAA,mBAAW,EACnC,CAAC,KAAK,EAAE,EAAE;QACR,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC;QAC3B,IAAI,KAAK,EAAE,kBAAkB,EAAE,EAAE;YAC/B,OAAO;SACR;QACD,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxB,CAAC,EACD,CAAC,KAAK,CAAC,OAAO,CAAC,CAChB,CAAC;IAEF,OAAO,CACL,CAAC,IAAI,CACH,KAAK,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CACzB,IAAI,KAAK,CAAC,CACV,OAAO,CAAC,CAAC,aAAa,CAAC,CACvB,WAAW,CAAC,CAAC,iBAAiB,CAAC,CAC/B;MAAA,CAAC,KAAK,CAAC,QAAQ,CACjB;IAAA,EAAE,IAAI,CAAC,CACR,CAAC;AACJ,CAAC;AAxCD,gCAwCC;AAED,MAAM,MAAM,GAAG,yBAAU,CAAC,MAAM,CAAC;IAC/B,OAAO,EAAE;QACP,aAAa,EAAE,KAAK;QACpB,cAAc,EAAE,eAAe;KAChC;IACD,UAAU,EAAE;QACV,aAAa,EAAE,KAAK;QACpB,cAAc,EAAE,eAAe;KAChC;CACF,CAAC,CAAC","sourcesContent":["import { useCallback } from 'react';\nimport { View, StyleSheet, ViewProps, Pressable, PressableProps } from 'react-native';\n\nimport { useTabTrigger } from './Tab-hooks';\nimport { ViewSlot, PressableSlot } from './common';\nimport { Href } from '../types';\n\nexport type TabTriggerOptions<T extends string | object> = {\n  name: string;\n  href: Href<T>;\n};\n\nexport type TabTriggerProps<T extends string | object> = PressableProps & {\n  name: string;\n  href?: Href<T>;\n  /** Forward props to child component. Useful for custom wrappers. */\n  asChild?: boolean;\n};\n\nexport type TabListProps = ViewProps & {\n  /** Forward props to child component and removes the extra <View />. Useful for custom wrappers. */\n  asChild?: boolean;\n};\n\nexport function TabList({ asChild, ...props }: TabListProps) {\n  const Comp = asChild ? ViewSlot : View;\n  return <Comp style={styles.tabList} {...props} />;\n}\n\nexport function TabTrigger<T extends string | object>({\n  asChild,\n  name,\n  href,\n  ...props\n}: TabTriggerProps<T>) {\n  const Comp = asChild ? PressableSlot : Pressable;\n  const { switchTab } = useTabTrigger();\n\n  const handleOnPress = useCallback<NonNullable<PressableProps['onPress']>>(\n    (event) => {\n      props.onPress?.(event);\n      if (event?.isDefaultPrevented()) {\n        return;\n      }\n      switchTab(name, href);\n    },\n    [props.onPress]\n  );\n\n  const handleOnLongPress = useCallback<NonNullable<PressableProps['onPress']>>(\n    (event) => {\n      props.onLongPress?.(event);\n      if (event?.isDefaultPrevented()) {\n        return;\n      }\n      switchTab(name, href);\n    },\n    [props.onPress]\n  );\n\n  return (\n    <Comp\n      style={styles.tabTrigger}\n      {...props}\n      onPress={handleOnPress}\n      onLongPress={handleOnLongPress}>\n      {props.children}\n    </Comp>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabList: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  tabTrigger: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n});\n"]}