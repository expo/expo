{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/ui/common.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Slot } from '@radix-ui/react-slot';\nimport { LinkingOptions, ParamListBase, PartialRoute, Route } from '@react-navigation/native';\nimport { ViewProps, View, SafeAreaView } from 'react-native';\n\nimport type { ExpoTabActionType } from './TabRouter';\nimport { UrlObject } from '../LocationProvider';\nimport { RouteNode } from '../Route';\nimport { resolveHref, resolveHrefStringWithSegments } from '../link/href';\nimport { sortRoutesWithInitial } from '../sortRoutes';\nimport { Href } from '../types';\nimport { routeToScreen } from '../useScreens';\n\n// Fix the TypeScript types for <Slot />. It complains about the ViewProps[\"style\"]\nexport const ViewSlot = Slot as React.ForwardRefExoticComponent<\n  ViewProps & React.RefAttributes<View>\n>;\n\nexport const SafeAreaViewSlot = Slot as React.ForwardRefExoticComponent<\n  ViewProps & React.RefAttributes<SafeAreaView>\n>;\n\nexport type ScreenTrigger<T extends string | object> =\n  | {\n      type: 'internal';\n      href: Href<T>;\n      name: string;\n    }\n  | {\n      type: 'external';\n      name: string;\n      href: string;\n    };\n\ntype JumpToNavigationAction = Extract<ExpoTabActionType, { type: 'JUMP_TO' }>;\ntype TriggerConfig =\n  | {\n      type: 'internal';\n      name: string;\n      href: string;\n      routeNode: RouteNode;\n      action: JumpToNavigationAction;\n    }\n  | { type: 'external'; name: string; href: string };\n\nexport type TriggerMap = Record<string, TriggerConfig & { index: number }>;\n\nexport function triggersToScreens(\n  triggers: ScreenTrigger<any>[],\n  layoutRouteNode: RouteNode,\n  linking: LinkingOptions<ParamListBase>,\n  initialRouteName: undefined | string,\n  parentTriggerMap: TriggerMap,\n  routeInfo: UrlObject,\n  contextKey: string\n) {\n  const configs: TriggerConfig[] = [];\n\n  for (const trigger of triggers) {\n    if (trigger.name in parentTriggerMap) {\n      const parentTrigger = parentTriggerMap[trigger.name];\n      throw new Error(\n        `Trigger ${JSON.stringify({\n          name: trigger.name,\n          href: trigger.href,\n        })} has the same name as parent trigger ${JSON.stringify({\n          name: parentTrigger.name,\n          href: parentTrigger.href,\n        })}. Triggers must have unique names.`\n      );\n    }\n\n    if (trigger.type === 'external') {\n      configs.push(trigger);\n      continue;\n    }\n\n    let resolvedHref = resolveHref(trigger.href);\n\n    if (resolvedHref.startsWith('../')) {\n      throw new Error('Trigger href cannot link to a parent directory');\n    }\n\n    const segmentsWithoutGroups = contextKey.split('/').filter((segment) => {\n      return !(segment.startsWith('(') && segment.endsWith(')'));\n    });\n\n    resolvedHref = resolveHrefStringWithSegments(\n      resolvedHref,\n      {\n        ...routeInfo,\n        segments: segmentsWithoutGroups,\n      },\n      true\n    );\n\n    let state = linking.getStateFromPath?.(resolvedHref, linking.config)?.routes[0];\n\n    if (!state) {\n      // This shouldn't occur, as you should get the global +not-found\n      console.warn(\n        `Unable to find screen for trigger ${JSON.stringify(trigger)}. Does this point to a valid screen?`\n      );\n      continue;\n    }\n\n    let routeState = state;\n\n    // The state object is the current state from the rootNavigator\n    // We need to work out the state for just this trigger\n    if (layoutRouteNode.route) {\n      while (state?.state) {\n        const previousState = state;\n        if (previousState.name === layoutRouteNode.route) break;\n        state = state.state.routes[state.state.index ?? state.state.routes.length - 1];\n      }\n      routeState = state.state?.routes[state.state.index ?? state.state.routes.length - 1] || state;\n    }\n\n    const routeNode = layoutRouteNode.children.find((child) => child.route === routeState?.name);\n    if (!routeNode) {\n      console.warn(\n        `Unable to find routeNode for trigger ${JSON.stringify(trigger)}. This might be a bug with Expo Router`\n      );\n      continue;\n    }\n\n    if (routeNode.generated && routeNode.internal && routeNode.route.includes('+not-found')) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          `Tab trigger '${trigger.name}' has the href '${trigger.href}' which points to a +not-found route.`\n        );\n      }\n      continue;\n    }\n\n    const duplicateTrigger =\n      trigger.type === 'internal' &&\n      configs.find((config): config is Extract<TriggerConfig, { type: 'internal' }> => {\n        if (config.type === 'external') {\n          return false;\n        }\n\n        return config.routeNode.route === routeNode.route;\n      });\n\n    if (duplicateTrigger) {\n      const duplicateTriggerText = `${JSON.stringify({ name: duplicateTrigger.name, href: duplicateTrigger.href })} and ${JSON.stringify({ name: trigger.name, href: trigger.href })}`;\n\n      throw new Error(\n        `A navigator cannot contain multiple trigger components that map to the same sub-segment. Consider adding a shared group and assigning a group to each trigger. Conflicting triggers:\\n\\t${duplicateTriggerText}.\\nBoth triggers map to route ${routeNode.route}.`\n      );\n    }\n\n    configs.push({\n      ...trigger,\n      href: resolvedHref,\n      routeNode,\n      action: stateToAction(state, layoutRouteNode.route),\n    });\n  }\n\n  const sortFn = sortRoutesWithInitial(initialRouteName);\n\n  const sortedConfigs = configs.sort((a, b) => {\n    // External routes should be last. They will eventually be dropped\n    if (a.type === 'external' && b.type === 'external') {\n      return 0;\n    } else if (a.type === 'external') {\n      return 1;\n    } else if (b.type === 'external') {\n      return -1;\n    }\n\n    return sortFn(a.routeNode, b.routeNode);\n  });\n\n  const children: React.JSX.Element[] = [];\n  const triggerMap: TriggerMap = { ...parentTriggerMap };\n\n  for (const [index, config] of sortedConfigs.entries()) {\n    triggerMap[config.name] = { ...config, index };\n\n    if (config.type === 'internal') {\n      children.push(routeToScreen(config.routeNode));\n    }\n  }\n  return {\n    children,\n    triggerMap,\n  };\n}\n\nexport function stateToAction(\n  state: PartialRoute<Route<string, object | undefined>> | undefined,\n  startAtRoute?: string\n): JumpToNavigationAction {\n  const rootPayload: any = {};\n  let payload = rootPayload;\n\n  let foundStartingPoint = !startAtRoute || !state?.state;\n\n  while (state) {\n    if (foundStartingPoint) {\n      if (payload === rootPayload) {\n        payload.name = state.name;\n      } else {\n        payload.screen = state.name;\n      }\n      payload.params = state.params ? { ...state.params } : {};\n\n      state = state.state?.routes[state.state?.routes.length - 1];\n\n      if (state) {\n        payload.params ??= {};\n        payload = payload.params;\n      }\n    } else {\n      if (state.name === startAtRoute) {\n        foundStartingPoint = true;\n      }\n      const nextState = state.state?.routes[state.state?.routes.length - 1];\n      if (nextState) {\n        state = nextState;\n      }\n    }\n  }\n\n  return {\n    type: 'JUMP_TO',\n    payload: rootPayload,\n  };\n}\n"]}