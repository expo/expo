{"version":3,"file":"imperative-api.js","sourceRoot":"","sources":["../src/imperative-api.ts"],"names":[],"mappings":";;;AAAA,8DAAoD;AA6EpD;;GAEG;AACU,QAAA,MAAM,GAAW;IAC5B,QAAQ,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,oBAAK,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC;IAC1D,IAAI,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,oBAAK,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IAClD,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,oBAAK,CAAC,OAAO,CAAC,KAAK,CAAC;IACxC,UAAU,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,UAAU,EAAE;IACpC,SAAS,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,oBAAK,CAAC,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC;IAC5D,UAAU,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,UAAU,EAAE;IACpC,OAAO,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,oBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;IACxD,IAAI,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,MAAM,EAAE;IAC1B,SAAS,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,SAAS,EAAE;IAClC,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,oBAAK,CAAC,SAAS,CAAC,MAAM,CAAC;IAC9C,MAAM,EAAE,GAAG,EAAE,CAAC,oBAAK,CAAC,MAAM,EAAE;CAC7B,CAAC","sourcesContent":["import { store } from './global-state/router-store';\nimport { NavigationOptions } from './global-state/routing';\nimport { Href, Route, RouteInputParams } from './types';\n\n/**\n * Returns `router` object for imperative navigation API.\n *\n * @example\n *```tsx\n * import { router } from 'expo-router';\n * import { Text } from 'react-native';\n *\n * export default function Route() {\n *\n *  return (\n *   <Text onPress={() => router.push('/home')}>Go Home</Text>\n *  );\n *}\n * ```\n */\nexport type Router = {\n  /**\n   * Goes back in the navigation history.\n   */\n  back: () => void;\n  /**\n   * Navigates to a route in the navigator's history if it supports invoking the `back` function.\n   */\n  canGoBack: () => boolean;\n  /**\n   * Navigates to the provided [`href`](#href) using a push operation if possible.\n   */\n  push: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to the provided [`href`](#href).\n   */\n  navigate: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to route without appending to the history. Can be used with\n   * [`useFocusEffect`](#usefocuseffecteffect-do_not_pass_a_second_prop)\n   * to redirect imperatively to a new screen.\n   *\n   * @see [Using `useRouter()` hook](/router/reference/redirects/) to redirect.\n   * */\n  replace: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Navigates to the a stack lower than the current screen using the provided count if possible, otherwise 1.\n   *\n   * If the current screen is the only route, it will dismiss the entire stack.\n   */\n  dismiss: (count?: number) => void;\n  /**\n   * Dismisses screens until the provided href is reached. If the href is not found, it will instead replace the current screen with the provided href.\n   */\n  dismissTo: (href: Href, options?: NavigationOptions) => void;\n  /**\n   * Returns to the first screen in the closest stack. This is similar to\n   * [popToTop](https://reactnavigation.org/docs/stack-actions/#poptotop) stack action.\n   */\n  dismissAll: () => void;\n  /**\n   * Checks if it is possible to dismiss the current screen. Returns `true` if the\n   * router is within the stack with more than one screen in stack's history.\n   *\n   */\n  canDismiss: () => boolean;\n  /**\n   * Updates the current route's query params.\n   */\n  setParams: <T extends Route>(params: Partial<RouteInputParams<T>>) => void;\n  /**\n   * Reloads the currently mounted route in experimental server mode. This can be used to re-fetch data.\n   * @hidden\n   */\n  reload: () => void;\n};\n\n/**\n * @hidden\n */\nexport const router: Router = {\n  navigate: (href, options) => store.navigate(href, options),\n  push: (href, options) => store.push(href, options),\n  dismiss: (count) => store.dismiss(count),\n  dismissAll: () => store.dismissAll(),\n  dismissTo: (href, options) => store.dismissTo(href, options),\n  canDismiss: () => store.canDismiss(),\n  replace: (href, options) => store.replace(href, options),\n  back: () => store.goBack(),\n  canGoBack: () => store.canGoBack(),\n  setParams: (params) => store.setParams(params),\n  reload: () => store.reload(),\n};\n"]}