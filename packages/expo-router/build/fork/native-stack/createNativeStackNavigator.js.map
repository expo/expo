{"version":3,"file":"createNativeStackNavigator.js","sourceRoot":"","sources":["../../../src/fork/native-stack/createNativeStackNavigator.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  type EventArg,\n  type NavigatorTypeBagBase,\n  type ParamListBase,\n  type StackActionHelpers,\n  StackActions,\n  type StackNavigationState,\n  StackRouter,\n  type StackRouterOptions,\n  type StaticConfig,\n  type TypedNavigator,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport {\n  type NativeStackNavigationEventMap,\n  type NativeStackNavigationOptions,\n  type NativeStackNavigationProp,\n  NativeStackView,\n  type NativeStackNavigatorProps,\n} from '@react-navigation/native-stack';\nimport * as React from 'react';\n\nimport { useLinkPreviewContext } from '../../link/preview/LinkPreviewContext';\n\nfunction NativeStackNavigator({\n  id,\n  initialRouteName,\n  children,\n  layout,\n  screenListeners,\n  screenOptions,\n  screenLayout,\n  UNSTABLE_router,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, describe, descriptors, navigation, NavigationContent } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    id,\n    initialRouteName,\n    children,\n    layout,\n    screenListeners,\n    screenOptions,\n    screenLayout,\n    UNSTABLE_router,\n  });\n\n  React.useEffect(\n    () =>\n      // @ts-expect-error: there may not be a tab navigator in parent\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (state.index > 0 && isFocused && !(e as EventArg<'tabPress', true>).defaultPrevented) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  // START FORK\n  const { openPreviewKey, setOpenPreviewKey } = useLinkPreviewContext();\n\n  // This is used to track the preview screen that is currently transitioning on the native side\n  const [previewTransitioningScreenId, setPreviewTransitioningScreenId] = React.useState<\n    string | undefined\n  >();\n\n  React.useEffect(() => {\n    if (previewTransitioningScreenId) {\n      // This means that the state was updated after the preview transition\n      if (state.routes.some((route) => route.key === previewTransitioningScreenId)) {\n        // We no longer need to track the preview transitioning screen\n        setPreviewTransitioningScreenId(undefined);\n      }\n    }\n  }, [state, previewTransitioningScreenId]);\n\n  const navigationWrapper = React.useMemo(() => {\n    if (openPreviewKey) {\n      const emit: (typeof navigation)['emit'] = (...args) => {\n        const { target, type, data } = args[0];\n        if (target === openPreviewKey && data && 'closing' in data && !data.closing) {\n          // onWillAppear\n          if (type === 'transitionStart') {\n            // The screen from preview will appear, so we need to start tracking it\n            setPreviewTransitioningScreenId(openPreviewKey);\n          }\n          // onAppear\n          else if (type === 'transitionEnd') {\n            // The screen from preview appeared.\n            // We can now restore the stack animation\n            setOpenPreviewKey(undefined);\n          }\n        }\n        return navigation.emit(...args);\n      };\n      return {\n        ...navigation,\n        emit,\n      };\n    }\n    return navigation;\n  }, [navigation, openPreviewKey, setOpenPreviewKey]);\n\n  const { computedState, computedDescriptors } = React.useMemo(() => {\n    // The preview screen was pushed on the native side, but react-navigation state was not updated yet\n    if (previewTransitioningScreenId) {\n      const preloadedRoute = state.preloadedRoutes.find(\n        (route) => route.key === previewTransitioningScreenId\n      );\n      if (preloadedRoute) {\n        const newState = {\n          ...state,\n          // On native side the screen is already pushed, so we need to update the state\n          preloadedRoutes: state.preloadedRoutes.filter(\n            (route) => route.key !== previewTransitioningScreenId\n          ),\n          routes: [...state.routes, preloadedRoute],\n          index: state.index + 1,\n        };\n\n        const newDescriptors =\n          previewTransitioningScreenId in descriptors\n            ? descriptors\n            : {\n                ...descriptors,\n                // We need to add the descriptor. For react-navigation this is still preloaded screen\n                // Replicating the logic from https://github.com/react-navigation/react-navigation/blob/eaf1100ac7d99cb93ba11a999549dd0752809a78/packages/native-stack/src/views/NativeStackView.native.tsx#L489\n                [previewTransitioningScreenId]: describe(preloadedRoute, true),\n              };\n\n        return {\n          computedState: newState,\n          computedDescriptors: newDescriptors,\n        };\n      }\n    }\n    return {\n      computedState: state,\n      computedDescriptors: descriptors,\n    };\n  }, [state, previewTransitioningScreenId, describe, descriptors]);\n  // END FORK\n\n  return (\n    <NavigationContent>\n      <NativeStackView\n        {...rest}\n        // START FORK\n        state={computedState}\n        navigation={navigationWrapper}\n        descriptors={computedDescriptors}\n        // state={state}\n        // navigation={navigation}\n        // descriptors={descriptors}\n        // END FORK\n        describe={describe}\n      />\n    </NavigationContent>\n  );\n}\n\nexport function createNativeStackNavigator<\n  const ParamList extends ParamListBase,\n  const NavigatorID extends string | undefined = undefined,\n  const TypeBag extends NavigatorTypeBagBase = {\n    ParamList: ParamList;\n    NavigatorID: NavigatorID;\n    State: StackNavigationState<ParamList>;\n    ScreenOptions: NativeStackNavigationOptions;\n    EventMap: NativeStackNavigationEventMap;\n    NavigationList: {\n      [RouteName in keyof ParamList]: NativeStackNavigationProp<ParamList, RouteName, NavigatorID>;\n    };\n    Navigator: typeof NativeStackNavigator;\n  },\n  const Config extends StaticConfig<TypeBag> = StaticConfig<TypeBag>,\n>(config?: Config): TypedNavigator<TypeBag, Config> {\n  return createNavigatorFactory(NativeStackNavigator)(config);\n}\n"]}