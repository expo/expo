{"version":3,"file":"extractPathFromURL.js","sourceRoot":"","sources":["../../src/fork/extractPathFromURL.ts"],"names":[],"mappings":";;;AAAA,SAAgB,gCAAgC,CAAC,GAAW;IAI1D,+EAA+E;IAC/E,oFAAoF;IAEpF,MAAM,IAAI,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;IAC1C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IAC1C,OAAO;QACL,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE;QAC5B,WAAW,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE;KAChC,CAAC;AACJ,CAAC;AAbD,4EAaC;AAED,SAAgB,uBAAuB,CAAC,GAAW;IACjD,+EAA+E;IAC/E,oFAAoF;IACpF,OAAO,GAAG,CAAC,KAAK,CAAC,yBAAyB,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACzD,CAAC;AAJD,0DAIC;AAED,8BAA8B;AAC9B,SAAS,uBAAuB,CAAC,GAAW;IAC1C;IACE,2EAA2E;IAC3E,4CAA4C;IAC5C,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,EACzB;QACA,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;KACjC;IAED,MAAM,QAAQ,GAAG,OAAO,IAAI,KAAK,WAAW,IAAI,UAAU,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC;IAEjF,oEAAoE;IACpE,IACE,QAAQ;QACR,wEAAwE;QACxE,+CAA+C;QAC/C,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC,EAC1B;QACA,MAAM,QAAQ,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,QAAQ,EAAE;YACZ,OAAO,YAAY,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC;SACxC;QACD,sCAAsC;QACtC,MAAM,WAAW,GAAG,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,IAAI,WAAW,EAAE;YACf,OAAO,YAAY,CAAC,OAAO,GAAG,WAAW,CAAC,CAAC;SAC5C;QAED,OAAO,EAAE,CAAC;KACX;IAED,gCAAgC;IAEhC,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;AAC3B,CAAC;AAED,0EAA0E;AAC1E,SAAS,uBAAuB,CAAC,GAAQ;IACvC,OAAO,GAAG,CAAC,QAAQ,KAAK,yBAAyB,CAAC;AACpD,CAAC;AAED,SAAS,YAAY,CAAC,GAAW;IAC/B,IAAI,GAAQ,CAAC;IACb,IAAI;QACF,yEAAyE;QACzE,+BAA+B;QAC/B,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;KACpB;IAAC,MAAM;QACN,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,uBAAuB,CAAC,GAAG,CAAC,EAAE;QAChC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YAChC,OAAO,EAAE,CAAC;SACX;QACD,MAAM,WAAW,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC;QACjD,OAAO,uBAAuB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;KACxD;IAED,IAAI,OAAO,GAAG,EAAE,CAAC;IAEjB,IAAI,GAAG,CAAC,IAAI,EAAE;QACZ,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC;KACrB;IAED,IAAI,GAAG,CAAC,QAAQ,EAAE;QAChB,OAAO,IAAI,GAAG,CAAC,QAAQ,CAAC;KACzB;IAED,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,MAAM;QACpB,CAAC,CAAC,EAAE;QACJ,CAAC,CAAC,wEAAwE;YACxE,CAAC,GAAG,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAE/F,IAAI,EAAE,EAAE;QACN,OAAO,IAAI,GAAG,GAAG,EAAE,CAAC;KACrB;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAgB,sBAAsB,CAAC,MAAc,EAAE;IACrD,OAAO,CACL,uBAAuB,CAAC,GAAG,CAAC;QAC1B,sEAAsE;SACrE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CACtB,CAAC;AACJ,CAAC;AAND,wDAMC","sourcesContent":["export function parsePathAndParamsFromExpoGoLink(url: string): {\n  pathname: string;\n  queryString: string;\n} {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n\n  const href = parsePathFromExpoGoLink(url);\n  const results = href.match(/(.*?)(\\?.*)/);\n  return {\n    pathname: results?.[1] ?? '',\n    queryString: results?.[2] ?? '',\n  };\n}\n\nexport function parsePathFromExpoGoLink(url: string): string {\n  // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n  // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n  return url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1] ?? '';\n}\n\n// This is only run on native.\nfunction extractExactPathFromURL(url: string): string {\n  if (\n    // If a universal link / app link / web URL is used, we should use the path\n    // from the URL, while stripping the origin.\n    url.match(/^https?:\\/\\//)\n  ) {\n    const { origin, href } = new URL(url);\n    return href.replace(origin, '');\n  }\n\n  const isExpoGo = typeof expo !== 'undefined' && globalThis.expo?.modules?.ExpoGo;\n\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\n  if (\n    isExpoGo &&\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\n    // are passed through to other apps in Expo Go.\n    url.match(/^exp(s)?:\\/\\//)\n  ) {\n    const pathname = parsePathFromExpoGoLink(url);\n    if (pathname) {\n      return fromDeepLink('a://' + pathname);\n    }\n    // Match the `?.*` segment of the URL.\n    const queryParams = url.match(/exps?:\\/\\/.*\\?(.*)/)?.[1];\n    if (queryParams) {\n      return fromDeepLink('a://?' + queryParams);\n    }\n\n    return '';\n  }\n\n  // TODO: Support dev client URLs\n\n  return fromDeepLink(url);\n}\n\n/** Major hack to support the makeshift expo-development-client system. */\nfunction isExpoDevelopmentClient(url: URL): boolean {\n  return url.hostname === 'expo-development-client';\n}\n\nfunction fromDeepLink(url: string): string {\n  let res: URL;\n  try {\n    // This is for all standard deep links, e.g. `foobar://` where everything\n    // after the `://` is the path.\n    res = new URL(url);\n  } catch {\n    return url;\n  }\n\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.searchParams.get('url')) {\n      return '';\n    }\n    const incomingUrl = res.searchParams.get('url')!;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n\n  let results = '';\n\n  if (res.host) {\n    results += res.host;\n  }\n\n  if (res.pathname) {\n    results += res.pathname;\n  }\n\n  const qs = !res.search\n    ? ''\n    : // @ts-ignore: `entries` is not on `URLSearchParams` in some typechecks.\n      [...res.searchParams.entries()].map(([k, v]) => `${k}=${decodeURIComponent(v)}`).join('&');\n\n  if (qs) {\n    results += '?' + qs;\n  }\n\n  return results;\n}\n\nexport function extractExpoPathFromURL(url: string = '') {\n  return (\n    extractExactPathFromURL(url)\n      // TODO: We should get rid of this, dropping specificities is not good\n      .replace(/^\\//, '')\n  );\n}\n"]}