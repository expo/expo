{"version":3,"file":"useLinking.native.js","sourceRoot":"","sources":["../../src/fork/useLinking.native.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qFAAqF;AACrF,6CAA6C;AAC7C,4EAA4E;AAC5E,2GAA2G;AAC3G,iDAKgC;AAEhC,6CAA+B;AAC/B,+CAAiD;AAEjD,6DAA8D;AAM9D,MAAM,eAAe,GAAa,EAAE,CAAC;AAErC,SAAwB,UAAU,CAChC,GAA2D,EAC3D;AACE,kBAAkB;AAClB,YAAY;AACZ,MAAM,EACN,MAAM,EACN,aAAa,GAAG,GAAG,EAAE,CACnB,OAAO,CAAC,IAAI,CAAC;IACX,sBAAO,CAAC,aAAa,EAAE;IACvB,IAAI,OAAO,CAAY,CAAC,OAAO,EAAE,EAAE;IACjC,wDAAwD;IACxD,uEAAuE;IACvE,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CACzB;CACF,CAAC,EACJ,SAAS,GAAG,CAAC,QAAQ,EAAE,EAAE;IACvB,MAAM,QAAQ,GAAG,CAAC,EAAE,GAAG,EAAmB,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAE7D,MAAM,YAAY,GAAG,sBAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,CAEhD,CAAC;IAEd,OAAO,GAAG,EAAE;QACV,YAAY,EAAE,MAAM,EAAE,CAAC;IACzB,CAAC,CAAC;AACJ,CAAC,EACD,gBAAgB,GAAG,uBAAuB,EAC1C,kBAAkB,GAAG,yBAAyB,GACtC;IAEV,wDAAwD;IAExD,KAAK,CAAC,SAAS,CACb,GAAG,EAAE;QACH,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;YACzC,OAAO,SAAS,CAAC;SAClB;QAED,qBAAqB;QACrB,sBAAsB;QACtB,IAAI;QAEJ;QACE,uBAAuB;QACvB,eAAe,CAAC,MAAM,EACtB;YACA,OAAO,CAAC,KAAK,CACX;gBACE,6KAA6K;gBAC7K,uFAAuF;gBACvF,4DAA4D;gBAC5D,uBAAQ,CAAC,EAAE,KAAK,SAAS;oBACvB,CAAC,CAAC,sJAAsJ;oBACxJ,CAAC,CAAC,EAAE;aACP;iBACE,IAAI,CAAC,IAAI,CAAC;iBACV,IAAI,EAAE,CACV,CAAC;SACH;QAED,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC;QAEzB,2BAA2B;QAC3B,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI;QAEJ,OAAO,GAAG,EAAE;YACV,MAAM,KAAK,GAAG,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAE/C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;gBACd,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAClC;QACH,CAAC,CAAC;IACJ,CAAC,EACD;IACE,WAAW;IACX,cAAc;KACf,CACF,CAAC;IAEF,kGAAkG;IAClG,oFAAoF;IACpF,yGAAyG;IACzG,8CAA8C;IAC9C,gDAAgD;IAChD,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACvC,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;IACrD,MAAM,mBAAmB,GAAG,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC3D,MAAM,qBAAqB,GAAG,KAAK,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IAE/D,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,gCAAgC;QAChC,kCAAkC;QAClC,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC;QAC3B,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC;QAC3B,gBAAgB,CAAC,OAAO,GAAG,aAAa,CAAC;QACzC,mBAAmB,CAAC,OAAO,GAAG,gBAAgB,CAAC;QAC/C,qBAAqB,CAAC,OAAO,GAAG,kBAAkB,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,MAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,GAA8B,EAAE,EAAE;QAC3E,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE;YAC1D,OAAO,SAAS,CAAC;SAClB;QAED,+CAA+C;QAC/C,MAAM,IAAI,GAAG,IAAA,2CAAsB,EAAC,GAAG,CAAC,CAAC;QAEzC,OAAO,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC/F,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QAC7C,sCAAsC;QACtC,4BAA4B;QAC5B,MAAM,GAAG,GAAG,gBAAgB,CAAC,OAAO,EAAE,CAAC;QAEvC,IAAI,GAAG,IAAI,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC1C,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;gBACtB,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;gBAEnC,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;SACJ;QAED,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI;QAEJ,MAAM,QAAQ,GAAG;YACf,IAAI,CAAC,WAAsD;gBACzD,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC;gBACrB,OAAO,QAAQ,CAAC;YAClB,CAAC;YACD,KAAK;gBACH,OAAO,QAAQ,CAAC;YAClB,CAAC;SACF,CAAC;QAEF,OAAO,QAAgD,CAAC;IAC1D,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAEtB,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,QAAQ,GAAG,CAAC,GAAW,EAAE,EAAE;YAC/B,oBAAoB;YACpB,cAAc;YACd,MAAM;YAEN,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC;YAC/B,MAAM,KAAK,GAAG,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAE5D,IAAI,UAAU,IAAI,KAAK,EAAE;gBACvB,qEAAqE;gBACrE,0DAA0D;gBAC1D,MAAM,SAAS,GAAG,UAAU,CAAC,YAAY,EAAE,CAAC;gBAE5C,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE;oBACrE,OAAO,CAAC,IAAI,CACV,0SAA0S,CAC3S,CAAC;oBACF,OAAO;iBACR;gBAED,MAAM,MAAM,GAAG,qBAAqB,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;gBAEvE,IAAI,MAAM,KAAK,SAAS,EAAE;oBACxB,IAAI;wBACF,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;qBAC7B;oBAAC,OAAO,CAAC,EAAE;wBACV,uCAAuC;wBACvC,6FAA6F;wBAC7F,OAAO,CAAC,IAAI,CACV,qDAAqD,GAAG,MACtD,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,IAAI,IAAI,SAAS,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CACrE,EAAE,CACH,CAAC;qBACH;iBACF;qBAAM;oBACL,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iBAC7B;aACF;QACH,CAAC,CAAC;QAEF,OAAO,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC,EAAE;QACD,WAAW;QACX,eAAe;QACf,GAAG;QACH,SAAS;KACV,CAAC,CAAC;IAEH,OAAO;QACL,eAAe;KAChB,CAAC;AACJ,CAAC;AAlMD,6BAkMC","sourcesContent":["// Forked from react-navigation with a custom `extractPathFromURL` that automatically\n// allows any prefix and parses Expo Go URLs.\n// For simplicity the following are disabled: enabled, prefixes, independent\n// https://github.com/react-navigation/react-navigation/blob/main/packages/native/src/useLinking.native.tsx\nimport {\n  getActionFromState as getActionFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { LinkingOptions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { Linking, Platform } from 'react-native';\n\nimport { extractExpoPathFromURL } from './extractPathFromURL';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype Options = LinkingOptions<ParamListBase>;\n\nconst linkingHandlers: symbol[] = [];\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    // enabled = true,\n    // prefixes,\n    filter,\n    config,\n    getInitialURL = () =>\n      Promise.race([\n        Linking.getInitialURL(),\n        new Promise<undefined>((resolve) =>\n          // Timeout in 150ms if `getInitialState` doesn't resolve\n          // Workaround for https://github.com/facebook/react-native/issues/25675\n          setTimeout(resolve, 150)\n        ),\n      ]),\n    subscribe = (listener) => {\n      const callback = ({ url }: { url: string }) => listener(url);\n\n      const subscription = Linking.addEventListener('url', callback) as\n        | { remove(): void }\n        | undefined;\n\n      return () => {\n        subscription?.remove();\n      };\n    },\n    getStateFromPath = getStateFromPathDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  //   const independent = useNavigationIndependentTree();\n\n  React.useEffect(\n    () => {\n      if (process.env.NODE_ENV === 'production') {\n        return undefined;\n      }\n\n      // if (independent) {\n      //   return undefined;\n      // }\n\n      if (\n        // enabled !== false &&\n        linkingHandlers.length\n      ) {\n        console.error(\n          [\n            'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n            \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n            '- Only a single instance of the root component is rendered',\n            Platform.OS === 'android'\n              ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\n              : '',\n          ]\n            .join('\\n')\n            .trim()\n        );\n      }\n\n      const handler = Symbol();\n\n      // if (enabled !== false) {\n      linkingHandlers.push(handler);\n      // }\n\n      return () => {\n        const index = linkingHandlers.indexOf(handler);\n\n        if (index > -1) {\n          linkingHandlers.splice(index, 1);\n        }\n      };\n    },\n    [\n      // enabled,\n      // independent\n    ]\n  );\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  //   const enabledRef = React.useRef(enabled);\n  //   const prefixesRef = React.useRef(prefixes);\n  const filterRef = React.useRef(filter);\n  const configRef = React.useRef(config);\n  const getInitialURLRef = React.useRef(getInitialURL);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    // enabledRef.current = enabled;\n    // prefixesRef.current = prefixes;\n    filterRef.current = filter;\n    configRef.current = config;\n    getInitialURLRef.current = getInitialURL;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const getStateFromURL = React.useCallback((url: string | null | undefined) => {\n    if (!url || (filterRef.current && !filterRef.current(url))) {\n      return undefined;\n    }\n\n    // NOTE(EvanBacon): This is the important part.\n    const path = extractExpoPathFromURL(url);\n\n    return path !== undefined ? getStateFromPathRef.current(path, configRef.current) : undefined;\n  }, []);\n\n  const getInitialState = React.useCallback(() => {\n    // let state: ResultState | undefined;\n    // if (enabledRef.current) {\n    const url = getInitialURLRef.current();\n\n    if (url != null && typeof url !== 'string') {\n      return url.then((url) => {\n        const state = getStateFromURL(url);\n\n        return state;\n      });\n    }\n\n    const state = getStateFromURL(url);\n    // }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        onfulfilled?.(state);\n        return thenable;\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n  }, [getStateFromURL]);\n\n  React.useEffect(() => {\n    const listener = (url: string) => {\n      //   if (!enabled) {\n      //     return;\n      //   }\n\n      const navigation = ref.current;\n      const state = navigation ? getStateFromURL(url) : undefined;\n\n      if (navigation && state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        const action = getActionFromStateRef.current(state, configRef.current);\n\n        if (action !== undefined) {\n          try {\n            navigation.dispatch(action);\n          } catch (e) {\n            // Ignore any errors from deep linking.\n            // This could happen in case of malformed links, navigation object not being initialized etc.\n            console.warn(\n              `An error occurred when trying to handle the link '${url}': ${\n                typeof e === 'object' && e != null && 'message' in e ? e.message : e\n              }`\n            );\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      }\n    };\n\n    return subscribe(listener);\n  }, [\n    // enabled,\n    getStateFromURL,\n    ref,\n    subscribe,\n  ]);\n\n  return {\n    getInitialState,\n  };\n}\n"]}