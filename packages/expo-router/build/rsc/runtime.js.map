{"version":3,"file":"runtime.js","sourceRoot":"","sources":["../../src/rsc/runtime.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAIH,4FAA4F;AAC5F,4GAA4G;AAC5G,MAAM,uCAAuC,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,KAAK,KAAK,CAAC;AAE1F,UAAU,CAAC,sBAAsB,GAAG,MAAM,CAAC,GAAG,uBAAuB,mBAAmB,CAAC,CAAC;AAC1F,UAAU,CAAC,mBAAmB,GAAG,CAAC,EAAE,EAAE,EAAE;IACtC,uJAAuJ;IACvJ,mCAAmC;IAEnC,gCAAgC;IAChC,MAAM,QAAQ,GAAG,UAAU,CAAC,gBAAgB,CAAC;IAC7C,IAAI,uCAAuC,EAAE;QAC3C,gCAAgC;QAChC,UAAU,CAAC,gBAAgB,GAAG,CAAC,GAAG,EAAE,EAAE;YACpC,sHAAsH;YACtH,MAAM,GAAG,CAAC;QACZ,CAAC,CAAC;KACH;IACD,IAAI;QACF,OAAO,MAAM,CAAC,GAAG,uBAAuB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;KACpD;YAAS;QACR,uCAAuC;QACvC,IAAI,uCAAuC,EAAE;YAC3C,gCAAgC;YAChC,UAAU,CAAC,gBAAgB,GAAG,QAAQ,CAAC;SACxC;KACF;AACH,CAAC,CAAC","sourcesContent":["/**\n * Copyright Â© 2024 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\ndeclare let __METRO_GLOBAL_PREFIX__: string;\n\n// React Native's error handling is full of bugs which cause the app to crash in production.\n// We'll disable their handling in production native builds to ensure missing modules are shown to the user.\nconst disableReactNativeMissingModuleHandling = !__DEV__ && process.env.EXPO_OS !== 'web';\n\nglobalThis.__webpack_chunk_load__ = global[`${__METRO_GLOBAL_PREFIX__}__loadBundleAsync`];\nglobalThis.__webpack_require__ = (id) => {\n  // This logic can be tested by running a production iOS build without virtual client boundaries. This will result in all split chunks being missing and\n  // errors being thrown on RSC load.\n\n  // @ts-expect-error: Not on type\n  const original = ErrorUtils.reportFatalError;\n  if (disableReactNativeMissingModuleHandling) {\n    // @ts-expect-error: Not on type\n    ErrorUtils.reportFatalError = (err) => {\n      // Throw the error so the __r function exits as expected. The error will then be caught by the nearest error boundary.\n      throw err;\n    };\n  }\n  try {\n    return global[`${__METRO_GLOBAL_PREFIX__}__r`](id);\n  } finally {\n    // Restore the original error handling.\n    if (disableReactNativeMissingModuleHandling) {\n      // @ts-expect-error: Not on type\n      ErrorUtils.reportFatalError = original;\n    }\n  }\n};\n"]}