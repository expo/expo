{"version":3,"file":"expo-definedRouter.js","sourceRoot":"","sources":["../../../src/rsc/router/expo-definedRouter.ts"],"names":[],"mappings":";;AAAA,2CAAuC;AAEvC,iDAA6C;AAE7C,qDAA+C;AAC/C,6CAA+C;AAC/C,iDAA8C;AAE9C,kBAAe,IAAA,0BAAW,EAAC,KAAK,EAAE,EAAE,UAAU,EAAE,YAAY,EAAE,qBAAqB,EAAE,EAAE,EAAE;IACvF,MAAM,MAAM,GAAG,IAAA,wBAAS,EAAC,UAAG,EAAE;QAC5B,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO;QAC7B,aAAa,EAAE,IAAI;QACnB,UAAU,EAAE,MAAM;KACnB,CAAC,CAAC;IAEH,IAAI,CAAC,MAAM;QAAE,OAAO;IAEpB,SAAS,SAAS,CAAC,KAAgB;QACjC,MAAM,MAAM,GAAG,IAAA,wBAAa,EAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QACvE,YAAY,CAAC;YACX,8DAA8D;YAC9D,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,OAAe;YAC5C,IAAI,EAAE,MAAa;YACnB,cAAc;YACd,MAAM,EAAE,QAAQ;YAChB,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,iBAAiB;SACvC,CAAC,CAAC;QAEH,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,uBAAU,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAChD,IAAI,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAC3B,SAAS,CAAC,KAAK,CAAC,CAAC;aAClB;iBAAM;gBACL,MAAM,MAAM,GAAG,IAAA,wBAAa,EAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBACvE,UAAU,CAAC;oBACT,8DAA8D;oBAC9D,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC,OAAc;oBAC3C,IAAI,EAAE,MAAa;oBACnB,MAAM,EAAE,SAAS;oBACjB,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC,iBAAiB;iBACvC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,MAAM,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC","sourcesContent":["import { ctx } from 'expo-router/_ctx';\n\nimport { createPages } from './create-pages';\nimport type { RouteNode } from '../../Route';\nimport { getRoutes } from '../../getRoutesSSR';\nimport { getContextKey } from '../../matchers';\nimport { sortRoutes } from '../../sortRoutes';\n\nexport default createPages(async ({ createPage, createLayout, unstable_setBuildData }) => {\n  const routes = getRoutes(ctx, {\n    platform: process.env.EXPO_OS,\n    skipGenerated: true,\n    importMode: 'lazy',\n  });\n\n  if (!routes) return;\n\n  function addLayout(route: RouteNode) {\n    const normal = getContextKey(route.contextKey).replace(/\\/index$/, '');\n    createLayout({\n      // NOTE(EvanBacon): Support routes with top-level \"use client\"\n      component: route.loadRoute().default! as any,\n      path: normal as any,\n      // staticPaths\n      render: 'static',\n      ...route.loadRoute().unstable_settings,\n    });\n\n    route.children.sort(sortRoutes).forEach((child) => {\n      if (child.type === 'layout') {\n        addLayout(child);\n      } else {\n        const normal = getContextKey(child.contextKey).replace(/\\/index$/, '');\n        createPage({\n          // NOTE(EvanBacon): Support routes with top-level \"use client\"\n          component: child.loadRoute().default as any,\n          path: normal as any,\n          render: 'dynamic',\n          ...child.loadRoute().unstable_settings,\n        });\n      }\n    });\n  }\n\n  addLayout(routes);\n});\n"]}