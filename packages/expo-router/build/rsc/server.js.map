{"version":3,"file":"server.js","sourceRoot":"","sources":["../../src/rsc/server.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright © 2024 650 Industries.\n * Copyright © 2024 2023 Daishi Kato\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { type AsyncLocalStorage } from 'node:async_hooks';\nimport type { ReactNode } from 'react';\n\nimport type { PathSpec } from './path';\n\ndeclare let globalThis: {\n  __EXPO_RSC_CACHE__?: Map<string, any>;\n};\n\ntype Config = any;\n\ntype Elements = Record<string, ReactNode>;\n\nexport type BuildConfig = {\n  pathname: string | PathSpec; // TODO drop support for string?\n  isStatic?: boolean | undefined;\n  entries?: {\n    input: string;\n    skipPrefetch?: boolean | undefined;\n    isStatic?: boolean | undefined;\n  }[];\n  context?: Record<string, unknown>;\n  customCode?: string; // optional code to inject TODO hope to remove this\n  customData?: unknown; // should be serializable with JSON.stringify\n}[];\n\nexport type RenderEntries = (\n  input: string,\n  options: {\n    params: unknown | undefined;\n    buildConfig: BuildConfig | undefined;\n  }\n) => Promise<Elements | null>;\n\nexport type GetBuildConfig = (\n  unstable_collectClientModules: (input: string) => Promise<string[]>\n) => Promise<BuildConfig>;\n\nexport type GetSsrConfig = (\n  pathname: string,\n  options: {\n    searchParams: URLSearchParams;\n    buildConfig?: BuildConfig | undefined;\n  }\n) => Promise<{\n  input: string;\n  searchParams?: URLSearchParams;\n  html: ReactNode;\n} | null>;\n\nexport function defineEntries(\n  renderEntries: RenderEntries,\n  getBuildConfig?: GetBuildConfig,\n  getSsrConfig?: GetSsrConfig\n) {\n  return { renderEntries, getBuildConfig, getSsrConfig };\n}\n\nexport type EntriesDev = {\n  default: ReturnType<typeof defineEntries>;\n};\n\nexport type EntriesPrd = EntriesDev & {\n  loadConfig: () => Promise<Config>;\n  loadModule: (id: string) => Promise<unknown>;\n  dynamicHtmlPaths: [pathSpec: PathSpec, htmlHead: string][];\n  publicIndexHtml: string;\n};\n\ntype RenderStore<> = {\n  rerender: (input: string, params?: unknown) => void;\n  context: Record<string, unknown>;\n};\n\n// TODO(EvanBacon): This can leak between platforms and runs.\n// We need to share this module between the server action module and the renderer module, per platform, and invalidate on refreshes.\nfunction getGlobalCacheForPlatform(): Pick<AsyncLocalStorage<RenderStore>, 'getStore' | 'run'> {\n  if (!globalThis.__EXPO_RSC_CACHE__) {\n    globalThis.__EXPO_RSC_CACHE__ = new Map();\n  }\n\n  if (globalThis.__EXPO_RSC_CACHE__.has(process.env.EXPO_OS!)) {\n    return globalThis.__EXPO_RSC_CACHE__.get(process.env.EXPO_OS!)!;\n  }\n  try {\n    const { AsyncLocalStorage } = require('node:async_hooks');\n    // @ts-expect-error: This is a Node.js feature.\n    const serverCache = new AsyncLocalStorage<RenderStore>();\n    globalThis.__EXPO_RSC_CACHE__.set(process.env.EXPO_OS!, serverCache);\n    return serverCache;\n  } catch (error) {\n    console.log('[RSC]: Failed to create cache:', error);\n\n    // Fallback to a simple in-memory cache.\n    const cache = new Map();\n    const serverCache = {\n      getStore: () => cache.get('store'),\n      run: <T>(store: RenderStore, fn: () => T) => {\n        cache.set('store', store);\n        try {\n          return fn();\n        } finally {\n          cache.delete('store');\n        }\n      },\n    };\n    globalThis.__EXPO_RSC_CACHE__.set(process.env.EXPO_OS!, serverCache);\n    return serverCache;\n  }\n}\n\nlet previousRenderStore: RenderStore | undefined;\nlet currentRenderStore: RenderStore | undefined;\n\nconst renderStorage = getGlobalCacheForPlatform();\n\n/**\n * This is an internal function and not for public use.\n */\nexport const runWithRenderStore = <T>(renderStore: RenderStore, fn: () => T): T => {\n  if (renderStorage) {\n    return renderStorage.run(renderStore, fn);\n  }\n  previousRenderStore = currentRenderStore;\n  currentRenderStore = renderStore;\n  try {\n    return fn();\n  } finally {\n    currentRenderStore = previousRenderStore;\n  }\n};\n\nexport function rerender(input: string, params?: unknown) {\n  const renderStore = renderStorage?.getStore() ?? currentRenderStore;\n  if (!renderStore) {\n    throw new Error('Render store is not available');\n  }\n  renderStore.rerender(input, params);\n}\n\nexport function getContext<\n  RscContext extends Record<string, unknown> = Record<string, unknown>,\n>(): RscContext {\n  const renderStore = renderStorage?.getStore() ?? currentRenderStore;\n  if (!renderStore) {\n    throw new Error('Render store is not available');\n  }\n  return renderStore.context as RscContext;\n}\n"]}