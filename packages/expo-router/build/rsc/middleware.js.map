{"version":3,"file":"middleware.js","sourceRoot":"","sources":["../../src/rsc/middleware.ts"],"names":[],"mappings":";;;;;;AASA,2EAAqE;AACrE,0DAA6B;AAE7B,iDAA2C;AAE3C,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,0BAA0B,CAAC,CAAC;AAE3D,kEAAkE;AAClE,MAAM,gBAAgB,GAAG,IAAI,GAAG,EAAe,CAAC;AAEhD,SAAS,mBAAmB,CAAC,QAAgB;IAC3C,0GAA0G;IAC1G,IAAI,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QAClC,OAAO,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC;KACxC;IAED,MAAM,OAAO,GAAG,EAAE,CAAC;IAEnB,gBAAgB,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACxC,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,cAAc,CAAC,GAAQ;IAC9B,IAAI,SAAS,IAAI,GAAG,IAAI,OAAO,GAAG,CAAC,OAAO,KAAK,QAAQ,IAAI,GAAG,CAAC,OAAO,EAAE;QACtE,MAAM,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC;QACxB,IAAI,SAAS,IAAI,GAAG,IAAI,OAAO,GAAG,CAAC,OAAO,KAAK,QAAQ,IAAI,GAAG,CAAC,OAAO,EAAE;YACtE,OAAO,GAAG,CAAC,OAAO,CAAC;SACpB;QACD,OAAO,GAAG,CAAC,OAAO,CAAC;KACpB;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,KAAK,UAAU,uBAAuB,CACpC,UAAkB,EAClB,QAAgB;IAahB,MAAM,QAAQ,GAAG,aAAa,QAAQ,qBAAqB,CAAC;IAC5D,OAAO,cAAc,CAAC,MAAM,IAAA,wCAAiB,EAAC,QAAQ,CAAC,CAAC,CAAC;AAC3D,CAAC;AAED,KAAK,UAAU,cAAc,CAC3B,UAAkB,EAClB,QAAgB;IAahB,MAAM,QAAQ,GAAG,aAAa,QAAQ,kBAAkB,CAAC;IACzD,OAAO,cAAc,CAAC,MAAM,IAAA,wCAAiB,EAAC,QAAQ,CAAC,CAAC,CAAC;AAC3D,CAAC;AAOM,KAAK,UAAU,yBAAyB,CAC7C,UAAkB,EAClB,OAAkB,EAClB,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,OAAO,EAAiB;IAE5F,IAAI,MAAM,KAAK,MAAM,IAAI,CAAC,IAAI,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;KACzF;IAED,MAAM,OAAO,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAE9C,OAAO,CAAC,uBAAuB,CAAC,GAAG,OAAO,CAAC;IAE3C,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;IAEvC,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC/D,MAAM,cAAc,GAAG,MAAM,uBAAuB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC3E,OAAO,IAAA,wBAAS,EACd;QACE,IAAI,EAAE,IAAI,IAAI,SAAS;QACvB,OAAO;QACP,MAAM;QACN,KAAK;QACL,WAAW;QACX,WAAW,EAAE,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC;KAC/C,EACD;QACE,WAAW,EAAE,IAAI;QAEjB,kBAAkB,CAAC,IAAY,EAAE,QAAiB;YAChD,KAAK,CAAC,oBAAoB,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;YAEhD,IAAI,QAAQ,EAAE;gBACZ,IAAI,CAAC,CAAC,IAAI,IAAI,cAAc,CAAC,EAAE;oBAC7B,MAAM,IAAI,KAAK,CACb,kDAAkD,IAAI,KAAK,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,CAC5F,CAAC;iBACH;gBAED,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;gBACzC,OAAO;oBACL,EAAE;oBACF,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;iBAC7B,CAAC;aACH;YAED,IAAI,CAAC,CAAC,IAAI,IAAI,WAAW,CAAC,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,wCAAwC,IAAI,EAAE,CAAC,CAAC;aACjE;YAED,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;YACtC,OAAO;gBACL,EAAE;gBACF,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;aAC7B,CAAC;QACJ,CAAC;QACD,KAAK,CAAC,mBAAmB,CAAC,IAAI;YAC5B,KAAK,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,mBAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,GAAG,MAAM,IAAA,wCAAiB,EAAC,QAAQ,CAAC,CAAC;YAE5C,wGAAwG;YACxG,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;gBACjC,OAAO,CAAC,CAAC,OAAO,CAAC;aAClB;YACD,OAAO,CAAC,CAAC;QACX,CAAC;QAED,OAAO,EAAE,OAAQ;KAClB,CACF,CAAC;AACJ,CAAC;AAvED,8DAuEC;AAEM,KAAK,UAAU,cAAc,CAClC,UAAkB,EAClB,IAAmB;IAEnB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/B,OAAO,yBAAyB,CAC9B,UAAU,EACV;QACE,MAAM,EAAE,GAAG,EAAE;YACX,mFAAmF;YACnF,MAAM,QAAQ,GAAG,aAAa,QAAQ,YAAY,CAAC;YACnD,OAAO,IAAA,wCAAiB,EAAC,QAAQ,CAAC,CAAC;QACrC,CAAC;KACF,EACD,IAAI,CACL,CAAC;AACJ,CAAC;AAhBD,wCAgBC","sourcesContent":["/**\n * Copyright Â© 2024 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n// This module is bundled with Metro in web/react-server mode and redirects to platform specific renderers.\nimport type { RenderRscArgs } from '@expo/server/build/middleware/rsc';\nimport { asyncServerImport } from 'expo-router/_async-server-import';\nimport path from 'node:path';\n\nimport { renderRsc } from './rsc-renderer';\n\nconst debug = require('debug')('expo:server:rsc-renderer');\n\n// Tracking the implementation in expo/cli's MetroBundlerDevServer\nconst rscRenderContext = new Map<string, any>();\n\nfunction getRscRenderContext(platform: string) {\n  // NOTE(EvanBacon): We memoize this now that there's a persistent server storage cache for Server Actions.\n  if (rscRenderContext.has(platform)) {\n    return rscRenderContext.get(platform)!;\n  }\n\n  const context = {};\n\n  rscRenderContext.set(platform, context);\n  return context;\n}\n\nfunction interopDefault(mod: any) {\n  if ('default' in mod && typeof mod.default === 'object' && mod.default) {\n    const def = mod.default;\n    if ('default' in def && typeof def.default === 'object' && def.default) {\n      return def.default;\n    }\n    return mod.default;\n  }\n  return mod;\n}\n\nasync function getServerActionManifest(\n  distFolder: string,\n  platform: string\n): Promise<\n  Record<\n    // Input ID\n    string,\n    [\n      // Metro ID\n      string,\n      // Chunk location.\n      string,\n    ]\n  >\n> {\n  const filePath = `../../rsc/${platform}/action-manifest.js`;\n  return interopDefault(await asyncServerImport(filePath));\n}\n\nasync function getSSRManifest(\n  distFolder: string,\n  platform: string\n): Promise<\n  Record<\n    // Input ID\n    string,\n    [\n      // Metro ID\n      string,\n      // Chunk location.\n      string,\n    ]\n  >\n> {\n  const filePath = `../../rsc/${platform}/ssr-manifest.js`;\n  return interopDefault(await asyncServerImport(filePath));\n}\n\n// The import map allows us to use external modules from different bundling contexts.\ntype ImportMap = {\n  router: () => Promise<typeof import('./router/expo-definedRouter')>;\n};\n\nexport async function renderRscWithImportsAsync(\n  distFolder: string,\n  imports: ImportMap,\n  { body, platform, searchParams, config, method, input, contentType, headers }: RenderRscArgs\n): Promise<ReadableStream<any>> {\n  if (method === 'POST' && !body) {\n    throw new Error('Server request must be provided when method is POST (server actions)');\n  }\n\n  const context = getRscRenderContext(platform);\n\n  context['__expo_requestHeaders'] = headers;\n\n  const entries = await imports.router();\n\n  const ssrManifest = await getSSRManifest(distFolder, platform);\n  const actionManifest = await getServerActionManifest(distFolder, platform);\n  return renderRsc(\n    {\n      body: body ?? undefined,\n      context,\n      config,\n      input,\n      contentType,\n      decodedBody: searchParams.get('x-expo-params'),\n    },\n    {\n      isExporting: true,\n\n      resolveClientEntry(file: string, isServer: boolean) {\n        debug('resolveClientEntry', file, { isServer });\n\n        if (isServer) {\n          if (!(file in actionManifest)) {\n            throw new Error(\n              `Could not find file in server action manifest: ${file}. ${JSON.stringify(actionManifest)}`\n            );\n          }\n\n          const [id, chunk] = actionManifest[file];\n          return {\n            id,\n            chunks: chunk ? [chunk] : [],\n          };\n        }\n\n        if (!(file in ssrManifest)) {\n          throw new Error(`Could not find file in SSR manifest: ${file}`);\n        }\n\n        const [id, chunk] = ssrManifest[file];\n        return {\n          id,\n          chunks: chunk ? [chunk] : [],\n        };\n      },\n      async loadServerModuleRsc(file) {\n        debug('loadServerModuleRsc', file);\n        const filePath = path.join('../../../', file);\n        const m = await asyncServerImport(filePath);\n\n        // TODO: This is a hack to workaround a cloudflare/metro issue where there's an extra `default` wrapper.\n        if (typeof caches !== 'undefined') {\n          return m.default;\n        }\n        return m;\n      },\n\n      entries: entries!,\n    }\n  );\n}\n\nexport async function renderRscAsync(\n  distFolder: string,\n  args: RenderRscArgs\n): Promise<ReadableStream<any>> {\n  const platform = args.platform;\n  return renderRscWithImportsAsync(\n    distFolder,\n    {\n      router: () => {\n        // Assumes this file is saved to: `dist/server/_expo/functions/_flight/[...rsc].js`\n        const filePath = `../../rsc/${platform}/router.js`;\n        return asyncServerImport(filePath);\n      },\n    },\n    args\n  );\n}\n"]}