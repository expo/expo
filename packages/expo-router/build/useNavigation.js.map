{"version":3,"file":"useNavigation.js","sourceRoot":"","sources":["../src/useNavigation.ts"],"names":[],"mappings":";;;;;;AAAA,qDAAkG;AAClG,kDAA0B;AAE1B,mCAAwC;AACxC,yCAAiD;AAEjD;;;;GAIG;AACH,SAAgB,aAAa,CAC3B,MAAe;IAEf,MAAM,UAAU,GAAG,IAAA,sBAAqB,GAAO,CAAC;IAEhD,MAAM,UAAU,GAAG,IAAA,qBAAa,GAAE,CAAC;IACnC,MAAM,gBAAgB,GAAG,eAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QAC1C,IAAI,CAAC,MAAM,EAAE;YACX,OAAO,IAAI,CAAC;SACb;QACD,MAAM,UAAU,GAAG,IAAA,8BAAmB,EAAC,MAAM,CAAC,CAAC;QAE/C,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YAC1B,OAAO,aAAa,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;SAC1C;QACD,OAAO,UAAU,CAAC;IACpB,CAAC,EAAE,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;IAEzB,IAAI,gBAAgB,IAAI,IAAI,EAAE;QAC5B,MAAM,gBAAgB,GAAG,UAAU,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;QAEhE,yCAAyC;QAEzC,IAAI,CAAC,gBAAgB,EAAE;YACrB,MAAM,IAAI,KAAK,CACb,gDAAgD,MAAM,IAAI;gBACxD,CAAC,gBAAgB,KAAK,MAAM,CAAC,CAAC,CAAC,iBAAiB,gBAAgB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAC5E,CAAC;SACH;QACD,OAAO,gBAAgB,CAAC;KACzB;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAhCD,sCAgCC;AAED,SAAgB,eAAe,CAAC,UAAkB,EAAE,QAAwB;IAC1E,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,IAAI,CAAC;KACb;IAED,IAAI,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QAC5B,OAAO,IAAA,8BAAmB,EAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;KACjE;IACD,OAAO,IAAA,8BAAmB,EAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AATD,0CASC;AAED,+DAA+D;AAC/D,SAAS,aAAa,CAAC,IAAY,EAAE,EAAU;IAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAClD,MAAM,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAE9C,KAAK,MAAM,IAAI,IAAI,OAAO,EAAE;QAC1B,IAAI,IAAI,KAAK,IAAI,EAAE;YACjB,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,wBAAwB,EAAE,kBAAkB,IAAI,GAAG,CAAC,CAAC;aACtE;YACD,SAAS,CAAC,GAAG,EAAE,CAAC;SACjB;aAAM,IAAI,IAAI,KAAK,GAAG,EAAE;YACvB,SAAS;SACV;aAAM;YACL,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACtB;KACF;IAED,OAAO,GAAG,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import { useNavigation as useUpstreamNavigation, NavigationProp } from '@react-navigation/native';\nimport React from 'react';\n\nimport { useContextKey } from './Route';\nimport { getNameFromFilePath } from './matchers';\n\n/**\n * Return the navigation object for the current route.\n * @param parent Provide an absolute path like `/(root)` to the parent route or a relative path like `../../` to the parent route.\n * @returns the navigation object for the provided route.\n */\nexport function useNavigation<T = NavigationProp<ReactNavigation.RootParamList>>(\n  parent?: string\n): T {\n  const navigation = useUpstreamNavigation<any>();\n\n  const contextKey = useContextKey();\n  const normalizedParent = React.useMemo(() => {\n    if (!parent) {\n      return null;\n    }\n    const normalized = getNameFromFilePath(parent);\n\n    if (parent.startsWith('.')) {\n      return relativePaths(contextKey, parent);\n    }\n    return normalized;\n  }, [contextKey, parent]);\n\n  if (normalizedParent != null) {\n    const parentNavigation = navigation.getParent(normalizedParent);\n\n    // TODO: Maybe print a list of parents...\n\n    if (!parentNavigation) {\n      throw new Error(\n        `Could not find parent navigation with route \"${parent}\".` +\n          (normalizedParent !== parent ? ` (normalized: ${normalizedParent})` : '')\n      );\n    }\n    return parentNavigation;\n  }\n  return navigation;\n}\n\nexport function resolveParentId(contextKey: string, parentId?: string | null): string | null {\n  if (!parentId) {\n    return null;\n  }\n\n  if (parentId.startsWith('.')) {\n    return getNameFromFilePath(relativePaths(contextKey, parentId));\n  }\n  return getNameFromFilePath(parentId);\n}\n\n// Resolve a path like `../` relative to a path like `/foo/bar`\nfunction relativePaths(from: string, to: string): string {\n  const fromParts = from.split('/').filter(Boolean);\n  const toParts = to.split('/').filter(Boolean);\n\n  for (const part of toParts) {\n    if (part === '..') {\n      if (fromParts.length === 0) {\n        throw new Error(`Cannot resolve path \"${to}\" relative to \"${from}\"`);\n      }\n      fromParts.pop();\n    } else if (part === '.') {\n      // Ignore\n    } else {\n      fromParts.push(part);\n    }\n  }\n\n  return '/' + fromParts.join('/');\n}\n"]}