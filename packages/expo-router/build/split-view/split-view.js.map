{"version":3,"file":"split-view.js","sourceRoot":"","sources":["../../src/split-view/split-view.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAA6D;AAC7D,oEAAmF;AAEnF,yCAA6C;AAE7C,kDAA0C;AAC1C,+CAAoC;AAEpC,MAAM,gBAAgB,GAAG,IAAA,qBAAa,EAAC,CAAC,CAAC,CAAC;AAE1C,SAAS,kBAAkB,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAgB;IACjE,MAAM,sBAAsB,GAAG,eAAK,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAElE,IAAI,sBAAsB,GAAG,CAAC,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;IAClF,CAAC;IAED,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,CACxB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,sBAAsB,GAAG,CAAC,CAAC,CAClD;MAAA,CAAC,gBAAI,CAAC,AAAD,EACP;IAAA,EAAE,gBAAgB,CAAC,CACpB,CAAC;IAEF,MAAM,gBAAgB,GAAG,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC1D,MAAM,cAAc,GAAG,gBAAgB,CAAC,MAAM,CAC5C,CAAC,KAAK,EAAE,EAAE,CAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,0BAAe,CACnE,CAAC;IACF,MAAM,gBAAgB,GAAG,cAAc,CAAC,MAAM,CAAC;IAE/C,IAAI,gBAAgB,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,EAAE,CAAC;QACtD,OAAO,CAAC,IAAI,CAAC,+EAA+E,CAAC,CAAC;IAChG,CAAC;IAED,IAAI,gBAAgB,GAAG,CAAC,EAAE,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAC9E,CAAC;IAED,MAAM,eAAe,GAAG,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;IAC/D,MAAM,IAAI,GAAG,WAAW,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;IACxD,MAAM,oBAAoB,GACxB,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAE,GAAG,eAAe,GAAG,IAAI,WAAqB,CAAC;IAG7F,OAAO,CACL,CAAC,4BAAa,CACZ,oBAAoB,CAAC,CAAC,oBAAoB,CAAC,CAC3C,sBAAsB,CAAC,MAAM,CAC7B,2BAA2B,CAAC,QAAQ,CACpC;MAAA,CAAC,gBAAgB,KAAK,CAAC,IAAI,CACzB,CAAC,8BAAe,CAAC,MAAM,CACrB;UAAA,CAAC,mBAAI,CAAC,AAAD,EACP;QAAA,EAAE,8BAAe,CAAC,MAAM,CAAC,CAC1B,CACD;MAAA,CAAC,gBAAgB,GAAG,CAAC,IAAI,CACvB,CAAC,8BAAe,CAAC,MAAM,CACrB;UAAA,CAAC,mBAAI,CAAC,AAAD,EACP;QAAA,EAAE,8BAAe,CAAC,MAAM,CAAC,CAC1B,CACD;MAAA,CAAC,cAAc,CACf;MAAA,CAAC,8BAAe,CAAC,MAAM,CACrB;QAAA,CAAC,WAAW,CAAC,AAAD,EACd;MAAA,EAAE,8BAAe,CAAC,MAAM,CAC1B;IAAA,EAAE,4BAAa,CAAC,CACjB,CAAC;AACJ,CAAC;AAEY,QAAA,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE;IACzD,MAAM,EAAE,0BAAe;CACxB,CAAC,CAAC","sourcesContent":["import React, { createContext, isValidElement } from 'react';\nimport { SplitViewHost, SplitViewScreen } from 'react-native-screens/experimental';\n\nimport { SplitViewColumn } from './elements';\nimport type { SidebarProps } from './types';\nimport { Slot } from '../views/Navigator';\nimport { View } from 'react-native';\n\nconst SplitViewContext = createContext(0);\n\nfunction SplitViewNavigator({ children, displayMode }: SidebarProps) {\n  const numberOfParentSidebars = React.useContext(SplitViewContext);\n\n  if (numberOfParentSidebars > 0) {\n    throw new Error('There can only be one SplitView in the navigation hierarchy.');\n  }\n\n  const WrappedSlot = () => (\n    <SplitViewContext value={numberOfParentSidebars + 1}>\n      <Slot />\n    </SplitViewContext>\n  );\n\n  const allChildrenArray = React.Children.toArray(children);\n  const columnChildren = allChildrenArray.filter(\n    (child) => isValidElement(child) && child.type === SplitViewColumn\n  );\n  const numberOfSidebars = columnChildren.length;\n\n  if (allChildrenArray.length !== columnChildren.length) {\n    console.warn('Only SplitView.Column components are allowed as direct children of SplitView.');\n  }\n\n  if (numberOfSidebars > 2) {\n    throw new Error('There can only be two SplitView.Column in the SplitView.');\n  }\n\n  const numberOfScreens = numberOfSidebars === 1 ? 'one' : 'two';\n  const mode = displayMode === 'over' ? 'Over' : 'Beside';\n  const preferredDisplayMode =\n    numberOfSidebars === 0 ? 'secondaryOnly' : (`${numberOfScreens}${mode}Secondary` as const);\n\n\n  return (\n    <SplitViewHost\n      preferredDisplayMode={preferredDisplayMode}\n      preferredSplitBehavior=\"tile\"\n      displayModeButtonVisibility=\"always\">\n      {numberOfSidebars === 0 && (\n        <SplitViewScreen.Column>\n          <View />\n        </SplitViewScreen.Column>\n      )}\n      {numberOfSidebars < 2 && (\n        <SplitViewScreen.Column>\n          <View />\n        </SplitViewScreen.Column>\n      )}\n      {columnChildren}\n      <SplitViewScreen.Column>\n        <WrappedSlot />\n      </SplitViewScreen.Column>\n    </SplitViewHost>\n  );\n}\n\nexport const SplitView = Object.assign(SplitViewNavigator, {\n  Column: SplitViewColumn,\n});\n"]}