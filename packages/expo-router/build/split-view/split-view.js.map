{"version":3,"file":"split-view.js","sourceRoot":"","sources":["../../src/split-view/split-view.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAkF;AAClF,oEAI2C;AAE3C,yCAAiE;AACjE,oEAAqE;AACrE,kDAA0C;AAE1C,MAAM,wBAAwB,GAAG,IAAA,qBAAa,EAAC,KAAK,CAAC,CAAC;AAMtD,SAAS,kBAAkB,CAAC,EAAE,QAAQ,EAAE,GAAG,kBAAkB,EAAkB;IAC7E,IAAI,IAAA,WAAG,EAAC,wBAAwB,CAAC,EAAE,CAAC;QAClC,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;IAClF,CAAC;IAED,sFAAsF;IACtF,IAAI,IAAA,WAAG,EAAC,yCAAqB,CAAC,EAAE,CAAC;QAC/B,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;IACzF,CAAC;IAED,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,CACxB,CAAC,yCAAqB,CAAC,KAAK,CAC1B;MAAA,CAAC,gBAAI,CAAC,AAAD,EACP;IAAA,EAAE,yCAAqB,CAAC,CACzB,CAAC;IAEF,MAAM,gBAAgB,GAAG,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC1D,MAAM,cAAc,GAAG,gBAAgB,CAAC,MAAM,CAC5C,CAAC,KAAK,EAAE,EAAE,CAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,0BAAe,CACnE,CAAC;IACF,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,MAAM,CAC/C,CAAC,KAAK,EAAE,EAAE,CAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,6BAAkB,CACtE,CAAC;IACF,MAAM,gBAAgB,GAAG,cAAc,CAAC,MAAM,CAAC;IAC/C,MAAM,kBAAkB,GAAG,iBAAiB,CAAC,MAAM,CAAC;IAEpD,IAAI,gBAAgB,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,GAAG,iBAAiB,CAAC,MAAM,EAAE,CAAC;QACjF,OAAO,CAAC,IAAI,CACV,uGAAuG,CACxG,CAAC;IACJ,CAAC;IAED,IAAI,gBAAgB,GAAG,CAAC,EAAE,CAAC;QACzB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAC9E,CAAC;IAED,IAAI,gBAAgB,GAAG,kBAAkB,KAAK,CAAC,EAAE,CAAC;QAChD,OAAO,CAAC,IAAI,CAAC,iEAAiE,CAAC,CAAC;QAChF,OAAO,CAAC,gBAAI,CAAC,AAAD,EAAG,CAAC;IAClB,CAAC;IAED,6EAA6E;IAC7E,OAAO,CACL,CAAC,4BAAa,CAAC,GAAG,CAAC,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,CAAC,IAAI,kBAAkB,CAAC,CAChF;MAAA,CAAC,cAAc,CACf;MAAA,CAAC,8BAAe,CAAC,MAAM,CACrB;QAAA,CAAC,WAAW,CAAC,AAAD,EACd;MAAA,EAAE,8BAAe,CAAC,MAAM,CACxB;MAAA,CAAC,iBAAiB,CACpB;IAAA,EAAE,4BAAa,CAAC,CACjB,CAAC;AACJ,CAAC;AAEY,QAAA,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE;IACzD,MAAM,EAAE,0BAAe;IACvB,SAAS,EAAE,6BAAkB;CAC9B,CAAC,CAAC","sourcesContent":["import React, { createContext, isValidElement, use, type ReactNode } from 'react';\nimport {\n  SplitViewHost,\n  SplitViewScreen,\n  type SplitViewHostProps,\n} from 'react-native-screens/experimental';\n\nimport { SplitViewColumn, SplitViewInspector } from './elements';\nimport { IsWithinLayoutContext } from '../layouts/withLayoutContext';\nimport { Slot } from '../views/Navigator';\n\nconst IsWithinSplitViewContext = createContext(false);\n\nexport interface SplitViewProps extends Omit<SplitViewHostProps, 'children'> {\n  children?: ReactNode;\n}\n\nfunction SplitViewNavigator({ children, ...splitViewHostProps }: SplitViewProps) {\n  if (use(IsWithinSplitViewContext)) {\n    throw new Error('There can only be one SplitView in the navigation hierarchy.');\n  }\n\n  // TODO: Add better way of detecting if SplitView is rendered inside Native navigator.\n  if (use(IsWithinLayoutContext)) {\n    throw new Error('SplitView cannot be used inside another navigator, except for Slot.');\n  }\n\n  const WrappedSlot = () => (\n    <IsWithinLayoutContext value>\n      <Slot />\n    </IsWithinLayoutContext>\n  );\n\n  const allChildrenArray = React.Children.toArray(children);\n  const columnChildren = allChildrenArray.filter(\n    (child) => isValidElement(child) && child.type === SplitViewColumn\n  );\n  const inspectorChildren = allChildrenArray.filter(\n    (child) => isValidElement(child) && child.type === SplitViewInspector\n  );\n  const numberOfSidebars = columnChildren.length;\n  const numberOfInspectors = inspectorChildren.length;\n\n  if (allChildrenArray.length !== columnChildren.length + inspectorChildren.length) {\n    console.warn(\n      'Only SplitView.Column and SplitView.Inspector components are allowed as direct children of SplitView.'\n    );\n  }\n\n  if (numberOfSidebars > 2) {\n    throw new Error('There can only be two SplitView.Column in the SplitView.');\n  }\n\n  if (numberOfSidebars + numberOfInspectors === 0) {\n    console.warn('No SplitView.Column and SplitView.Inspector found in SplitView.');\n    return <Slot />;\n  }\n\n  // The key is needed, because number of columns cannot be changed dynamically\n  return (\n    <SplitViewHost key={numberOfSidebars + numberOfInspectors} {...splitViewHostProps}>\n      {columnChildren}\n      <SplitViewScreen.Column>\n        <WrappedSlot />\n      </SplitViewScreen.Column>\n      {inspectorChildren}\n    </SplitViewHost>\n  );\n}\n\nexport const SplitView = Object.assign(SplitViewNavigator, {\n  Column: SplitViewColumn,\n  Inspector: SplitViewInspector,\n});\n"]}