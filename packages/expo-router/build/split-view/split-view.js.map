{"version":3,"file":"split-view.js","sourceRoot":"","sources":["../../src/split-view/split-view.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAmE;AAGnE,gGAAgG;AAChG,yEAA2C;AAC3C,oEAAiE;AAEpD,QAAA,SAAS,GAAG,IAAA,qCAAiB,EAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;AAE1E,SAAS,kBAAkB,CAAC,EAC1B,aAAa,EACb,cAAc,EACd,eAAe,EACf,oBAAoB,EACpB,sBAAsB,EACtB,yBAAyB,EACzB,GAAG,UAAU,EACiC;IAC9C,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,IAAA,WAAG,EAAC,wBAAgB,CAAC,CAAC;IAEtD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IACE,aAAa,KAAK,OAAO,CAAC,aAAa;YACvC,cAAc,KAAK,OAAO,CAAC,cAAc;YACzC,eAAe,KAAK,OAAO,CAAC,eAAe;YAC3C,oBAAoB,KAAK,OAAO,CAAC,oBAAoB;YACrD,sBAAsB,KAAK,OAAO,CAAC,sBAAsB;YACzD,yBAAyB,KAAK,OAAO,CAAC,yBAAyB,EAC/D,CAAC;YACD,UAAU,CAAC;gBACT,aAAa;gBACb,cAAc;gBACd,eAAe;gBACf,oBAAoB;gBACpB,sBAAsB;gBACtB,yBAAyB;aAC1B,CAAC,CAAC;QACL,CAAC;IACH,CAAC,EAAE;QACD,aAAa;QACb,cAAc;QACd,eAAe;QACf,oBAAoB;QACpB,sBAAsB;QACtB,yBAAyB;KAC1B,CAAC,CAAC;IAEH,OAAO,CAAC,qBAAK,CAAC,IAAI,UAAU,CAAC,EAAG,CAAC;AACnC,CAAC;AAEY,QAAA,gBAAgB,GAAG,eAAK,CAAC,aAAa,CAAuB;IACxE,OAAO,EAAE,EAAE;IACX,UAAU,EAAE,GAAG,EAAE,GAAE,CAAC;CACrB,CAAC,CAAC","sourcesContent":["import React, { use, useEffect, type ComponentProps } from 'react';\n\nimport type { SplitViewContextType, SplitViewProps } from './types';\n// import { createNativeStackNavigator } from '../fork/native-stack/createNativeStackNavigator';\nimport Stack from '../layouts/StackClient';\nimport { withLayoutContext } from '../layouts/withLayoutContext';\n\nexport const SplitView = withLayoutContext(SplitViewNavigator, undefined);\n\nfunction SplitViewNavigator({\n  columnMetrics,\n  disableSidebar,\n  disableGestures,\n  preferredDisplayMode,\n  preferredSplitBehavior,\n  showSecondaryToggleButton,\n  ...stackProps\n}: ComponentProps<typeof Stack> & SplitViewProps) {\n  const { setOptions, options } = use(SplitViewContext);\n\n  useEffect(() => {\n    if (\n      columnMetrics !== options.columnMetrics ||\n      disableSidebar !== options.disableSidebar ||\n      disableGestures !== options.disableGestures ||\n      preferredDisplayMode !== options.preferredDisplayMode ||\n      preferredSplitBehavior !== options.preferredSplitBehavior ||\n      showSecondaryToggleButton !== options.showSecondaryToggleButton\n    ) {\n      setOptions({\n        columnMetrics,\n        disableSidebar,\n        disableGestures,\n        preferredDisplayMode,\n        preferredSplitBehavior,\n        showSecondaryToggleButton,\n      });\n    }\n  }, [\n    columnMetrics,\n    disableSidebar,\n    disableGestures,\n    preferredDisplayMode,\n    preferredSplitBehavior,\n    showSecondaryToggleButton,\n  ]);\n\n  return <Stack {...stackProps} />;\n}\n\nexport const SplitViewContext = React.createContext<SplitViewContextType>({\n  options: {},\n  setOptions: () => {},\n});\n"]}