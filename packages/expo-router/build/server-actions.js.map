{"version":3,"file":"server-actions.js","sourceRoot":"","sources":["../src/server-actions.ts"],"names":[],"mappings":";;;AAKA,yHAAyH;AACzH,iDAAiD;AACjD,gIAAgI;AAChI,uDAAuD;AACvD,+JAA+J;AAE/J,kIAAkI;AAClI,2DAA2D;AAE3D,8FAA8F;AAC9F,SAAS,wBAAwB;IAC/B,IAAI,CAAC,UAAU,CAAC,sBAAsB,EAAE;QACtC,UAAU,CAAC,sBAAsB,GAAG,IAAI,GAAG,EAAE,CAAC;KAC/C;IACD,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,OAAQ,CAAC,EAAE;QAChE,UAAU,CAAC,sBAAsB,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,OAAQ,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;KACxE;IAED,OAAO,UAAU,CAAC,sBAAsB,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,OAAQ,CAAE,CAAC;AACtE,CAAC;AAED,SAAgB,0BAA0B;AACxC,WAAW;AACX,KAAmB;AACnB,wCAAwC;AACxC,SAAiB;AACjB,mEAAmE;AACnE,gBAAwB;IAExB,MAAM,GAAG,GAAG,UAAU,CAAC,8BAA8B,CAAC,KAAK,EAAE,SAAS,EAAE,gBAAgB,CAAC,CAAC;IAC1F,wBAAwB,EAAE,CAAC,GAAG,CAAC,SAAS,GAAG,GAAG,GAAG,gBAAgB,EAAE,GAAG,CAAC,CAAC;IACxE,OAAO,GAAG,CAAC;AACb,CAAC;AAXD,gEAWC;AAED,SAAgB,kBAAkB,CAAC,SAAiB;IAClD,OAAO,wBAAwB,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACnD,CAAC;AAFD,gDAEC;AAED,SAAgB,mBAAmB;IACjC,OAAO,0CAA0C,CAAC,CAAC,UAAU,CAAC,sBAAsB,eAAe,OAAO,CAAC,GAAG,CAAC,OAAO,MAAM,KAAK,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACzL,CAAC;AAFD,kDAEC","sourcesContent":["declare let globalThis: {\n  _REACT_registerServerReference: Function;\n  _knownServerReferences: Map<string, Map<string, Function>>;\n};\n\n// HACK: This wrapper has shared state that we can use to access the server actions lazily in development without needing\n// an extra pass to generate and extract modules.\n// This is used as a drop-in replacement for `react-server-dom-webpack/server` in `babel-preset-expo`, but it exposes the server\n// action references so we can access them in Expo CLI.\n// This module ID (`expo-router/build/server-actions`) must also be external in the Metro resolver to ensure the state is shared in development across modules.\n\n// NOTE: Since we're running this file in Node.js directly without conditions, we need to modify the requires with babel register.\n// import RSDW from 'react-server-dom-webpack/server.edge';\n\n// Make this global to share state between rsc-renderer and expo-definedRouter. This is a HACK\nfunction getKnownServerReferences(): Map<string, Function> {\n  if (!globalThis._knownServerReferences) {\n    globalThis._knownServerReferences = new Map();\n  }\n  if (!globalThis._knownServerReferences.get(process.env.EXPO_OS!)) {\n    globalThis._knownServerReferences.set(process.env.EXPO_OS!, new Map());\n  }\n\n  return globalThis._knownServerReferences.get(process.env.EXPO_OS!)!;\n}\n\nexport function registerServerReferenceDEV(\n  // Function\n  proxy: typeof Proxy,\n  // ID sent to the server from the client\n  reference: string,\n  // etc. (used for forms which we don't currently support on native)\n  encodeFormAction: string\n) {\n  const res = globalThis._REACT_registerServerReference(proxy, reference, encodeFormAction);\n  getKnownServerReferences().set(reference + '#' + encodeFormAction, res);\n  return res;\n}\n\nexport function getServerReference(reference: string) {\n  return getKnownServerReferences().get(reference);\n}\n\nexport function getDebugDescription() {\n  return `Known server references (instantiated: ${!!globalThis._knownServerReferences}, platform: ${process.env.EXPO_OS}): ${Array.from(getKnownServerReferences().keys()).join(', ')}`;\n}\n"]}