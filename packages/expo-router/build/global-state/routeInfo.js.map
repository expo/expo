{"version":3,"file":"routeInfo.js","sourceRoot":"","sources":["../../src/global-state/routeInfo.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,0DAA4C;AAO5C,SAAgB,gBAAgB,CAC9B,KAAwB,EACxB,QAAiC,EACjC,OAAgB;IAEhB,MAAM,QAAQ,GAAa,EAAE,CAAC;IAE9B,MAAM,SAAS,GAAG,EAAE,CAAC;IAErB,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE;QAC5B,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACpD,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAExC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAEpB,IAAI,KAAK,CAAC,MAAM,EAAE;YAChB,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,EAAE,GAAG,KAAK,CAAC,MAA6B,CAAC;YACzE,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YAEhC,IAAI,MAAM,EAAE;gBACV,KAAK,GAAG;oBACN,UAAU,EAAE,CAAC,MAAM,CAAC;oBACpB,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;iBACnC,CAAC;aACH;SACF;KACF;IAED,IAAI,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,OAAO,EAAE;QAChE,QAAQ,CAAC,GAAG,EAAE,CAAC;KAChB;IAED,IAAI,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;IACpD,MAAM,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;IAEhE,IAAI,KAAK,EAAE;QACT,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC;KACrB;IAED,OAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACjC,CAAC;AAxCD,4CAwCC","sourcesContent":["import * as queryString from 'query-string';\n\nimport { State } from '../fork/getPathFromState';\nimport { getStateFromPath } from '../fork/getStateFromPath';\n\ntype Options = Parameters<typeof getStateFromPath>[1];\n\nexport function reconstructState(\n  state: State | undefined,\n  getState: typeof getStateFromPath,\n  options: Options\n) {\n  const segments: string[] = [];\n\n  const allParams = {};\n\n  while (state?.routes?.length) {\n    const route = state.routes[state.routes.length - 1];\n    segments.push(...route.name.split('/'));\n\n    state = route.state;\n\n    if (route.params) {\n      const { screen, params, ...other } = route.params as Record<string, any>;\n      Object.assign(allParams, other);\n\n      if (screen) {\n        state = {\n          routeNames: [screen],\n          routes: [{ name: screen, params }],\n        };\n      }\n    }\n  }\n\n  if (segments.length && segments[segments.length - 1] === 'index') {\n    segments.pop();\n  }\n\n  let path = `/${segments.filter(Boolean).join('/')}`;\n  const query = queryString.stringify(allParams, { sort: false });\n\n  if (query) {\n    path += `?${query}`;\n  }\n\n  return getState(path, options);\n}\n"]}