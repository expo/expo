{"version":3,"file":"useNextScreenId.js","sourceRoot":"","sources":["../../../src/link/preview/useNextScreenId.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ParamListBase,\n  StackNavigationState,\n  type NavigationRoute,\n  type NavigationState,\n} from '@react-navigation/native';\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { store, type ReactNavigationState } from '../../global-state/router-store';\nimport { findDivergentState, getPayloadFromStateRoute } from '../../global-state/routing';\nimport { Href } from '../../types';\nimport { resolveHref } from '../href';\nimport { useLinkPreviewContext } from './LinkPreviewContext';\nimport { useRouter } from '../../hooks';\n\nexport function useNextScreenId(): [string | undefined, (href: Href) => void] {\n  const router = useRouter();\n  const { setOpenPreviewKey } = useLinkPreviewContext();\n  const [internalNextScreenId, internalSetNextScreenId] = useState<string | undefined>();\n  const currentHref = useRef<Href | undefined>(undefined);\n\n  useEffect(() => {\n    // When screen is prefetched, then the root state is updated with the preloaded route.\n    return store.navigationRef.addListener('state', () => {\n      // If we have the current href, it means that we prefetched the route\n      if (currentHref.current) {\n        const preloadedRoute = getPreloadedRouteFromRootStateByHref(currentHref.current);\n        const routeKey = preloadedRoute?.key;\n        // Without this timeout react-native does not have enough time to mount the new screen\n        // and thus it will not be found on the native side\n        if (routeKey) {\n          setTimeout(() => {\n            internalSetNextScreenId(routeKey);\n            setOpenPreviewKey(routeKey);\n          });\n          // We found the preloaded route, so we can reset the currentHref\n          // to prevent unnecessary processing\n          currentHref.current = undefined;\n        }\n      }\n    });\n  }, []);\n\n  const prefetch = useCallback(\n    (href: Href): void => {\n      // Resetting the nextScreenId to undefined\n      internalSetNextScreenId(undefined);\n      router.prefetch(href);\n      currentHref.current = href;\n    },\n    [router.prefetch]\n  );\n  return [internalNextScreenId, prefetch];\n}\n\nfunction getPreloadedRouteFromRootStateByHref(\n  href: Href\n): NavigationRoute<ParamListBase, string> | undefined {\n  const rootState = store.state;\n  const hrefState = store.getStateForHref(resolveHref(href));\n  const state: ReactNavigationState | undefined = rootState;\n  if (!hrefState || !state) {\n    return undefined;\n  }\n  // Replicating the logic from `linkTo`\n  const { navigationState, actionStateRoute } = findDivergentState(\n    hrefState,\n    state as NavigationState\n  );\n\n  if (!navigationState || !actionStateRoute) {\n    return undefined;\n  }\n\n  if (navigationState.type === 'stack') {\n    const stackState = navigationState as StackNavigationState<ParamListBase>;\n    const payload = getPayloadFromStateRoute(actionStateRoute);\n\n    const preloadedRoute = stackState.preloadedRoutes.find(\n      (route) => route.name === actionStateRoute.name && deepEqual(route.params, payload.params)\n    );\n    return preloadedRoute;\n  }\n\n  return undefined;\n}\n\nfunction deepEqual(\n  a: { [key: string]: any } | undefined,\n  b: { [key: string]: any } | undefined\n): boolean {\n  if (a === b) {\n    return true;\n  }\n  if (a == null || b == null) {\n    return false;\n  }\n  if (typeof a !== 'object' || typeof b !== 'object') {\n    return false;\n  }\n  return (\n    Object.keys(a).length === Object.keys(b).length &&\n    Object.keys(a).every((key) => deepEqual(a[key], b[key]))\n  );\n}\n"]}