{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/link/preview/utils.ts"],"names":[],"mappings":";;AAcA,sEA+BC;AAED,oFA+BC;AAED,8BAeC;AAvFD,kEAAmF;AACnF,wDAA0F;AAE1F,kCAAsC;AAGtC,SAAgB,6BAA6B,CAC3C,IAAU,EACV,SAA+B;IAE/B,MAAM,SAAS,GAAG,oBAAK,CAAC,eAAe,CAAC,IAAA,kBAAW,EAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,MAAM,KAAK,GAAqC,SAAS,CAAC;IAC1D,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,sCAAsC;IACtC,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAA,4BAAkB,EAAC,SAAS,EAAE,KAAwB,EAAE,IAAI,CAAC,CAAC;IAE3F,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QAC7B,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,OAAO,GAAc,EAAE,CAAC;IAC9B,gBAAgB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE;QACzC,IAAI,KAAK,CAAC,KAAK,EAAE,IAAI,KAAK,KAAK,EAAE,CAAC;YAChC,MAAM,QAAQ,GAAG,KAAK,CAAC,KAA0C,CAAC;YAClE,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;YACtD,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CACb,gCAAgC,KAAK,CAAC,GAAG,+CAA+C,CACzF,CAAC;YACJ,CAAC;YACD,MAAM,SAAS,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;YACjC,OAAO,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QACzC,CAAC;IACH,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAgB,oCAAoC,CAClD,IAAU,EACV,SAA+B;IAE/B,MAAM,SAAS,GAAG,oBAAK,CAAC,eAAe,CAAC,IAAA,kBAAW,EAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,MAAM,KAAK,GAAqC,SAAS,CAAC;IAC1D,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,CAAC;QACzB,OAAO,SAAS,CAAC;IACnB,CAAC;IACD,sCAAsC;IACtC,MAAM,EAAE,eAAe,EAAE,gBAAgB,EAAE,GAAG,IAAA,4BAAkB,EAC9D,SAAS,EACT,KAAwB,EACxB,IAAI,CACL,CAAC;IAEF,IAAI,CAAC,eAAe,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1C,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,IAAI,eAAe,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;QACrC,MAAM,UAAU,GAAG,eAAsD,CAAC;QAC1E,MAAM,OAAO,GAAG,IAAA,kCAAwB,EAAC,gBAAgB,CAAC,CAAC;QAE3D,MAAM,cAAc,GAAG,UAAU,CAAC,eAAe,CAAC,IAAI,CACpD,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAC3F,CAAC;QACF,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,SAAgB,SAAS,CACvB,CAAqC,EACrC,CAAqC;IAErC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;QACZ,OAAO,IAAI,CAAC;IACd,CAAC;IACD,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;QAC3B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE,CAAC;QACnD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,2CAA2C,CAAC,CAAC;IACjG,OAAO,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACjG,CAAC","sourcesContent":["import {\n  ParamListBase,\n  StackNavigationState,\n  type NavigationRoute,\n  type NavigationState,\n  type TabNavigationState,\n} from '@react-navigation/native';\n\nimport { store, type ReactNavigationState } from '../../global-state/router-store';\nimport { findDivergentState, getPayloadFromStateRoute } from '../../global-state/routing';\nimport { Href } from '../../types';\nimport { resolveHref } from '../href';\nimport { TabPath } from './native';\n\nexport function getTabPathFromRootStateByHref(\n  href: Href,\n  rootState: ReactNavigationState\n): TabPath[] {\n  const hrefState = store.getStateForHref(resolveHref(href));\n  const state: ReactNavigationState | undefined = rootState;\n  if (!hrefState || !state) {\n    return [];\n  }\n  // Replicating the logic from `linkTo`\n  const { navigationRoutes } = findDivergentState(hrefState, state as NavigationState, true);\n\n  if (!navigationRoutes.length) {\n    return [];\n  }\n\n  const tabPath: TabPath[] = [];\n  navigationRoutes.forEach((route, i, arr) => {\n    if (route.state?.type === 'tab') {\n      const tabState = route.state as TabNavigationState<ParamListBase>;\n      const oldTabKey = tabState.routes[tabState.index].key;\n      if (!arr[i + 1]) {\n        throw new Error(\n          `New tab route is missing for ${route.key}. This is likely an internal Expo Router bug.`\n        );\n      }\n      const newTabKey = arr[i + 1].key;\n      tabPath.push({ oldTabKey, newTabKey });\n    }\n  });\n  return tabPath;\n}\n\nexport function getPreloadedRouteFromRootStateByHref(\n  href: Href,\n  rootState: ReactNavigationState\n): NavigationRoute<ParamListBase, string> | undefined {\n  const hrefState = store.getStateForHref(resolveHref(href));\n  const state: ReactNavigationState | undefined = rootState;\n  if (!hrefState || !state) {\n    return undefined;\n  }\n  // Replicating the logic from `linkTo`\n  const { navigationState, actionStateRoute } = findDivergentState(\n    hrefState,\n    state as NavigationState,\n    true\n  );\n\n  if (!navigationState || !actionStateRoute) {\n    return undefined;\n  }\n\n  if (navigationState.type === 'stack') {\n    const stackState = navigationState as StackNavigationState<ParamListBase>;\n    const payload = getPayloadFromStateRoute(actionStateRoute);\n\n    const preloadedRoute = stackState.preloadedRoutes.find(\n      (route) => route.name === actionStateRoute.name && deepEqual(route.params, payload.params)\n    );\n    return preloadedRoute;\n  }\n\n  return undefined;\n}\n\nexport function deepEqual(\n  a: { [key: string]: any } | undefined,\n  b: { [key: string]: any } | undefined\n): boolean {\n  if (a === b) {\n    return true;\n  }\n  if (a == null || b == null) {\n    return false;\n  }\n  if (typeof a !== 'object' || typeof b !== 'object') {\n    return false;\n  }\n  const keys = Object.keys(a).filter((key) => key !== '__internal__expoRouterIsPreviewNavigation');\n  return keys.length === Object.keys(b).length && keys.every((key) => deepEqual(a[key], b[key]));\n}\n"]}