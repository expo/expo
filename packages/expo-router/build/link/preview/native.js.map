{"version":3,"file":"native.js","sourceRoot":"","sources":["../../../src/link/preview/native.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;AAgBb,0DAKC;AASD,4DAKC;AAkBD,8CAKC;AAYD,4DAWC;AA/ED,+BAAyC;AACzC,+CAAoE;AASpE,MAAM,2BAA2B,GAC/B,uBAAQ,CAAC,EAAE,KAAK,KAAK;IACnB,CAAC,CAAC,IAAA,wBAAiB,EAAC,6BAA6B,EAAE,6BAA6B,CAAC;IACjF,CAAC,CAAC,IAAI,CAAC;AACX,SAAgB,uBAAuB,CAAC,KAAmC;IACzE,IAAI,CAAC,2BAA2B,EAAE,CAAC;QACjC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,2BAA2B,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACpD,CAAC;AAKD,MAAM,4BAA4B,GAChC,uBAAQ,CAAC,EAAE,KAAK,KAAK;IACnB,CAAC,CAAC,IAAA,wBAAiB,EAAC,6BAA6B,EAAE,0BAA0B,CAAC;IAC9E,CAAC,CAAC,IAAI,CAAC;AACX,SAAgB,wBAAwB,CAAC,KAAoC;IAC3E,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,4BAA4B,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACrD,CAAC;AAcD,MAAM,qBAAqB,GACzB,uBAAQ,CAAC,EAAE,KAAK,KAAK;IACnB,CAAC,CAAC,IAAA,wBAAiB,EAAC,6BAA6B,EAAE,uBAAuB,CAAC;IAC3E,CAAC,CAAC,IAAI,CAAC;AACX,SAAgB,iBAAiB,CAAC,KAA6B;IAC7D,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC3B,OAAO,IAAI,CAAC;IACd,CAAC;IACD,OAAO,CAAC,qBAAqB,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AAC9C,CAAC;AAOD,MAAM,4BAA4B,GAChC,uBAAQ,CAAC,EAAE,KAAK,KAAK;IACnB,CAAC,CAAC,IAAA,wBAAiB,EAAC,6BAA6B,EAAE,8BAA8B,CAAC;IAClF,CAAC,CAAC,IAAI,CAAC;AAEX,SAAgB,wBAAwB,CAAC,KAAoC;IAC3E,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,KAAK,GAAG,yBAAU,CAAC,OAAO,CAAC;QAC/B,KAAK,CAAC,KAAK;QACX;YACE,QAAQ,EAAE,UAAU;SACZ;KACX,CAAC,CAAC;IACH,OAAO,CAAC,4BAA4B,CAAC,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,EAAG,CAAC;AACnE,CAAC;AACD,aAAa","sourcesContent":["'use client';\n\nimport { requireNativeView } from 'expo';\nimport { Platform, StyleSheet, type ViewProps } from 'react-native';\n\n// #region Action View\nexport interface NativeLinkPreviewActionProps {\n  title: string;\n  icon?: string;\n  id: string;\n  children?: React.ReactNode;\n}\nconst LinkPreviewNativeActionView: React.ComponentType<NativeLinkPreviewActionProps> | null =\n  Platform.OS === 'ios'\n    ? requireNativeView('ExpoRouterNativeLinkPreview', 'LinkPreviewNativeActionView')\n    : null;\nexport function NativeLinkPreviewAction(props: NativeLinkPreviewActionProps) {\n  if (!LinkPreviewNativeActionView) {\n    return null;\n  }\n  return <LinkPreviewNativeActionView {...props} />;\n}\n// #endregion\n\n// #region Trigger View\nexport type NativeLinkPreviewTriggerProps = ViewProps;\nconst NativeLinkPreviewTriggerView: React.ComponentType<NativeLinkPreviewTriggerProps> | null =\n  Platform.OS === 'ios'\n    ? requireNativeView('ExpoRouterNativeLinkPreview', 'NativeLinkPreviewTrigger')\n    : null;\nexport function NativeLinkPreviewTrigger(props: NativeLinkPreviewTriggerProps) {\n  if (!NativeLinkPreviewTriggerView) {\n    return null;\n  }\n  return <NativeLinkPreviewTriggerView {...props} />;\n}\n// #endregion\n\n// #region Preview View\nexport interface NativeLinkPreviewProps extends ViewProps {\n  nextScreenId: string | undefined;\n  onActionSelected?: (event: { nativeEvent: { id: string } }) => void;\n  onWillPreviewOpen?: () => void;\n  onDidPreviewOpen?: () => void;\n  onPreviewWillClose?: () => void;\n  onPreviewDidClose?: () => void;\n  onPreviewTapped?: () => void;\n  children: React.ReactNode;\n}\nconst NativeLinkPreviewView: React.ComponentType<NativeLinkPreviewProps> | null =\n  Platform.OS === 'ios'\n    ? requireNativeView('ExpoRouterNativeLinkPreview', 'NativeLinkPreviewView')\n    : null;\nexport function NativeLinkPreview(props: NativeLinkPreviewProps) {\n  if (!NativeLinkPreviewView) {\n    return null;\n  }\n  return <NativeLinkPreviewView {...props} />;\n}\n// #endregion\n\n// #region Preview Content View\nexport interface NativeLinkPreviewContentProps extends ViewProps {\n  preferredContentSize?: { width: number; height: number };\n}\nconst NativeLinkPreviewContentView: React.ComponentType<NativeLinkPreviewContentProps> | null =\n  Platform.OS === 'ios'\n    ? requireNativeView('ExpoRouterNativeLinkPreview', 'NativeLinkPreviewContentView')\n    : null;\n\nexport function NativeLinkPreviewContent(props: NativeLinkPreviewContentProps) {\n  if (!NativeLinkPreviewContentView) {\n    return null;\n  }\n  const style = StyleSheet.flatten([\n    props.style,\n    {\n      position: 'absolute',\n    } as const,\n  ]);\n  return <NativeLinkPreviewContentView {...props} style={style} />;\n}\n// #endregion\n"]}