{"version":3,"file":"Link.js","sourceRoot":"","sources":["../../src/link/Link.tsx"],"names":[],"mappings":"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","sourcesContent":["'use client';\n// Fork of @react-navigation/native Link.tsx with `href` and `replace` support added and\n// `to` / `action` support removed.\nimport { ContextMenu, ContextMenuProps, Preview } from '@expo/ui/components/ContextMenu';\nimport {\n  ReactNode,\n  ComponentType,\n  PropsWithChildren,\n  Fragment,\n  forwardRef,\n  useMemo,\n  MouseEvent,\n  ForwardedRef,\n  JSX,\n} from 'react';\nimport { Text, GestureResponderEvent, StyleSheet, Platform, View } from 'react-native';\n\nimport { resolveHref } from './href';\nimport useLinkToPathProps from './useLinkToPathProps';\nimport { PreviewParamsContext } from '../Preview';\nimport { RouteNode } from '../Route';\nimport { store } from '../global-state/router-store';\nimport { useRouter } from '../hooks';\nimport { Href } from '../types';\nimport { useFocusEffect } from '../useFocusEffect';\nimport { useInteropClassName, useHrefAttrs, LinkProps, WebAnchorProps } from './useLinkHooks';\nimport { Slot } from '../ui/Slot';\nimport { getQualifiedRouteComponent } from '../useScreens';\n\nexport interface LinkComponent {\n  (props: PropsWithChildren<LinkProps>): JSX.Element;\n  /** Helper method to resolve an Href object into a string. */\n  resolveHref: (href: Href) => string;\n}\n\nexport type RedirectProps = {\n  /**\n   * The path of the route to navigate to. It can either be:\n   * - **string**: A full path like `/profile/settings` or a relative path like `../settings`.\n   * - **object**: An object with a `pathname` and optional `params`. The `pathname` can be\n   * a full path like `/profile/settings` or a relative path like `../settings`. The\n   * params can be an object of key-value pairs.\n   *\n   * @example\n   * ```tsx Dynamic\n   * import { Redirect } from 'expo-router';\n   *\n   * export default function RedirectToAbout() {\n   *  return (\n   *    <Redirect href=\"/about\">About</Link>\n   *  );\n   *}\n   * ```\n   */\n  href: Href;\n\n  /**\n   * Relative URL references are either relative to the directory or the document.\n   * By default, relative paths are relative to the document.\n   *\n   * @see [Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references).\n   */\n  relativeToDirectory?: boolean;\n\n  /**\n   * Replaces the initial screen with the current route.\n   */\n  withAnchor?: boolean;\n};\n\n/**\n * Redirects to the `href` as soon as the component is mounted.\n *\n * @example\n * ```tsx\n * import { View, Text } from 'react-native';\n * import { Redirect } from 'expo-router';\n *\n * export default function Page() {\n *  const { user } = useAuth();\n *\n *  if (!user) {\n *    return <Redirect href=\"/login\" />;\n *  }\n *\n *  return (\n *    <View>\n *      <Text>Welcome Back!</Text>\n *    </View>\n *  );\n * }\n * ```\n */\nexport function Redirect({ href, relativeToDirectory, withAnchor }: RedirectProps) {\n  const router = useRouter();\n  useFocusEffect(() => {\n    try {\n      router.replace(href, { relativeToDirectory, withAnchor });\n    } catch (error) {\n      console.error(error);\n    }\n  });\n  return null;\n}\n\n/**\n * Component that renders a link using [`href`](#href) to another route.\n * By default, it accepts children and wraps them in a `<Text>` component.\n *\n * Uses an anchor tag (`<a>`) on web and performs a client-side navigation to preserve\n * the state of the website and navigate faster. The web-only attributes such as `target`,\n * `rel`, and `download` are supported and passed to the anchor tag on web. See\n * [`WebAnchorProps`](#webanchorprops) for more details.\n *\n * > **Note**: Client-side navigation works with both single-page apps,\n * and [static-rendering](/router/reference/static-rendering/).\n *\n * @example\n * ```tsx\n * import { Link } from 'expo-router';\n * import { View } from 'react-native';\n *\n * export default function Route() {\n *  return (\n *   <View>\n *    <Link href=\"/about\">About</Link>\n *   </View>\n *  );\n *}\n * ```\n */\nexport const Link = forwardRef(ExpoRouterLink) as unknown as LinkComponent;\n\nLink.resolveHref = resolveHref;\n\nfunction ExpoRouterLink(\n  {\n    href,\n    replace,\n    push,\n    dismissTo,\n    // TODO: This does not prevent default on the anchor tag.\n    relativeToDirectory,\n    asChild,\n    rel,\n    target,\n    download,\n    withAnchor,\n    preview,\n    previewItems,\n    children,\n    ...rest\n  }: LinkProps,\n  ref: ForwardedRef<Text>\n) {\n  // Mutate the style prop to add the className on web.\n  const style = useInteropClassName(rest);\n\n  // If not passing asChild, we need to forward the props to the anchor tag using React Native Web's `hrefAttrs`.\n  const hrefAttrs = useHrefAttrs({ asChild, rel, target, download });\n\n  const resolvedHref = useMemo(() => {\n    if (href == null) {\n      throw new Error('Link: href is required');\n    }\n    return resolveHref(href);\n  }, [href]);\n\n  let event;\n  if (push) event = 'PUSH';\n  if (replace) event = 'REPLACE';\n  if (dismissTo) event = 'POP_TO';\n\n  const props = useLinkToPathProps({\n    href: resolvedHref,\n    event,\n    relativeToDirectory,\n    withAnchor,\n  });\n\n  const onPress = (e: MouseEvent<HTMLAnchorElement> | GestureResponderEvent) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n    props.onPress(e);\n  };\n\n  const onLongPress = (e: GestureResponderEvent) => {\n    if ('onLongPress' in rest) {\n      rest.onLongPress?.(e);\n    }\n  };\n\n  const Element = asChild ? Slot : Text;\n\n  let Wrapper: ComponentType<any> = Fragment;\n  let wrapperProps = {};\n  let previewComponent: ReactNode = null;\n\n  if (preview) {\n    let state = store.getStateForHref(href);\n    let routeNode: RouteNode | undefined | null = store.routeNode;\n\n    const previewParams = {};\n\n    while (state && routeNode) {\n      const route = state.routes[state.index || state.routes.length - 1];\n      Object.assign(previewParams, route.params);\n      state = route.state;\n      routeNode = routeNode.children.find((child) => child.route === route.name);\n    }\n\n    if (routeNode) {\n      Wrapper = ContextMenu;\n      wrapperProps = {\n        activationMethod: 'longPress',\n      } satisfies Omit<ContextMenuProps, 'children'>;\n      const Component = getQualifiedRouteComponent(routeNode);\n      previewComponent = (\n        <PreviewParamsContext.Provider value={previewParams}>\n          <View style={styles.preview}>\n            <Component />\n          </View>\n        </PreviewParamsContext.Provider>\n      );\n    }\n  }\n\n  // Avoid using createElement directly, favoring JSX, to allow tools like NativeWind to perform custom JSX handling on native.\n  return (\n    <Wrapper {...wrapperProps}>\n      {previewComponent ? <Preview>{previewComponent}</Preview> : <></>}\n      {previewItems}\n      <Element\n        ref={ref}\n        {...props}\n        {...hrefAttrs}\n        {...rest}\n        style={style}\n        {...Platform.select({\n          web: {\n            onClick: onPress,\n          } as any,\n          default: { onPress, onLongPress },\n        })}>\n        {children}\n      </Element>\n    </Wrapper>\n  );\n}\n\nexport { LinkProps, WebAnchorProps };\n\nconst styles = StyleSheet.create({\n  preview: {\n    backgroundColor: 'white',\n    height: '50%',\n    width: '50%',\n    margin: 'auto',\n    pointerEvents: 'none',\n  },\n});\n"]}