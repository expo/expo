{"version":3,"file":"Link.js","sourceRoot":"","sources":["../../src/link/Link.tsx"],"names":[],"mappings":";;;AAAA,yCAAsC;AACtC,uDAAuF;AACvF,iCAAqC;AAGxB,QAAA,IAAI,GAAG,MAAM,CAAC,MAAM;AAC/B;;;;;;;;;;;;;;;;;;;;;;;;;GAyBG;AACH,SAAS,IAAI,CAAC,KAAgB;IAC5B,8EAA8E;IAC9E,OAAO,CAAC,mBAAQ,CAAC,IAAI,KAAK,CAAC,EAAG,CAAC;AACjC,CAAC,EACD;IACE,WAAW,EAAX,kBAAW;IACX;;;;;;;;;;;;;;;OAeG;IACH,IAAI,EAAE,0BAAQ;IACd;;;;;;;;;;;;;;;OAeG;IACH,OAAO,EAAE,6BAAW;IACpB;;;;;;;;;;;;;;;;;;;;;;;;;;OA0BG;IACH,OAAO,EAAE,6BAAW;IACpB;;;;;OAKG;IACH,UAAU,EAAE,gCAAc;CAC3B,CACF,CAAC;AAKF,uCAAqD;AAA5C,oGAAA,QAAQ,OAAA","sourcesContent":["import { ExpoLink } from './ExpoLink';\nimport { LinkMenu, LinkMenuAction, LinkPreview, LinkTrigger } from './LinkWithPreview';\nimport { resolveHref } from './href';\nimport type { LinkProps, WebAnchorProps } from './useLinkHooks';\n\nexport const Link = Object.assign(\n  /**\n   * Component that renders a link using [`href`](#href) to another route.\n   * By default, it accepts children and wraps them in a `<Text>` component.\n   *\n   * Uses an anchor tag (`<a>`) on web and performs a client-side navigation to preserve\n   * the state of the website and navigate faster. The web-only attributes such as `target`,\n   * `rel`, and `download` are supported and passed to the anchor tag on web. See\n   * [`WebAnchorProps`](#webanchorprops) for more details.\n   *\n   * > **Note**: Client-side navigation works with both single-page apps,\n   * and [static-rendering](/router/reference/static-rendering/).\n   *\n   * @example\n   * ```tsx\n   * import { Link } from 'expo-router';\n   * import { View } from 'react-native';\n   *\n   * export default function Route() {\n   *  return (\n   *   <View>\n   *    <Link href=\"/about\">About</Link>\n   *   </View>\n   *  );\n   *}\n   * ```\n   */\n  function Link(props: LinkProps) {\n    // Re-exporting ExpoLink here so that Link.* can be used in server components.\n    return <ExpoLink {...props} />;\n  },\n  {\n    resolveHref,\n    /**\n     * A component used to group context menu actions for a link.\n     *\n     * If multiple `Link.Menu` components are used within a single `Link`, only the first one will be rendered.\n     * Only `Link.MenuAction` components are allowed as children of `Link.Menu`.\n     *\n     * @example\n     * ```tsx\n     * <Link.Menu>\n     *   <Link.MenuAction title=\"Action 1\" onPress={()=>{}} />\n     *   <Link.MenuAction title=\"Action 2\" onPress={()=>{}} />\n     * </Link.Menu>\n     * ```\n     *\n     * @platform ios\n     */\n    Menu: LinkMenu,\n    /**\n     * A component used as a link trigger. The content of this component will be rendered in the base link.\n     *\n     * If multiple `Link.Trigger` components are used within a single `Link`, only the first one will be rendered.\n     *\n     * @example\n     * ```tsx\n     * <Link href=\"/about\">\n     *   <Link.Trigger>\n     *     Trigger\n     *   </Link.Trigger>\n     * </Link>\n     * ```\n     *\n     * @platform ios\n     */\n    Trigger: LinkTrigger,\n    /**\n     * A component used to render and customize the link preview.\n     *\n     * If `Link.Preview` is used without any props, it will render a preview of the `href` passed to the `Link`.\n     *\n     * If multiple `Link.Preview` components are used within a single `Link`, only the first one will be rendered.\n     *\n     * To customize the preview, you can pass custom content as children.\n     *\n     * @example\n     * ```tsx\n     * <Link href=\"/about\">\n     *   <Link.Preview>\n     *     <Text>Custom Preview Content</Text>\n     *   </Link.Trigger>\n     * </Link>\n     * ```\n     *\n     * @example\n     * ```tsx\n     * <Link href=\"/about\">\n     *   <Link.Preview />\n     * </Link>\n     * ```\n     *\n     * @platform ios\n     */\n    Preview: LinkPreview,\n    /**\n     * A component used to render a context menu action for a link.\n     * This component should only be used as a child of `Link.Menu`.\n     *\n     * @platform ios\n     */\n    MenuAction: LinkMenuAction,\n  }\n);\n\nexport type LinkComponent = typeof Link;\n\nexport { LinkProps, WebAnchorProps };\nexport { Redirect, RedirectProps } from './Redirect';\n"]}