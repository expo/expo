{"version":3,"file":"useLinkHooks.js","sourceRoot":"","sources":["../../src/link/useLinkHooks.ts"],"names":[],"mappings":";;;AAAA,wFAAwF;AACxF,mCAAmC;AACnC,iCAA4C;AAC5C,+CAA0E;AAqG1E,qDAAqD;AACrD,SAAgB,mBAAmB,CAAC,KAAyD;IAC3F,IAAI,uBAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;QACzB,OAAO,KAAK,CAAC,KAAK,CAAC;KACpB;IAED,sDAAsD;IACtD,OAAO,IAAA,eAAO,EAAC,GAAG,EAAE;QAClB,IAAI,KAAK,CAAC,SAAS,IAAI,IAAI,EAAE;YAC3B,OAAO,KAAK,CAAC,KAAK,CAAC;SACpB;QACD,MAAM,QAAQ,GAAG;YACf,KAAK,EAAE,IAAI;YACX,qBAAqB,EAAE,KAAK,CAAC,SAAS;SACvC,CAAC;QAEF,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAC9B,OAAO,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;SACnC;QACD,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IACjC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;AACrC,CAAC;AApBD,kDAoBC;AAEY,QAAA,YAAY,GAAG,uBAAQ,CAAC,MAAM,CAEzC;IACA,GAAG,EAAE,SAAS,YAAY,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAA2B;QACpF,OAAO,IAAA,eAAO,EAAC,GAAG,EAAE;YAClB,MAAM,SAAS,GAAG;gBAChB,GAAG;gBACH,MAAM;gBACN,QAAQ;aACT,CAAC;YACF,IAAI,OAAO,EAAE;gBACX,OAAO,SAAS,CAAC;aAClB;YACD,OAAO;gBACL,SAAS;aACV,CAAC;QACJ,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;IACvC,CAAC;IACD,OAAO,EAAE,SAAS,YAAY;QAC5B,OAAO,EAAE,CAAC;IACZ,CAAC;CACF,CAAC,CAAC","sourcesContent":["// Fork of @react-navigation/native Link.tsx with `href` and `replace` support added and\n// `to` / `action` support removed.\nimport { useMemo, MouseEvent } from 'react';\nimport { TextProps, GestureResponderEvent, Platform } from 'react-native';\n\nimport { Href } from '../types';\n\n// docsMissing\n/**\n * @platform web\n */\nexport type WebAnchorProps = {\n  /**\n   * Specifies where to open the `href`.\n   *\n   * - **_self**: the current tab.\n   * - **_blank**: opens in a new tab or window.\n   * - **_parent**: opens in the parent browsing context. If no parent, defaults to **_self**.\n   * - **_top**: opens in the highest browsing context ancestor. If no ancestors, defaults to **_self**.\n   *\n   * This property is passed to the underlying anchor (`<a>`) tag.\n   *\n   * @default '_self'\n   *\n   * @example\n   * ```jsx\n   * <Link href=\"https://expo.dev\" target=\"_blank\">Go to Expo in new tab</Link>\n   * ```\n   */\n  target?: '_self' | '_blank' | '_parent' | '_top' | (string & object);\n\n  /**\n   * Specifies the relationship between the `href` and the current route.\n   *\n   * Common values:\n   * - **nofollow**: Indicates to search engines that they should not follow the `href`. This is often used for user-generated content or links that should not influence search engine rankings.\n   * - **noopener**: Suggests that the `href` should not have access to the opening window's `window.opener` object, which is a security measure to prevent potentially harmful behavior in cases of links that open new tabs or windows.\n   * - **noreferrer**: Requests that the browser not send the `Referer` HTTP header when navigating to the `href`. This can enhance user privacy.\n   *\n   * The `rel` property is primarily used for informational and instructive purposes, helping browsers and web\n   * crawlers make better decisions about how to handle and interpret the links on a web page. It is important\n   * to use appropriate `rel` values to ensure that links behave as intended and adhere to best practices for web\n   * development and SEO (Search Engine Optimization).\n   *\n   * This property is passed to the underlying anchor (`<a>`) tag.\n   *\n   * @example\n   * ```jsx\n   * <Link href=\"https://expo.dev\" rel=\"nofollow\">Go to Expo</Link>`\n   * ```\n   */\n  rel?: string;\n\n  /**\n   * Specifies that the `href` should be downloaded when the user clicks on the link,\n   * instead of navigating to it. It is typically used for links that point to files that the user should download,\n   * such as PDFs, images, documents, etc.\n   *\n   * The value of the `download` property, which represents the filename for the downloaded file.\n   * This property is passed to the underlying anchor (`<a>`) tag.\n   *\n   * @example\n   * ```jsx\n   * <Link href=\"/image.jpg\" download=\"my-image.jpg\">Download image</Link>\n   * ```\n   */\n  download?: string;\n};\n\n// @docsMissing\n/**\n *\n */\nexport interface LinkProps<T extends string | object>\n  extends Omit<TextProps, 'href'>,\n    WebAnchorProps {\n  /** Path to route to. */\n  href: Href<T>;\n\n  // TODO(EvanBacon): This may need to be extracted for React Native style support.\n  /** Forward props to child component. Useful for custom buttons. */\n  asChild?: boolean;\n\n  /** Should replace the current route without adding to the history. */\n  replace?: boolean;\n  /** Should push the current route  */\n  push?: boolean;\n\n  /** On web, this sets the HTML `class` directly. On native, this can be used with CSS interop tools like Nativewind. */\n  className?: string;\n\n  onPress?: (e: MouseEvent<HTMLAnchorElement> | GestureResponderEvent) => void;\n\n  /**\n   * Relative URL references are either relative to the directory or the document. By default, relative paths are relative to the document.\n   *\n   * @see [Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references)\n   */\n  relativeToDirectory?: boolean;\n\n  /** Should this route replace the initial screen */\n  withAnchor?: boolean;\n}\n\n// Mutate the style prop to add the className on web.\nexport function useInteropClassName(props: { style?: TextProps['style']; className?: string }) {\n  if (Platform.OS !== 'web') {\n    return props.style;\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useMemo(() => {\n    if (props.className == null) {\n      return props.style;\n    }\n    const cssStyle = {\n      $$css: true,\n      __routerLinkClassName: props.className,\n    };\n\n    if (Array.isArray(props.style)) {\n      return [...props.style, cssStyle];\n    }\n    return [props.style, cssStyle];\n  }, [props.style, props.className]);\n}\n\nexport const useHrefAttrs = Platform.select<\n  (props: Partial<LinkProps<any>>) => { hrefAttrs?: any } & Partial<LinkProps<any>>\n>({\n  web: function useHrefAttrs({ asChild, rel, target, download }: Partial<LinkProps<any>>) {\n    return useMemo(() => {\n      const hrefAttrs = {\n        rel,\n        target,\n        download,\n      };\n      if (asChild) {\n        return hrefAttrs;\n      }\n      return {\n        hrefAttrs,\n      };\n    }, [asChild, rel, target, download]);\n  },\n  default: function useHrefAttrs() {\n    return {};\n  },\n});\n"]}