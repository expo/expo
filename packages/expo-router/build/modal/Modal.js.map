{"version":3,"file":"Modal.js","sourceRoot":"","sources":["../../src/modal/Modal.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;AA0Fb,sBA0DC;AAjJD,kDAA2C;AAC3C,iCAA4C;AAI5C,iDAAmE;AACnE,oDAAiD;AA0DjD;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,SAAgB,KAAK,CAAC,KAAiB;IACrC,MAAM,EACJ,QAAQ,EACR,OAAO,EACP,OAAO,EACP,MAAM,EACN,aAAa,EACb,iBAAiB,EACjB,WAAW,EACX,GAAG,SAAS,EACb,GAAG,KAAK,CAAC;IACV,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,gBAAgB,EAAE,GAAG,IAAA,8BAAe,GAAE,CAAC;IACtE,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,IAAA,gBAAQ,GAAsB,CAAC;IAC3E,MAAM,UAAU,GAAG,IAAA,6BAAa,GAAiC,CAAC;IAClE,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,CAAC,cAAc,IAAI,OAAO,EAAE,CAAC;YAC/B,MAAM,KAAK,GAAG,IAAA,mBAAM,GAAE,CAAC;YACvB,SAAS,CAAC;gBACR,aAAa;gBACb,iBAAiB;gBACjB,WAAW;gBACX,SAAS;gBACT,SAAS,EAAE,QAAQ;gBACnB,QAAQ,EAAE,KAAK;gBACf,oBAAoB,EAAE,UAAU;aACjC,CAAC,CAAC;YACH,iBAAiB,CAAC,KAAK,CAAC,CAAC;YACzB,OAAO,GAAG,EAAE;gBACV,UAAU,CAAC,KAAK,CAAC,CAAC;YACpB,CAAC,CAAC;QACJ,CAAC;aAAM,IAAI,cAAc,IAAI,CAAC,OAAO,EAAE,CAAC;YACtC,UAAU,CAAC,cAAc,CAAC,CAAC;YAC3B,iBAAiB,CAAC,SAAS,CAAC,CAAC;QAC/B,CAAC;QACD,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;IAClB,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAEd,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,cAAc,EAAE,CAAC;YACnB,MAAM,eAAe,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE;gBACtD,IAAI,EAAE,KAAK,cAAc,EAAE,CAAC;oBAC1B,MAAM,EAAE,EAAE,CAAC;gBACb,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,EAAE;gBACxD,IAAI,EAAE,KAAK,cAAc,EAAE,CAAC;oBAC1B,OAAO,EAAE,EAAE,CAAC;oBACZ,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBAC/B,CAAC;YACH,CAAC,CAAC,CAAC;YACH,OAAO,GAAG,EAAE;gBACV,eAAe,EAAE,CAAC;gBAClB,gBAAgB,EAAE,CAAC;YACrB,CAAC,CAAC;QACJ,CAAC;QACD,OAAO,GAAG,EAAE,GAAE,CAAC,CAAC;IAClB,CAAC,EAAE,CAAC,cAAc,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC;IAChD,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["'use client';\n\nimport { type NavigationProp, type ParamListBase } from '@react-navigation/native';\nimport { nanoid } from 'nanoid/non-secure';\nimport { useEffect, useState } from 'react';\nimport { ViewProps } from 'react-native';\nimport { type ScreenProps } from 'react-native-screens';\n\nimport { useModalContext, type ModalConfig } from './ModalContext';\nimport { useNavigation } from '../useNavigation';\n\nexport interface ModalProps extends ViewProps {\n  /**\n   * The content of the modal.\n   */\n  children?: React.ReactNode;\n  /**\n   * Whether the modal is visible or not.\n   * When set to `true`, the modal will be opened.\n   * When set to `false`, the modal will be closed.\n   */\n  visible: boolean;\n  /**\n   * Callback that is called after modal is closed.\n   * This is called when the modal is dismissed by the user or programmatically.\n   */\n  onClose?: () => void;\n  /**\n   * Callback that is called after modal is shown.\n   */\n  onShow?: () => void;\n  /**\n   * The animation type for the modal.\n   * This can be one of 'none', 'slide', or 'fade'.\n   */\n  animationType?: ModalConfig['animationType'];\n  /**\n   * The presentation style for the modal.\n   * This can be one of 'fullScreen', 'pageSheet', 'formSheet', or 'overFullScreen'.\n   * - `fullScreen`: The modal covers the entire screen. When `transparent` is set to `true`, it will fallback to `overFullScreen`.\n   * - `pageSheet`: The modal is presented as a page sheet on iOS. Defaults to `fullScreen` on Android.\n   * - `formSheet`: The modal is presented as a form sheet.\n   * - `overFullScreen`: The modal is presented over the full screen, allowing interaction with the underlying content.\n   *\n   * @default 'fullScreen'\n   */\n  presentationStyle?: ModalConfig['presentationStyle'];\n  /**\n   * Whether the modal should be rendered as a transparent overlay.\n   * This will render the modal without a background, allowing the content behind it to be visible.\n   *\n   * On Android, this will fallback to `overFullScreen` presentation style.\n   */\n  transparent?: boolean;\n  /**\n   * See {@link ScreenProps[\"sheetAllowedDetents\"]}.\n   *\n   * Describes heights where a sheet can rest.\n   * Works only when `presentation` is set to `formSheet`.\n   *\n   * Heights should be described as fraction (a number from `[0, 1]` interval) of screen height / maximum detent height.\n   * You can pass an array of ascending values each defining allowed sheet detent. iOS accepts any number of detents,\n   * while **Android is limited to three**.\n   */\n  detents?: ModalConfig['detents'];\n}\n\n/**\n * A standalone modal component that can be used in Expo Router apps.\n * It always renders on top of the application's content.\n * Internally, the modal is rendered as a `Stack.Screen`, with the presentation style determined by the `presentationStyle` prop.\n *\n * This component is not linkable. If you need to link to a modal, use `<Stack.Screen options={{ presentationStyle: \"modal\" }} />` instead.\n *\n * @example\n * ```tsx\n * import { Modal } from 'expo-router';\n *\n * function Page() {\n *  const [modalVisible, setModalVisible] = useState(false);\n *  return (\n *    <Modal\n *      visible={modalVisible}\n *      onClose={() => setModalVisible(false)}\n *    >\n *      <Text>Hello World</Text>\n *    </Modal>\n *  );\n * }\n */\nexport function Modal(props: ModalProps) {\n  const {\n    children,\n    visible,\n    onClose,\n    onShow,\n    animationType,\n    presentationStyle,\n    transparent,\n    ...viewProps\n  } = props;\n  const { openModal, closeModal, addEventListener } = useModalContext();\n  const [currentModalId, setCurrentModalId] = useState<string | undefined>();\n  const navigation = useNavigation<NavigationProp<ParamListBase>>();\n  useEffect(() => {\n    if (!currentModalId && visible) {\n      const newId = nanoid();\n      openModal({\n        animationType,\n        presentationStyle,\n        transparent,\n        viewProps,\n        component: children,\n        uniqueId: newId,\n        parentNavigationProp: navigation,\n      });\n      setCurrentModalId(newId);\n      return () => {\n        closeModal(newId);\n      };\n    } else if (currentModalId && !visible) {\n      closeModal(currentModalId);\n      setCurrentModalId(undefined);\n    }\n    return () => {};\n  }, [visible]);\n\n  useEffect(() => {\n    if (currentModalId) {\n      const unsubscribeShow = addEventListener('show', (id) => {\n        if (id === currentModalId) {\n          onShow?.();\n        }\n      });\n      const unsubscribeClose = addEventListener('close', (id) => {\n        if (id === currentModalId) {\n          onClose?.();\n          setCurrentModalId(undefined);\n        }\n      });\n      return () => {\n        unsubscribeShow();\n        unsubscribeClose();\n      };\n    }\n    return () => {};\n  }, [currentModalId, addEventListener, onClose]);\n  return null;\n}\n"]}