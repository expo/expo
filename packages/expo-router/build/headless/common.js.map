{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/headless/common.tsx"],"names":[],"mappings":";;;AAAA,qDAAiG;AAGjG,8CAAsD;AAEtD,8CAIuB;AAEvB,kGAAkG;AAClG,gBAAgB;AAChB,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,+BAAsB,EAAC,EAAS,CAAC,EAAE,CAAC;AAgBvD,SAAgB,iBAAiB,CAC/B,QAA4B,EAC5B,eAA0B,EAC1B,OAAsC,EACtC,gBAAoC;IAEpC,MAAM,OAAO,GAAmB,EAAE,CAAC;IAEnC,KAAK,MAAM,EAAE,IAAI,EAAE,IAAI,QAAQ,EAAE;QAC/B,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC,IAAW,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAE/E,IAAI,CAAC,KAAK,EAAE;YACV,SAAS;SACV;QAED,IAAI,eAAe,CAAC,KAAK,EAAE;YACzB,OAAO,KAAK,EAAE,KAAK,EAAE;gBACnB,MAAM,aAAa,GAAG,KAAK,CAAC;gBAC5B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC/E,IAAI,aAAa,CAAC,IAAI,KAAK,eAAe,CAAC,KAAK;oBAAE,MAAM;aACzD;SACF;QAED,MAAM,SAAS,GAAG,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK,EAAE,IAAI,CAAC,CAAC;QAExF,IAAI,CAAC,SAAS,EAAE;YACd,SAAS;SACV;QAED,OAAO,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;KAC7B;IAED,MAAM,MAAM,GAAG,IAAA,kCAAqB,EAAC,gBAAgB,CAAC,CAAC;IAEvD,MAAM,QAAQ,GAAG,OAAO;SACrB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;SAChD,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CACtB,CAAC,MAAM,CACL,GAAG,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CACrB,IAAI,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CACtB,KAAK,CAAC,CAAC,IAAA,gCAAmB,EAAC,SAAS,CAAC,CAAC,CACtC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,IAAA,uCAA0B,EAAC,SAAS,CAAC,CAAC,CAC1D,OAAO,CAAC,CAAC,IAAA,iCAAoB,EAAC,SAAS,CAAC,CAAC,EACzC,CACH,CAAC,CAAC;IAEL,OAAO;QACL,QAAQ;KACT,CAAC;AACJ,CAAC;AAjDD,8CAiDC","sourcesContent":["import { LinkingOptions, ParamListBase, createNavigatorFactory } from '@react-navigation/native';\n\nimport { RouteNode } from '../Route';\nimport { sortRoutesWithInitial } from '../sortRoutes';\nimport { Href } from '../types';\nimport {\n  createGetIdForRoute,\n  getQualifiedRouteComponent,\n  screenOptionsFactory,\n} from '../useScreens';\n\n// `@react-navigation/core` does not expose the Screen or Group components directly, so we have to\n// do this hack.\nconst { Screen } = createNavigatorFactory({} as any)();\n\nexport type PolymorphicProps<E extends React.ElementType> = React.PropsWithChildren<\n  React.ComponentPropsWithoutRef<E> & {\n    as?: E;\n  }\n>;\n\nexport type ScreenTrigger<T extends string | object> = {\n  href: Href<T>;\n};\n\nexport type ScreenConfig = {\n  routeNode: RouteNode;\n};\n\nexport function triggersToScreens<T extends string | object>(\n  triggers: ScreenTrigger<T>[],\n  layoutRouteNode: RouteNode,\n  linking: LinkingOptions<ParamListBase>,\n  initialRouteName: undefined | string\n) {\n  const configs: ScreenConfig[] = [];\n\n  for (const { href } of triggers) {\n    let state = linking.getStateFromPath?.(href as any, linking.config)?.routes[0];\n\n    if (!state) {\n      continue;\n    }\n\n    if (layoutRouteNode.route) {\n      while (state?.state) {\n        const previousState = state;\n        state = state.state.routes[state.state.index ?? state.state.routes.length - 1];\n        if (previousState.name === layoutRouteNode.route) break;\n      }\n    }\n\n    const routeNode = layoutRouteNode.children.find((child) => child.route === state?.name);\n\n    if (!routeNode) {\n      continue;\n    }\n\n    configs.push({ routeNode });\n  }\n\n  const sortFn = sortRoutesWithInitial(initialRouteName);\n\n  const children = configs\n    .sort((a, b) => sortFn(a.routeNode, b.routeNode))\n    .map(({ routeNode }) => (\n      <Screen\n        key={routeNode.route}\n        name={routeNode.route}\n        getId={createGetIdForRoute(routeNode)}\n        getComponent={() => getQualifiedRouteComponent(routeNode)}\n        options={screenOptionsFactory(routeNode)}\n      />\n    ));\n\n  return {\n    children,\n  };\n}\n"]}