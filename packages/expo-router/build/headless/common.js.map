{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/headless/common.tsx"],"names":[],"mappings":";;;AAAA,qDAAiG;AAEjG,8CAAsD;AACtD,8CAA2D;AAG3D,kGAAkG;AAClG,gBAAgB;AAChB,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,+BAAsB,EAAC,EAAS,CAAC,EAAE,CAAC;AAiBvD,SAAgB,iBAAiB,CAC/B,QAAa,EACb,eAA0B,EAC1B,OAAsC;IAEtC,IAAI,gBAAoC,CAAC;IAEzC,MAAM,YAAY,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,EAAE;QACnE,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC,IAAW,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAE/E,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,GAAG,CAAC;SACZ;QAED,IAAI,eAAe,CAAC,KAAK,EAAE;YACzB,OAAO,KAAK,EAAE,KAAK,EAAE;gBACnB,MAAM,aAAa,GAAG,KAAK,CAAC;gBAC5B,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,aAAa,CAAC,IAAI,KAAK,eAAe,CAAC,KAAK;oBAAE,MAAM;aACzD;SACF;QAED,IAAI,SAAS,GAAG,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK,EAAE,IAAI,CAAC,CAAC;QAEtF,IAAI,SAAS,EAAE;YACb,6CAA6C;YAC7C,IAAI,YAAY,EAAE;gBAChB,gBAAgB,GAAG,SAAS,CAAC,KAAK,CAAC;aACpC;YAED,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;SACzB;QAED,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAoB,CAAC,CAAC;IAEzB,MAAM,MAAM,GAAG,IAAA,kCAAqB,EAAC,gBAAgB,CAAC,CAAC;IAEvD,MAAM,QAAQ,GAAG,YAAY;SAC1B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;SAChD,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CACtB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,IAAA,uCAA0B,EAAC,SAAS,CAAC,CAAC,EAAG,CAC7F,CAAC,CAAC;IAEL,OAAO;QACL,QAAQ;QACR,gBAAgB;KACjB,CAAC;AACJ,CAAC;AAhDD,8CAgDC","sourcesContent":["import { LinkingOptions, ParamListBase, createNavigatorFactory } from '@react-navigation/native';\nimport { RouteNode } from '../Route';\nimport { sortRoutesWithInitial } from '../sortRoutes';\nimport { getQualifiedRouteComponent } from '../useScreens';\nimport { Href } from '../types';\n\n// `@react-navigation/core` does not expose the Screen or Group components directly, so we have to\n// do this hack.\nconst { Screen } = createNavigatorFactory({} as any)();\n\nexport type PolymorphicProps<E extends React.ElementType> = React.PropsWithChildren<\n  React.ComponentPropsWithoutRef<E> & {\n    as?: E;\n  }\n>;\n\nexport type ScreenTrigger<T extends string | object> = {\n  href: Href<T>;\n  initialRoute?: boolean;\n};\n\nexport type ScreenConfig = {\n  routeNode: RouteNode;\n};\n\nexport function triggersToScreens<T extends ScreenTrigger<any>>(\n  triggers: T[],\n  layoutRouteNode: RouteNode,\n  linking: LinkingOptions<ParamListBase>\n) {\n  let initialRouteName: string | undefined;\n\n  const screenConfig = triggers.reduce((acc, { href, initialRoute }) => {\n    let state = linking.getStateFromPath?.(href as any, linking.config)?.routes[0];\n\n    if (!state) {\n      return acc;\n    }\n\n    if (layoutRouteNode.route) {\n      while (state?.state) {\n        const previousState = state;\n        state = state.state.routes[0];\n        if (previousState.name === layoutRouteNode.route) break;\n      }\n    }\n\n    let routeNode = layoutRouteNode.children.find((child) => child.route === state?.name);\n\n    if (routeNode) {\n      // const key = `${routeNode.route}#${index}`;\n      if (initialRoute) {\n        initialRouteName = routeNode.route;\n      }\n\n      acc.push({ routeNode });\n    }\n\n    return acc;\n  }, [] as ScreenConfig[]);\n\n  const sortFn = sortRoutesWithInitial(initialRouteName);\n\n  const children = screenConfig\n    .sort((a, b) => sortFn(a.routeNode, b.routeNode))\n    .map(({ routeNode }) => (\n      <Screen name={routeNode.route} getComponent={() => getQualifiedRouteComponent(routeNode)} />\n    ));\n\n  return {\n    children,\n    initialRouteName,\n  };\n}\n"]}