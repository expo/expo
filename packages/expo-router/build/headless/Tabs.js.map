{"version":3,"file":"Tabs.js","sourceRoot":"","sources":["../../src/headless/Tabs.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Fragment,\n  FunctionComponentElement,\n  isValidElement,\n  PropsWithChildren,\n  useId,\n  useContext,\n  Children,\n  ReactNode,\n} from 'react';\nimport { Platform, ViewProps, View } from 'react-native';\nimport { createNavigatorFactory } from '@react-navigation/core';\nimport {\n  DefaultNavigatorOptions,\n  LinkingContext,\n  LinkingOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport { TabsContext, ExpoTabsScreenOptions } from './Tabs.common';\nimport { RouteNode, useRouteNode } from '../Route';\nimport { getQualifiedRouteComponent } from '../useScreens';\nimport { resolveHref } from '../link/href';\nimport { Href } from '../types';\nimport { shouldLinkExternally } from '../utils/url';\nimport { ExpoTabNavigationState, ExpoTabRouterOptions, TabRouter } from './Tabs.router';\nimport { sortRoutesWithInitial } from '../sortRoutes';\nimport { TabList, TabTrigger, TabTriggerOptions, TabTriggerProps } from './Tabs.bar';\n\nexport * from './Tabs.slot';\nexport * from './Tabs.bar';\nexport * from './Tabs.common';\n\nexport type UseTabsOptions = Omit<\n  DefaultNavigatorOptions<\n    ParamListBase,\n    ExpoTabNavigationState,\n    ExpoTabsScreenOptions,\n    TabNavigationEventMap\n  >,\n  'children'\n> &\n  Omit<TabRouterOptions, 'initialRouteName'> & {\n    triggers: TabTriggerOptions[];\n  };\n\n// `@react-navigation/core` does not expose the Screen or Group components directly, so we have to\n// do this hack.\nconst { Screen } = createNavigatorFactory({} as any)();\n\nexport type TabsProps = PropsWithChildren<ViewProps>;\n\nexport type TabNavigationEventMap = {\n  /**\n   * Event which fires on tapping on the tab in the tab bar.\n   */\n  tabPress: { data: undefined; canPreventDefault: true };\n  /**\n   * Event which fires on long press on the tab in the tab bar.\n   */\n  tabLongPress: { data: undefined };\n};\n\nexport function useTabs({ triggers, ...options }: UseTabsOptions) {\n  const routeNode = useRouteNode();\n  const linking = useContext(LinkingContext).options;\n\n  if (!routeNode || !linking) {\n    throw new Error('No RouteNode. This is likely a bug in expo-router.');\n  }\n\n  const { children, initialRouteName } = triggersToScreens(triggers, routeNode, linking);\n\n  const key = `${routeNode.contextKey}-${useId()}`;\n\n  const { state, descriptors, navigation, ...rest } = useNavigationBuilder<\n    ExpoTabNavigationState,\n    ExpoTabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    ExpoTabsScreenOptions,\n    TabNavigationEventMap\n  >(TabRouter, {\n    children,\n    backBehavior: Platform.OS === 'web' ? 'history' : 'firstRoute',\n    ...options,\n    initialRouteName,\n    key,\n  });\n\n  const routes = Object.fromEntries(\n    state.routes.map((route, index) => {\n      const options = descriptors[route.key].options;\n      const action = {\n        ...options.action,\n        target: state.key,\n      };\n\n      return [\n        '/',\n        {\n          route,\n          action,\n          key: route.key,\n          isFocused: state.index === index,\n          props: {\n            key: route.key,\n            onPress: () => {\n              const isFocused = state.index === index;\n              const event = navigation.emit({\n                type: 'tabPress',\n                target: route.key,\n                canPreventDefault: true,\n              });\n\n              if (!isFocused && !event.defaultPrevented) {\n                navigation.dispatch(action);\n              }\n            },\n          },\n        },\n      ];\n    })\n  );\n\n  return { state, descriptors, navigation, routes, ...rest };\n}\n\nexport type ExpoTabHrefs =\n  | Record<string, Omit<ExpoTabsScreenOptions, 'action'>>\n  | Array<Href | [Href, Omit<ExpoTabsScreenOptions, 'action'>]>;\n\ntype ScreenConfig = {\n  routeNode: RouteNode;\n  key: string;\n};\n\nfunction isTabListOrFragment(child: ReactNode): child is FunctionComponentElement<TabTriggerProps> {\n  return isValidElement(child) && (child.type === TabList || child.type === Fragment);\n}\n\nfunction isTabTrigger(child: ReactNode): child is FunctionComponentElement<TabTriggerProps> {\n  return isValidElement(child) && child.type === TabTrigger;\n}\n\nfunction parseTriggersFromChildren(children: ReactNode, screenTriggers: TabTriggerOptions[] = []) {\n  Children.forEach(children, (child) => {\n    if (isTabListOrFragment(child)) {\n      return parseTriggersFromChildren(child.props.children, screenTriggers);\n    }\n\n    if (!isTabTrigger(child)) {\n      return;\n    }\n\n    let { href, initialRoute } = child.props;\n\n    href = resolveHref(href);\n\n    if (shouldLinkExternally(href)) {\n      return;\n    }\n\n    screenTriggers.push({ href, initialRoute });\n    return;\n  });\n\n  return screenTriggers;\n}\n\nfunction triggersToScreens(\n  triggers: TabTriggerOptions[],\n  layoutRouteNode: RouteNode,\n  linking: LinkingOptions<ParamListBase>\n) {\n  let initialRouteName: string | undefined;\n\n  const screenConfig = triggers.reduce((acc, { href, initialRoute }, index) => {\n    let state = linking.getStateFromPath?.(href as any, linking.config)?.routes[0];\n\n    if (!state) {\n      return acc;\n    }\n\n    if (layoutRouteNode.route) {\n      while (state?.state) {\n        const previousState = state;\n        state = state.state.routes[0];\n        if (previousState.name === layoutRouteNode.route) break;\n      }\n    }\n\n    let routeNode = layoutRouteNode.children.find((child) => child.route === state?.name);\n\n    if (routeNode) {\n      const key = `${routeNode.route}#${index}`;\n      if (initialRoute) {\n        initialRouteName = routeNode.route;\n      }\n\n      acc.push({ routeNode, key });\n    }\n\n    return acc;\n  }, [] as ScreenConfig[]);\n\n  const sortFn = sortRoutesWithInitial(initialRouteName);\n\n  const children = screenConfig\n    .sort((a, b) => sortFn(a.routeNode, b.routeNode))\n    .map(({ routeNode, key }) => (\n      <Screen key={key} name={key} getComponent={() => getQualifiedRouteComponent(routeNode)} />\n    ));\n\n  return {\n    children,\n    initialRouteName,\n  };\n}\n\nexport function NewTabs({ children, style = { flex: 1 } }: TabsProps) {\n  const triggers = parseTriggersFromChildren(children);\n  const tabsContext = useTabs({ triggers });\n  const NavigationContent = tabsContext.NavigationContent;\n\n  return (\n    <TabsContext.Provider value={tabsContext}>\n      <View style={style}>\n        <NavigationContent>{children}</NavigationContent>\n      </View>\n    </TabsContext.Provider>\n  );\n}\n"]}