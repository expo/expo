{"version":3,"file":"Tabs.js","sourceRoot":"","sources":["../../src/headless/Tabs.tsx"],"names":[],"mappings":"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","sourcesContent":["import { PropsWithChildren, ReactNode } from 'react';\nimport { createNavigatorFactory } from '@react-navigation/core';\nimport { BottomTabNavigationOptions } from '@react-navigation/bottom-tabs';\nimport { BottomTabNavigationConfig } from '@react-navigation/bottom-tabs/lib/typescript/src/types';\nimport {\n  DefaultNavigatorOptions,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouter,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport { TabsContext } from './Tabs.common';\nimport { RouteNode, useRouteNode } from '../Route';\nimport { getQualifiedRouteComponent } from '../useScreens';\nimport { resolveHref } from '../link/href';\nimport { Href, UnknownInputParams } from '../types';\nimport { shouldLinkExternally } from '../utils/url';\n\nexport * from './Tabs.slot';\nexport * from './Tabs.common';\n\nexport type UseTabsOptions = Omit<\n  DefaultNavigatorOptions<\n    ParamListBase,\n    TabNavigationState<ParamListBase>,\n    TabsScreenOptions,\n    TabNavigationEventMap\n  >,\n  'children'\n> &\n  Omit<TabRouterOptions, 'initialRouteName'> & // Should be set through `unstable_settings`\n  BottomTabNavigationConfig & {\n    hrefs: HrefOptions;\n  };\n\n// `@react-navigation/core` does not expose the Screen or Group components directly, so we have to\n// do this hack.\nconst { Screen } = createNavigatorFactory({} as any)();\n\nexport type TabsProps = PropsWithChildren<UseTabsOptions>;\nexport type TabsScreenOptions = BottomTabNavigationOptions;\nexport type TabNavigationEventMap = {\n  /**\n   * Event which fires on tapping on the tab in the tab bar.\n   */\n  tabPress: { data: undefined; canPreventDefault: true };\n  /**\n   * Event which fires on long press on the tab in the tab bar.\n   */\n  tabLongPress: { data: undefined };\n};\n\nexport function useTabs({ hrefs, ...options }: UseTabsOptions) {\n  const routeNode = useRouteNode();\n  if (routeNode == null) {\n    throw new Error('No RouteNode. This is likely a bug in expo-router.');\n  }\n\n  const children = hrefOptionsToScreens(routeNode, hrefs);\n\n  return useNavigationBuilder<\n    TabNavigationState<ParamListBase>,\n    TabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    BottomTabNavigationOptions,\n    TabNavigationEventMap\n  >(TabRouter, { children, ...options });\n}\n\nexport function Tabs({ children, ...options }: TabsProps) {\n  const tabsContext = useTabs(options);\n\n  const NavigationContent = tabsContext.NavigationContent;\n\n  return (\n    <TabsContext.Provider value={tabsContext}>\n      <NavigationContent>{children}</NavigationContent>\n    </TabsContext.Provider>\n  );\n}\n\ntype HrefOptions = Record<string, object> | Array<Href | [Href, object]>;\n\nfunction hrefOptionsToScreens(layoutRouteNode: RouteNode, hrefOptions: HrefOptions) {\n  const hrefEntries: [Href, object][] = Array.isArray(hrefOptions)\n    ? hrefOptions.map((option) => (Array.isArray(option) ? option : [option, {}]))\n    : Object.entries(hrefOptions);\n\n  return hrefEntries.reduce((acc, [href, options], index) => {\n    if (\n      typeof href === 'string' &&\n      'params' in options &&\n      typeof options.params === 'object' &&\n      options.params\n    ) {\n      href = {\n        pathname: href,\n        params: options.params as UnknownInputParams,\n      };\n    }\n\n    const routeNode = hrefToRouteNode(layoutRouteNode, href, index);\n\n    // If the href isn't valid, skip it\n    if (!routeNode) {\n      return acc;\n    }\n\n    acc.push(\n      <Screen\n        key={routeNode.contextKey}\n        name={`${index}`} // The name needs to be unique, but we don't actually use it\n        getComponent={() => getQualifiedRouteComponent(routeNode)}\n      />\n    );\n\n    return acc;\n  }, [] as ReactNode[]);\n}\n\nfunction hrefToRouteNode(layoutRouteNode: RouteNode, href: Href, index: number) {\n  href = resolveHref(href);\n\n  if (shouldLinkExternally(href)) {\n    return null;\n  }\n\n  // You cannot navigate outside this layout\n  if (href.startsWith('..')) {\n    return null;\n  }\n\n  // TODO: Properly resolve the routeNode\n  return layoutRouteNode.children[index];\n}\n"]}