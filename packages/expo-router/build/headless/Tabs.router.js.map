{"version":3,"file":"Tabs.router.js","sourceRoot":"","sources":["../../src/headless/Tabs.router.ts"],"names":[],"mappings":";;;AAAA,qDASkC;AAUlC,SAAgB,SAAS,CAAC,aAAmC;IAC3D,MAAM,MAAM,GAAG,IAAA,kBAAa,EAAC,aAAa,CAAC,CAAC;IAC5C,MAAM,IAAI,GAAG,UAAU,CAAC;IACxB,MAAM,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC;IAE9B,OAAO;QACL,GAAG,MAAM;QACT,IAAI,EAAE,UAAU;QAChB,eAAe,CAAC,OAAO;YACrB,MAAM,SAAS,GAAG,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;YAClD,OAAO;gBACL,GAAG,SAAS;gBACZ,IAAI;gBACJ,GAAG;gBACH,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;oBACrC,OAAO;wBACL,GAAG,KAAK;qBACT,CAAC;gBACJ,CAAC,CAAC;aACH,CAAC;QACJ,CAAC;QACD,kBAAkB,CAAC,KAAK,EAAE,OAAO;YAC/B,OAAO;gBACL,GAAG,MAAM,CAAC,kBAAkB,CAC1B,KAAwD,EACxD,OAAO,CACR;gBACD,IAAI;gBACJ,GAAG;aACJ,CAAC;QACJ,CAAC;QACD,2BAA2B,CAAC,KAAK,EAAE,OAAO;YACxC,OAAO;gBACL,GAAG,MAAM,CAAC,2BAA2B,CACnC,KAAqD,EACrD,OAAO,CACR;gBACD,IAAI;gBACJ,GAAG;aACJ,CAAC;QACJ,CAAC;QACD,qBAAqB,CAAC,KAAK,EAAE,GAAG;YAC9B,OAAO;gBACL,GAAG,MAAM,CAAC,qBAAqB,CAAC,KAAqD,EAAE,GAAG,CAAC;gBAC3F,IAAI;gBACJ,GAAG;aACJ,CAAC;QACJ,CAAC;QACD,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO;YACtC,IAAI,SAAS,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,EAAE;gBACzC,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;gBAC/B,IAAI,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;oBACrC,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;oBAE1B,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;wBACtC,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;4BACrD,OAAO,SAAS,CAAC,UAAU,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;wBAC1C,CAAC,CAAC,CAAC;wBAEH,IAAI,QAAQ,EAAE;4BACZ,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC;yBACzB;qBACF;iBACF;aACF;YAED,MAAM,SAAS,GAAG,MAAM,CAAC,iBAAiB,CACxC,KAAqD,EACrD,MAAM,EACN,OAAO,CACR,CAAC;YAEF,OAAO,SAAS,KAAK,IAAI;gBACvB,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC;oBACE,GAAG,SAAS;oBACZ,IAAI;oBACJ,GAAG;iBACJ,CAAC;QACR,CAAC;KACF,CAAC;AACJ,CAAC;AAjFD,8BAiFC","sourcesContent":["import {\n  TabRouter as BaseTabRouter,\n  TabRouterOptions,\n  ParamListBase,\n  TabNavigationState,\n  TabActionType,\n  CommonNavigationAction,\n  Router,\n  PartialState,\n} from '@react-navigation/native';\n\nexport type ExpoTabNavigationState = Omit<TabNavigationState<ParamListBase>, 'type'> & {\n  type: 'expo-tab';\n};\nexport type ExpoTabRouter = Router<ExpoTabNavigationState, TabActionType | CommonNavigationAction>;\nexport type ExpoTabRouterOptions = TabRouterOptions & {\n  key: string;\n};\n\nexport function TabRouter(routerOptions: ExpoTabRouterOptions): ExpoTabRouter {\n  const router = BaseTabRouter(routerOptions);\n  const type = 'expo-tab';\n  const key = routerOptions.key;\n\n  return {\n    ...router,\n    type: 'expo-tab',\n    getInitialState(options) {\n      const nextState = router.getInitialState(options);\n      return {\n        ...nextState,\n        type,\n        key,\n        routes: nextState.routes.map((route) => {\n          return {\n            ...route,\n          };\n        }),\n      };\n    },\n    getRehydratedState(state, options) {\n      return {\n        ...router.getRehydratedState(\n          state as PartialState<TabNavigationState<ParamListBase>>,\n          options\n        ),\n        type,\n        key,\n      };\n    },\n    getStateForRouteNamesChange(state, options) {\n      return {\n        ...router.getStateForRouteNamesChange(\n          state as unknown as TabNavigationState<ParamListBase>,\n          options\n        ),\n        type,\n        key,\n      };\n    },\n    getStateForRouteFocus(state, key) {\n      return {\n        ...router.getStateForRouteFocus(state as unknown as TabNavigationState<ParamListBase>, key),\n        type,\n        key,\n      };\n    },\n    getStateForAction(state, action, options) {\n      if ('payload' in action && action.payload) {\n        const payload = action.payload;\n        if ('name' in payload && payload.name) {\n          const name = payload.name;\n\n          if (!options.routeNames.includes(name)) {\n            const nextName = options.routeNames.find((routeName) => {\n              return routeName.startsWith(`${name}#`);\n            });\n\n            if (nextName) {\n              payload.name = nextName;\n            }\n          }\n        }\n      }\n\n      const nextState = router.getStateForAction(\n        state as unknown as TabNavigationState<ParamListBase>,\n        action,\n        options\n      );\n\n      return nextState === null\n        ? nextState\n        : {\n            ...nextState,\n            type,\n            key,\n          };\n    },\n  };\n}\n"]}