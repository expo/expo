{"version":3,"file":"Tabs.hooks.js","sourceRoot":"","sources":["../../src/headless/Tabs.hooks.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Fragment,\n  FunctionComponentElement,\n  isValidElement,\n  useContext,\n  Children,\n  ReactNode,\n  useCallback,\n} from 'react';\nimport { Platform } from 'react-native';\nimport {\n  DefaultNavigatorOptions,\n  LinkingContext,\n  ParamListBase,\n  TabActionHelpers,\n  TabRouterOptions,\n  TabRouter,\n  useNavigationBuilder,\n  TabNavigationState,\n} from '@react-navigation/native';\nimport { TabsContext, ExpoTabsScreenOptions, TabNavigationEventMap } from './Tabs.common';\nimport { useRouteNode } from '../Route';\nimport { resolveHref } from '../link/href';\nimport { Href } from '../types';\nimport { shouldLinkExternally } from '../utils/url';\nimport { TabList, TabListProps, TabTrigger, TabTriggerOptions, TabTriggerProps } from './Tabs.list';\nimport { TabSlot } from './Tabs.slot';\nimport { triggersToScreens } from './common';\n\nexport type UseTabsOptions = Omit<\n  DefaultNavigatorOptions<\n    ParamListBase,\n    TabNavigationState<any>,\n    ExpoTabsScreenOptions,\n    TabNavigationEventMap\n  >,\n  'children'\n> &\n  Omit<TabRouterOptions, 'initialRouteName'>;\n\nexport type UseTabsWithChildrenOptions = UseTabsOptions & {\n  children: ReactNode;\n};\n\nexport type UseTabsWithTriggersOptions<T extends string | object> = UseTabsOptions & {\n  triggers: TabTriggerOptions<T>[];\n};\n\nexport function useTabsWithChildren({ children, ...options }: UseTabsWithChildrenOptions) {\n  return useTabsWithTriggers({ triggers: parseTriggersFromChildren(children), ...options });\n}\n\nexport function useTabsWithTriggers<T extends string | object>({\n  triggers,\n  ...options\n}: UseTabsWithTriggersOptions<T>) {\n  const routeNode = useRouteNode();\n  const linking = useContext(LinkingContext).options;\n\n  if (!routeNode || !linking) {\n    throw new Error('No RouteNode. This is likely a bug in expo-router.');\n  }\n\n  const { children, initialRouteName } = triggersToScreens(triggers, routeNode, linking);\n\n  const { state, descriptors, navigation, NavigationContent } = useNavigationBuilder<\n    TabNavigationState<any>,\n    TabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    ExpoTabsScreenOptions,\n    TabNavigationEventMap\n  >(TabRouter, {\n    children,\n    backBehavior: Platform.OS === 'web' ? 'history' : 'firstRoute',\n    ...options,\n    initialRouteName,\n  });\n\n  const routes = Object.fromEntries(\n    state.routes.map((route, index) => {\n      const options = descriptors[route.key].options;\n      const action = {\n        ...options.action,\n        target: state.key,\n      };\n\n      return [\n        route.name,\n        {\n          route,\n          action,\n          key: route.key,\n          isFocused: state.index === index,\n          props: {\n            key: route.key,\n            onPress: () => {\n              const isFocused = state.index === index;\n              const event = navigation.emit({\n                type: 'tabPress',\n                target: route.key,\n                canPreventDefault: true,\n              });\n\n              if (!isFocused && !event.defaultPrevented) {\n                navigation.dispatch(action);\n              }\n            },\n          },\n        },\n      ];\n    })\n  );\n\n  const newNavigationContent = useCallback(\n    (props) => {\n      return (\n        <TabsContext.Provider value={{ state, descriptors, navigation, NavigationContent }}>\n          <NavigationContent {...props} />\n        </TabsContext.Provider>\n      );\n    },\n    [state, descriptors, navigation, routes, NavigationContent]\n  );\n\n  return { state, descriptors, navigation, routes, NavigationContent: newNavigationContent };\n}\n\nexport type ExpoTabHrefs =\n  | Record<string, Omit<ExpoTabsScreenOptions, 'action'>>\n  | Array<Href | [Href, Omit<ExpoTabsScreenOptions, 'action'>]>;\n\nfunction isTabListOrFragment(\n  child: ReactNode\n): child is FunctionComponentElement<TabTriggerProps<any>> {\n  return isValidElement(child) && (child.type === TabList || child.type === Fragment);\n}\n\nfunction isTabTrigger(child: ReactNode): child is FunctionComponentElement<TabTriggerProps<any>> {\n  return isValidElement(child) && child.type === TabTrigger;\n}\n\nfunction isTabSlot(child: ReactNode): child is FunctionComponentElement<TabListProps> {\n  return isValidElement(child) && child.type === TabSlot;\n}\n\nfunction parseTriggersFromChildren(\n  children: ReactNode,\n  screenTriggers: TabTriggerOptions<any>[] = []\n) {\n  Children.forEach(children, (child) => {\n    if (isTabListOrFragment(child)) {\n      return parseTriggersFromChildren(child.props.children, screenTriggers);\n    }\n\n    if (!child || isTabSlot(child)) {\n      return;\n    }\n\n    if (!isTabTrigger(child)) {\n      if (!isValidElement(child)) {\n        console.warn(\n          `<Tabs /> only accepts <TabSlot /> and <TabTrigger /> as children. Found unknown component`\n        );\n      } else {\n        console.warn(\n          `<Tabs /> only accepts <TabSlot /> and <TabTrigger /> as children. Found component ${typeof child.type === 'string' ? child.type : child.type.name}`\n        );\n      }\n\n      return;\n    }\n\n    let { href, initialRoute } = child.props;\n\n    href = resolveHref(href);\n\n    if (shouldLinkExternally(href)) {\n      return;\n    }\n\n    screenTriggers.push({ href, initialRoute });\n    return;\n  });\n\n  return screenTriggers;\n}\n"]}