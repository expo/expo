{"version":3,"file":"Tabs.common.js","sourceRoot":"","sources":["../../src/headless/Tabs.common.tsx"],"names":[],"mappings":";;;AAaA,iCAAsC;AAyCzB,QAAA,sBAAsB,GAAG,IAAA,qBAAa,EAAkC,EAAE,CAAC,CAAC;AAC5E,QAAA,gBAAgB,GAAG,IAAA,qBAAa,EAA4B;IACvE,IAAI,EAAE,KAAK;IACX,OAAO,EAAE,EAAE;IACX,KAAK,EAAE,CAAC,CAAC;IACT,GAAG,EAAE,EAAE;IACP,KAAK,EAAE,KAAK;IACZ,UAAU,EAAE,EAAE;IACd,MAAM,EAAE,EAAE;CACX,CAAC,CAAC","sourcesContent":["import {\n  BottomTabNavigationOptions,\n  BottomTabNavigationConfig,\n} from '@react-navigation/bottom-tabs/lib/typescript/src/types';\nimport {\n  DefaultNavigatorOptions,\n  NavigationAction,\n  ParamListBase,\n  TabActionHelpers,\n  TabNavigationState,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport { createContext } from 'react';\n\nexport type ExpoTabsProps = DefaultNavigatorOptions<\n  ParamListBase,\n  TabNavigationState<ParamListBase>,\n  ExpoTabsScreenOptions,\n  TabNavigationEventMap\n> &\n  Omit<TabRouterOptions, 'initialRouteName'> & // Should be set through `unstable_settings`\n  BottomTabNavigationConfig;\n\nexport type ExpoTabsScreenOptions = Pick<\n  BottomTabNavigationOptions,\n  'title' | 'lazy' | 'unmountOnBlur' | 'freezeOnBlur'\n> & {\n  params?: object;\n  title: string;\n  action: NavigationAction;\n};\n\nexport type TabNavigationEventMap = {\n  /**\n   * Event which fires on tapping on the tab in the tab bar.\n   */\n  tabPress: { data: undefined; canPreventDefault: true };\n  /**\n   * Event which fires on long press on the tab in the tab bar.\n   */\n  tabLongPress: { data: undefined };\n};\n\nexport type TabsContextValue = ReturnType<\n  typeof useNavigationBuilder<\n    TabNavigationState<any>,\n    TabRouterOptions,\n    TabActionHelpers<ParamListBase>,\n    BottomTabNavigationOptions,\n    TabNavigationEventMap\n  >\n>;\n\nexport const TabsDescriptorsContext = createContext<TabsContextValue['descriptors']>({});\nexport const TabsStateContext = createContext<TabsContextValue['state']>({\n  type: 'tab',\n  history: [],\n  index: -1,\n  key: '',\n  stale: false,\n  routeNames: [],\n  routes: [],\n});\n\nexport type Route = TabNavigationState<ParamListBase>['routes'][number];\nexport type TabsDescriptor = TabsContextValue['descriptors'][number];\n"]}