{"version":3,"file":"Tabs.slot.js","sourceRoot":"","sources":["../../src/headless/Tabs.slot.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useState, useContext } from 'react';\nimport { View, Platform, ViewProps, StyleSheet } from 'react-native';\nimport { ScreenContainer, Screen } from 'react-native-screens';\nimport { TabsDescriptor, TabsDescriptorsContext, TabsStateContext } from './Tabs.common';\n\nexport type UseTabsSlotOptions = {\n  detachInactiveScreens?: boolean;\n  renderFn?: typeof defaultTabsSlotRender;\n};\n\nexport type TabsSlotRenderOptions = {\n  index: number;\n  isFocused: boolean;\n  loaded: boolean;\n};\n\nexport function useTabSlot({\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  renderFn = defaultTabsSlotRender,\n}: UseTabsSlotOptions = {}) {\n  const state = useContext(TabsStateContext);\n  const descriptors = useContext(TabsDescriptorsContext);\n  const focusedRouteKey = state.routes[state.index].key;\n  const [loaded, setLoaded] = useState({ [focusedRouteKey]: true });\n\n  if (!loaded[focusedRouteKey]) {\n    setLoaded({ ...loaded, [focusedRouteKey]: true });\n  }\n\n  return (\n    <ScreenContainer enabled={detachInactiveScreens} hasTwoStates>\n      {state.routes.map((route, index) => {\n        return renderFn(descriptors[route.key], {\n          index,\n          isFocused: state.index === index,\n          loaded: loaded[route.key],\n        });\n      })}\n    </ScreenContainer>\n  );\n}\n\nexport function TabSlot(props: ViewProps) {\n  return (\n    <View\n      style={{\n        flexGrow: 1,\n        flexShrink: 0,\n      }}\n      {...props}>\n      {useTabSlot()}\n    </View>\n  );\n}\n\nexport function defaultTabsSlotRender(\n  descriptor: TabsDescriptor,\n  { isFocused, loaded }: TabsSlotRenderOptions\n) {\n  const { lazy = true, unmountOnBlur, freezeOnBlur } = descriptor.options;\n\n  // if (unmountOnBlur && !isFocused) {\n  //   return null;\n  // }\n\n  // if (lazy && !loaded && !isFocused) {\n  //   // Don't render a lazy screen if we've never navigated to it\n  //   return null;\n  // }\n\n  return (\n    <Screen\n      key={descriptor.route.key}\n      activityState={isFocused ? 2 : 0}\n      freezeOnBlur={freezeOnBlur}\n      style={[styles.flexBoxGrowOnly, isFocused ? styles.focused : styles.unfocused]}>\n      <View style={styles.flexBoxGrowOnly}>{descriptor.render()}</View>\n    </Screen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  flexBoxGrowOnly: {\n    flexShrink: 0,\n    flexGrow: 1,\n    position: 'relative',\n  },\n  focused: {\n    zIndex: 0,\n    flexGrow: 1,\n    flexShrink: 0,\n  },\n  unfocused: {\n    zIndex: -1,\n  },\n});\n"]}