{"version":3,"file":"Tabs.slot.js","sourceRoot":"","sources":["../../src/headless/Tabs.slot.tsx"],"names":[],"mappings":";;;AAAA,iCAAiC;AACjC,+CAAqE;AACrE,qDAAqF;AACrF,+DAA+D;AAC/D,+CAAsE;AActE,SAAgB,UAAU,CAAC,EACzB,qBAAqB,GAAG,uBAAQ,CAAC,EAAE,KAAK,KAAK;IAC3C,uBAAQ,CAAC,EAAE,KAAK,SAAS;IACzB,uBAAQ,CAAC,EAAE,KAAK,KAAK,EACvB,QAAQ,GAAG,qBAAqB,MACV,EAAE;IACxB,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,IAAA,4BAAc,GAAE,CAAC;IAChD,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;IACtD,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,IAAA,gBAAQ,EAAC,EAAE,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IAElE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE;QAC5B,SAAS,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC,eAAe,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;KACnD;IAED,OAAO,CACL,EACE;MAAA,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACjC,OAAO,QAAQ,CAAC,KAAK,EAAE,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBAC7C,KAAK;gBACL,SAAS,EAAE,KAAK,CAAC,KAAK,KAAK,KAAK;gBAChC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;gBACzB,qBAAqB;aACtB,CAAC,CAAC;QACL,CAAC,CAAC,CACJ;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC;AA1BD,gCA0BC;AAED,SAAgB,OAAO,CAAC,KAAgB;IACtC,OAAO,CACL,CAAC,mBAAI,CACH,KAAK,CAAC,CAAC;YACL,QAAQ,EAAE,CAAC;YACX,UAAU,EAAE,CAAC;SACd,CAAC,CACF,IAAI,KAAK,CAAC,CACV;MAAA,CAAC,UAAU,EAAE,CACf;IAAA,EAAE,mBAAI,CAAC,CACR,CAAC;AACJ,CAAC;AAXD,0BAWC;AAED,SAAgB,qBAAqB,CACnC,KAAY,EACZ,UAA0B,EAC1B,EAAE,SAAS,EAAE,MAAM,EAAE,qBAAqB,EAAyB;IAEnE,MAAM,EAAE,IAAI,GAAG,IAAI,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC;IAExE,IAAI,aAAa,IAAI,CAAC,SAAS,EAAE;QAC/B,OAAO,IAAI,CAAC;KACb;IAED,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,EAAE;QACjC,4DAA4D;QAC5D,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CACL,CAAC,sCAAe,CACd,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CACf,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAC/B,YAAY,CACZ,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CACrD;MAAA,CAAC,0BAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CACvD;QAAA,CAAC,+BAAsB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAC5C;UAAA,CAAC,6BAAM,CACL,OAAO,CAAC,CAAC,qBAAqB,CAAC,CAC/B,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACjC,YAAY,CAAC,CAAC,YAAY,CAAC,CAC3B,KAAK,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAC9B;YAAA,CAAC,mBAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,mBAAI,CAClE;UAAA,EAAE,6BAAM,CACV;QAAA,EAAE,+BAAsB,CAAC,QAAQ,CACnC;MAAA,EAAE,0BAAiB,CAAC,QAAQ,CAC9B;IAAA,EAAE,sCAAe,CAAC,CACnB,CAAC;AACJ,CAAC;AAnCD,sDAmCC;AAED,MAAM,MAAM,GAAG,yBAAU,CAAC,MAAM,CAAC;IAC/B,eAAe,EAAE;QACf,UAAU,EAAE,CAAC;QACb,QAAQ,EAAE,CAAC;QACX,QAAQ,EAAE,UAAU;KACrB;IACD,OAAO,EAAE;QACP,MAAM,EAAE,CAAC;QACT,QAAQ,EAAE,CAAC;QACX,UAAU,EAAE,CAAC;KACd;IACD,SAAS,EAAE;QACT,MAAM,EAAE,CAAC,CAAC;KACX;CACF,CAAC,CAAC","sourcesContent":["import { useState } from 'react';\nimport { View, Platform, ViewProps, StyleSheet } from 'react-native';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport { ScreenContainer, Screen } from 'react-native-screens';\nimport { Route, TabsDescriptor, useTabsContext } from './Tabs.common';\n\nexport type UseTabsSlotOptions = {\n  detachInactiveScreens?: boolean;\n  renderFn?: typeof defaultTabsSlotRender;\n};\n\nexport type TabsSlotRenderOptions = {\n  index: number;\n  isFocused: boolean;\n  loaded: boolean;\n  detachInactiveScreens: boolean;\n};\n\nexport function useTabSlot({\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  renderFn = defaultTabsSlotRender,\n}: UseTabsSlotOptions = {}) {\n  const { state, descriptors } = useTabsContext();\n  const focusedRouteKey = state.routes[state.index].key;\n  const [loaded, setLoaded] = useState({ [focusedRouteKey]: true });\n\n  if (!loaded[focusedRouteKey]) {\n    setLoaded({ ...loaded, [focusedRouteKey]: true });\n  }\n\n  return (\n    <>\n      {state.routes.map((route, index) => {\n        return renderFn(route, descriptors[route.key], {\n          index,\n          isFocused: state.index === index,\n          loaded: loaded[route.key],\n          detachInactiveScreens,\n        });\n      })}\n    </>\n  );\n}\n\nexport function TabSlot(props: ViewProps) {\n  return (\n    <View\n      style={{\n        flexGrow: 1,\n        flexShrink: 0,\n      }}\n      {...props}>\n      {useTabSlot()}\n    </View>\n  );\n}\n\nexport function defaultTabsSlotRender(\n  route: Route,\n  descriptor: TabsDescriptor,\n  { isFocused, loaded, detachInactiveScreens }: TabsSlotRenderOptions\n) {\n  const { lazy = true, unmountOnBlur, freezeOnBlur } = descriptor.options;\n\n  if (unmountOnBlur && !isFocused) {\n    return null;\n  }\n\n  if (lazy && !loaded && !isFocused) {\n    // Don't render a lazy screen if we've never navigated to it\n    return null;\n  }\n\n  return (\n    <ScreenContainer\n      key={route.key}\n      enabled={detachInactiveScreens}\n      hasTwoStates\n      style={isFocused ? styles.focused : styles.unfocused}>\n      <NavigationContext.Provider value={descriptor.navigation}>\n        <NavigationRouteContext.Provider value={route}>\n          <Screen\n            enabled={detachInactiveScreens}\n            activityState={isFocused ? 2 : 0}\n            freezeOnBlur={freezeOnBlur}\n            style={styles.flexBoxGrowOnly}>\n            <View style={styles.flexBoxGrowOnly}>{descriptor.render()}</View>\n          </Screen>\n        </NavigationRouteContext.Provider>\n      </NavigationContext.Provider>\n    </ScreenContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  flexBoxGrowOnly: {\n    flexShrink: 0,\n    flexGrow: 1,\n    position: 'relative',\n  },\n  focused: {\n    zIndex: 0,\n    flexGrow: 1,\n    flexShrink: 0,\n  },\n  unfocused: {\n    zIndex: -1,\n  },\n});\n"]}