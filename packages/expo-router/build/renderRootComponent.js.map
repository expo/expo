{"version":3,"file":"renderRootComponent.js","sourceRoot":"","sources":["../src/renderRootComponent.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,MAAM,CAAC;AAC7C,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AAE9C,OAAO,EAAE,YAAY,EAAE,8BAA8B,EAAE,MAAM,gBAAgB,CAAC;AAE9E,SAAS,YAAY,CAAC,GAAQ;IAC5B,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,iBAAiB,EAAE;QAC7D,OAAO,KAAK,CAAC;KACd;IACD,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IACzC,IAAI,KAAK,KAAK,IAAI,EAAE;QAClB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,KAAK,KAAK,MAAM,CAAC,SAAS,CAAC;AACpC,CAAC;AAED,SAAS,aAAa,CAAC,KAAU;IAC/B,OAAO,CACL,KAAK;QACL,OAAO,KAAK,KAAK,QAAQ;QACzB,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ;QAC9B,OAAO,KAAK,CAAC,OAAO,KAAK,QAAQ,CAClC,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAS,YAAY,CAAC,KAAU;IAC9B,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;QACxB,OAAO,KAAK,CAAC;KACd;IAED,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;QAC1C,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,OAAO,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SACxD;KACF;IAED,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;QACvB,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;KACzC;IAED,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AAClC,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,mBAAmB,CAAC,SAAmC;IACrE,IAAI;QACF,kEAAkE;QAClE,UAAU,CAAC,GAAG,EAAE;YACd,8BAA8B,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,qBAAqB,CAAC,SAAS,CAAC,CAAC;KAClC;IAAC,OAAO,CAAC,EAAE;QACV,uEAAuE;QACvE,YAAY,CAAC,SAAS,EAAE,CAAC;QAEzB,MAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QAC9B,2CAA2C;QAC3C,mFAAmF;QACnF,yIAAyI;QACzI,+FAA+F;QAC/F,qBAAqB,CAAC,GAAG,EAAE,CAAC,oBAAC,IAAI,OAAG,CAAC,CAAC;QAEtC,gFAAgF;QAChF,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;YACzB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACrB,OAAO,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAC;SACnF;QAED,+CAA+C;QAC/C,UAAU,CAAC,GAAG,EAAE;YACd,MAAM,KAAK,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,+CAA+C;KAChD;AACH,CAAC","sourcesContent":["import { registerRootComponent } from 'expo';\nimport React from 'react';\nimport { Platform, View } from 'react-native';\n\nimport { SplashScreen, _internal_preventAutoHideAsync } from './views/Splash';\n\nfunction isBaseObject(obj: any) {\n  if (Object.prototype.toString.call(obj) !== '[object Object]') {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null) {\n    return true;\n  }\n  return proto === Object.prototype;\n}\n\nfunction isErrorShaped(error: any): error is Error {\n  return (\n    error &&\n    typeof error === 'object' &&\n    typeof error.name === 'string' &&\n    typeof error.message === 'string'\n  );\n}\n\n/**\n * After we throw this error, any number of tools could handle it.\n * This check ensures the error is always in a reason state before surfacing it to the runtime.\n */\nfunction convertError(error: any) {\n  if (isErrorShaped(error)) {\n    return error;\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    if (error == null) {\n      return new Error('A null/undefined error was thrown.');\n    }\n  }\n\n  if (isBaseObject(error)) {\n    return new Error(JSON.stringify(error));\n  }\n\n  return new Error(String(error));\n}\n\n/**\n * Register and mount the root component using the predefined rendering\n * method. This function ensures the Splash Screen and errors are handled correctly.\n */\nexport function renderRootComponent(Component: React.ComponentType<any>) {\n  try {\n    // This must be delayed so the user has a chance to call it first.\n    setTimeout(() => {\n      _internal_preventAutoHideAsync();\n    });\n\n    registerRootComponent(Component);\n  } catch (e) {\n    // Hide the splash screen if there was an error so the user can see it.\n    SplashScreen.hideAsync();\n\n    const error = convertError(e);\n    // Prevent the app from throwing confusing:\n    //  ERROR  Invariant Violation: \"main\" has not been registered. This can happen if:\n    // * Metro (the local dev server) is run from the wrong folder. Check if Metro is running, stop it and restart it in the current project.\n    // * A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\n    registerRootComponent(() => <View />);\n\n    // Console is pretty useless on native, on web you get interactive stack traces.\n    if (Platform.OS === 'web') {\n      console.error(error);\n      console.error(`A runtime error has occurred while rendering the root component.`);\n    }\n\n    // Give React a tick to render before throwing.\n    setTimeout(() => {\n      throw error;\n    });\n\n    // TODO: Render a production-only error screen.\n  }\n}\n"]}