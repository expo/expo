{"version":3,"file":"loadStaticParamsAsync.js","sourceRoot":"","sources":["../src/loadStaticParamsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DynamicConvention, RouteNode } from './Route';\n\nasync function recurseAndFlattenNodes<\n  T,\n  TProps,\n  TProcess extends (node: T, props: any) => Promise<T[]>,\n>(nodes: T[], props: TProps, func: TProcess): Promise<T[]> {\n  const tarr = await Promise.all(nodes.map((node) => func(node, props)).flat());\n  return tarr.filter(Boolean) as T[];\n}\n\nexport async function loadStaticParamsAsync(route: RouteNode): Promise<RouteNode> {\n  const processed = (\n    await Promise.all(\n      route.children.map((route) => loadStaticParamsRecursive(route, { parentParams: {} }))\n    )\n  ).flat();\n\n  route.children = processed;\n  return route;\n}\n\nfunction assertStaticParams(route: RouteNode, params: Record<string, string | string[]>) {\n  const matches = route.dynamic!.every((dynamic) => {\n    const value = params[dynamic.name];\n    return value !== undefined && value !== null;\n  });\n  if (!matches) {\n    throw new Error(\n      `generateStaticParams() must return an array of params that match the dynamic route. Received ${JSON.stringify(\n        params\n      )}`\n    );\n  }\n\n  const validateSingleParam = (\n    dynamic: DynamicConvention,\n    value: any,\n    allowMultipleSegments?: boolean\n  ) => {\n    if (typeof value !== 'string') {\n      throw new Error(\n        `generateStaticParams() for route \"${route.contextKey}\" expected param \"${\n          dynamic.name\n        }\" to be of type string, instead found \"${typeof value}\" while parsing \"${value}\".`\n      );\n    }\n    const parts = value.split('/').filter(Boolean);\n    if (parts.length > 1 && !allowMultipleSegments) {\n      throw new Error(\n        `generateStaticParams() for route \"${route.contextKey}\" expected param \"${dynamic.name}\" to not contain \"/\" (multiple segments) while parsing \"${value}\".`\n      );\n    }\n    if (parts.length === 0) {\n      throw new Error(\n        `generateStaticParams() for route \"${route.contextKey}\" expected param \"${dynamic.name}\" not to be empty while parsing \"${value}\".`\n      );\n    }\n  };\n\n  route.dynamic!.forEach((dynamic) => {\n    const value = params[dynamic.name];\n    if (dynamic.deep) {\n      // TODO: We could split strings by `/` and use that too.\n      if (!Array.isArray(value)) {\n        validateSingleParam(dynamic, value, true);\n      } else {\n        validateSingleParam(dynamic, value.filter(Boolean).join('/'), true);\n      }\n    } else {\n      validateSingleParam(dynamic, value);\n    }\n    return value !== undefined && value !== null;\n  });\n}\n\n/** lodash.uniqBy */\nfunction uniqBy<T>(array: T[], key: (item: T) => string): T[] {\n  const seen: { [key: string]: boolean } = {};\n  return array.filter((item) => {\n    const k = key(item);\n    if (seen[k]) {\n      return false;\n    }\n    seen[k] = true;\n    return true;\n  });\n}\n\nasync function loadStaticParamsRecursive(\n  route: RouteNode,\n  props: { parentParams: any }\n): Promise<RouteNode[]> {\n  if (!route?.dynamic && !route?.children?.length) {\n    return [route];\n  }\n\n  const loaded = await route.loadRoute();\n\n  let staticParams: Record<string, string | string[]>[] = [];\n\n  if (loaded.generateStaticParams) {\n    staticParams = await loaded.generateStaticParams({\n      params: props.parentParams || {},\n    });\n    if (!Array.isArray(staticParams)) {\n      throw new Error(\n        `generateStaticParams() must return an array of params, received ${staticParams}`\n      );\n    }\n\n    // Assert that at least one param from each matches the dynamic route.\n    staticParams.forEach((params) => assertStaticParams(route, params));\n  }\n\n  route.children = uniqBy(\n    (\n      await recurseAndFlattenNodes(\n        [...route.children],\n        {\n          ...props,\n          parentParams: {\n            ...props.parentParams,\n            ...staticParams,\n          },\n        },\n        loadStaticParamsRecursive\n      )\n    ).flat(),\n    (i) => i.route\n  );\n\n  const createParsedRouteName = (input: string, params: any) => {\n    let parsedRouteName = input;\n    route.dynamic?.map((query) => {\n      const param = params[query.name];\n      const formattedParameter = Array.isArray(param) ? param.join('/') : param;\n      if (query.deep) {\n        parsedRouteName = parsedRouteName.replace(`[...${query.name}]`, formattedParameter);\n      } else {\n        parsedRouteName = parsedRouteName.replace(`[${query.name}]`, param);\n      }\n    });\n\n    return parsedRouteName;\n  };\n\n  const generatedRoutes = await Promise.all(\n    staticParams.map(async (params) => {\n      const parsedRoute = createParsedRouteName(route.route, params);\n      const generatedContextKey = createParsedRouteName(route.contextKey, params);\n\n      return {\n        ...route,\n        // TODO: Add a new field for this\n        contextKey: generatedContextKey,\n        // Convert the dynamic route to a static route.\n        dynamic: null,\n        route: parsedRoute,\n        children: uniqBy(\n          (\n            await recurseAndFlattenNodes(\n              [...route.children],\n              {\n                ...props,\n                parentParams: {\n                  ...props.parentParams,\n                  ...staticParams,\n                },\n              },\n              loadStaticParamsRecursive\n            )\n          ).flat(),\n          (i) => i.route\n        ),\n      };\n    })\n  );\n\n  return [route, ...generatedRoutes];\n}\n"]}