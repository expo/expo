{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/loaders/utils.ts"],"names":[],"mappings":";;AAOA,8CAkBC;AAzBD;;;;;;GAMG;AACI,KAAK,UAAU,iBAAiB,CAAC,SAAiB;IACvD,MAAM,UAAU,GAAG,iBAAiB,SAAS,EAAE,CAAC;IAEhD,qFAAqF;IACrF,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,UAAU,EAAE;QACvC,OAAO,EAAE;YACP,MAAM,EAAE,kBAAkB;SAC3B;KACF,CAAC,CAAC;IACH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,gCAAgC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;IACrE,CAAC;IAED,IAAI,CAAC;QACH,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,IAAI,KAAK,CAAC,gCAAgC,KAAK,EAAE,CAAC,CAAC;IAC3D,CAAC;AACH,CAAC","sourcesContent":["/**\n * Fetches and parses a loader module from the given route path.\n * This works in all environments including:\n * 1. Development with Metro dev server (see `LoaderModuleMiddleware`)\n * 2. Production with static files (SSG)\n * 3. SSR environments\n */\nexport async function fetchLoaderModule(routePath: string): Promise<any> {\n  const loaderPath = `/_expo/loaders${routePath}`;\n\n  // NOTE(@hassankhan): Might be a good idea to convert `loaderPath` to an `URL` object\n  const response = await fetch(loaderPath, {\n    headers: {\n      Accept: 'application/json',\n    },\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to fetch loader data: ${response.status}`);\n  }\n\n  try {\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Failed to parse loader data: ${error}`);\n  }\n}\n"]}