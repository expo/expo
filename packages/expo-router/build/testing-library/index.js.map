{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/testing-library/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import './expect';\nimport './mocks';\n\nimport { NavigationState, PartialState } from '@react-navigation/native';\nimport { act, render, RenderResult, screen } from '@testing-library/react-native';\nimport React from 'react';\n\nimport { MockContextConfig, getMockConfig, getMockContext } from './mock-config';\nimport { ExpoRoot } from '../ExpoRoot';\nimport getPathFromState from '../fork/getPathFromState';\nimport { ExpoLinkingOptions, stateCache } from '../getLinkingConfig';\nimport { store } from '../global-state/router-store';\nimport { router } from '../imperative-api';\n\n// re-export everything\nexport * from '@testing-library/react-native';\n\nafterAll(() => {\n  store.cleanup();\n});\n\ntype RenderRouterOptions = Parameters<typeof render>[1] & {\n  initialUrl?: any;\n  linking?: Partial<ExpoLinkingOptions>;\n};\n\ntype Result = ReturnType<typeof render> & {\n  getPathname(): string;\n  getPathnameWithParams(): string;\n  getSegments(): string[];\n  getSearchParams(): Record<string, string | string[]>;\n  getRouterState(): NavigationState<any> | PartialState<any>;\n};\n\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toHavePathname(pathname: string): R;\n      toHavePathnameWithParams(pathname: string): R;\n      toHaveSegments(segments: string[]): R;\n      toHaveSearchParams(params: Record<string, string | string[]>): R;\n      toHaveRouterState(state: NavigationState<any> | PartialState<any>): R;\n    }\n  }\n}\n\nexport { MockContextConfig, getMockConfig, getMockContext };\n\nexport function renderRouter(\n  context: MockContextConfig = './app',\n  { initialUrl = '/', linking, ...options }: RenderRouterOptions = {}\n): Result {\n  jest.useFakeTimers();\n\n  const mockContext = getMockContext(context);\n\n  // Force the render to be synchronous\n  process.env.EXPO_ROUTER_IMPORT_MODE = 'sync';\n  stateCache.clear();\n\n  const result = render(\n    <ExpoRoot context={mockContext} location={initialUrl} linking={linking} />,\n    options\n  );\n\n  return Object.assign(result, {\n    getPathname(this: RenderResult): string {\n      return store.routeInfoSnapshot().pathname;\n    },\n    getSegments(this: RenderResult): string[] {\n      return store.routeInfoSnapshot().segments;\n    },\n    getSearchParams(this: RenderResult): Record<string, string | string[]> {\n      return store.routeInfoSnapshot().params;\n    },\n    getPathnameWithParams(this: RenderResult): string {\n      return getPathFromState(store.rootState!, store.linking!.config);\n    },\n    getRouterState(this: RenderResult) {\n      return store.rootStateSnapshot();\n    },\n  });\n}\n\nexport const testRouter = {\n  /** Navigate to the provided pathname and the pathname */\n  navigate(path: string) {\n    act(() => router.navigate(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Push the provided pathname and assert the pathname */\n  push(path: string) {\n    act(() => router.push(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Replace with provided pathname and assert the pathname */\n  replace(path: string) {\n    act(() => router.replace(path));\n    expect(screen).toHavePathnameWithParams(path);\n  },\n  /** Go back in history and asset the new pathname */\n  back(path?: string) {\n    expect(router.canGoBack()).toBe(true);\n    act(() => router.back());\n    if (path) {\n      expect(screen).toHavePathnameWithParams(path);\n    }\n  },\n  /** If there's history that supports invoking the `back` function. */\n  canGoBack() {\n    return router.canGoBack();\n  },\n  /** Update the current route query params and assert the new pathname */\n  setParams(params?: Record<string, string>, path?: string) {\n    router.setParams(params);\n    if (path) {\n      expect(screen).toHavePathnameWithParams(path);\n    }\n  },\n  /** If there's history that supports invoking the `back` function. */\n  dismissAll() {\n    act(() => router.dismissAll());\n  },\n};\n"]}