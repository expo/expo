{"version":3,"file":"Navigator.js","sourceRoot":"","sources":["../../src/views/Navigator.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright Â© 2024 650 Industries.\n'use client';\n\nimport { RouterFactory, StackRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { Screen } from './Screen';\nimport { useContextKey } from '../Route';\nimport { useFilterScreenChildren } from '../layouts/withLayoutContext';\nimport { useSortedScreens } from '../useScreens';\n\ntype NavigatorTypes = ReturnType<typeof useNavigationBuilder>;\n\n// TODO: This might already exist upstream, maybe something like `useCurrentRender` ?\nexport const NavigatorContext = React.createContext<{\n  contextKey: string;\n  state: NavigatorTypes['state'];\n  navigation: NavigatorTypes['navigation'];\n  descriptors: NavigatorTypes['descriptors'];\n  router: RouterFactory<any, any, any>;\n} | null>(null);\n\nif (process.env.NODE_ENV !== 'production') {\n  NavigatorContext.displayName = 'NavigatorContext';\n}\n\ntype UseNavigationBuilderRouter = Parameters<typeof useNavigationBuilder>[0];\ntype UseNavigationBuilderOptions = Parameters<typeof useNavigationBuilder>[1];\n\nexport type NavigatorProps<T extends UseNavigationBuilderRouter> = {\n  initialRouteName?: UseNavigationBuilderOptions['initialRouteName'];\n  screenOptions?: UseNavigationBuilderOptions['screenOptions'];\n  children?: UseNavigationBuilderOptions['children'];\n  router?: T;\n  routerOptions?: Omit<Parameters<T>[0], 'initialRouteName'>;\n};\n\n/**\n * An unstyled custom navigator. Good for basic web layouts.\n *\n * @hidden\n */\nexport function Navigator<T extends UseNavigationBuilderRouter>({\n  initialRouteName,\n  screenOptions,\n  children,\n  router,\n  routerOptions,\n}: NavigatorProps<T>) {\n  const contextKey = useContextKey();\n\n  // Allows adding Screen components as children to configure routes.\n  const { screens, children: otherSlot } = useFilterScreenChildren(children, {\n    isCustomNavigator: true,\n    contextKey,\n  });\n\n  const sorted = useSortedScreens(screens ?? []);\n\n  if (!sorted.length) {\n    console.warn(`Navigator at \"${contextKey}\" has no children.`);\n    return null;\n  }\n\n  return (\n    <QualifiedNavigator\n      initialRouteName={initialRouteName}\n      screenOptions={screenOptions}\n      screens={sorted}\n      contextKey={contextKey}\n      router={router}\n      routerOptions={routerOptions}>\n      {otherSlot}\n    </QualifiedNavigator>\n  );\n}\n\nfunction QualifiedNavigator<T extends UseNavigationBuilderRouter>({\n  initialRouteName,\n  screenOptions,\n  children,\n  screens,\n  contextKey,\n  router = StackRouter as T,\n  routerOptions,\n}: NavigatorProps<T> & { contextKey: string; screens: React.ReactNode[] }) {\n  const { state, navigation, descriptors, NavigationContent } = useNavigationBuilder(router, {\n    // Used for getting the parent with navigation.getParent('/normalized/path')\n    ...routerOptions,\n    id: contextKey,\n    children: screens,\n    screenOptions,\n    initialRouteName,\n  });\n\n  return (\n    <NavigatorContext.Provider\n      value={{\n        contextKey,\n        state,\n        navigation,\n        descriptors,\n        router,\n      }}>\n      <NavigationContent>{children}</NavigationContent>\n    </NavigatorContext.Provider>\n  );\n}\n\n/**\n * @hidden\n */\nexport function useNavigatorContext() {\n  const context = React.useContext(NavigatorContext);\n  if (!context) {\n    throw new Error('useNavigatorContext must be used within a <Navigator />');\n  }\n  return context;\n}\n\nexport function useSlot() {\n  const context = useNavigatorContext();\n\n  const { state, descriptors } = context;\n\n  const current = state.routes.find((route, i) => {\n    return state.index === i;\n  });\n\n  if (!current) {\n    return null;\n  }\n\n  return descriptors[current.key]?.render() ?? null;\n}\n\n/** Renders the currently selected content. */\nexport function Slot(props: Omit<NavigatorProps<any>, 'children'>) {\n  const contextKey = useContextKey();\n  const context = React.useContext(NavigatorContext);\n  // Ensure the context is for the current contextKey\n  if (context?.contextKey !== contextKey) {\n    // Qualify the content and re-export.\n    return (\n      <Navigator {...props}>\n        <QualifiedSlot />\n      </Navigator>\n    );\n  }\n\n  return <QualifiedSlot />;\n}\n\nexport function QualifiedSlot() {\n  return useSlot();\n}\n\nexport function DefaultNavigator() {\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <Navigator>\n        <QualifiedSlot />\n      </Navigator>\n    </SafeAreaView>\n  );\n}\n\nNavigator.Slot = Slot;\nNavigator.useContext = useNavigatorContext;\n\n/** Used to configure route settings. */\nNavigator.Screen = Screen;\n"]}