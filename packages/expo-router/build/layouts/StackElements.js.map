{"version":3,"file":"StackElements.js","sourceRoot":"","sources":["../../src/layouts/StackElements.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;AA2Nb,kCAmDC;AAID,wCAKC;AArRD,iCAAyE;AACzE,+CAA0C;AAe1C,4CAAyC;AAE5B,QAAA,+BAA+B,GAAG,IAAA,qBAAa,EAE1D,SAAS,CAAC,CAAC;AAEb,SAAS,oBAAoB,CAAC,EAC5B,OAAO,EACP,QAAQ,EACR,MAAM,EACN,UAAU,EACV,KAAK,EACL,UAAU,GACO;IACjB,MAAM,YAAY,GAAG,IAAA,WAAG,EAAC,4BAAoB,CAAC,CAAC;IAC/C,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CACb,qFAAqF,CACtF,CAAC;IACJ,CAAC;IACD,MAAM,EAAE,aAAa,EAAE,gBAAgB,EAAE,GAAG,YAAY,CAAC;IACzD,MAAM,gCAAgC,GACpC,CAAC,MAAM,EAAE,EAAE;QACT,gBAAgB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;IACJ,MAAM,0BAA0B,GAC9B,CAAC,MAAM,EAAE,EAAE;QACT,gBAAgB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;IACJ,MAAM,2BAA2B,GAC/B,CAAC,MAAM,EAAE,EAAE;QACT,gBAAgB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;IACJ,MAAM,+BAA+B,GACnC,CAAC,MAAM,EAAE,EAAE;QACT,gBAAgB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;IACJ,MAAM,2BAA2B,GAC/B,CAAC,MAAM,EAAE,EAAE;QACT,gBAAgB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC;IACvD,CAAC,CAAC;IAEJ,MAAM,aAAa,GAAG,IAAA,eAAO,EAA+B,GAAG,EAAE;QAC/D,MAAM,cAAc,GAAG,yBAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,mBAAmB,GAAG,yBAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC3D,OAAO;YACL,WAAW,EAAE,CAAC,MAAM;YACpB,gBAAgB,EAAE,UAAU;YAC5B,WAAW,EAAE;gBACX,eAAe,EAAE,cAAc,EAAE,eAAqC;aACvE;YACD,gBAAgB,EAAE;gBAChB,eAAe,EAAE,mBAAmB,EAAE,eAAqC;aAC5E;YACD,mBAAmB,EAAE,cAAc,EAAE,WAAW,KAAK,aAAa;YAClE,6BAA6B,EAAE,mBAAmB,EAAE,WAAW,KAAK,aAAa;SAClF,CAAC;IACJ,CAAC,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IAE5C,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,MAAM,EAAE,CAAC;YACX,gBAAgB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC;aAAM,IAAI,OAAO,EAAE,CAAC;YACnB,gBAAgB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACpE,CAAC;aAAM,CAAC;YACN,gBAAgB,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,aAAa,EAAE,CAAC,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC,CAAC;IAErC,IAAI,OAAO,EAAE,CAAC;QACZ,OAAO,IAAI,CAAC;IACd,CAAC;IAED,OAAO,CACL,CAAC,uCAA+B,CAC9B,KAAK,CAAC,CAAC;YACL,aAAa;YACb,gCAAgC;YAChC,0BAA0B;YAC1B,2BAA2B;YAC3B,+BAA+B;YAC/B,2BAA2B;SAC5B,CAAC,CACF;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,uCAA+B,CAAC,CACnC,CAAC;AACJ,CAAC;AAED,SAAS,eAAe,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAwB;IAClE,MAAM,YAAY,GAAG,IAAA,WAAG,EAAC,uCAA+B,CAAC,CAAC;IAC1D,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CACb,0FAA0F,CAC3F,CAAC;IACJ,CAAC;IACD,MAAM,EAAE,0BAA0B,EAAE,GAAG,YAAY,CAAC;IACpD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC7D,0BAA0B,CAAC,MAAM,CAAC,CAAC;IACrC,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IACxB,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,gBAAgB,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAyB;IACpE,MAAM,YAAY,GAAG,IAAA,WAAG,EAAC,uCAA+B,CAAC,CAAC;IAC1D,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CACb,2FAA2F,CAC5F,CAAC;IACJ,CAAC;IACD,MAAM,EAAE,2BAA2B,EAAE,GAAG,YAAY,CAAC;IACrD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAC9D,2BAA2B,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IACxB,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,qBAAqB,CAAC,EAC7B,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,WAAW,EACX,GAAG,EACH,MAAM,GACqB;IAC3B,MAAM,YAAY,GAAG,IAAA,WAAG,EAAC,uCAA+B,CAAC,CAAC;IAC1D,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CACb,gGAAgG,CACjG,CAAC;IACJ,CAAC;IACD,MAAM,EAAE,gCAAgC,EAAE,GAAG,YAAY,CAAC;IAC1D,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,gCAAgC,CAAC;YAC/B,eAAe,EAAE,QAAQ;YACzB,oBAAoB,EAAE,KAAK;YAC3B,qBAAqB,EAAE,GAAG;YAC1B,2BAA2B,EAAE,WAAW;YACxC,2BAA2B,EAAE,QAAQ;YACrC,iBAAiB,EAAE,CAAC,MAAM;SAC3B,CAAC,CAAC;IACL,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,gBAAgB,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAyB;IACrF,MAAM,YAAY,GAAG,IAAA,WAAG,EAAC,uCAA+B,CAAC,CAAC;IAC1D,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CACb,2FAA2F,CAC5F,CAAC;IACJ,CAAC;IACD,MAAM,EAAE,2BAA2B,EAAE,GAAG,YAAY,CAAC;IACrD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,MAAM,cAAc,GAAG,yBAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,mBAAmB,GAAG,yBAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC3D,2BAA2B,CAAC;YAC1B,WAAW,EAAE,QAAQ;YACrB,gBAAgB,EAAE,KAAK;YACvB,gBAAgB,EAAE,cAAc,EAAE,SAAS;YAC3C,gBAAgB,EAAE;gBAChB,GAAG,cAAc;gBACjB,uEAAuE;gBACvE,KAAK,EAAG,cAAc,EAAE,KAAgB,IAAI,SAAS;aACtD;YACD,qBAAqB,EAAE;gBACrB,GAAG,mBAAmB;gBACtB,UAAU,EAAE,mBAAmB,EAAE,UAAU,EAAE,QAAQ,EAAE;gBACvD,uEAAuE;gBACvE,KAAK,EAAG,mBAAmB,EAAE,KAAgB,IAAI,SAAS;aAC3D;SACF,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC;IACzC,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,oBAAoB,CAAC,KAAgC;IAC5D,MAAM,YAAY,GAAG,IAAA,WAAG,EAAC,uCAA+B,CAAC,CAAC;IAC1D,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CACb,+FAA+F,CAChG,CAAC;QACJ,CAAC;QACD,MAAM,EAAE,+BAA+B,EAAE,GAAG,YAAY,CAAC;QACzD,+BAA+B,CAAC;YAC9B,sBAAsB,EAAE,KAAK;SAC9B,CAAC,CAAC;IACL,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACZ,OAAO,IAAI,CAAC;AACd,CAAC;AAEY,QAAA,qBAAqB,GAAG,IAAA,qBAAa,EAEhD,SAAS,CAAC,CAAC;AAEA,QAAA,oBAAoB,GAAG,IAAA,qBAAa,EAC/C,SAAS,CACV,CAAC;AAEF,SAAgB,WAAW,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,IAAI,EAAoB;IAChF,MAAM,YAAY,GAAG,IAAA,WAAG,EAAC,6BAAqB,CAAC,CAAC;IAChD,MAAM,iBAAiB,GAAG,IAAA,WAAG,EAAC,iBAAiB,CAAC,CAAC;IACjD,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,IAAA,gBAAQ,EAA+B,EAAE,CAAC,CAAC;IACrF,IAAI,YAAY,IAAI,CAAC,IAAI,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CACb,iFAAiF,CAClF,CAAC;IACJ,CAAC;IACD,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,YAAY,IAAI,IAAI,EAAE,CAAC;YACzB,YAAY,CAAC,sBAAsB,CAAC,IAAI,EAAE,EAAE,GAAG,OAAO,EAAE,GAAG,aAAa,EAAE,CAAC,CAAC;YAC5E,OAAO,GAAG,EAAE;gBACV,YAAY,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YAC/C,CAAC,CAAC;QACJ,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,YAAY,IAAI,IAAI,EAAE,CAAC;YACzB,YAAY,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACxC,OAAO,GAAG,EAAE;gBACV,YAAY,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACvC,CAAC,CAAC;QACJ,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IACX,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,YAAY,IAAI,IAAI,IAAI,iBAAiB,EAAE,CAAC;YAC9C,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACtC,OAAO,GAAG,EAAE;gBACV,YAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAC3C,CAAC,CAAC;QACJ,CAAC;QACD,OAAO,SAAS,CAAC;IACnB,CAAC,EAAE,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAC9B,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,IAAI,YAAY,IAAI,IAAI,EAAE,CAAC;YACzB,YAAY,CAAC,yBAAyB,CAAC,IAAI,EAAE,EAAE,GAAG,OAAO,EAAE,GAAG,aAAa,EAAE,CAAC,CAAC;QACjF,CAAC;IACH,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,aAAa,CAAC,CAAC,CAAC;IAErD,IAAI,CAAC,YAAY,EAAE,CAAC;QAClB,OAAO,CAAC,eAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,GAAG,OAAO,EAAE,CAAC,EAAG,CAAC;IACzD,CAAC;IAED,OAAO,CACL,CAAC,4BAAoB,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,EAAE,gBAAgB,EAAE,CAAC,CAC/D;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,4BAAoB,CAAC,CACxB,CAAC;AACJ,CAAC;AAED,MAAM,iBAAiB,GAAG,IAAA,qBAAa,EAAC,KAAK,CAAC,CAAC;AAE/C,SAAgB,cAAc,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAkB;IAChE,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,EAAE,iBAAiB,CAAC,CAAC;IACjE,CAAC;IACD,OAAO,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC;AACzB,CAAC;AAEY,QAAA,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE;IAC7D,IAAI,EAAE,eAAe;IACrB,KAAK,EAAE,gBAAgB;IACvB,UAAU,EAAE,qBAAqB;IACjC,KAAK,EAAE,gBAAgB;IACvB,SAAS,EAAE,oBAAoB;CAChC,CAAC,CAAC","sourcesContent":["'use client';\nimport { NativeStackNavigationOptions } from '@react-navigation/native-stack';\nimport { createContext, use, useEffect, useMemo, useState } from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport type {\n  StackHeaderBackButtonProps,\n  StackHeaderLeftProps,\n  StackHeaderProps,\n  StackHeaderRightProps,\n  StackHeaderTitleProps,\n  StackHeaderSearchBarProps,\n  StackHeaderConfigurationContextValue,\n  StackScreensConfigurationContextValue,\n  StackScreenConfigurationContextValue,\n  StackScreenProps,\n} from './StackElements.types';\nimport type { ProtectedProps } from '../views/Protected';\nimport { Screen } from '../views/Screen';\n\nexport const StackHeaderConfigurationContext = createContext<\n  StackHeaderConfigurationContextValue | undefined\n>(undefined);\n\nfunction StackHeaderComponent({\n  asChild,\n  children,\n  hidden,\n  blurEffect,\n  style,\n  largeStyle,\n}: StackHeaderProps) {\n  const contextValue = use(ScreenOptionsContext);\n  if (!contextValue) {\n    throw new Error(\n      'Stack.Header can only be used inside of a Stack.Screen component in a _layout file.'\n    );\n  }\n  const { configuration, setConfiguration } = contextValue;\n  const setHeaderBackButtonConfiguration: StackHeaderConfigurationContextValue['setHeaderBackButtonConfiguration'] =\n    (config) => {\n      setConfiguration((prev) => ({ ...prev, ...config }));\n    };\n  const setHeaderLeftConfiguration: StackHeaderConfigurationContextValue['setHeaderLeftConfiguration'] =\n    (config) => {\n      setConfiguration((prev) => ({ ...prev, ...config }));\n    };\n  const setHeaderRightConfiguration: StackHeaderConfigurationContextValue['setHeaderRightConfiguration'] =\n    (config) => {\n      setConfiguration((prev) => ({ ...prev, ...config }));\n    };\n  const setHeaderSearchBarConfiguration: StackHeaderConfigurationContextValue['setHeaderSearchBarConfiguration'] =\n    (config) => {\n      setConfiguration((prev) => ({ ...prev, ...config }));\n    };\n  const setHeaderTitleConfiguration: StackHeaderConfigurationContextValue['setHeaderTitleConfiguration'] =\n    (config) => {\n      setConfiguration((prev) => ({ ...prev, ...config }));\n    };\n\n  const currentConfig = useMemo<NativeStackNavigationOptions>(() => {\n    const flattenedStyle = StyleSheet.flatten(style);\n    const flattenedLargeStyle = StyleSheet.flatten(largeStyle);\n    return {\n      headerShown: !hidden,\n      headerBlurEffect: blurEffect,\n      headerStyle: {\n        backgroundColor: flattenedStyle?.backgroundColor as string | undefined,\n      },\n      headerLargeStyle: {\n        backgroundColor: flattenedLargeStyle?.backgroundColor as string | undefined,\n      },\n      headerShadowVisible: flattenedStyle?.shadowColor !== 'transparent',\n      headerLargeTitleShadowVisible: flattenedLargeStyle?.shadowColor !== 'transparent',\n    };\n  }, [hidden, blurEffect, style, largeStyle]);\n\n  useEffect(() => {\n    if (hidden) {\n      setConfiguration((prev) => ({ ...prev, headerShown: false }));\n    } else if (asChild) {\n      setConfiguration((prev) => ({ ...prev, header: () => children }));\n    } else {\n      setConfiguration((prev) => ({ ...prev, ...currentConfig }));\n    }\n  }, [asChild, hidden, currentConfig]);\n\n  if (asChild) {\n    return null;\n  }\n\n  return (\n    <StackHeaderConfigurationContext\n      value={{\n        configuration,\n        setHeaderBackButtonConfiguration,\n        setHeaderLeftConfiguration,\n        setHeaderRightConfiguration,\n        setHeaderSearchBarConfiguration,\n        setHeaderTitleConfiguration,\n      }}>\n      {children}\n    </StackHeaderConfigurationContext>\n  );\n}\n\nfunction StackHeaderLeft({ asChild, children }: StackHeaderLeftProps) {\n  const contextValue = use(StackHeaderConfigurationContext);\n  if (!contextValue) {\n    throw new Error(\n      'Stack.Header.Left can only be used inside of a Stack.Header component in a _layout file.'\n    );\n  }\n  const { setHeaderLeftConfiguration } = contextValue;\n  useEffect(() => {\n    const config = asChild ? { headerLeft: () => children } : {};\n    setHeaderLeftConfiguration(config);\n  }, [children, asChild]);\n  return null;\n}\n\nfunction StackHeaderRight({ asChild, children }: StackHeaderRightProps) {\n  const contextValue = use(StackHeaderConfigurationContext);\n  if (!contextValue) {\n    throw new Error(\n      'Stack.Header.Right can only be used inside of a Stack.Header component in a _layout file.'\n    );\n  }\n  const { setHeaderRightConfiguration } = contextValue;\n  useEffect(() => {\n    const config = asChild ? { headerRight: () => children } : {};\n    setHeaderRightConfiguration(config);\n  }, [children, asChild]);\n  return null;\n}\n\nfunction StackHeaderBackButton({\n  children,\n  style,\n  withMenu,\n  displayMode,\n  src,\n  hidden,\n}: StackHeaderBackButtonProps) {\n  const contextValue = use(StackHeaderConfigurationContext);\n  if (!contextValue) {\n    throw new Error(\n      'Stack.Header.BackButton can only be used inside of a Stack.Header component in a _layout file.'\n    );\n  }\n  const { setHeaderBackButtonConfiguration } = contextValue;\n  useEffect(() => {\n    setHeaderBackButtonConfiguration({\n      headerBackTitle: children,\n      headerBackTitleStyle: style,\n      headerBackImageSource: src,\n      headerBackButtonDisplayMode: displayMode,\n      headerBackButtonMenuEnabled: withMenu,\n      headerBackVisible: !hidden,\n    });\n  }, []);\n  return null;\n}\n\nfunction StackHeaderTitle({ children, style, large, largeStyle }: StackHeaderTitleProps) {\n  const contextValue = use(StackHeaderConfigurationContext);\n  if (!contextValue) {\n    throw new Error(\n      'Stack.Header.Title can only be used inside of a Stack.Header component in a _layout file.'\n    );\n  }\n  const { setHeaderTitleConfiguration } = contextValue;\n  useEffect(() => {\n    const flattenedStyle = StyleSheet.flatten(style);\n    const flattenedLargeStyle = StyleSheet.flatten(largeStyle);\n    setHeaderTitleConfiguration({\n      headerTitle: children,\n      headerLargeTitle: large,\n      headerTitleAlign: flattenedStyle?.textAlign,\n      headerTitleStyle: {\n        ...flattenedStyle,\n        // This is needed because React Navigation expects color to be a string\n        color: (flattenedStyle?.color as string) ?? undefined,\n      },\n      headerLargeTitleStyle: {\n        ...flattenedLargeStyle,\n        fontWeight: flattenedLargeStyle?.fontWeight?.toString(),\n        // This is needed because React Navigation expects color to be a string\n        color: (flattenedLargeStyle?.color as string) ?? undefined,\n      },\n    });\n  }, [children, style, large, largeStyle]);\n  return null;\n}\n\nfunction StackHeaderSearchBar(props: StackHeaderSearchBarProps) {\n  const contextValue = use(StackHeaderConfigurationContext);\n  useEffect(() => {\n    if (!contextValue) {\n      throw new Error(\n        'Stack.Header.SearchBar can only be used inside of a Stack.Header component in a _layout file.'\n      );\n    }\n    const { setHeaderSearchBarConfiguration } = contextValue;\n    setHeaderSearchBarConfiguration({\n      headerSearchBarOptions: props,\n    });\n  }, [props]);\n  return null;\n}\n\nexport const ScreensOptionsContext = createContext<\n  StackScreensConfigurationContextValue | undefined\n>(undefined);\n\nexport const ScreenOptionsContext = createContext<StackScreenConfigurationContextValue | undefined>(\n  undefined\n);\n\nexport function StackScreen({ name, options, children, ...rest }: StackScreenProps) {\n  const contextValue = use(ScreensOptionsContext);\n  const isWithinProtected = use(IsWithinProtected);\n  const [configuration, setConfiguration] = useState<NativeStackNavigationOptions>({});\n  if (contextValue && !name) {\n    throw new Error(\n      'A name prop is required for Stack.Screen when used inside of a Stack navigator.'\n    );\n  }\n  useEffect(() => {\n    if (contextValue && name) {\n      contextValue.addScreenConfiguration(name, { ...options, ...configuration });\n      return () => {\n        contextValue.removeScreenConfiguration(name);\n      };\n    }\n    return undefined;\n  }, [name]);\n  useEffect(() => {\n    if (contextValue && name) {\n      contextValue.setScreenProps(name, rest);\n      return () => {\n        contextValue.removeScreenProps(name);\n      };\n    }\n    return undefined;\n  }, [name]);\n  useEffect(() => {\n    if (contextValue && name && isWithinProtected) {\n      contextValue.addProtectedScreen(name);\n      return () => {\n        contextValue.removeProtectedScreen(name);\n      };\n    }\n    return undefined;\n  }, [name, isWithinProtected]);\n  useEffect(() => {\n    if (contextValue && name) {\n      contextValue.updateScreenConfiguration(name, { ...options, ...configuration });\n    }\n  }, [...Object.values(options ?? {}), configuration]);\n\n  if (!contextValue) {\n    return <Screen name={name} options={{ ...options }} />;\n  }\n\n  return (\n    <ScreenOptionsContext value={{ configuration, setConfiguration }}>\n      {children}\n    </ScreenOptionsContext>\n  );\n}\n\nconst IsWithinProtected = createContext(false);\n\nexport function StackProtected({ guard, children }: ProtectedProps) {\n  if (!guard) {\n    return <IsWithinProtected value>{children}</IsWithinProtected>;\n  }\n  return <>{children}</>;\n}\n\nexport const StackHeader = Object.assign(StackHeaderComponent, {\n  Left: StackHeaderLeft,\n  Right: StackHeaderRight,\n  BackButton: StackHeaderBackButton,\n  Title: StackHeaderTitle,\n  SearchBar: StackHeaderSearchBar,\n});\n"]}