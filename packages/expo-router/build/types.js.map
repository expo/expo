{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["// TODO: Use the global type\nexport interface RequireContext {\n  /** Return the keys that can be resolved. */\n  keys(): string[];\n  (id: string): any;\n  <T>(id: string): T;\n  /** **Unimplemented:** Return the module identifier for a user request. */\n  resolve(id: string): string;\n  /** **Unimplemented:** Readable identifier for the context module. */\n  id: string;\n}\n\n/** The list of input keys will become optional, everything else will remain the same. */\nexport type PickPartial<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n"]}