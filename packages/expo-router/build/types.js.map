{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Href } from './link/href';\n\n// TODO: Use the global type\nexport interface RequireContext {\n  /** Return the keys that can be resolved. */\n  keys(): string[];\n  (id: string): any;\n  <T>(id: string): T;\n  /** **Unimplemented:** Return the module identifier for a user request. */\n  resolve(id: string): string;\n  /** **Unimplemented:** Readable identifier for the context module. */\n  id: string;\n}\n\n/** The list of input keys will become optional, everything else will remain the same. */\nexport type PickPartial<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\nexport type Router = {\n  /** Navigate to the provided href using a push operation if possible. */\n  push: (href: Href) => void;\n  /** Navigate to the provided href. */\n  navigate: (href: Href) => void;\n  /** Navigate to route without appending to the history. */\n  replace: (href: Href) => void;\n  /** Go back in the history. */\n  back: () => void;\n  /** If there's history that supports invoking the `back` function. */\n  canGoBack: () => boolean;\n  /** Update the current route query params. */\n  setParams: (params?: Record<string, string>) => void;\n};\n"]}