{"version":3,"file":"elements.js","sourceRoot":"","sources":["../../../src/native-tabs/common/elements.tsx"],"names":[],"mappings":";;AAkBA,sBAEC;AA0ED,oBAEC;AAuCD,gCAEC;AAiBD,sBAEC;AA1ID,SAAgB,KAAK,CAAC,KAAiB;IACrC,OAAO,IAAI,CAAC;AACd,CAAC;AAoED;;;;;GAKG;AACH,SAAgB,IAAI,CAAC,KAAgB;IACnC,OAAO,IAAI,CAAC;AACd,CAAC;AAoBD;;;;;;;;;;;;;;;;;;GAkBG;AACH,SAAgB,UAAU,CAAuB,KAA6B;IAC5E,OAAO,IAAI,CAAC;AACd,CAAC;AAiBD,SAAgB,KAAK,CAAC,KAAiB;IACrC,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import type { ColorValue, ImageSourcePropType } from 'react-native';\nimport type { SFSymbol } from 'sf-symbols-typescript';\n\nimport type { NativeTabsLabelStyle } from '../NativeBottomTabs/types';\n\nexport interface LabelProps {\n  /**\n   * The text to display as the label for the tab.\n   */\n  children?: string;\n  selectedStyle?: NativeTabsLabelStyle;\n  /**\n   * If true, the label will be hidden.\n   * @default false\n   */\n  hidden?: boolean;\n}\n\nexport function Label(props: LabelProps) {\n  return null;\n}\n\nexport interface SourceIconCombination {\n  /**\n   * The image source to use as an icon.\n   *\n   * The value can be provided in two ways:\n   * - As an image source\n   * - As an object specifying the default and selected states\n   *\n   * @example\n   * ```tsx\n   * <Icon src={require('./path/to/icon.png')} />\n   * ```\n   *\n   * @example\n   * ```tsx\n   * <Icon src={{ default: require('./path/to/icon.png'), selected: require('./path/to/icon-selected.png') }} />\n   * ```\n   *\n   * @platform Android\n   * @platform iOS\n   */\n  src?:\n    | ImageSourcePropType\n    | React.ReactElement\n    | {\n        default?: ImageSourcePropType | React.ReactElement;\n        selected: ImageSourcePropType | React.ReactElement;\n      };\n  drawable?: never;\n  sf?: never;\n}\n\nexport interface NamedIconCombination {\n  /**\n   * The name of the SF Symbol to use as an icon.\n   *\n   * The value can be provided in two ways:\n   * - As a string with the SF Symbol name\n   * - As an object specifying the default and selected states\n   *\n   * @example\n   * ```tsx\n   * <Icon sf=\"magnifyingglass\" />\n   * ```\n   *\n   * @example\n   * ```tsx\n   * <Icon sf={{ default: \"house\", selected: \"house.fill\" }} />\n   * ```\n   *\n   * @platform iOS\n   */\n  sf?: SFSymbol | { default?: SFSymbol; selected: SFSymbol };\n  /**\n   * The name of the drawable resource to use as an icon.\n   * @platform android\n   */\n  drawable?: string;\n  src?: never;\n}\n\nexport type IconProps = { selectedColor?: ColorValue } & (\n  | NamedIconCombination\n  | SourceIconCombination\n);\n\n/**\n * Renders an icon for the tab.\n *\n * @platform ios\n * @platform android\n */\nexport function Icon(props: IconProps) {\n  return null;\n}\n\nexport interface VectorIconProps<NameT extends string> {\n  /**\n   * The family of the vector icon.\n   *\n   * @example\n   * ```tsx\n   * import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\n   * ```\n   */\n  family: {\n    getImageSource: (name: NameT, size: number, color: ColorValue) => Promise<ImageSourcePropType>;\n  };\n  /**\n   * The name of the vector icon.\n   */\n  name: NameT;\n}\n\n/**\n * Helper component which can be used to load vector icons for `NativeTabs`.\n *\n * @example\n * ```tsx\n * import { NativeTabs, VectorIcon } from 'expo-router';\n * import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';\n *\n * export default Layout(){\n *   return (\n *     <NativeTabs>\n *       <NativeTabs.Trigger name=\"index\">\n *         <Icon src={<VectorIcon family={MaterialCommunityIcons} name=\"home\" />} />\n *       </NativeTabs.Trigger>\n *     </NativeTabs>\n *   );\n * }\n * ```\n */\nexport function VectorIcon<NameT extends string>(props: VectorIconProps<NameT>) {\n  return null;\n}\n\nexport interface BadgeProps {\n  /**\n   * The text to display as the badge for the tab.\n   * If not provided, the badge will not be displayed.\n   */\n  children?: string;\n\n  /**\n   * If true, the badge will be hidden.\n   * @default false\n   */\n  hidden?: boolean;\n  selectedBackgroundColor?: ColorValue;\n}\n\nexport function Badge(props: BadgeProps) {\n  return null;\n}\n"]}