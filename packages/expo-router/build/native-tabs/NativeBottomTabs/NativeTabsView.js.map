{"version":3,"file":"NativeTabsView.js","sourceRoot":"","sources":["../../../src/native-tabs/NativeBottomTabs/NativeTabsView.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  DefaultRouterOptions,\n  ParamListBase,\n  TabNavigationState,\n  TabRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport React from 'react';\nimport { type ColorValue, type ImageSourcePropType, type TextStyle } from 'react-native';\nimport {\n  BottomTabs,\n  BottomTabsScreen,\n  enableFreeze,\n  featureFlags,\n  type BottomTabsProps,\n  type BottomTabsScreenProps,\n  type TabBarItemLabelVisibilityMode,\n} from 'react-native-screens';\nimport type { SFSymbol } from 'sf-symbols-typescript';\n\nimport { shouldTabBeVisible } from './utils';\nimport { getPathFromState } from '../../link/linking';\n\n// We let native tabs to control the changes. This requires freeze to be disabled for tab bar.\n// Otherwise user may see glitches when switching between tabs.\nfeatureFlags.experiment.controlledBottomTabs = false;\n\n// TODO: ENG-16896: Enable freeze globally and disable only for NativeTabsView\nenableFreeze(false);\n\ntype BaseNativeTabOptions = Omit<\n  BottomTabsScreenProps,\n  | 'children'\n  | 'placeholder'\n  | 'onWillAppear'\n  | 'onDidAppear'\n  | 'onWillDisappear'\n  | 'onDidDisappear'\n  | 'isFocused'\n  | 'tabKey'\n  | 'icon'\n  | 'selectedIcon'\n  | 'iconResourceName'\n> &\n  DefaultRouterOptions;\n\ntype SfSymbolOrImageSource =\n  | {\n      /**\n       * The name of the SF Symbol to use as an icon.\n       * @platform iOS\n       */\n      sf?: SFSymbol;\n    }\n  | {\n      /**\n       * The image source to use as an icon.\n       * @platform iOS\n       */\n      src?: ImageSourcePropType;\n    };\nexport interface NativeTabOptions extends BaseNativeTabOptions {\n  /**\n   * If true, the tab will be hidden from the tab bar.\n   */\n  hidden?: boolean;\n  /**\n   * The icon to display in the tab bar.\n   */\n  icon?: SfSymbolOrImageSource & {\n    /**\n     * The name of the drawable resource to use as an icon.\n     * @platform android\n     */\n    drawable?: string;\n  };\n  /**\n   * The icon to display when the tab is selected.\n   */\n  selectedIcon?: SfSymbolOrImageSource;\n}\n\nexport interface NativeTabsViewProps {\n  style?: {\n    fontFamily?: TextStyle['fontFamily'];\n    fontSize?: TextStyle['fontSize'];\n    fontWeight?: TextStyle['fontWeight'];\n    fontStyle?: TextStyle['fontStyle'];\n    color?: TextStyle['color'];\n    iconColor?: ColorValue;\n    backgroundColor?: ColorValue;\n    blurEffect?: BottomTabsScreenProps['tabBarBlurEffect'];\n    tintColor?: ColorValue;\n    badgeBackgroundColor?: ColorValue;\n    /**\n     * @platform android\n     */\n    rippleColor?: ColorValue;\n    /**\n     * @platform android\n     */\n    labelVisibilityMode?: TabBarItemLabelVisibilityMode;\n    '&:active'?: {\n      /**\n       * @platform android\n       */\n      color?: ColorValue;\n      /**\n       * @platform android\n       */\n      fontSize?: TextStyle['fontSize'];\n      /**\n       * @platform android\n       */\n      iconColor?: ColorValue;\n      /**\n       * @platform android\n       */\n      indicatorColor?: ColorValue;\n    };\n  };\n  /**\n   * https://developer.apple.com/documentation/uikit/uitabbarcontroller/tabbarminimizebehavior\n   *\n   * Supported values:\n   * - `none` - The tab bar does not minimize.\n   * - `onScrollUp` - The tab bar minimizes when scrolling up, and expands when scrolling back down. Recommended if the scroll view content is aligned to the bottom.\n   * - `onScrollDown` - The tab bar minimizes when scrolling down, and expands when scrolling back up.\n   * - `automatic` - Resolves to the system default minimize behavior.\n   *\n   * @default automatic\n   *\n   * @platform iOS 26\n   */\n  minimizeBehavior?: BottomTabsProps['tabBarMinimizeBehavior'];\n  /**\n   * Disables the active indicator for the tab bar.\n   *\n   * @platform android\n   */\n  disableIndicator?: boolean;\n  builder: ReturnType<\n    typeof useNavigationBuilder<\n      TabNavigationState<ParamListBase>,\n      TabRouterOptions,\n      Record<string, (...args: any) => void>,\n      NativeTabOptions,\n      Record<string, any>\n    >\n  >;\n}\n\n// TODO: Add support for dynamic params inside a route\nexport function NativeTabsView(props: NativeTabsViewProps) {\n  const { builder, style, minimizeBehavior, disableIndicator } = props;\n  const { state, descriptors, navigation } = builder;\n  const { routes } = state;\n\n  let focusedIndex = state.index;\n  const isAnyRouteFocused =\n    routes[focusedIndex].key &&\n    descriptors[routes[focusedIndex].key] &&\n    shouldTabBeVisible(descriptors[routes[focusedIndex].key].options);\n\n  if (!isAnyRouteFocused) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `The focused tab in NativeTabsView cannot be displayed. Make sure path is correct and the route is not hidden. Path: \"${getPathFromState(state)}\"`\n      );\n    }\n    // Set focusedIndex to the first visible tab\n    focusedIndex = routes.findIndex((route) => shouldTabBeVisible(descriptors[route.key].options));\n  }\n\n  const children = routes\n    .map((route, index) => ({ route, index }))\n    .filter(({ route: { key } }) => shouldTabBeVisible(descriptors[key].options))\n    .map(({ route, index }) => {\n      const descriptor = descriptors[route.key];\n      const isFocused = state.index === index;\n      const title = descriptor.options.title ?? route.name;\n\n      console.log('icon', convertOptionsIconToPropsIcon(descriptor.options.icon));\n      console.log('selectedIcon', convertOptionsIconToPropsIcon(descriptor.options.selectedIcon));\n\n      return (\n        <BottomTabsScreen\n          key={route.key}\n          {...descriptor.options}\n          iconResourceName={descriptor.options.icon?.drawable}\n          icon={convertOptionsIconToPropsIcon(descriptor.options.icon)}\n          selectedIcon={convertOptionsIconToPropsIcon(descriptor.options.selectedIcon)}\n          title={title}\n          tabKey={route.key}\n          isFocused={isFocused}>\n          {descriptor.render()}\n        </BottomTabsScreen>\n      );\n    });\n\n  return (\n    <BottomTabs\n      tabBarItemTitleFontColor={style?.color}\n      tabBarItemTitleFontFamily={style?.fontFamily}\n      tabBarItemTitleFontSize={style?.fontSize}\n      tabBarItemTitleFontWeight={style?.fontWeight}\n      tabBarItemTitleFontStyle={style?.fontStyle}\n      tabBarBackgroundColor={style?.backgroundColor}\n      tabBarBlurEffect={style?.blurEffect}\n      tabBarTintColor={style?.tintColor}\n      tabBarItemBadgeBackgroundColor={style?.badgeBackgroundColor}\n      tabBarItemRippleColor={style?.rippleColor}\n      tabBarItemLabelVisibilityMode={style?.labelVisibilityMode}\n      tabBarItemIconColor={style?.iconColor}\n      tabBarItemIconColorActive={style?.['&:active']?.iconColor ?? style?.tintColor}\n      tabBarItemTitleFontColorActive={style?.['&:active']?.color ?? style?.tintColor}\n      tabBarItemTitleFontSizeActive={style?.['&:active']?.fontSize}\n      tabBarItemActiveIndicatorColor={style?.['&:active']?.indicatorColor}\n      tabBarItemActiveIndicatorEnabled={!disableIndicator}\n      tabBarMinimizeBehavior={minimizeBehavior}\n      onNativeFocusChange={({ nativeEvent: { tabKey } }) => {\n        const descriptor = descriptors[tabKey];\n        const route = descriptor.route;\n        navigation.dispatch({\n          type: 'JUMP_TO',\n          target: state.key,\n          payload: {\n            name: route.name,\n          },\n        });\n      }}>\n      {children}\n    </BottomTabs>\n  );\n}\n\nfunction convertOptionsIconToPropsIcon(\n  icon: NativeTabOptions['icon']\n): BottomTabsScreenProps['icon'] {\n  if (!icon) {\n    return undefined;\n  }\n  if ('sf' in icon && icon.sf) {\n    return { sfSymbolName: icon.sf };\n  } else if ('src' in icon && icon.src) {\n    return { imageSource: icon.src };\n  }\n  return undefined;\n}\n"]}