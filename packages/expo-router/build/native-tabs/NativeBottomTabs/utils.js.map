{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/native-tabs/NativeBottomTabs/utils.ts"],"names":[],"mappings":";;;;;AAKA,sEAUC;AAED,sCAKC;AAED,gDAIC;AAED,4DAQC;AArCD,kDAA0B;AAI1B,SAAgB,6BAA6B,CAC3C,QAAiC,EACjC,UAAsB;IAEtB,OAAO,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,CAC5C,CACE,KAAK,EACsF,EAAE,CAC7F,eAAK,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAiC,CAAC,CAC9F,CAAC;AACJ,CAAC;AAED,SAAgB,aAAa,CAC3B,KAAgB,EAChB,IAAO;IAEP,OAAO,eAAK,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC;AAC5D,CAAC;AAED,SAAgB,kBAAkB,CAAC,OAAiC;IAClE,yEAAyE;IACzE,+EAA+E;IAC/E,OAAO,OAAO,CAAC,MAAM,KAAK,KAAK,CAAC;AAClC,CAAC;AAED,SAAgB,wBAAwB,CACtC,KAAqC,EACrC,GAAM;IAEN,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;QACvD,OAAQ,KAAyB,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC;IACD,OAAO,KAAsB,CAAC;AAChC,CAAC","sourcesContent":["import type { JSXElementConstructor, ReactNode } from 'react';\nimport React from 'react';\n\nimport type { ExtendedNativeTabOptions, TypeOrRecord } from './types';\n\nexport function filterAllowedChildrenElements<Components extends JSXElementConstructor<any>[]>(\n  children: ReactNode | ReactNode[],\n  components: Components\n): React.ReactElement<React.ComponentProps<Components[number]>, Components[number]>[] {\n  return React.Children.toArray(children).filter(\n    (\n      child\n    ): child is React.ReactElement<React.ComponentProps<Components[number]>, Components[number]> =>\n      React.isValidElement(child) && components.includes(child.type as (props: any) => ReactNode)\n  );\n}\n\nexport function isChildOfType<T extends JSXElementConstructor<any>>(\n  child: ReactNode,\n  type: T\n): child is React.ReactElement<React.ComponentProps<T>, T> {\n  return React.isValidElement(child) && child.type === type;\n}\n\nexport function shouldTabBeVisible(options: ExtendedNativeTabOptions): boolean {\n  // The <NativeTab.Trigger> always sets `hidden` to defined boolean value.\n  // If it is not defined, then it was not specified, and we should hide the tab.\n  return options.hidden === false;\n}\n\nexport function getValueFromTypeOrRecord<T, K extends string>(\n  value: TypeOrRecord<T, K> | undefined,\n  key: K\n): T | undefined {\n  if (value && typeof value === 'object' && key in value) {\n    return (value as { [k in K]: T })[key];\n  }\n  return value as T | undefined;\n}\n"]}