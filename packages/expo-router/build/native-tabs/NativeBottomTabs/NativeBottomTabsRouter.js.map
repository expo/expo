{"version":3,"file":"NativeBottomTabsRouter.js","sourceRoot":"","sources":["../../../src/native-tabs/NativeBottomTabs/NativeBottomTabsRouter.tsx"],"names":[],"mappings":";;AAgBA,wDAiDC;AAjED,qDAQkC;AAElC,6DAIgC;AAEhC,SAAgB,sBAAsB,CAAC,OAAyB;IAC9D,MAAM,SAAS,GAAG,IAAA,kBAAS,EAAC,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;IAE5C,MAAM,eAAe,GAGjB;QACF,GAAG,SAAS;QACZ,qEAAqE;QACrE,iBAAiB,EAAE,CAAC,KAAK,EAAE,MAA8C,EAAE,OAAO,EAAE,EAAE;YACpF,QAAQ,MAAM,CAAC,IAAI,EAAE,CAAC;gBACpB,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChB,MAAM,sBAAsB,GAAG,SAAS,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;oBACnF,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAEpF,IAAI,KAAK,KAAK,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;wBAC5C,OAAO,sBAAsB,CAAC;oBAChC,CAAC;oBAED,MAAM,QAAQ,GAAG;wBACf,GAAG,sBAAsB;wBACzB,MAAM,EAAE,sBAAsB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;4BAClD,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gCACvC,OAAO,KAAK,CAAC;4BACf,CAAC;4BAED,MAAM,UAAU,GAA6B,IAAA,8CAA2B,EACtE,MAAM,CAAC,OAAO,CAAC,MAAM,CACtB,CAAC;4BAEF,IAAI,KAAK,CAAC,MAAM,IAAI,QAAQ,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;gCAC7C,UAAU,CAAC,qCAAqC,CAAC,GAAG,IAAI,CAAC;4BAC3D,CAAC;4BAED,MAAM,MAAM,GAAG,IAAA,iDAA8B,EAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;4BACxE,OAAO;gCACL,GAAG,KAAK;gCACR,MAAM;6BACP,CAAC;wBACJ,CAAC,CAAC;qBACH,CAAC;oBACF,OAAO,QAAQ,CAAC;gBAClB,CAAC;YACH,CAAC;YACD,OAAO,SAAS,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAC;KACF,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import {\n  CommonNavigationAction,\n  ParamListBase,\n  Router,\n  TabActionType,\n  TabNavigationState,\n  TabRouter,\n  type TabRouterOptions,\n} from '@react-navigation/native';\n\nimport {\n  appendInternalExpoRouterParams,\n  getInternalExpoRouterParams,\n  type InternalExpoRouterParams,\n} from '../../navigationParams';\n\nexport function NativeBottomTabsRouter(options: TabRouterOptions) {\n  const tabRouter = TabRouter({ ...options });\n\n  const nativeTabRouter: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...tabRouter,\n    // @ts-expect-error TODO: For some reason this is not typed correctly\n    getStateForAction: (state, action: TabActionType | CommonNavigationAction, options) => {\n      switch (action.type) {\n        case 'NAVIGATE': {\n          const newStateFromNavigation = tabRouter.getStateForAction(state, action, options);\n          const index = state.routes.findIndex((route) => route.name === action.payload.name);\n\n          if (index === -1 || !newStateFromNavigation) {\n            return newStateFromNavigation;\n          }\n\n          const newState = {\n            ...newStateFromNavigation,\n            routes: newStateFromNavigation.routes.map((route) => {\n              if (route.name !== action.payload.name) {\n                return route;\n              }\n\n              const expoParams: InternalExpoRouterParams = getInternalExpoRouterParams(\n                action.payload.params\n              );\n\n              if (route.params && 'screen' in route.params) {\n                expoParams['__internal_expo_router_no_animation'] = true;\n              }\n\n              const params = appendInternalExpoRouterParams(route.params, expoParams);\n              return {\n                ...route,\n                params,\n              };\n            }),\n          };\n          return newState;\n        }\n      }\n      return tabRouter.getStateForAction(state, action, options);\n    },\n  };\n\n  return nativeTabRouter;\n}\n"]}