{"version":3,"file":"NativeBottomTabsRouter.js","sourceRoot":"","sources":["../../../src/native-tabs/NativeBottomTabs/NativeBottomTabsRouter.tsx"],"names":[],"mappings":";;AAUA,wDAuEC;AAjFD,qDAQkC;AAElC,SAAgB,sBAAsB,CAAC,OAAyB;IAC9D,MAAM,SAAS,GAAG,IAAA,kBAAS,EAAC,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;IAE5C,MAAM,eAAe,GAGjB;QACF,GAAG,SAAS;QACZ,qEAAqE;QACrE,iBAAiB,EAAE,CAAC,KAAK,EAAE,MAA8C,EAAE,OAAO,EAAE,EAAE;YACpF,QAAQ,MAAM,CAAC,IAAI,EAAE,CAAC;gBACpB,KAAK,UAAU,CAAC,CAAC,CAAC;oBAChB,MAAM,sBAAsB,GAAG,SAAS,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;oBACnF,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAEpF,IAAI,KAAK,KAAK,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;wBAC5C,OAAO,sBAAsB,CAAC;oBAChC,CAAC;oBAED,MAAM,QAAQ,GAAG;wBACf,GAAG,sBAAsB;wBACzB,MAAM,EAAE,sBAAsB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;4BAClD,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gCACvC,OAAO,KAAK,CAAC;4BACf,CAAC;4BAED,MAAM,YAAY,GAChB,KAAK,CAAC,MAAM;gCACZ,QAAQ,IAAI,KAAK,CAAC,MAAM;gCACxB,OAAO,KAAK,CAAC,MAAM,CAAC,MAAM,KAAK,QAAQ;gCACvC,KAAK,CAAC,MAAM,CAAC,MAAM;gCACjB,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM;gCACrB,CAAC,CAAC,EAAE,CAAC;4BAET,MAAM,mBAAmB,GACvB,MAAM,CAAC,OAAO,CAAC,MAAM;gCACrB,2CAA2C,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM;gCAClE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,yCAAyC;gCACjE,CAAC,CAAC,SAAS,CAAC;4BAChB,MAAM,gBAAgB,GAAG,mBAAmB;gCAC1C,CAAC,CAAC;oCACE,yCAAyC,EAAE,mBAAmB;iCAC/D;gCACH,CAAC,CAAC,EAAE,CAAC;4BAEP,MAAM,MAAM,GAAG;gCACb,GAAG,CAAC,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC;gCACvB,GAAG,gBAAgB;gCACnB,yFAAyF;gCACzF,qGAAqG;gCACrG,sFAAsF;gCACtF,wEAAwE;gCACxE,MAAM,EAAE;oCACN,GAAG,YAAY;oCACf,GAAG,gBAAgB;iCACpB;6BACF,CAAC;4BACF,OAAO;gCACL,GAAG,KAAK;gCACR,MAAM;6BACP,CAAC;wBACJ,CAAC,CAAC;qBACH,CAAC;oBACF,OAAO,QAAQ,CAAC;gBAClB,CAAC;YACH,CAAC;YACD,OAAO,SAAS,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAC;KACF,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import {\n  CommonNavigationAction,\n  ParamListBase,\n  Router,\n  TabActionType,\n  TabNavigationState,\n  TabRouter,\n  type TabRouterOptions,\n} from '@react-navigation/native';\n\nexport function NativeBottomTabsRouter(options: TabRouterOptions) {\n  const tabRouter = TabRouter({ ...options });\n\n  const nativeTabRouter: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...tabRouter,\n    // @ts-expect-error TODO: For some reason this is not typed correctly\n    getStateForAction: (state, action: TabActionType | CommonNavigationAction, options) => {\n      switch (action.type) {\n        case 'NAVIGATE': {\n          const newStateFromNavigation = tabRouter.getStateForAction(state, action, options);\n          const index = state.routes.findIndex((route) => route.name === action.payload.name);\n\n          if (index === -1 || !newStateFromNavigation) {\n            return newStateFromNavigation;\n          }\n\n          const newState = {\n            ...newStateFromNavigation,\n            routes: newStateFromNavigation.routes.map((route) => {\n              if (route.name !== action.payload.name) {\n                return route;\n              }\n\n              const nestedParams =\n                route.params &&\n                'params' in route.params &&\n                typeof route.params.params === 'object' &&\n                route.params.params\n                  ? route.params.params\n                  : {};\n\n              const isPreviewNavigation =\n                action.payload.params &&\n                '__internal__expoRouterIsPreviewNavigation' in action.payload.params\n                  ? action.payload.params.__internal__expoRouterIsPreviewNavigation\n                  : undefined;\n              const previewKeyParams = isPreviewNavigation\n                ? {\n                    __internal__expoRouterIsPreviewNavigation: isPreviewNavigation,\n                  }\n                : {};\n\n              const params = {\n                ...(route.params || {}),\n                ...previewKeyParams,\n                // This is a workaround for the issue with the preview key not being passed to the params\n                // https://github.com/Ubax/react-navigation/blob/main/packages/core/src/useNavigationBuilder.tsx#L573\n                // Another solution would be to propagate the preview key in the useNavigationBuilder,\n                // but that would require us to fork the @react-navigation/core package.\n                params: {\n                  ...nestedParams,\n                  ...previewKeyParams,\n                },\n              };\n              return {\n                ...route,\n                params,\n              };\n            }),\n          };\n          return newState;\n        }\n      }\n      return tabRouter.getStateForAction(state, action, options);\n    },\n  };\n\n  return nativeTabRouter;\n}\n"]}