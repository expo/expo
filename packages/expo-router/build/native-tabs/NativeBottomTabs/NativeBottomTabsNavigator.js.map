{"version":3,"file":"NativeBottomTabsNavigator.js","sourceRoot":"","sources":["../../../src/native-tabs/NativeBottomTabs/NativeBottomTabsNavigator.tsx"],"names":[],"mappings":";AAAA,YAAY,CAAC;;;;;;AA8Bb,kDAiBC;AA7CD,qDAQkC;AAClC,kDAAiD;AAEjD,qEAAkE;AAClE,qDAA8F;AAC9F,6BAA0C;AAY1C,oFAAoF;AACpF,MAAM,mBAAmB,GAAG,cAAc,CAAC;AAE3C,SAAgB,mBAAmB,CAAC,EAClC,QAAQ,EACR,YAAY,GAAG,mBAAmB,EAClC,GAAG,IAAI,EACkB;IACzB,MAAM,OAAO,GAAG,IAAA,6BAAoB,EAMlC,+CAAsB,EAAE;QACxB,QAAQ;QACR,YAAY;KACb,CAAC,CAAC;IAEH,OAAO,CAAC,+BAAc,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,EAAG,CAAC;AACxD,CAAC;AAED,MAAM,wBAAwB,GAAG,IAAA,+BAAsB,EAAC,mBAAmB,CAAC,CAAC;AAEhE,QAAA,8BAA8B,GAAG,IAAA,qBAAiB,EAK7D,wBAAwB,EAAE,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;IAClD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC,CAAC","sourcesContent":["'use client';\n\nimport {\n  createNavigatorFactory,\n  NavigationState,\n  ParamListBase,\n  TabNavigationState,\n  TabRouterOptions,\n  useNavigationBuilder,\n  type EventMapBase,\n} from '@react-navigation/native';\nimport React, { PropsWithChildren } from 'react';\n\nimport { NativeBottomTabsRouter } from './NativeBottomTabsRouter';\nimport { NativeTabOptions, NativeTabsView, type NativeTabsViewProps } from './NativeTabsView';\nimport { withLayoutContext } from '../..';\n\nexport interface NativeTabsNavigatorProps\n  extends PropsWithChildren<Omit<NativeTabsViewProps, 'builder'>> {\n  /**\n   * The behavior when navigating back with the back button.\n   *\n   * @platform android\n   */\n  backBehavior?: 'none' | 'initialRoute' | 'history';\n}\n\n// In Jetpack Compose, the default back behavior is to go back to the initial route.\nconst defaultBackBehavior = 'initialRoute';\n\nexport function NativeTabsNavigator({\n  children,\n  backBehavior = defaultBackBehavior,\n  ...rest\n}: NativeTabsNavigatorProps) {\n  const builder = useNavigationBuilder<\n    TabNavigationState<ParamListBase>,\n    TabRouterOptions,\n    Record<string, (...args: any) => void>,\n    NativeTabOptions,\n    Record<string, any>\n  >(NativeBottomTabsRouter, {\n    children,\n    backBehavior,\n  });\n\n  return <NativeTabsView builder={builder} {...rest} />;\n}\n\nconst createNativeTabNavigator = createNavigatorFactory(NativeTabsNavigator);\n\nexport const NativeTabsNavigatorWithContext = withLayoutContext<\n  NativeTabOptions,\n  typeof NativeTabsNavigator,\n  NavigationState,\n  EventMapBase\n>(createNativeTabNavigator().Navigator, (screens) => {\n  return screens;\n});\n"]}