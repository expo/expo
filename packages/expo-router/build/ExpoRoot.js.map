{"version":3,"file":"ExpoRoot.js","sourceRoot":"","sources":["../src/ExpoRoot.tsx"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { StatusBar } from 'expo-status-bar';\nimport React, { FunctionComponent, ReactNode, Fragment } from 'react';\nimport { Platform } from 'react-native';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport UpstreamNavigationContainer from './fork/NavigationContainer';\nimport { useInitializeExpoRouter } from './global-state/router-store';\nimport { RequireContext } from './types';\nimport { SplashScreen } from './views/Splash';\n\nexport type ExpoRootProps = {\n  context: RequireContext;\n  location?: URL;\n  wrapper?: FunctionComponent<{ children: ReactNode }>;\n};\n\nfunction getGestureHandlerRootView() {\n  try {\n    const { GestureHandlerRootView } =\n      require('react-native-gesture-handler') as typeof import('react-native-gesture-handler');\n\n    if (!GestureHandlerRootView) {\n      return React.Fragment;\n    }\n\n    // eslint-disable-next-line no-inner-declarations\n    function GestureHandler(props: any) {\n      return <GestureHandlerRootView style={{ flex: 1 }} {...props} />;\n    }\n    if (process.env.NODE_ENV === 'development') {\n      // @ts-expect-error\n      GestureHandler.displayName = 'GestureHandlerRootView';\n    }\n    return GestureHandler;\n  } catch {\n    return React.Fragment;\n  }\n}\n\nconst GestureHandlerRootView = getGestureHandlerRootView();\n\nconst INITIAL_METRICS = {\n  frame: { x: 0, y: 0, width: 0, height: 0 },\n  insets: { top: 0, left: 0, right: 0, bottom: 0 },\n};\n\nconst hasViewControllerBasedStatusBarAppearance =\n  Platform.OS === 'ios' &&\n  !!Constants.expoConfig?.ios?.infoPlist?.UIViewControllerBasedStatusBarAppearance;\n\nexport function ExpoRoot({ wrapper: ParentWrapper = Fragment, ...props }: ExpoRootProps) {\n  /*\n   * Due to static rendering we need to wrap these top level views in second wrapper\n   * View's like <GestureHandlerRootView /> generate a <div> so if the parent wrapper\n   * is a HTML document, we need to ensure its inside the <body>\n   */\n  const wrapper: ExpoRootProps['wrapper'] = ({ children }) => {\n    return (\n      <ParentWrapper>\n        <GestureHandlerRootView>\n          <SafeAreaProvider\n            // SSR support\n            initialMetrics={INITIAL_METRICS}>\n            {children}\n\n            {/* Users can override this by adding another StatusBar element anywhere higher in the component tree. */}\n            {!hasViewControllerBasedStatusBarAppearance && <StatusBar style=\"auto\" />}\n          </SafeAreaProvider>\n        </GestureHandlerRootView>\n      </ParentWrapper>\n    );\n  };\n\n  return <ContextNavigator {...props} wrapper={wrapper} />;\n}\n\nconst initialUrl =\n  Platform.OS === 'web' && typeof window !== 'undefined'\n    ? new URL(window.location.href)\n    : undefined;\n\nfunction ContextNavigator({\n  context,\n  location: initialLocation = initialUrl,\n  wrapper: WrapperComponent = Fragment,\n}: ExpoRootProps) {\n  const store = useInitializeExpoRouter(context, initialLocation);\n\n  if (store.shouldShowTutorial()) {\n    SplashScreen.hideAsync();\n    if (process.env.NODE_ENV === 'development') {\n      const Tutorial = require('./onboard/Tutorial').Tutorial;\n      return (\n        <WrapperComponent>\n          <Tutorial />\n        </WrapperComponent>\n      );\n    } else {\n      // Ensure tutorial styles are stripped in production.\n      return null;\n    }\n  }\n\n  const Component = store.rootComponent;\n\n  return (\n    <UpstreamNavigationContainer\n      ref={store.navigationRef}\n      initialState={store.initialState}\n      linking={store.linking}\n      documentTitle={{\n        enabled: false,\n      }}>\n      <WrapperComponent>\n        <Component />\n      </WrapperComponent>\n    </UpstreamNavigationContainer>\n  );\n}\n"]}