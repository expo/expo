{"version":3,"file":"Tokens.types.js","sourceRoot":"","sources":["../src/Tokens.types.ts"],"names":[],"mappings":"","sourcesContent":["import { Platform } from 'expo-modules-core';\n\n// @docsMissing\nexport interface NativeDevicePushToken {\n  type: 'ios' | 'android';\n  data: string;\n}\n\n// @docsMissing\nexport interface WebDevicePushToken {\n  type: 'web';\n  data: {\n    endpoint: string;\n    keys: {\n      p256dh: string;\n      auth: string;\n    };\n  };\n}\n\n// @docsMissing\ntype ExplicitlySupportedDevicePushToken = NativeDevicePushToken | WebDevicePushToken;\n\ntype ImplicitlySupportedDevicePushToken = {\n  /**\n   * Either `android`, `ios` or `web`.\n   */\n  type: Exclude<typeof Platform.OS, ExplicitlySupportedDevicePushToken['type']>;\n  /**\n   * Either the push token as a string (when for native platforms), or an object conforming to the type below (for web):\n   * ```ts\n   * {\n   *   endpoint: string;\n   *   keys: {\n   *     p256dh: string;\n   *     auth: string;\n   *   }\n   * }\n   * ```\n   */\n  data: any;\n};\n\n/**\n * In simple terms, an object of `type: Platform.OS` and `data: any`. The `data` type depends on the environment - on a native device it will be a string,\n * which you can then use to send notifications via Firebase Cloud Messaging (Android) or APNs (iOS); on web it will be a registration object (VAPID).\n */\nexport type DevicePushToken =\n  | ExplicitlySupportedDevicePushToken\n  | ImplicitlySupportedDevicePushToken;\n\n/**\n * Borrowing structure from `DevicePushToken` a little. You can use the `data` value to send notifications via Expo Notifications service.\n */\nexport interface ExpoPushToken {\n  /**\n   * Always set to `\"expo\"`.\n   */\n  type: 'expo';\n  /**\n   * The acquired push token.\n   */\n  data: string;\n}\n\nexport interface ExpoPushTokenOptions {\n  /**\n   * Endpoint URL override.\n   */\n  baseUrl?: string;\n  /**\n   * Request URL override.\n   */\n  url?: string;\n  /**\n   * Request body override.\n   */\n  type?: string;\n  // @missingDocs\n  deviceId?: string;\n  /**\n   * Makes sense only on iOS, where there are two push notification services: \"sandbox\" and \"production\".\n   * This defines whether the push token is supposed to be used with the sandbox platform notification service.\n   * Defaults to [`Application.getIosPushNotificationServiceEnvironmentAsync()`](/application/#applicationgetiospushnotificationserviceenvironmentasync)\n   * exposed by `expo-application` or `false`. Most probably you won't need to customize that.\n   * You may want to customize that if you don't want to install `expo-application` and still use the sandbox APNs.\n   * @platform ios\n   */\n  development?: boolean;\n  /**\n   * The ID of the experience to which the token should be attributed.\n   * Defaults to [`Constants.manifest.id`](/constants/#constantsmanifest) exposed by `expo-constants`.\n   * When building with EAS Build, or in the bare workflow, you must provide a value which takes the shape `@username/projectSlug`,\n   * where `username` is the Expo account that the project is associated with, and `projectSlug` is your [`slug`](/config/app.mdx#slug) from Expo config.\n   *\n   * @deprecated Use `projectId` instead.\n   */\n  experienceId?: string;\n  /**\n   * The ID of the project to which the token should be attributed.\n   * Defaults to [`Constants.expoConfig.extra.eas.projectId`](/constants/#easconfig) exposed by `expo-constants`.\n   *\n   * When using EAS Build, this value is automatically set. However, it is\n   * **recommended** to set it manually. Once you have EAS Build configured, you can find\n   * the value in **app.json** under `extra.eas.projectId`. You can copy and paste it into your code.\n   * If you are not using EAS Build, it will fallback to [`Constants.manifest.projectId`](/constants/#manifest).\n   */\n  projectId?: string;\n  /**\n   * The ID of the application to which the token should be attributed.\n   * Defaults to [`Application.applicationId`](/application/#applicationapplicationid) exposed by `expo-application`.\n   */\n  applicationId?: string;\n  /**\n   * The device push token with which to register at the backend.\n   * Defaults to a token fetched with [`getDevicePushTokenAsync()`](#getdevicepushtokenasync-devicepushtoken).\n   */\n  devicePushToken?: DevicePushToken;\n}\n"]}