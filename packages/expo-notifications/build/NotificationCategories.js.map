{"version":3,"file":"NotificationCategories.js","sourceRoot":"","sources":["../src/NotificationCategories.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD,OAAO,4BAA4B,MAAM,gCAAgC,CAAC;AAO1E;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,8BAA8B,CAClD,UAAkC;IAElC,IAAI,CAAC,4BAA4B,CAAC,8BAA8B,EAAE,CAAC;QACjE,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,gCAAgC,CAAC,CAAC;IACnF,CAAC;IACD,0HAA0H;IAE1H,MAAM,4BAA4B,CAAC,8BAA8B,CAAC,UAAU,CAAC,CAAC;AAChF,CAAC;AAED;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,KAAK,UAAU,4BAA4B,CAChD,UAAkB,EAClB,OAA6B,EAC7B,OAAqC;IAErC,IAAI,CAAC,4BAA4B,CAAC,4BAA4B,EAAE,CAAC;QAC/D,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,8BAA8B,CAAC,CAAC;IACjF,CAAC;IAED,OAAO,MAAM,4BAA4B,CAAC,4BAA4B,CACpE,UAAU,EACV,OAAO,EACP,OAAO,CACR,CAAC;AACJ,CAAC;AAED;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,+BAA+B,CAAC,UAAkB;IACtE,IAAI,CAAC,4BAA4B,CAAC,+BAA+B,EAAE,CAAC;QAClE,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,iCAAiC,CAAC,CAAC;IACpF,CAAC;IAED,OAAO,MAAM,4BAA4B,CAAC,+BAA+B,CAAC,UAAU,CAAC,CAAC;AACxF,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,8BAA8B;IAClD,IAAI,CAAC,4BAA4B,CAAC,8BAA8B,EAAE,CAAC;QACjE,MAAM,IAAI,mBAAmB,CAAC,eAAe,EAAE,gCAAgC,CAAC,CAAC;IACnF,CAAC;IAED,OAAO,MAAM,4BAA4B,CAAC,8BAA8B,EAAE,CAAC;AAC7E,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport NotificationCategoriesModule from './NotificationCategoriesModule';\nimport {\n  NotificationAction,\n  NotificationCategory,\n  NotificationCategoryOptions,\n} from './Notifications.types';\n\n/**\n * Sets the new notification category.\n * @param categories An array of notification categories to set. Each category must have a unique identifier.\n *\n * @return A Promise that resolves once the operation completes.\n * @platform android\n * @platform ios\n * @header categories\n */\nexport async function setNotificationCategoriesAsync(\n  categories: NotificationCategory[]\n): Promise<void> {\n  if (!NotificationCategoriesModule.setNotificationCategoriesAsync) {\n    throw new UnavailabilityError('Notifications', 'setNotificationCategoriesAsync');\n  }\n  // TODO Don't use the characters `:` or `-` in your category identifier. If you do, categories might not work as expected.\n\n  await NotificationCategoriesModule.setNotificationCategoriesAsync(categories);\n}\n\n/**\n * Sets the new notification category.\n * @param identifier A string to associate as the ID of this category. You will pass this string in as the `categoryIdentifier`\n * in your [`NotificationContent`](#notificationcontent) to associate a notification with this category.\n * > Don't use the characters `:` or `-` in your category identifier. If you do, categories might not work as expected.\n * @param actions An array of [`NotificationAction`](#notificationaction), which describe the actions associated with this category.\n * @param options An optional object of additional configuration options for your category.\n * @return A Promise which resolves to the category you just have created.\n * @platform android\n * @platform ios\n * @header categories\n *\n * @deprecated Use `setNotificationCategoriesAsync` instead.\n */\nexport async function setNotificationCategoryAsync(\n  identifier: string,\n  actions: NotificationAction[],\n  options?: NotificationCategoryOptions\n): Promise<NotificationCategory> {\n  if (!NotificationCategoriesModule.setNotificationCategoryAsync) {\n    throw new UnavailabilityError('Notifications', 'setNotificationCategoryAsync');\n  }\n\n  return await NotificationCategoriesModule.setNotificationCategoryAsync(\n    identifier,\n    actions,\n    options\n  );\n}\n\n/**\n * Deletes the category associated with the provided identifier.\n * @param identifier Identifier initially provided to `setNotificationCategoryAsync` when creating the category.\n * @return A Promise which resolves to `true` if the category was successfully deleted, or `false` if it was not.\n * An example of when this method would return `false` is if you try to delete a category that doesn't exist.\n * @platform android\n * @platform ios\n * @header categories\n *\n * @deprecated Use `setNotificationCategoriesAsync` instead.\n */\nexport async function deleteNotificationCategoryAsync(identifier: string): Promise<boolean> {\n  if (!NotificationCategoriesModule.deleteNotificationCategoryAsync) {\n    throw new UnavailabilityError('Notifications', 'deleteNotificationCategoryAsync');\n  }\n\n  return await NotificationCategoriesModule.deleteNotificationCategoryAsync(identifier);\n}\n\n/**\n * Fetches information about all known notification categories.\n * @return A Promise which resolves to an array of `NotificationCategory`s. On platforms that do not support notification channels,\n * it will always resolve to an empty array.\n * @platform android\n * @platform ios\n * @header categories\n */\nexport async function getNotificationCategoriesAsync(): Promise<NotificationCategory[]> {\n  if (!NotificationCategoriesModule.getNotificationCategoriesAsync) {\n    throw new UnavailabilityError('Notifications', 'getNotificationCategoriesAsync');\n  }\n\n  return await NotificationCategoriesModule.getNotificationCategoriesAsync();\n}\n"]}