{"version":3,"file":"Calendar.js","sourceRoot":"","sources":["../src/Calendar.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { Platform, processColor } from 'react-native';\n\nimport ExpoCalendar from './ExpoCalendar';\n\n// @needsAudit\n/**\n * @platform ios\n */\nexport type RecurringEventOptions = {\n  /**\n   * Whether or not future events in the recurring series should also be updated. If `true`, will\n   * apply the given changes to the recurring instance specified by `instanceStartDate` and all\n   * future events in the series. If `false`, will only apply the given changes to the instance\n   * specified by `instanceStartDate`.\n   */\n  futureEvents?: boolean;\n  /**\n   * Date object representing the start time of the desired instance, if looking for a single instance\n   * of a recurring event. If this is not provided and **id** represents a recurring event, the first\n   * instance of that event will be returned by default.\n   */\n  instanceStartDate?: string | Date;\n};\n\n// @needsAudit\n/**\n * A calendar record upon which events (or, on iOS, reminders) can be stored. Settings here apply to\n * the calendar as a whole and how its events are displayed in the OS calendar app.\n */\nexport type Calendar = {\n  /**\n   * Internal ID that represents this calendar on the device.\n   */\n  id: string;\n  /**\n   * Visible name of the calendar.\n   */\n  title: string;\n  /**\n   * ID of the source to be used for the calendar. Likely the same as the source for any other\n   * locally stored calendars.\n   * @platform ios\n   */\n  sourceId?: string;\n  /**\n   * Object representing the source to be used for the calendar.\n   */\n  source: Source;\n  /**\n   * Type of calendar this object represents.\n   * Possible values: [`CalendarType`](#calendarcalendartype).\n   * @platform ios\n   */\n  type?: string;\n  /**\n   * Color used to display this calendar's events.\n   */\n  color: string;\n  /**\n   * Whether the calendar is used in the Calendar or Reminders OS app.\n   * Possible values: [`EntityTypes`](#calendarentitytypes).\n   * @platform ios\n   */\n  entityType?: string;\n  /**\n   * Boolean value that determines whether this calendar can be modified.\n   */\n  allowsModifications: boolean;\n  /**\n   * Availability types that this calendar supports.\n   * Possible values: Array of [`Availability`](#calendaravailability).\n   */\n  allowedAvailabilities: string[];\n  /**\n   * Boolean value indicating whether this is the device's primary calendar.\n   * @platform android\n   */\n  isPrimary?: boolean;\n  /**\n   * Internal system name of the calendar.\n   * @platform android\n   */\n  name?: string | null;\n  /**\n   * Name for the account that owns this calendar.\n   * @platform android\n   */\n  ownerAccount?: string;\n  /**\n   * Time zone for the calendar.\n   * @platform android\n   */\n  timeZone?: string;\n  /**\n   * Alarm methods that this calendar supports.\n   * Possible values: Array of [`AlarmMethod`](#calendaralarmmethod).\n   * @platform android\n   */\n  allowedReminders?: string[];\n  /**\n   * Attendee types that this calendar supports.\n   * Possible values: Array of [`AttendeeType`](#calendarattendeetype).\n   * @platform android\n   */\n  allowedAttendeeTypes?: string[];\n  /**\n   * Indicates whether the OS displays events on this calendar.\n   * @platform android\n   */\n  isVisible?: boolean;\n  /**\n   * Indicates whether this calendar is synced and its events stored on the device.\n   * Unexpected behavior may occur if this is not set to `true`.\n   * @platform android\n   */\n  isSynced?: boolean;\n  /**\n   * Level of access that the user has for the calendar.\n   * Possible values: [`CalendarAccessLevel`](#calendarcalendaraccesslevel).\n   * @platform android\n   */\n  accessLevel?: string;\n};\n\n// @needsAudit\n/**\n * A source account that owns a particular calendar. Expo apps will typically not need to interact with `Source` objects.\n */\nexport type Source = {\n  /**\n   * Internal ID that represents this source on the device.\n   * @platform ios\n   */\n  id?: string;\n  /**\n   * Type of the account that owns this calendar and was used to sync it to the device.\n   * If `isLocalAccount` is falsy then this must be defined, and must match an account on the device\n   * along with `name`, or the OS will delete the calendar.\n   * On iOS, one of [`SourceType`](#calendarsourcetype)s.\n   */\n  type: string;\n  /**\n   * Name for the account that owns this calendar and was used to sync the calendar to the device.\n   */\n  name: string;\n  /**\n   * Whether this source is the local phone account. Must be `true` if `type` is `undefined`.\n   * @platform android\n   */\n  isLocalAccount?: boolean;\n};\n\n// @needsAudit\n/**\n * An event record, or a single instance of a recurring event. On iOS, used in the Calendar app.\n */\nexport type Event = {\n  /**\n   * Internal ID that represents this event on the device.\n   */\n  id: string;\n  /**\n   * ID of the calendar that contains this event.\n   */\n  calendarId: string;\n  /**\n   * Visible name of the event.\n   */\n  title: string;\n  /**\n   * Location field of the event.\n   */\n  location: string;\n  /**\n   * Date when the event record was created.\n   * @platform ios\n   */\n  creationDate?: string | Date;\n  /**\n   * Date when the event record was last modified.\n   * @platform ios\n   */\n  lastModifiedDate?: string | Date;\n  /**\n   * Time zone the event is scheduled in.\n   */\n  timeZone: string;\n  /**\n   * Time zone for the event end time.\n   * @platform android\n   */\n  endTimeZone?: string;\n  /**\n   * URL for the event.\n   * @platform ios\n   */\n  url?: string;\n  /**\n   * Description or notes saved with the event.\n   */\n  notes: string;\n  /**\n   * Array of Alarm objects which control automated reminders to the user.\n   */\n  alarms: Alarm[];\n  /**\n   * Object representing rules for recurring or repeating events. Set to `null` for one-time events.\n   */\n  recurrenceRule: RecurrenceRule;\n  /**\n   * Date object or string representing the time when the event starts.\n   */\n  startDate: string | Date;\n  /**\n   * Date object or string representing the time when the event ends.\n   */\n  endDate: string | Date;\n  /**\n   * For recurring events, the start date for the first (original) instance of the event.\n   * @platform ios\n   */\n  originalStartDate?: string | Date;\n  /**\n   * Boolean value indicating whether or not the event is a detached (modified) instance of a recurring event.\n   * @platform ios\n   */\n  isDetached?: boolean;\n  /**\n   * Whether the event is displayed as an all-day event on the calendar\n   */\n  allDay: boolean;\n  /**\n   * The availability setting for the event.\n   * Possible values: [`Availability`](#calendaravailability).\n   */\n  availability: string;\n  /**\n   * Status of the event.\n   * Possible values: [`EventStatus`](#calendareventstatus).\n   */\n  status: string;\n  /**\n   * Organizer of the event.\n   * @platform ios\n   */\n  organizer?: string;\n  /**\n   * Email address of the organizer of the event.\n   * @platform android\n   */\n  organizerEmail?: string;\n  /**\n   * User's access level for the event.\n   * Possible values: [`EventAccessLevel`](#calendareventaccesslevel).\n   * @platform android\n   */\n  accessLevel?: string;\n  /**\n   * Whether invited guests can modify the details of the event.\n   * @platform android\n   */\n  guestsCanModify?: boolean;\n  /**\n   * Whether invited guests can invite other guests.\n   * @platform android\n   */\n  guestsCanInviteOthers?: boolean;\n  /**\n   * Whether invited guests can see other guests.\n   * @platform android\n   */\n  guestsCanSeeGuests?: boolean;\n  /**\n   * For detached (modified) instances of recurring events, the ID of the original recurring event.\n   * @platform android\n   */\n  originalId?: string;\n  /**\n   * For instances of recurring events, volatile ID representing this instance. Not guaranteed to\n   * always refer to the same instance.\n   * @platform android\n   */\n  instanceId?: string;\n};\n\n// @needsAudit\n/**\n * A reminder record, used in the iOS Reminders app. No direct analog on Android.\n * @platform ios\n */\nexport type Reminder = {\n  /**\n   * Internal ID that represents this reminder on the device.\n   */\n  id?: string;\n  /**\n   * ID of the calendar that contains this reminder.\n   */\n  calendarId?: string;\n  /**\n   * Visible name of the reminder.\n   */\n  title?: string;\n  /**\n   * Location field of the reminder\n   */\n  location?: string;\n  /**\n   * Date when the reminder record was created.\n   */\n  creationDate?: string | Date;\n  /**\n   * Date when the reminder record was last modified.\n   */\n  lastModifiedDate?: string | Date;\n  /**\n   * Time zone the reminder is scheduled in.\n   */\n  timeZone?: string;\n  /**\n   * URL for the reminder.\n   */\n  url?: string;\n  /**\n   * Description or notes saved with the reminder.\n   */\n  notes?: string;\n  /**\n   * Array of Alarm objects which control automated alarms to the user about the task.\n   */\n  alarms?: Alarm[];\n  /**\n   * Object representing rules for recurring or repeated reminders. Null for one-time tasks.\n   */\n  recurrenceRule?: RecurrenceRule;\n  /**\n   * Date object or string representing the start date of the reminder task.\n   */\n  startDate?: string | Date;\n  /**\n   * Date object or string representing the time when the reminder task is due.\n   */\n  dueDate?: string | Date;\n  /**\n   * Indicates whether or not the task has been completed.\n   */\n  completed?: boolean;\n  /**\n   * Date object or string representing the date of completion, if `completed` is `true`.\n   * Setting this property of a nonnull `Date` will automatically set the reminder's `completed` value to `true`.\n   */\n  completionDate?: string | Date;\n};\n\n// @needsAudit\n/**\n * A person or entity that is associated with an event by being invited or fulfilling some other role.\n */\nexport type Attendee = {\n  /**\n   * Internal ID that represents this attendee on the device.\n   * @platform android\n   */\n  id?: string;\n  /**\n   * Indicates whether or not this attendee is the current OS user.\n   * @platform ios\n   */\n  isCurrentUser?: boolean;\n  /**\n   * Displayed name of the attendee.\n   */\n  name: string;\n  /**\n   * Role of the attendee at the event.\n   * Possible values: [`AttendeeRole`](#calendarattendeerole).\n   */\n  role: string;\n  /**\n   * Status of the attendee in relation to the event.\n   * Possible values: [`AttendeeStatus`](#calendarattendeestatus).\n   */\n  status: string;\n  /**\n   * Type of the attendee.\n   * Possible values: [`AttendeeType`](#calendarattendeetype).\n   */\n  type: string;\n  /**\n   * URL for the attendee.\n   * @platform ios\n   */\n  url?: string;\n  /**\n   * Email address of the attendee.\n   * @platform android\n   */\n  email?: string;\n};\n\n// @needsAudit\n/**\n * A method for having the OS automatically remind the user about an calendar item.\n */\nexport type Alarm = {\n  /**\n   * Date object or string representing an absolute time the alarm should occur.\n   * Overrides `relativeOffset` and `structuredLocation` if specified alongside either.\n   * @platform ios\n   */\n  absoluteDate?: string;\n  /**\n   * Number of minutes from the `startDate` of the calendar item that the alarm should occur.\n   * Use negative values to have the alarm occur before the `startDate`.\n   */\n  relativeOffset?: number;\n  // @docsMissing\n  structuredLocation?: AlarmLocation;\n  /**\n   * Method of alerting the user that this alarm should use; on iOS this is always a notification.\n   * Possible values: [`AlarmMethod`](#calendaralarmmethod).\n   * @platform android\n   */\n  method?: string;\n};\n\n// @needsAudit @docsMissing\nexport type AlarmLocation = {\n  /**\n   * @platform ios\n   */\n  title?: string;\n  proximity?: string;\n  radius?: number;\n  coords?: {\n    latitude?: number;\n    longitude?: number;\n  };\n};\n\nexport enum DayOfTheWeek {\n  Sunday = 1,\n  Monday = 2,\n  Tuesday = 3,\n  Wednesday = 4,\n  Thursday = 5,\n  Friday = 6,\n  Saturday = 7,\n}\n\nexport enum MonthOfTheYear {\n  January = 1,\n  February = 2,\n  March = 3,\n  April = 4,\n  May = 5,\n  June = 6,\n  July = 7,\n  August = 8,\n  September = 9,\n  October = 10,\n  November = 11,\n  December = 12,\n}\n\n// @needsAudit\n/**\n * A recurrence rule for events or reminders, allowing the same calendar item to recur multiple times.\n * This type is based on [the iOS interface](https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507320-initrecurrencewithfrequency)\n * which is in turn based on [the iCal RFC](https://tools.ietf.org/html/rfc5545#section-3.8.5.3)\n * so you can refer to those to learn more about this potentially complex interface.\n *\n * Not all of the combinations make sense. For example, when frequency is `DAILY`, setting `daysOfTheMonth` makes no sense.\n */\nexport type RecurrenceRule = {\n  /**\n   * How often the calendar item should recur.\n   * Possible values: [`Frequency`](#calendarfrequency).\n   */\n  frequency: string;\n  /**\n   * Interval at which the calendar item should recur. For example, an `interval: 2` with `frequency: DAILY`\n   * would yield an event that recurs every other day.\n   * @default 1\n   */\n  interval?: number;\n  /**\n   * Date on which the calendar item should stop recurring; overrides `occurrence` if both are specified.\n   */\n  endDate?: string | Date;\n  /**\n   * Number of times the calendar item should recur before stopping.\n   */\n  occurrence?: number;\n  /**\n   * The days of the week the event should recur on. An array of [`DaysOfTheWeek`](#daysoftheweek) object.\n   * @platform ios\n   */\n  daysOfTheWeek?: DaysOfTheWeek[];\n  /**\n   * The days of the month this event occurs on.\n   * `-31` to `31` (not including `0`). Negative indicates a value from the end of the range.\n   * This field is only valid for `Calendar.Frequency.Monthly`.\n   * @platform ios\n   */\n  daysOfTheMonth?: number[];\n  /**\n   * The months this event occurs on.\n   * This field is only valid for `Calendar.Frequency.Yearly`.\n   * @platform ios\n   */\n  monthsOfTheYear?: MonthOfTheYear[];\n  /**\n   * The weeks of the year this event occurs on.\n   * `-53` to `53` (not including `0`). Negative indicates a value from the end of the range.\n   * This field is only valid for `Calendar.Frequency.Yearly`.\n   * @platform ios\n   */\n  weeksOfTheYear?: number[];\n  /**\n   * The days of the year this event occurs on.\n   * `-366` to `366` (not including `0`). Negative indicates a value from the end of the range.\n   * This field is only valid for `Calendar.Frequency.Yearly`.\n   * @platform ios\n   */\n  daysOfTheYear?: number[];\n  /**\n   * TAn array of numbers that filters which recurrences to include. For example, for an event that\n   * recurs every Monday, passing 2 here will make it recur every other Monday.\n   * `-366` to `366` (not including `0`). Negative indicates a value from the end of the range.\n   * This field is only valid for `Calendar.Frequency.Yearly`.\n   * @platform ios\n   */\n  setPositions?: number[];\n};\n\n// @needsAudit\n/**\n * @platform ios\n */\nexport type DaysOfTheWeek = {\n  /**\n   * Sunday to Saturday - `DayOfTheWeek` enum.\n   */\n  dayOfTheWeek: DayOfTheWeek;\n  /**\n   * `-53` to `53` (`0` ignores this field, and a negative indicates a value from the end of the range).\n   */\n  weekNumber?: number;\n};\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\n\n// @needsAudit\n/**\n * Returns whether the Calendar API is enabled on the current device. This does not check the app permissions.\n *\n * @returns Async `boolean`, indicating whether the Calendar API is available on the current device.\n * Currently, this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoCalendar.getCalendarsAsync;\n}\n\n// @needsAudit\n/**\n * Gets an array of calendar objects with details about the different calendars stored on the device.\n * @param entityType __iOS Only.__ Not required, but if defined, filters the returned calendars to\n * a specific entity type. Possible values are `Calendar.EntityTypes.EVENT` (for calendars shown in\n * the Calendar app) and `Calendar.EntityTypes.REMINDER` (for the Reminders app).\n * > **Note:** If not defined, you will need both permissions: **CALENDAR** and **REMINDERS**.\n * @return An array of [calendar objects](#calendar 'Calendar') matching the provided entity type (if provided).\n */\nexport async function getCalendarsAsync(entityType?: string): Promise<Calendar[]> {\n  if (!ExpoCalendar.getCalendarsAsync) {\n    throw new UnavailabilityError('Calendar', 'getCalendarsAsync');\n  }\n  if (!entityType) {\n    return ExpoCalendar.getCalendarsAsync(null);\n  }\n  return ExpoCalendar.getCalendarsAsync(entityType);\n}\n\n// @needsAudit\n/**\n * Creates a new calendar on the device, allowing events to be added later and displayed in the OS Calendar app.\n * @param details A map of details for the calendar to be created.\n * @return A string representing the ID of the newly created calendar.\n */\nexport async function createCalendarAsync(details: Partial<Calendar> = {}): Promise<string> {\n  if (!ExpoCalendar.saveCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'createCalendarAsync');\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n  const newDetails = { ...details, id: undefined, color };\n  return ExpoCalendar.saveCalendarAsync(newDetails);\n}\n\n// @needsAudit\n/**\n * Updates the provided details of an existing calendar stored on the device. To remove a property,\n * explicitly set it to `null` in `details`.\n * @param id ID of the calendar to update.\n * @param details A map of properties to be updated.\n */\nexport async function updateCalendarAsync(\n  id: string,\n  details: Partial<Calendar> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'updateCalendarAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'updateCalendarAsync must be called with an id (string) of the target calendar'\n    );\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n\n  if (Platform.OS === 'android') {\n    if (\n      details.hasOwnProperty('source') ||\n      details.hasOwnProperty('color') ||\n      details.hasOwnProperty('allowsModifications') ||\n      details.hasOwnProperty('allowedAvailabilities') ||\n      details.hasOwnProperty('isPrimary') ||\n      details.hasOwnProperty('ownerAccount') ||\n      details.hasOwnProperty('timeZone') ||\n      details.hasOwnProperty('allowedReminders') ||\n      details.hasOwnProperty('allowedAttendeeTypes') ||\n      details.hasOwnProperty('accessLevel')\n    ) {\n      console.warn(\n        'updateCalendarAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  } else {\n    if (\n      details.hasOwnProperty('source') ||\n      details.hasOwnProperty('type') ||\n      details.hasOwnProperty('entityType') ||\n      details.hasOwnProperty('allowsModifications') ||\n      details.hasOwnProperty('allowedAvailabilities')\n    ) {\n      console.warn(\n        'updateCalendarAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  }\n\n  const newDetails = { ...details, id, color };\n  return ExpoCalendar.saveCalendarAsync(newDetails);\n}\n\n// @needsAudit\n/**\n * Deletes an existing calendar and all associated events/reminders/attendees from the device. __Use with caution.__\n * @param id ID of the calendar to delete.\n */\nexport async function deleteCalendarAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteCalendarAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'deleteCalendarAsync must be called with an id (string) of the target calendar'\n    );\n  }\n  return ExpoCalendar.deleteCalendarAsync(id);\n}\n\n// @needsAudit\n/**\n * Returns all events in a given set of calendars over a specified time period. The filtering has\n * slightly different behavior per-platform - on iOS, all events that overlap at all with the\n * `[startDate, endDate]` interval are returned, whereas on Android, only events that begin on or\n * after the `startDate` and end on or before the `endDate` will be returned.\n * @param calendarIds Array of IDs of calendars to search for events in.\n * @param startDate Beginning of time period to search for events in.\n * @param endDate End of time period to search for events in.\n * @return A promise which fulfils with an array of [`Event`](#event) objects matching the search criteria.\n */\nexport async function getEventsAsync(\n  calendarIds: string[],\n  startDate: Date,\n  endDate: Date\n): Promise<Event[]> {\n  if (!ExpoCalendar.getEventsAsync) {\n    throw new UnavailabilityError('Calendar', 'getEventsAsync');\n  }\n  if (!startDate) {\n    throw new Error('getEventsAsync must be called with a startDate (date) to search for events');\n  }\n  if (!endDate) {\n    throw new Error('getEventsAsync must be called with an endDate (date) to search for events');\n  }\n  if (!calendarIds || !calendarIds.length) {\n    throw new Error(\n      'getEventsAsync must be called with a non-empty array of calendarIds to search'\n    );\n  }\n  return ExpoCalendar.getEventsAsync(\n    stringifyIfDate(startDate),\n    stringifyIfDate(endDate),\n    calendarIds\n  );\n}\n\n// @needsAudit\n/**\n * Returns a specific event selected by ID. If a specific instance of a recurring event is desired,\n * the start date of this instance must also be provided, as instances of recurring events do not\n * have their own unique and stable IDs on either iOS or Android.\n * @param id ID of the event to return.\n * @param recurringEventOptions A map of options for recurring events.\n * @return A promise which fulfils with an [`Event`](#event) object matching the provided criteria, if one exists.\n */\nexport async function getEventAsync(\n  id: string,\n  recurringEventOptions: RecurringEventOptions = {}\n): Promise<Event> {\n  if (!ExpoCalendar.getEventByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getEventAsync');\n  }\n  if (!id) {\n    throw new Error('getEventAsync must be called with an id (string) of the target event');\n  }\n  if (Platform.OS === 'ios') {\n    return ExpoCalendar.getEventByIdAsync(id, recurringEventOptions.instanceStartDate);\n  } else {\n    return ExpoCalendar.getEventByIdAsync(id);\n  }\n}\n\n// @needsAudit\n/**\n * Creates a new event on the specified calendar.\n * @param calendarId ID of the calendar to create this event in.\n * @param eventData A map of details for the event to be created.\n * @return A promise which fulfils with a string representing the ID of the newly created event.\n */\nexport async function createEventAsync(\n  calendarId: string,\n  eventData: Partial<Event> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveEventAsync) {\n    throw new UnavailabilityError('Calendar', 'createEventAsync');\n  }\n  if (!calendarId) {\n    throw new Error('createEventAsync must be called with an id (string) of the target calendar');\n  }\n\n  const { id, ...details } = eventData;\n\n  if (Platform.OS === 'android') {\n    if (!details.startDate) {\n      throw new Error('createEventAsync requires a startDate (Date)');\n    }\n    if (!details.endDate) {\n      throw new Error('createEventAsync requires an endDate (Date)');\n    }\n  }\n\n  const newDetails = {\n    ...details,\n    calendarId,\n  };\n\n  return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), {});\n}\n\n// @needsAudit\n/**\n * Updates the provided details of an existing calendar stored on the device. To remove a property,\n * explicitly set it to `null` in `details`.\n * @param id ID of the event to be updated.\n * @param details A map of properties to be updated.\n * @param recurringEventOptions A map of options for recurring events.\n */\nexport async function updateEventAsync(\n  id: string,\n  details: Partial<Event> = {},\n  recurringEventOptions: RecurringEventOptions = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveEventAsync) {\n    throw new UnavailabilityError('Calendar', 'updateEventAsync');\n  }\n  if (!id) {\n    throw new Error('updateEventAsync must be called with an id (string) of the target event');\n  }\n\n  if (Platform.OS === 'ios') {\n    if (\n      details.hasOwnProperty('creationDate') ||\n      details.hasOwnProperty('lastModifiedDate') ||\n      details.hasOwnProperty('originalStartDate') ||\n      details.hasOwnProperty('isDetached') ||\n      details.hasOwnProperty('status') ||\n      details.hasOwnProperty('organizer')\n    ) {\n      console.warn(\n        'updateEventAsync was called with one or more read-only properties, which will not be updated'\n      );\n    }\n  }\n\n  const { futureEvents = false, instanceStartDate } = recurringEventOptions;\n  const newDetails = { ...details, id, instanceStartDate };\n  return ExpoCalendar.saveEventAsync(stringifyDateValues(newDetails), { futureEvents });\n}\n\n// @needsAudit\n/**\n * Deletes an existing event from the device. Use with caution.\n * @param id ID of the event to be deleted.\n * @param recurringEventOptions A map of options for recurring events.\n */\nexport async function deleteEventAsync(\n  id: string,\n  recurringEventOptions: RecurringEventOptions = {}\n): Promise<void> {\n  if (!ExpoCalendar.deleteEventAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteEventAsync');\n  }\n  if (!id) {\n    throw new Error('deleteEventAsync must be called with an id (string) of the target event');\n  }\n  const { futureEvents = false, instanceStartDate } = recurringEventOptions;\n  return ExpoCalendar.deleteEventAsync({ id, instanceStartDate }, { futureEvents });\n}\n\n// @needsAudit\n/**\n * Gets all attendees for a given event (or instance of a recurring event).\n * @param id ID of the event to return attendees for.\n * @param recurringEventOptions A map of options for recurring events.\n * @return A promise which fulfils with an array of [`Attendee`](#attendee) associated with the\n * specified event.\n */\nexport async function getAttendeesForEventAsync(\n  id: string,\n  recurringEventOptions: RecurringEventOptions = {}\n): Promise<Attendee[]> {\n  if (!ExpoCalendar.getAttendeesForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'getAttendeesForEventAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'getAttendeesForEventAsync must be called with an id (string) of the target event'\n    );\n  }\n  const { instanceStartDate } = recurringEventOptions;\n  // Android only takes an ID, iOS takes an object\n  const params = Platform.OS === 'ios' ? { id, instanceStartDate } : id;\n  return ExpoCalendar.getAttendeesForEventAsync(params);\n}\n\n// @needsAudit\n/**\n * Creates a new attendee record and adds it to the specified event. Note that if `eventId` specifies\n * a recurring event, this will add the attendee to every instance of the event.\n * @param eventId ID of the event to add this attendee to.\n * @param details A map of details for the attendee to be created.\n * @return A string representing the ID of the newly created attendee record.\n * @platform android\n */\nexport async function createAttendeeAsync(\n  eventId: string,\n  details: Partial<Attendee> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveAttendeeForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'createAttendeeAsync');\n  }\n  if (!eventId) {\n    throw new Error('createAttendeeAsync must be called with an id (string) of the target event');\n  }\n  if (!details.email) {\n    throw new Error('createAttendeeAsync requires an email (string)');\n  }\n  if (!details.role) {\n    throw new Error('createAttendeeAsync requires a role (string)');\n  }\n  if (!details.type) {\n    throw new Error('createAttendeeAsync requires a type (string)');\n  }\n  if (!details.status) {\n    throw new Error('createAttendeeAsync requires a status (string)');\n  }\n  const newDetails = { ...details, id: undefined };\n  return ExpoCalendar.saveAttendeeForEventAsync(newDetails, eventId);\n}\n\n// @needsAudit\n/**\n * Updates an existing attendee record. To remove a property, explicitly set it to `null` in `details`.\n * @param id ID of the attendee record to be updated.\n * @param details A map of properties to be updated.\n * @platform android\n */\nexport async function updateAttendeeAsync(\n  id: string,\n  details: Partial<Attendee> = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveAttendeeForEventAsync) {\n    throw new UnavailabilityError('Calendar', 'updateAttendeeAsync');\n  }\n  if (!id) {\n    throw new Error('updateAttendeeAsync must be called with an id (string) of the target event');\n  }\n  const newDetails = { ...details, id };\n  return ExpoCalendar.saveAttendeeForEventAsync(newDetails, null);\n}\n\n// @needsAudit\n/**\n * Gets an instance of the default calendar object.\n * @return A promise resolving to the [Calendar](#calendar) object that is the user's default calendar.\n * @platform ios\n */\nexport async function getDefaultCalendarAsync(): Promise<Calendar> {\n  if (!ExpoCalendar.getDefaultCalendarAsync) {\n    throw new UnavailabilityError('Calendar', 'getDefaultCalendarAsync');\n  }\n  return ExpoCalendar.getDefaultCalendarAsync();\n}\n\n// @needsAudit\n/**\n * Deletes an existing attendee record from the device. __Use with caution.__\n * @param id ID of the attendee to delete.\n * @platform android\n */\nexport async function deleteAttendeeAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteAttendeeAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteAttendeeAsync');\n  }\n  if (!id) {\n    throw new Error('deleteAttendeeAsync must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.deleteAttendeeAsync(id);\n}\n\n// @needsAudit\n/**\n * Returns a list of reminders matching the provided criteria. If `startDate` and `endDate` are defined,\n * returns all reminders that overlap at all with the [startDate, endDate] interval - i.e. all reminders\n * that end after the `startDate` or begin before the `endDate`.\n * @param calendarIds Array of IDs of calendars to search for reminders in.\n * @param status One of `Calendar.ReminderStatus.COMPLETED` or `Calendar.ReminderStatus.INCOMPLETE`.\n * @param startDate Beginning of time period to search for reminders in. Required if `status` is defined.\n * @param endDate End of time period to search for reminders in. Required if `status` is defined.\n * @return A promise which fulfils with an array of [`Reminder`](#reminder) objects matching the search criteria.\n * @platform ios\n */\nexport async function getRemindersAsync(\n  calendarIds: (string | null)[],\n  status: string | null,\n  startDate: Date,\n  endDate: Date\n): Promise<Reminder[]> {\n  if (!ExpoCalendar.getRemindersAsync) {\n    throw new UnavailabilityError('Calendar', 'getRemindersAsync');\n  }\n  if (status && !startDate) {\n    throw new Error(\n      'getRemindersAsync must be called with a startDate (date) to search for reminders'\n    );\n  }\n  if (status && !endDate) {\n    throw new Error(\n      'getRemindersAsync must be called with an endDate (date) to search for reminders'\n    );\n  }\n  if (!calendarIds || !calendarIds.length) {\n    throw new Error(\n      'getRemindersAsync must be called with a non-empty array of calendarIds to search'\n    );\n  }\n  return ExpoCalendar.getRemindersAsync(\n    stringifyIfDate(startDate) || null,\n    stringifyIfDate(endDate) || null,\n    calendarIds,\n    status || null\n  );\n}\n\n// @needsAudit\n/**\n * Returns a specific reminder selected by ID.\n * @param id ID of the reminder to return.\n * @return A promise which fulfils with a [`Reminder`](#reminder) matching the provided ID, if one exists.\n * @platform ios\n */\nexport async function getReminderAsync(id: string): Promise<Reminder> {\n  if (!ExpoCalendar.getReminderByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getReminderAsync');\n  }\n  if (!id) {\n    throw new Error('getReminderAsync must be called with an id (string) of the target reminder');\n  }\n  return ExpoCalendar.getReminderByIdAsync(id);\n}\n\n// @needsAudit\n/**\n * Creates a new reminder on the specified calendar.\n * @param calendarId ID of the calendar to create this reminder in (or `null` to add the calendar to\n * the OS-specified default calendar for reminders).\n * @param reminder A map of details for the reminder to be created\n * @return A promise which fulfils with a string representing the ID of the newly created reminder.\n * @platform ios\n */\nexport async function createReminderAsync(\n  calendarId: string | null,\n  reminder: Reminder = {}\n): Promise<string> {\n  if (!ExpoCalendar.saveReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'createReminderAsync');\n  }\n\n  const { id, ...details } = reminder;\n  const newDetails = {\n    ...details,\n    calendarId: calendarId === null ? undefined : calendarId,\n  };\n  return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n}\n\n// @needsAudit\n/**\n * Updates the provided details of an existing reminder stored on the device. To remove a property,\n * explicitly set it to `null` in `details`.\n * @param id ID of the reminder to be updated.\n * @param details A map of properties to be updated.\n * @platform ios\n */\nexport async function updateReminderAsync(id: string, details: Reminder = {}): Promise<string> {\n  if (!ExpoCalendar.saveReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'updateReminderAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'updateReminderAsync must be called with an id (string) of the target reminder'\n    );\n  }\n\n  if (details.hasOwnProperty('creationDate') || details.hasOwnProperty('lastModifiedDate')) {\n    console.warn(\n      'updateReminderAsync was called with one or more read-only properties, which will not be updated'\n    );\n  }\n\n  const newDetails = { ...details, id };\n  return ExpoCalendar.saveReminderAsync(stringifyDateValues(newDetails));\n}\n\n// @needsAudit\n/**\n * Deletes an existing reminder from the device. __Use with caution.__\n * @param id ID of the reminder to be deleted.\n * @platform ios\n */\nexport async function deleteReminderAsync(id: string): Promise<void> {\n  if (!ExpoCalendar.deleteReminderAsync) {\n    throw new UnavailabilityError('Calendar', 'deleteReminderAsync');\n  }\n  if (!id) {\n    throw new Error(\n      'deleteReminderAsync must be called with an id (string) of the target reminder'\n    );\n  }\n  return ExpoCalendar.deleteReminderAsync(id);\n}\n\n// @needsAudit @docsMissing\n/**\n * @return A promise which fulfils with an array of [`Source`](#source) objects all sources for\n * calendars stored on the device.\n * @platform ios\n */\nexport async function getSourcesAsync(): Promise<Source[]> {\n  if (!ExpoCalendar.getSourcesAsync) {\n    throw new UnavailabilityError('Calendar', 'getSourcesAsync');\n  }\n  return ExpoCalendar.getSourcesAsync();\n}\n\n// @needsAudit\n/**\n * Returns a specific source selected by ID.\n * @param id ID of the source to return.\n * @return A promise which fulfils with an array of [`Source`](#source) object matching the provided\n * ID, if one exists.\n * @platform ios\n */\nexport async function getSourceAsync(id: string): Promise<Source> {\n  if (!ExpoCalendar.getSourceByIdAsync) {\n    throw new UnavailabilityError('Calendar', 'getSourceAsync');\n  }\n  if (!id) {\n    throw new Error('getSourceAsync must be called with an id (string) of the target source');\n  }\n  return ExpoCalendar.getSourceByIdAsync(id);\n}\n\n// @needsAudit\n/**\n * Sends an intent to open the specified event in the OS Calendar app.\n * @param id ID of the event to open.\n * @platform android\n */\nexport function openEventInCalendar(id: string): void {\n  if (!ExpoCalendar.openEventInCalendar) {\n    console.warn(`openEventInCalendar is not available on platform: ${Platform.OS}`);\n    return;\n  }\n  if (!id) {\n    throw new Error('openEventInCalendar must be called with an id (string) of the target event');\n  }\n  return ExpoCalendar.openEventInCalendar(parseInt(id, 10));\n} // Android\n\n// @needsAudit\n/**\n * @deprecated Use [`requestCalendarPermissionsAsync()`](#calendarrequestcalendarpermissionsasync) instead.\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  console.warn(\n    'requestPermissionsAsync is deprecated. Use requestCalendarPermissionsAsync instead.'\n  );\n  return requestCalendarPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing user's calendars.\n * @return A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).\n */\nexport async function getCalendarPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.getCalendarPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'getCalendarPermissionsAsync');\n  }\n  return ExpoCalendar.getCalendarPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing user's reminders.\n * @return A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).\n * @platform ios\n */\nexport async function getRemindersPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.getRemindersPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'getRemindersPermissionsAsync');\n  }\n  return ExpoCalendar.getRemindersPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's calendars.\n * @return A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).\n */\nexport async function requestCalendarPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.requestCalendarPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'requestCalendarPermissionsAsync');\n  }\n  return await ExpoCalendar.requestCalendarPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's reminders.\n * @return A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).\n * @platform ios\n */\nexport async function requestRemindersPermissionsAsync(): Promise<PermissionResponse> {\n  if (!ExpoCalendar.requestRemindersPermissionsAsync) {\n    throw new UnavailabilityError('Calendar', 'requestRemindersPermissionsAsync');\n  }\n  return await ExpoCalendar.requestRemindersPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the calendar.\n * This uses both `getCalendarPermissionsAsync` and `requestCalendarPermissionsAsync` to interact\n * with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Calendar.useCalendarPermissions();\n * ```\n */\nexport const useCalendarPermissions = createPermissionHook({\n  getMethod: getCalendarPermissionsAsync,\n  requestMethod: requestCalendarPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access reminders.\n * This uses both `getRemindersPermissionsAsync` and `requestRemindersPermissionsAsync` to interact\n * with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Calendar.useRemindersPermissions();\n * ```\n */\nexport const useRemindersPermissions = createPermissionHook({\n  getMethod: getRemindersPermissionsAsync,\n  requestMethod: requestRemindersPermissionsAsync,\n});\n\nexport const EntityTypes = {\n  EVENT: 'event',\n  REMINDER: 'reminder',\n};\n\nexport const Frequency = {\n  DAILY: 'daily',\n  WEEKLY: 'weekly',\n  MONTHLY: 'monthly',\n  YEARLY: 'yearly',\n};\n\nexport const Availability = {\n  NOT_SUPPORTED: 'notSupported', // iOS\n  BUSY: 'busy',\n  FREE: 'free',\n  TENTATIVE: 'tentative',\n  UNAVAILABLE: 'unavailable', // iOS\n};\n\nexport const CalendarType = {\n  LOCAL: 'local',\n  CALDAV: 'caldav',\n  EXCHANGE: 'exchange',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n  UNKNOWN: 'unknown',\n}; // iOS\n\nexport const EventStatus = {\n  NONE: 'none',\n  CONFIRMED: 'confirmed',\n  TENTATIVE: 'tentative',\n  CANCELED: 'canceled',\n};\n\nexport const SourceType = {\n  LOCAL: 'local',\n  EXCHANGE: 'exchange',\n  CALDAV: 'caldav',\n  MOBILEME: 'mobileme',\n  SUBSCRIBED: 'subscribed',\n  BIRTHDAYS: 'birthdays',\n};\n\nexport const AttendeeRole = {\n  UNKNOWN: 'unknown', // iOS\n  REQUIRED: 'required', // iOS\n  OPTIONAL: 'optional', // iOS\n  CHAIR: 'chair', // iOS\n  NON_PARTICIPANT: 'nonParticipant', // iOS\n  ATTENDEE: 'attendee', // Android\n  ORGANIZER: 'organizer', // Android\n  PERFORMER: 'performer', // Android\n  SPEAKER: 'speaker', // Android\n  NONE: 'none', // Android\n};\n\nexport const AttendeeStatus = {\n  UNKNOWN: 'unknown', // iOS\n  PENDING: 'pending', // iOS\n  ACCEPTED: 'accepted',\n  DECLINED: 'declined',\n  TENTATIVE: 'tentative',\n  DELEGATED: 'delegated', // iOS\n  COMPLETED: 'completed', // iOS\n  IN_PROCESS: 'inProcess', // iOS\n  INVITED: 'invited', // Android\n  NONE: 'none', // Android\n};\n\nexport const AttendeeType = {\n  UNKNOWN: 'unknown', // iOS\n  PERSON: 'person', // iOS\n  ROOM: 'room', // iOS\n  GROUP: 'group', // iOS\n  RESOURCE: 'resource',\n  OPTIONAL: 'optional', // Android\n  REQUIRED: 'required', // Android\n  NONE: 'none', // Android\n};\n\nexport const AlarmMethod = {\n  ALARM: 'alarm',\n  ALERT: 'alert',\n  EMAIL: 'email',\n  SMS: 'sms',\n  DEFAULT: 'default',\n};\n\nexport const EventAccessLevel = {\n  CONFIDENTIAL: 'confidential',\n  PRIVATE: 'private',\n  PUBLIC: 'public',\n  DEFAULT: 'default',\n};\n\nexport const CalendarAccessLevel = {\n  CONTRIBUTOR: 'contributor',\n  EDITOR: 'editor',\n  FREEBUSY: 'freebusy',\n  OVERRIDE: 'override',\n  OWNER: 'owner',\n  READ: 'read',\n  RESPOND: 'respond',\n  ROOT: 'root',\n  NONE: 'none',\n};\n\nexport const ReminderStatus = {\n  COMPLETED: 'completed',\n  INCOMPLETE: 'incomplete',\n};\n\nfunction stringifyIfDate(date: any): any {\n  return date instanceof Date ? date.toISOString() : date;\n}\n\nfunction stringifyDateValues(obj: object): object {\n  return Object.keys(obj).reduce((acc, key) => {\n    const value = obj[key];\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return { ...acc, [key]: value.map(stringifyDateValues) };\n      }\n      return { ...acc, [key]: stringifyDateValues(value) };\n    }\n    acc[key] = stringifyIfDate(value);\n    return acc;\n  }, {});\n}\n"]}