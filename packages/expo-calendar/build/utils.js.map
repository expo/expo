{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,eAAe,CAAiB,IAAc;IAC5D,OAAO,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1D,CAAC;AAMD,MAAM,UAAU,mBAAmB,CAAgC,GAAM;IACvE,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI;QAAE,OAAO,GAAG,CAAC;IACxD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC1C,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,IAAI,KAAK,IAAI,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,CAAC,KAAK,YAAY,IAAI,CAAC,EAAE,CAAC;YAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;gBACzB,OAAO,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE,CAAC;YAC3D,CAAC;YACD,OAAO,EAAE,GAAG,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC;QACvD,CAAC;QACD,GAAG,CAAC,GAAc,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;QAC7C,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAuB,CAAC,CAAC;AAC9B,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,wBAAwB,CACtC,OAAmB;IAEnB,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;QACzC,OAAO,OAAO,CAAC,GAAc,CAAC,KAAK,IAAI,CAAC;IAC1C,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["export function stringifyIfDate<T extends Date>(date: Date | T): string | T {\n  return date instanceof Date ? date.toISOString() : date;\n}\n\ntype StringifyDates<T extends Record<string, any>> = {\n  [K in keyof T]: T[K] extends Date ? string : T[K];\n};\n\nexport function stringifyDateValues<T extends Record<string, any>>(obj: T): StringifyDates<T> {\n  if (typeof obj !== 'object' || obj === null) return obj;\n  return Object.keys(obj).reduce((acc, key) => {\n    const value = obj[key];\n    if (value != null && typeof value === 'object' && !(value instanceof Date)) {\n      if (Array.isArray(value)) {\n        return { ...acc, [key]: value.map(stringifyDateValues) };\n      }\n      return { ...acc, [key]: stringifyDateValues(value) };\n    }\n    acc[key as keyof T] = stringifyIfDate(value);\n    return acc;\n  }, {} as StringifyDates<T>);\n}\n\n/**\n * Extracts keys from a details object where the value is null.\n * Used for identifying which fields should be explicitly set to null in native updates.\n */\nexport function getNullableDetailsFields<T extends Record<string, any>>(\n  details: Partial<T>\n): (keyof T)[] {\n  return Object.keys(details).filter((key) => {\n    return details[key as keyof T] === null;\n  });\n}\n"]}