{"version":3,"file":"ExpoCalendar.types.js","sourceRoot":"","sources":["../../src/next/ExpoCalendar.types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  AttendeeRole,\n  AttendeeStatus,\n  AttendeeType,\n  Source,\n  RecurringEventOptions,\n  CalendarType,\n  Availability,\n  EntityTypes,\n  Alarm,\n  EventStatus,\n  Organizer,\n  ReminderStatus,\n  CalendarDialogParams,\n  DialogEventResult,\n  OpenEventPresentationOptions,\n  PresentationOptions,\n  EventAccessLevel,\n  CalendarAccessLevel,\n  AlarmMethod,\n  OpenEventDialogResult,\n  Attendee,\n} from '../Calendar';\nimport { RecurrenceRule } from './types/RecurrenceRule';\n\nexport type CalendarDialogParamsNext = Omit<CalendarDialogParams, 'id'> & PresentationOptions;\n\nexport type CalendarDialogOpenParamsNext = CalendarDialogParamsNext & OpenEventPresentationOptions;\n\nexport type ModifiableCalendarProperties = Pick<ExpoCalendar, 'color' | 'title'>;\n\nexport type ModifiableEventProperties = Pick<\n  ExpoCalendarEvent,\n  | 'title'\n  | 'location'\n  | 'timeZone'\n  | 'url'\n  | 'notes'\n  | 'alarms'\n  | 'recurrenceRule'\n  | 'availability'\n  | 'startDate'\n  | 'endDate'\n  | 'allDay'\n>;\n\nexport type ModifiableReminderProperties = Pick<\n  ExpoCalendarReminder,\n  | 'title'\n  | 'location'\n  | 'timeZone'\n  | 'url'\n  | 'notes'\n  | 'alarms'\n  | 'recurrenceRule'\n  | 'startDate'\n  | 'dueDate'\n  | 'completed'\n  | 'completionDate'\n>;\n\nexport type ModifiableAttendeeProperties = ExpoCalendarAttendee;\n\nexport declare class ExpoCalendar {\n  constructor(id: string);\n\n  /**\n   * Internal ID that represents this calendar on the device.\n   */\n  id: string;\n  /**\n   * Visible name of the calendar.\n   */\n  title: string;\n  /**\n   * ID of the source to be used for the calendar. Likely the same as the source for any other\n   * locally stored calendars.\n   * @platform ios\n   */\n  sourceId?: string;\n  /**\n   * Object representing the source to be used for the calendar.\n   */\n  source: Source;\n  /**\n   * Type of calendar this object represents.\n   * @platform ios\n   */\n  type?: CalendarType;\n  /**\n   * Color used to display this calendar's events.\n   */\n  color: string;\n  /**\n   * Whether the calendar is used in the Calendar or Reminders OS app.\n   * @platform ios\n   */\n  entityType?: EntityTypes;\n  /**\n   * Boolean value that determines whether this calendar can be modified.\n   */\n  allowsModifications: boolean;\n  /**\n   * Availability types that this calendar supports.\n   */\n  allowedAvailabilities: Availability[];\n  /**\n   * Boolean value indicating whether this is the device's primary calendar.\n   * @platform android\n   */\n  isPrimary?: boolean;\n  /**\n   * Internal system name of the calendar.\n   * @platform android\n   */\n  name?: string | null;\n  /**\n   * Name for the account that owns this calendar.\n   * @platform android\n   */\n  ownerAccount?: string;\n  /**\n   * Time zone for the calendar.\n   * @platform android\n   */\n  timeZone?: string;\n  /**\n   * Alarm methods that this calendar supports.\n   * @platform android\n   */\n  allowedReminders?: AlarmMethod[];\n  /**\n   * Attendee types that this calendar supports.\n   * @platform android\n   */\n  allowedAttendeeTypes?: AttendeeType[];\n  /**\n   * Indicates whether the OS displays events on this calendar.\n   * @platform android\n   */\n  isVisible?: boolean;\n  /**\n   * Indicates whether this calendar is synced and its events stored on the device.\n   * Unexpected behavior may occur if this is not set to `true`.\n   * @platform android\n   */\n  isSynced?: boolean;\n  /**\n   * Level of access that the user has for the calendar.\n   * @platform android\n   */\n  accessLevel?: CalendarAccessLevel;\n\n  /**\n   * Returns a calendar event list for the given date range.\n   */\n  listEvents(startDate: Date | string, endDate: Date | string): Promise<ExpoCalendarEvent[]>;\n\n  /**\n   * Returns a list of reminders matching the provided criteria. If `startDate` and `endDate` are defined,\n   * returns all reminders that overlap at all with the `[startDate, endDate]` interval, that is, all reminders\n   * that end after the `startDate` or begin before the `endDate`.\n   * @param startDate Beginning of time period to search for reminders in, or `null` for all completed reminders before `endDate`.\n   * @param endDate End of time period to search for reminders in, or `null` for all completed reminders after `startDate`.\n   * @param status One of `Calendar.ReminderStatus.COMPLETED` or `Calendar.ReminderStatus.INCOMPLETE`. If not defined, both completed and incomplete reminders will be returned.\n   * @return An array of [`ExpoCalendarReminder`](#expocalendarreminder) objects matching the search criteria.\n   */\n  listReminders(\n    startDate?: Date | string | null,\n    endDate?: Date | string | null,\n    status?: ReminderStatus | null\n  ): Promise<ExpoCalendarReminder[]>;\n\n  /**\n   * Creates a new event in the calendar.\n   * @param eventData A map of details for the event to be created.\n   * @return An instance of the created event.\n   */\n  createEvent(eventData: Omit<Partial<ExpoCalendarEvent>, 'id' | 'organizer'>): ExpoCalendarEvent;\n\n  /**\n   * Creates a new reminder in the calendar.\n   * @param reminderData A map of details for the reminder to be created.\n   * @return An instance of the created reminder.\n   */\n  createReminder(\n    reminderData: Omit<Partial<ExpoCalendarReminder>, 'id' | 'calendarId'>\n  ): ExpoCalendarReminder;\n\n  /**\n   * Updates the provided details of an existing calendar stored on the device. To remove a property,\n   * explicitly set it to `null` in `details`.\n   * @param details A map of properties to be updated.\n   */\n  update(details: Partial<ModifiableCalendarProperties>): void;\n\n  /**\n   * Deletes the calendar.\n   */\n  delete(): void;\n\n  /**\n   * Gets a calendar by its ID. Throws an error if the calendar with the given ID does not exist.\n   * @param calendarId The ID of the calendar to get.\n   * @returns An [`ExpoCalendar`](#expocalendar) object representing the calendar.\n   */\n  static get(calendarId: string): ExpoCalendar;\n}\n\nexport declare class ExpoCalendarEvent {\n  constructor(id: string);\n  /**\n   * Internal ID that represents this event on the device.\n   */\n  id: string;\n  /**\n   * ID of the calendar that contains this event.\n   */\n  calendarId: string;\n  /**\n   * Visible name of the event.\n   */\n  title: string;\n  /**\n   * Location field of the event.\n   */\n  location: string | null;\n  /**\n   * Date when the event record was created.\n   * @platform ios\n   */\n  creationDate?: string | Date;\n  /**\n   * Date when the event record was last modified.\n   * @platform ios\n   */\n  lastModifiedDate?: string | Date;\n  /**\n   * Time zone the event is scheduled in.\n   * When set to `null`, the event is scheduled to the device's time zone.\n   */\n  timeZone: string;\n  /**\n   * Time zone for the end date of the event.\n   * @platform android\n   */\n  endTimeZone?: string;\n  /**\n   * URL for the event.\n   * @platform ios\n   */\n  url?: string;\n  /**\n   * Description or notes saved with the event.\n   */\n  notes: string;\n  /**\n   * Array of Alarm objects which control automated reminders to the user.\n   */\n  alarms: Alarm[];\n  /**\n   * Object representing rules for recurring or repeating events. Set to `null` for one-time events.\n   * It is either `endDate` or `occurrence` based.\n   */\n  recurrenceRule: RecurrenceRule | null;\n  /**\n   * Date object or string representing the time when the event starts.\n   */\n  startDate: string | Date;\n  /**\n   * Date object or string representing the time when the event ends.\n   */\n  endDate: string | Date;\n  /**\n   * For recurring events, the start date for the first (original) instance of the event.\n   * @platform ios\n   */\n  originalStartDate?: string | Date;\n  /**\n   * Boolean value indicating whether or not the event is a detached (modified) instance of a recurring event.\n   * @platform ios\n   */\n  isDetached?: boolean;\n  /**\n   * Whether the event is displayed as an all-day event on the calendar\n   */\n  allDay: boolean;\n  /**\n   * The availability setting for the event.\n   */\n  availability: Availability;\n  /**\n   * Status of the event.\n   */\n  status: EventStatus;\n  /**\n   * Organizer of the event.\n   * This property is only available on events associated with calendars that are managed by a service such as Google Calendar or iCloud.\n   * The organizer is read-only and cannot be set.\n   *\n   * @platform ios\n   */\n  organizer?: Organizer;\n  /**\n   * Email address of the organizer of the event.\n   * @platform android\n   */\n  organizerEmail?: string;\n  /**\n   * User's access level for the event.\n   * @platform android\n   */\n  accessLevel?: EventAccessLevel;\n  /**\n   * Whether invited guests can modify the details of the event.\n   * @platform android\n   */\n  guestsCanModify?: boolean;\n  /**\n   * Whether invited guests can invite other guests.\n   * @platform android\n   */\n  guestsCanInviteOthers?: boolean;\n  /**\n   * Whether invited guests can see other guests.\n   * @platform android\n   */\n  guestsCanSeeGuests?: boolean;\n  /**\n   * For detached (modified) instances of recurring events, the ID of the original recurring event.\n   * @platform android\n   */\n  originalId?: string;\n  /**\n   * For instances of recurring events, volatile ID representing this instance. Not guaranteed to\n   * always refer to the same instance.\n   * @platform android\n   */\n  instanceId?: string;\n\n  /**\n   * Launches the calendar UI provided by the OS to preview an event.\n   * @return A promise which resolves with information about the dialog result.\n   * @header systemProvidedUI\n   */\n  openInCalendarAsync(\n    params?: CalendarDialogOpenParamsNext | null // TODO: Support skipping this param instead of passing null, change needed in the core\n  ): Promise<OpenEventDialogResult>;\n\n  /**\n   * Launches the calendar UI provided by the OS to edit or delete an event.\n   * @return A promise which resolves with information about the dialog result.\n   * @header systemProvidedUI\n   */\n  editInCalendarAsync(\n    params?: CalendarDialogParamsNext | null // TODO: Support skipping this param instead of passing null, change needed in the core\n  ): Promise<DialogEventResult>;\n\n  /**\n   * Returns an event instance for a given event (or instance of a recurring event).\n   * @param recurringEventOptions A map of options for recurring events.\n   * @return An event instance.\n   * @platform ios\n   */\n  getOccurrence(recurringEventOptions?: RecurringEventOptions): ExpoCalendarEvent;\n\n  /**\n   * Gets all attendees for a given event (or instance of a recurring event).\n   * @return An array of [`Attendee`](#attendee) associated with the specified event.\n   */\n  getAttendeesAsync(): Promise<ExpoCalendarAttendee[]>;\n\n  /**\n   * Updates the provided details of an existing calendar stored on the device. To remove a property,\n   * explicitly set it to `null` in `details`.\n   * @param details A map of properties to be updated.\n   * @param nullableFields A list of fields that can be set to `null`.\n   */\n  update(\n    details: Partial<ModifiableEventProperties>,\n    nullableFields?: (keyof ModifiableEventProperties)[]\n  ): void;\n\n  /**\n   * Deletes the event.\n   */\n  delete(): void;\n\n  /**\n   * Creates a new attendee and adds it to this event.\n   */\n  createAttendee(\n    attendee: Pick<NonNullable<Attendee>, 'email'> & Partial<Attendee>\n  ): ExpoCalendarAttendee;\n\n  /**\n   * Gets an event by its ID. Throws an error if the event with the given ID does not exist.\n   * @param eventId The ID of the event to get.\n   * @returns An [`ExpoCalendarEvent`](#expocalendarevent) object representing the event.\n   */\n  static get(eventId: string): ExpoCalendarEvent;\n}\n\nexport declare class ExpoCalendarReminder {\n  /**\n   * Internal ID that represents this reminder on the device.\n   */\n  id?: string;\n  /**\n   * ID of the calendar that contains this reminder.\n   */\n  calendarId?: string;\n  /**\n   * Visible name of the reminder.\n   */\n  title?: string;\n  /**\n   * Location field of the reminder\n   */\n  location?: string;\n  /**\n   * Date when the reminder record was created.\n   */\n  creationDate?: string | Date;\n  /**\n   * Date when the reminder record was last modified.\n   */\n  lastModifiedDate?: string | Date;\n  /**\n   * Time zone the reminder is scheduled in.\n   */\n  timeZone?: string;\n  /**\n   * URL for the reminder.\n   */\n  url?: string;\n  /**\n   * Description or notes saved with the reminder.\n   */\n  notes?: string;\n  /**\n   * Array of Alarm objects which control automated alarms to the user about the task.\n   */\n  alarms?: Alarm[];\n  /**\n   * Object representing rules for recurring or repeated reminders. `null` for one-time tasks.\n   */\n  recurrenceRule?: RecurrenceRule | null;\n  /**\n   * Date object or string representing the start date of the reminder task.\n   */\n  startDate?: string | Date;\n  /**\n   * Date object or string representing the time when the reminder task is due.\n   */\n  dueDate?: string | Date;\n  /**\n   * Whether the reminder is an all-day reminder.\n   */\n  allDay?: boolean;\n  /**\n   * Indicates whether or not the task has been completed.\n   */\n  completed?: boolean;\n  /**\n   * Date object or string representing the date of completion, if `completed` is `true`.\n   * Setting this property of a nonnull `Date` will automatically set the reminder's `completed` value to `true`.\n   */\n  completionDate?: string | Date;\n\n  update(\n    details: Partial<ModifiableReminderProperties>,\n    nullableFields?: (keyof ModifiableReminderProperties)[]\n  ): void;\n\n  /**\n   * Deletes the reminder.\n   */\n  delete(): void;\n\n  /**\n   * Gets a reminder by its ID. Throws an error if the reminder with the given ID does not exist.\n   * @param reminderId The ID of the reminder to get.\n   * @returns An [`ExpoCalendarReminder`](#expocalendarreminder) object representing the reminder.\n   */\n  static get(reminderId: string): ExpoCalendarReminder;\n}\n\n/**\n * Represents a calendar attendee object.\n * @platform android\n */\nexport declare class ExpoCalendarAttendee {\n  /**\n   * Internal ID that represents this attendee on the device.\n   * @platform android\n   */\n  id?: string;\n  /**\n   * Indicates whether or not this attendee is the current OS user.\n   * @platform ios\n   */\n  isCurrentUser?: boolean;\n  /**\n   * Displayed name of the attendee.\n   */\n  name: string;\n  /**\n   * Role of the attendee at the event.\n   */\n  role: AttendeeRole;\n  /**\n   * Status of the attendee in relation to the event.\n   */\n  status: AttendeeStatus;\n  /**\n   * Type of the attendee.\n   */\n  type: AttendeeType;\n  /**\n   * URL for the attendee.\n   * @platform ios\n   */\n  url?: string;\n  /**\n   * Email of the attendee.\n   * @platform android\n   */\n  email: string;\n\n  /**\n   * Updates the attendee.\n   * @platform android\n   */\n  update(\n    details: Partial<ModifiableAttendeeProperties>,\n    nullableFields?: (keyof ModifiableAttendeeProperties)[]\n  ): void;\n\n  /**\n   * Deletes the attendee.\n   * @platform android\n   */\n  delete(): void;\n}\n"]}