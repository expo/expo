{"version":3,"file":"ExpoCalendar.types.js","sourceRoot":"","sources":["../../src/next/ExpoCalendar.types.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  AttendeeRole,\n  AttendeeStatus,\n  AttendeeType,\n  Source,\n  Event,\n  RecurringEventOptions,\n  CalendarType,\n  Availability,\n  EntityTypes,\n  Alarm,\n  RecurrenceRule,\n  EventStatus,\n  Organizer,\n  ReminderStatus,\n  Calendar,\n  Reminder,\n  Attendee,\n  CalendarDialogParams,\n  DialogEventResult,\n  OpenEventPresentationOptions,\n  PresentationOptions,\n} from '../Calendar';\n\ntype CalendarDialogParamsNext = Omit<CalendarDialogParams, 'id'> & PresentationOptions;\n\ntype CalendarDialogOpenParamsNext = CalendarDialogParamsNext & OpenEventPresentationOptions;\n\nexport declare class CustomExpoCalendar {\n  constructor(id: string);\n\n  id: string;\n  title: string;\n  sourceId?: string;\n  source: Source;\n  type?: CalendarType;\n  // TODO: Add color support\n  color: string;\n  entityType?: EntityTypes;\n  allowsModifications: boolean;\n  allowedAvailabilities: Availability[];\n\n  /**\n   * Lists the event ids of the calendar.\n   */\n  listEvents(startDate: Date | string, endDate: Date | string): CustomExpoCalendarEvent[];\n\n  /**\n   * Lists the reminders of the calendar.\n   */\n  listReminders(\n    startDate: Date | string,\n    endDate: Date | string,\n    status?: ReminderStatus | null\n  ): Promise<CustomExpoCalendarReminder[]>;\n\n  createEvent(eventData: Omit<Partial<Event>, 'id' | 'organizer'>): CustomExpoCalendarEvent;\n\n  createReminder(details: Omit<Partial<Reminder>, 'id' | 'calendarId'>): CustomExpoCalendarReminder;\n\n  update(details: Partial<Pick<Calendar, 'title' | 'color'>>): void;\n\n  delete(): void;\n}\n\nexport declare class CustomExpoCalendarEvent {\n  constructor(id: string);\n\n  readonly id: string;\n\n  readonly calendarId: string;\n  readonly title: string;\n  location: string | null;\n  creationDate?: string | Date;\n  lastModifiedDate?: string | Date;\n  timeZone: string;\n  endTimeZone?: string;\n  url?: string;\n  notes: string;\n  alarms: Alarm[];\n  recurrenceRule: RecurrenceRule | null;\n  startDate: string | Date;\n  endDate: string | Date;\n  originalStartDate?: string | Date;\n  isDetached?: boolean;\n  allDay: boolean;\n  availability: Availability;\n  status: EventStatus;\n  organizer?: Organizer;\n  originalId?: string;\n\n  openInCalendarAsync(\n    params: CalendarDialogOpenParamsNext | null // TODO: Support skipping this param instead of passing null, change needed in the core\n  ): void;\n\n  editInCalendarAsync(\n    params: CalendarDialogParamsNext | null // TODO: Support skipping this param instead of passing null, change needed in the core\n  ): Promise<DialogEventResult>;\n\n  getAttendees(recurringEventOptions?: RecurringEventOptions): CustomExpoCalendarAttendee[];\n\n  update(details: Partial<Event>, recurringEventOptions?: RecurringEventOptions): void;\n\n  delete(recurringEventOptions?: RecurringEventOptions): void;\n}\n\nexport declare class CustomExpoCalendarReminder {\n  id?: string;\n  calendarId?: string;\n  title?: string;\n  location?: string;\n  creationDate?: string | Date;\n  lastModifiedDate?: string | Date;\n  timeZone?: string;\n  url?: string;\n  notes?: string;\n  alarms?: Alarm[];\n  recurrenceRule?: RecurrenceRule | null;\n  startDate?: string | Date;\n  dueDate?: string | Date;\n  completed?: boolean;\n  completionDate?: string | Date;\n\n  // TODO\n  update(details: Partial<Reminder>): void;\n\n  delete(): void;\n}\n\nexport declare class CustomExpoCalendarAttendee {\n  id?: string;\n  name: string;\n  isCurrentUser: boolean;\n  role: AttendeeRole;\n  status: AttendeeStatus;\n  type: AttendeeType;\n  url?: string;\n  email?: string;\n\n  // TODO\n  update(details: Partial<Attendee>): void;\n\n  // TODO\n  delete(): void;\n}\n"]}