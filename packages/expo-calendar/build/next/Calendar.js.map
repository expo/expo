{"version":3,"file":"Calendar.js","sourceRoot":"","sources":["../../src/next/Calendar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAE5C,OAAO,EAKL,mBAAmB,EACnB,eAAe,GAChB,MAAM,aAAa,CAAC;AACrB,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,MAAM,OAAO,0BAA2B,SAAQ,YAAY,CAAC,0BAA0B;CAAG;AAE1F,MAAM,OAAO,uBAAwB,SAAQ,YAAY,CAAC,uBAAuB;CAAG;AAEpF,MAAM,OAAO,kBAAmB,SAAQ,YAAY,CAAC,kBAAkB;IAC5D,WAAW,CAClB,OAAuB,EACvB,OAA8B;QAE9B,OAAO,KAAK,CAAC,WAAW,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IAEQ,UAAU,CAAC,SAAe,EAAE,OAAa;QAChD,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;QAC5F,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;QAC3F,CAAC;QACD,OAAO,KAAK,CAAC,UAAU,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;IAChF,CAAC;CACF;AAED,MAAM,UAAU,sBAAsB;IACpC,IAAI,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC;QACvC,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IACpE,CAAC;IACD,OAAO,IAAI,kBAAkB,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC;AACrE,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,IAAkB;IACjD,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC;QAClC,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;IAC/D,CAAC;IACD,OAAO,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;AACpF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,UAA6B,EAAE;IAE/B,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAE,CAAC;QACrC,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;IAClE,CAAC;IACD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACtE,MAAM,UAAU,GAAG,EAAE,GAAG,OAAO,EAAE,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;IACxD,OAAO,YAAY,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;AACrD,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { processColor } from 'react-native';\n\nimport {\n  Calendar,\n  EntityTypes,\n  Event,\n  RecurringEventOptions,\n  stringifyDateValues,\n  stringifyIfDate,\n} from '../Calendar';\nimport ExpoCalendar from './ExpoCalendar';\n\nexport class ExportExpoCalendarAttendee extends ExpoCalendar.CustomExpoCalendarAttendee {}\n\nexport class ExportExpoCalendarEvent extends ExpoCalendar.CustomExpoCalendarEvent {}\n\nexport class ExportExpoCalendar extends ExpoCalendar.CustomExpoCalendar {\n  override createEvent(\n    details: Partial<Event>,\n    options: RecurringEventOptions\n  ): ExportExpoCalendarEvent {\n    return super.createEvent(stringifyDateValues(details), options);\n  }\n\n  override listEvents(startDate: Date, endDate: Date): ExportExpoCalendarEvent[] {\n    if (!startDate) {\n      throw new Error('listEvents must be called with a startDate (date) to search for events');\n    }\n    if (!endDate) {\n      throw new Error('listEvents must be called with an endDate (date) to search for events');\n    }\n    return super.listEvents(stringifyIfDate(startDate), stringifyIfDate(endDate));\n  }\n}\n\nexport function getDefaultCalendarNext(): ExportExpoCalendar {\n  if (!ExpoCalendar.getDefaultCalendarId) {\n    throw new UnavailabilityError('Calendar', 'getDefaultCalendarId');\n  }\n  return new ExportExpoCalendar(ExpoCalendar.getDefaultCalendarId());\n}\n\nexport function getCalendarsNext(type?: EntityTypes): ExportExpoCalendar[] {\n  if (!ExpoCalendar.getCalendarsIds) {\n    throw new UnavailabilityError('Calendar', 'getCalendarsIds');\n  }\n  return ExpoCalendar.getCalendarsIds(type).map((id) => new ExportExpoCalendar(id));\n}\n\nexport async function createCalendarNext(\n  details: Partial<Calendar> = {}\n): Promise<ExportExpoCalendar> {\n  if (!ExpoCalendar.createCalendarNext) {\n    throw new UnavailabilityError('Calendar', 'createCalendarNext');\n  }\n  const color = details.color ? processColor(details.color) : undefined;\n  const newDetails = { ...details, id: undefined, color };\n  return ExpoCalendar.createCalendarNext(newDetails);\n}\n"]}