{"version":3,"file":"Calendar.js","sourceRoot":"","sources":["../../src/next/Calendar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD,OAAO,EAKL,mBAAmB,EACnB,eAAe,GAChB,MAAM,aAAa,CAAC;AACrB,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAE1C,MAAM,OAAO,uBAAwB,SAAQ,YAAY,CAAC,uBAAuB;CAAG;AAEpF,MAAM,OAAO,kBAAmB,SAAQ,YAAY,CAAC,kBAAkB;IAC5D,WAAW,CAClB,OAAuB,EACvB,OAA8B;QAE9B,OAAO,KAAK,CAAC,WAAW,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,CAAC;IAClE,CAAC;IAEQ,UAAU,CAAC,SAAe,EAAE,OAAa;QAChD,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;QAC5F,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,uEAAuE,CAAC,CAAC;QAC3F,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,SAAS,CAAC,EAAE,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;QAC1F,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7D,CAAC;CACF;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE,CACzC,IAAI,kBAAkB,CAAC,YAAY,CAAC,oBAAoB,EAAE,CAAC,CAAC;AAE9D,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,IAAkB,EAAE,EAAE,CACrD,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;AAE7E,MAAM,UAAU,cAAc,CAAC,UAA6B,EAAE;IAC5D,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;QACjC,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;IAC9D,CAAC;IACD,qBAAqB;IACrB,MAAM,IAAI,mBAAmB,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport {\n  Calendar,\n  EntityTypes,\n  Event,\n  RecurringEventOptions,\n  stringifyDateValues,\n  stringifyIfDate,\n} from '../Calendar';\nimport ExpoCalendar from './ExpoCalendar';\n\nexport class ExportExpoCalendarEvent extends ExpoCalendar.CustomExpoCalendarEvent {}\n\nexport class ExportExpoCalendar extends ExpoCalendar.CustomExpoCalendar {\n  override createEvent(\n    details: Partial<Event>,\n    options: RecurringEventOptions\n  ): ExportExpoCalendarEvent {\n    return super.createEvent(stringifyDateValues(details), options);\n  }\n\n  override listEvents(startDate: Date, endDate: Date): ExportExpoCalendarEvent[] {\n    if (!startDate) {\n      throw new Error('listEvents must be called with a startDate (date) to search for events');\n    }\n    if (!endDate) {\n      throw new Error('listEvents must be called with an endDate (date) to search for events');\n    }\n    const result = this.listEventsAsIds(stringifyIfDate(startDate), stringifyIfDate(endDate));\n    return result.map((id) => new ExportExpoCalendarEvent(id));\n  }\n}\n\nexport const getDefaultCalendarNext = () =>\n  new ExportExpoCalendar(ExpoCalendar.getDefaultCalendarId());\n\nexport const getCalendarsNext = (type?: EntityTypes) =>\n  ExpoCalendar.getCalendarsIds(type).map((id) => new ExportExpoCalendar(id));\n\nexport function createCalendar(details: Partial<Calendar> = {}): string {\n  if (!ExpoCalendar.createCalendar) {\n    throw new UnavailabilityError('Calendar', 'createCalendar');\n  }\n  // TODO: Implement it\n  throw new UnavailabilityError('Calendar', 'createCalendar');\n}\n"]}