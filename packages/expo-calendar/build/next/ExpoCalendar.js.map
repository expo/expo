{"version":3,"file":"ExpoCalendar.js","sourceRoot":"","sources":["../../src/next/ExpoCalendar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,MAAM,CAAC;AACzC,OAAO,EAAoC,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAS1F,OAAO,sBAAsB,MAAM,0BAA0B,CAAC;AA6B9D,eAAe,iBAAiB,EAAE;IAChC,CAAC,CAAE,sBAAwD;IAC3D,CAAC,CAAC,mBAAmB,CAAyB,cAAc,CAAC,CAAC","sourcesContent":["import { isRunningInExpoGo } from 'expo';\nimport { NativeModule, PermissionResponse, requireNativeModule } from 'expo-modules-core';\n\nimport {\n  ExpoCalendar,\n  ExpoCalendarAttendee,\n  ExpoCalendarEvent,\n  ExpoCalendarReminder,\n} from './ExpoCalendar.types';\nimport { EntityTypes, Source } from '../Calendar';\nimport ExpoGoCalendarNextStub from './ExpoGoCalendarNextStub';\n\ndeclare class ExpoCalendarNextModule extends NativeModule {\n  ExpoCalendar: typeof ExpoCalendar;\n  ExpoCalendarEvent: typeof ExpoCalendarEvent;\n  ExpoCalendarAttendee: typeof ExpoCalendarAttendee;\n  ExpoCalendarReminder: typeof ExpoCalendarReminder;\n\n  getDefaultCalendar(): ExpoCalendar;\n  getCalendars(type?: EntityTypes): Promise<ExpoCalendar[]>;\n\n  listEvents(\n    calendars: string[],\n    startDate: string | Date,\n    endDate: string | Date\n  ): Promise<ExpoCalendarEvent[]>;\n\n  getCalendarById(calendarId: string): Promise<ExpoCalendar>;\n  getEventById(eventId: string): Promise<ExpoCalendarEvent>;\n  getReminderById(reminderId: string): Promise<ExpoCalendarReminder>;\n\n  requestCalendarPermissions(): Promise<PermissionResponse>;\n  getCalendarPermissions(): Promise<PermissionResponse>;\n  requestRemindersPermissions(): Promise<PermissionResponse>;\n  getRemindersPermissions(): Promise<PermissionResponse>;\n\n  getSourcesSync(): Source[];\n}\n\nexport default isRunningInExpoGo()\n  ? (ExpoGoCalendarNextStub as any as ExpoCalendarNextModule)\n  : requireNativeModule<ExpoCalendarNextModule>('CalendarNext');\n"]}