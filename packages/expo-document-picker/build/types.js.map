{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["// @needsAudit\nexport type DocumentPickerOptions = {\n  /**\n   * The [MIME type(s)](https://en.wikipedia.org/wiki/Media_type) of the documents that are available\n   * to be picked. Is also supports wildcards like `'image/*'` to choose any image. To allow any type\n   * of document you can use `'&ast;/*'`.\n   * @default '&ast;/*'\n   */\n  type?: string | string[];\n  /**\n   * If `true`, the picked file is copied to [`FileSystem.CacheDirectory`](./filesystem#filesystemcachedirectory),\n   * which allows other Expo APIs to read the file immediately. This may impact performance for\n   * large files, so you should consider setting this to `false` if you expect users to pick\n   * particularly large files and your app does not need immediate read access.\n   * @default true\n   */\n  copyToCacheDirectory?: boolean;\n  /**\n   * Allows multiple files to be selected from the system UI.\n   * @default false\n   * @platform web\n   */\n  multiple?: boolean;\n};\n\n// @needsAudit @docsMissing\n/**\n * First object represents the result when the document pick has been cancelled.\n * The second one represents the successful document pick result.\n */\nexport type DocumentResult =\n  | {\n      /**\n       * Field indicating that the document pick has been cancelled.\n       */\n      type: 'cancel';\n    }\n  | {\n      /**\n       * Field indicating that the document pick has been successful.\n       */\n      type: 'success';\n      /**\n       * Document original name.\n       */\n      name: string;\n      /**\n       * Document size in bytes.\n       */\n      size?: number;\n      /**\n       * An URI to the local document file.\n       */\n      uri: string;\n      /**\n       * Document MIME type.\n       */\n      mimeType?: string;\n      /**\n       * Timestamp of last document modification.\n       */\n      lastModified?: number;\n      /**\n       * `File` object for the parity with web File API.\n       * @platform web\n       */\n      file?: File;\n      /**\n       * `FileList` object for the parity with web File API.\n       * @platform web\n       */\n      output?: FileList | null;\n    };\n"]}