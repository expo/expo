{"version":3,"file":"LivePhotoView.js","sourceRoot":"","sources":["../src/LivePhotoView.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAC5F,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAwB,IAAI,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AAQhE,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAOhD,MAAM,UAAU,GAAyD,WAAW,EAAE;IACpF,CAAC,CAAC,wBAAwB,CAAC,eAAe,CAAC;IAC3C,CAAC,CAAC,IAAI,CAAC;AAET,eAAe,KAAK,CAAC,UAAU,CAAC,CAAC,KAAyB,EAAE,GAAG,EAAE,EAAE;IACjE,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAA2B,IAAI,CAAC,CAAC;IAE/D,KAAK,CAAC,mBAAmB,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;QACpC,aAAa,EAAE,CAAC,aAA6B,EAAE,EAAE;YAC/C,IAAI,CAAC,WAAW,EAAE,EAAE;gBAClB,MAAM,IAAI,mBAAmB,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;aACnE;YACD,SAAS,CAAC,OAAO,EAAE,aAAa,CAAC,aAAa,IAAI,MAAM,CAAC,CAAC;QAC5D,CAAC;QACD,YAAY,EAAE,GAAG,EAAE;YACjB,IAAI,CAAC,WAAW,EAAE,EAAE;gBAClB,MAAM,IAAI,mBAAmB,CAAC,iBAAiB,EAAE,cAAc,CAAC,CAAC;aAClE;YACD,SAAS,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC;QACpC,CAAC;KACF,CAAC,CAAC,CAAC;IAEJ,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,UAAU,EAAE;QACjC,OAAO,CACL,CAAC,IAAI,CACH;QAAA,CAAC,IAAI,CAAC,oCAAoC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,IAAI,CAC/D;MAAA,EAAE,IAAI,CAAC,CACR,CAAC;KACH;IAED,OAAO,CACL,CAAC,UAAU,CACT,IAAI,KAAK,CAAC,CACV,GAAG,CAAC,CAAC,SAAS,CAAC,CACf,WAAW,CAAC,CAAC,CAAC,KAAU,EAAE,EAAE;YAC1B,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACzC,CAAC,CAAC,EACF,CACH,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import { Platform, requireNativeViewManager, UnavailabilityError } from 'expo-modules-core';\nimport * as React from 'react';\nimport { NativeSyntheticEvent, Text, View } from 'react-native';\n\nimport {\n  LivePhotoLoadError,\n  LivePhotoViewProps,\n  LivePhotoViewType,\n  PlaybackStyle,\n} from './LivePhoto.types';\nimport { isAvailable } from './LivePhotoModule';\n\ntype NativeLivePhotoViewProps = LivePhotoViewProps & {\n  ref: React.MutableRefObject<LivePhotoViewType | null>;\n  onLoadError: (event: NativeSyntheticEvent<LivePhotoLoadError>) => void;\n};\n\nconst NativeView: React.ComponentType<NativeLivePhotoViewProps> | null = isAvailable()\n  ? requireNativeViewManager('ExpoLivePhoto')\n  : null;\n\nexport default React.forwardRef((props: LivePhotoViewProps, ref) => {\n  const nativeRef = React.useRef<LivePhotoViewType | null>(null);\n\n  React.useImperativeHandle(ref, () => ({\n    startPlayback: (playbackStyle?: PlaybackStyle) => {\n      if (!isAvailable()) {\n        throw new UnavailabilityError('expo-live-photo', 'startPlayback');\n      }\n      nativeRef.current?.startPlayback(playbackStyle ?? 'full');\n    },\n    stopPlayback: () => {\n      if (!isAvailable()) {\n        throw new UnavailabilityError('expo-live-photo', 'stopPlayback');\n      }\n      nativeRef.current?.stopPlayback();\n    },\n  }));\n\n  if (!isAvailable() || !NativeView) {\n    return (\n      <View>\n        <Text>Expo-live-photo is not available on {Platform.OS}</Text>\n      </View>\n    );\n  }\n\n  return (\n    <NativeView\n      {...props}\n      ref={nativeRef}\n      onLoadError={(event: any) => {\n        props.onLoadError?.(event.nativeEvent);\n      }}\n    />\n  );\n});\n"]}