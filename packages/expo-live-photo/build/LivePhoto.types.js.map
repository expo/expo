{"version":3,"file":"LivePhoto.types.js","sourceRoot":"","sources":["../src/LivePhoto.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ViewProps } from 'react-native';\n\nexport interface LivePhotoViewProps extends ViewProps {\n  /**\n   * The LivePhoto asset to display.\n   */\n  source?: LivePhotoAsset | null;\n  /**\n   * Determines whether the LivePhoto should also play audio.\n   *\n   * @default true\n   */\n  isMuted?: boolean;\n\n  /**\n   * Determines how the image should be scaled to fit the container.\n   * - `'contain'` - Scales the image so that its larger dimension fits the target size.\n   * - `'cover'` - Scales the image so that it completely fills the target size.\n   *\n   * @default 'contain'\n   */\n  contentFit?: ContentFit;\n\n  /**\n   * Determines whether the default iOS gesture recognizer should be used.\n   * When true the playback will start if the user presses and holds on the LivePhotoView.\n   *\n   * @default true\n   */\n  useDefaultGestureRecognizer?: boolean;\n\n  /**\n   * Called when the playback starts.\n   */\n  onPlaybackStart?: () => void;\n\n  /**\n   * Called when the playback stops.\n   */\n  onPlaybackStop?: () => void;\n\n  /**\n   * Called when the live photo starts being loaded.\n   */\n  onLoadStart?: () => void;\n\n  /**\n   * Called when the live photo preview photo is loaded.\n   */\n  onPreviewPhotoLoad?: () => void;\n\n  /**\n   * Called when the live photo is loaded and ready to play.\n   */\n  onLoadComplete?: () => void;\n\n  /**\n   * Called when an error occurred while loading.\n   */\n  onLoadError?: (error: LivePhotoLoadError) => void;\n}\n\nexport type LivePhotoViewType = {\n  /**\n   * Start the playback of the video part of the live photo.\n   *\n   * @param playbackStyle - determines what (`PlaybackStyle`)[#playbackstyle] to use. If not provided, the full video will be played.\n   */\n  startPlayback: (playbackStyle?: PlaybackStyle) => void;\n  /**\n   * Stop the playback of the video part of the live photo.\n   */\n  stopPlayback: () => void;\n};\n\n/**\n * A live photo asset.\n *\n * > **Note:** Due to native limitations the photo and video parts of the Live Photo must come from a valid Live Photo file and be unaltered.\n * > The photo is paired with the video by via metadata when taken, if the pairing is broken it's not possible to join them into a live photo again.\n */\nexport type LivePhotoAsset = {\n  /**\n   * The URI of the photo part of the live photo.\n   */\n  photoUri: string;\n  /**\n   * The URI of the video part of the live photo.\n   */\n  pairedVideoUri: string;\n};\n\nexport type LivePhotoLoadError = {\n  /**\n   * Reason for the load failure.\n   */\n  message: string;\n};\n\n/**\n * Determines how the image should be scaled to fit the container.\n *\n * - `'contain'` - Scales the image so that its larger dimension fits the target size\n * - `'cover'` - Scales the image so that it completely fills the target size\n */\nexport type ContentFit = 'contain' | 'cover';\n\n/**\n * Determines what style to use when playing the live photo.\n *\n * - `'hint'` - A short part of the video will be played to indicate that a live photo is being displayed.\n * - `'full'` - The full video part will be played.\n */\nexport type PlaybackStyle = 'hint' | 'full';\n"]}