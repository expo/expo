//  Copyright Â© 2019 650 Industries. All rights reserved.

import Foundation
import EXManifests

public final class BareUpdate: Update {
  /**
   * Method for initializing updates from the bare-bones-styles manifests embedded in application
   * binaries. These manifest objects are generated by the script at
   * expo-updates/scripts/createManifest.js and describe the update embedded by react-native in the
   * application binary. They contain the minimum amount of information needed to reliably identify
   * the update and insert it into SQLite.
   */
  public static func update(
    withBareManifest: BareManifest,
    config: UpdatesConfig,
    database: UpdatesDatabase?
  ) -> BareUpdate {
    let manifest = withBareManifest

    let updateId = manifest.rawId()
    let commitTime = manifest.commitTimeNumber()
    let assets = manifest.assets()

    let uuid = UUID(uuidString: updateId).require("update ID should be a valid UUID")

    var processedAssets: [UpdateAsset] = []

    // use unsanitized id value from manifest
    let bundleKey = String(format: "bundle-%@", updateId)
    let jsBundleAsset = UpdateAsset(key: bundleKey, type: EmbeddedAppLoader.EXUpdatesBareEmbeddedBundleFileType)
    jsBundleAsset.isLaunchAsset = true
    jsBundleAsset.mainBundleFilename = EmbeddedAppLoader.EXUpdatesBareEmbeddedBundleFilename
    processedAssets.append(jsBundleAsset)

    assets?.forEach { assetDict in
      let packagerHash: String = assetDict.requiredValue(forKey: "packagerHash")
      let type: String = assetDict.requiredValue(forKey: "type")
      let mainBundleDir: String? = assetDict.optionalValue(forKey: "nsBundleDir")
      let mainBundleFilename: String = assetDict.requiredValue(forKey: "nsBundleFilename")

      let key = packagerHash
      let asset = UpdateAsset(key: key, type: type)
      asset.mainBundleDir = mainBundleDir
      asset.mainBundleFilename = mainBundleFilename
      processedAssets.append(asset)
    }

    let update = BareUpdate.init(
      manifest: manifest,
      config: config,
      database: database,
      updateId: uuid,
      scopeKey: config.scopeKey,
      commitTime: Date(timeIntervalSince1970: Double(commitTime) / 1000),
      runtimeVersion: config.runtimeVersionRealized,
      keep: true,
      status: UpdateStatus.StatusEmbedded,
      isDevelopmentMode: false,
      assetsFromManifest: processedAssets
    )

    if update.runtimeVersion.contains(",") {
      let exception = NSException(
        name: NSExceptionName.internalInconsistencyException,
        reason: "Should not be initializing BareUpdate in an environment with multiple runtime versions.",
        userInfo: [:]
      )
      exception.raise()
    }

    return update
  }
}
