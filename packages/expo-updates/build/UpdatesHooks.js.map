{"version":3,"file":"UpdatesHooks.js","sourceRoot":"","sources":["../src/UpdatesHooks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAElC,OAAO,KAAK,OAAO,MAAM,WAAW,CAAC;AAGrC;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,QAAsC,EAAE,EAAE;IACxE,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACnD,OAAO,GAAG,EAAE;YACV,YAAY,CAAC,MAAM,EAAE,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC","sourcesContent":["import { useEffect } from 'react';\n\nimport * as Updates from './Updates';\nimport { UpdateEvent } from './Updates.types';\n\n/**\n * React hook to create an [`UpdateEvent`](#updateevent) listener subscription on mount, using\n * [`addListener`](#updatesaddlistenerlistener). It calls `remove()` on the subscription during unmount.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n *\n * @example\n * ```ts\n * function App() {\n *   const eventListener = (event) => {\n *     if (event.type === Updates.UpdateEventType.ERROR) {\n *       // Handle error\n *     } else if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n *       // Handle no update available\n *     } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n *       // Handle update available\n *     }\n *   };\n *   Updates.useUpdateEvents(eventListener);\n *   // React Component...\n * }\n * ```\n */\nexport const useUpdateEvents = (listener: (event: UpdateEvent) => void) => {\n  useEffect(() => {\n    const subscription = Updates.addListener(listener);\n    return () => {\n      subscription.remove();\n    };\n  }, []);\n};\n"]}