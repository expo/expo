{"version":3,"file":"UpdatesEmitter.js","sourceRoot":"","sources":["../src/UpdatesEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,IAAI,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvE,OAAO,EAAE,YAAY,IAAI,cAAc,EAAE,MAAM,WAAW,CAAC;AAE3D,OAAO,iBAAiB,MAAM,eAAe,CAAC;AAC9C,OAAO,EAAE,kCAAkC,EAAE,MAAM,WAAW,CAAC;AAG/D,MAAM,mBAAmB,GAAG,IAAI,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;AACtE,mBAAmB,CAAC,WAAW,CAAC,oCAAoC,EAAE,2BAA2B,CAAC,CAAC;AAEnG,IAAI,eAAe,GAA0B,IAAI,CAAC;AAClD,SAAS,kBAAkB;IACzB,IAAI,CAAC,eAAe,EAAE;QACpB,eAAe,GAAG,IAAI,cAAc,EAAE,CAAC;KACxC;IACD,OAAO,eAAe,CAAC;AACzB,CAAC;AAED,qCAAqC;AACrC,SAAS,2BAA2B,CAAC,MAAW;IAC9C,IAAI,SAAS,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;IAC9B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;QAC9B,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KAChC;IACD,SAAS,CAAC,OAAO,GAAG,kCAAkC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1E,kBAAkB,EAAE,CAAC,IAAI,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC;AACvE,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAC3C,QAAwD,EACxD,EAAE;IACF,OAAO,kBAAkB,EAAE,CAAC,WAAW,CAAC,8BAA8B,EAAE,QAAQ,CAAC,CAAC;AACpF,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,KAAoC,EAAE,EAAE;IAC/E,2BAA2B,CAAC,KAAK,CAAC,CAAC;AACrC,CAAC,CAAC","sourcesContent":["import { EventEmitter as NativeEventEmitter } from 'expo-modules-core';\nimport { EventEmitter as JsEventEmitter } from 'fbemitter';\n\nimport ExpoUpdatesModule from './ExpoUpdates';\nimport { transformNativeStateMachineContext } from './Updates';\nimport type { UpdatesNativeStateChangeEvent } from './Updates.types';\n\nconst _nativeEventEmitter = new NativeEventEmitter(ExpoUpdatesModule);\n_nativeEventEmitter.addListener('Expo.nativeUpdatesStateChangeEvent', _emitNativeStateChangeEvent);\n\nlet _jsEventEmitter: JsEventEmitter | null = null;\nfunction _getJsEventEmitter(): JsEventEmitter {\n  if (!_jsEventEmitter) {\n    _jsEventEmitter = new JsEventEmitter();\n  }\n  return _jsEventEmitter;\n}\n\n// Reemits native state change events\nfunction _emitNativeStateChangeEvent(params: any) {\n  let newParams = { ...params };\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  newParams.context = transformNativeStateMachineContext(newParams.context);\n  _getJsEventEmitter().emit('Expo.updatesStateChangeEvent', newParams);\n}\n\n/**\n * Add listener for state change events\n * @hidden\n */\nexport const addUpdatesStateChangeListener = (\n  listener: (event: UpdatesNativeStateChangeEvent) => void\n) => {\n  return _getJsEventEmitter().addListener('Expo.updatesStateChangeEvent', listener);\n};\n\n/**\n * Allows JS to emit a simulated native state change event (used in unit testing)\n * @hidden\n */\nexport const emitTestStateChangeEvent = (event: UpdatesNativeStateChangeEvent) => {\n  _emitNativeStateChangeEvent(event);\n};\n"]}