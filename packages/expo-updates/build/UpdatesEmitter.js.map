{"version":3,"file":"UpdatesEmitter.js","sourceRoot":"","sources":["../src/UpdatesEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,IAAI,cAAc,EAAE,MAAM,WAAW,CAAC;AAE3D,OAAO,iBAAiB,MAAM,eAAe,CAAC;AAM9C,MAAM,CAAC,IAAI,aAAa,GAAG,kCAAkC,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;AAEhG,iBAAiB,CAAC,WAAW,CAAC,oCAAoC,EAAE,6BAA6B,CAAC,CAAC;AAEnG,MAAM,eAAe,GAAG,IAAI,cAAc,EAAE,CAAC;AAE7C,qCAAqC;AACrC,SAAS,6BAA6B,CAAC,MAAW;IAChD,MAAM,SAAS,GAAG,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,EAAE,CAAC;IAClF,MAAM,kBAAkB,GAAG,kCAAkC,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAEjF,wDAAwD;IACxD,IAAI,kBAAkB,CAAC,cAAc,IAAI,aAAa,CAAC,cAAc,EAAE;QACrE,OAAO;KACR;IAED,SAAS,CAAC,OAAO,GAAG,kBAAkB,CAAC;IACvC,aAAa,GAAG,kBAAkB,CAAC;IACnC,eAAe,CAAC,IAAI,CAAC,8BAA8B,EAAE,SAAS,CAAC,CAAC;AAClE,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAC3C,QAAwD,EACxD,EAAE;IACF,OAAO,eAAe,CAAC,WAAW,CAAC,8BAA8B,EAAE,QAAQ,CAAC,CAAC;AAC/E,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,KAAoC,EAAE,EAAE;IAC/E,6BAA6B,CAAC,KAAK,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAG,EAAE;IACrC,aAAa,GAAG,kCAAkC,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;AACvF,CAAC,CAAC;AAEF,SAAS,kCAAkC,CACzC,qBAKC;IAED,MAAM,aAAa,GAAG,EAAE,GAAG,qBAAqB,EAAE,CAAC;IACnD,IAAI,aAAa,CAAC,oBAAoB,EAAE;QACtC,aAAa,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;QAC9E,OAAO,aAAa,CAAC,oBAAoB,CAAC;KAC3C;IACD,IAAI,aAAa,CAAC,wBAAwB,EAAE;QAC1C,aAAa,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC;QACtF,OAAO,aAAa,CAAC,wBAAwB,CAAC;KAC/C;IACD,IAAI,aAAa,CAAC,4BAA4B,EAAE;QAC9C,aAAa,CAAC,sBAAsB,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,4BAA4B,CAAC,CAAC;QAC5F,OAAO,aAAa,CAAC,4BAA4B,CAAC;KACnD;IACD,IAAI,aAAa,CAAC,cAAc,EAAE;QAChC,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QAClE,OAAO,aAAa,CAAC,cAAc,CAAC;KACrC;IACD,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["import { EventEmitter as JsEventEmitter } from 'fbemitter';\n\nimport ExpoUpdatesModule from './ExpoUpdates';\nimport type {\n  UpdatesNativeStateChangeEvent,\n  UpdatesNativeStateMachineContext,\n} from './Updates.types';\n\nexport let latestContext = transformNativeStateMachineContext(ExpoUpdatesModule.initialContext);\n\nExpoUpdatesModule.addListener('Expo.nativeUpdatesStateChangeEvent', _handleNativeStateChangeEvent);\n\nconst _jsEventEmitter = new JsEventEmitter();\n\n// Reemits native state change events\nfunction _handleNativeStateChangeEvent(params: any) {\n  const newParams = typeof params === 'string' ? JSON.parse(params) : { ...params };\n  const transformedContext = transformNativeStateMachineContext(newParams.context);\n\n  // only process state change events if they are in order\n  if (transformedContext.sequenceNumber <= latestContext.sequenceNumber) {\n    return;\n  }\n\n  newParams.context = transformedContext;\n  latestContext = transformedContext;\n  _jsEventEmitter.emit('Expo.updatesStateChangeEvent', newParams);\n}\n\n/**\n * Add listener for state change events\n * @hidden\n */\nexport const addUpdatesStateChangeListener = (\n  listener: (event: UpdatesNativeStateChangeEvent) => void\n) => {\n  return _jsEventEmitter.addListener('Expo.updatesStateChangeEvent', listener);\n};\n\n/**\n * Allows JS test to emit a simulated native state change event (used in unit testing)\n * @hidden\n */\nexport const emitTestStateChangeEvent = (event: UpdatesNativeStateChangeEvent) => {\n  _handleNativeStateChangeEvent(event);\n};\n\n/**\n * Allows JS test to reset latest context (and sequence number)\n * @hidden\n */\nexport const resetLatestContext = () => {\n  latestContext = transformNativeStateMachineContext(ExpoUpdatesModule.initialContext);\n};\n\nfunction transformNativeStateMachineContext(\n  originalNativeContext: UpdatesNativeStateMachineContext & {\n    latestManifestString?: string;\n    downloadedManifestString?: string;\n    lastCheckForUpdateTimeString?: string;\n    rollbackString?: string;\n  }\n): UpdatesNativeStateMachineContext {\n  const nativeContext = { ...originalNativeContext };\n  if (nativeContext.latestManifestString) {\n    nativeContext.latestManifest = JSON.parse(nativeContext.latestManifestString);\n    delete nativeContext.latestManifestString;\n  }\n  if (nativeContext.downloadedManifestString) {\n    nativeContext.downloadedManifest = JSON.parse(nativeContext.downloadedManifestString);\n    delete nativeContext.downloadedManifestString;\n  }\n  if (nativeContext.lastCheckForUpdateTimeString) {\n    nativeContext.lastCheckForUpdateTime = new Date(nativeContext.lastCheckForUpdateTimeString);\n    delete nativeContext.lastCheckForUpdateTimeString;\n  }\n  if (nativeContext.rollbackString) {\n    nativeContext.rollback = JSON.parse(nativeContext.rollbackString);\n    delete nativeContext.rollbackString;\n  }\n  return nativeContext;\n}\n"]}