{"version":3,"file":"UpdatesEmitter.js","sourceRoot":"","sources":["../src/UpdatesEmitter.ts"],"names":[],"mappings":"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","sourcesContent":["import { DeviceEventEmitter } from 'expo-modules-core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport type { UpdateEvent, UpdatesNativeStateChangeEvent } from './Updates.types';\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Expo.nativeUpdatesEvent', _emitEvent);\n    DeviceEventEmitter.addListener(\n      'Expo.nativeUpdatesStateChangeEvent',\n      _emitNativeStateChangeEvent\n    );\n  }\n  return _emitter;\n}\n\n// Reemits native UpdateEvents sent during the startup update check\nfunction _emitEvent(params): void {\n  let newParams = { ...params };\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Expo.updatesEvent', newParams);\n}\n\n// Reemits native state change events\nfunction _emitNativeStateChangeEvent(params: any) {\n  let newParams = { ...params };\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.context.latestManifestString) {\n    newParams.context.latestManifest = JSON.parse(newParams.context.latestManifestString);\n    delete newParams.context.latestManifestString;\n  }\n  if (newParams.context.downloadedManifestString) {\n    newParams.context.downloadedManifest = JSON.parse(newParams.context.downloadedManifestString);\n    delete newParams.context.downloadedManifestString;\n  }\n  if (newParams.context.lastCheckForUpdateTimeString) {\n    newParams.context.lastCheckForUpdateTime = new Date(\n      newParams.context.lastCheckForUpdateTimeString\n    );\n    delete newParams.context.lastCheckForUpdateTimeString;\n  }\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter?.emit('Expo.updatesStateChangeEvent', newParams);\n}\n\n/**\n * Adds a callback to be invoked when updates-related events occur (such as upon the initial app\n * load) due to auto-update settings chosen at build-time. See also the\n * [`useUpdateEvents`](#useupdateeventslistener) React hook.\n *\n * @param listener A function that will be invoked with an [`UpdateEvent`](#updateevent) instance\n * and should not return any value.\n * @return An `EventSubscription` object on which you can call `remove()` to unsubscribe the\n * listener.\n */\nexport function addListener(listener: (event: UpdateEvent) => void): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesEvent', listener);\n}\n\n// Internal methods\n\n/**\n * @hidden\n */\nexport const addUpdatesStateChangeListener = (\n  listener: (event: UpdatesNativeStateChangeEvent) => void\n) => {\n  // Add listener for state change events\n  const emitter = _getEmitter();\n  return emitter.addListener('Expo.updatesStateChangeEvent', listener);\n};\n\n/**\n * @hidden\n */\nexport const emitStateChangeEvent = (event: UpdatesNativeStateChangeEvent) => {\n  // Allows JS to emit a state change event (used in testing)\n  _emitNativeStateChangeEvent(event);\n};\n"]}