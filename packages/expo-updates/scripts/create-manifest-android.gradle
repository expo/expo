// Gradle script for downloading assets that make up an OTA update and bundling them into the APK

import org.apache.tools.ant.taskdefs.condition.Os
import org.gradle.util.GradleVersion

def expoUpdatesDir = ["node", "-e", "console.log(require('path').dirname(require.resolve('expo-updates/package.json')));"].execute([], projectDir).text.trim()

def ex_updates_native_debug = System.getenv("EX_UPDATES_NATIVE_DEBUG") == "1"

// From a library project role to reference app project settings such as `targetName.toLowerCase().contains("release")`,
// we extract the `appProject` from all projects here.
// things like `config`, `buildDir`, and `applicationVariants`, we will reference from appProject.
def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }
if (!appProject) {
  // For instrumented test, the appProject will be null.
  return;
}
if (!android.hasProperty('libraryVariants')) {
  // For traditional application level integration, will be no-op to prevent duplicated app.manifest creation.
  return;
}
if (findProperty('expo.updates.createManifest') == 'false') {
  return;
}

def setupClosure = {
  def config = appProject.hasProperty("react") ? appProject.react : [];
  def nodeExecutableAndArgs = config.nodeExecutableAndArgs ?: ["node"]
  def entryFile = config.entryFile ?: "index.js"
  def assetsFile = entryFile.take(entryFile.lastIndexOf('.')) + ".assets"

  def projectRoot = file("${rootProject.projectDir}")
  def inputExcludes = ["android/**", "ios/**"]

  appProject.android.applicationVariants.each { variant ->
    def targetName = variant.name.capitalize()
    def targetPath = variant.dirName
    def assetsDir = file("${appProject.buildDir}/generated/assets/expo-updates/${targetPath}")

    def currentBundleTask = tasks.create(
        name: "create${targetName}ExpoManifest",
        type: Exec) {
      description = "expo-updates: Create manifest for ${targetName}."

      doFirst {
        assetsDir.deleteDir()
        assetsDir.mkdirs()
      }

      // Set up inputs and outputs so gradle can cache the result
      inputs.files fileTree(dir: projectRoot, excludes: inputExcludes)
      outputs.dir assetsDir

      // Set up the call to exp
      workingDir projectRoot

      if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        // in cmd, & must be escaped with ^
        assetsFile = assetsFile.replace('&', '^&');
        commandLine("cmd", "/c", *nodeExecutableAndArgs, "$expoUpdatesDir/scripts/createManifest.js", "android", projectRoot, assetsDir, entryFile)
      } else {
        commandLine(*nodeExecutableAndArgs, "$expoUpdatesDir/scripts/createManifest.js", "android", projectRoot, assetsDir, entryFile)
      }

      enabled config."bundleIn${targetName}" || targetName.toLowerCase().contains("release") || ex_updates_native_debug
    }

    def currentAssetsCopyTask = tasks.create(
        name: "copy${targetName}ExpoManifest",
        type: Copy) {
      description = "expo-updates: Copy manifest into ${targetName}."

      into ("${appProject.buildDir}/intermediates")
      into ("assets/${targetPath}") {
        from(assetsDir)
      }

      // Workaround for Android Gradle Plugin 3.2+ asset directory
      into ("merged_assets/${variant.name}/merge${targetName}Assets/out") {
        from(assetsDir)
      }

      // Workaround for Android Gradle Plugin 3.4+ asset directory
      into ("merged_assets/${variant.name}/out") {
        from(assetsDir)
      }

      // Workaround for Android Gradle Plugin 7.1+ asset directory
      into ("assets/${variant.name}/merge${targetName}Assets") {
        from(assetsDir)
      }

      // mergeAssets must run first, as it clears the intermediates directory
      dependsOn(variant.mergeAssetsProvider.get())
      dependsOn(currentBundleTask)

      enabled(currentBundleTask.enabled)
    }

    appProject.tasks.findByName("merge${targetName}Resources")?.dependsOn(currentAssetsCopyTask)
    appProject.tasks.findByName("compress${targetName}Assets")?.dependsOn(currentAssetsCopyTask)
  }
}

// The `appProject` may either be evaluated or not. We should check project state and setup for both cases.
//   - If project is evaluated, we just call setupClosure and get the correct applicationVariants.
//   - If project is not evaluated yet, we should just wait for afterEvaluate().
// The `hasCompleted()` is actually gradle internal method as ProjectState does not provide enough state information.
// https://github.com/gradle/gradle/blob/958d5b0f8a/subprojects/core/src/main/java/org/gradle/api/internal/project/ProjectStateInternal.java#L64-L66
if (appProject.state.hasCompleted()) {
  setupClosure.call()
} else {
  appProject.afterEvaluate {
    setupClosure.call()
  }
}
