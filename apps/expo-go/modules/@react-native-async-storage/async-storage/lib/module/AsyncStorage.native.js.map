{"version":3,"names":["checkValidArgs","checkValidInput","convertError","convertErrors","RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","multiGet","errors","result","_result$","value","errs","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","errorList","i","_request$callback2","_request$resolve","request","_request$callback","_request$reject","call","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs"],"sources":["AsyncStorage.native.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  checkValidArgs,\n  checkValidInput,\n  convertError,\n  convertErrors,\n} from \"./helpers\";\nimport RCTAsyncStorage from \"./RCTAsyncStorage\";\nimport type {\n  AsyncStorageStatic,\n  ErrorLike,\n  KeyValuePair,\n  MultiRequest,\n} from \"./types\";\n\nif (!RCTAsyncStorage) {\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\n\nTo fix this issue try these steps:\n\n  • Uninstall, rebuild and restart the app.\n\n  • Run the packager with \\`--reset-cache\\` flag.\n\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory, then rebuild and re-run the app.\n\n  • Make sure your project's \\`package.json\\` depends on \\`@react-native-async-storage/async-storage\\`, even if you only depend on it indirectly through other dependencies. CLI only autolinks native modules found in your \\`package.json\\`.\n\n  • If this happens while testing with Jest, check out how to integrate AsyncStorage here: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\n\nIf none of these fix the issue, please open an issue on the GitHub repository: https://github.com/react-native-async-storage/async-storage/issues\n`);\n}\n\n/**\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\n * storage system that is global to the app. It should be used instead of\n * LocalStorage.\n *\n * See https://react-native-async-storage.github.io/async-storage/docs/api\n */\nconst AsyncStorage = ((): AsyncStorageStatic => {\n  let _getRequests: MultiRequest[] = [];\n  let _getKeys: string[] = [];\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\n\n  return {\n    /**\n     * Fetches an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\n     */\n    getItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiGet(\n          [key],\n          (errors?: ErrorLike[], result?: string[][]) => {\n            // Unpack result to get value from [[key,value]]\n            const value = result?.[0]?.[1] ? result[0][1] : null;\n            const errs = convertErrors(errors);\n            callback?.(errs?.[0], value);\n            if (errs) {\n              reject(errs[0]);\n            } else {\n              resolve(value);\n            }\n          }\n        );\n      });\n    },\n\n    /**\n     * Sets the value for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\n     */\n    setItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Removes an item for a `key` and invokes a callback upon completion.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\n     */\n    removeItem: (key, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key);\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Merges an existing `key` value with an input value, assuming both values\n     * are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\n     */\n    mergeItem: (key, value, callback) => {\n      return new Promise((resolve, reject) => {\n        checkValidInput(key, value);\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\n          const errs = convertErrors(errors);\n          callback?.(errs?.[0]);\n          if (errs) {\n            reject(errs[0]);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\n     * your app's keys.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\n     */\n    clear: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\n          const err = convertError(error);\n          callback?.(err);\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\n     */\n    getAllKeys: (callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\n          const err = convertError(error);\n          callback?.(err, keys);\n          if (keys) {\n            resolve(keys);\n          } else {\n            reject(err);\n          }\n        });\n      });\n    },\n\n    /**\n     * The following batched functions are useful for executing a lot of\n     * operations at once, allowing for native optimizations and provide the\n     * convenience of a single callback after all operations are complete.\n     *\n     * These functions return arrays of errors, potentially one for every key.\n     * For key-specific errors, the Error object will have a key property to\n     * indicate which key caused the error.\n     */\n\n    /**\n     * Flushes any pending requests using a single batch call to get the data.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\n     * */\n    flushGetRequests: () => {\n      const getRequests = _getRequests;\n      const getKeys = _getKeys;\n\n      _getRequests = [];\n      _getKeys = [];\n\n      RCTAsyncStorage.multiGet(\n        getKeys,\n        (errors?: ErrorLike[], result?: string[][]) => {\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\n          // it's much, much faster in practice for the data sets we deal with (we avoid\n          // allocating result pair arrays). This was heavily benchmarked.\n          //\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\n          const map: Record<string, string> = {};\n          result?.forEach(([key, value]) => {\n            map[key] = value;\n            return value;\n          });\n          const reqLength = getRequests.length;\n\n          /**\n           * As mentioned few lines above, this method could be called with the array of potential error,\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\n           * would simply return `undefined` as their result, rendering false negatives.\n           *\n           * In order to avoid this situation, in case of any call failing,\n           * the rest of them will be rejected as well (with the same error).\n           */\n          const errorList = convertErrors(errors);\n          const error = errorList?.length ? errorList[0] : null;\n\n          for (let i = 0; i < reqLength; i++) {\n            const request = getRequests[i];\n            if (error) {\n              request.callback?.(errorList);\n              request.reject?.(error);\n              continue;\n            }\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\n              key,\n              map[key],\n            ]);\n            request.callback?.(null, requestResult);\n            request.resolve?.(requestResult);\n          }\n        }\n      );\n    },\n\n    /**\n     * This allows you to batch the fetching of items given an array of `key`\n     * inputs. Your callback will be invoked with an array of corresponding\n     * key-value pairs found.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\n     */\n    multiGet: (keys, callback) => {\n      if (!_immediate) {\n        _immediate = setImmediate(() => {\n          _immediate = null;\n          AsyncStorage.flushGetRequests();\n        });\n      }\n\n      const getRequest: MultiRequest = {\n        keys: keys,\n        callback: callback,\n        // do we need this?\n        keyIndex: _getKeys.length,\n      };\n\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\n        (resolve, reject) => {\n          getRequest.resolve = resolve;\n          getRequest.reject = reject;\n        }\n      );\n\n      _getRequests.push(getRequest);\n      // avoid fetching duplicates\n      keys.forEach((key) => {\n        if (_getKeys.indexOf(key) === -1) {\n          _getKeys.push(key);\n        }\n      });\n\n      return promiseResult;\n    },\n\n    /**\n     * Use this as a batch operation for storing multiple key-value pairs. When\n     * the operation completes you'll get a single callback with any errors.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\n     */\n    multiSet: (keyValuePairs, callback) => {\n      checkValidArgs(keyValuePairs, callback);\n      return new Promise((resolve, reject) => {\n        keyValuePairs.forEach(([key, value]) => {\n          checkValidInput(key, value);\n        });\n\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Call this to batch the deletion of all keys in the `keys` array.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\n     */\n    multiRemove: (keys, callback) => {\n      return new Promise((resolve, reject) => {\n        keys.forEach((key) => checkValidInput(key));\n\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n\n    /**\n     * Batch operation to merge in existing and new values for a given set of\n     * keys. This assumes that the values are stringified JSON.\n     *\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\n     */\n    multiMerge: (keyValuePairs, callback) => {\n      return new Promise((resolve, reject) => {\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\n          const error = convertErrors(errors);\n          callback?.(error);\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      });\n    },\n  };\n})();\n\nexport default AsyncStorage;\n"],"mappings":"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"}