pluginManagement {
  includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')"].execute(null, rootDir).text.trim()).getParentFile().toString())
}
plugins { id("com.facebook.react.settings") }

def useUnstableCoreAutolinking = System.getenv('EXPO_UNSTABLE_CORE_AUTOLINKING')
useUnstableCoreAutolinking = '1'

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (useUnstableCoreAutolinking == '1') {
    println('\u001B[32mUsing expo-modules-autolinking as core autolinking source\u001B[0m')
    def command = [
      'node',
      '--no-warnings',
      '--eval',
      'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
      'react-native-config',
      '--json',
      '--platform',
      'android'
    ].toList()
    ex.autolinkLibrariesFromCommand(command)
  } else {
    ex.autolinkLibrariesFromCommand()
  }
}

rootProject.name = 'BareExpo'

def reactNativePackage = providers.exec {
  workingDir(rootDir)
  commandLine("node", "--print", "require.resolve('react-native/package.json')")
}.standardOutput.asText.get().trim()

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(reactNativePackage, "../gradle/libs.versions.toml")))
    }
  }
}

include(":expo-modules-test-core")
project(":expo-modules-test-core").projectDir = new File("../../../packages/expo-modules-test-core/android")

// Include Expo modules
apply from: new File(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('expo/package.json')")
    }.standardOutput.asText.get().trim(),
    "../scripts/autolinking.gradle"
)
useExpoModules()

include ':app'
includeBuild(
    file(
        providers.exec {
          workingDir(rootDir)
          commandLine("node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')")
        }.standardOutput.asText.get().trim()
    ).getParentFile()
)
