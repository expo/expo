pluginManagement {
  includeBuild(new File(["node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')"].execute(null, rootDir).text.trim()).getParentFile().toString())

  def expoPluginsPath =  new File(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('expo-modules-autolinking/package.json', { paths: [require.resolve('expo/package.json')] })")
    }.standardOutput.asText.get().trim(),
    "../android/expo-gradle-plugin"
  ).absolutePath
  includeBuild(expoPluginsPath)
}
plugins {
  id("com.facebook.react.settings")
  id("expo-autolinking-settings")
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  ex.autolinkLibrariesFromCommand(expoAutolinking.rnConfigCommand)
}
expoAutolinking.useExpoModules()

rootProject.name = 'BareExpo'

def reactNativePackage = providers.exec {
  workingDir(rootDir)
  commandLine("node", "--print", "require.resolve('react-native/package.json')")
}.standardOutput.asText.get().trim()

dependencyResolutionManagement {
  versionCatalogs {
    reactAndroidLibs {
      from(files(new File(reactNativePackage, "../gradle/libs.versions.toml")))
    }
  }
}

include(":expo-modules-test-core")
project(":expo-modules-test-core").projectDir = new File("../../../packages/expo-modules-test-core/android")

include ':app'
includeBuild(
  file(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('@react-native/gradle-plugin/package.json')")
    }.standardOutput.asText.get().trim()
  ).getParentFile()
)
