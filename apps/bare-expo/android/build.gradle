import groovy.json.JsonSlurper

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = '33.0.0'
        gradlePluginVersion = '7.4.2'
        minSdkVersion = 23
        compileSdkVersion = 34
        targetSdkVersion = 34
        // Some dependencies still expect supportLibVersion to be defined
        supportLibVersion = "29.0.0"
        kotlinVersion = '1.8.10'
        // for expo-dev-client
        expoUpdatesVersion = null

        // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.
        ndkVersion = "23.1.7779620"
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:$gradlePluginVersion")

        classpath("com.facebook.react:react-native-gradle-plugin")

        classpath 'com.google.gms:google-services:4.3.5'  // Google Services plugin

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
  id "com.diffplug.spotless" version "5.14.1"
}

def packageJsonFile = new File(rootProject.projectDir, '../package.json')
def packageJson = new JsonSlurper().parseText(packageJsonFile.text)

// [Custom]
ext {
    reactNativeVersion = packageJson.dependencies["react-native"]
}

allprojects {
    // [Custom]
    configurations.all {
        if (findProperty("buildReactNativeFromSource") == "true") {
            resolutionStrategy.dependencySubstitution {
                substitute(module("com.facebook.react:react-native"))
                    .using(project(":ReactAndroid"))
                    .because("Building React Native from source")
                substitute(module("com.facebook.react:react-android"))
                    .using(project(":ReactAndroid"))
                    .because("Building React Native from source")
                substitute(module("com.facebook.react:hermes-engine"))
                    .using(project(":ReactAndroid:hermes-engine"))
                    .because("Building Hermes from source")
                substitute(module("com.facebook.react:hermes-android"))
                    .using(project(":ReactAndroid:hermes-engine"))
                    .because("Building Hermes from source")
            }
        }
    }

    repositories {
        mavenLocal()
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            url(new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), "../android"))
        }
        maven {
            // Android JSC is installed from npm
            url(new File(["node", "--print", "require.resolve('jsc-android/package.json')"].execute(null, rootDir).text.trim(), "../dist"))
        }
        maven {
            // expo-camera bundles a custom com.google.android:cameraview
            url "$rootDir/../node_modules/expo-camera/android/maven"
        }
        maven {
          url(new File(["node", "--print", "require.resolve('expo-camera/package.json')"].execute(null, rootDir).text.trim(), "../android/maven"))
        }
        maven {
            url(new File(["node", "--print", "require.resolve('detox/package.json')"].execute(null, rootDir).text.trim(), "../Detox-android"))
        }

        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

subprojects {
  plugins.apply("com.diffplug.spotless")
  spotless {
    kotlin {
      target '**/*.kt'
      ktlint("0.41.0").userData([
        "disabled_rules"           : "no-wildcard-imports,import-ordering",
        "charset"                  : "utf-8",
        "end_of_line"              : "lf",
        "indent_size"              : "2",
        "indent_style"             : "space",
        "insert_final_newline"     : "true",
        "tab_width"                : "2",
        "trim_trailing_whitespace" : "true"
      ])
      trimTrailingWhitespace()
      indentWithSpaces()
      endWithNewline()
    }
  }
}
