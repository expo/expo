// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DatePickerIOS should render DatePicker with the datetime mode if no mode is passed inside the props: should deep render when mocked (please verify output manually) 1`] = `
<View>
  <RCTDatePicker
    date={1555883690956}
    mode="datetime"
    onChange={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "height": 216,
      }
    }
  />
</View>
`;

exports[`DatePickerIOS should render DatePicker with the datetime mode if no mode is passed inside the props: should deep render when not mocked (please verify output manually) 1`] = `
<View>
  <RCTDatePicker
    date={1555883690956}
    mode="datetime"
    onChange={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "height": 216,
      }
    }
  />
</View>
`;

exports[`DatePickerIOS should render DatePicker with the datetime mode if no mode is passed inside the props: should shallow render as <DatePickerIOS /> when mocked 1`] = `
<DatePickerIOS
  date={2019-04-21T21:54:50.956Z}
  onDateChange={[MockFunction]}
/>
`;

exports[`DatePickerIOS should render DatePicker with the datetime mode if no mode is passed inside the props: should shallow render as <DatePickerIOS /> when not mocked 1`] = `
<DatePickerIOS
  date={2019-04-21T21:54:50.956Z}
  onDateChange={[MockFunction]}
/>
`;

exports[`DatePickerIOS should render as expected: should deep render when mocked (please verify output manually) 1`] = `
<View>
  <RCTDatePicker
    date={1555883690956}
    mode="date"
    onChange={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "height": 216,
      }
    }
  />
</View>
`;

exports[`DatePickerIOS should render as expected: should deep render when not mocked (please verify output manually) 1`] = `
<View>
  <RCTDatePicker
    date={1555883690956}
    mode="date"
    onChange={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "height": 216,
      }
    }
  />
</View>
`;

exports[`DatePickerIOS should render as expected: should shallow render as <DatePickerIOS /> when mocked 1`] = `
<DatePickerIOS
  date={2019-04-21T21:54:50.956Z}
  mode="date"
  onDateChange={[MockFunction]}
/>
`;

exports[`DatePickerIOS should render as expected: should shallow render as <DatePickerIOS /> when not mocked 1`] = `
<DatePickerIOS
  date={2019-04-21T21:54:50.956Z}
  mode="date"
  onDateChange={[MockFunction]}
/>
`;
