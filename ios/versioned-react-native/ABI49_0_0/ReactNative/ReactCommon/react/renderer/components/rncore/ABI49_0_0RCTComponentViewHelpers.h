/**
* This code was generated by [ABI49_0_0React-native-codegen](https://www.npmjs.com/package/ABI49_0_0React-native-codegen).
*
* Do not edit this file as changes may cause incorrect behavior and will be lost
* once the code is regenerated.
*
* @generated by codegen project: GenerateComponentHObjCpp.js
*/

#import <Foundation/Foundation.h>
#import <ABI49_0_0React/ABI49_0_0RCTDefines.h>
#import <ABI49_0_0React/ABI49_0_0RCTLog.h>

NS_ASSUME_NONNULL_BEGIN

@protocol ABI49_0_0RCTSafeAreaViewViewProtocol <NSObject>

@end

@protocol ABI49_0_0RCTAndroidHorizontalScrollContentViewViewProtocol <NSObject>

@end

@protocol ABI49_0_0RCTAndroidProgressBarViewProtocol <NSObject>

@end

@protocol ABI49_0_0RCTAndroidSwipeRefreshLayoutViewProtocol <NSObject>
- (void)setNativeRefreshing:(BOOL)value;
@end

ABI49_0_0RCT_EXTERN inline void ABI49_0_0RCTAndroidSwipeRefreshLayoutHandleCommand(
  id<ABI49_0_0RCTAndroidSwipeRefreshLayoutViewProtocol> componentView,
  NSString const *commandName,
  NSArray const *args)
{
  if ([commandName isEqualToString:@"setNativeRefreshing"]) {
#if ABI49_0_0RCT_DEBUG
  if ([args count] != 1) {
    ABI49_0_0RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"AndroidSwipeRefreshLayout", commandName, (int)[args count], 1);
    return;
  }
#endif

  NSObject *arg0 = args[0];
#if ABI49_0_0RCT_DEBUG
  if (!ABI49_0_0RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @"boolean", @"AndroidSwipeRefreshLayout", commandName, @"1st")) {
    return;
  }
#endif
  BOOL value = [(NSNumber *)arg0 boolValue];

  [componentView setNativeRefreshing:value];
  return;
}

#if ABI49_0_0RCT_DEBUG
  ABI49_0_0RCTLogError(@"%@ received command %@, which is not a supported command.", @"AndroidSwipeRefreshLayout", commandName);
#endif
}

@protocol ABI49_0_0RCTPullToRefreshViewViewProtocol <NSObject>
- (void)setNativeRefreshing:(BOOL)refreshing;
@end

ABI49_0_0RCT_EXTERN inline void ABI49_0_0RCTPullToRefreshViewHandleCommand(
  id<ABI49_0_0RCTPullToRefreshViewViewProtocol> componentView,
  NSString const *commandName,
  NSArray const *args)
{
  if ([commandName isEqualToString:@"setNativeRefreshing"]) {
#if ABI49_0_0RCT_DEBUG
  if ([args count] != 1) {
    ABI49_0_0RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"PullToRefreshView", commandName, (int)[args count], 1);
    return;
  }
#endif

  NSObject *arg0 = args[0];
#if ABI49_0_0RCT_DEBUG
  if (!ABI49_0_0RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @"boolean", @"PullToRefreshView", commandName, @"1st")) {
    return;
  }
#endif
  BOOL refreshing = [(NSNumber *)arg0 boolValue];

  [componentView setNativeRefreshing:refreshing];
  return;
}

#if ABI49_0_0RCT_DEBUG
  ABI49_0_0RCTLogError(@"%@ received command %@, which is not a supported command.", @"PullToRefreshView", commandName);
#endif
}

@protocol ABI49_0_0RCTInputAccessoryViewProtocol <NSObject>

@end

@protocol ABI49_0_0RCTAndroidDrawerLayoutViewProtocol <NSObject>
- (void)openDrawer;
- (void)closeDrawer;
@end

ABI49_0_0RCT_EXTERN inline void ABI49_0_0RCTAndroidDrawerLayoutHandleCommand(
  id<ABI49_0_0RCTAndroidDrawerLayoutViewProtocol> componentView,
  NSString const *commandName,
  NSArray const *args)
{
  if ([commandName isEqualToString:@"openDrawer"]) {
#if ABI49_0_0RCT_DEBUG
  if ([args count] != 0) {
    ABI49_0_0RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"AndroidDrawerLayout", commandName, (int)[args count], 0);
    return;
  }
#endif

  

  [componentView openDrawer];
  return;
}

if ([commandName isEqualToString:@"closeDrawer"]) {
#if ABI49_0_0RCT_DEBUG
  if ([args count] != 0) {
    ABI49_0_0RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"AndroidDrawerLayout", commandName, (int)[args count], 0);
    return;
  }
#endif

  

  [componentView closeDrawer];
  return;
}

#if ABI49_0_0RCT_DEBUG
  ABI49_0_0RCTLogError(@"%@ received command %@, which is not a supported command.", @"AndroidDrawerLayout", commandName);
#endif
}

@protocol ABI49_0_0RCTActivityIndicatorViewViewProtocol <NSObject>

@end

@protocol ABI49_0_0RCTUnimplementedNativeViewViewProtocol <NSObject>

@end

@protocol ABI49_0_0RCTSwitchViewProtocol <NSObject>
- (void)setValue:(BOOL)value;
@end

ABI49_0_0RCT_EXTERN inline void ABI49_0_0RCTSwitchHandleCommand(
  id<ABI49_0_0RCTSwitchViewProtocol> componentView,
  NSString const *commandName,
  NSArray const *args)
{
  if ([commandName isEqualToString:@"setValue"]) {
#if ABI49_0_0RCT_DEBUG
  if ([args count] != 1) {
    ABI49_0_0RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"Switch", commandName, (int)[args count], 1);
    return;
  }
#endif

  NSObject *arg0 = args[0];
#if ABI49_0_0RCT_DEBUG
  if (!ABI49_0_0RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @"boolean", @"Switch", commandName, @"1st")) {
    return;
  }
#endif
  BOOL value = [(NSNumber *)arg0 boolValue];

  [componentView setValue:value];
  return;
}

#if ABI49_0_0RCT_DEBUG
  ABI49_0_0RCTLogError(@"%@ received command %@, which is not a supported command.", @"Switch", commandName);
#endif
}

@protocol ABI49_0_0RCTAndroidSwitchViewProtocol <NSObject>
- (void)setNativeValue:(BOOL)value;
@end

ABI49_0_0RCT_EXTERN inline void ABI49_0_0RCTAndroidSwitchHandleCommand(
  id<ABI49_0_0RCTAndroidSwitchViewProtocol> componentView,
  NSString const *commandName,
  NSArray const *args)
{
  if ([commandName isEqualToString:@"setNativeValue"]) {
#if ABI49_0_0RCT_DEBUG
  if ([args count] != 1) {
    ABI49_0_0RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"AndroidSwitch", commandName, (int)[args count], 1);
    return;
  }
#endif

  NSObject *arg0 = args[0];
#if ABI49_0_0RCT_DEBUG
  if (!ABI49_0_0RCTValidateTypeOfViewCommandArgument(arg0, [NSNumber class], @"boolean", @"AndroidSwitch", commandName, @"1st")) {
    return;
  }
#endif
  BOOL value = [(NSNumber *)arg0 boolValue];

  [componentView setNativeValue:value];
  return;
}

#if ABI49_0_0RCT_DEBUG
  ABI49_0_0RCTLogError(@"%@ received command %@, which is not a supported command.", @"AndroidSwitch", commandName);
#endif
}

@protocol ABI49_0_0RCTTraceUpdateOverlayViewProtocol <NSObject>
- (void)draw:(NSString *)overlays;
@end

ABI49_0_0RCT_EXTERN inline void ABI49_0_0RCTTraceUpdateOverlayHandleCommand(
  id<ABI49_0_0RCTTraceUpdateOverlayViewProtocol> componentView,
  NSString const *commandName,
  NSArray const *args)
{
  if ([commandName isEqualToString:@"draw"]) {
#if ABI49_0_0RCT_DEBUG
  if ([args count] != 1) {
    ABI49_0_0RCTLogError(@"%@ command %@ received %d arguments, expected %d.", @"TraceUpdateOverlay", commandName, (int)[args count], 1);
    return;
  }
#endif

  NSObject *arg0 = args[0];
#if ABI49_0_0RCT_DEBUG
  if (!ABI49_0_0RCTValidateTypeOfViewCommandArgument(arg0, [NSString class], @"string", @"TraceUpdateOverlay", commandName, @"1st")) {
    return;
  }
#endif
  NSString * overlays = (NSString *)arg0;

  [componentView draw:overlays];
  return;
}

#if ABI49_0_0RCT_DEBUG
  ABI49_0_0RCTLogError(@"%@ received command %@, which is not a supported command.", @"TraceUpdateOverlay", commandName);
#endif
}

@protocol ABI49_0_0RCTModalHostViewViewProtocol <NSObject>

@end

NS_ASSUME_NONNULL_END