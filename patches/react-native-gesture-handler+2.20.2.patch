diff --git a/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt b/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt
index e3ad6a6..1414ec5 100644
--- a/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt
+++ b/node_modules/react-native-gesture-handler/android/src/main/java/com/swmansion/gesturehandler/RNGestureHandlerPackage.kt
@@ -37,16 +37,13 @@ class RNGestureHandlerPackage : TurboReactPackage(), ViewManagerOnDemandReactPac
       RNGestureHandlerButtonViewManager()
     )
 
-  override fun getViewManagerNames(reactContext: ReactApplicationContext?) =
+  override fun getViewManagerNames(reactContext: ReactApplicationContext): Collection<String> =
     viewManagers.keys.toList()
 
-  override fun getViewManagers(reactContext: ReactApplicationContext?): MutableList<ModuleSpec> =
+  override fun getViewManagers(reactContext: ReactApplicationContext): List<ModuleSpec> =
     viewManagers.values.toMutableList()
 
-  override fun createViewManager(
-    reactContext: ReactApplicationContext?,
-    viewManagerName: String?
-  ) = viewManagers[viewManagerName]?.provider?.get() as? ViewManager<*, *>
+  override fun createViewManager(reactContext: ReactApplicationContext, viewManagerName: String): ViewManager<in Nothing, in Nothing>? = viewManagers[viewManagerName]?.provider?.get() as? ViewManager<*, *>
 
   override fun getModule(name: String, reactContext: ReactApplicationContext): NativeModule? {
     return if (name == RNGestureHandlerModule.NAME) {
@@ -71,7 +68,6 @@ class RNGestureHandlerPackage : TurboReactPackage(), ViewManagerOnDemandReactPac
             RNGestureHandlerModule::class.java.name,
             reactModule.canOverrideExistingModule,
             reactModule.needsEagerInit,
-            true, // Has constants is hardcoded to return true, so replacing it with `true` changes nothing.
             reactModule.isCxxModule,
             true
           )
diff --git a/node_modules/react-native-gesture-handler/src/getShadowNodeFromRef.ts b/node_modules/react-native-gesture-handler/src/getShadowNodeFromRef.ts
index eea2953..ff4e96a 100644
--- a/node_modules/react-native-gesture-handler/src/getShadowNodeFromRef.ts
+++ b/node_modules/react-native-gesture-handler/src/getShadowNodeFromRef.ts
@@ -11,10 +11,16 @@ export function getShadowNodeFromRef(ref: unknown) {
   // Load findHostInstance_DEPRECATED lazily because it may not be available before render
   if (findHostInstance_DEPRECATED === undefined) {
     try {
+      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment
+      const ReactFabric = require('react-native/Libraries/Renderer/shims/ReactFabric');
+      // Since RN 0.77 ReactFabric exports findHostInstance_DEPRECATED in default object so we're trying to
+      // access it first, then fallback on named export
       // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
       findHostInstance_DEPRECATED =
-        // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-member-access
-        require('react-native/Libraries/Renderer/shims/ReactFabric').findHostInstance_DEPRECATED;
+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
+        ReactFabric?.default?.findHostInstance_DEPRECATED ||
+        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
+        ReactFabric?.findHostInstance_DEPRECATED;
     } catch (e) {
       findHostInstance_DEPRECATED = (_ref: unknown) => null;
     }
