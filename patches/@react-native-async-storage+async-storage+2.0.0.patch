diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
index 689901f..7d6aa64 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
@@ -159,7 +159,9 @@ public class AsyncLocalStorageUtil {
     }
 
     File nextStorageFile = ctx.getDatabasePath("AsyncStorage");
-    File currentStorageFile = ctx.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME);
+    // NOTE(kudo): Expo Go doesn't turn on next storage, having dummy db name to pass build
+    // File currentStorageFile = ctx.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME);
+    File currentStorageFile = ctx.getDatabasePath("UNUSED");
     boolean isCheckpointRequired = !nextStorageFile.exists() && currentStorageFile.exists();
     if (!isCheckpointRequired) {
       Log.i("AsyncStorage_Next", "SQLite checkpoint not required.");
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageExpoMigration.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageExpoMigration.java
index cd79cc0..128d912 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageExpoMigration.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageExpoMigration.java
@@ -38,7 +38,8 @@ public class AsyncStorageExpoMigration {
         try {
             // Create the storage file
             ReactDatabaseSupplier.getInstance(context).get();
-            copyFile(new FileInputStream(expoDatabase), new FileOutputStream(context.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME)));
+            // NOTE(kudo): Don't run migration on Expo Go for backward compatibility
+            // copyFile(new FileInputStream(expoDatabase), new FileOutputStream(context.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME)));
             Log.v(LOG_TAG, "Migrated most recently modified database " + expoDatabase.getName() + " to RKStorage");
         } catch (Exception e) {
             Log.v(LOG_TAG, "Failed to migrate scoped database " + expoDatabase.getName());
@@ -62,7 +63,9 @@ public class AsyncStorageExpoMigration {
     }
 
     private static boolean isAsyncStorageDatabaseCreated(Context context) {
-        return context.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME).exists();
+        // NOTE(kudo): Don't run migration on Expo Go for backward compatibility
+        // return context.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME).exists();
+        return true;
     }
 
     // Find all database files that the user may have created while using Expo.
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
index cff01c0..cb1f3e7 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
@@ -32,7 +32,7 @@ import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
 
 @ReactModule(name = AsyncStorageModule.NAME)
-public final class AsyncStorageModule
+public class AsyncStorageModule
     extends NativeAsyncStorageModuleSpec implements ModuleDataCleaner.Cleanable {
 
   // changed name to not conflict with AsyncStorage from RN repo
@@ -42,7 +42,7 @@ public final class AsyncStorageModule
   // https://raw.githubusercontent.com/android/platform_external_sqlite/master/dist/sqlite3.c
   private static final int MAX_SQL_KEYS = 999;
 
-  private ReactDatabaseSupplier mReactDatabaseSupplier;
+  public ReactDatabaseSupplier mReactDatabaseSupplier;
   private boolean mShuttingDown = false;
 
   private final SerialExecutor executor;
@@ -66,6 +66,7 @@ public final class AsyncStorageModule
     this.executor = new SerialExecutor(executor);
 
     // Creating the database MUST happen after the migration.
+    // NOTE(kudo): ExponentAsyncStorageModule will setup the `mReactDatabaseSupplier`
     mReactDatabaseSupplier = ReactDatabaseSupplier.getInstance(reactContext);
   }
 
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java
index c7c59b0..e9a804d 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java
@@ -22,7 +22,9 @@ import javax.annotation.Nullable;
 public class ReactDatabaseSupplier extends SQLiteOpenHelper {
 
   // VisibleForTesting
-  public static final String DATABASE_NAME = "RKStorage";
+  // NOTE(kudo): Dynamic database name for scoped async storage
+  // public static final String DATABASE_NAME = "RKStorage";
+  public String DATABASE_NAME = "RKStorage";
 
   private static final int DATABASE_VERSION = 1;
   private static final int SLEEP_TIME_MS = 30;
@@ -43,12 +45,23 @@ public class ReactDatabaseSupplier extends SQLiteOpenHelper {
   private @Nullable SQLiteDatabase mDb;
   private long mMaximumDatabaseSize =  BuildConfig.AsyncStorage_db_size * 1024L * 1024L;
 
-  private ReactDatabaseSupplier(Context context) {
-    super(context, DATABASE_NAME, null, DATABASE_VERSION);
-    mContext = context;
+  private ReactDatabaseSupplier(Context context) {// NOTE(kudo): Dynamic database name for scoped async storage
+      // super(context, databaseName, null, DATABASE_VERSION);
+      // mContext = context;
+      super(context, "RKStorage", null, DATABASE_VERSION);
+      mContext = context;
+      DATABASE_NAME = "RKStorage";
   }
 
-  public static ReactDatabaseSupplier getInstance(Context context) {
+    // NOTE(kudo): Dynamic database name for scoped async storage
+    public ReactDatabaseSupplier(Context context, String databaseName) {
+        super(context, databaseName, null, DATABASE_VERSION);
+        mContext = context;
+        DATABASE_NAME = databaseName;
+    }
+
+
+    public static ReactDatabaseSupplier getInstance(Context context) {
     if (sReactDatabaseSupplierInstance == null) {
       sReactDatabaseSupplierInstance = new ReactDatabaseSupplier(context.getApplicationContext());
     }
