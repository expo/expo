diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
index 689901f..7d6aa64 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncLocalStorageUtil.java
@@ -159,7 +159,9 @@ public class AsyncLocalStorageUtil {
     }
 
     File nextStorageFile = ctx.getDatabasePath("AsyncStorage");
-    File currentStorageFile = ctx.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME);
+    // NOTE(kudo): Expo Go doesn't turn on next storage, having dummy db name to pass build
+    // File currentStorageFile = ctx.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME);
+    File currentStorageFile = ctx.getDatabasePath("UNUSED");
     boolean isCheckpointRequired = !nextStorageFile.exists() && currentStorageFile.exists();
     if (!isCheckpointRequired) {
       Log.i("AsyncStorage_Next", "SQLite checkpoint not required.");
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageExpoMigration.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageExpoMigration.java
index cd79cc0..f956dec 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageExpoMigration.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageExpoMigration.java
@@ -38,7 +38,8 @@ public class AsyncStorageExpoMigration {
         try {
             // Create the storage file
             ReactDatabaseSupplier.getInstance(context).get();
-            copyFile(new FileInputStream(expoDatabase), new FileOutputStream(context.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME)));
+            // NOTE(kudo): Don't run migration on Expo Go for backward compatibility
+//            copyFile(new FileInputStream(expoDatabase), new FileOutputStream(context.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME)));
             Log.v(LOG_TAG, "Migrated most recently modified database " + expoDatabase.getName() + " to RKStorage");
         } catch (Exception e) {
             Log.v(LOG_TAG, "Failed to migrate scoped database " + expoDatabase.getName());
@@ -62,7 +63,9 @@ public class AsyncStorageExpoMigration {
     }
 
     private static boolean isAsyncStorageDatabaseCreated(Context context) {
-        return context.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME).exists();
+        // NOTE(kudo): Don't run migration on Expo Go for backward compatibility
+        // return context.getDatabasePath(ReactDatabaseSupplier.DATABASE_NAME).exists();
+        return true;
     }
 
     // Find all database files that the user may have created while using Expo.
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
index 3e40248..58d2fec 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/AsyncStorageModule.java
@@ -33,7 +33,7 @@ import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
 
 @ReactModule(name = AsyncStorageModule.NAME)
-public final class AsyncStorageModule
+public class AsyncStorageModule
     extends NativeAsyncStorageModuleSpec implements ModuleDataCleaner.Cleanable, LifecycleEventListener {
 
   // changed name to not conflict with AsyncStorage from RN repo
@@ -43,7 +43,7 @@ public final class AsyncStorageModule
   // https://raw.githubusercontent.com/android/platform_external_sqlite/master/dist/sqlite3.c
   private static final int MAX_SQL_KEYS = 999;
 
-  private ReactDatabaseSupplier mReactDatabaseSupplier;
+  public ReactDatabaseSupplier mReactDatabaseSupplier;
   private boolean mShuttingDown = false;
 
   private final SerialExecutor executor;
@@ -66,6 +66,7 @@ public final class AsyncStorageModule
     this.executor = new SerialExecutor(executor);
     reactContext.addLifecycleEventListener(this);
     // Creating the database MUST happen after the migration.
+    // NOTE(kudo): ExponentAsyncStorageModule will setup the `mReactDatabaseSupplier`
     mReactDatabaseSupplier = ReactDatabaseSupplier.getInstance(reactContext);
   }
 
diff --git a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java
index c7c59b0..909af38 100644
--- a/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java
+++ b/node_modules/@react-native-async-storage/async-storage/android/src/main/java/com/reactnativecommunity/asyncstorage/ReactDatabaseSupplier.java
@@ -22,7 +22,9 @@ import javax.annotation.Nullable;
 public class ReactDatabaseSupplier extends SQLiteOpenHelper {
 
   // VisibleForTesting
-  public static final String DATABASE_NAME = "RKStorage";
+  // NOTE(kudo): Dynamic database name for scoped async storage
+  // public static final String DATABASE_NAME = "RKStorage";
+  public String DATABASE_NAME = "RKStorage";
 
   private static final int DATABASE_VERSION = 1;
   private static final int SLEEP_TIME_MS = 30;
@@ -43,9 +45,19 @@ public class ReactDatabaseSupplier extends SQLiteOpenHelper {
   private @Nullable SQLiteDatabase mDb;
   private long mMaximumDatabaseSize =  BuildConfig.AsyncStorage_db_size * 1024L * 1024L;
 
-  private ReactDatabaseSupplier(Context context) {
-    super(context, DATABASE_NAME, null, DATABASE_VERSION);
+  private ReactDatabaseSupplier(Context context) {// NOTE(kudo): Dynamic database name for scoped async storage
+    // super(context, databaseName, null, DATABASE_VERSION);
+    // mContext = context;
+    super(context, "RKStorage", null, DATABASE_VERSION);
     mContext = context;
+    DATABASE_NAME = "RKStorage";
+  }
+
+  // NOTE(kudo): Dynamic database name for scoped async storage
+  public ReactDatabaseSupplier(Context context, String databaseName) {
+    super(context, databaseName, null, DATABASE_VERSION);
+    mContext = context;
+    DATABASE_NAME = databaseName;
   }
 
   public static ReactDatabaseSupplier getInstance(Context context) {
diff --git a/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.h b/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.h
index 38e5178..9a87331 100644
--- a/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.h
+++ b/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.h
@@ -42,12 +42,12 @@
 
 @property (nonatomic, readonly, getter=isValid) BOOL valid;
 
+// NOTE(nikki): Added to allow scoped per Expo app
+- (instancetype)initWithStorageDirectory:(NSString *)storageDirectory;
+
 // Clear the RNCAsyncStorage data from native code
 - (void)clearAllData;
 
-// For clearing data when the bridge may not exist, e.g. when logging out.
-+ (void)clearAllData;
-
 // Grab data from the cache. ResponseBlock result array will have an error at position 0, and an
 // array of arrays at position 1.
 - (void)multiGet:(NSArray<NSString *> *)keys callback:(RCTResponseSenderBlock)callback;
diff --git a/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.mm b/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.mm
index 6b81187..b1a5499 100644
--- a/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.mm
+++ b/node_modules/@react-native-async-storage/async-storage/ios/RNCAsyncStorage.mm
@@ -14,7 +14,9 @@
 #import <React/RCTLog.h>
 #import <React/RCTUtils.h>
 
-static NSString *const RCTStorageDirectory = @"RCTAsyncLocalStorage_V1";
+// NOTE(kudo): Use Expo storage directory for backward compatibility
+//static NSString *const RCTStorageDirectory = @"RCTAsyncLocalStorage_V1";
+static NSString *const RCTStorageDirectory = @"RCTAsyncLocalStorage";
 static NSString *const RCTOldStorageDirectory = @"RNCAsyncLocalStorage_V1";
 static NSString *const RCTExpoStorageDirectory = @"RCTAsyncLocalStorage";
 static NSString *const RCTManifestFileName = @"manifest.json";
@@ -150,35 +152,11 @@ static NSString *RCTCreateStorageDirectoryPath(NSString *storageDir)
     return storageDirectoryPath;
 }
 
-static NSString *RCTGetStorageDirectory()
-{
-    static NSString *storageDirectory = nil;
-    static dispatch_once_t onceToken;
-    dispatch_once(&onceToken, ^{
-#if TARGET_OS_TV
-      RCTLogWarn(
-          @"Persistent storage is not supported on tvOS, your data may be removed at any point.");
-#endif
-      storageDirectory = RCTCreateStorageDirectoryPath(RCTStorageDirectory);
-    });
-    return storageDirectory;
-}
-
 static NSString *RCTCreateManifestFilePath(NSString *storageDirectory)
 {
     return [storageDirectory stringByAppendingPathComponent:RCTManifestFileName];
 }
 
-static NSString *RCTGetManifestFilePath()
-{
-    static NSString *manifestFilePath = nil;
-    static dispatch_once_t onceToken;
-    dispatch_once(&onceToken, ^{
-      manifestFilePath = RCTCreateManifestFilePath(RCTStorageDirectory);
-    });
-    return manifestFilePath;
-}
-
 // Only merges objects - all other types are just clobbered (including arrays)
 static BOOL RCTMergeRecursive(NSMutableDictionary *destination, NSDictionary *source)
 {
@@ -207,55 +185,30 @@ static BOOL RCTMergeRecursive(NSMutableDictionary *destination, NSDictionary *so
     return modified;
 }
 
-static dispatch_queue_t RCTGetMethodQueue()
-{
-    // We want all instances to share the same queue since they will be reading/writing the same
-    // files.
-    static dispatch_queue_t queue;
-    static dispatch_once_t onceToken;
-    dispatch_once(&onceToken, ^{
-      queue =
-          dispatch_queue_create("com.facebook.react.AsyncLocalStorageQueue", DISPATCH_QUEUE_SERIAL);
-    });
-    return queue;
-}
-
-static NSCache *RCTGetCache()
-{
-    // We want all instances to share the same cache since they will be reading/writing the same
-    // files.
-    static NSCache *cache;
-    static dispatch_once_t onceToken;
-    dispatch_once(&onceToken, ^{
-      cache = [NSCache new];
-      cache.totalCostLimit = 2 * 1024 * 1024;  // 2MB
-
-#if !TARGET_OS_OSX
-      // Clear cache in the event of a memory warning
-      [[NSNotificationCenter defaultCenter]
-          addObserverForName:UIApplicationDidReceiveMemoryWarningNotification
-                      object:nil
-                       queue:nil
-                  usingBlock:^(__unused NSNotification *note) {
-                    [cache removeAllObjects];
-                  }];
-#endif  // !TARGET_OS_OSX
-    });
-    return cache;
-}
 
 static BOOL RCTHasCreatedStorageDirectory = NO;
-static NSDictionary *RCTDeleteStorageDirectory()
+
+// NOTE(nikki93): We replace with scoped implementations of:
+//   RCTGetStorageDirectory()
+//   RCTGetManifestFilePath()
+//   RCTGetMethodQueue()
+//   RCTGetCache()
+//   RCTDeleteStorageDirectory()
+
+#define RCTGetStorageDirectory() _storageDirectory
+#define RCTGetManifestFilePath() _manifestFilePath
+#define RCTGetMethodQueue() self.methodQueue
+#define RCTGetCache() self.cache
+
+static NSDictionary *RCTDeleteStorageDirectory(NSString *storageDirectory)
 {
-    NSError *error;
-    [[NSFileManager defaultManager] removeItemAtPath:RCTGetStorageDirectory() error:&error];
-    RCTHasCreatedStorageDirectory = NO;
-    if (error && error.code != NSFileNoSuchFileError) {
-        return RCTMakeError(@"Failed to delete storage directory.", error, nil);
-    }
-    return nil;
+  NSError *error;
+  [[NSFileManager defaultManager] removeItemAtPath:storageDirectory error:&error];
+  return error ? RCTMakeError(@"Failed to delete storage directory.", error, nil) : nil;
 }
 
+#define RCTDeleteStorageDirectory() RCTDeleteStorageDirectory(_storageDirectory)
+
 static NSDate *RCTManifestModificationDate(NSString *manifestFilePath)
 {
     NSDictionary *attributes =
@@ -292,35 +245,7 @@ static void RCTStorageDirectoryMigrate(NSString *oldDirectoryPath,
                                        NSString *newDirectoryPath,
                                        BOOL shouldCleanupOldDirectory)
 {
-    NSError *error;
-    // Migrate data by copying old storage directory to new storage directory location
-    if (![[NSFileManager defaultManager] copyItemAtPath:oldDirectoryPath
-                                                 toPath:newDirectoryPath
-                                                  error:&error]) {
-        // the new storage directory "Application Support/[bundleID]/RCTAsyncLocalStorage_V1" seems
-        // unable to migrate because folder "Application Support/[bundleID]" doesn't exist.. create
-        // this folder and attempt folder copying again
-        if (error != nil && error.code == 4 &&
-            [newDirectoryPath isEqualToString:RCTGetStorageDirectory()]) {
-            NSError *error = nil;
-            _createStorageDirectory(RCTCreateStorageDirectoryPath(@""), &error);
-            if (error == nil) {
-                RCTStorageDirectoryMigrate(
-                    oldDirectoryPath, newDirectoryPath, shouldCleanupOldDirectory);
-            } else {
-                RCTStorageDirectoryMigrationLogError(
-                    @"Failed to create storage directory during migration.", error);
-            }
-        } else {
-            RCTStorageDirectoryMigrationLogError(
-                @"Failed to copy old storage directory to new storage directory location during "
-                @"migration",
-                error);
-        }
-    } else if (shouldCleanupOldDirectory) {
-        // If copying succeeds, remove old storage directory
-        RCTStorageDirectoryCleanupOld(oldDirectoryPath);
-    }
+  assert(false);
 }
 
 /**
@@ -413,12 +338,49 @@ RCTStorageDirectoryMigrationCheck(NSString *fromStorageDirectory,
 
 #pragma mark - RNCAsyncStorage
 
+@interface RNCAsyncStorage ()
+
+@property (nonatomic, copy) NSString *storageDirectory;
+@property (nonatomic, copy) NSString *manifestFilePath;
+
+@end
+
 @implementation RNCAsyncStorage {
     BOOL _haveSetup;
     // The manifest is a dictionary of all keys with small values inlined.  Null values indicate
     // values that are stored in separate files (as opposed to nil values which don't exist).  The
     // manifest is read off disk at startup, and written to disk after all mutations.
     NSMutableDictionary<NSString *, NSString *> *_manifest;
+    NSCache *_cache;
+    dispatch_once_t _cacheOnceToken;
+}
+
+// NOTE(nikki93): Prevents the module from being auto-initialized and allows us to pass our own `storageDirectory`
++ (NSString *)moduleName { return @"RCTAsyncLocalStorage"; }
+- (instancetype)initWithStorageDirectory:(NSString *)storageDirectory
+{
+  if ((self = [super init])) {
+    _storageDirectory = storageDirectory;
+    _manifestFilePath = [RCTGetStorageDirectory() stringByAppendingPathComponent:RCTManifestFileName];
+  }
+  return self;
+}
+
+// NOTE(nikki93): Use the default `methodQueue` since instances have different storage directories
+@synthesize methodQueue = _methodQueue;
+
+- (NSCache *)cache
+{
+  dispatch_once(&_cacheOnceToken, ^{
+    _cache = [NSCache new];
+    _cache.totalCostLimit = 2 * 1024 * 1024; // 2MB
+    
+    // Clear cache in the event of a memory warning
+    [[NSNotificationCenter defaultCenter] addObserverForName:UIApplicationDidReceiveMemoryWarningNotification object:nil queue:nil usingBlock:^(__unused NSNotification *note) {
+      [_cache removeAllObjects];
+    }];
+  });
+  return _cache;
 }
 
 + (BOOL)requiresMainQueueSetup
@@ -428,6 +390,7 @@ RCTStorageDirectoryMigrationCheck(NSString *fromStorageDirectory,
 
 - (instancetype)init
 {
+    assert(false);
     if (!(self = [super init])) {
         return nil;
     }
@@ -451,12 +414,6 @@ RCTStorageDirectoryMigrationCheck(NSString *fromStorageDirectory,
     return self;
 }
 
-RCT_EXPORT_MODULE()
-
-- (dispatch_queue_t)methodQueue
-{
-    return RCTGetMethodQueue();
-}
 
 - (void)clearAllData
 {
@@ -467,13 +424,6 @@ RCT_EXPORT_MODULE()
     });
 }
 
-+ (void)clearAllData
-{
-    dispatch_async(RCTGetMethodQueue(), ^{
-      [RCTGetCache() removeAllObjects];
-      RCTDeleteStorageDirectory();
-    });
-}
 
 - (void)invalidate
 {
@@ -507,12 +457,13 @@ RCT_EXPORT_MODULE()
     RCTAssertThread(RCTGetMethodQueue(), @"Must be executed on storage thread");
 
     NSError *error = nil;
-    if (!RCTHasCreatedStorageDirectory) {
-        _createStorageDirectory(RCTGetStorageDirectory(), &error);
-        if (error) {
-            return RCTMakeError(@"Failed to create storage directory.", error, nil);
-        }
-        RCTHasCreatedStorageDirectory = YES;
+    // NOTE(nikki93): `withIntermediateDirectories:YES` makes this idempotent
+    [[NSFileManager defaultManager] createDirectoryAtPath:RCTGetStorageDirectory()
+                              withIntermediateDirectories:YES
+                                             attributes:nil
+                                                error:&error];
+    if (error) {
+      return RCTMakeError(@"Failed to create storage directory.", error, nil);
     }
 
     if (!_haveSetup) {
@@ -523,11 +474,13 @@ RCT_EXPORT_MODULE()
             // by default, we want to exclude AsyncStorage data from backup
             isExcludedFromBackup = @YES;
         }
-        RCTAsyncStorageSetExcludedFromBackup(RCTCreateStorageDirectoryPath(RCTStorageDirectory),
-                                             isExcludedFromBackup);
+      // RCTAsyncStorageSetExcludedFromBackup(RCTCreateStorageDirectoryPath(RCTStorageDirectory),
+      //                                             isExcludedFromBackup);
 
         NSDictionary *errorOut = nil;
-        NSString *serialized = RCTReadFile(RCTCreateStorageDirectoryPath(RCTGetManifestFilePath()),
+        // NOTE(kudo): Keep data in Documents rather than Application Support for backward compatibility
+        // NSString *serialized = RCTReadFile(RCTCreateStorageDirectoryPath(RCTGetManifestFilePath())
+        NSString *serialized = RCTReadFile(RCTGetManifestFilePath(),
                                            RCTManifestFileName,
                                            &errorOut);
         if (!serialized) {
@@ -563,10 +516,10 @@ RCT_EXPORT_MODULE()
 {
     NSError *error;
     NSString *serialized = RCTJSONStringify(_manifest, &error);
-    [serialized writeToFile:RCTCreateStorageDirectoryPath(RCTGetManifestFilePath())
-                 atomically:YES
-                   encoding:NSUTF8StringEncoding
-                      error:&error];
+    [serialized writeToFile:RCTGetManifestFilePath()
+                   atomically:YES
+                     encoding:NSUTF8StringEncoding
+                        error:&error];
     NSDictionary *errorOut;
     if (error) {
         errorOut = RCTMakeError(@"Failed to write manifest file.", error, nil);
