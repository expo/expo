--- a/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewShadowNode.cpp
+++ b/node_modules/react-native-safe-area-context/common/cpp/react/renderer/components/safeareacontext/RNCSafeAreaViewShadowNode.cpp
@@ -10,17 +10,14 @@
 
 extern const char RNCSafeAreaViewComponentName[] = "RNCSafeAreaView";
 
-inline YGValue
-valueFromEdges(yoga::Style::Edges edges, YGEdge edge, YGEdge axis) {
-  YGValue edgeValue = edges[edge];
-  if (edgeValue.unit != YGUnitUndefined) {
-    return edgeValue;
+inline yoga::Style::Length edgeLengthFallback(const yoga::Style::Length &length1, const yoga::Style::Length &length2, const yoga::Style::Length &length3) {
+  if (length1.isDefined()) {
+    return length1;
   }
-  YGValue axisValue = edges[axis];
-  if (axisValue.unit != YGUnitUndefined) {
-    return axisValue;
+  if (length2.isDefined()) {
+    return length2;
   }
-  return edges[YGEdgeAll];
+  return length3;
 }
 
 inline float
@@ -37,7 +34,7 @@
 void RNCSafeAreaViewShadowNode::adjustLayoutWithState() {
   ensureUnsealed();
 
-  auto props = getConcreteProps();
+  auto &props = getConcreteProps();
   auto state =
       std::static_pointer_cast<const RNCSafeAreaViewShadowNode::ConcreteState>(
           getState());
@@ -47,69 +44,58 @@
   // Get the current values for padding / margin. The only caveat here is that
   // percent values are not supported. Also might need to add support for start
   // / end.
-  YGValue top, left, right, bottom;
+  yoga::Style::Length top, left, right, bottom;
   if (props.mode == RNCSafeAreaViewMode::Padding) {
-    top = valueFromEdges(props.yogaStyle.padding(), YGEdgeTop, YGEdgeVertical);
-    left =
-        valueFromEdges(props.yogaStyle.padding(), YGEdgeLeft, YGEdgeHorizontal);
-    bottom =
-        valueFromEdges(props.yogaStyle.padding(), YGEdgeBottom, YGEdgeVertical);
-    right = valueFromEdges(
-        props.yogaStyle.padding(), YGEdgeRight, YGEdgeHorizontal);
+    top = edgeLengthFallback(props.yogaStyle.padding(yoga::Edge::Top), props.yogaStyle.padding(yoga::Edge::Vertical), props.yogaStyle.padding(yoga::Edge::All));
+    left = edgeLengthFallback(props.yogaStyle.padding(yoga::Edge::Left), props.yogaStyle.padding(yoga::Edge::Horizontal), props.yogaStyle.padding(yoga::Edge::All));
+    bottom = edgeLengthFallback(props.yogaStyle.padding(yoga::Edge::Bottom), props.yogaStyle.padding(yoga::Edge::Vertical), props.yogaStyle.padding(yoga::Edge::All));
+    right = edgeLengthFallback(props.yogaStyle.padding(yoga::Edge::Right), props.yogaStyle.padding(yoga::Edge::Horizontal), props.yogaStyle.padding(yoga::Edge::All));
   } else {
-    top = valueFromEdges(props.yogaStyle.margin(), YGEdgeTop, YGEdgeVertical);
-    left =
-        valueFromEdges(props.yogaStyle.margin(), YGEdgeLeft, YGEdgeHorizontal);
-    bottom =
-        valueFromEdges(props.yogaStyle.margin(), YGEdgeBottom, YGEdgeVertical);
-    right =
-        valueFromEdges(props.yogaStyle.margin(), YGEdgeRight, YGEdgeHorizontal);
+    top = edgeLengthFallback(props.yogaStyle.margin(yoga::Edge::Top), props.yogaStyle.margin(yoga::Edge::Vertical), props.yogaStyle.margin(yoga::Edge::All));
+    left = edgeLengthFallback(props.yogaStyle.margin(yoga::Edge::Left), props.yogaStyle.margin(yoga::Edge::Horizontal), props.yogaStyle.margin(yoga::Edge::All));
+    bottom = edgeLengthFallback(props.yogaStyle.margin(yoga::Edge::Bottom), props.yogaStyle.margin(yoga::Edge::Vertical), props.yogaStyle.margin(yoga::Edge::All));
+    right = edgeLengthFallback(props.yogaStyle.margin(yoga::Edge::Right), props.yogaStyle.margin(yoga::Edge::Horizontal), props.yogaStyle.margin(yoga::Edge::All));
   }
 
-  top = yoga::CompactValue::ofMaybe<YGUnitPoint>(getEdgeValue(
+  top = yoga::value::points(getEdgeValue(
       edges.top,
       stateData.insets.top,
-      (top.unit == YGUnitPoint ? top.value : 0)));
-  left = yoga::CompactValue::ofMaybe<YGUnitPoint>(getEdgeValue(
+      (top.unit() == yoga::Unit::Point ? top.value() : yoga::FloatOptional{0}).unwrap()));
+  left = yoga::value::points(getEdgeValue(
       edges.left,
       stateData.insets.left,
-      (left.unit == YGUnitPoint ? left.value : 0)));
-  right = yoga::CompactValue::ofMaybe<YGUnitPoint>(getEdgeValue(
+      (left.unit() == yoga::Unit::Point ? top.value() : yoga::FloatOptional{0}).unwrap()));
+  right = yoga::value::points(getEdgeValue(
       edges.right,
       stateData.insets.right,
-      (right.unit == YGUnitPoint ? right.value : 0)));
-  bottom = yoga::CompactValue::ofMaybe<YGUnitPoint>(getEdgeValue(
+      (right.unit() == yoga::Unit::Point ? top.value() : yoga::FloatOptional{0}).unwrap()));
+  bottom = yoga::value::points(getEdgeValue(
       edges.bottom,
       stateData.insets.bottom,
-      (bottom.unit == YGUnitPoint ? bottom.value : 0)));
+      (bottom.unit() == yoga::Unit::Point ? top.value() : yoga::FloatOptional{0}).unwrap()));
 
   yoga::Style adjustedStyle = getConcreteProps().yogaStyle;
   if (props.mode == RNCSafeAreaViewMode::Padding) {
-    adjustedStyle.padding()[YGEdgeTop] = top;
-    adjustedStyle.padding()[YGEdgeLeft] = left;
-    adjustedStyle.padding()[YGEdgeRight] = right;
-    adjustedStyle.padding()[YGEdgeBottom] = bottom;
+    adjustedStyle.setPadding(yoga::Edge::Top, top);
+    adjustedStyle.setPadding(yoga::Edge::Left, left);
+    adjustedStyle.setPadding(yoga::Edge::Right, right);
+    adjustedStyle.setPadding(yoga::Edge::Bottom, bottom);
   } else {
-    adjustedStyle.margin()[YGEdgeTop] = top;
-    adjustedStyle.margin()[YGEdgeLeft] = left;
-    adjustedStyle.margin()[YGEdgeRight] = right;
-    adjustedStyle.margin()[YGEdgeBottom] = bottom;
+    adjustedStyle.setMargin(yoga::Edge::Top, top);
+    adjustedStyle.setMargin(yoga::Edge::Left, left);
+    adjustedStyle.setMargin(yoga::Edge::Right, right);
+    adjustedStyle.setMargin(yoga::Edge::Bottom, bottom);
   }
 
   auto currentStyle = yogaNode_.getStyle();
-  if (adjustedStyle.padding()[YGEdgeTop] != currentStyle.padding()[YGEdgeTop] ||
-      adjustedStyle.padding()[YGEdgeLeft] !=
-          currentStyle.padding()[YGEdgeLeft] ||
-      adjustedStyle.padding()[YGEdgeRight] !=
-          currentStyle.padding()[YGEdgeRight] ||
-      adjustedStyle.padding()[YGEdgeBottom] !=
-          currentStyle.padding()[YGEdgeBottom] ||
-      adjustedStyle.margin()[YGEdgeTop] != currentStyle.margin()[YGEdgeTop] ||
-      adjustedStyle.margin()[YGEdgeLeft] != currentStyle.margin()[YGEdgeLeft] ||
-      adjustedStyle.margin()[YGEdgeRight] !=
-          currentStyle.margin()[YGEdgeRight] ||
-      adjustedStyle.margin()[YGEdgeBottom] !=
-          currentStyle.margin()[YGEdgeBottom]) {
+  if (adjustedStyle.padding(yoga::Edge::Top) != currentStyle.padding(yoga::Edge::Top) ||
+      adjustedStyle.padding(yoga::Edge::Left) != currentStyle.padding(yoga::Edge::Left) ||
+      adjustedStyle.padding(yoga::Edge::Right) != currentStyle.padding(yoga::Edge::Right) ||
+      adjustedStyle.padding(yoga::Edge::Bottom) != currentStyle.padding(yoga::Edge::Bottom) ||
+      adjustedStyle.margin(yoga::Edge::Top) != currentStyle.margin(yoga::Edge::Top) ||
+      adjustedStyle.margin(yoga::Edge::Left) != currentStyle.margin(yoga::Edge::Left) ||
+      adjustedStyle.margin(yoga::Edge::Right) != currentStyle.margin(yoga::Edge::Right) ||
+      adjustedStyle.margin(yoga::Edge::Bottom) != currentStyle.margin(yoga::Edge::Bottom)) {
     yogaNode_.setStyle(adjustedStyle);
     yogaNode_.setDirty(true);
   }
