name: 'Expo Caches'
description: 'Composite action to perform cache related tasks.'

inputs:
  yarn-workspace:
    description: 'Restore yarn workspace cache'
    required: false
  yarn-tools:
    description: 'Restore yarn /tools cache'
    required: false
  yarn-docs:
    description: 'Restore yarn /docs cache'
    required: false
  ios-pods:
    description: 'Restore /ios pods cache'
    required: false
  bare-expo-pods:
    description: 'Restore /apps/bare-expo/ios pods cache'
    required: false
  native-tests-pods:
    description: 'Restore /apps/native-tests/ios pods cache'
    required: false
  gradle:
    description: 'Restore Gradle cache'
    required: false
  ndk:
    description: 'Restore NDK cache'
    required: false
  ndk-version:
    description: 'NDK version used'
    default: '23.1.7779620'
    required: false
  git-lfs:
    description: 'Restore Git LFS cache'
    required: false
  hermes-engine-aar:
    description: 'Restore prebuilt hermes-engine AAR'
    required: false
  rebuild-hermes-engine-aar-if-needed:
    description: 'Rebuild hermes-engine AAR when cache missed'
    default: 'true'
    required: false
  react-native-gradle-downloads:
    description: 'Restore Gradle downloads cache for React Native libraries'
    required: false

outputs:
  yarn-workspace-hit:
    description: 'Returns true, if yarn workspace cache is up-to-date'
    value: steps.workspace-modules-cache.outputs.cache-hit
  yarn-tools-hit:
    description: 'Returns true, if yarn /tools cache is up-to-date'
    value: steps.tools-modules-cache.outputs.cache-hit
  yarn-docs-hit:
    description: 'Returns true, if yarn /docs cache is up-to-date'
    value: steps.docs-modules-cache.outputs.cache-hit
  ios-pods-hit:
    description: 'Returns true, if /ios pods cache is up-to-date'
    value: steps.ios-pods-cache.outputs.cache-hit
  bare-expo-pods-hit:
    description: 'Returns true, if /apps/bare-expo/ios pods cache is up-to-date'
    value: steps.bare-expo-pods-cache.outputs.cache-hit
  native-tests-pods-hit:
    description: 'Returns true, if /apps/native-tests/ios pods cache is up-to-date'
    value: steps.native-tests-pods-cache.outputs.cache-hit
  git-lfs-hit:
    description: 'Returns true, if Git LFS cache is up-to-date'
    value: steps.git-lfs-cache.outputs.cache-hit
  hermes-engine-aar-hit:
    description: 'Returns true, if prebuilt hermes-engine AAR cache is up-to-date'
    value: steps.cache-hermes-engine-aar.outputs.cache-hit

runs:
  using: 'composite'
  steps:
    - name: ‚ôªÔ∏è Restore workspace node modules
      if: inputs.yarn-workspace == 'true'
      uses: actions/cache@v3
      id: workspace-modules-cache
      with:
        # See "workspaces" ‚Üí "packages" in the root package.json for the source of truth of
        # which node_modules are affected by the root yarn.lock
        path: |
          node_modules
          apps/*/node_modules
          apps/*/__generated__/AppEntry.js
          packages/*/node_modules
          packages/@expo/*/node_modules
          react-native-lab/react-native/node_modules
        key: ${{ runner.os }}-workspace-modules-${{ hashFiles('yarn.lock') }}

    - name: ‚ôªÔ∏è Restore /tools node modules and bins
      if: inputs.yarn-tools == 'true'
      uses: actions/cache@v3
      id: tools-modules-cache
      with:
        path: |
          tools/node_modules
        key: ${{ runner.os }}-tools-modules-${{ hashFiles('tools/yarn.lock') }}

    - name: ‚ôªÔ∏è Restore /docs node modules
      if: inputs.yarn-docs == 'true'
      uses: actions/cache@v3
      id: docs-modules-cache
      with:
        path: docs/node_modules
        key: ${{ runner.os }}-docs-modules-${{ hashFiles('docs/yarn.lock') }}
    - name: ‚ôªÔ∏è Restore Docs Next cache
      if: inputs.yarn-docs == 'true' && steps.docs-modules-cache.outputs.cache-hit == 'true'
      uses: actions/cache@v3
      with:
        path: docs/.next/cache
        key: ${{ runner.os }}-docs-next-${{ hashFiles('docs/yarn.lock') }}-${{ hashFiles('docs/next.config.js') }}

    - name: ‚ôªÔ∏è Restore ios/Pods from cache
      if: inputs.ios-pods == 'true'
      uses: actions/cache@v3
      id: ios-pods-cache
      with:
        path: ios/Pods
        key: ${{ runner.os }}-ios-pods-${{ hashFiles('ios/Podfile.lock') }}

    - name: ‚ôªÔ∏è Restore apps/bare-expo/ios/Pods from cache
      if: inputs.bare-expo-pods == 'true'
      uses: actions/cache@v3
      id: bare-expo-pods-cache
      with:
        path: apps/bare-expo/ios/Pods
        key: ${{ runner.os }}-bare-expo-pods-${{ hashFiles('apps/bare-expo/ios/Podfile.lock') }}

    - name: ‚ôªÔ∏è Restore apps/native-tests/ios/Pods from cache
      if: inputs.native-tests-pods == 'true'
      uses: actions/cache@v3
      id: native-tests-pods-cache
      with:
        path: apps/native-tests/ios/Pods
        key: ${{ runner.os }}-native-tests-pods-${{ hashFiles('apps/native-tests/ios/Podfile.lock') }}

    - name: ‚ôªÔ∏è Restore Gradle cache
      if: inputs.ndk == 'true' || inputs.gradle == 'true'
      uses: gradle/gradle-build-action@v2

    - name: ‚ôªÔ∏è Restore Android NDK from cache
      if: inputs.ndk == 'true'
      uses: actions/cache@v3
      id: cache-android-ndk
      with:
        path: /usr/local/lib/android/sdk/ndk/${{ inputs.ndk-version }}/
        key: ${{ runner.os }}-ndk-${{ inputs.ndk-version }}
    - name: üõ† Install NDK if cache not present
      if: inputs.ndk == 'true' && steps.cache-android-ndk.outputs.cache-hit != 'true'
      shell: bash
      run: sudo $ANDROID_SDK_ROOT/tools/bin/sdkmanager --install "ndk;${{ inputs.ndk-version }}"

    - name: üîçÔ∏è Get cache key of Git LFS files
      if: inputs.git-lfs == 'true'
      id: git-lfs
      run: echo "sha256=$(git lfs ls-files | openssl dgst -sha256)" >> $GITHUB_OUTPUT
      shell: bash
    - name: ‚ôªÔ∏è Restore Git LFS cache
      uses: actions/cache@v3
      if: inputs.git-lfs == 'true'
      with:
        path: .git/lfs
        key: ${{ steps.git-lfs.outputs.sha256 }}

    - name: ‚ôªÔ∏è Restore hermes-engine AAR cache
      if: inputs.hermes-engine-aar == 'true'
      uses: actions/cache@v3
      with:
        path: android/prebuiltHermes
        key: hermes-engine-aar-v2-${{ hashFiles('react-native-lab/react-native/packages/react-native/sdks/.hermesversion') }}
    - name: Check hermes-engine cache-hit
      if: inputs.hermes-engine-aar == 'true'
      id: cache-hermes-engine-aar
      shell: bash
      run: |
        CURRENT_VERSION=$(test -f android/prebuiltHermes/.hermesversion && cat android/prebuiltHermes/.hermesversion) || true
        TARGET_VERSION=$(test -f react-native-lab/react-native/packages/react-native/sdks/.hermesversion && cat react-native-lab/react-native/packages/react-native/sdks/.hermesversion) || true
        if [[ $CURRENT_VERSION == $TARGET_VERSION ]]; then
          echo "cache-hit=true" >> $GITHUB_OUTPUT
        else
          echo "cache-hit=false" >> $GITHUB_OUTPUT
        fi
    - name: üõ† Rebuild hermes-engine AAR when cache missed
      if: inputs.hermes-engine-aar == 'true' && inputs.rebuild-hermes-engine-aar-if-needed == 'true' && steps.cache-hermes-engine-aar.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Ensure node packages are installed when yarn-workspace cache miss
        yarn install --frozen-lockfile
        mkdir -p prebuiltHermes
        cp -f ../react-native-lab/react-native/packages/react-native/sdks/.hermesversion prebuiltHermes/
        ./gradlew :packages:react-native:ReactAndroid:hermes-engine:assembleRelease
        ./gradlew :packages:react-native:ReactAndroid:hermes-engine:assembleDebug
        cp -f ../react-native-lab/react-native/packages/react-native/ReactAndroid/hermes-engine/build/outputs/aar/hermes-engine-release.aar prebuiltHermes/
        cp -f ../react-native-lab/react-native/packages/react-native/ReactAndroid/hermes-engine/build/outputs/aar/hermes-engine-debug.aar prebuiltHermes/
      env:
        # Reset reactNativeArchitectures to build all architectures
        ORG_GRADLE_PROJECT_reactNativeArchitectures:
      working-directory: android

    - name: üõ† Setup "REACT_NATIVE_DOWNLOADS_DIR" environment variable
      if: inputs.react-native-gradle-downloads == 'true'
      shell: bash
      run: echo "REACT_NATIVE_DOWNLOADS_DIR=$HOME/.gradle/react-native-downloads" >> $GITHUB_ENV
    - name: ‚ôªÔ∏è Restore Gradle downloads cache for React Native libraries
      if: inputs.react-native-gradle-downloads == 'true'
      uses: actions/cache@v3
      with:
        path: ${{ env.REACT_NATIVE_DOWNLOADS_DIR }}
        key: gradle-downloads-${{ hashFiles('yarn.lock') }}
        restore-keys: gradle-downloads-
