/*
  HOW TO USE THIS FILE:
  1) Copy this file to .vscode/launch.json (remove the .example extension).
  2) Replace path names based on your local file structure.
  3) Launch the debugger by clicking the "Debug" icon in the sidebar and selecting the config you want to run.
*/
{
  "configurations": [
    {
      // Debug the currently-open Jest test file
      "name": "Launch Jest for Current File",
      "request": "launch",
      "runtimeExecutable": "yarn",
      "runtimeArgs": [
        // args to pass to yarn, e.g., `yarn jest --runInBand`
        "jest",
        "--runInBand",
        /*
        Filter tests run by filename
        ${fileBasenameNoExtension} will filter by the name of the file in the current tab
        change this to a hardcoded name to always filter by a specific file, or remove to run all tests
      */
        "${fileBasenameNoExtension}"
      ],
      "skipFiles": ["<node_internals>/**"],
      "type": "node",
      // replace with the path to the Expo CLI package in your local checkout
      "cwd": "/Users/username/path-to/expo/packages/@expo/cli",
      "console": "integratedTerminal"
    },
    {
      /*
      Debug the Expo CLI when it is running against a test project.
      Starting the debugger with this config will start your locally-built Expo CLI,
      but with it's CWD as a test project of your choice.
      Be sure to run `yarn build` in expo/packages/@expo/cli first.
    */
      "name": "Launch Expo CLI",
      "request": "launch",
      "args": [
        /*
        Replace with the command args you want to pass to the Expo CLI,
        e.g., `start` will run the equivablent of `npx expo start`
      */
        "start"
      ],
      "program": "${workspaceFolder}/packages/@expo/cli/build/bin/cli",
      "skipFiles": ["<node_internals>/**"],
      "type": "node",
      // Replace with the root directory of your test project you want to run the Expo CLI against.
      "cwd": "/Users/username/path-to/test-project",
      "console": "integratedTerminal"
    }
  ]
}
