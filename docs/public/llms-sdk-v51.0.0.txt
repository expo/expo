# Expo SDK v51.0.0 Documentation

Documentation for Expo SDK v51.0.0 libraries, app configuration files, Expo CLI, create-expo-app, and more.

# app.json / app.config.js

A reference of available properties in Expo app config.

The following is a list of properties that are available for you under the `"expo"` key in app.json or app.config.json. These properties can be passed to the top level object of app.config.js or app.config.ts.

Configuration with app config

For information on app configuration, the differences between various app config files, and how to use them dynamically.

## Properties

`name`

Type: `string`

The name of your app as it appears both within Expo Go and on your home screen as a standalone app.

Bare Workflow

To change the name of your app, edit the 'Display Name' field in Xcode and the `app_name` string in `android/app/src/main/res/values/strings.xml`

`description`

Type: `string`

A short description of what your app is and why it is great.

`slug`

Type: `string`

A URL-friendly name for your project that is unique across your account.

`owner`

Type: `string`

The name of the Expo account that owns the project. This is useful for teams collaborating on a project. If not provided, the owner defaults to the username of the current user.

`currentFullName`

Type: `string`

The auto generated Expo account name and slug used for display purposes. It is not meant to be set directly. Formatted like `@username/slug`. When unauthenticated, the username is `@anonymous`. For published projects, this value may change when a project is transferred between accounts or renamed.

`originalFullName`

Type: `string`

The auto generated Expo account name and slug used for services like Notifications and AuthSession proxy. It is not meant to be set directly. Formatted like `@username/slug`. When unauthenticated, the username is `@anonymous`. For published projects, this value will not change when a project is transferred between accounts or renamed.

`privacy`

Type: `enum`

Defaults to `unlisted`. `unlisted` hides the project from search results. `hidden` restricts access to the project page to only the owner and other users that have been granted access. Valid values: `public`, `unlisted`, `hidden`.

`sdkVersion`

Type: `string`

The Expo sdkVersion to run the project on. This should line up with the version specified in your package.json.

`runtimeVersion`

One of types:

*   `string` matching the following pattern: `^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$`
*   `string` matching the following pattern: `^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$`
*   An `object` with the following properties:
```
`policy`

Type: `enum` Path: `runtimeVersion.policy`

Valid values: `nativeVersion`, `sdkVersion`, `appVersion`, `fingerprint`.
```

Property indicating compatibility between a build's native code and an OTA update.

`version`

Type: `string`

Your app version. In addition to this field, you'll also use `ios.buildNumber` and `android.versionCode` — read more about how to version your app [here. On iOS this corresponds to `CFBundleShortVersionString`, and on Android, this corresponds to `versionName`. The required format can be found [here.

Bare Workflow

To change your app version, edit the 'Version' field in Xcode and the `versionName` string in `android/app/build.gradle`

`platforms`

Type: `array`

Platforms that your project explicitly supports. If not specified, it defaults to `["ios", "android"]`.

Example

`[ "ios", "android", "web" ]`

`githubUrl`

Type: `string`

If you would like to share the source code of your app on Github, enter the URL for the repository here and it will be linked to from your Expo project page.

Example

`"https://github.com/expo/expo"`

`orientation`

Type: `enum`

Locks your app to a specific orientation with portrait or landscape. Defaults to no lock. Valid values: `default`, `portrait`, `landscape`

`userInterfaceStyle`

Type: `enum`

Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to `light`. Requires `expo-system-ui` be installed in your project to work on Android.

`backgroundColor`

Type: `string`

The background color for your app, behind any of your React views. This is also known as the root view background color. Requires `expo-system-ui` be installed in your project to work on iOS.

6 character long hex color string, for example, `'#000000'`. Default is white: `'#ffffff'`

`primaryColor`

Type: `string`

On Android, this will determine the color of your app in the multitasker. Currently this is not used on iOS, but it may be used for other purposes in the future.

6 character long hex color string, for example, `'#000000'`

`icon`

Type: `string`

Local path or remote URL to an image to use for your app's icon. We recommend that you use a 1024x1024 png file. This icon will appear on the home screen and within the Expo app.

Bare Workflow

To change your app's icon, edit or replace the files in `ios/<PROJECT-NAME>/Assets.xcassets/AppIcon.appiconset` (we recommend using Xcode), and `android/app/src/main/res/mipmap-<RESOLUTION>`. Be sure to follow the guidelines for each platform ([iOS, [Android 7.1 and below, and [Android 8+) and to provide your new icon in each existing size.

`notification`

Type: `object`

Configuration for remote (push) notifications.

`icon`

Type: `string` Path: `notification.icon`

(Android only) Local path or remote URL to an image to use as the icon for push notifications. 96x96 png grayscale with transparency. We recommend following [Google's design guidelines. If not provided, defaults to your app icon.

`color`

Type: `string` Path: `notification.color`

(Android only) Tint color for the push notification image when it appears in the notification tray. Defaults to `#ffffff`

6 character long hex color string, for example, `'#000000'`

`iosDisplayInForeground`

Type: `boolean` Path: `notification.iosDisplayInForeground`

Whether or not to display notifications when the app is in the foreground on iOS. `_displayInForeground` option in the individual push notification message overrides this option. [Learn more. Defaults to `false`.

`androidMode`

Type: `enum` Path: `notification.androidMode`

Show each push notification individually (`default`) or collapse into one (`collapse`).

`androidCollapsedTitle`

Type: `string` Path: `notification.androidCollapsedTitle`

If `androidMode` is set to `collapse`, this title is used for the collapsed notification message. For example, `'#{unread_notifications} new interactions'`.

`androidStatusBar`

Type: `object`

Configuration for the status bar on Android. For more details please navigate to [Configuring StatusBar.

`barStyle`

Type: `enum` Path: `androidStatusBar.barStyle`

Configures the status bar icons to have a light or dark color. Valid values: `light-content`, `dark-content`. Defaults to `dark-content`

`backgroundColor`

Type: `string` Path: `androidStatusBar.backgroundColor`

Specifies the background color of the status bar. Defaults to `#00000000` (transparent) for `dark-content` bar style and `#00000088` (semi-transparent black) for `light-content` bar style

6 character long hex color string `'#RRGGBB'`, for example, `'#000000'` for black. Or 8 character long hex color string `'#RRGGBBAA'`, for example, `'#00000088'` for semi-transparent black.

`hidden`

Type: `boolean` Path: `androidStatusBar.hidden`

Instructs the system whether the status bar should be visible or not. Defaults to `false`

`translucent`

Type: `boolean` Path: `androidStatusBar.translucent`

When false, the system status bar pushes the content of your app down (similar to `position: relative`). When true, the status bar floats above the content in your app (similar to `position: absolute`). Defaults to `true` to match the iOS status bar behavior (which can only float above content). Explicitly setting this property to `true` will add `android:windowTranslucentStatus` to `styles.xml` and may cause unexpected keyboard behavior on Android when using the `softwareKeyboardLayoutMode` set to `resize`. In this case you will have to use `KeyboardAvoidingView` to manage the keyboard layout.

`androidNavigationBar`

Type: `object`

Configuration for the bottom navigation bar on Android. Can be used to configure the `expo-navigation-bar` module in EAS Build.

`visible`

Type: `enum` Path: `androidNavigationBar.visible`

Determines how and when the navigation bar is shown. [Learn more. Requires `expo-navigation-bar` be installed in your project. Valid values: `leanback`, `immersive`, `sticky-immersive`

`leanback` results in the navigation bar being hidden until the first touch gesture is registered.

`immersive` results in the navigation bar being hidden until the user swipes up from the edge where the navigation bar is hidden.

`sticky-immersive` is identical to `'immersive'` except that the navigation bar will be semi-transparent and will be hidden again after a short period of time.

`barStyle`

Type: `enum` Path: `androidNavigationBar.barStyle`

Configure the navigation bar icons to have a light or dark color. Supported on Android Oreo and newer. Valid values: `'light-content'`, `'dark-content'`

`backgroundColor`

Type: `string` Path: `androidNavigationBar.backgroundColor`

Specifies the background color of the navigation bar.

6 character long hex color string, for example, `'#000000'`

`developmentClient`

Type: `object`

Settings that apply specifically to running this app in a development client

`silentLaunch`

Type: `boolean` Path: `developmentClient.silentLaunch`

If true, the app will launch in a development client with no additional dialogs or progress indicators, just like in a standalone app.

`scheme`

One of types:

*   `string` matching the following pattern: `^[a-z][a-z0-9+.-]*$`
`{ "type": "array", "items": { "type": "string", "pattern": "^[a-z][a-z0-9+.-]*$" } }`

URL scheme(s) to link into your app. For example, if we set this to `'demo'`, then demo:// URLs would open your app when tapped. This is a build-time configuration, it has no effect in Expo Go.

String beginning with a lowercase letter followed by any combination of lowercase letters, digits, "+", "." or "-"

Bare Workflow

To change your app's scheme, replace all occurrences of the old scheme in `Info.plist` and `AndroidManifest.xml`

`extra`

Type: `object`

Any extra fields you want to pass to your experience. Values are accessible via `Constants.expoConfig.extra` ([Learn more)

`updates`

Type: `object`

Configuration for the expo-updates library

`enabled`

Type: `boolean` Path: `updates.enabled`

Whether the updates system will run. Defaults to true. If set to false, builds will only use code and assets bundled at time of build.

`checkAutomatically`

Type: `enum` Path: `updates.checkAutomatically`

By default, expo-updates will check for updates every time the app is loaded. Set this to `ON_ERROR_RECOVERY` to disable automatic checking unless recovering from an error. Set this to `NEVER` to disable automatic checking. Valid values: `ON_LOAD` (default value), `ON_ERROR_RECOVERY`, `WIFI_ONLY`, `NEVER`

`fallbackToCacheTimeout`

Type: `number` Path: `updates.fallbackToCacheTimeout`

How long (in ms) to wait for the app to check for and fetch a new update upon launch before falling back to the most recent update already present on the device. Defaults to 0. Must be between 0 and 300000 (5 minutes). If the startup update check takes longer than this value, any update downloaded during the check will be applied upon the next app launch.

`url`

Type: `string` Path: `updates.url`

URL from which expo-updates will fetch update manifests

`codeSigningCertificate`

Type: `string` Path: `updates.codeSigningCertificate`

Local path of a PEM-formatted X.509 certificate used for verifying codesigned updates. When provided, all updates downloaded by expo-updates must be signed.

`codeSigningMetadata`

Type: `object` Path: `updates.codeSigningMetadata`

Metadata for `codeSigningCertificate`

`alg`

Type: `enum` Path: `updates.codeSigningMetadata.alg`

Algorithm used to generate manifest code signing signature. Valid values: `rsa-v1_5-sha256`

`keyid`

Type: `string` Path: `updates.codeSigningMetadata.keyid`

Identifier for the key in the certificate. Used to instruct signing mechanisms when signing or verifying signatures.

`requestHeaders`

Type: `object` Path: `updates.requestHeaders`

Extra HTTP headers to include in HTTP requests made by `expo-updates` when fetching manifests or assets. These may override preset headers.

`locales`

Type: `object`

Provide overrides by locale for System Dialog prompts like Permissions Boxes

Bare Workflow

To add or change language and localization information in your iOS app, you need to use Xcode.

`plugins`

Type: `array`

Config plugins for adding extra functionality to your project. [Learn more.

Bare Workflow

Plugins that add modifications can only be used with [prebuilding and managed EAS Build

`splash`

Type: `object`

Configuration for loading and splash screen for standalone apps.

Bare Workflow

To change your app's icon, edit or replace the files in `ios/<PROJECT-NAME>/Assets.xcassets/AppIcon.appiconset` (we recommend using Xcode), and `android/app/src/main/res/mipmap-<RESOLUTION>` (Android Studio can [generate the appropriate image files for you). Be sure to follow the guidelines for each platform ([iOS, [Android 7.1 and below, and [Android 8+) and to provide your new icon in each required size.

`backgroundColor`

Type: `string` Path: `splash.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

Bare Workflow

For Android, edit the `colorPrimary` item in `android/app/src/main/res/values/colors.xml`

`resizeMode`

Type: `enum` Path: `splash.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover` or `contain`, defaults to `contain`.

`image`

Type: `string` Path: `splash.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`jsEngine`

Type: `enum`

Specifies the JavaScript engine for apps. Supported only on EAS Build. Defaults to `hermes`. Valid values: `hermes`, `jsc`.

Bare Workflow

To change the JavaScript engine, update the `expo.jsEngine` value in `ios/Podfile.properties.json` or `android/gradle.properties`

`ios`

Type: `object`

Configuration that is specific to the iOS platform.

`publishManifestPath`

Type: `string` Path: `ios.publishManifestPath`

The manifest for the iOS version of your app will be written to this path during publish.

`publishBundlePath`

Type: `string` Path: `ios.publishBundlePath`

The bundle for the iOS version of your app will be written to this path during publish.

`bundleIdentifier`

Type: `string` Path: `ios.bundleIdentifier`

The bundle identifier for your iOS standalone app. You make it up, but it needs to be unique on the App Store. See [this StackOverflow question](http://stackoverflow.com/questions/11347470/what-does-bundle-identifier-mean-in-the-ios-project).

iOS bundle identifier notation unique name for your app. For example, `host.exp.expo`, where `exp.host` is our domain and `expo` is our app name.

Bare Workflow

Set this value in `info.plist` under `CFBundleIdentifier`

`buildNumber`

Type: `string` Path: `ios.buildNumber`

Build number for your iOS standalone app. Corresponds to `CFBundleVersion` and must match Apple's [specified format. (Note: Transporter will pull the value for `Version Number` from `expo.version` and NOT from `expo.ios.buildNumber`.)

Bare Workflow

Set this value in `info.plist` under `CFBundleVersion`

`backgroundColor`

Type: `string` Path: `ios.backgroundColor`

The background color for your iOS app, behind any of your React views. Overrides the top-level `backgroundColor` key if it is present. Requires `expo-system-ui` be installed in your project to work on iOS.

6 character long hex color string, for example, `'#000000'`

`icon`

Type: `string` Path: `ios.icon`

Local path or remote URL to an image to use for your app's icon on iOS. If specified, this overrides the top-level `icon` key. Use a 1024x1024 icon which follows Apple's interface guidelines for icons, including color profile and transparency.

Expo will generate the other required sizes. This icon will appear on the home screen and within the Expo app.

`appStoreUrl`

Type: `string` Path: `ios.appStoreUrl`

URL to your app on the Apple App Store, if you have deployed it there. This is used to link to your store page from your Expo project page if your app is public.

Example

`"https://apps.apple.com/us/app/expo-client/id982107779"`

`bitcode`

Type: `undefined` Path: `ios.bitcode`

Enable iOS Bitcode optimizations in the native build. Accepts the name of an iOS build configuration to enable for a single configuration and disable for all others, e.g. Debug, Release. Not available in Expo Go. Defaults to `undefined` which uses the template's predefined settings.

`config`

Type: `object` Path: `ios.config`

Note: This property key is not included in the production manifest and will evaluate to `undefined`. It is used internally only in the build process, because it contains API keys that some may want to keep private.

`branch`

Type: `object` Path: `ios.config.branch`

[Branch key to hook up Branch linking services.

`apiKey`

Type: `string` Path: `ios.config.branch.apiKey`

Your Branch API key

`usesNonExemptEncryption`

Type: `boolean` Path: `ios.config.usesNonExemptEncryption`

Sets `ITSAppUsesNonExemptEncryption` in the standalone ipa's Info.plist to the given boolean value.

`googleMapsApiKey`

Type: `string` Path: `ios.config.googleMapsApiKey`

[Google Maps iOS SDK key for your standalone app.

`googleMobileAdsAppId`

Type: `string` Path: `ios.config.googleMobileAdsAppId`

[Google Mobile Ads App ID Google AdMob App ID.

`googleMobileAdsAutoInit`

Type: `boolean` Path: `ios.config.googleMobileAdsAutoInit`

A boolean indicating whether to initialize Google App Measurement and begin sending user-level event data to Google immediately when the app starts. The default in Expo (Go and in standalone apps) is `false`. [Sets the opposite of the given value to the following key in `Info.plist`.

`googleServicesFile`

Type: `string` Path: `ios.googleServicesFile`

[Firebase Configuration File Location of the `GoogleService-Info.plist` file for configuring Firebase.

`supportsTablet`

Type: `boolean` Path: `ios.supportsTablet`

Whether your standalone iOS app supports tablet screen sizes. Defaults to `false`.

Bare Workflow

Set this value in `info.plist` under `UISupportedInterfaceOrientations~ipad`

`isTabletOnly`

Type: `boolean` Path: `ios.isTabletOnly`

If true, indicates that your standalone iOS app does not support handsets, and only supports tablets.

Bare Workflow

Set this value in `info.plist` under `UISupportedInterfaceOrientations`

`requireFullScreen`

Type: `boolean` Path: `ios.requireFullScreen`

If true, indicates that your standalone iOS app does not support Slide Over and Split View on iPad. Defaults to `false`

Bare Workflow

Use Xcode to set `UIRequiresFullScreen`

`userInterfaceStyle`

Type: `enum` Path: `ios.userInterfaceStyle`

Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to `light`.

`infoPlist`

Type: `object` Path: `ios.infoPlist`

Dictionary of arbitrary configuration to add to your standalone app's native Info.plist. Applied prior to all other Expo-specific configuration. No other validation is performed, so use this at your own risk of rejection from the App Store.

`entitlements`

Type: `object` Path: `ios.entitlements`

Dictionary of arbitrary configuration to add to your standalone app's native \*.entitlements (plist). Applied prior to all other Expo-specific configuration. No other validation is performed, so use this at your own risk of rejection from the App Store.

`privacyManifests`

Type: `object` Path: `ios.privacyManifests`

Dictionary of privacy manifest definitions to add to your app's native PrivacyInfo.xcprivacy file. [Learn more

`NSPrivacyAccessedAPITypes`

Type: `array` Path: `ios.privacyManifests.NSPrivacyAccessedAPITypes`

A list of required reasons of why your app uses restricted API categories. [Learn more

`NSPrivacyAccessedAPIType`

Type: `string` Path: `ios.privacyManifests.NSPrivacyAccessedAPITypes.NSPrivacyAccessedAPIType`

A string that identifies the category of required reason APIs your app uses

`NSPrivacyAccessedAPITypeReasons`

Type: `array` Path: `ios.privacyManifests.NSPrivacyAccessedAPITypes.NSPrivacyAccessedAPITypeReasons`

A list of reasons for a specific category.

`NSPrivacyTrackingDomains`

Type: `array` Path: `ios.privacyManifests.NSPrivacyTrackingDomains`

A list of domains that your app uses for tracking.

`NSPrivacyTracking`

Type: `boolean` Path: `ios.privacyManifests.NSPrivacyTracking`

A Boolean that indicates whether your app or third-party SDK uses data for tracking.

`NSPrivacyCollectedDataTypes`

Type: `array` Path: `ios.privacyManifests.NSPrivacyCollectedDataTypes`

A list of collected data types that your app uses.

`NSPrivacyCollectedDataType`

Type: `string` Path: `ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataType`

`NSPrivacyCollectedDataTypeLinked`

Type: `boolean` Path: `ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypeLinked`

`NSPrivacyCollectedDataTypeTracking`

Type: `boolean` Path: `ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypeTracking`

`NSPrivacyCollectedDataTypePurposes`

Type: `array` Path: `ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypePurposes`

`associatedDomains`

Type: `array` Path: `ios.associatedDomains`

An array that contains Associated Domains for the standalone app. [Learn more.

Entries must follow the format `applinks:<fully qualified domain>[:port number]`. [Learn more.

Bare Workflow

Build with EAS, or use Xcode to enable this capability manually. [Learn more.

`usesIcloudStorage`

Type: `boolean` Path: `ios.usesIcloudStorage`

A boolean indicating if the app uses iCloud Storage for `DocumentPicker`. See `DocumentPicker` docs for details.

Bare Workflow

Use Xcode, or ios.entitlements to configure this.

`usesAppleSignIn`

Type: `boolean` Path: `ios.usesAppleSignIn`

A boolean indicating if the app uses Apple Sign-In. See `AppleAuthentication` docs for details.

`accessesContactNotes`

Type: `boolean` Path: `ios.accessesContactNotes`

A Boolean value that indicates whether the app may access the notes stored in contacts. You must [receive permission from Apple before you can submit your app for review with this capability.

`splash`

Type: `object` Path: `ios.splash`

Configuration for loading and splash screen for standalone iOS apps.

`backgroundColor`

Type: `string` Path: `ios.splash.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum` Path: `ios.splash.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover` or `contain`, defaults to `contain`.

`image`

Type: `string` Path: `ios.splash.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`tabletImage`

Type: `string` Path: `ios.splash.tabletImage`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`dark`

Type: `object` Path: `ios.splash.dark`

Configuration for loading and splash screen for standalone iOS apps in dark mode.

`backgroundColor`

Type: `string` Path: `ios.splash.dark.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum` Path: `ios.splash.dark.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover` or `contain`, defaults to `contain`.

`image`

Type: `string` Path: `ios.splash.dark.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`tabletImage`

Type: `string` Path: `ios.splash.dark.tabletImage`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`jsEngine`

Type: `enum` Path: `ios.jsEngine`

Specifies the JavaScript engine for iOS apps. Supported only on EAS Build. Defaults to `hermes`. Valid values: `hermes`, `jsc`.

Bare Workflow

To change the JavaScript engine, update the `expo.jsEngine` value in `ios/Podfile.properties.json`

`runtimeVersion`

One of types:

*   `string` matching the following pattern: `^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$`
*   `string` matching the following pattern: `^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$`
*   An `object` with the following properties:
```
`policy`

Type: `enum` Path: `ios.runtimeVersion.policy`

Valid values: `nativeVersion`, `sdkVersion`, `appVersion`, `fingerprint`.
```

Property indicating compatibility between an iOS build's native code and an OTA update for the iOS platform. If provided, this will override the value of the top level `runtimeVersion` key on iOS.

`android`

Type: `object`

Configuration that is specific to the Android platform.

`publishManifestPath`

Type: `string` Path: `android.publishManifestPath`

The manifest for the Android version of your app will be written to this path during publish.

`publishBundlePath`

Type: `string` Path: `android.publishBundlePath`

The bundle for the Android version of your app will be written to this path during publish.

`package`

Type: `string` Path: `android.package`

The package name for your Android standalone app. You make it up, but it needs to be unique on the Play Store. See [this StackOverflow question](http://stackoverflow.com/questions/6273892/android-package-name-convention).

Reverse DNS notation unique name for your app. Valid Android Application ID. For example, `com.example.app`, where `com.example` is our domain and `app` is our app. The name may only contain lowercase and uppercase letters (a-z, A-Z), numbers (0-9) and underscores (\_), separated by periods (.). Each component of the name should start with a lowercase letter.

Bare Workflow

This is set in `android/app/build.gradle` as `applicationId` as well as in your `AndroidManifest.xml` file (multiple places).

`versionCode`

Type: `integer` Path: `android.versionCode`

Version number required by Google Play. Increment by one for each release. Must be a positive integer. [Learn more

Bare Workflow

This is set in `android/app/build.gradle` as `versionCode`

`backgroundColor`

Type: `string` Path: `android.backgroundColor`

The background color for your Android app, behind any of your React views. Overrides the top-level `backgroundColor` key if it is present.

6 character long hex color string, for example, `'#000000'`

Bare Workflow

This is set in `android/app/src/main/AndroidManifest.xml` under `android:windowBackground`

`userInterfaceStyle`

Type: `enum` Path: `android.userInterfaceStyle`

Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to `light`. Requires `expo-system-ui` be installed in your project to work on Android.

`icon`

Type: `string` Path: `android.icon`

Local path or remote URL to an image to use for your app's icon on Android. If specified, this overrides the top-level `icon` key. We recommend that you use a 1024x1024 png file (transparency is recommended for the Google Play Store). This icon will appear on the home screen and within the Expo app.

`adaptiveIcon`

Type: `object` Path: `android.adaptiveIcon`

Settings for an Adaptive Launcher Icon on Android. [Learn more

`foregroundImage`

Type: `string` Path: `android.adaptiveIcon.foregroundImage`

Local path or remote URL to an image to use for your app's icon on Android. If specified, this overrides the top-level `icon` and the `android.icon` keys. Should follow the [specified guidelines. This icon will appear on the home screen.

`monochromeImage`

Type: `string` Path: `android.adaptiveIcon.monochromeImage`

Local path or remote URL to an image representing the Android 13+ monochromatic icon. Should follow the [specified guidelines. This icon will appear on the home screen when the user enables 'Themed icons' in system settings on a device running Android 13+.

`backgroundImage`

Type: `string` Path: `android.adaptiveIcon.backgroundImage`

Local path or remote URL to a background image for your app's Adaptive Icon on Android. If specified, this overrides the `backgroundColor` key. Must have the same dimensions as `foregroundImage`, and has no effect if `foregroundImage` is not specified. Should follow the [specified guidelines.

`backgroundColor`

Type: `string` Path: `android.adaptiveIcon.backgroundColor`

Color to use as the background for your app's Adaptive Icon on Android. Defaults to white, `#FFFFFF`. Has no effect if `foregroundImage` is not specified.

6 character long hex color string, for example, `'#000000'`

`playStoreUrl`

Type: `string` Path: `android.playStoreUrl`

URL to your app on the Google Play Store, if you have deployed it there. This is used to link to your store page from your Expo project page if your app is public.

Example

`"https://play.google.com/store/apps/details?id=host.exp.exponent"`

`permissions`

Type: `array` Path: `android.permissions`

A list of permissions to add to the app `AndroidManifest.xml` during prebuild. For example: `['android.permission.SCHEDULE_EXACT_ALARM']`

Bare Workflow

To change the permissions your app requests, edit `AndroidManifest.xml` directly. To prevent your app from requesting specific permissions (which may automatically be added through an installed native package), add those permissions to `AndroidManifest.xml` along with a `tools:node="remove"` tag.

`blockedPermissions`

Type: `array` Path: `android.blockedPermissions`

List of permissions to block in the final `AndroidManifest.xml`. This is useful for removing permissions that are added by native package `AndroidManifest.xml` files which are merged into the final manifest. Internally this feature uses the `tools:node="remove"` XML attribute to remove permissions. Not available in Expo Go.

`googleServicesFile`

Type: `string` Path: `android.googleServicesFile`

[Firebase Configuration File Location of the `google-services.json` file for configuring Firebase. Including this key automatically enables FCM in your standalone app.

Bare Workflow

Add or edit the file directly at `android/app/google-services.json`

`config`

Type: `object` Path: `android.config`

Note: This property key is not included in the production manifest and will evaluate to `undefined`. It is used internally only in the build process, because it contains API keys that some may want to keep private.

`branch`

Type: `object` Path: `android.config.branch`

[Branch key to hook up Branch linking services.

`apiKey`

Type: `string` Path: `android.config.branch.apiKey`

Your Branch API key

`googleMaps`

Type: `object` Path: `android.config.googleMaps`

[Google Maps Android SDK configuration for your standalone app.

`apiKey`

Type: `string` Path: `android.config.googleMaps.apiKey`

Your Google Maps Android SDK API key

`googleMobileAdsAppId`

Type: `string` Path: `android.config.googleMobileAdsAppId`

[Google Mobile Ads App ID Google AdMob App ID.

`googleMobileAdsAutoInit`

Type: `boolean` Path: `android.config.googleMobileAdsAutoInit`

A boolean indicating whether to initialize Google App Measurement and begin sending user-level event data to Google immediately when the app starts. The default in Expo (Client and in standalone apps) is `false`. [Sets the opposite of the given value to the following key in `Info.plist`

`splash`

Type: `object` Path: `android.splash`

Configuration for loading and splash screen for managed and standalone Android apps.

`backgroundColor`

Type: `string` Path: `android.splash.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum` Path: `android.splash.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover`, `contain` or `native`, defaults to `contain`.

`image`

Type: `string` Path: `android.splash.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`mdpi`

Type: `string` Path: `android.splash.mdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Natural sized image (baseline)`

`hdpi`

Type: `string` Path: `android.splash.hdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Scale 1.5x`

`xhdpi`

Type: `string` Path: `android.splash.xhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Scale 2x`

`xxhdpi`

Type: `string` Path: `android.splash.xxhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Scale 3x`

`xxxhdpi`

Type: `string` Path: `android.splash.xxxhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Scale 4x`

`dark`

Type: `object` Path: `android.splash.dark`

Configuration for loading and splash screen for managed and standalone Android apps in dark mode.

`backgroundColor`

Type: `string` Path: `android.splash.dark.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum` Path: `android.splash.dark.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover`, `contain` or `native`, defaults to `contain`.

`image`

Type: `string` Path: `android.splash.dark.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`mdpi`

Type: `string` Path: `android.splash.dark.mdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Natural sized image (baseline)`

`hdpi`

Type: `string` Path: `android.splash.dark.hdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Scale 1.5x`

`xhdpi`

Type: `string` Path: `android.splash.dark.xhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Scale 2x`

`xxhdpi`

Type: `string` Path: `android.splash.dark.xxhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Scale 3x`

`xxxhdpi`

Type: `string` Path: `android.splash.dark.xxxhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more

`Scale 4x`

`intentFilters`

Type: `array` Path: `android.intentFilters`

Configuration for setting an array of custom intent filters in Android manifest. [Learn more

Bare Workflow

This is set in `AndroidManifest.xml` directly. [Learn more.

Example

`[ { "autoVerify": true, "action": "VIEW", "data": { "scheme": "https", "host": "*.example.com" }, "category": [ "BROWSABLE", "DEFAULT" ] } ]`

`autoVerify`

Type: `boolean` Path: `android.intentFilters.autoVerify`

You may also use an intent filter to set your app as the default handler for links (without showing the user a dialog with options). To do so use `true` and then configure your server to serve a JSON file verifying that you own the domain. [Learn more

`action`

Type: `string` Path: `android.intentFilters.action`

`data`

Type: `undefined` Path: `android.intentFilters.data`

`category`

Type: `undefined` Path: `android.intentFilters.category`

`allowBackup`

Type: `boolean` Path: `android.allowBackup`

Allows your user's app data to be automatically backed up to their Google Drive. If this is set to false, no backup or restore of the application will ever be performed (this is useful if your app deals with sensitive information). Defaults to the Android default, which is `true`.

`softwareKeyboardLayoutMode`

Type: `enum` Path: `android.softwareKeyboardLayoutMode`

Determines how the software keyboard will impact the layout of your application. This maps to the `android:windowSoftInputMode` property. Defaults to `resize`. Valid values: `resize`, `pan`.

`jsEngine`

Type: `enum` Path: `android.jsEngine`

Specifies the JavaScript engine for Android apps. Supported only on EAS Build and in Expo Go. Defaults to `hermes`. Valid values: `hermes`, `jsc`.

Bare Workflow

To change the JavaScript engine, update the `expo.jsEngine` value in `android/gradle.properties`

`runtimeVersion`

One of types:

*   `string` matching the following pattern: `^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$`
*   `string` matching the following pattern: `^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$`
*   An `object` with the following properties:
```
`policy`

Type: `enum` Path: `android.runtimeVersion.policy`

Valid values: `nativeVersion`, `sdkVersion`, `appVersion`, `fingerprint`.
```

Property indicating compatibility between a Android build's native code and an OTA update for the Android platform. If provided, this will override the value of top level `runtimeVersion` key on Android.

`web`

Type: `object`

Configuration that is specific to the web platform.

`output`

Type: `enum` Path: `web.output`

Sets the export method for the web app for both `expo start` and `expo export`. `static` statically renders HTML files for every route in the `app/` directory, which is available only in Expo Router apps. `single` outputs a Single Page Application (SPA), with a single `index.html` in the output folder, and has no statically indexable HTML. `server` outputs static HTML, and API Routes for hosting with a custom Node.js server. Defaults to `single`.

`favicon`

Type: `string` Path: `web.favicon`

Relative path of an image to use for your app's favicon.

`name`

Type: `string` Path: `web.name`

Defines the title of the document, defaults to the outer level name

`shortName`

Type: `string` Path: `web.shortName`

A short version of the app's name, 12 characters or fewer. Used in app launcher and new tab pages. Maps to `short_name` in the PWA manifest.json. Defaults to the `name` property.

Maximum 12 characters long

`lang`

Type: `string` Path: `web.lang`

Specifies the primary language for the values in the name and short\_name members. This value is a string containing a single language tag.

`scope`

Type: `string` Path: `web.scope`

Defines the navigation scope of this website's context. This restricts what web pages can be viewed while the manifest is applied. If the user navigates outside the scope, it returns to a normal web page inside a browser tab/window. If the scope is a relative URL, the base URL will be the URL of the manifest.

`themeColor`

Type: `string` Path: `web.themeColor`

Defines the color of the Android tool bar, and may be reflected in the app's preview in task switchers.

6 character long hex color string, for example, `'#000000'`

`description`

Type: `string` Path: `web.description`

Provides a general description of what the pinned website does.

`dir`

Type: `enum` Path: `web.dir`

Specifies the primary text direction for the name, short\_name, and description members. Together with the lang member, it helps the correct display of right-to-left languages.

`display`

Type: `enum` Path: `web.display`

Defines the developers’ preferred display mode for the website.

`startUrl`

Type: `string` Path: `web.startUrl`

The URL that loads when a user launches the application (e.g., when added to home screen), typically the index. Note: This has to be a relative URL, relative to the manifest URL.

`orientation`

Type: `enum` Path: `web.orientation`

Defines the default orientation for all the website's top level browsing contexts.

`backgroundColor`

Type: `string` Path: `web.backgroundColor`

Defines the expected “background color” for the website. This value repeats what is already available in the site’s CSS, but can be used by browsers to draw the background color of a shortcut when the manifest is available before the stylesheet has loaded. This creates a smooth transition between launching the web application and loading the site's content.

6 character long hex color string, for example, `'#000000'`

`barStyle`

Type: `enum` Path: `web.barStyle`

If content is set to default, the status bar appears normal. If set to black, the status bar has a black background. If set to black-translucent, the status bar is black and translucent. If set to default or black, the web content is displayed below the status bar. If set to black-translucent, the web content is displayed on the entire screen, partially obscured by the status bar.

`preferRelatedApplications`

Type: `boolean` Path: `web.preferRelatedApplications`

Hints for the user agent to indicate to the user that the specified native applications (defined in expo.ios and expo.android) are recommended over the website.

`dangerous`

Type: `object` Path: `web.dangerous`

Experimental features. These will break without deprecation notice.

`splash`

Type: `object` Path: `web.splash`

Configuration for PWA splash screens.

Bare Workflow

Use [expo-splash-screen

`backgroundColor`

Type: `string` Path: `web.splash.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum` Path: `web.splash.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover` or `contain`, defaults to `contain`.

`image`

Type: `string` Path: `web.splash.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`config`

Type: `object` Path: `web.config`

Firebase web configuration. Used by the expo-firebase packages on both web and native. [Learn more

`firebase`

Type: `object` Path: `web.config.firebase`

`apiKey`

Type: `string` Path: `web.config.firebase.apiKey`

`authDomain`

Type: `string` Path: `web.config.firebase.authDomain`

`databaseURL`

Type: `string` Path: `web.config.firebase.databaseURL`

`projectId`

Type: `string` Path: `web.config.firebase.projectId`

`storageBucket`

Type: `string` Path: `web.config.firebase.storageBucket`

`messagingSenderId`

Type: `string` Path: `web.config.firebase.messagingSenderId`

`appId`

Type: `string` Path: `web.config.firebase.appId`

`measurementId`

Type: `string` Path: `web.config.firebase.measurementId`

`bundler`

Type: `enum` Path: `web.bundler`

Sets the bundler to use for the web platform. Only supported in the local CLI `npx expo`. Defaults to `webpack` if the `@expo/webpack-config` package is installed, if not, it defaults to `metro`.

`experiments`

Type: `object`

Enable experimental features that may be unstable, unsupported, or removed without deprecation notices.

`baseUrl`

Type: `string` Path: `experiments.baseUrl`

Export a website relative to a subpath of a domain. The path will be prepended as-is to links to all bundled resources. Prefix the path with a `/` (recommended) to load all resources relative to the server root. If the path does not start with a `/` then resources will be loaded relative to the code that requests them, this could lead to unexpected behavior. Example '/subpath'. Defaults to '' (empty string).

`supportsTVOnly`

Type: `boolean` Path: `experiments.supportsTVOnly`

If true, indicates that this project does not support tablets or handsets, and only supports Apple TV and Android TV

`tsconfigPaths`

Type: `boolean` Path: `experiments.tsconfigPaths`

Enable tsconfig/jsconfig `compilerOptions.paths` and `compilerOptions.baseUrl` support for import aliases in Metro.

`typedRoutes`

Type: `boolean` Path: `experiments.typedRoutes`

Enable support for statically typed links in Expo Router. This feature requires TypeScript be set up in your Expo Router v2 project.

`turboModules`

Type: `boolean` Path: `experiments.turboModules`

Enables Turbo Modules, which are a type of native modules that use a different way of communicating between JS and platform code. When installing a Turbo Module you will need to enable this experimental option (the library still needs to be a part of Expo SDK already, like react-native-reanimated v2). Turbo Modules do not support remote debugging and enabling this option will disable remote debugging.

`reactCanary`

Type: `boolean` Path: `experiments.reactCanary`

Experimentally use a vendored canary build of React for testing upcoming features.

`reactCompiler`

Type: `boolean` Path: `experiments.reactCompiler`

Experimentally enable React Compiler.

`_internal`

Type: `object`

Internal properties for developer tools

`pluginHistory`

Type: `object` Path: `_internal.pluginHistory`

List of plugins already run on the config

---

# metro.config.js

A reference of available configurations in Metro.

See more information about metro.config.js in the [customizing Metro guide.

## Environment variables

In SDK 49 and higher, the Expo CLI can load environment variables from .env files. Learn more about how to use environment variables in Expo CLI in the [environment variables guide.

EAS CLI uses a different mechanism for environment variables, except when it invokes Expo CLI for compiling and bundling. Learn more about [environment variables in EAS.

If you are migrating an older project to SDK 49 or above, then you should ignore local env files by adding the following to your .gitignore:

.gitignore

```
# local env files
.env*.local
```

### Disabling dotenv files

Dotenv file loading can be fully disabled in Expo CLI by enabling the `EXPO_NO_DOTENV` environment variable, before invoking any Expo CLI command.

`# All users can run cross-env, followed by the Expo CLI command`

`npx cross-env EXPO_NO_DOTENV=1 expo start`

`# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command`

`-` `EXPO_NO_DOTENV=1 npx expo start`

### Disabling `EXPO_PUBLIC_`\-prefixed client environment variables

Environment variables prefixed with `EXPO_PUBLIC_` will be exposed to the app at build-time. For example, `EXPO_PUBLIC_API_KEY` will be available as `process.env.EXPO_PUBLIC_API_KEY`.

Client environment variable inlining can be disabled with the environment variable `EXPO_NO_CLIENT_ENV_VARS=1`, this must be defined before any bundling is performed.

`# All users can run cross-env, followed by the Expo CLI command`

`npx cross-env EXPO_NO_CLIENT_ENV_VARS=1 expo start`

`# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command`

`-` `EXPO_NO_CLIENT_ENV_VARS=1 npx expo start`

## CSS

> CSS support is under development and currently only works on web.

Expo supports CSS in your project. You can import CSS files from any component. CSS Modules are also supported.

CSS support is enabled by default. You can disable the feature by setting `isCSSEnabled` in the Metro config.

metro.config.js

```
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // Disable CSS support.
  isCSSEnabled: false,
});
```

To enable CSS support, set `isCSSEnabled` to `true` in the Metro config.

metro.config.js

```
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  isCSSEnabled: true,
});
```

### Global CSS

> Global styles are web-only, usage will cause your application to diverge visually on native.

You can import a CSS file from any component. The CSS will be applied to the entire page.

Here, we'll define a global style for the class name `.container`:

styles.css

```
.container {
  background-color: red;
}
```

We can then use the class name in our component by importing the stylesheet and using `.container`:

App.js

```
import './styles.css';
import { View } from 'react-native';

export default function App() {
  return (
```
<>
  {/* Use `className` to assign the style with React DOM components. */}
  <div className="container">Hello World</div>
```
{/* Use `style` with the following syntax to append class names in React Native for web. */}
  <View
    style={{
      $$css: true,
      _: 'container',
    }}>
    Hello World
  </View>
</>
```
  );
}
```

You can also import stylesheets that are vendored in libraries, just like you would any node module:

index.js

```
// Applies the styles app-wide.
import 'emoji-mart/css/emoji-mart.css';
```

*   On native, all global stylesheets are automatically ignored.
*   Hot reloading is supported for global stylesheets, simply save the file and the changes will be applied.

### CSS Modules

> CSS Modules for native are under development and currently only work on web.

CSS Modules are a way to scope CSS to a specific component. This is useful for avoiding naming collisions and for ensuring that styles are only applied to the intended component.

In Expo, CSS Modules are defined by creating a file with the `.module.css` extension. The file can be imported from any component. The exported value is an object with the class names as keys and the web-only scoped names as the values. The import `unstable_styles` can be used to access `react-native-web`\-safe styles.

CSS Modules support platform extensions to allow you to define different styles for different platforms. For example, you can define a `module.ios.css` and `module.android.css` file to define styles for Android and iOS respectively. You'll need to import without the extension, for example:

App.js

```
// Importing `./App.module.ios.css`:
- import styles from './App.module.css';
+ import styles from './App.module';
```

Flipping the extension, for example, `App.ios.module.css` will not work and result in a universal module named `App.ios.module`.

> You cannot pass styles to the `className` prop of a React Native or React Native for web component. Instead, you must use the `style` prop.

App.js

```
import styles, { unstable_styles } from './App.module.css';

export default function Page() {
  return (
```
<>
  <Text
    style={{
      // This is how react-native-web class names are applied
      $$css: true,
      _: styles.text,
    }}>
    Hello World
  </Text>
  <Text style={unstable_styles.text}>Hello World</Text>
  {/* Web-only usage: */}
  <p className={styles.text}>Hello World</p>
</>
```
  );
}
```

App.module.css

```
.text {
  color: red;
}
```

*   On web, all CSS values are available. CSS is not processed or auto-prefixed like it is with the React Native Web `StyleSheet` API. You can use `postcss.config.js` to autoprefix your CSS.
*   CSS Modules use [lightningcss under the hood, check [the issues for unsupported features.

### PostCSS

> Changing the Post CSS or `browserslist` config will require you to clear the Metro cache: `npx expo start --clear` | `npx expo export --clear`.

[PostCSS can be customized by adding a `postcss.config.json` file to the root of your project. This file should export a function that returns a PostCSS configuration object. For example:

postcss.config.json

```
{
  "plugins": {
```
"autoprefixer": {}
```
  }
}
```

Both `postcss.config.json` and `postcss.config.js` are supported, but `postcss.config.json` enables better caching.

### SASS

Expo Metro has _partial_ support for SCSS/SASS.

To setup, install the `sass` package in your project:

`-` `yarn add -D sass`

Then, ensure [CSS is setup in the metro.config.js file.

*   When `sass` is installed, then modules without extensions will be resolved in the following order: `scss`, `sass`, `css`.
*   Only use the intended syntax with `sass` files.
*   Importing other files from inside a scss/sass file is not currently supported.

### Tailwind

> Standard Tailwind CSS supports only web platform. For universal support, use a library such as [NativeWind, which allows creating styled React Native components with Tailwind CSS.

Tailwind CSS

Learn how to configure and use Tailwind CSS in your Expo project.

## Extending the Babel transformer

Expo's Metro config uses a custom `transformer.babelTransformerPath` value to ensure `expo-babel-preset` is always used and web/Node.js environments are supported.

If you want to extend the Babel transformer, import the upstream transformer from `@expo/metro-config/babel-transformer` instead of `metro-react-native-babel-transformer`. For example:

metro.transformer.js

```
const upstreamTransformer = require('@expo/metro-config/babel-transformer');

module.exports.transform = async ({ src, filename, options }) => {
  // Do something custom for SVG files...
  if (filename.endsWith('.svg')) {
```
src = '...';
```
  }
  // Pass the source through the upstream Expo transformer.
  return upstreamTransformer.transform({ src, filename, options });
};
```

## Custom resolving

Expo CLI extends the default Metro resolver to add features like Web, Server, and tsconfig aliases support. You can similarly customize the default resolution behavior of Metro by chaining the `config.resolver.resolveRequest` function.

metro.config.js

```
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName.startsWith('my-custom-resolver:')) {
```
// Logic to resolve the module name to a file path...
// NOTE: Throw an error if there is no resolution.
return {
  filePath: 'path/to/file',
  type: 'sourceFile',
};
```
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
```

Unlike traditional bundlers, Metro shared the same resolver function across all platforms. As a result, you can mutate the resolution settings dynamically on each request with the `context` object.

### Mocking modules

If you want a module to be empty for a given platform, you can return a `type: 'empty'` object from the resolver. The following example will cause `lodash` to be empty on web:

metro.config.js

```
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (platform === 'web' && moduleName === 'lodash') {
```
return {
  type: 'empty',
};
```
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
```

This technique is equivalent to using empty externals in Webpack or Vite, but with the added benefit of being able to target specific platforms.

### Virtual modules

Metro doesn't support virtual modules at the moment. One technique you can use to obtain similar behavior is to create a module in the `node_modules/.cache/...` directory and redirect the resolution to that file.

The following example will create a module at `node_modules/.cache/virtual/virtual-module.js` and redirect the resolution of `virtual:my-module` to that file:

metro.config.js

```
const path = require('path');
const fs = require('fs');

const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

const virtualPath = path.resolve(__dirname, 'node_modules/.cache/virtual/virtual-module.js');

// Create the virtual module in a generated directory...
fs.mkdirSync(path.dirname(virtualPath), { recursive: true });
fs.writeFileSync(virtualPath, 'export default "Hello World";');

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName === 'virtual:my-module') {
```
return {
  filePath: virtualPath,
  type: 'sourceFile',
};
```
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
```

This can be used to emulate `externals` with custom imports. For example, if you want to redirect `require('expo')` to something custom like `SystemJS.require('expo')`, you can create a virtual module that exports `SystemJS.require('expo')` and redirect the resolution of `expo` to that file.

## Custom transforming

> Transformations are heavily cached in Metro. If you update something, use the `--clear` flag to see updates. For example, `npx expo start --clear`.

Metro doesn't have a very expressive plugin system for transforming files, instead opt to use the babel.config.js and caller object to customize the transformation.

babel.config.js

```
module.exports = function (api) {
  // Get the platform that Expo CLI is transforming for.
  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));

  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.
  const engine = api.caller(caller => (caller ? caller.engine : null));

  // Is bundling for a server environment, e.g. API Routes.
  const isServer = api.caller(caller => (caller ? caller.isServer : false));

  // Is bundling for development or production.
  const isDev = api.caller(caller =>
```
caller
  ? caller.isDev
  : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'
```
  );

  // Ensure the config is not cached otherwise the platform will not be updated.
  api.cache(false);
  // You can alternatively provide a more robust CONFIG cache invalidation:
  // api.cache.invalidate(() => platform);

  return {
```
presets: ['babel-preset-expo'],
plugins:   // Add a plugin based on the platform...
  platform === 'web' && 'my-plugin',
```
// Ensure you filter out falsy values.
].filter(Boolean),
```
  };
};
```

If the caller doesn't have `engine`, `platform`, `bundler`, and so on, then ensure you are using `@expo/metro-config/babel-transformer` for the transformer. If you're using a custom transformer then it may need to extend the Expo transformer.

Always try to implement custom logic in the resolver if possible, caching is much simpler and easier to reason about. For example, if you need to remap an import, it's simpler and faster to resolve to a static file with the resolver than to parse all possible import methods and remap them with the transformer.

Always use `babel-preset-expo` as the default Babel preset, this ensures the transformation is always compatible with Expo runtimes. `babel-preset-expo` uses all of the caller inputs internally to optimize for a given platform, engine, and environment.

## Node.js built-ins

When bundling for a server environment, Expo's Metro config automatically supports externalizing Node.js built-in modules (`fs`, `path`, `node:crypto`, and more) based on the current Node.js version. If the CLI is bundling for a browser environment, then built-ins will first check if the module is installed locally, then fallback on an empty shim. For example, if you install `path` for use in the browser, this can be used, otherwise, the module will automatically be skipped.

## Environment settings

Expo's Metro config injects build settings that can be used in the client bundle via environment variables. All variables will be inlined and cannot be used dynamically. For example, `process.env["EXPO_BASE_URL"]` won't work.

*   `process.env.EXPO_BASE_URL` exposes the base URL defined in `experiments.baseUrl`. This is used in Expo Router to respect the production base URL for deployment.

> These environment variables will not be defined in test environments!

## Bundle splitting

> This feature is web-only in SDK 50.

In SDK 50, Expo CLI automatically splits web bundles into multiple chunks based on async imports in production. This feature requires `@expo/metro-runtime` to be installed and imported somewhere in the entry bundle (available by default in Expo Router).

Shared dependencies of async bundles are merged into a single chunk to reduce the number of requests. For example, if you have two async bundles that import `lodash`, then the library is merged into a single initial chunk.

As of SDK 50, the chunk splitting heuristic cannot be customized. For example:

`math.js`

`index.js`

math.js

```
export function add(a, b) {
  return a + b;
}
```

index.js

```
import '@expo/metro-runtime';

// This will be split into a separate chunk.
import('./math').then(math => {
  console.log(math.add(1, 2));
});
```

When you run `npx expo export -p web`, the bundles are split into multiple files, and the entry bundle is added to the main HTML file. `@expo/metro-runtime` adds the runtime code that loads and evaluates the async bundles.

## Source map debug ID

> Available from SDK 50 on all platforms.

If a bundle is exported with an external source map, a [Debug ID annotation will be added to the end of the file, along with a matching `debugId` in the source map for corresponding the files together. If no source maps are exported, or inline source maps are used then this annotation will not be added.

```
// <all source code>

//# debugId=<deterministic chunk hash>
```

The associated `*.js.map` or `*.hbc.map` source map will be a JSON file containing an equivalent `debugId` property. The `debugId` will be injected before hermes bytecode generation to ensure matching in all cases.

The `debugId` is a deterministic hash of the bundle's contents without the external bundle splitting references. This is the same value used to create a chunks filename but formatted as a UUID. For example, `431b98e2-c997-4975-a3d9-2987710abd44`.

`@expo/metro-config` injects `debugId` during `npx expo export` and `npx expo export:embed`. Any additional optimization steps in `npx expo export:embed` like Hermes bytecode generation will need to have the `debugId` injected manually.

## Bare workflow setup

> This guide is versioned and will need to be revisited when upgrading/downgrading Expo. Alternatively, use [Expo Prebuild for fully automated setup.

Projects that don't use [Expo Prebuild must configure native files to ensure the Expo Metro config is always used to bundle the project.

These modifications are meant to replace `npx react-native bundle` and `npx react-native start` with `npx expo export:embed` and `npx expo start` respectively.

### metro.config.js

Ensure the metro.config.js extends `expo/metro-config`:

```
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

module.exports = config;
```

### `android/app/build.gradle`

The Android `app/build.gradle` must be configured to use Expo CLI for production bundling. Modify the `react` config object:

```
react {
  ...
+     // Use Expo CLI to bundle the app, this ensures the Metro config
+     // works correctly with Expo projects.
+     cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
+     bundleCommand = "export:embed"
}
```

### `ios/<Project>.xcodeproj/project.pbxproj`

In your `ios/<Project>.xcodeproj/project.pbxproj` file, replace the following scripts:

#### `"Start Packager"`

Remove the "Start Packager" script in SDK 50 and higher. The dev server must be started with `npx expo` before/after running the app.

```
-    FD10A7F022414F080027D42C /* Start Packager */ = {
-			isa = PBXShellScriptBuildPhase;
-			alwaysOutOfDate = 1;
-			buildActionMask = 2147483647;
-			files = (
-			);
-			inputFileListPaths = (
-			);
-			inputPaths = (
-			);
-			name = "Start Packager";
-			outputFileListPaths = (
-			);
-			outputPaths = (
-			);
-			runOnlyForDeploymentPostprocessing = 0;
-			shellPath = /bin/sh;
-			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.updates\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.updates\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\nexport RCT_METRO_PORT=\"${RCT_METRO_PORT:=8081}\"\necho \"export RCT_METRO_PORT=${RCT_METRO_PORT}\" > `$NODE_BINARY --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/.packager.env'\"`\nif [ -z \"${RCT_NO_LAUNCH_PACKAGER+xxx}\" ] ; then\n  if nc -w 5 -z localhost ${RCT_METRO_PORT} ; then\n    if ! curl -s \"http://localhost:${RCT_METRO_PORT}/status\" | grep -q \"packager-status:running\" ; then\n      echo \"Port ${RCT_METRO_PORT} already in use, packager is either not running or not running correctly\"\n      exit 2\n    fi\n  else\n    open `$NODE_BINARY --print \"require('path').dirname(require.resolve('expo/package.json')) + '/scripts/launchPackager.command'\"` || echo \"Can't start packager automatically\"\n  fi\nfi\n";
-			showEnvVarsInLog = 0;
-		};
```

#### "Bundle React Native code and images"

```
+			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n";
```

Alternatively, in the Xcode project, select the "Bundle React Native code and images" build phase and add the following modifications:

```
if [[ -f "$PODS_ROOT/../.xcode.env" ]]; then
  source "$PODS_ROOT/../.xcode.env"
fi
if [[ -f "$PODS_ROOT/../.xcode.env.local" ]]; then
  source "$PODS_ROOT/../.xcode.env.local"
fi

# The project root by default is one level up from the ios directory
export PROJECT_ROOT="$PROJECT_DIR"/..

if [[ "$CONFIGURATION" = *Debug* ]]; then
  export SKIP_BUNDLING=1
fi
+ if [[ -z "$ENTRY_FILE" ]]; then
+   # Set the entry JS file using the bundler's entry resolution.
+   export ENTRY_FILE="$("$NODE_BINARY" -e "require('expo/scripts/resolveAppEntry')" "$PROJECT_ROOT" ios absolute | tail -n 1)"
+ fi

+ if [[ -z "$CLI_PATH" ]]; then
+   # Use Expo CLI
+   export CLI_PATH="$("$NODE_BINARY" --print "require.resolve('@expo/cli')")"
+ fi
+ if [[ -z "$BUNDLE_COMMAND" ]]; then
+   # Default Expo CLI command for bundling
+   export BUNDLE_COMMAND="export:embed"
+ fi

`"$NODE_BINARY" --print "require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'"`
```

> You can set `CLI_PATH`, `BUNDLE_COMMAND`, and `ENTRY_FILE` environment variables to overwrite these defaults.

### Custom entry file

By default, React Native only supports using a root `index.js` file as the entry file (or platform-specific variation like `index.ios.js`). Expo projects allow using any entry file, but this requires addition bare setup.

#### Development

Development mode entry files can be enabled by using the [`expo-dev-client` package. Alternatively you can add the following configuration:

In the `ios/[project]/AppDelegate.mm` file:

```
- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
{
#if DEBUG
-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index"];
+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@".expo/.virtual-metro-entry"];
#else
  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
#endif
}
```

In the `android/app/src/main/java/**/MainApplication.java`:

```
@Override
protected String getJSMainModuleName() {
-  return "index";
+  return ".expo/.virtual-metro-entry";
}
```

#### Production

In your `ios/<Project>.xcodeproj/project.pbxproj` file, replace the `"Bundle React Native code and images"` script to set `$ENTRY_FILE` according using Metro:

```
+			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n";
```

The Android `app/build.gradle` must be configured to use Metro module resolution to find the root entry file. Modify the `react` config object:

```
+ def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
+    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
}
```

---

# Expo Accelerometer

`Accelerometer` from `expo-sensors` provides access to the device accelerometer sensor(s) and associated listeners to respond to changes in acceleration in three-dimensional space, meaning any movement or vibration.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic Accelerometer usage

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Accelerometer } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
```
x: 0,
y: 0,
z: 0,
```
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Accelerometer.setUpdateInterval(1000);
  const _fast = () => Accelerometer.setUpdateInterval(16);

  const _subscribe = () => {
```
setSubscription(Accelerometer.addListener(setData));
```
  };

  const _unsubscribe = () => {
```
subscription && subscription.remove();
setSubscription(null);
```
  };

  useEffect(() => {
```
_subscribe();
return () => _unsubscribe();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>
  <Text style={styles.text}>x: {x}</Text>
  <Text style={styles.text}>y: {y}</Text>
  <Text style={styles.text}>z: {z}</Text>
  <View style={styles.buttonContainer}>
    <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
      <Text>{subscription ? 'On' : 'Off'}</Text>
    </TouchableOpacity>
    <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
      <Text>Slow</Text>
    </TouchableOpacity>
    <TouchableOpacity onPress={_fast} style={styles.button}>
      <Text>Fast</Text>
    </TouchableOpacity>
  </View>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
paddingHorizontal: 20,
```
  },
  text: {
```
textAlign: 'center',
```
  },
  buttonContainer: {
```
flexDirection: 'row',
alignItems: 'stretch',
marginTop: 15,
```
  },
  button: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
backgroundColor: '#eee',
padding: 10,
```
  },
  middleButton: {
```
borderLeftWidth: 1,
borderRightWidth: 1,
borderColor: '#ccc',
```
  },
});
```

## API

```
import { Accelerometer } from 'expo-sensors';
```

## Classes

### `Accelerometer`

Type: Class extends `[DeviceSensor<[AccelerometerMeasurement](#accelerometermeasurement)>`

A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type `Measurement`.

Accelerometer Methods

### `addListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `Listener<[AccelerometerMeasurement](#accelerometermeasurement)>` |
A callback that is invoked when an accelerometer update is available. When invoked, the listener is provided a single argument that is an `AccelerometerMeasurement` object.

 |

Subscribe for updates to the accelerometer.

Returns:

`[Subscription](#subscription)`

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

Returns:

`number`

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

Returns:

`boolean`

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Returns whether the accelerometer is enabled on the device.

On mobile web, you must first invoke `Accelerometer.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module. If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.

On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as `DeviceMotion` is now considered a secure API. There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.

Returns:

`[Promise<boolean>`

A promise that resolves to a `boolean` denoting the availability of the accelerometer.

### `removeAllListeners()`

Removes all registered listeners.

Returns:

`void`

### `removeSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
A subscription to remove.

 |

Removes the given subscription.

Returns:

`void`

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `setUpdateInterval(intervalMs)`

| Parameter | Type | Description |
| --- | --- | --- |
| intervalMs | `number` |
Desired interval in milliseconds between sensor updates.

> Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
>
> If you need an update interval less than 200ms, you should:
>
> *   add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [app.json `permissions` field
> *   or if you are using bare workflow, add `<uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/>` to AndroidManifest.xml.

 |

Set the sensor update interval.

Returns:

`void`

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `AccelerometerMeasurement`

Each of these keys represents the acceleration along that particular axis in g-force (measured in `g`s).

A `g` is a unit of gravitational force equal to that exerted by the earth’s gravitational field (`9.81 m/s^2`).

| Property | Type | Description |
| --- | --- | --- |
| timestamp | `number` |
Timestamp of the measurement in seconds.

 |
| x | `number` |

Value of `g`s device reported in X axis.

 |
| y | `number` |

Value of `g`s device reported in Y axis.

 |
| z | `number` |

Value of `g`s device reported in Z axis.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

---

# Expo AppleAuthentication

`expo-apple-authentication` provides Apple authentication for iOS. It does not yet support Android or web.

Any app that includes third-party authentication options must provide Apple authentication as an option to comply with App Store Review guidelines. For more information, see Apple authentication on the [Sign In with Apple website.

## Installation

`npx expo install expo-apple-authentication`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-apple-authentication` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.

### Setup iOS project

To enable the Sign In with Apple capability in your app, set the [`ios.usesAppleSignIn` property to `true` in your project's app config:

app.json

```
{
  "expo": {
```
"ios": {
  "usesAppleSignIn": true
}
```
  }
}
```

### Example app.json with config plugin

Running [EAS Build locally will use [iOS capabilities signing to enable the required capabilities before building.

app.json

```
{
  "expo": {
```
"plugins": ["expo-apple-authentication"]
```
  }
}
```

Are you using this library in an existing React Native app?

Apps that don't use [EAS Build must [manually configure the Apple Sign In capability for their bundle identifier.

If you enable the Apple Sign In capability through the [Apple Developer Console, then be sure to add the following entitlements in your ios/\[app\]/\[app\].entitlements file:

```
<key>com.apple.developer.applesignin</key>
<array>
  <string>Default</string>
</array>
```

Also, set `CFBundleAllowMixedLocalizations` to `true` in your ios/\[app\]/Info.plist to ensure the sign-in button uses the device locale.

## Usage

Apple Authentication Usage

```
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
```
<View style={styles.container}>
  <AppleAuthentication.AppleAuthenticationButton
    buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
    buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
    cornerRadius={5}
    style={styles.button}
    onPress={async () => {
      try {
        const credential = await AppleAuthentication.signInAsync({
          requestedScopes:             AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
            AppleAuthentication.AppleAuthenticationScope.EMAIL,
          ],
        });
        // signed in
      } catch (e) {
        if (e.code === 'ERR_REQUEST_CANCELED') {
          // handle that the user canceled the sign-in flow
        } else {
          // handle other errors
        }
      }
    }}
  />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
```
  },
  button: {
```
width: 200,
height: 44,
```
  },
});
```

## Development and testing

You can test this library in Expo Go on iOS without following any of the instructions above. However, you'll need to add the config plugin to use this library if you are using EAS Build. When you sign into Expo Go, the identifiers and values you receive will likely be different than what you'll receive in standalone apps.

You can do limited testing of this library on the iOS Simulator. However, not all methods will behave the same as on a device, so we highly recommend testing on a real device when possible while developing.

## Verifying the Response from Apple

Apple's response includes a signed JWT with information about the user. To ensure that the response came from Apple, you can cryptographically verify the signature with Apple's public key, which is published at [https://appleid.apple.com/auth/keys. This process is not specific to Expo.

## API

```
import * as AppleAuthentication from 'expo-apple-authentication';
```

## Component

### `AppleAuthenticationButton`

Type: `React.Element<[AppleAuthenticationButtonProps](#appleauthenticationbuttonprops)>`

This component displays the proprietary "Sign In with Apple" / "Continue with Apple" button on your screen. The App Store Guidelines require you to use this component to start the authentication process instead of a custom button. Limited customization of the button is available via the provided properties.

You should only attempt to render this if `AppleAuthentication.isAvailableAsync()` resolves to `true`. This component will render nothing if it is not available, and you will get a warning in development mode (`__DEV__ === true`).

The properties of this component extend from `View`; however, you should not attempt to set `backgroundColor` or `borderRadius` with the `style` property. This will not work and is against the App Store Guidelines. Instead, you should use the `buttonStyle` property to choose one of the predefined color styles and the `cornerRadius` property to change the border radius of the button.

Make sure to attach height and width via the style props as without these styles, the button will not appear on the screen.

> See: [Apple Documentation for more details.

AppleAuthenticationButtonProps

### `buttonStyle`

Type: `[AppleAuthenticationButtonStyle](#appleauthenticationbuttonstyle)`

The Apple-defined color scheme to use to display the button.

### `buttonType`

Type: `[AppleAuthenticationButtonType](#appleauthenticationbuttontype)`

The type of button text to display ("Sign In with Apple" vs. "Continue with Apple").

### `cornerRadius`

Optional Type: `number`

The border radius to use when rendering the button. This works similarly to `style.borderRadius` in other Views.

### `onPress`

Type: `() => void`

The method to call when the user presses the button. You should call `AppleAuthentication.signInAsync` in here.

### `style`

Optional Type: `StyleProp<[Omit<[ViewStyle, 'backgroundColor' | 'borderRadius'>>`

The custom style to apply to the button. Should not include `backgroundColor` or `borderRadius` properties.

#### Inherited Props

*   `[ViewProps`

## Methods

### `AppleAuthentication.getCredentialStateAsync(user)`

| Parameter | Type | Description |
| --- | --- | --- |
| user | `string` |
The unique identifier for the user whose credential state you'd like to check. This should come from the user field of an `AppleAuthenticationCredential` object.

 |

Queries the current state of a user credential, to determine if it is still valid or if it has been revoked.

> Note: This method must be tested on a real device. On the iOS simulator it always throws an error.

Returns:

`[Promise<[AppleAuthenticationCredentialState](#appleauthenticationcredentialstate)>`

A promise that fulfills with an `AppleAuthenticationCredentialState` value depending on the state of the credential.

### `AppleAuthentication.isAvailableAsync()`

Determine if the current device's operating system supports Apple authentication.

Returns:

`[Promise<boolean>`

A promise that fulfills with `true` if the system supports Apple authentication, and `false` otherwise.

### `AppleAuthentication.refreshAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options | `[AppleAuthenticationRefreshOptions](#appleauthenticationrefreshoptions)` |
An `AppleAuthenticationRefreshOptions` object

 |

An operation that refreshes the logged-in user’s credentials. Calling this method will show the sign in modal before actually refreshing the user credentials.

Returns:

`[Promise<[AppleAuthenticationCredential](#appleauthenticationcredential)>`

A promise that fulfills with an `AppleAuthenticationCredential` object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the refresh operation.

### `AppleAuthentication.signInAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[AppleAuthenticationSignInOptions](#appleauthenticationsigninoptions)` |
An optional `AppleAuthenticationSignInOptions` object

 |

Sends a request to the operating system to initiate the Apple authentication flow, which will present a modal to the user over your app and allow them to sign in.

You can request access to the user's full name and email address in this method, which allows you to personalize your UI for signed in users. However, users can deny access to either or both of these options at runtime.

Additionally, you will only receive Apple Authentication Credentials the first time users sign into your app, so you must store it for later use. It's best to store this information either server-side, or using [SecureStore, so that the data persists across app installs. You can use `AppleAuthenticationCredential.user` to identify the user, since this remains the same for apps released by the same developer.

Returns:

`[Promise<[AppleAuthenticationCredential](#appleauthenticationcredential)>`

A promise that fulfills with an `AppleAuthenticationCredential` object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the sign-in operation.

### `AppleAuthentication.signOutAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options | `[AppleAuthenticationSignOutOptions](#appleauthenticationsignoutoptions)` |
An `AppleAuthenticationSignOutOptions` object

 |

An operation that ends the authenticated session. Calling this method will show the sign in modal before actually signing the user out.

It is not recommended to use this method to sign out the user as it works counterintuitively. Instead of using this method it is recommended to simply clear all the user's data collected from using [`signInAsync` or [`refreshAsync` methods.

Returns:

`[Promise<[AppleAuthenticationCredential](#appleauthenticationcredential)>`

A promise that fulfills with an `AppleAuthenticationCredential` object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the sign-out operation.

## Event Subscriptions

### `AppleAuthentication.addRevokeListener(listener)`

| Parameter | Type |
| --- | --- |
| listener | `() => void` |

Returns:

`[Subscription](#subscription)`

## Types

### `AppleAuthenticationCredential`

The object type returned from a successful call to `AppleAuthentication.signInAsync()`, `AppleAuthentication.refreshAsync()`, or `AppleAuthentication.signOutAsync()` which contains all of the pertinent user and credential information.

> See: [Apple Documentation for more details.

| Property | Type | Description |
| --- | --- | --- |
| authorizationCode | `string | null` |
A short-lived session token used by your app for proof of authorization when interacting with the app's server counterpart. Unlike `user`, this is ephemeral and will change each session.

 |
| email | `string | null` |

The user's email address. Might not be present if you didn't request the `EMAIL` scope. May also be null if this is not the first time the user has signed into your app. If the user chose to withhold their email address, this field will instead contain an obscured email address with an Apple domain.

 |
| fullName | `[AppleAuthenticationFullName](#appleauthenticationfullname) | null` |

The user's name. May be `null` or contain `null` values if you didn't request the `FULL_NAME` scope, if the user denied access, or if this is not the first time the user has signed into your app.

 |
| identityToken | `string | null` |

A JSON Web Token (JWT) that securely communicates information about the user to your app.

 |
| realUserStatus | `[AppleAuthenticationUserDetectionStatus](#appleauthenticationuserdetectionstatus)` |

A value that indicates whether the user appears to the system to be a real person.

 |
| state | `string | null` |

An arbitrary string that your app provided as `state` in the request that generated the credential. Used to verify that the response was from the request you made. Can be used to avoid replay attacks. If you did not provide `state` when making the sign-in request, this field will be `null`.

 |
| user | `string` |

An identifier associated with the authenticated user. You can use this to check if the user is still authenticated later. This is stable and can be shared across apps released under the same development team. The same user will have a different identifier for apps released by other developers.

 |

### `AppleAuthenticationFullName`

An object representing the tokenized portions of the user's full name. Any of all of the fields may be `null`. Only applicable fields that the user has allowed your app to access will be nonnull.

| Property | Type | Description |
| --- | --- | --- |
| familyName | `string | null` |
\-

 |
| givenName | `string | null` |

\-

 |
| middleName | `string | null` |

\-

 |
| namePrefix | `string | null` |

\-

 |
| nameSuffix | `string | null` |

\-

 |
| nickname | `string | null` |

\-

 |

### `AppleAuthenticationRefreshOptions`

The options you can supply when making a call to `AppleAuthentication.refreshAsync()`. You must include the ID string of the user whose credentials you'd like to refresh.

> See: [Apple Documentation for more details.

| Property | Type | Description |
| --- | --- | --- |
| requestedScopes(optional) | `[AppleAuthenticationScope](#appleauthenticationscope)` |
Array of user information scopes to which your app is requesting access. Note that the user can choose to deny your app access to any scope at the time of logging in. You will still need to handle `null` values for any scopes you request. Additionally, note that the requested scopes will only be provided to you the first time each user signs into your app; in subsequent requests they will be `null`. Defaults to `` (no scopes).

 |
| state(optional) | `string` |

An arbitrary string that is returned unmodified in the corresponding credential after a successful authentication. This can be used to verify that the response was from the request you made and avoid replay attacks. More information on this property is available in the OAuth 2.0 protocol [RFC6749.

 |
| user | `string` |

\-

 |

### `AppleAuthenticationSignInOptions`

The options you can supply when making a call to `AppleAuthentication.signInAsync()`. None of these options are required.

> See: [Apple Documentation for more details.

| Property | Type | Description |
| --- | --- | --- |
| nonce(optional) | `string` |
An arbitrary string that is used to prevent replay attacks. See more information on this in the [OpenID Connect specification.

 |
| requestedScopes(optional) | `[AppleAuthenticationScope](#appleauthenticationscope)` |

Array of user information scopes to which your app is requesting access. Note that the user can choose to deny your app access to any scope at the time of logging in. You will still need to handle `null` values for any scopes you request. Additionally, note that the requested scopes will only be provided to you the first time each user signs into your app; in subsequent requests they will be `null`. Defaults to `` (no scopes).

 |
| state(optional) | `string` |

An arbitrary string that is returned unmodified in the corresponding credential after a successful authentication. This can be used to verify that the response was from the request you made and avoid replay attacks. More information on this property is available in the OAuth 2.0 protocol [RFC6749.

 |

### `AppleAuthenticationSignOutOptions`

The options you can supply when making a call to `AppleAuthentication.signOutAsync()`. You must include the ID string of the user to sign out.

> See: [Apple Documentation for more details.

| Property | Type | Description |
| --- | --- | --- |
| state(optional) | `string` |
An arbitrary string that is returned unmodified in the corresponding credential after a successful authentication. This can be used to verify that the response was from the request you made and avoid replay attacks. More information on this property is available in the OAuth 2.0 protocol [RFC6749.

 |
| user | `string` |

\-

 |

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `AppleAuthenticationButtonStyle`

An enum whose values control which pre-defined color scheme to use when rendering an `AppleAuthenticationButton`.

#### `WHITE`

`AppleAuthenticationButtonStyle.WHITE ＝ 0`

White button with black text.

#### `WHITE_OUTLINE`

`AppleAuthenticationButtonStyle.WHITE_OUTLINE ＝ 1`

White button with a black outline and black text.

#### `BLACK`

`AppleAuthenticationButtonStyle.BLACK ＝ 2`

Black button with white text.

### `AppleAuthenticationButtonType`

An enum whose values control which pre-defined text to use when rendering an `AppleAuthenticationButton`.

#### `SIGN_IN`

`AppleAuthenticationButtonType.SIGN_IN ＝ 0`

"Sign in with Apple"

#### `CONTINUE`

`AppleAuthenticationButtonType.CONTINUE ＝ 1`

"Continue with Apple"

#### `SIGN_UP`

Only for: iOS 13.2+

`AppleAuthenticationButtonType.SIGN_UP ＝ 2`

"Sign up with Apple"

### `AppleAuthenticationCredentialState`

An enum whose values specify state of the credential when checked with `AppleAuthentication.getCredentialStateAsync()`.

> See: [Apple Documentation for more details.

#### `REVOKED`

`AppleAuthenticationCredentialState.REVOKED ＝ 0`

#### `AUTHORIZED`

`AppleAuthenticationCredentialState.AUTHORIZED ＝ 1`

#### `NOT_FOUND`

`AppleAuthenticationCredentialState.NOT_FOUND ＝ 2`

#### `TRANSFERRED`

`AppleAuthenticationCredentialState.TRANSFERRED ＝ 3`

### `AppleAuthenticationOperation`

#### `IMPLICIT`

`AppleAuthenticationOperation.IMPLICIT ＝ 0`

An operation that depends on the particular kind of credential provider.

#### `LOGIN`

`AppleAuthenticationOperation.LOGIN ＝ 1`

#### `REFRESH`

`AppleAuthenticationOperation.REFRESH ＝ 2`

#### `LOGOUT`

`AppleAuthenticationOperation.LOGOUT ＝ 3`

### `AppleAuthenticationScope`

An enum whose values specify scopes you can request when calling `AppleAuthentication.signInAsync()`.

> Note that it is possible that you will not be granted all of the scopes which you request. You will still need to handle null values for any fields you request.

> See: [Apple Documentation for more details.

#### `FULL_NAME`

`AppleAuthenticationScope.FULL_NAME ＝ 0`

#### `EMAIL`

`AppleAuthenticationScope.EMAIL ＝ 1`

### `AppleAuthenticationUserDetectionStatus`

An enum whose values specify the system's best guess for how likely the current user is a real person.

> See: [Apple Documentation for more details.

#### `UNSUPPORTED`

`AppleAuthenticationUserDetectionStatus.UNSUPPORTED ＝ 0`

The system does not support this determination and there is no data.

#### `UNKNOWN`

`AppleAuthenticationUserDetectionStatus.UNKNOWN ＝ 1`

The system has not determined whether the user might be a real person.

#### `LIKELY_REAL`

`AppleAuthenticationUserDetectionStatus.LIKELY_REAL ＝ 2`

The user appears to be a real person.

## Error codes

Most of the error codes match the official [Apple Authorization errors.

| Code | Description |
| --- | --- |
| ERR\_INVALID\_OPERATION | An invalid authorization operation has been performed. |
| ERR\_INVALID\_RESPONSE | The authorization request received an invalid response. |
| ERR\_INVALID\_SCOPE | An invalid [`AppleAuthenticationScope` was passed in. |
| ERR\_REQUEST\_CANCELED | The user canceled the authorization attempt. |
| ERR\_REQUEST\_FAILED | The authorization attempt failed. See the error message for additional information. |
| ERR\_REQUEST\_NOT\_HANDLED | The authorization request wasn't correctly handled. |
| ERR\_REQUEST\_NOT\_INTERACTIVE | The authorization request isn't interactive. |
| ERR\_REQUEST\_UNKNOWN | The authorization attempt failed for an unknown reason. |

---

# Expo Application

`expo-application` provides useful information about the native application's ID, app name, and build version at runtime.

## Installation

`npx expo install expo-application`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as Application from 'expo-application';
```

## Constants

### `Application.applicationId`

Type: `string | null`

The ID of the application. On Android, this is the application ID. On iOS, this is the bundle ID. On web, this is `null`.

Example

`"com.cocoacasts.scribbles"`, `"com.apple.Pages"`

### `Application.applicationName`

Type: `string | null`

The human-readable name of the application that is displayed with the app's icon on the device's home screen or desktop. On Android and iOS, this value is a `string` unless the name could not be retrieved, in which case this value will be `null`. On web this value is `null`.

Example

`"Expo"`, `"Yelp"`, `"Instagram"`

### `Application.nativeApplicationVersion`

Type: `string | null`

The human-readable version of the native application that may be displayed in the app store. This is the `Info.plist` value for `CFBundleShortVersionString` on iOS and the version name set by `version` in `app.json` on Android at the time the native app was built. On web, this value is `null`.

Example

`"2.11.0"`

### `Application.nativeBuildVersion`

Type: `string | null`

The internal build version of the native application that the app store may use to distinguish between different binaries. This is the `Info.plist` value for `CFBundleVersion` on iOS (set with `ios.buildNumber` value in `app.json` in a standalone app) and the version code set by `android.versionCode` in `app.json` on Android at the time the native app was built. On web, this value is `null`. The return type on Android and iOS is `string`.

Example

Android: `"114"`, iOS: `"2.11.0"`

## Methods

### `Application.getAndroidId()`

Only for: Android

Gets the value of [`Settings.Secure.ANDROID_ID`. This is a hexadecimal `string` unique to each combination of app-signing key, user, and device. The value may change if a factory reset is performed on the device or if an APK signing key changes. For more information about how the platform handles `ANDROID_ID` in Android 8.0 (API level 26) and higher, see [Android 8.0 Behavior Changes. On iOS and web, this function is unavailable.

> In versions of the platform lower than Android 8.0 (API level 26), this value remains constant for the lifetime of the user's device. See the [ANDROID\_ID official docs for more information.

Returns:

`string`

Example

`"dd96dec43fb81c97"`

### `Application.getInstallReferrerAsync()`

Only for: Android

Gets the referrer URL of the installed app with the [`Install Referrer API` from the Google Play Store. In practice, the referrer URL may not be a complete, absolute URL.

Returns:

`[Promise<string>`

A `Promise` that fulfills with a `string` of the referrer URL of the installed app.

Example

```
await Application.getInstallReferrerAsync();
// "utm_source=google-play&utm_medium=organic"
```

### `Application.getInstallationTimeAsync()`

Gets the time the app was installed onto the device, not counting subsequent updates. If the app is uninstalled and reinstalled, this method returns the time the app was reinstalled.

*   On iOS, this method uses the [`NSFileCreationDate` of the app's document root directory.
*   On Android, this method uses [`PackageInfo.firstInstallTime`.
*   On web, this method returns `null`.

Returns:

`[Promise<[Date>`

Returns a `Promise` that fulfills with a `Date` object that specifies the time the app was installed on the device.

Example

```
await Application.getInstallationTimeAsync();
// 2019-07-18T18:08:26.121Z
```

### `Application.getIosApplicationReleaseTypeAsync()`

Only for: iOS

Gets the iOS application release type.

Returns:

`[Promise<[ApplicationReleaseType](#applicationreleasetype)>`

Returns a promise which fulfills with an `ApplicationReleaseType`.

### `Application.getIosIdForVendorAsync()`

Only for: iOS

Gets the iOS "identifier for vendor" ([IDFV) value, a string ID that uniquely identifies a device to the app’s vendor. This method may sometimes return `nil`, in which case wait and call the method again later. This might happen when the device has been restarted before the user has unlocked the device.

The OS will change the vendor identifier if all apps from the current app's vendor have been uninstalled.

Returns:

`[Promise<string | null>`

A `Promise` that fulfills with a `string` specifying the app's vendor ID. Apps from the same vendor will return the same ID. See Apple's documentation for more information about the vendor ID's semantics.

Example

```
await Application.getIosIdForVendorAsync();
// "68753A44-4D6F-1226-9C60-0050E4C00067"
```

### `Application.getIosPushNotificationServiceEnvironmentAsync()`

Only for: iOS

Gets the current [Apple Push Notification (APN) service environment.

Returns:

`[Promise<[PushNotificationServiceEnvironment](#pushnotificationserviceenvironment)>`

Returns a promise fulfilled with the string, either `'development'` or `'production'`, based on the current APN environment, or `null` on the simulator as it does not support registering with APNs.

### `Application.getLastUpdateTimeAsync()`

Only for: Android

Gets the last time the app was updated from the Google Play Store.

Returns:

`[Promise<[Date>`

Returns a `Promise` that fulfills with a `Date` object that specifies the last time the app was updated via the Google Play Store).

Example

```
await Application.getLastUpdateTimeAsync();
// 2019-07-18T21:20:16.887Z
```

## Types

### `PushNotificationServiceEnvironment`

Literal Type: `union`

Maps to the [`aps-environment` key in the native target's registered entitlements.

Acceptable values are: `'development'` | `'production'` | `null`

## Enums

### `ApplicationReleaseType`

#### `UNKNOWN`

`ApplicationReleaseType.UNKNOWN ＝ 0`

#### `SIMULATOR`

`ApplicationReleaseType.SIMULATOR ＝ 1`

#### `ENTERPRISE`

`ApplicationReleaseType.ENTERPRISE ＝ 2`

#### `DEVELOPMENT`

`ApplicationReleaseType.DEVELOPMENT ＝ 3`

#### `AD_HOC`

`ApplicationReleaseType.AD_HOC ＝ 4`

#### `APP_STORE`

`ApplicationReleaseType.APP_STORE ＝ 5`

## Error codes

| Code | Description |
| --- | --- |
| `ERR_APPLICATION_PACKAGE_NAME_NOT_FOUND` | Error code thrown by `getInstallationTimeAsync` and `getLastUpdateTimeAsync`. This may be thrown if the package information or package name could not be retrieved. |
| `ERR_APPLICATION_INSTALL_REFERRER_UNAVAILABLE` | The current Play Store app doesn't provide the installation referrer API, or the Play Store may not be installed. This error code may come up when testing on an AVD that doesn't come with the Play Store pre-installed, such as the Google Pixel 3 and Nexus 6. |
| `ERR_APPLICATION_INSTALL_REFERRER_CONNECTION` | A connection could not be established to the Google Play Store. |
| `ERR_APPLICATION_INSTALL_REFERRER_REMOTE_EXCEPTION` | A `RemoteException` was thrown after a connection was established to the Play Store. This may happen if the process hosting the remote object is no longer available, which usually means the process crashed. See [this StackOverflow answer on `RemoteException` for more information. |
| `ERR_APPLICATION_INSTALL_REFERRER` | General default case error code for the `getInstallReferrerAsync` method. This error code will be thrown if an exception occurred when getting the install referrer, but the exception was none of the more precise errors. The [`responseCode` is provided along with the error. |
| `ERR_APPLICATION_INSTALL_REFERRER_SERVICE_DISCONNECTED` | Connection to the install referrer service was lost. This error is thrown when an attempt was made to connect and set up the install referrer service, but the connection was lost. See the [Android documentation for more information. |

---

# Expo Asset

`expo-asset` provides an interface to Expo's asset system. An asset is any file that lives alongside the source code of your app that the app needs at runtime. Examples include images, fonts, and sounds. Expo's asset system integrates with React Native's, so that you can refer to files with `require('path/to/file')`. This is how you refer to static image files in React Native for use in an `Image` component, for example. Check out React Native's [documentation on static image resources for more information. This method of referring to static image resources works out of the box with Expo.

## Installation

`npx expo install expo-asset`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-asset` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-asset",
    {
      "assets": ["path/to/file.png", "path/to/directory"]
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `assets` | `` |
An array of asset files or directories to link to the native project. The paths should be relative to the project root so that the file names, whether specified directly or using a directory, will become the resource names.

Supported file types:

*   Images: `.png`, `.jpg`, `.gif`
*   Media: `.mp4`, `.mp3`, `.lottie`
*   SQLite database files: `.db`

> Note: To import an existing database file (`.db`), see instructions in [SQLite API reference. For other file types such as `.lottie`, see [how to add a file extension to `assetExts` in metro config.

 |

### Usage

Learn more about how to use the `expo-asset` config plugin to embed an asset file in your project in [Load an asset at build time.

## API

```
import { Asset } from 'expo-asset';
```

## Hooks

### `useAssets(moduleIds)`

| Parameter | Type |
| --- | --- |
| moduleIds | `number | number` |

Downloads and stores one or more assets locally. After the assets are loaded, this hook returns a list of asset instances. If something went wrong when loading the assets, an error is returned.

> Note, the assets are not "reloaded" when you dynamically change the asset list.

Returns:

`[[Asset | undefined, [Error | undefined]`

Returns an array containing:

*   on the first position, a list of all loaded assets. If they aren't loaded yet, this value is `undefined`.
*   on the second position, an error which encountered when loading the assets. If there was no error, this value is `undefined`.

Example

```
const [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);

return assets ? <Image source={assets[0]} /> : null;
```

## Classes

### `Asset`

The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its name and type) and provides facilities to load the asset data.

Asset Properties

### `downloaded`

Type: `boolean` Default: `false`

Whether the asset has finished downloading from a call to `downloadAsync()`.

### `hash`

Read Only Literal type: `union` Default: `null`

The MD5 hash of the asset's data.

Acceptable values are: `null` | `string`

### `height`

Literal type: `union` Default: `null`

If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.

Acceptable values are: `null` | `number`

### `localUri`

Literal type: `union` Default: `null`

If the asset has been downloaded (by calling `downloadAsync()`), the `file://` URI pointing to the local file on the device that contains the asset data.

Acceptable values are: `null` | `string`

### `name`

Type: `string`

The name of the asset file without the extension. Also without the part from `@` onward in the filename (used to specify scale factor for images).

### `type`

Read Only Type: `string`

The extension of the asset filename.

### `uri`

Read Only Type: `string`

A URI that points to the asset's data on the remote server. When running the published version of your app, this refers to the location on Expo's asset server where Expo has stored your asset. When running the app from Expo CLI during development, this URI points to Expo CLI's server running on your computer and the asset is served directly from your computer. If you are not using Classic Updates (legacy), this field should be ignored as we ensure your assets are on device before before running your application logic.

### `width`

Literal type: `union` Default: `null`

If the asset is an image, the width of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.

Acceptable values are: `null` | `number`

Asset Methods

### `downloadAsync()`

Downloads the asset data to a local file in the device's cache directory. Once the returned promise is fulfilled without error, the `localUri` field of this asset points to a local file containing the asset data. The asset is only downloaded if an up-to-date local file for the asset isn't already present due to an earlier download. The downloaded `Asset` will be returned when the promise is resolved.

Returns:

`[Promise<[Asset>`

Returns a Promise which fulfills with an `Asset` instance.

### `fromMetadata(meta)`

| Parameter | Type |
| --- | --- |
| meta | `[AssetMetadata](#assetmetadata)` |

Returns:

`[Asset`

### `fromModule(virtualAssetModule)`

| Parameter | Type | Description |
| --- | --- | --- |
| virtualAssetModule | `string | number` |
The value of `require('path/to/file')` for the asset or external network URL

 |

Returns the `Asset` instance representing an asset given its module or URL.

Returns:

`[Asset`

The `Asset` instance for the asset.

### `fromURI(uri)`

| Parameter | Type |
| --- | --- |
| uri | `string` |

Returns:

`[Asset`

### `loadAsync(moduleId)`

| Parameter | Type | Description |
| --- | --- | --- |
| moduleId | `string | number | number | string` |
An array of `require('path/to/file')` or external network URLs. Can also be just one module or URL without an Array.

 |

A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.

Returns:

`[Promise<[Asset>`

Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been saved to disk.

Example

```
const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));
```

## Types

### `AssetDescriptor`

| Property | Type | Description |
| --- | --- | --- |
| hash(optional) | `string | null` |
\-

 |
| height(optional) | `number | null` |

\-

 |
| name | `string` |

\-

 |
| type | `string` |

\-

 |
| uri | `string` |

\-

 |
| width(optional) | `number | null` |

\-

 |

### `AssetMetadata`

Type: `[Pick<[PackagerAsset, 'httpServerLocation' | 'name' | 'hash' | 'type' | 'scales' | 'width' | 'height'>` extended by:

| Property | Type | Description |
| --- | --- | --- |
| fileHashes(optional) | `string` |
\-

 |
| fileUris(optional) | `string` |

\-

 |
| uri(optional) | `string` |

\-

 |

---

# AsyncStorage

An asynchronous, unencrypted, persistent, key-value storage API.

## Installation

`npx expo install @react-native-async-storage/async-storage`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See [Async Storage's documentation for usage instructions.

---

# Expo Audio

`Audio` from `expo-av` allows you to implement audio playback and recording in your app.

> Audio recording APIs are not available on tvOS (Apple TV).

Note that audio automatically stops if headphones/bluetooth audio devices are disconnected.

See the [playlist example app for an example on the media playback API, and the [recording example app for an example of the recording API.

## Installation

`npx expo install expo-av`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

### Playing sounds

Playing sounds

```
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [sound, setSound] = useState();

  async function playSound() {
```
console.log('Loading Sound');
const { sound } = await Audio.Sound.createAsync( require('./assets/Hello.mp3')
);
setSound(sound);
```
console.log('Playing Sound');
await sound.playAsync();
```
  }

  useEffect(() => {
```
return sound
  ? () => {
      console.log('Unloading Sound');
      sound.unloadAsync();
    }
  : undefined;
```
  }, [sound]);

  return (
```
<View style={styles.container}>
  <Button title="Play Sound" onPress={playSound} />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
backgroundColor: '#ecf0f1',
padding: 10,
```
  },
});
```

### Recording sounds

Recording sounds

```
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [recording, setRecording] = useState();
  const [permissionResponse, requestPermission] = Audio.usePermissions();

  async function startRecording() {
```
try {
  if (permissionResponse.status !== 'granted') {
    console.log('Requesting permission..');
    await requestPermission();
  }
  await Audio.setAudioModeAsync({
    allowsRecordingIOS: true,
    playsInSilentModeIOS: true,
  });
```
console.log('Starting recording..');
  const { recording } = await Audio.Recording.createAsync( Audio.RecordingOptionsPresets.HIGH_QUALITY
  );
  setRecording(recording);
  console.log('Recording started');
} catch (err) {
  console.error('Failed to start recording', err);
}
```
  }

  async function stopRecording() {
```
console.log('Stopping recording..');
setRecording(undefined);
await recording.stopAndUnloadAsync();
await Audio.setAudioModeAsync(
  {
    allowsRecordingIOS: false,
  }
);
const uri = recording.getURI();
console.log('Recording stopped and stored at', uri);
```
  }

  return (
```
<View style={styles.container}>
  <Button
    title={recording ? 'Stop Recording' : 'Start Recording'}
    onPress={recording ? stopRecording : startRecording}
  />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
backgroundColor: '#ecf0f1',
padding: 10,
```
  },
});
```

### Playing or recording audio in background 

iOS

On iOS, audio playback and recording in background is only available in standalone apps, and it requires some extra configuration. On iOS, each background feature requires a special key in `UIBackgroundModes` array in your Info.plist file. In standalone apps this array is empty by default, so to use background features you will need to add appropriate keys to your app.json configuration.

See an example of app.json that enables audio playback in background:

```
{
  "expo": {
```
...
"ios": {
  ...
  "infoPlist": {
    ...
    "UIBackgroundModes":       "audio"

  }
}
```
  }
}
```

### Notes on web usage

*   A MediaRecorder issue on Chrome produces WebM files missing the duration metadata. [See the open Chromium issue.
*   MediaRecorder encoding options and other configurations are inconsistent across browsers, utilizing a Polyfill such as [kbumsik/opus-media-recorder or [ai/audio-recorder-polyfill in your application will improve your experience. Any options passed to `prepareToRecordAsync` will be passed directly to the MediaRecorder API and as such the polyfill.
*   Web browsers require sites to be served securely for them to listen to a mic. See [MediaDevices `getUserMedia()` security for more details.

## API

```
import { Audio } from 'expo-av';
```

## Constants

### `Audio.RecordingOptionsPresets`

Type: `Record<string, [RecordingOptions](#recordingoptions)>`

Constant which contains definitions of the two preset examples of `RecordingOptions`, as implemented in the Audio SDK.

#### `HIGH_QUALITY`

```
RecordingOptionsPresets.HIGH_QUALITY = {
  isMeteringEnabled: true,
  android: {
```
extension: '.m4a',
outputFormat: AndroidOutputFormat.MPEG_4,
audioEncoder: AndroidAudioEncoder.AAC,
sampleRate: 44100,
numberOfChannels: 2,
bitRate: 128000,
```
  },
  ios: {
```
extension: '.m4a',
outputFormat: IOSOutputFormat.MPEG4AAC,
audioQuality: IOSAudioQuality.MAX,
sampleRate: 44100,
numberOfChannels: 2,
bitRate: 128000,
linearPCMBitDepth: 16,
linearPCMIsBigEndian: false,
linearPCMIsFloat: false,
```
  },
  web: {
```
mimeType: 'audio/webm',
bitsPerSecond: 128000,
```
  },
};
```

#### `LOW_QUALITY`

```
RecordingOptionsPresets.LOW_QUALITY = {
  isMeteringEnabled: true,
  android: {
```
extension: '.3gp',
outputFormat: AndroidOutputFormat.THREE_GPP,
audioEncoder: AndroidAudioEncoder.AMR_NB,
sampleRate: 44100,
numberOfChannels: 2,
bitRate: 128000,
```
  },
  ios: {
```
extension: '.caf',
audioQuality: IOSAudioQuality.MIN,
sampleRate: 44100,
numberOfChannels: 2,
bitRate: 128000,
linearPCMBitDepth: 16,
linearPCMIsBigEndian: false,
linearPCMIsFloat: false,
```
  },
  web: {
```
mimeType: 'audio/webm',
bitsPerSecond: 128000,
```
  },
};
```

## Hooks

### `usePermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to record audio. This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [permissionResponse, requestPermission] = Audio.usePermissions();
```

## Classes

### `Recording`

Only for: Android, iOS

> Warning: Experimental for web.

This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync` must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync` at any given time.

Note that your experience must request audio recording permissions in order for recording to function. See the [`Permissions` module for more details.

Additionally, audio recording is [not supported in the iOS Simulator.

Returns

A newly constructed instance of `Audio.Recording`.

Example

```
const recording = new Audio.Recording();
try {
  await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);
  await recording.startAsync();
  // You are now recording!
} catch (error) {
  // An error occurred!
}
```

Recording Methods

### `createAsync(options, onRecordingStatusUpdate, progressUpdateIntervalMillis)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[RecordingOptions](#recordingoptions)` |
Options for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`. See below for details on `RecordingOptions`.

Default:`RecordingOptionsPresets.LOW_QUALITY`

 |
| onRecordingStatusUpdate(optional) | `null | (status: [RecordingStatus](#recordingstatus)) => void` |

A function taking a single parameter `status` (a dictionary, described in `getStatusAsync`).

Default:`null`

 |
| progressUpdateIntervalMillis(optional) | `null | number` |

The interval between calls of `onRecordingStatusUpdate`. This value defaults to 500 milliseconds.

Default:`null`

 |

Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.

```
const { recording, status } = await Audio.Recording.createAsync(
  options,
  onRecordingStatusUpdate,
  progressUpdateIntervalMillis
);

// Which is equivalent to the following:
const recording = new Audio.Recording();
await recording.prepareToRecordAsync(options);
recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);
await recording.startAsync();
```

Returns:

`[Promise<[RecordingObject](#recordingobject)>`

A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.

Example

```
try {
  const { recording: recordingObject, status } = await Audio.Recording.createAsync(
```
Audio.RecordingOptionsPresets.HIGH_QUALITY
```
  );
  // You are now recording!
} catch (error) {
  // An error occurred!
}
```

> Deprecated Use `createNewLoadedSoundAsync()` instead.

### `createNewLoadedSound(initialStatus, onPlaybackStatusUpdate)`

| Parameter | Type |
| --- | --- |
| initialStatus(optional) | `[AVPlaybackStatusToSet` |
| onPlaybackStatusUpdate(optional) | `null | (status: [AVPlaybackStatus) => void` |

Returns:

`[Promise<[SoundObject](#soundobject)>`

### `createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate)`

| Parameter | Type | Description |
| --- | --- | --- |
| initialStatus(optional) | `[AVPlaybackStatusToSet` |
The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status. This value defaults to `{}` if no parameter is passed. See the [AV documentation for details on `PlaybackStatusToSet` and the default initial playback status.

Default:`{}`

 |
| onPlaybackStatusUpdate(optional) | `null | (status: [AVPlaybackStatus) => void` |

A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed. See the [AV documentation for details on the functionality provided by `onPlaybackStatusUpdate`

Default:`null`

 |

Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording` is done recording and `stopAndUnloadAsync()` has been called.

Returns:

`[Promise<[SoundObject](#soundobject)>`

A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.

### `getAvailableInputs()`

Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.

Returns:

`[Promise<[RecordingInput](#recordinginput)>`

A `Promise` that is fulfilled with an array of `RecordingInput` objects.

### `getCurrentInput()`

Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.

Returns:

`[Promise<[RecordingInput](#recordinginput)>`

A `Promise` that is fulfilled with a `RecordingInput` object.

### `getStatusAsync()`

Gets the `status` of the `Recording`.

Returns:

`[Promise<[RecordingStatus](#recordingstatus)>`

A `Promise` that is resolved with the `RecordingStatus` object.

### `getURI()`

Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared to record. On web, this will not return the URI until the recording is finished.

Returns:

`null | string`

A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared to record (or, on Web, if the recording has not finished).

### `pauseAsync()`

Pauses recording. This method can only be called if the `Recording` has been prepared.

> This is only available on Android API version 24 and later.

Returns:

`[Promise<[RecordingStatus](#recordingstatus)>`

A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused. If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the `RecordingStatus` of the recording.

### `prepareToRecordAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[RecordingOptions](#recordingoptions)` |
`RecordingOptions` for the recording, including sample rate, bitrate, channels, format, encoder, and extension. If no options are passed to `prepareToRecordAsync()`, the recorder will be created with options `Audio.RecordingOptionsPresets.LOW_QUALITY`.

Default:`RecordingOptionsPresets.LOW_QUALITY`

 |

Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`. This method can only be called if the `Recording` instance has never yet been prepared.

Returns:

`[Promise<[RecordingStatus](#recordingstatus)>`

A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid, the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.

### `setInput(inputUid)`

| Parameter | Type | Description |
| --- | --- | --- |
| inputUid | `string` |
The uid of a `RecordingInput`.

 |

Sets the current recording input.

Returns:

`[Promise<void>`

A `Promise` that is resolved if successful or rejected if not.

### `setOnRecordingStatusUpdate(onRecordingStatusUpdate)`

| Parameter | Type | Description |
| --- | --- | --- |
| onRecordingStatusUpdate | `null | (status: [RecordingStatus](#recordingstatus)) => void` |
A function taking a single parameter `RecordingStatus`.

 |

Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.

`onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`, `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record. Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.

Returns:

`void`

### `setProgressUpdateInterval(progressUpdateIntervalMillis)`

| Parameter | Type | Description |
| --- | --- | --- |
| progressUpdateIntervalMillis | `number` |
The new interval between calls of `onRecordingStatusUpdate`.

 |

Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record. See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.

Returns:

`void`

### `startAsync()`

Begins recording. This method can only be called if the `Recording` has been prepared.

Returns:

`[Promise<[RecordingStatus](#recordingstatus)>`

A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started. The promise is resolved with the `RecordingStatus` of the recording.

### `stopAndUnloadAsync()`

Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance to an unprepared state, and another `Recording` instance must be created in order to record again. This method can only be called if the `Recording` has been prepared.

> On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.

Returns:

`[Promise<[RecordingStatus](#recordingstatus)>`

A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped. The promise is resolved with the `RecordingStatus` of the recording.

### `Sound`

Type: Class implements `[Playback`

This class represents a sound corresponding to an Asset or URL.

Returns

A newly constructed instance of `Audio.Sound`.

Example

```
const sound = new Audio.Sound();
try {
  await sound.loadAsync(require('./assets/sounds/hello.mp3'));
  await sound.playAsync();
  // Your sound is playing!

  // Don't forget to unload the sound from memory
  // when you are done using the Sound object
  await sound.unloadAsync();
} catch (error) {
  // An error occurred!
}
```

> Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`. See the [AV documentation for further information.

Sound Methods

> Deprecated Use `Sound.createAsync()` instead

### `create(source, initialStatus, onPlaybackStatusUpdate, downloadFirst)`

| Parameter | Type |
| --- | --- |
| source | `[AVPlaybackSource` |
| initialStatus(optional) | `[AVPlaybackStatusToSet` |
| onPlaybackStatusUpdate(optional) | `null | (status: [AVPlaybackStatus) => void` |
| downloadFirst(optional) | `boolean` |

Returns:

`[Promise<[SoundObject](#soundobject)>`

### `createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `[AVPlaybackSource` |
The source of the sound. See the [AV documentation for details on the possible `source` values.

 |
| initialStatus(optional) | `[AVPlaybackStatusToSet` |

The initial intended `PlaybackStatusToSet` of the sound, whose values will override the default initial playback status. This value defaults to `{}` if no parameter is passed. See the [AV documentation for details on `PlaybackStatusToSet` and the default initial playback status.

Default:`{}`

 |
| onPlaybackStatusUpdate(optional) | `null | (status: [AVPlaybackStatus) => void` |

A function taking a single parameter `PlaybackStatus`. This value defaults to `null` if no parameter is passed. See the [AV documentation for details on the functionality provided by `onPlaybackStatusUpdate`

Default:`null`

 |
| downloadFirst(optional) | `boolean` |

If set to true, the system will attempt to download the resource to the device before loading. This value defaults to `true`. Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.

Default:`true`

 |

Creates and loads a sound from source.

```
const { sound } = await Audio.Sound.createAsync(
  source,
  initialStatus,
  onPlaybackStatusUpdate,
  downloadFirst
);

// Which is equivalent to the following:
const sound = new Audio.Sound();
sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);
await sound.loadAsync(source, initialStatus, downloadFirst);
```

Returns:

`[Promise<[SoundObject](#soundobject)>`

A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.

Example

```
try {
  const { sound: soundObject, status } = await Audio.Sound.createAsync(
```
require('./assets/sounds/hello.mp3'),
{ shouldPlay: true }
```
  );
  // Your sound is playing!
} catch (error) {
  // An error occurred!
}
```

### `setOnAudioSampleReceived(callback)`

| Parameter | Type | Description |
| --- | --- | --- |
| callback | `[AudioSampleCallback` |
A function taking the `AudioSampleCallback` as parameter.

 |

Sets a function to be called during playback, receiving the audio sample as parameter.

Returns:

`void`

### `setOnMetadataUpdate(onMetadataUpdate)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| onMetadataUpdate | `(metadata: [AVMetadata) => void` |
A function taking a single object of type `AVMetadata` as a parameter.

 |

Sets a function to be called whenever the metadata of the sound object changes, if one is set.

Returns:

`void`

### `setOnPlaybackStatusUpdate(onPlaybackStatusUpdate)`

| Parameter | Type | Description |
| --- | --- | --- |
| onPlaybackStatusUpdate | `null | (status: [AVPlaybackStatus) => void` |
A function taking a single parameter `AVPlaybackStatus`.

 |

Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.

`onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals while the media is in the loaded state.

Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify the interval with which `onPlaybackStatusUpdate` is called while loaded.

Returns:

`void`

## Methods

### `Audio.getPermissionsAsync()`

Only for: Android, iOS

Checks user's permissions for audio recording.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type `PermissionResponse`.

### `Audio.requestPermissionsAsync()`

Only for: Android, iOS

Asks the user to grant permissions for audio recording.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type `PermissionResponse`.

### `Audio.setAudioModeAsync(partialMode)`

| Parameter | Type |
| --- | --- |
| partialMode | `[Partial<[AudioMode](#audiomode)>` |

We provide this API to customize the audio experience on iOS and Android.

Returns:

`[Promise<void>`

A `Promise` that will reject if the audio mode could not be enabled for the device.

### `Audio.setIsEnabledAsync(value)`

| Parameter | Type | Description |
| --- | --- | --- |
| value | `boolean` |
`true` enables Audio, and `false` disables it.

 |

Audio is enabled by default, but if you want to write your own Audio API in a bare workflow app, you might want to disable the Audio API.

Returns:

`[Promise<void>`

A `Promise` that will reject if audio playback could not be enabled for the device.

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `AudioChannel`

| Property | Type | Description |
| --- | --- | --- |
| frames | `number` |
All samples for this specific Audio Channel in PCM Buffer format (-1 to 1).

 |

### `AudioMode`

| Property | Type | Description |
| --- | --- | --- |
| allowsRecordingIOS(optional) | `boolean` |
A boolean selecting if recording is enabled on iOS.

> When this flag is set to `true`, playback may be routed to the phone earpiece instead of to the speaker. Set it back to `false` after stopping recording to reenable playback through the speaker.

Default:`false`

 |
| interruptionModeAndroid | `[InterruptionModeAndroid](#interruptionmodeandroid)` |

An enum selecting how your experience's audio should interact with the audio from other apps on Android.

 |
| interruptionModeIOS | `[InterruptionModeIOS](#interruptionmodeios)` |

An enum selecting how your experience's audio should interact with the audio from other apps on iOS.

 |
| playThroughEarpieceAndroid(optional) | `boolean` |

A boolean selecting if the audio is routed to earpiece on Android.

Default:`false`

 |
| playsInSilentModeIOS(optional) | `boolean` |

A boolean selecting if your experience's audio should play in silent mode on iOS.

Default:`false`

 |
| shouldDuckAndroid(optional) | `boolean` |

A boolean selecting if your experience's audio should automatically be lowered in volume ("duck") if audio from another app interrupts your experience. If `false`, audio from other apps will pause your audio.

Default:`true`

 |
| staysActiveInBackground(optional) | `boolean` |

A boolean selecting if the audio session (playback or recording) should stay active even when the app goes into background.

> This is not available in Expo Go for iOS, it will only work in standalone apps. To enable it for standalone apps, [follow the instructions below](#playing-or-recording-audio-in-background-ios) to add `UIBackgroundModes` to your app configuration.

Default:`false`

 |

### `AudioSample`

Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source. The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved), there will be two channels, one for left and one for right audio.

| Property | Type | Description |
| --- | --- | --- |
| channels | `[AudioChannel](#audiochannel)` |
An array representing the data from each channel in PCM Buffer format. Array elements are objects in the following format: `{ frames: number }`, where each frame is a number in PCM Buffer format (`-1` to `1` range).

 |
| timestamp | `number` |

A number representing the timestamp of the current sample in seconds, relative to the audio track's timeline.

> Known issue: When using the `ExoPlayer` Android implementation, the timestamp is always `-1`.

 |

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `RecordingInput`

Only for: Android, iOS

| Property | Type | Description |
| --- | --- | --- |
| name | `string` |
\-

 |
| type | `string` |

\-

 |
| uid | `string` |

\-

 |

### `RecordingObject`

Only for: Android, iOS

| Property | Type | Description |
| --- | --- | --- |
| recording | `[Recording](#recording)` |
The newly created and started `Recording` object.

 |
| status | `[RecordingStatus](#recordingstatus)` |

The `RecordingStatus` of the `Recording` object. See the [AV documentation for further information.

 |

### `RecordingOptions`

The recording extension, sample rate, bitrate, channels, format, encoder, etc. which can be customized by passing options to `prepareToRecordAsync()`.

We provide the following preset options for convenience, as used in the example above. See below for the definitions of these presets.

*   `Audio.RecordingOptionsPresets.HIGH_QUALITY`
*   `Audio.RecordingOptionsPresets.LOW_QUALITY`

We also provide the ability to define your own custom recording options, but we recommend you use the presets, as not all combinations of options will allow you to successfully `prepareToRecordAsync()`. You will have to test your custom options on iOS and Android to make sure it's working. In the future, we will enumerate all possible valid combinations, but at this time, our goal is to make the basic use-case easy (with presets) and the advanced use-case possible (by exposing all the functionality available on all supported platforms).

| Property | Type | Description |
| --- | --- | --- |
| android | `[RecordingOptionsAndroid](#recordingoptionsandroid)` |
Recording options for the Android platform.

 |
| ios | `[RecordingOptionsIOS](#recordingoptionsios)` |

Recording options for the iOS platform.

 |
| isMeteringEnabled(optional) | `boolean` |

A boolean that determines whether audio level information will be part of the status object under the "metering" key.

 |
| keepAudioActiveHint(optional) | `boolean` |

A boolean that hints to keep the audio active after `prepareToRecordAsync` completes. Setting this value can improve the speed at which the recording starts. Only set this value to `true` when you call `startAsync` immediately after `prepareToRecordAsync`. This value is automatically set when using `Audio.recording.createAsync()`.

 |
| web | `[RecordingOptionsWeb](#recordingoptionsweb)` |

Recording options for the Web platform.

 |

### `RecordingOptionsAndroid`

Only for: Android

| Property | Type | Description |
| --- | --- | --- |
| audioEncoder | `[AndroidAudioEncoder](#androidaudioencoder) | number` |
The desired audio encoder. See the `AndroidAudioEncoder` enum for all valid values.

 |
| bitRate(optional) | `number` |

The desired bit rate.

Note that `prepareToRecordAsync()` may perform additional checks on the parameter to make sure whether the specified bit rate is applicable, and sometimes the passed bitRate will be clipped internally to ensure the audio recording can proceed smoothly based on the capabilities of the platform.

Example

`128000`

 |
| extension | `string` |

The desired file extension. Example valid values are `.3gp` and `.m4a`. For more information, see the [Android docs for supported output formats.

 |
| maxFileSize(optional) | `number` |

The desired maximum file size in bytes, after which the recording will stop (but `stopAndUnloadAsync()` must still be called after this point).

Example

`65536`

 |
| numberOfChannels(optional) | `number` |

The desired number of channels.

Note that `prepareToRecordAsync()` may perform additional checks on the parameter to make sure whether the specified number of audio channels are applicable.

Example

`1`, `2`

 |
| outputFormat | `[AndroidOutputFormat](#androidoutputformat) | number` |

The desired file format. See the `AndroidOutputFormat` enum for all valid values.

 |
| sampleRate(optional) | `number` |

The desired sample rate.

Note that the sampling rate depends on the format for the audio recording, as well as the capabilities of the platform. For instance, the sampling rate supported by AAC audio coding standard ranges from 8 to 96 kHz, the sampling rate supported by AMRNB is 8kHz, and the sampling rate supported by AMRWB is 16kHz. Please consult with the related audio coding standard for the supported audio sampling rate.

Example

44100

 |

### `RecordingOptionsIOS`

Only for: iOS

| Property | Type | Description |
| --- | --- | --- |
| audioQuality | `[IOSAudioQuality](#iosaudioquality) | number` |
The desired audio quality. See the `IOSAudioQuality` enum for all valid values.

 |
| bitDepthHint(optional) | `number` |

The desired bit depth hint.

Example

`16`

 |
| bitRate | `number` |

The desired bit rate.

Example

`128000`

 |
| bitRateStrategy(optional) | `number` |

The desired bit rate strategy. See the next section for an enumeration of all valid values of `bitRateStrategy`.

 |
| extension | `string` |

The desired file extension.

Example

`'.caf'`

 |
| linearPCMBitDepth(optional) | `number` |

The desired PCM bit depth.

Example

`16`

 |
| linearPCMIsBigEndian(optional) | `boolean` |

A boolean describing if the PCM data should be formatted in big endian.

 |
| linearPCMIsFloat(optional) | `boolean` |

A boolean describing if the PCM data should be encoded in floating point or integral values.

 |
| numberOfChannels | `number` |

The desired number of channels.

Example

`1`, `2`

 |
| outputFormat(optional) | `string | [IOSOutputFormat](#iosoutputformat) | number` |

The desired file format. See the `IOSOutputFormat` enum for all valid values.

 |
| sampleRate | `number` |

The desired sample rate.

Example

`44100`

 |

### `RecordingOptionsWeb`

| Property | Type | Description |
| --- | --- | --- |
| bitsPerSecond(optional) | `number` |
\-

 |
| mimeType(optional) | `string` |

\-

 |

### `RecordingStatus`

| Property | Type | Description |
| --- | --- | --- |
| canRecord | `boolean` |
Only for: Android, iOS

A boolean describing if the `Recording` can initiate the recording.

 |
| durationMillis | `number` |

Only for: Android, iOS

The current duration of the recorded audio or the final duration is the recording has been stopped.

 |
| isDoneRecording | `boolean` |

Only for: Android, iOS

A boolean describing if the `Recording` has been stopped.

 |
| isRecording | `boolean` |

Only for: Android, iOS

A boolean describing if the `Recording` is currently recording.

 |
| mediaServicesDidReset(optional) | `boolean` |

Only for: iOS

A boolean indicating whether media services were reset during recording. This may occur if the active input ceases to be available during recording.

For example: airpods are the active input and they run out of batteries during recording.

 |
| metering(optional) | `number` |

Only for: Android, iOS

A number that's the most recent reading of the loudness in dB. The value ranges from `–160` dBFS, indicating minimum power, to `0` dBFS, indicating maximum power. Present or not based on Recording options. See `RecordingOptions` for more information.

 |
| uri(optional) | `string | null` |

\-

 |

### `SoundObject`

| Property | Type | Description |
| --- | --- | --- |
| sound | `[Sound](#sound)` |
The newly created and loaded `Sound` object.

 |
| status | `[AVPlaybackStatus` |

The `PlaybackStatus` of the `Sound` object. See the [AV documentation for further information.

 |

## Enums

### `AndroidAudioEncoder`

#### `DEFAULT`

`AndroidAudioEncoder.DEFAULT ＝ 0`

#### `AMR_NB`

`AndroidAudioEncoder.AMR_NB ＝ 1`

#### `AMR_WB`

`AndroidAudioEncoder.AMR_WB ＝ 2`

#### `AAC`

`AndroidAudioEncoder.AAC ＝ 3`

#### `HE_AAC`

`AndroidAudioEncoder.HE_AAC ＝ 4`

#### `AAC_ELD`

`AndroidAudioEncoder.AAC_ELD ＝ 5`

### `AndroidOutputFormat`

#### `DEFAULT`

`AndroidOutputFormat.DEFAULT ＝ 0`

#### `THREE_GPP`

`AndroidOutputFormat.THREE_GPP ＝ 1`

#### `MPEG_4`

`AndroidOutputFormat.MPEG_4 ＝ 2`

#### `AMR_NB`

`AndroidOutputFormat.AMR_NB ＝ 3`

#### `AMR_WB`

`AndroidOutputFormat.AMR_WB ＝ 4`

#### `AAC_ADIF`

`AndroidOutputFormat.AAC_ADIF ＝ 5`

#### `AAC_ADTS`

`AndroidOutputFormat.AAC_ADTS ＝ 6`

#### `RTP_AVP`

`AndroidOutputFormat.RTP_AVP ＝ 7`

#### `MPEG2TS`

`AndroidOutputFormat.MPEG2TS ＝ 8`

#### `WEBM`

`AndroidOutputFormat.WEBM ＝ 9`

### `InterruptionModeAndroid`

#### `DoNotMix`

`InterruptionModeAndroid.DoNotMix ＝ 1`

If this option is set, your experience's audio interrupts audio from other apps.

#### `DuckOthers`

`InterruptionModeAndroid.DuckOthers ＝ 2`

This is the default option. If this option is set, your experience's audio lowers the volume ("ducks") of audio from other apps while your audio plays.

### `InterruptionModeIOS`

#### `MixWithOthers`

`InterruptionModeIOS.MixWithOthers ＝ 0`

This is the default option. If this option is set, your experience's audio is mixed with audio playing in background apps.

#### `DoNotMix`

`InterruptionModeIOS.DoNotMix ＝ 1`

If this option is set, your experience's audio interrupts audio from other apps.

#### `DuckOthers`

`InterruptionModeIOS.DuckOthers ＝ 2`

If this option is set, your experience's audio lowers the volume ("ducks") of audio from other apps while your audio plays.

### `IOSAudioQuality`

#### `MIN`

`IOSAudioQuality.MIN ＝ 0`

#### `LOW`

`IOSAudioQuality.LOW ＝ 32`

#### `MEDIUM`

`IOSAudioQuality.MEDIUM ＝ 64`

#### `HIGH`

`IOSAudioQuality.HIGH ＝ 96`

#### `MAX`

`IOSAudioQuality.MAX ＝ 127`

### `IOSBitRateStrategy`

#### `CONSTANT`

`IOSBitRateStrategy.CONSTANT ＝ 0`

#### `LONG_TERM_AVERAGE`

`IOSBitRateStrategy.LONG_TERM_AVERAGE ＝ 1`

#### `VARIABLE_CONSTRAINED`

`IOSBitRateStrategy.VARIABLE_CONSTRAINED ＝ 2`

#### `VARIABLE`

`IOSBitRateStrategy.VARIABLE ＝ 3`

### `IOSOutputFormat`

> Note Not all of the iOS formats included in this list of constants are currently supported by iOS, in spite of appearing in the Apple source code. For an accurate list of formats supported by iOS, see [Core Audio Codecs and [iPhone Audio File Formats.

#### `MPEGLAYER1`

`IOSOutputFormat.MPEGLAYER1 ＝ ".mp1"`

#### `MPEGLAYER2`

`IOSOutputFormat.MPEGLAYER2 ＝ ".mp2"`

#### `MPEGLAYER3`

`IOSOutputFormat.MPEGLAYER3 ＝ ".mp3"`

#### `MPEG4AAC`

`IOSOutputFormat.MPEG4AAC ＝ "aac "`

#### `MPEG4AAC_ELD`

`IOSOutputFormat.MPEG4AAC_ELD ＝ "aace"`

#### `MPEG4AAC_ELD_SBR`

`IOSOutputFormat.MPEG4AAC_ELD_SBR ＝ "aacf"`

#### `MPEG4AAC_ELD_V2`

`IOSOutputFormat.MPEG4AAC_ELD_V2 ＝ "aacg"`

#### `MPEG4AAC_HE`

`IOSOutputFormat.MPEG4AAC_HE ＝ "aach"`

#### `MPEG4AAC_LD`

`IOSOutputFormat.MPEG4AAC_LD ＝ "aacl"`

#### `MPEG4AAC_HE_V2`

`IOSOutputFormat.MPEG4AAC_HE_V2 ＝ "aacp"`

#### `MPEG4AAC_SPATIAL`

`IOSOutputFormat.MPEG4AAC_SPATIAL ＝ "aacs"`

#### `AC3`

`IOSOutputFormat.AC3 ＝ "ac-3"`

#### `AES3`

`IOSOutputFormat.AES3 ＝ "aes3"`

#### `APPLELOSSLESS`

`IOSOutputFormat.APPLELOSSLESS ＝ "alac"`

#### `ALAW`

`IOSOutputFormat.ALAW ＝ "alaw"`

#### `AUDIBLE`

`IOSOutputFormat.AUDIBLE ＝ "AUDB"`

#### `60958AC3`

`IOSOutputFormat.60958AC3 ＝ "cac3"`

#### `MPEG4CELP`

`IOSOutputFormat.MPEG4CELP ＝ "celp"`

#### `ENHANCEDAC3`

`IOSOutputFormat.ENHANCEDAC3 ＝ "ec-3"`

#### `MPEG4HVXC`

`IOSOutputFormat.MPEG4HVXC ＝ "hvxc"`

#### `ILBC`

`IOSOutputFormat.ILBC ＝ "ilbc"`

#### `APPLEIMA4`

`IOSOutputFormat.APPLEIMA4 ＝ "ima4"`

#### `LINEARPCM`

`IOSOutputFormat.LINEARPCM ＝ "lpcm"`

#### `MACE3`

`IOSOutputFormat.MACE3 ＝ "MAC3"`

#### `MACE6`

`IOSOutputFormat.MACE6 ＝ "MAC6"`

#### `AMR`

`IOSOutputFormat.AMR ＝ "samr"`

#### `AMR_WB`

`IOSOutputFormat.AMR_WB ＝ "sawb"`

#### `DVIINTELIMA`

`IOSOutputFormat.DVIINTELIMA ＝ 1836253201`

#### `MICROSOFTGSM`

`IOSOutputFormat.MICROSOFTGSM ＝ 1836253233`

#### `QUALCOMM`

`IOSOutputFormat.QUALCOMM ＝ "Qclp"`

#### `QDESIGN2`

`IOSOutputFormat.QDESIGN2 ＝ "QDM2"`

#### `QDESIGN`

`IOSOutputFormat.QDESIGN ＝ "QDMC"`

#### `MPEG4TWINVQ`

`IOSOutputFormat.MPEG4TWINVQ ＝ "twvq"`

#### `ULAW`

`IOSOutputFormat.ULAW ＝ "ulaw"`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

### `PitchCorrectionQuality`

Check [official Apple documentation for more information.

#### `High`

`PitchCorrectionQuality.High ＝ number`

Equivalent to `AVAudioTimePitchAlgorithmSpectral`.

#### `Low`

`PitchCorrectionQuality.Low ＝ number`

Equivalent to `AVAudioTimePitchAlgorithmLowQualityZeroLatency`.

#### `Medium`

`PitchCorrectionQuality.Medium ＝ number`

Equivalent to `AVAudioTimePitchAlgorithmTimeDomain`.

## Unified API

The rest of the API on the `Sound.Audio` is the same as the API for `Video` component `ref`. See the [AV documentation for more information.

---

# Expo AV

The [`Audio.Sound` objects and [`Video` components share a unified imperative API for media playback.

Note that for `Video`, all of the operations are also available via props on the component. However, we recommend using this imperative playback API for most applications where finer control over the state of the video playback is needed.

See the [playlist example app for an example on the playback API for both `Audio.Sound` and `Video`.

> Audio recording APIs are not available on tvOS (Apple TV).

## Installation

`npx expo install expo-av`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-av` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-av",
    {
      "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `microphonePermission` | `"Allow $(PRODUCT_NAME) to access your microphone"` |
Only for: iOS

A string to set the `NSMicrophoneUsageDescription` permission message.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) (you're using native android and ios projects manually), then you need to configure following permissions in your native projects:

*   For Android, add `android.permission.RECORD_AUDIO` permission to your project's android/app/src/main/AndroidManifest.xml:
```
<uses-permission android:name="android.permission.RECORD_AUDIO" />
```
*   For iOS, add `NSMicrophoneUsageDescription` to your project's ios/\[app\]/Info.plist:
```
<key>NSMicrophoneUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your microphone</string>
```
## Usage

On this page, we reference operations on `playbackObject`. Here is an example of obtaining access to the reference for both sound and video:

### Example: `Audio.Sound`
```
await Audio.setAudioModeAsync({ playsInSilentModeIOS: true });

const playbackObject = new Audio.Sound();
// OR
const { sound: playbackObject } = await Audio.Sound.createAsync(
  { uri: 'http://foo/bar.mp3' },
  { shouldPlay: true }
);
```
See the [audio documentation for further information on `Audio.Sound.createAsync()`.

### Example: `Video`
```
%%placeholder-start%%... %%placeholder-end%%
_handleVideoRef = component => {
  const playbackObject = component;
  ...
}
%%placeholder-start%%... %%placeholder-end%%

render() {
  return (
```
<Video
    ref={this._handleVideoRef}
  />
  %%placeholder-start%%... %%placeholder-end%%
```
  )
}
```
See the [video documentation for further information.

### Example: `setOnPlaybackStatusUpdate()`
```
_onPlaybackStatusUpdate = playbackStatus => {
  if (!playbackStatus.isLoaded) {
```
// Update your UI for the unloaded state
if (playbackStatus.error) {
  console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);
  // Send Expo team the error on Slack or the forums so we can help you debug!
}
```
  } else {
```
// Update your UI for the loaded state
```
if (playbackStatus.isPlaying) {
  // Update your UI for the playing state
} else {
  // Update your UI for the paused state
}
```
if (playbackStatus.isBuffering) {
  // Update your UI for the buffering state
}
```
if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
  // The player has just finished playing and will stop. Maybe you want to play something else?
}
```
%%placeholder-start%%... %%placeholder-end%%
```
  }
};

// Load the playbackObject and obtain the reference.
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);
```
### Example: Loop media exactly 20 times
```
const N = 20;
%%placeholder-start%%... %%placeholder-end%%

_onPlaybackStatusUpdate = playbackStatus => {
  if (playbackStatus.didJustFinish) {
```
if (this.state.numberOfLoops == N - 1) {
  playbackObject.setIsLooping(false);
}
this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });
```
  }
};

%%placeholder-start%%... %%placeholder-end%%
this.setState({ numberOfLoops: 0 });
// Load the playbackObject and obtain the reference.
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);
playbackObject.setIsLooping(true);
```
## What is seek tolerance and why would I want to use it \[iOS only\]

When asked to seek an A/V item, native player in iOS sometimes may seek to a slightly different time. This technique, mentioned in [Apple documentation, is used to shorten the time of the `seekTo` call (the player may decide to play immediately from a different time than requested, instead of decoding the exact requested part and playing it with the decoding delay).

If precision is important, you can specify the tolerance with which the player will seek. However, this will result in an increased delay.

## API
```
import { Audio, Video } from 'expo-av';
```
## Constants

### `AV._DEFAULT_INITIAL_PLAYBACK_STATUS`

Type: `[AVPlaybackStatusToSet`

The default initial `AVPlaybackStatusToSet` of all `Audio.Sound` objects and `Video` components is as follows:
```
{
  progressUpdateIntervalMillis: 500,
  positionMillis: 0,
  shouldPlay: false,
  rate: 1.0,
  shouldCorrectPitch: false,
  volume: 1.0,
  isMuted: false,
  isLooping: false,
}
```

This default initial status can be overwritten by setting the optional `initialStatus` in `loadAsync()` or `Audio.Sound.createAsync()`.

## Interfaces

### `AV`

AV Methods

### `getStatusAsync()`

Gets the `AVPlaybackStatus` of the `playbackObject`.

Returns:

`[Promise<[AVPlaybackStatus>`

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject`.

### `setStatusAsync(status)`

| Parameter | Type | Description |
| --- | --- | --- |
| status | `[AVPlaybackStatusToSet` |
The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status.

 |

Sets a new `AVPlaybackStatusToSet` on the `playbackObject`. This method can only be called if the media has been loaded.

Returns:

`[Promise<[AVPlaybackStatus>`

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully, or rejects if setting the new status failed. See below for details on `AVPlaybackStatus`.

### `Playback`

Extends: `[AV](#av)`

On the `playbackObject` reference, the following API is provided.

Playback Methods

### `loadAsync(source, initialStatus, downloadAsync)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `[AVPlaybackSource` |
The source of the media.

 |
| initialStatus(optional) | `[AVPlaybackStatusToSet` |

The initial intended `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the default initial playback status. This value defaults to `{}` if no parameter is passed. For more information see the details on `AVPlaybackStatusToSet` type and the default initial playback status.

 |
| downloadAsync(optional) | `boolean` |

If set to `true`, the system will attempt to download the resource to the device before loading. This value defaults to `true`. Note that at the moment, this will only work for `source`s of the form `require('path/to/file')` or `Asset` objects.

 |

Loads the media from `source` into memory and prepares it for playing. This must be called before calling `setStatusAsync()` or any of the convenience set status methods. This method can only be called if the `playbackObject` is in an unloaded state.

Returns:

`[Promise<[AVPlaybackStatus>`

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is loaded, or rejects if loading failed. The `Promise` will also reject if the `playbackObject` was already loaded. See below for details on `AVPlaybackStatus`.

### `pauseAsync()`

This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false })`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `playAsync()`

This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true })`.

Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `playFromPositionAsync(positionMillis, tolerances)`

| Parameter | Type | Description |
| --- | --- | --- |
| positionMillis | `number` |
The desired position of playback in milliseconds.

 |
| tolerances(optional) | `[AVPlaybackTolerance](#avplaybacktolerance)` |

The tolerances are used only on iOS ([more details](#what-is-seek-tolerance-and-why-would)).

 |

This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true, positionMillis, seekMillisToleranceAfter: tolerances.seekMillisToleranceAfter, seekMillisToleranceBefore: tolerances.seekMillisToleranceBefore })`.

Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `replayAsync(status)`

| Parameter | Type | Description |
| --- | --- | --- |
| status | `[AVPlaybackStatusToSet` |
The new `AVPlaybackStatusToSet` of the `playbackObject`, whose values will override the current playback status. `positionMillis` and `shouldPlay` properties will be overridden with respectively `0` and `true`.

 |

Replays the playback item. When using `playFromPositionAsync(0)` the item is seeked to the position at `0 ms`. On iOS this method uses internal implementation of the player and is able to play the item from the beginning immediately.

Returns:

`[Promise<[AVPlaybackStatus>`

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully, or rejects if setting the new status failed.

### `setIsLoopingAsync(isLooping)`

| Parameter | Type | Description |
| --- | --- | --- |
| isLooping | `boolean` |
A boolean describing if the media should play once (`false`) or loop indefinitely (`true`).

 |

This is equivalent to `playbackObject.setStatusAsync({ isLooping })`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `setIsMutedAsync(isMuted)`

| Parameter | Type | Description |
| --- | --- | --- |
| isMuted | `boolean` |
A boolean describing if the audio of this media should be muted.

 |

This is equivalent to `playbackObject.setStatusAsync({ isMuted })`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `setPositionAsync(positionMillis, tolerances)`

| Parameter | Type | Description |
| --- | --- | --- |
| positionMillis | `number` |
The desired position of playback in milliseconds.

 |
| tolerances(optional) | `[AVPlaybackTolerance](#avplaybacktolerance)` |

The tolerances are used only on iOS ([more details](#what-is-seek-tolerance-and-why-would)).

 |

This is equivalent to `playbackObject.setStatusAsync({ positionMillis })`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `setProgressUpdateIntervalAsync(progressUpdateIntervalMillis)`

| Parameter | Type | Description |
| --- | --- | --- |
| progressUpdateIntervalMillis | `number` |
The new minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`. See `setOnPlaybackStatusUpdate()` for details.

 |

This is equivalent to `playbackObject.setStatusAsync({ progressUpdateIntervalMillis })`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `setRateAsync(rate, shouldCorrectPitch, pitchCorrectionQuality)`

| Parameter | Type | Description |
| --- | --- | --- |
| rate | `number` |
The desired playback rate of the media. This value must be between `0.0` and `32.0`. Only available on Android API version 23 and later and iOS.

 |
| shouldCorrectPitch | `boolean` |

A boolean describing if we should correct the pitch for a changed rate. If set to `true`, the pitch of the audio will be corrected (so a rate different than `1.0` will timestretch the audio).

 |
| pitchCorrectionQuality(optional) | `[PitchCorrectionQuality](#pitchcorrectionquality)` |

iOS time pitch algorithm setting, defaults to `Audio.PitchCorrectionQuality.Medium`. Using `Audio.PitchCorrectionQuality.Low` may cause automatic playback rate changes on iOS >= 17, as AVAudioTimePitchAlgorithmLowQualityZeroLatency is deprecated.

 |

This is equivalent to `playbackObject.setStatusAsync({ rate, shouldCorrectPitch, pitchCorrectionQuality })`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `setVolumeAsync(volume, audioPan)`

| Parameter | Type | Description |
| --- | --- | --- |
| volume | `number` |
A number between `0.0` (silence) and `1.0` (maximum volume).

 |
| audioPan(optional) | `number` |

A number between `-1.0` (full left) and `1.0` (full right).

 |

This is equivalent to `playbackObject.setStatusAsync({ volume, audioPan })`. Note: `audioPan` is currently only supported on Android using `androidImplementation: 'MediaPlayer'`

Returns:

`[Promise<[AVPlaybackStatus>`

### `stopAsync()`

This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false, positionMillis: 0 })`.

Returns:

`[Promise<[AVPlaybackStatus>`

### `unloadAsync()`

Unloads the media from memory. `loadAsync()` must be called again in order to be able to play the media.

> This cleanup function will be automatically called in the `Video` component's `componentWillUnmount`.

Returns:

`[Promise<[AVPlaybackStatus>`

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is unloaded, or rejects if unloading failed.

## Types

### `AVMetadata`

Object passed to the `onMetadataUpdate` function.

| Property | Type | Description |
| --- | --- | --- |
| title(optional) | `string` |
A string with the title of the sound object.

 |

### `AVPlaybackSource`

Literal Type: `union`

The following forms of source are supported:

*   A dictionary of the form `AVPlaybackSourceObject`. The `overrideFileExtensionAndroid` property may come in handy if the player receives an URL like `example.com/play` which redirects to `example.com/player.m3u8`. Setting this property to `m3u8` would allow the Android player to properly infer the content type of the media and use proper media file reader.
*   `require('path/to/file')` for a media file asset in the source code directory.
*   An [`Asset` object for a media file asset.

The [iOS developer documentation lists the audio and video formats supported on iOS.

There are two sets of audio and video formats supported on Android: [formats supported by ExoPlayer and [formats supported by Android's MediaPlayer. Expo uses ExoPlayer implementation by default. To use `MediaPlayer`, add `androidImplementation: 'MediaPlayer'` to the initial status of the AV object.

Acceptable values are: `number` | `[AVPlaybackSourceObject](#avplaybacksourceobject)` | `[Asset`

### `AVPlaybackSourceObject`

One of the possible forms of the `AVPlaybackSource`.

| Property | Type | Description |
| --- | --- | --- |
| headers(optional) | `Record<string, string>` |
An optional headers object passed in a network request.

 |
| overrideFileExtensionAndroid(optional) | `string` |

Only for: Android

An optional string overriding extension inferred from the URL.

 |
| uri | `string` |

A network URL pointing to a media file.

 |

### `AVPlaybackStatus`

Literal Type: `union`

This is the structure returned from all playback API calls and describes the state of the `playbackObject` at that point in time. It can take a form of `AVPlaybackStatusSuccess` or `AVPlaybackStatusError` based on the `playbackObject` load status.

Acceptable values are: `[AVPlaybackStatusError](#avplaybackstatuserror)` | `[AVPlaybackStatusSuccess](#avplaybackstatussuccess)`

### `AVPlaybackStatusError`

| Property | Type | Description |
| --- | --- | --- |
| androidImplementation(optional) | `string` |
Only for: Android

Underlying implementation to use (when set to `MediaPlayer` it uses [Android's MediaPlayer, uses [ExoPlayer otherwise). You may need to use this property if you're trying to play an item unsupported by ExoPlayer ([formats supported by ExoPlayer, [formats supported by Android's MediaPlayer).

Note that setting this property takes effect only when the AV object is just being created (toggling its value later will do nothing).

 |
| error(optional) | `string` |

A string only present if the `playbackObject` just encountered a fatal error and forced unload. Populated exactly once when an error forces the object to unload.

 |
| isLoaded | `false` |

A boolean set to `false`.

 |

### `AVPlaybackStatusSuccess`

| Property | Type | Description |
| --- | --- | --- |
| androidImplementation(optional) | `string` |
Only for: Android

Underlying implementation to use (when set to `MediaPlayer` it uses [Android's MediaPlayer, uses [ExoPlayer otherwise). You may need to use this property if you're trying to play an item unsupported by ExoPlayer ([formats supported by ExoPlayer, [formats supported by Android's MediaPlayer).

Note that setting this property takes effect only when the AV object is just being created (toggling its value later will do nothing).

 |
| audioPan | `number` |

The current audio panning value of the audio for this media.

 |
| didJustFinish | `boolean` |

A boolean describing if the media just played to completion at the time that this status was received. When the media plays to completion, the function passed in `setOnPlaybackStatusUpdate()` is called exactly once with `didJustFinish` set to `true`. `didJustFinish` is never `true` in any other case.

 |
| durationMillis(optional) | `number` |

The duration of the media in milliseconds. This is only present if the media has a duration.

> Note that in some cases, a media file's duration is readable on Android, but not on iOS.

 |
| isBuffering | `boolean` |

A boolean describing if the media is currently buffering.

 |
| isLoaded | `true` |

A boolean set to `true`.

 |
| isLooping | `boolean` |

A boolean describing if the media is currently looping.

 |
| isMuted | `boolean` |

A boolean describing if the audio of this media is currently muted.

 |
| isPlaying | `boolean` |

A boolean describing if the media is currently playing.

 |
| pitchCorrectionQuality(optional) | `[PitchCorrectionQuality](#pitchcorrectionquality)` |

iOS time pitch algorithm setting. See `setRateAsync` for details.

 |
| playableDurationMillis(optional) | `number` |

The position until which the media has been buffered into memory. Like `durationMillis`, this is only present in some cases.

 |
| positionMillis | `number` |

The current position of playback in milliseconds.

 |
| progressUpdateIntervalMillis | `number` |

The minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`. See `setOnPlaybackStatusUpdate()` for details.

 |
| rate | `number` |

The current rate of the media.

 |
| seekMillisToleranceAfter(optional) | `number` |

\-

 |
| seekMillisToleranceBefore(optional) | `number` |

\-

 |
| shouldCorrectPitch | `boolean` |

A boolean describing if we are correcting the pitch for a changed rate.

 |
| shouldPlay | `boolean` |

A boolean describing if the media is supposed to play.

 |
| uri | `string` |

The location of the media source.

 |
| volume | `number` |

The current volume of the audio for this media.

 |

### `AVPlaybackStatusToSet`

This is the structure passed to `setStatusAsync()` to modify the state of the `playbackObject`.

| Property | Type | Description |
| --- | --- | --- |
| androidImplementation(optional) | `string` |
Only for: Android

Underlying implementation to use (when set to `MediaPlayer` it uses [Android's MediaPlayer, uses [ExoPlayer otherwise). You may need to use this property if you're trying to play an item unsupported by ExoPlayer ([formats supported by ExoPlayer, [formats supported by Android's MediaPlayer).

Note that setting this property takes effect only when the AV object is just being created (toggling its value later will do nothing).

 |
| audioPan(optional) | `number` |

Only for: Android

The current audio panning value of the audio for this media.

> Note that this only affect the audio of this `playbackObject` and do NOT affect the system volume. Also note that this is only available when the video was loaded using `androidImplementation: 'MediaPlayer'`

 |
| isLooping(optional) | `boolean` |

A boolean describing if the media is currently looping.

 |
| isMuted(optional) | `boolean` |

A boolean describing if the audio of this media is currently muted.

> Note that this only affect the audio of this `playbackObject` and do NOT affect the system volume.

 |
| pitchCorrectionQuality(optional) | `[PitchCorrectionQuality](#pitchcorrectionquality)` |

iOS time pitch algorithm setting. See `setRateAsync` for details.

 |
| positionMillis(optional) | `number` |

The current position of playback in milliseconds.

 |
| progressUpdateIntervalMillis(optional) | `number` |

The minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`. See `setOnPlaybackStatusUpdate()` for details.

 |
| rate(optional) | `number` |

Only for: Android API 23+

iOS

The current rate of the media.

 |
| seekMillisToleranceAfter(optional) | `number` |

\-

 |
| seekMillisToleranceBefore(optional) | `number` |

\-

 |
| shouldCorrectPitch(optional) | `boolean` |

A boolean describing if we are correcting the pitch for a changed rate.

 |
| shouldPlay(optional) | `boolean` |

A boolean describing if the media is supposed to play.

 |
| volume(optional) | `number` |

The current volume of the audio for this media.

> Note that this only affect the audio of this `playbackObject` and do NOT affect the system volume.

 |

### `AVPlaybackTolerance`

| Property | Type | Description |
| --- | --- | --- |
| toleranceMillisAfter(optional) | `number` |
\-

 |
| toleranceMillisBefore(optional) | `number` |

\-

 |

## Enums

### `PitchCorrectionQuality`

Check [official Apple documentation for more information.

#### `High`

`PitchCorrectionQuality.High ＝ number`

Equivalent to `AVAudioTimePitchAlgorithmSpectral`.

#### `Low`

`PitchCorrectionQuality.Low ＝ number`

Equivalent to `AVAudioTimePitchAlgorithmLowQualityZeroLatency`.

#### `Medium`

`PitchCorrectionQuality.Medium ＝ number`

Equivalent to `AVAudioTimePitchAlgorithmTimeDomain`.

## Permissions

### Android

You must add the following permissions to your app.json inside the [`expo.android.permissions` array.

| Android Permission | Description |
| --- | --- |
|
`RECORD_AUDIO`

 |

Allows an application to record audio.

 |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSMicrophoneUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s microphone. |

---

# Expo BackgroundFetch




A universal library that provides API for performing background fetch tasks.



2.0.1

`expo-background-fetch` provides an API to perform [background fetch tasks, allowing you to run specific code periodically in the background to update your app. This module uses [TaskManager Native API under the hood.

#### Known issues 

iOS

`BackgroundFetch` only works when the app is backgrounded, not if the app was terminated or upon device reboot. You can check out [the relevant GitHub issue for more details.

## Installation

`npx expo install expo-background-fetch`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using a native ios project manually, then you'll need to add the following to your Expo.plist file:

ios/project-name/Supporting/Expo.plist

```
<key>UIBackgroundModes</key>
  <array>
```
<string>fetch</string>
```
  </array>
</key>
```

## Usage

Below is an example that demonstrates how to use `expo-background-fetch`.

Background Fetch Usage

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

// 1. Define the task by providing a name and the function that should be executed
// Note: This needs to be called in the global scope (e.g outside of your React components)
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  // Be sure to return the successful result type!
  return BackgroundFetch.BackgroundFetchResult.NewData;
});

// 2. Register the task at some point in your app by providing the same name,
// and some configuration options for how the background fetch should behave
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
```
minimumInterval: 60 * 15, // 15 minutes
stopOnTerminate: false, // android only,
startOnBoot: true, // android only
```
  });
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background fetch calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
```
checkStatusAsync();
```
  }, );

  const checkStatusAsync = async () => {
```
const status = await BackgroundFetch.getStatusAsync();
const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
setStatus(status);
setIsRegistered(isRegistered);
```
  };

  const toggleFetchTask = async () => {
```
if (isRegistered) {
  await unregisterBackgroundFetchAsync();
} else {
  await registerBackgroundFetchAsync();
}
```
checkStatusAsync();
```
  };

  return (
```
<View style={styles.screen}>
  <View style={styles.textContainer}>
    <Text>
      Background fetch status:{' '}
      <Text style={styles.boldText}>
        {status && BackgroundFetch.BackgroundFetchStatus[status]}
      </Text>
    </Text>
    <Text>
      Background fetch task name:{' '}
      <Text style={styles.boldText}>
        {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
      </Text>
    </Text>
  </View>
  <View style={styles.textContainer}></View>
  <Button
    title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
    onPress={toggleFetchTask}
  />
</View>
```
  );
}

const styles = StyleSheet.create({
  screen: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
```
  },
  textContainer: {
```
margin: 10,
```
  },
  boldText: {
```
fontWeight: 'bold',
```
  },
});
```

## Triggering background fetches

Background fetches can be difficult to test because they can happen inconsistently. Fortunately, you can trigger background fetches manually when developing your apps.

For iOS, you can use the `Instruments` app on macOS to manually trigger background fetches:

1.  Open the Instruments app. The Instruments app can be searched through Spotlight (⌘ + Space) or opened from `/Applications/Xcode.app/Contents/Applications/Instruments.app`
2.  Select `Time Profiler`
3.  Select your device / simulator and pick the `Expo Go` app
4.  Press the `Record` button in the top left corner
5.  Navigate to the `Document` Menu and select `Simulate Background Fetch - Expo Go`:

For Android, you can set the `minimumInterval` option of your task to a small number and background your application like so:

```
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
```
minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded
```
  });
}
```

## API

```
import * as BackgroundFetch from 'expo-background-fetch';
```

## Methods

### `BackgroundFetch.getStatusAsync()`

Gets a status of background fetch.

Returns:

`[Promise<[BackgroundFetchStatus](#backgroundfetchstatus) | null>`

Returns a promise which fulfils with one of `BackgroundFetchStatus` enum values.

### `BackgroundFetch.registerTaskAsync(taskName, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task to register. The task needs to be defined first - see [`TaskManager.defineTask` for more details.

 |
| options(optional) | `[BackgroundFetchOptions](#backgroundfetchoptions)` |

An object containing the background fetch options.

Default:`{}`

 |

Registers background fetch task with given name. Registered tasks are saved in persistent storage and restored once the app is initialized.

Returns:

`[Promise<void>`

Example

```
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

TaskManager.defineTask(YOUR_TASK_NAME, () => {
  try {
```
const receivedNewData = // do your background fetch here
return receivedNewData ? BackgroundFetch.BackgroundFetchResult.NewData : BackgroundFetch.BackgroundFetchResult.NoData;
```
  } catch (error) {
```
return BackgroundFetch.BackgroundFetchResult.Failed;
```
  }
});
```

### `BackgroundFetch.setMinimumIntervalAsync(minimumInterval)`

| Parameter | Type | Description |
| --- | --- | --- |
| minimumInterval | `number` |
Number of seconds that must elapse before another background fetch can be called.

 |

Sets the minimum number of seconds that must elapse before another background fetch can be initiated. This value is advisory only and does not indicate the exact amount of time expected between fetch operations.

> This method doesn't take any effect on Android. It is a global value which means that it can overwrite settings from another application opened through Expo Go.

Returns:

`[Promise<void>`

A promise which fulfils once the minimum interval is set.

### `BackgroundFetch.unregisterTaskAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task to unregister.

 |

Unregisters background fetch task, so the application will no longer be executing this task.

Returns:

`[Promise<void>`

A promise which fulfils when the task is fully unregistered.

## Interfaces

### `BackgroundFetchOptions`

| Property | Type | Description |
| --- | --- | --- |
| minimumInterval(optional) | `number` |
Inexact interval in seconds between subsequent repeats of the background fetch alarm. The final interval may differ from the specified one to minimize wakeups and battery usage.

*   On Android it defaults to 10 minutes,
*   On iOS it calls `BackgroundFetch.setMinimumIntervalAsync` behind the scenes and the default value is the smallest fetch interval supported by the system (10-15 minutes). Background fetch task receives no data, but your task should return a value that best describes the results of your background fetch work.

 |
| startOnBoot(optional) | `boolean` |

Only for: Android

Whether to restart background fetch events when the device has finished booting.

Default:`false`

 |
| stopOnTerminate(optional) | `boolean` |

Only for: Android

Whether to stop receiving background fetch events after user terminates the app.

Default:`true`

 |

## Enums

### `BackgroundFetchResult`

This return value is to let iOS know what the result of your background fetch was, so the platform can better schedule future background fetches. Also, your app has up to 30 seconds to perform the task, otherwise your app will be terminated and future background fetches may be delayed.

#### `NoData`

`BackgroundFetchResult.NoData ＝ 1`

There was no new data to download.

#### `NewData`

`BackgroundFetchResult.NewData ＝ 2`

New data was successfully downloaded.

#### `Failed`

`BackgroundFetchResult.Failed ＝ 3`

An attempt to download data was made but that attempt failed.

### `BackgroundFetchStatus`

#### `Denied`

`BackgroundFetchStatus.Denied ＝ 1`

The user explicitly disabled background behavior for this app or for the whole system.

#### `Restricted`

`BackgroundFetchStatus.Restricted ＝ 2`

Background updates are unavailable and the user cannot enable them again. This status can occur when, for example, parental controls are in effect for the current user.

#### `Available`

`BackgroundFetchStatus.Available ＝ 3`

Background updates are available for the app.

## Permissions

### Android

On Android, this module might listen when the device is starting up. It's necessary to continue working on tasks started with `startOnBoot`. It also keeps devices "awake" that are going idle and asleep fast, to improve reliability of the tasks. Because of this both the `RECEIVE_BOOT_COMPLETED` and `WAKE_LOCK` permissions are added automatically.

| Android Permission | Description |
| --- | --- |
|
`RECEIVE_BOOT_COMPLETED`

 |

Allows an application to receive the Intent.ACTION\_BOOT\_COMPLETED that is broadcast after the system finishes booting.

> Allows an application to receive the `[Intent.ACTION_BOOT_COMPLETED` that is broadcast after the system finishes booting. If you don't request this permission, you will not receive the broadcast at that time. Though holding this permission does not have any security implications, it can have a negative impact on the user experience by increasing the amount of time it takes the system to start and allowing applications to have themselves running without the user being aware of them. As such, you must explicitly declare your use of this facility to make that visible to the user.

 |
|

`WAKE_LOCK`

 |

Allows using PowerManager WakeLocks to keep processor from sleeping or screen from dimming.

 |

### iOS

To use `BackgroundFetch` API in standalone apps on iOS, your app has to include background mode in the Info.plist file. See [background tasks configuration guide for more details.

---

# Expo BarCodeScanner

> Deprecated: This library will no longer be available from SDK 51. We recommend using [`expo-camera` which has barcode scanning built-in instead.

`expo-barcode-scanner` provides a React component that renders a viewfinder for the device's camera (either front or back) and will scan bar codes that show up in the frame.

#### Limitations

> Only one active `BarCodeScanner` preview is currently supported.

When using navigation, the best practice is to unmount any previously rendered `BarCodeScanner` component so the following screens can use their own `BarCodeScanner` without any issue.

#### Known issues 

The `BarCodeScanner` component has difficulty scanning barcodes with black backgrounds. This is a limitation due to the underlying ZXing library. It is also an issue discussed on a [Stack Overflow thread. To work around this, your app should allow users to capture the barcode image and then invert the colors of the image before passing it to the `BarCodeScanner`.

## Installation

`npx expo install expo-barcode-scanner`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-barcode-scanner` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-barcode-scanner",
    {
      "cameraPermission": "Allow $(PRODUCT_NAME) to access camera."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `cameraPermission` | `"Allow $(PRODUCT_NAME) to access your camera"` |
Only for: iOS

A string to set the `NSCameraUsageDescription` permission message.

 |
| `microphonePermission` | `"Allow $(PRODUCT_NAME) to access your microphone"` |

Only for: iOS

A string to set the `NSMicrophoneUsageDescription` permission message.

 |

Are you using this library in an existing React Native app?

Learn how to configure the native projects in the [installation instructions in the `expo-barcode-scanner` repository.

## Supported formats

| Bar code format | Android | iOS |
| --- | --- | --- |
| aztec |  |  |
| codabar |  |  |
| code39 |  | \* |
| code93 |  |  |
| code128 |  |  |
| code39mod43 |  |  |
| datamatrix |  |  |
| ean13 |  |  |
| ean8 |  |  |
| interleaved2of5 | use `itf14` |  |
| itf14 |  | \* |
| maxicode |  |  |
| pdf417 |  | \* |
| rss14 |  |  |
| rssexpanded |  |  |
| upc\_a |  |  |
| upc\_e |  |  |
| upc\_ean |  |  |
| qr |  |  |

#### Additional notes

1.  When an `ITF-14` barcode is recognized, it's type can sometimes be set to `interleaved2of5`.
2.  Scanning for either `PDF417` and/or `Code39` formats can result in a noticeable increase in battery consumption on iOS. It is recommended to provide only the bar code formats you expect to scan to the `barCodeTypes` prop.

## Usage

You must request permission to access the user's camera before attempting to get it. To do this, you will want to use the [Permissions API. You can see this in practice in the following example.

Basic BarCodeScanner usage

```
import { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Button } from 'react-native';
import { BarCodeScanner } from 'expo-barcode-scanner';

export default function App() {
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);

  useEffect(() => {
```
const getBarCodeScannerPermissions = async () => {
  const { status } = await BarCodeScanner.requestPermissionsAsync();
  setHasPermission(status === 'granted');
};
```
getBarCodeScannerPermissions();
```
  }, );

  const handleBarCodeScanned = ({ type, data }) => {
```
setScanned(true);
alert(`Bar code with type ${type} and data ${data} has been scanned!`);
```
  };

  if (hasPermission === null) {
```
return <Text>Requesting for camera permission</Text>;
```
  }
  if (hasPermission === false) {
```
return <Text>No access to camera</Text>;
```
  }

  return (
```
<View style={styles.container}>
  <BarCodeScanner
    onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
    style={StyleSheet.absoluteFillObject}
  />
  {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
flexDirection: 'column',
justifyContent: 'center',
```
  },
});
```

## API

```
import { BarCodeScanner } from 'expo-barcode-scanner';
```

## Component

> Deprecated BarCodeScanner has been deprecated and will be removed in a future SDK version. Use `expo-camera` instead. See [How to migrate from `expo-barcode-scanner` to `expo-camera` for more details.

### `BarCodeScanner`

Type: `React.[Component<[BarCodeScannerProps](#barcodescannerprops)>`

BarCodeScannerProps

### `barCodeTypes`

Optional Type: `string`

An array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where `codeType` is one of these [listed above](#supported-formats). Defaults to all supported bar code types. It is recommended to provide only the bar code formats you expect to scan to minimize battery usage.

For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`.

### `onBarCodeScanned`

Optional Type: `[BarCodeScannedCallback](#barcodescannedcallback)`

A callback that is invoked when a bar code has been successfully scanned. The callback is provided with an [BarCodeScannerResult](#barcodescannerresult).

> Note: Passing `undefined` to the `onBarCodeScanned` prop will result in no scanning. This can be used to effectively "pause" the scanner so that it doesn't continually scan even after data has been retrieved.

### `type`

Optional Literal type: `union` Default: `Type.back`

Camera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`. Same as `Camera.Constants.Type`.

Acceptable values are: `'front'` | `'back'` | `number`

#### Inherited Props

*   `[ViewProps`

## Hooks

### `usePermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions for the barcode scanner. This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [permissionResponse, requestPermission] = BarCodeScanner.usePermissions();
```

## Methods

### `BarCodeScanner.getPermissionsAsync()`

Checks user's permissions for accessing the camera.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

Return a promise that fulfills to an object of type `PermissionResponse`.

### `BarCodeScanner.requestPermissionsAsync()`

Asks the user to grant permissions for accessing the camera.

On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

Return a promise that fulfills to an object of type `PermissionResponse`.

### `BarCodeScanner.scanFromURLAsync(url, barCodeTypes)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
URL to get the image from.

 |
| barCodeTypes(optional) | `string` |

An array of bar code types. Defaults to all supported bar code types on the platform.

> Note: Only QR codes are supported on iOS.

 |

Scan bar codes from the image given by the URL.

Returns:

`[Promise<[BarCodeScannerResult](#barcodescannerresult)>`

A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type refers to the bar code type that was scanned and the data is the information encoded in the bar code.

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `BarCodeBounds`

| Property | Type | Description |
| --- | --- | --- |
| origin | `[BarCodePoint](#barcodepoint)` |
The origin point of the bounding box.

 |
| size | `[BarCodeSize](#barcodesize)` |

The size of the bounding box.

 |

### `BarCodeEvent`

Type: `[BarCodeScannerResult](#barcodescannerresult)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| target(optional) | `number` |
\-

 |

### `BarCodeEventCallbackArguments`

| Property | Type | Description |
| --- | --- | --- |
| nativeEvent | `[BarCodeEvent](#barcodeevent)` |
\-

 |

### `BarCodePoint`

Those coordinates are represented in the coordinate space of the barcode source (e.g. when you are using the barcode scanner view, these values are adjusted to the dimensions of the view).

| Property | Type | Description |
| --- | --- | --- |
| x | `number` |
The `x` coordinate value.

 |
| y | `number` |

The `y` coordinate value.

 |

### `BarCodeScannedCallback(params)`

| Parameter | Type |
| --- | --- |
| params | `[BarCodeEvent](#barcodeevent)` |

Returns:

`void`

### `BarCodeScannerResult`

| Property | Type | Description |
| --- | --- | --- |
| bounds | `[BarCodeBounds](#barcodebounds)` |
The [BarCodeBounds](#barcodebounds) object. `bounds` in some case will be representing an empty rectangle. Moreover, `bounds` doesn't have to bound the whole barcode. For some types, they will represent the area used by the scanner.

 |
| cornerPoints | `[BarCodePoint](#barcodepoint)` |

Corner points of the bounding box. `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417` you don't get this value.

 |
| data | `string` |

The parsed information encoded in the bar code.

 |
| type | `string` |

The barcode type.

 |

### `BarCodeSize`

| Property | Type | Description |
| --- | --- | --- |
| height | `number` |
The height value.

 |
| width | `number` |

The width value.

 |

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

The following permissions are added automatically through this library's AndroidManifest.xml:

| Android Permission | Description |
| --- | --- |
|
`CAMERA`

 |

Required to be able to access the camera device.

 |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSCameraUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s camera. |
|

`NSMicrophoneUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s microphone. |

---

# Expo Barometer

`Barometer` from `expo-sensors` provides access to the device barometer sensor to respond to changes in air pressure, which is measured in hectopascals (`hPa`).

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic Barometer usage

```
import { useState } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { Barometer } from 'expo-sensors';

export default function App() {
  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggleListener = () => {
```
subscription ? unsubscribe() : subscribe();
```
  };

  const subscribe = () => {
```
setSubscription(Barometer.addListener(setData));
```
  };

  const unsubscribe = () => {
```
subscription && subscription.remove();
setSubscription(null);
```
  };

  return (
```
<View style={styles.wrapper}>
  <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>
  <Text>Pressure: {pressure} hPa</Text>
  <Text>
    Relative Altitude:{' '}
    {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}
  </Text>
  <TouchableOpacity onPress={toggleListener} style={styles.button}>
    <Text>Toggle listener</Text>
  </TouchableOpacity>
</View>
```
  );
}

const styles = StyleSheet.create({
  button: {
```
justifyContent: 'center',
alignItems: 'center',
backgroundColor: '#eee',
padding: 10,
marginTop: 15,
```
  },
  wrapper: {
```
flex: 1,
alignItems: 'stretch',
justifyContent: 'center',
paddingHorizontal: 20,
```
  },
});
```

## API

```
import { Barometer } from 'expo-sensors';
```

## Classes

### `Barometer`

Only for: Android, iOS

Type: Class extends `[DeviceSensor<[BarometerMeasurement](#barometermeasurement)>`

Barometer Methods

### `addListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `Listener<[BarometerMeasurement](#barometermeasurement)>` |
A callback that is invoked when a barometer update is available. When invoked, the listener is provided with a single argument that is `BarometerMeasurement`.

 |

Subscribe for updates to the barometer.

Returns:

`[Subscription](#subscription)`

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

Example

```
const subscription = Barometer.addListener(({ pressure, relativeAltitude }) => {
  console.log({ pressure, relativeAltitude });
});
```

### `getListenerCount()`

Returns the registered listeners count.

Returns:

`number`

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

Returns:

`boolean`

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Check the availability of the device barometer. Requires at least Android 2.3 (API Level 9) and iOS 8.

Returns:

`[Promise<boolean>`

A promise that resolves to a `boolean` denoting the availability of the sensor.

### `removeAllListeners()`

Removes all registered listeners.

Returns:

`void`

### `removeSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
A subscription to remove.

 |

Removes the given subscription.

Returns:

`void`

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `setUpdateInterval(intervalMs)`

| Parameter | Type | Description |
| --- | --- | --- |
| intervalMs | `number` |
Desired interval in milliseconds between sensor updates.

> Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
>
> If you need an update interval less than 200ms, you should:
>
> *   add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [app.json `permissions` field
> *   or if you are using bare workflow, add `<uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/>` to AndroidManifest.xml.

 |

Set the sensor update interval.

Returns:

`void`

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `BarometerMeasurement`

The altitude data returned from the native sensors.

| Property | Type | Description |
| --- | --- | --- |
| pressure | `number` |
Measurement in hectopascals (`hPa`).

 |
| relativeAltitude(optional) | `number` |

Only for: iOS

Measurement in meters (`m`).

 |
| timestamp | `number` |

Timestamp of the measurement in seconds.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

## Units and providers

| OS | Units | Provider | Description |
| --- | --- | --- | --- |
| iOS | _`hPa`_ | [`CMAltimeter` | Altitude events reflect the change in the current altitude, not the absolute altitude. |
| Android | _`hPa`_ | [`Sensor.TYPE_PRESSURE` | Monitoring air pressure changes. |
| Web |  |  | This sensor is not available on the web and cannot be accessed. An `UnavailabilityError` will be thrown if you attempt to get data. |

---

# Expo Battery

`expo-battery` provides battery information for the physical device (such as battery level, whether or not the device is charging, and more) as well as corresponding event listeners.

## Installation

`npx expo install expo-battery`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic Battery Usage

```
import { useBatteryLevel } from 'expo-battery';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const batteryLevel = useBatteryLevel();

  return (
```
<View style={styles.container}>
  <Text>Current Battery Level: {batteryLevel}</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
marginTop: 15,
alignItems: 'center',
justifyContent: 'center',
```
  },
});
```

## API

```
import * as Battery from 'expo-battery';
```

## Hooks

### `useBatteryLevel()`

Gets the device's battery level, as in `getBatteryLevelAsync`.

Returns:

`number`

The battery level of the device.

Example

```
const batteryLevel = useBatteryLevel();
```

### `useBatteryState()`

Gets the device's battery state, as in `getBatteryStateAsync`.

Returns:

`[BatteryState](#batterystate)`

The battery state of the device.

Example

```
const batteryState = useBatteryState();
```

### `useLowPowerMode()`

Boolean that indicates if the device is in low power or power saver mode, as in `isLowPowerModeEnabledAsync`.

Returns:

`boolean`

Returns a boolean indicating if the device is in low power mode.

Example

```
const lowPowerMode = useLowPowerMode();
```

### `usePowerState()`

Gets the device's power state information, as in `getPowerStateAsync`.

Returns:

`[PowerState](#powerstate)`

Returns power state information.

Example

```
const { lowPowerMode, batteryLevel, batteryState } = usePowerState();
```

## Methods

### `getBatteryLevelAsync()`

Gets the battery level of the device as a number between `0` and `1`, inclusive. If the device does not support retrieving the battery level, this method returns `-1`. On web, this method always returns `1`.

Returns:

`[Promise<number>`

A `Promise` that fulfils with a number between `0` and `1` representing the battery level, or `-1` if the device does not provide it.

Example

```
await Battery.getBatteryLevelAsync();
// 0.759999
```

### `getBatteryStateAsync()`

Tells the battery's current state. On web, this always returns `BatteryState.UNKNOWN`.

Returns:

`[Promise<[BatteryState](#batterystate)>`

Returns a `Promise` which fulfills with a `Battery.BatteryState` enum value for whether the device is any of the four states.

Example

```
await Battery.getBatteryStateAsync();
// BatteryState.CHARGING
```

### `getPowerStateAsync()`

Gets the power state of the device including the battery level, whether it is plugged in, and if the system is currently operating in Power Saver Mode (Android) or Low Power Mode (iOS). This method re-throws any errors that occur when retrieving any of the power-state information.

Returns:

`[Promise<[PowerState](#powerstate)>`

Returns a `Promise` which fulfills with `PowerState` object.

Example

```
await Battery.getPowerStateAsync();
// {
//   batteryLevel: 0.759999,
//   batteryState: BatteryState.UNPLUGGED,
//   lowPowerMode: true,
// }
```

### `isAvailableAsync()`

Resolves with whether the battery API is available on the current device. The value of this property is `true` on Android and physical iOS devices and `false` on iOS simulators. On web, it depends on whether the browser supports the web battery API.

Returns:

`[Promise<boolean>`

### `isBatteryOptimizationEnabledAsync()`

Checks whether battery optimization is enabled for your application. If battery optimization is enabled for your app, background tasks might be affected when your app goes into doze mode state. (only on Android 6.0 or later)

Returns:

`[Promise<boolean>`

Returns a `Promise` which fulfills with a `boolean` value of either `true` or `false`, indicating whether the battery optimization is enabled or disabled, respectively. (Android only)

Example

```
await Battery.isBatteryOptimizationEnabledAsync();
// true
```

### `isLowPowerModeEnabledAsync()`

Gets the current status of Power Saver mode on Android and Low Power mode on iOS. If a platform doesn't support Low Power mode reporting (like web, older Android devices), the reported low-power state is always `false`, even if the device is actually in low-power mode.

Returns:

`[Promise<boolean>`

Returns a `Promise` which fulfills with a `boolean` value of either `true` or `false`, indicating whether low power mode is enabled or disabled.

Example

Power Saver Mode (Android) or Low Power Mode (iOS) are enabled.

```
await Battery.isLowPowerModeEnabledAsync();
// true
```

## Event Subscriptions

### `addBatteryLevelListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [BatteryLevelEvent](#batterylevelevent)) => void` |
A callback that is invoked when battery level changes. The callback is provided a single argument that is an object with a `batteryLevel` key.

 |

Subscribe to the battery level change updates.

On Android devices, the event fires only when significant changes happens, which is when the battery level drops below [`android.intent.action.BATTERY_LOW` or rises above [`android.intent.action.BATTERY_OKAY` from a low battery level. See [Monitor the Battery Level and Charging State in Android documentation for more information.

On iOS devices, the event fires when the battery level drops one percent or more, but is only fired once per minute at maximum.

On web, the event never fires.

Returns:

`[Subscription](#subscription)`

A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.

### `addBatteryStateListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [BatteryStateEvent](#batterystateevent)) => void` |
A callback that is invoked when battery state changes. The callback is provided a single argument that is an object with a `batteryState` key.

 |

Subscribe to the battery state change updates to receive an object with a `Battery.BatteryState` enum value for whether the device is any of the four states.

On web, the event never fires.

Returns:

`[Subscription](#subscription)`

A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.

### `addLowPowerModeListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [PowerModeEvent](#powermodeevent)) => void` |
A callback that is invoked when Power Saver Mode (Android) or Low Power Mode (iOS) changes. The callback is provided a single argument that is an object with a `lowPowerMode` key.

 |

Subscribe to Power Saver Mode (Android) or Low Power Mode (iOS) updates. The event fires whenever the power mode is toggled.

On web, the event never fires.

Returns:

`[Subscription](#subscription)`

A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.

## Types

### `BatteryLevelEvent`

| Property | Type | Description |
| --- | --- | --- |
| batteryLevel | `number` |
A number between `0` and `1`, inclusive, or `-1` if the battery level is unknown.

 |

### `BatteryStateEvent`

| Property | Type | Description |
| --- | --- | --- |
| batteryState | `[BatteryState](#batterystate)` |
An enum value representing the battery state.

 |

### `PowerModeEvent`

| Property | Type | Description |
| --- | --- | --- |
| lowPowerMode | `boolean` |
A boolean value, `true` if lowPowerMode is on, `false` if lowPowerMode is off.

 |

### `PowerState`

| Property | Type | Description |
| --- | --- | --- |
| batteryLevel | `number` |
A number between `0` and `1`, inclusive, or `-1` if the battery level is unknown.

 |
| batteryState | `[BatteryState](#batterystate)` |

An enum value representing the battery state.

 |
| lowPowerMode | `boolean` |

A boolean value, `true` if lowPowerMode is on, `false` if lowPowerMode is off.

 |

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `BatteryState`

#### `UNKNOWN`

`BatteryState.UNKNOWN ＝ 0`

If the battery state is unknown or inaccessible.

#### `UNPLUGGED`

`BatteryState.UNPLUGGED ＝ 1`

If battery is not charging or discharging.

#### `CHARGING`

`BatteryState.CHARGING ＝ 2`

If battery is charging.

#### `FULL`

`BatteryState.FULL ＝ 3`

If the battery level is full.

---

# Expo BlurView

A React component that blurs everything underneath the view. Common usage of this is for navigation bars, tab bars, and modals.

> `BlurView` on Android is an experimental feature. To enable it use the [`experimentalBlurMethod` prop.

#### Known issues

The blur effect does not update when `BlurView` is rendered before dynamic content is rendered using, for example, `FlatList`. To fix this, make sure that `BlurView` is rendered after the dynamic content component. For example:

```
<View>
  <FlatList />
  <BlurView />
</View>
```

## Installation

`npx expo install expo-blur`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic BlurView usage

```
import { Text, StyleSheet, View, SafeAreaView } from 'react-native';
import { BlurView } from 'expo-blur';

export default function App() {
  const text = 'Hello, my container is blurring contents underneath!';
  return (
```
<SafeAreaView style={styles.container}>
  <View style={styles.background}>
    {[...Array(20).keys()].map(i => (
      <View
        key={`box-${i}`}
        style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}
      />
    ))}
  </View>
  <BlurView intensity={100} style={styles.blurContainer}>
    <Text style={styles.text}>{text}</Text>
  </BlurView>
  <BlurView intensity={80} tint="light" style={styles.blurContainer}>
    <Text style={styles.text}>{text}</Text>
  </BlurView>
  <BlurView intensity={90} tint="dark" style={styles.blurContainer}>
    <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>
  </BlurView>
</SafeAreaView>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
```
  },
  blurContainer: {
```
flex: 1,
padding: 20,
margin: 16,
textAlign: 'center',
justifyContent: 'center',
overflow: 'hidden',
borderRadius: 20,
```
  },
  background: {
```
flex: 1,
flexWrap: 'wrap',
...StyleSheet.absoluteFill,
```
  },
  box: {
```
width: '25%',
height: '20%',
```
  },
  boxEven: {
```
backgroundColor: 'orangered',
```
  },
  boxOdd: {
```
backgroundColor: 'gold',
```
  },
  text: {
```
fontSize: 24,
fontWeight: '600',
```
  },
});
```

## API

```
import { BlurView } from 'expo-blur';
```

## Component

### `BlurView`

Type: `React.[Component<[BlurViewProps](#blurviewprops)>`

BlurViewProps

### `blurReductionFactor`

Only for: Android

Optional Type: `number` Default: `4`

A number by which the blur intensity will be divided on Android.

When using experimental blur methods on Android, the perceived blur intensity might differ from iOS at different intensity levels. This property can be used to fine tune it on Android to match it more closely with iOS.

### `experimentalBlurMethod`

Only for: Android

Optional Type: `[ExperimentalBlurMethod](#experimentalblurmethod)` Default: `'none'`

Blur method to use on Android.

> Currently, `BlurView` support is experimental on Android and may cause performance and graphical issues. It can be enabled by setting this property.

### `intensity`

Optional Type: `number` Default: `50`

A number from `1` to `100` to control the intensity of the blur effect.

You can animate this property using `react-native-reanimated`.

### `tint`

Optional Type: `[BlurTint](#blurtint)` Default: `'default'`

A tint mode which will be applied to the view.

#### Inherited Props

*   `[ViewProps`

## Types

### `BlurTint`

Literal Type: `string`

Acceptable values are: `'light'` | `'dark'` | `'default'` | `'extraLight'` | `'regular'` | `'prominent'` | `'systemUltraThinMaterial'` | `'systemThinMaterial'` | `'systemMaterial'` | `'systemThickMaterial'` | `'systemChromeMaterial'` | `'systemUltraThinMaterialLight'` | `'systemThinMaterialLight'` | `'systemMaterialLight'` | `'systemThickMaterialLight'` | `'systemChromeMaterialLight'` | `'systemUltraThinMaterialDark'` | `'systemThinMaterialDark'` | `'systemMaterialDark'` | `'systemThickMaterialDark'` | `'systemChromeMaterialDark'`

### `ExperimentalBlurMethod`

Only for: Android

Literal Type: `string`

Blur method to use on Android.

*   `'none'` - Falls back to a semi-transparent view instead of rendering a blur effect.
```
*   `'dimezisBlurView'` - Uses a native blur view implementation based on [BlurView library. This method may lead to decreased performance and rendering issues during transitions made by `react-native-screens`.
```

Acceptable values are: `'none'` | `'dimezisBlurView'`

## Using `borderRadius` with `BlurView`

When using `BlurView` on Android and iOS, the `borderRadius` property is not applied when provided explicitly. To fix this, you can use the `overflow: 'hidden'` style since `BlurView` inherits props from `<View>`. See [Usage for an example.

---

# Expo Brightness

An API to get and set screen brightness.

On Android, there is a global system-wide brightness setting, and each app has its own brightness setting that can optionally override the global setting. It is possible to set either of these values with this API. On iOS, the system brightness setting cannot be changed programmatically; instead, any changes to the screen brightness will persist until the device is locked or powered off.

## Installation

`npx expo install expo-brightness`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using a native android project manually, then you need to add the `android.permission.WRITE_SETTINGS` permission to the AndroidManifest.xml file:

android/app/src/main/AndroidManifest.xml

```
<uses-permission android:name="android.permission.WRITE_SETTINGS" />
```

## Usage

Basic Brightness Usage

```
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Brightness from 'expo-brightness';

export default function App() {
  useEffect(() => {
```
(async () => {
  const { status } = await Brightness.requestPermissionsAsync();
  if (status === 'granted') {
    Brightness.setSystemBrightnessAsync(1);
  }
})();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text>Brightness Module Example</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
backgroundColor: '#fff',
alignItems: 'center',
justifyContent: 'center',
```
  },
});
```

## API

```
import * as Brightness from 'expo-brightness';
```

## Hooks

### `usePermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to modify the system brightness. This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [permissionResponse, requestPermission] = Brightness.usePermissions();
```

## Methods

### `Brightness.getBrightnessAsync()`

Gets the current brightness level of the device's main screen.

Returns:

`[Promise<number>`

A `Promise` that fulfils with a number between `0` and `1`, inclusive, representing the current screen brightness.

### `Brightness.getPermissionsAsync()`

Checks user's permissions for accessing system brightness.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that fulfils with an object of type [PermissionResponse](#permissionrespons).

### `Brightness.getSystemBrightnessAsync()`

Only for: Android

Gets the global system screen brightness.

Returns:

`[Promise<number>`

A `Promise` that is resolved with a number between `0` and `1`, inclusive, representing the current system screen brightness.

### `Brightness.getSystemBrightnessModeAsync()`

Only for: Android

Gets the system brightness mode (e.g. whether or not the OS will automatically adjust the screen brightness depending on ambient light).

Returns:

`[Promise<[BrightnessMode](#brightnessmode)>`

A `Promise` that fulfils with a `BrightnessMode`. Requires `SYSTEM_BRIGHTNESS` permissions.

### `Brightness.isAvailableAsync()`

Returns whether the Brightness API is enabled on the current device. This does not check the app permissions.

Returns:

`[Promise<boolean>`

Async `boolean`, indicating whether the Brightness API is available on the current device. Currently this resolves `true` on iOS and Android only.

### `Brightness.isUsingSystemBrightnessAsync()`

Only for: Android

Returns a boolean specifying whether or not the current activity is using the system-wide brightness value.

Returns:

`[Promise<boolean>`

A `Promise` that fulfils with `true` when the current activity is using the system-wide brightness value, and `false` otherwise.

### `Brightness.requestPermissionsAsync()`

Asks the user to grant permissions for accessing system brightness.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that fulfils with an object of type [PermissionResponse](#permissionrespons).

### `Brightness.restoreSystemBrightnessAsync()`

Only for: Android

Resets the brightness setting of the current activity to use the system-wide brightness value rather than overriding it.

Returns:

`[Promise<void>`

A `Promise` that fulfils when the setting has been successfully changed.

### `Brightness.setBrightnessAsync(brightnessValue)`

| Parameter | Type | Description |
| --- | --- | --- |
| brightnessValue | `number` |
A number between `0` and `1`, inclusive, representing the desired screen brightness.

 |

Sets the current screen brightness. On iOS, this setting will persist until the device is locked, after which the screen brightness will revert to the user's default setting. On Android, this setting only applies to the current activity; it will override the system brightness value whenever your app is in the foreground.

Returns:

`[Promise<void>`

A `Promise` that fulfils when the brightness has been successfully set.

### `Brightness.setSystemBrightnessAsync(brightnessValue)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| brightnessValue | `number` |
A number between `0` and `1`, inclusive, representing the desired screen brightness.

 |

> WARNING: This method is experimental.

Sets the global system screen brightness and changes the brightness mode to `MANUAL`. Requires `SYSTEM_BRIGHTNESS` permissions.

Returns:

`[Promise<void>`

A `Promise` that fulfils when the brightness has been successfully set.

### `Brightness.setSystemBrightnessModeAsync(brightnessMode)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| brightnessMode | `[BrightnessMode](#brightnessmode)` |
One of `BrightnessMode.MANUAL` or `BrightnessMode.AUTOMATIC`. The system brightness mode cannot be set to `BrightnessMode.UNKNOWN`.

 |

Sets the system brightness mode.

Returns:

`[Promise<void>`

> Deprecated Use `restoreSystemBrightnessAsync` method instead.

### `Brightness.useSystemBrightnessAsync()`

Only for: Android

Returns:

`[Promise<void>`

## Event Subscriptions

### `Brightness.addBrightnessListener(listener)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [BrightnessEvent](#brightnessevent)) => void` |
A callback that is invoked when brightness (iOS) changes. The callback is provided a single argument that is an object with a `brightness` key.

 |

Subscribe to brightness (iOS) updates. The event fires whenever the power mode is toggled.

On web and android the event never fires.

Returns:

`[Subscription](#subscription)`

A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `BrightnessEvent`

| Property | Type | Description |
| --- | --- | --- |
| brightness | `number` |
A number between `0` and `1`, inclusive, representing the current screen brightness.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

## Enums

### `BrightnessMode`

#### `UNKNOWN`

`BrightnessMode.UNKNOWN ＝ 0`

Means that the current brightness mode cannot be determined.

#### `AUTOMATIC`

`BrightnessMode.AUTOMATIC ＝ 1`

Mode in which the device OS will automatically adjust the screen brightness depending on the ambient light.

#### `MANUAL`

`BrightnessMode.MANUAL ＝ 2`

Mode in which the screen brightness will remain constant and will not be adjusted by the OS.

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

## Error codes

### `ERR_BRIGHTNESS`

An error occurred when getting or setting the app brightness.

### `ERR_BRIGHTNESS_MODE`

An error occurred when getting or setting the system brightness mode. See the `nativeError` property of the thrown error for more information.

### `ERR_BRIGHTNESS_PERMISSIONS_DENIED`

An attempt to set the system brightness was made without the proper permissions from the user. The user did not grant `SYSTEM_BRIGHTNESS` permissions.

### `ERR_BRIGHTNESS_SYSTEM`

An error occurred when getting or setting the system brightness.

### `ERR_INVALID_ARGUMENT`

An invalid argument was passed. Only `BrightnessMode.MANUAL` or `BrightnessMode.AUTOMATIC` are allowed.

## Permissions

### Android

You must add the following permissions to your app.json inside the [`expo.android.permissions` array.

| Android Permission | Description |
| --- | --- |
|
`WRITE_SETTINGS`

 |

Allows an application to read or write the system settings.

 |

### iOS

_No permissions required_.

---

# Expo BuildProperties

`expo-build-properties` is a [config plugin configuring the native build properties of your android/gradle.properties and ios/Podfile.properties.json directories during [Prebuild.

> This config plugin configures how [Prebuild command generates the native android and ios directories and therefore cannot be used with projects that don't run `npx expo prebuild` (bare projects).

## Installation

`npx expo install expo-build-properties`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-build-properties",
    {
      "android": {
        "compileSdkVersion": 34,
        "targetSdkVersion": 34,
        "buildToolsVersion": "34.0.0"
      },
      "ios": {
        "deploymentTarget": "13.4"
      }
    }

```
  }
}
```

app.config.js

```
export default {
  expo: {
```
plugins:
    'expo-build-properties',
    {
      android: {
        compileSdkVersion: 34,
        targetSdkVersion: 34,
        buildToolsVersion: '34.0.0',
      },
      ios: {
        deploymentTarget: '13.4',
      },
    },
  ],
],
```
  },
};
```

### All configurable properties

[`PluginConfigType` interface represents currently available configuration properties.

## API

## Methods

### `BuildProperties.withBuildProperties(config, props)`

| Parameter | Type | Description |
| --- | --- | --- |
| config | `[ExpoConfig` |
Expo config for application.

 |
| props | `[PluginConfigType](#pluginconfigtype)` |

Configuration for the build properties plugin.

 |

Config plugin allowing customizing native Android and iOS build properties for managed apps.

Returns:

`[ExpoConfig`

## Interfaces

### `AndroidMavenRepository`

| Property | Type | Description |
| --- | --- | --- |
| authentication(optional) | `'basic' | 'digest' | 'header'` |
The authentication scheme to use when accessing the Maven repository.

 |
| credentials(optional) | `[AndroidMavenRepositoryCredentials](#androidmavenrepositorycredentials)` |

The credentials to use when accessing the Maven repository. May be of type PasswordCredentials, HttpHeaderCredentials, or AWSCredentials.

> See: the authentication schemes section of [Gradle documentation for more information.

 |
| url | `string` |

The URL of the Maven repository.

 |

### `ExtraIosPodDependency`

Only for: iOS

Interface representing extra CocoaPods dependency.

> See: [Podfile syntax reference

| Property | Type | Description |
| --- | --- | --- |
| branch(optional) | `string` |
The git branch to fetch. See the [git](#git) property for more information.

 |
| commit(optional) | `string` |

The git commit to fetch. See the [git](#git) property for more information.

 |
| configurations(optional) | `string` |

Build configurations for which the pod should be installed.

Example

`['Debug', 'Release']`

 |
| git(optional) | `string` |

Use the bleeding edge version of a Pod.

Example

`{ "name": "AFNetworking", "git": "https://github.com/gowalla/AFNetworking.git", "tag": "0.7.0" }`

This acts like to add this pod dependency statement:

`pod 'AFNetworking', :git => 'https://github.com/gowalla/AFNetworking.git', :tag => '0.7.0'`

 |
| modular\_headers(optional) | `boolean` |

Whether this pod should use modular headers.

 |
| name | `string` |

Name of the pod.

 |
| path(optional) | `string` |

Custom local filesystem path to add the dependency.

Example

`~/Documents/AFNetworking`

 |
| podspec(optional) | `string` |

Custom podspec path.

Example

`https://example.com/JSONKit.podspec`

 |
| source(optional) | `string` |

Custom source to search for this dependency.

Example

`https://github.com/CocoaPods/Specs.git`

 |
| tag(optional) | `string` |

The git tag to fetch. See the [git](#git) property for more information.

 |
| testspecs(optional) | `string` |

Test specs can be optionally included via the :testspecs option. By default, none of a Pod's test specs are included.

Example

`['UnitTests', 'SomeOtherTests']`

 |
| version(optional) | `string` |

Version of the pod. CocoaPods supports various [versioning options.

Example

`~> 0.1.2`

 |

### `PluginConfigType`

Interface representing base build properties configuration.

| Property | Type | Description |
| --- | --- | --- |
| android(optional) | `[PluginConfigTypeAndroid](#pluginconfigtypeandroid)` |
Only for: Android

Interface representing available configuration for Android native build properties.

 |
| ios(optional) | `[PluginConfigTypeIos](#pluginconfigtypeios)` |

Only for: iOS

Interface representing available configuration for iOS native build properties.

 |

### `PluginConfigTypeAndroid`

Only for: Android

Interface representing available configuration for Android native build properties.

| Property | Type | Description |
| --- | --- | --- |
| buildToolsVersion(optional) | `string` |
Override the default `buildToolsVersion` version number in build.gradle.

 |
| compileSdkVersion(optional) | `number` |

Override the default `compileSdkVersion` version number in build.gradle.

 |
| enablePngCrunchInReleaseBuilds(optional) | `boolean` |

Enable [`crunchPngs` in release builds to optimize PNG files. This property is enabled by default, but "might inflate PNG files that are already compressed", so you may want to disable it if you do your own PNG optimization.

Default:`true`

 |
| enableProguardInReleaseBuilds(optional) | `boolean` |

Enable [Proguard or R8 in release builds to obfuscate Java code and reduce app size.

 |
| enableShrinkResourcesInReleaseBuilds(optional) | `boolean` |

Enable [`shrinkResources` in release builds to remove unused resources from the app. This property should be used in combination with `enableProguardInReleaseBuilds`.

 |
| extraMavenRepos(optional) | `(string | [AndroidMavenRepository](#androidmavenrepository))` |

Add extra maven repositories to all gradle projects.

Takes an array of objects or strings. Strings are passed as the `url` property of the object with no credentials or authentication scheme.

This adds the following code to android/build.gradle:

```
allprojects {
 repositories {
  maven {
   url "https://foo.com/maven-releases"
 }
}
```

By using an `AndroidMavenRepository` object, you can specify credentials and an authentication scheme.

```
allprojects {
  repositories {
```
maven {
  url "https://foo.com/maven-releases"
  credentials {
   username = "bar"
   password = "baz"
  }
  authentication {
   basic(BasicAuthentication)
  }
}
```
  }
}
```

> See: [Gradle documentation

 |
| extraProguardRules(optional) | `string` |

Append custom [Proguard rules to android/app/proguard-rules.pro.

 |
| kotlinVersion(optional) | `string` |

Override the Kotlin version used when building the app.

 |
| manifestQueries(optional) | `[PluginConfigTypeAndroidQueries](#pluginconfigtypeandroidqueries)` |

Specifies the set of other apps that an app intends to interact with. These other apps are specified by package name, by intent signature, or by provider authority.

> See: [Android documentation

 |
| minSdkVersion(optional) | `number` |

Override the default `minSdkVersion` version number in build.gradle.

 |
| networkInspector(optional) | `boolean` |

Enable the Network Inspector.

Default:`true`

 |
| newArchEnabled(optional) | `boolean` |

Enable React Native new architecture for Android platform.

 |
| packagingOptions(optional) | `[PluginConfigTypeAndroidPackagingOptions](#pluginconfigtypeandroidpackagingoptions)` |

Interface representing available configuration for Android Gradle plugin [PackagingOptions.

 |
| targetSdkVersion(optional) | `number` |

Override the default `targetSdkVersion` version number in build.gradle.

 |
| useLegacyPackaging(optional) | `boolean` |

Instructs the Android Gradle plugin to compress native libraries in the APK using the legacy packaging system.

Default:`false`

> See: [Android documentation

 |
| usesCleartextTraffic(optional) | `boolean` |

Indicates whether the app intends to use cleartext network traffic.

Default:`false`

> See: [Android documentation

 |

### `PluginConfigTypeAndroidPackagingOptions`

Only for: Android

Interface representing available configuration for Android Gradle plugin [PackagingOptions.

| Property | Type | Description |
| --- | --- | --- |
| doNotStrip(optional) | `string` |
Array of patterns for native libraries that should not be stripped of debug symbols.

 |
| exclude(optional) | `string` |

Array of patterns for native libraries that should be excluded from being packaged in the APK.

 |
| merge(optional) | `string` |

Array of patterns for native libraries where all occurrences are concatenated and packaged in the APK.

 |
| pickFirst(optional) | `string` |

Array of patterns for native libraries where only the first occurrence is packaged in the APK.

 |

### `PluginConfigTypeAndroidQueries`

| Property | Type | Description |
| --- | --- | --- |
| intent(optional) | `[PluginConfigTypeAndroidQueriesIntent](#pluginconfigtypeandroidqueriesintent)` |
Specifies an intent filter signature. Your app can discover other apps that have matching <intent-filter> elements. These intents have restrictions compared to typical intent filter signatures.

> See: [Android documentation for details

 |
| package(optional) | `string` |

Specifies one or more apps that your app intends to access. These other apps might integrate with your app, or your app might use services that these other apps provide.

 |
| provider(optional) | `string` |

Specifies one or more content provider authorities. Your app can discover other apps whose content providers use the specified authorities. There are some restrictions on the options that you can include in this <provider> element, compared to a typical <provider> manifest element. You may only specify the android:authorities attribute.

 |

### `PluginConfigTypeAndroidQueriesData`

| Property | Type | Description |
| --- | --- | --- |
| host(optional) | `string` |
Specify a URI authority host that is handled

 |
| mimeType(optional) | `string` |

Specify a MIME type that is handled

 |
| scheme(optional) | `string` |

Specify a URI scheme that is handled

 |

### `PluginConfigTypeAndroidQueriesIntent`

| Property | Type | Description |
| --- | --- | --- |
| action(optional) | `string` |
A string naming the action to perform. Usually one of the platform-defined values, such as ACTION\_SEND or ACTION\_VIEW

 |
| category(optional) | `string | string` |

Provides an additional way to characterize the activity handling the intent, usually related to the user gesture or location from which it's started.

 |
| data(optional) | `[PluginConfigTypeAndroidQueriesData](#pluginconfigtypeandroidqueriesdata)` |

A description of the data associated with the intent.

 |

### `PluginConfigTypeIos`

Only for: iOS

Interface representing available configuration for iOS native build properties.

| Property | Type | Description |
| --- | --- | --- |
| ccacheEnabled(optional) | `boolean` |
Enable C++ compiler cache for iOS builds.

This speeds up compiling C++ code by caching the results of previous compilations.

> See: - [https://reactnative.dev/docs/build-speed#local-caches
>
> *   [https://ccache.dev/

 |
| deploymentTarget(optional) | `string` |

Override the default iOS "Deployment Target" version in the following projects:

*   in CocoaPods projects,
*   `PBXNativeTarget` with "com.apple.product-type.application" `productType` in the app project.

 |
| extraPods(optional) | `[ExtraIosPodDependency](#extraiospoddependency)` |

Add extra CocoaPods dependencies for all targets.

This acts like to add the following code to ios/Podfile:

`pod '[EXTRA_POD_NAME]', '~> [EXTRA_POD_VERSION]' # e.g. pod 'Protobuf', '~> 3.14.0'`

 |
| networkInspector(optional) | `boolean` |

Enable the Network Inspector.

Default:`true`

 |
| newArchEnabled(optional) | `boolean` |

Enable React Native new architecture for iOS platform.

 |
| privacyManifestAggregationEnabled(optional) | `boolean` |

Enable aggregation of Privacy Manifests (`PrivacyInfo.xcprivacy`) from CocoaPods resource bundles. If enabled, the manifests will be merged into a single file. If not enabled, developers will need to manually aggregate them.

> See: - [https://docs.expo.dev/guides/apple-privacy/
>
> *   [https://developer.apple.com/documentation/bundleresources/privacy\_manifest\_files

 |
| useFrameworks(optional) | `'static' | 'dynamic'` |

Enable [`use_frameworks!` in `Podfile` to use frameworks instead of static libraries for Pods.

 |

---

# Expo Calendar




A library that provides an API for interacting with the device's system calendars, events, reminders, and associated records.



3.0.5

`expo-calendar` provides an API for interacting with the device's system calendars, events, reminders, and associated records.

## Installation

`npx expo install expo-calendar`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-calendar` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-calendar",
    {
      "calendarPermission": "The app needs to access your calendar."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `calendarPermission` | `"Allow $(PRODUCT_NAME) to access your calendar"` |
Only for: iOS

A string to set the `NSCalendarsUsageDescription` permission message.

 |
| `remindersPermission` | `"Allow $(PRODUCT_NAME) to access your reminders"` |

Only for: iOS

A string to set the `NSRemindersUsageDescription` permission message.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) (you're using native android and ios projects manually), then you need to configure following permissions in your native projects:

*   For Android, add `android.permission.READ_CALENDAR` and `android.permission.WRITE_CALENDAR` permissions to your project's android/app/src/main/AndroidManifest.xml:
```
<uses-permission android:name="android.permission.READ_CALENDAR" />
<uses-permission android:name="android.permission.WRITE_CALENDAR" />
```
*   For iOS, add `NSCalendarsUsageDescription` and `NSRemindersUsageDescription` to your project's ios/\[app\]/Info.plist:
```
<key>NSCalendarsUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your calendar</string>
<key>NSRemindersUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your reminders</string>
```
## Usage

Basic Calendar usage
```
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
```
(async () => {
  const { status } = await Calendar.requestCalendarPermissionsAsync();
  if (status === 'granted') {
    const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
    console.log('Here are all your calendars:');
    console.log({ calendars });
  }
})();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text>Calendar Module Example</Text>
  <Button title="Create a new calendar" onPress={createCalendar} />
</View>
```
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
```
Platform.OS === 'ios'
  ? await getDefaultCalendarSource()
  : { isLocalAccount: true, name: 'Expo Calendar' };
```
  const newCalendarID = await Calendar.createCalendarAsync({
```
title: 'Expo Calendar',
color: 'blue',
entityType: Calendar.EntityTypes.EVENT,
sourceId: defaultCalendarSource.id,
source: defaultCalendarSource,
name: 'internalCalendarName',
ownerAccount: 'personal',
accessLevel: Calendar.CalendarAccessLevel.OWNER,
```
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
backgroundColor: '#fff',
alignItems: 'center',
justifyContent: 'space-around',
```
  },
});
```
## API
```
import * as Calendar from 'expo-calendar';
```
## Hooks

### `useCalendarPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to access the calendar. This uses both `getCalendarPermissionsAsync` and `requestCalendarPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example
```
const [status, requestPermission] = Calendar.useCalendarPermissions();
```
### `useRemindersPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to access reminders. This uses both `getRemindersPermissionsAsync` and `requestRemindersPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example
```
const [status, requestPermission] = Calendar.useRemindersPermissions();
```

## Methods

### `Calendar.createAttendeeAsync(eventId, details)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| eventId | `string` |
ID of the event to add this attendee to.

 |
| details(optional) | `[Partial<[Attendee](#attendee)>` |

A map of details for the attendee to be created.

Default:`{}`

 |

Creates a new attendee record and adds it to the specified event. Note that if `eventId` specifies a recurring event, this will add the attendee to every instance of the event.

Returns:

`[Promise<string>`

A string representing the ID of the newly created attendee record.

### `Calendar.createCalendarAsync(details)`

| Parameter | Type | Description |
| --- | --- | --- |
| details(optional) | `[Partial<[Calendar](#calendar)>` |
A map of details for the calendar to be created.

Default:`{}`

 |

Creates a new calendar on the device, allowing events to be added later and displayed in the OS Calendar app.

Returns:

`[Promise<string>`

A string representing the ID of the newly created calendar.

### `Calendar.createEventAsync(calendarId, eventData)`

| Parameter | Type | Description |
| --- | --- | --- |
| calendarId | `string` |
ID of the calendar to create this event in.

 |
| eventData(optional) | `[Omit<[Partial<[Event](#event)>, 'id'>` |

A map of details for the event to be created.

Default:`{}`

 |

Creates a new event on the specified calendar.

Returns:

`[Promise<string>`

A promise which fulfils with a string representing the ID of the newly created event.

### `Calendar.createReminderAsync(calendarId, reminder)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| calendarId | `null | string` |
ID of the calendar to create this reminder in (or `null` to add the calendar to the OS-specified default calendar for reminders).

 |
| reminder(optional) | `[Reminder](#reminder)` |

A map of details for the reminder to be created

Default:`{}`

 |

Creates a new reminder on the specified calendar.

Returns:

`[Promise<string>`

A promise which fulfils with a string representing the ID of the newly created reminder.

### `Calendar.deleteAttendeeAsync(id)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the attendee to delete.

 |

Deletes an existing attendee record from the device. Use with caution.

Returns:

`[Promise<void>`

### `Calendar.deleteCalendarAsync(id)`

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the calendar to delete.

 |

Deletes an existing calendar and all associated events/reminders/attendees from the device. Use with caution.

Returns:

`[Promise<void>`

### `Calendar.deleteEventAsync(id, recurringEventOptions)`

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the event to be deleted.

 |
| recurringEventOptions(optional) | `[RecurringEventOptions](#recurringeventoptions)` |

A map of options for recurring events.

Default:`{}`

 |

Deletes an existing event from the device. Use with caution.

Returns:

`[Promise<void>`

### `Calendar.deleteReminderAsync(id)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the reminder to be deleted.

 |

Deletes an existing reminder from the device. Use with caution.

Returns:

`[Promise<void>`

### `Calendar.getAttendeesForEventAsync(id, recurringEventOptions)`

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the event to return attendees for.

 |
| recurringEventOptions(optional) | `[RecurringEventOptions](#recurringeventoptions)` |

A map of options for recurring events.

Default:`{}`

 |

Gets all attendees for a given event (or instance of a recurring event).

Returns:

`[Promise<[Attendee](#attendee)>`

A promise which fulfils with an array of `Attendee` associated with the specified event.

### `Calendar.getCalendarPermissionsAsync()`

Checks user's permissions for accessing user's calendars.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type `PermissionResponse`.

### `Calendar.getCalendarsAsync(entityType)`

| Parameter | Type | Description |
| --- | --- | --- |
| entityType(optional) | `string` |
iOS Only. Not required, but if defined, filters the returned calendars to a specific entity type. Possible values are `Calendar.EntityTypes.EVENT` (for calendars shown in the Calendar app) and `Calendar.EntityTypes.REMINDER` (for the Reminders app).

> Note: If not defined, you will need both permissions: CALENDAR and REMINDERS.

 |

Gets an array of calendar objects with details about the different calendars stored on the device.

Returns:

`[Promise<[Calendar](#calendar)>`

An array of [calendar objects](#calendar) matching the provided entity type (if provided).

### `Calendar.getDefaultCalendarAsync()`

Only for: iOS

Gets an instance of the default calendar object.

Returns:

`[Promise<[Calendar](#calendar)>`

A promise resolving to the [Calendar](#calendar) object that is the user's default calendar.

### `Calendar.getEventAsync(id, recurringEventOptions)`

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the event to return.

 |
| recurringEventOptions(optional) | `[RecurringEventOptions](#recurringeventoptions)` |

A map of options for recurring events.

Default:`{}`

 |

Returns a specific event selected by ID. If a specific instance of a recurring event is desired, the start date of this instance must also be provided, as instances of recurring events do not have their own unique and stable IDs on either iOS or Android.

Returns:

`[Promise<[Event](#event)>`

A promise which fulfils with an `Event` object matching the provided criteria, if one exists.

### `Calendar.getEventsAsync(calendarIds, startDate, endDate)`

| Parameter | Type | Description |
| --- | --- | --- |
| calendarIds | `string` |
Array of IDs of calendars to search for events in.

 |
| startDate | `[Date` |

Beginning of time period to search for events in.

 |
| endDate | `[Date` |

End of time period to search for events in.

 |

Returns all events in a given set of calendars over a specified time period. The filtering has slightly different behavior per-platform - on iOS, all events that overlap at all with the `[startDate, endDate]` interval are returned, whereas on Android, only events that begin on or after the `startDate` and end on or before the `endDate` will be returned.

Returns:

`[Promise<[Event](#event)>`

A promise which fulfils with an array of `Event` objects matching the search criteria.

### `Calendar.getReminderAsync(id)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the reminder to return.

 |

Returns a specific reminder selected by ID.

Returns:

`[Promise<[Reminder](#reminder)>`

A promise which fulfils with a `Reminder` matching the provided ID, if one exists.

### `Calendar.getRemindersAsync(calendarIds, status, startDate, endDate)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| calendarIds | `(null | string)` |
Array of IDs of calendars to search for reminders in.

 |
| status | `null | [ReminderStatus](#reminderstatus)` |

One of `Calendar.ReminderStatus.COMPLETED` or `Calendar.ReminderStatus.INCOMPLETE`.

 |
| startDate | `[Date` |

Beginning of time period to search for reminders in. Required if `status` is defined.

 |
| endDate | `[Date` |

End of time period to search for reminders in. Required if `status` is defined.

 |

Returns a list of reminders matching the provided criteria. If `startDate` and `endDate` are defined, returns all reminders that overlap at all with the \[startDate, endDate\] interval - i.e. all reminders that end after the `startDate` or begin before the `endDate`.

Returns:

`[Promise<[Reminder](#reminder)>`

A promise which fulfils with an array of `Reminder` objects matching the search criteria.

### `Calendar.getRemindersPermissionsAsync()`

Only for: iOS

Checks user's permissions for accessing user's reminders.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type `PermissionResponse`.

### `Calendar.getSourceAsync(id)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the source to return.

 |

Returns a specific source selected by ID.

Returns:

`[Promise<[Source](#source)>`

A promise which fulfils with an array of `Source` object matching the provided ID, if one exists.

### `Calendar.getSourcesAsync()`

Only for: iOS

Returns:

`[Promise<[Source](#source)>`

A promise which fulfils with an array of `Source` objects all sources for calendars stored on the device.

### `Calendar.isAvailableAsync()`

Returns whether the Calendar API is enabled on the current device. This does not check the app permissions.

Returns:

`[Promise<boolean>`

Async `boolean`, indicating whether the Calendar API is available on the current device. Currently, this resolves `true` on iOS and Android only.

### `Calendar.openEventInCalendar(id)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the event to open.

 |

Sends an intent to open the specified event in the OS Calendar app.

Returns:

`void`

### `Calendar.requestCalendarPermissionsAsync()`

Asks the user to grant permissions for accessing user's calendars.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type `PermissionResponse`.

> Deprecated Use `requestCalendarPermissionsAsync()` instead.

### `Calendar.requestPermissionsAsync()`

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `Calendar.requestRemindersPermissionsAsync()`

Only for: iOS

Asks the user to grant permissions for accessing user's reminders.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type `PermissionResponse`.

### `Calendar.updateAttendeeAsync(id, details)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the attendee record to be updated.

 |
| details(optional) | `[Partial<[Attendee](#attendee)>` |

A map of properties to be updated.

Default:`{}`

 |

Updates an existing attendee record. To remove a property, explicitly set it to `null` in `details`.

Returns:

`[Promise<string>`

### `Calendar.updateCalendarAsync(id, details)`

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the calendar to update.

 |
| details(optional) | `[Partial<[Calendar](#calendar)>` |

A map of properties to be updated.

Default:`{}`

 |

Updates the provided details of an existing calendar stored on the device. To remove a property, explicitly set it to `null` in `details`.

Returns:

`[Promise<string>`

### `Calendar.updateEventAsync(id, details, recurringEventOptions)`

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the event to be updated.

 |
| details(optional) | `[Omit<[Partial<[Event](#event)>, 'id'>` |

A map of properties to be updated.

Default:`{}`

 |
| recurringEventOptions(optional) | `[RecurringEventOptions](#recurringeventoptions)` |

A map of options for recurring events.

Default:`{}`

 |

Updates the provided details of an existing calendar stored on the device. To remove a property, explicitly set it to `null` in `details`.

Returns:

`[Promise<string>`

### `Calendar.updateReminderAsync(id, details)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
ID of the reminder to be updated.

 |
| details(optional) | `[Reminder](#reminder)` |

A map of properties to be updated.

Default:`{}`

 |

Updates the provided details of an existing reminder stored on the device. To remove a property, explicitly set it to `null` in `details`.

Returns:

`[Promise<string>`

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `Alarm`

A method for having the OS automatically remind the user about an calendar item.

| Property | Type | Description |
| --- | --- | --- |
| absoluteDate(optional) | `string` |
Only for: iOS

Date object or string representing an absolute time the alarm should occur. Overrides `relativeOffset` and `structuredLocation` if specified alongside either.

 |
| method(optional) | `[AlarmMethod](#alarmmethod)` |

Only for: Android

Method of alerting the user that this alarm should use; on iOS this is always a notification. Possible values: `AlarmMethod`.

 |
| relativeOffset(optional) | `number` |

Number of minutes from the `startDate` of the calendar item that the alarm should occur. Use negative values to have the alarm occur before the `startDate`.

 |
| structuredLocation(optional) | `[AlarmLocation](#alarmlocation)` |

\-

 |

### `AlarmLocation`

| Property | Type | Description |
| --- | --- | --- |
| coords(optional) | `{ latitude: number, longitude: number }` |
\-

 |
| proximity(optional) | `string` |

\-

 |
| radius(optional) | `number` |

\-

 |
| title(optional) | `string` |

Only for: iOS

\-

 |

### `Attendee`

A person or entity that is associated with an event by being invited or fulfilling some other role.

| Property | Type | Description |
| --- | --- | --- |
| email(optional) | `string` |
Only for: Android

Email address of the attendee.

 |
| id(optional) | `string` |

Only for: Android

Internal ID that represents this attendee on the device.

 |
| isCurrentUser(optional) | `boolean` |

Only for: iOS

Indicates whether or not this attendee is the current OS user.

 |
| name | `string` |

Displayed name of the attendee.

 |
| role | `[AttendeeRole](#attendeerole)` |

Role of the attendee at the event. Possible values: `AttendeeRole`.

 |
| status | `[AttendeeStatus](#attendeestatus)` |

Status of the attendee in relation to the event. Possible values: `AttendeeStatus`.

 |
| type | `[AttendeeType](#attendeetype)` |

Type of the attendee. Possible values: `AttendeeType`.

 |
| url(optional) | `string` |

Only for: iOS

URL for the attendee.

 |

### `Calendar`

A calendar record upon which events (or, on iOS, reminders) can be stored. Settings here apply to the calendar as a whole and how its events are displayed in the OS calendar app.

| Property | Type | Description |
| --- | --- | --- |
| accessLevel(optional) | `[CalendarAccessLevel](#calendaraccesslevel)` |
Only for: Android

Level of access that the user has for the calendar. Possible values: `CalendarAccessLevel`.

 |
| allowedAttendeeTypes(optional) | `[AttendeeType](#attendeetype)` |

Only for: Android

Attendee types that this calendar supports. Possible values: Array of `AttendeeType`.

 |
| allowedAvailabilities | `[Availability](#availability)` |

Availability types that this calendar supports. Possible values: Array of `Availability`.

 |
| allowedReminders(optional) | `[AlarmMethod](#alarmmethod)` |

Only for: Android

Alarm methods that this calendar supports. Possible values: Array of `AlarmMethod`.

 |
| allowsModifications | `boolean` |

Boolean value that determines whether this calendar can be modified.

 |
| color | `string` |

Color used to display this calendar's events.

 |
| entityType(optional) | `[EntityTypes](#entitytypes)` |

Only for: iOS

Whether the calendar is used in the Calendar or Reminders OS app. Possible values: `EntityTypes`.

 |
| id | `string` |

Internal ID that represents this calendar on the device.

 |
| isPrimary(optional) | `boolean` |

Only for: Android

Boolean value indicating whether this is the device's primary calendar.

 |
| isSynced(optional) | `boolean` |

Only for: Android

Indicates whether this calendar is synced and its events stored on the device. Unexpected behavior may occur if this is not set to `true`.

 |
| isVisible(optional) | `boolean` |

Only for: Android

Indicates whether the OS displays events on this calendar.

 |
| name(optional) | `string | null` |

Only for: Android

Internal system name of the calendar.

 |
| ownerAccount(optional) | `string` |

Only for: Android

Name for the account that owns this calendar.

 |
| source | `[Source](#source)` |

Object representing the source to be used for the calendar.

 |
| sourceId(optional) | `string` |

Only for: iOS

ID of the source to be used for the calendar. Likely the same as the source for any other locally stored calendars.

 |
| timeZone(optional) | `string` |

Only for: Android

Time zone for the calendar.

 |
| title | `string` |

Visible name of the calendar.

 |
| type(optional) | `[CalendarType](#calendartype)` |

Only for: iOS

Type of calendar this object represents. Possible values: `CalendarType`.

 |

### `DaysOfTheWeek`

Only for: iOS

| Property | Type | Description |
| --- | --- | --- |
| dayOfTheWeek | `[DayOfTheWeek](#dayoftheweek)` |
Sunday to Saturday - `DayOfTheWeek` enum.

 |
| weekNumber(optional) | `number` |

`-53` to `53` (`0` ignores this field, and a negative indicates a value from the end of the range).

 |

### `Event`

An event record, or a single instance of a recurring event. On iOS, used in the Calendar app.

| Property | Type | Description |
| --- | --- | --- |
| accessLevel(optional) | `[EventAccessLevel](#eventaccesslevel)` |
Only for: Android

User's access level for the event. Possible values: `EventAccessLevel`.

 |
| alarms | `[Alarm](#alarm)` |

Array of Alarm objects which control automated reminders to the user.

 |
| allDay | `boolean` |

Whether the event is displayed as an all-day event on the calendar

 |
| availability | `[Availability](#availability)` |

The availability setting for the event. Possible values: `Availability`.

 |
| calendarId | `string` |

ID of the calendar that contains this event.

 |
| creationDate(optional) | `string | [Date` |

Only for: iOS

Date when the event record was created.

 |
| endDate | `string | [Date` |

Date object or string representing the time when the event ends.

 |
| endTimeZone(optional) | `string` |

Only for: Android

Time zone for the event end time.

 |
| guestsCanInviteOthers(optional) | `boolean` |

Only for: Android

Whether invited guests can invite other guests.

 |
| guestsCanModify(optional) | `boolean` |

Only for: Android

Whether invited guests can modify the details of the event.

 |
| guestsCanSeeGuests(optional) | `boolean` |

Only for: Android

Whether invited guests can see other guests.

 |
| id | `string` |

Internal ID that represents this event on the device.

 |
| instanceId(optional) | `string` |

Only for: Android

For instances of recurring events, volatile ID representing this instance. Not guaranteed to always refer to the same instance.

 |
| isDetached(optional) | `boolean` |

Only for: iOS

Boolean value indicating whether or not the event is a detached (modified) instance of a recurring event.

 |
| lastModifiedDate(optional) | `string | [Date` |

Only for: iOS

Date when the event record was last modified.

 |
| location | `string` |

Location field of the event.

 |
| notes | `string` |

Description or notes saved with the event.

 |
| organizer(optional) | `string` |

Only for: iOS

Organizer of the event.

 |
| organizerEmail(optional) | `string` |

Only for: Android

Email address of the organizer of the event.

 |
| originalId(optional) | `string` |

Only for: Android

For detached (modified) instances of recurring events, the ID of the original recurring event.

 |
| originalStartDate(optional) | `string | [Date` |

Only for: iOS

For recurring events, the start date for the first (original) instance of the event.

 |
| recurrenceRule | `[RecurrenceRule](#recurrencerule)` |

Object representing rules for recurring or repeating events. Set to `null` for one-time events.

 |
| startDate | `string | [Date` |

Date object or string representing the time when the event starts.

 |
| status | `[EventStatus](#eventstatus)` |

Status of the event. Possible values: `EventStatus`.

 |
| timeZone | `string` |

Time zone the event is scheduled in.

 |
| title | `string` |

Visible name of the event.

 |
| url(optional) | `string` |

Only for: iOS

URL for the event.

 |

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `RecurrenceRule`

A recurrence rule for events or reminders, allowing the same calendar item to recur multiple times. This type is based on [the iOS interface which is in turn based on [the iCal RFC so you can refer to those to learn more about this potentially complex interface.

Not all of the combinations make sense. For example, when frequency is `DAILY`, setting `daysOfTheMonth` makes no sense.

| Property | Type | Description |
| --- | --- | --- |
| daysOfTheMonth(optional) | `number` |
Only for: iOS

The days of the month this event occurs on. `-31` to `31` (not including `0`). Negative indicates a value from the end of the range. This field is only valid for `Calendar.Frequency.Monthly`.

 |
| daysOfTheWeek(optional) | `[DaysOfTheWeek](#daysoftheweek)` |

Only for: iOS

The days of the week the event should recur on. An array of `DaysOfTheWeek` object.

 |
| daysOfTheYear(optional) | `number` |

Only for: iOS

The days of the year this event occurs on. `-366` to `366` (not including `0`). Negative indicates a value from the end of the range. This field is only valid for `Calendar.Frequency.Yearly`.

 |
| endDate(optional) | `string | [Date` |

Date on which the calendar item should stop recurring; overrides `occurrence` if both are specified.

 |
| frequency | `[Frequency](#frequency)` |

How often the calendar item should recur. Possible values: `Frequency`.

 |
| interval(optional) | `number` |

Interval at which the calendar item should recur. For example, an `interval: 2` with `frequency: DAILY` would yield an event that recurs every other day.

Default:`1`

 |
| monthsOfTheYear(optional) | `[MonthOfTheYear](#monthoftheyear)` |

Only for: iOS

The months this event occurs on. This field is only valid for `Calendar.Frequency.Yearly`.

 |
| occurrence(optional) | `number` |

Number of times the calendar item should recur before stopping.

 |
| setPositions(optional) | `number` |

Only for: iOS

TAn array of numbers that filters which recurrences to include. For example, for an event that recurs every Monday, passing 2 here will make it recur every other Monday. `-366` to `366` (not including `0`). Negative indicates a value from the end of the range. This field is only valid for `Calendar.Frequency.Yearly`.

 |
| weeksOfTheYear(optional) | `number` |

Only for: iOS

The weeks of the year this event occurs on. `-53` to `53` (not including `0`). Negative indicates a value from the end of the range. This field is only valid for `Calendar.Frequency.Yearly`.

 |

### `RecurringEventOptions`

Only for: iOS

| Property | Type | Description |
| --- | --- | --- |
| futureEvents(optional) | `boolean` |
Whether or not future events in the recurring series should also be updated. If `true`, will apply the given changes to the recurring instance specified by `instanceStartDate` and all future events in the series. If `false`, will only apply the given changes to the instance specified by `instanceStartDate`.

 |
| instanceStartDate(optional) | `string | [Date` |

Date object representing the start time of the desired instance, if looking for a single instance of a recurring event. If this is not provided and id represents a recurring event, the first instance of that event will be returned by default.

 |

### `Reminder`

Only for: iOS

A reminder record, used in the iOS Reminders app. No direct analog on Android.

| Property | Type | Description |
| --- | --- | --- |
| alarms(optional) | `[Alarm](#alarm)` |
Array of Alarm objects which control automated alarms to the user about the task.

 |
| calendarId(optional) | `string` |

ID of the calendar that contains this reminder.

 |
| completed(optional) | `boolean` |

Indicates whether or not the task has been completed.

 |
| completionDate(optional) | `string | [Date` |

Date object or string representing the date of completion, if `completed` is `true`. Setting this property of a nonnull `Date` will automatically set the reminder's `completed` value to `true`.

 |
| creationDate(optional) | `string | [Date` |

Date when the reminder record was created.

 |
| dueDate(optional) | `string | [Date` |

Date object or string representing the time when the reminder task is due.

 |
| id(optional) | `string` |

Internal ID that represents this reminder on the device.

 |
| lastModifiedDate(optional) | `string | [Date` |

Date when the reminder record was last modified.

 |
| location(optional) | `string` |

Location field of the reminder

 |
| notes(optional) | `string` |

Description or notes saved with the reminder.

 |
| recurrenceRule(optional) | `[RecurrenceRule](#recurrencerule)` |

Object representing rules for recurring or repeated reminders. Null for one-time tasks.

 |
| startDate(optional) | `string | [Date` |

Date object or string representing the start date of the reminder task.

 |
| timeZone(optional) | `string` |

Time zone the reminder is scheduled in.

 |
| title(optional) | `string` |

Visible name of the reminder.

 |
| url(optional) | `string` |

URL for the reminder.

 |

### `Source`

A source account that owns a particular calendar. Expo apps will typically not need to interact with `Source` objects.

| Property | Type | Description |
| --- | --- | --- |
| id(optional) | `string` |
Only for: iOS

Internal ID that represents this source on the device.

 |
| isLocalAccount(optional) | `boolean` |

Only for: Android

Whether this source is the local phone account. Must be `true` if `type` is `undefined`.

 |
| name | `string` |

Name for the account that owns this calendar and was used to sync the calendar to the device.

 |
| type | `string | [SourceType](#sourcetype)` |

Type of the account that owns this calendar and was used to sync it to the device. If `isLocalAccount` is falsy then this must be defined, and must match an account on the device along with `name`, or the OS will delete the calendar. On iOS, one of `SourceType`s.

 |

## Enums

### `AlarmMethod`

#### `ALARM`

`AlarmMethod.ALARM ＝ "alarm"`

#### `ALERT`

`AlarmMethod.ALERT ＝ "alert"`

#### `DEFAULT`

`AlarmMethod.DEFAULT ＝ "default"`

#### `EMAIL`

`AlarmMethod.EMAIL ＝ "email"`

#### `SMS`

`AlarmMethod.SMS ＝ "sms"`

### `AttendeeRole`

#### `ATTENDEE`

`AttendeeRole.ATTENDEE ＝ "attendee"`

#### `CHAIR`

`AttendeeRole.CHAIR ＝ "chair"`

#### `NONE`

`AttendeeRole.NONE ＝ "none"`

#### `NON_PARTICIPANT`

`AttendeeRole.NON_PARTICIPANT ＝ "nonParticipant"`

#### `OPTIONAL`

`AttendeeRole.OPTIONAL ＝ "optional"`

#### `ORGANIZER`

`AttendeeRole.ORGANIZER ＝ "organizer"`

#### `PERFORMER`

`AttendeeRole.PERFORMER ＝ "performer"`

#### `REQUIRED`

`AttendeeRole.REQUIRED ＝ "required"`

#### `SPEAKER`

`AttendeeRole.SPEAKER ＝ "speaker"`

#### `UNKNOWN`

`AttendeeRole.UNKNOWN ＝ "unknown"`

### `AttendeeStatus`

#### `ACCEPTED`

`AttendeeStatus.ACCEPTED ＝ "accepted"`

#### `COMPLETED`

`AttendeeStatus.COMPLETED ＝ "completed"`

#### `DECLINED`

`AttendeeStatus.DECLINED ＝ "declined"`

#### `DELEGATED`

`AttendeeStatus.DELEGATED ＝ "delegated"`

#### `IN_PROCESS`

`AttendeeStatus.IN_PROCESS ＝ "inProcess"`

#### `INVITED`

`AttendeeStatus.INVITED ＝ "invited"`

#### `NONE`

`AttendeeStatus.NONE ＝ "none"`

#### `PENDING`

`AttendeeStatus.PENDING ＝ "pending"`

#### `TENTATIVE`

`AttendeeStatus.TENTATIVE ＝ "tentative"`

#### `UNKNOWN`

`AttendeeStatus.UNKNOWN ＝ "unknown"`

### `AttendeeType`

#### `GROUP`

`AttendeeType.GROUP ＝ "group"`

#### `NONE`

`AttendeeType.NONE ＝ "none"`

#### `OPTIONAL`

`AttendeeType.OPTIONAL ＝ "optional"`

#### `PERSON`

`AttendeeType.PERSON ＝ "person"`

#### `REQUIRED`

`AttendeeType.REQUIRED ＝ "required"`

#### `RESOURCE`

`AttendeeType.RESOURCE ＝ "resource"`

#### `ROOM`

`AttendeeType.ROOM ＝ "room"`

#### `UNKNOWN`

`AttendeeType.UNKNOWN ＝ "unknown"`

### `Availability`

#### `BUSY`

`Availability.BUSY ＝ "busy"`

#### `FREE`

`Availability.FREE ＝ "free"`

#### `NOT_SUPPORTED`

`Availability.NOT_SUPPORTED ＝ "notSupported"`

#### `TENTATIVE`

`Availability.TENTATIVE ＝ "tentative"`

#### `UNAVAILABLE`

`Availability.UNAVAILABLE ＝ "unavailable"`

### `CalendarAccessLevel`

#### `CONTRIBUTOR`

`CalendarAccessLevel.CONTRIBUTOR ＝ "contributor"`

#### `EDITOR`

`CalendarAccessLevel.EDITOR ＝ "editor"`

#### `FREEBUSY`

`CalendarAccessLevel.FREEBUSY ＝ "freebusy"`

#### `NONE`

`CalendarAccessLevel.NONE ＝ "none"`

#### `OVERRIDE`

`CalendarAccessLevel.OVERRIDE ＝ "override"`

#### `OWNER`

`CalendarAccessLevel.OWNER ＝ "owner"`

#### `READ`

`CalendarAccessLevel.READ ＝ "read"`

#### `RESPOND`

`CalendarAccessLevel.RESPOND ＝ "respond"`

#### `ROOT`

`CalendarAccessLevel.ROOT ＝ "root"`

### `CalendarType`

#### `BIRTHDAYS`

`CalendarType.BIRTHDAYS ＝ "birthdays"`

#### `CALDAV`

`CalendarType.CALDAV ＝ "caldav"`

#### `EXCHANGE`

`CalendarType.EXCHANGE ＝ "exchange"`

#### `LOCAL`

`CalendarType.LOCAL ＝ "local"`

#### `SUBSCRIBED`

`CalendarType.SUBSCRIBED ＝ "subscribed"`

#### `UNKNOWN`

`CalendarType.UNKNOWN ＝ "unknown"`

### `DayOfTheWeek`

#### `Sunday`

`DayOfTheWeek.Sunday ＝ 1`

#### `Monday`

`DayOfTheWeek.Monday ＝ 2`

#### `Tuesday`

`DayOfTheWeek.Tuesday ＝ 3`

#### `Wednesday`

`DayOfTheWeek.Wednesday ＝ 4`

#### `Thursday`

`DayOfTheWeek.Thursday ＝ 5`

#### `Friday`

`DayOfTheWeek.Friday ＝ 6`

#### `Saturday`

`DayOfTheWeek.Saturday ＝ 7`

### `EntityTypes`

#### `EVENT`

`EntityTypes.EVENT ＝ "event"`

#### `REMINDER`

`EntityTypes.REMINDER ＝ "reminder"`

### `EventAccessLevel`

#### `CONFIDENTIAL`

`EventAccessLevel.CONFIDENTIAL ＝ "confidential"`

#### `DEFAULT`

`EventAccessLevel.DEFAULT ＝ "default"`

#### `PRIVATE`

`EventAccessLevel.PRIVATE ＝ "private"`

#### `PUBLIC`

`EventAccessLevel.PUBLIC ＝ "public"`

### `EventStatus`

#### `CANCELED`

`EventStatus.CANCELED ＝ "canceled"`

#### `CONFIRMED`

`EventStatus.CONFIRMED ＝ "confirmed"`

#### `NONE`

`EventStatus.NONE ＝ "none"`

#### `TENTATIVE`

`EventStatus.TENTATIVE ＝ "tentative"`

### `Frequency`

#### `DAILY`

`Frequency.DAILY ＝ "daily"`

#### `MONTHLY`

`Frequency.MONTHLY ＝ "monthly"`

#### `WEEKLY`

`Frequency.WEEKLY ＝ "weekly"`

#### `YEARLY`

`Frequency.YEARLY ＝ "yearly"`

### `MonthOfTheYear`

#### `January`

`MonthOfTheYear.January ＝ 1`

#### `February`

`MonthOfTheYear.February ＝ 2`

#### `March`

`MonthOfTheYear.March ＝ 3`

#### `April`

`MonthOfTheYear.April ＝ 4`

#### `May`

`MonthOfTheYear.May ＝ 5`

#### `June`

`MonthOfTheYear.June ＝ 6`

#### `July`

`MonthOfTheYear.July ＝ 7`

#### `August`

`MonthOfTheYear.August ＝ 8`

#### `September`

`MonthOfTheYear.September ＝ 9`

#### `October`

`MonthOfTheYear.October ＝ 10`

#### `November`

`MonthOfTheYear.November ＝ 11`

#### `December`

`MonthOfTheYear.December ＝ 12`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

### `ReminderStatus`

#### `COMPLETED`

`ReminderStatus.COMPLETED ＝ "completed"`

#### `INCOMPLETE`

`ReminderStatus.INCOMPLETE ＝ "incomplete"`

### `SourceType`

#### `BIRTHDAYS`

`SourceType.BIRTHDAYS ＝ "birthdays"`

#### `CALDAV`

`SourceType.CALDAV ＝ "caldav"`

#### `EXCHANGE`

`SourceType.EXCHANGE ＝ "exchange"`

#### `LOCAL`

`SourceType.LOCAL ＝ "local"`

#### `MOBILEME`

`SourceType.MOBILEME ＝ "mobileme"`

#### `SUBSCRIBED`

`SourceType.SUBSCRIBED ＝ "subscribed"`

## Permissions

### Android

You must add the following permissions to your app.json inside the [`expo.android.permissions` array.

| Android Permission | Description |
| --- | --- |
|
`READ_CALENDAR`

 |

Allows an application to read the user's calendar data.

 |
|

`WRITE_CALENDAR`

 |

Allows an application to write the user's calendar data.

 |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSCalendarsUsageDescription`

 | A message that tells the user why the app is requesting access to the user’s calendar data. |
|

`NSRemindersUsageDescription`

 | A message that tells the user why the app is requesting access to the user’s reminders. |

---

# Expo Camera (legacy)

> This is the legacy version of the `expo-camera` package which will no longer be receiving updates. If you are starting a new project, we recommend using [the latest version of `expo-camera`.

`expo-camera` provides a React component that renders a preview of the device's front or back camera. The camera's parameters such as zoom, auto focus, white balance and flash mode are adjustable. Using `Camera`, you can take photos and record videos that are saved to the app's cache. The component is also capable of detecting faces and bar codes appearing in the preview. Run the [example on your device to see all these features working together.

> Android devices can use one of two available Camera APIs: you can opt-in to using [`Camera2` with the `useCamera2Api` prop.

## Installation

`npx expo install expo-camera`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-camera` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-camera",
    {
      "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
      "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
      "recordAudioAndroid": true
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `cameraPermission` | `"Allow $(PRODUCT_NAME) to access your camera"` |
Only for: iOS

A string to set the `NSCameraUsageDescription` permission message.

 |
| `microphonePermission` | `"Allow $(PRODUCT_NAME) to access your microphone"` |

Only for: iOS

A string to set the `NSMicrophoneUsageDescription` permission message.

 |
| `recordAudioAndroid` | `true` |

Only for: Android

A boolean that determines whether to enable the `RECORD_AUDIO` permission on Android.

 |

Are you using this library in an existing React Native app?

Learn how to configure the native projects in the [installation instructions in the `expo-camera` repository.

## Usage

> Only one Camera preview can be active at any given time. If you have multiple screens in your app, you should unmount `Camera` components whenever a screen is unfocused.

Basic Camera usage

```
import { Camera, CameraType } from 'expo-camera/legacy';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [type, setType] = useState(CameraType.back);
  const [permission, requestPermission] = Camera.useCameraPermissions();

  if (!permission) {
```
// Camera permissions are still loading
return <View />;
```
  }

  if (!permission.granted) {
```
// Camera permissions are not granted yet
return (
  <View style={styles.container}>
    <Text style={{ textAlign: 'center' }}>We need your permission to show the camera</Text>
    <Button onPress={requestPermission} title="grant permission" />
  </View>
);
```
  }

  function toggleCameraType() {
```
setType(current => (current === CameraType.back ? CameraType.front : CameraType.back));
```
  }

  return (
```
<View style={styles.container}>
  <Camera style={styles.camera} type={type}>
    <View style={styles.buttonContainer}>
      <TouchableOpacity style={styles.button} onPress={toggleCameraType}>
        <Text style={styles.text}>Flip Camera</Text>
      </TouchableOpacity>
    </View>
  </Camera>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
```
  },
  camera: {
```
flex: 1,
```
  },
  buttonContainer: {
```
flex: 1,
flexDirection: 'row',
backgroundColor: 'transparent',
margin: 64,
```
  },
  button: {
```
flex: 1,
alignSelf: 'flex-end',
alignItems: 'center',
```
  },
  text: {
```
fontSize: 24,
fontWeight: 'bold',
color: 'white',
```
  },
});
```

## Web support

Most browsers support a version of web camera functionality, you can check out the [web camera browser support here. Image URIs are always returned as base64 strings because local file system paths are unavailable in the browser.

### Chrome `iframe` usage

When using Chrome versions 64+, if you try to use a web camera in a cross-origin iframe nothing will render. To add support for cameras in your iframe simply add the attribute `allow="microphone; camera;"` to the iframe element:

```
<iframe src="..." allow="microphone; camera;">
  <!-- <Camera /> -->
</iframe>
```

## API

```
import { Camera } from 'expo-camera/legacy';
```

## Component

### `Camera`

Type: `React.[Component<[CameraProps](#cameraprops)>`

CameraProps

### `autoFocus`

Optional Literal type: `union` Default: `AutoFocus.on`

State of camera auto focus. Use one of `AutoFocus.<value>`. When `AutoFocus.on`, auto focus will be enabled, when `AutoFocus.off`, it won't and focus will lock as it was in the moment of change, but it can be adjusted on some devices via `focusDepth` prop.

Acceptable values are: `boolean` | `number` | `[AutoFocus](#autofocus)`

### `barCodeScannerSettings`

Optional Type: `[BarCodeSettings](#barcodesettings)`

Settings exposed by [`BarCodeScanner` module. Supported settings: barCodeTypes.

Example

```
<Camera
  barCodeScannerSettings={{
```
barCodeTypes: [BarCodeScanner.Constants.BarCodeType.qr],
```
  }}
/>
```

### `faceDetectorSettings`

Optional Type: `object`

A settings object passed directly to an underlying module providing face detection features. See [`DetectionOptions` in FaceDetector documentation for details.

### `flashMode`

Optional Literal type: `union` Default: `FlashMode.off`

Camera flash mode. Use one of `FlashMode.<value>`. When `FlashMode.on`, the flash on your device will turn on when taking a picture, when `FlashMode.off`, it won't. Setting to `FlashMode.auto` will fire flash if required, `FlashMode.torch` turns on flash during the preview.

Acceptable values are: `number` | `[FlashMode](#flashmode)`

### `focusDepth`

Optional Type: `number` Default: `0`

Distance to plane of the sharpest focus. A value between `0` and `1` where: `0` - infinity focus, `1` - focus as close as possible. For Android this is available only for some devices and when `useCamera2Api` is set to `true`.

### `onBarCodeScanned`

Optional Type: `(scanningResult: [BarCodeScanningResult](#barcodescanningresult)) => void`

Callback that is invoked when a bar code has been successfully scanned. The callback is provided with an object of the `BarCodeScanningResult` shape, where the `type` refers to the bar code type that was scanned and the `data` is the information encoded in the bar code (in this case of QR codes, this is often a URL). See [`BarCodeScanner.Constants.BarCodeType` for supported values.

### `onCameraReady`

Optional Type: `() => void`

Callback invoked when camera preview has been set.

### `onFacesDetected`

Optional Type: `(faces: [FaceDetectionResult](#facedetectionresult)) => void`

Callback invoked with results of face detection on the preview. See [`DetectionResult` in FaceDetector documentation for more details.

### `onMountError`

Optional Type: `(event: [CameraMountError](#cameramounterror)) => void`

Callback invoked when camera preview could not been started.

`event: [CameraMountError](#cameramounterror)`

Error object that contains a `message`.

### `onResponsiveOrientationChanged`

Only for: iOS

Optional Type: `(event: [ResponsiveOrientationChanged](#responsiveorientationchanged)) => void`

Callback invoked when responsive orientation changes. Only applicable if `responsiveOrientationWhenOrientationLocked` is `true`

`event: [ResponsiveOrientationChanged](#responsiveorientationchanged)`

result object that contains updated orientation of camera

### `pictureSize`

Optional Type: `string`

A string representing the size of pictures `takePictureAsync` will take. Available sizes can be fetched with `getAvailablePictureSizesAsync`.

### `poster`

Only for: Web

Optional Type: `string`

A URL for an image to be shown while the camera is loading.

### `ratio`

Only for: Android

Optional Type: `string` Default: `4:3`

A string representing aspect ratio of the preview, eg. `4:3`, `16:9`, `1:1`. To check if a ratio is supported by the device use `getSupportedRatiosAsync`.

### `responsiveOrientationWhenOrientationLocked`

Only for: iOS

Optional Type: `boolean`

Whether to allow responsive orientation of the camera when the screen orientation is locked (i.e. when set to `true` landscape photos will be taken if the device is turned that way, even if the app or device orientation is locked to portrait)

### `type`

Optional Literal type: `union` Default: `CameraType.back`

Camera facing. Use one of `CameraType`. When `CameraType.front`, use the front-facing camera. When `CameraType.back`, use the back-facing camera.

Acceptable values are: `number` | `[CameraType](#cameratype)`

### `useCamera2Api`

Only for: Android

Optional Type: `boolean`

Whether to use Android's Camera2 API. See `Note` at the top of this page.

### `videoStabilizationMode`

Only for: iOS

Optional Type: `[VideoStabilization](#videostabilization)`

The video stabilization mode used for a video recording. Use one of `VideoStabilization.<value>`. You can read more about each stabilization type in [Apple Documentation.

### `whiteBalance`

Optional Literal type: `union` Default: `WhiteBalance.auto`

Camera white balance. Use one of `WhiteBalance.<value>`. If a device does not support any of these values previous one is used.

Acceptable values are: `number` | `[WhiteBalance](#whitebalance)`

### `zoom`

Optional Type: `number` Default: `0`

A value between `0` and `1` being a percentage of device's max zoom. `0` - not zoomed, `1` - maximum zoom.

#### Inherited Props

*   `[ViewProps`

## Static Methods

### `getAvailableCameraTypesAsync()`

Only for: Web

Returns a list of camera types `['front', 'back']`. This is useful for desktop browsers which only have front-facing cameras.

Returns:

`[Promise<[CameraType](#cameratype)>`

### `getAvailableVideoCodecsAsync()`

Only for: iOS

Queries the device for the available video codecs that can be used in video recording.

Returns:

`[Promise<[VideoCodec](#videocodec)>`

A promise that resolves to a list of strings that represents available codecs.

### `isAvailableAsync()`

Only for: Web

Check whether the current device has a camera. This is useful for web and simulators cases. This isn't influenced by the Permissions API (all platforms), or HTTP usage (in the browser). You will still need to check if the native permission has been accepted.

Returns:

`[Promise<boolean>`

## Component Methods

### `getAvailablePictureSizesAsync(ratio)`

| Parameter | Type | Description |
| --- | --- | --- |
| ratio | `string` |
A string representing aspect ratio of sizes to be returned.

 |

Get picture sizes that are supported by the device for given `ratio`.

Returns:

`[Promise<string>`

Returns a Promise that resolves to an array of strings representing picture sizes that can be passed to `pictureSize` prop. The list varies across Android devices but is the same for every iOS.

### `getSupportedRatiosAsync()`

Only for: Android

Get aspect ratios that are supported by the device and can be passed via `ratio` prop.

Returns:

`[Promise<string>`

Returns a Promise that resolves to an array of strings representing ratios, eg. `['4:3', '1:1']`.

### `pausePreview()`

Pauses the camera preview. It is not recommended to use `takePictureAsync` when preview is paused.

Returns:

`[Promise<void>`

### `recordAsync(options)`

Only for: Android, iOS

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[CameraRecordingOptions](#camerarecordingoptions)` |
A map of `CameraRecordingOptions` type.

 |

Starts recording a video that will be saved to cache directory. Videos are rotated to match device's orientation. Flipping camera during a recording results in stopping it.

Returns:

`[Promise<{ uri: string }>`

Returns a Promise that resolves to an object containing video file `uri` property and a `codec` property on iOS. The Promise is returned if `stopRecording` was invoked, one of `maxDuration` and `maxFileSize` is reached or camera preview is stopped.

### `resumePreview()`

Resumes the camera preview.

Returns:

`[Promise<void>`

### `stopRecording()`

Stops recording if any is in progress.

Returns:

`[Promise<void>`

### `takePictureAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[CameraPictureOptions](#camerapictureoptions)` |
An object in form of `CameraPictureOptions` type.

 |

Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation (if `options.skipProcessing` flag is not enabled) and scaled to match the preview. Anyway on Android it is essential to set ratio prop to get a picture with correct dimensions.

> Note: Make sure to wait for the `onCameraReady` callback before calling this method.

Returns:

`[Promise<[CameraCapturedPicture](#cameracapturedpicture)>`

Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on iOS, Android, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify the dimensions of the image. `base64` is included if the `base64` option was truthy, and is a string containing the JPEG data of the image in Base64--prepend that with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source for an `Image` element for example. `exif` is included if the `exif` option was truthy, and is an object containing EXIF data for the image--the names of its properties are EXIF tags and their values are the values for those tags.

> On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync` to make a permanent copy of the image.

## Hooks

### `useCameraPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to access the camera. This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Camera.useCameraPermissions();
```

### `useMicrophonePermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to access the microphone. This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Camera.useMicrophonePermissions();
```

## Methods

### `Camera.getCameraPermissionsAsync()`

Checks user's permissions for accessing camera.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type [PermissionResponse](#permissionresponse).

### `Camera.getMicrophonePermissionsAsync()`

Checks user's permissions for accessing microphone.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type [PermissionResponse](#permissionresponse).

> Deprecated Use `getCameraPermissionsAsync` or `getMicrophonePermissionsAsync` instead. Checks user's permissions for accessing camera.

### `Camera.getPermissionsAsync()`

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `Camera.requestCameraPermissionsAsync()`

Asks the user to grant permissions for accessing camera. On iOS this will require apps to specify an `NSCameraUsageDescription` entry in the Info.plist.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type [PermissionResponse](#permissionresponse).

### `Camera.requestMicrophonePermissionsAsync()`

Asks the user to grant permissions for accessing the microphone. On iOS this will require apps to specify an `NSMicrophoneUsageDescription` entry in the Info.plist.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type [PermissionResponse](#permissionresponse).

> Deprecated Use `requestCameraPermissionsAsync` or `requestMicrophonePermissionsAsync` instead.

### `Camera.requestPermissionsAsync()`

Asks the user to grant permissions for accessing camera. On iOS this will require apps to specify both `NSCameraUsageDescription` and `NSMicrophoneUsageDescription` entries in the Info.plist.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to an object of type [PermissionResponse](#permissionresponse).

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `BarCodeBounds`

| Property | Type | Description |
| --- | --- | --- |
| origin | `[BarCodePoint](#barcodepoint)` |
The origin point of the bounding box.

 |
| size | `[BarCodeSize](#barcodesize)` |

The size of the bounding box.

 |

### `BarCodePoint`

Type: `[Point](#point)`

These coordinates are represented in the coordinate space of the camera source (e.g. when you are using the camera view, these values are adjusted to the dimensions of the view).

### `BarCodeScanningResult`

| Property | Type | Description |
| --- | --- | --- |
| bounds | `[BarCodeBounds](#barcodebounds)` |
The [BarCodeBounds](#barcodebounds) object. `bounds` in some case will be representing an empty rectangle. Moreover, `bounds` doesn't have to bound the whole barcode. For some types, they will represent the area used by the scanner.

 |
| cornerPoints | `[BarCodePoint](#barcodepoint)` |

Corner points of the bounding box. `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417` you don't get this value.

 |
| data | `string` |

The parsed information encoded in the bar code.

 |
| type | `string` |

The barcode type.

 |

### `BarCodeSettings`

| Property | Type | Description |
| --- | --- | --- |
| barCodeTypes | `string` |
\-

 |
| interval(optional) | `number` |

\-

 |

### `BarCodeSize`

| Property | Type | Description |
| --- | --- | --- |
| height | `number` |
The height value.

 |
| width | `number` |

The width value.

 |

### `CameraCapturedPicture`

| Property | Type | Description |
| --- | --- | --- |
| base64(optional) | `string` |
A Base64 representation of the image.

 |
| exif(optional) | `[Partial<[MediaTrackSettings> | any` |

On Android and iOS this object may include various fields based on the device and operating system. On web, it is a partial representation of the [`MediaTrackSettings` dictionary.

 |
| height | `number` |

Captured image height.

 |
| uri | `string` |

On web, the value of `uri` is the same as `base64` because file system URLs are not supported in the browser.

 |
| width | `number` |

Captured image width.

 |

### `CameraMountError`

| Property | Type | Description |
| --- | --- | --- |
| message | `string` |
\-

 |

### `CameraPictureOptions`

| Property | Type | Description |
| --- | --- | --- |
| additionalExif(optional) | `Record<string, any>` |
Only for: Android, iOS

Additional EXIF data to be included for the image. Only useful when `exif` option is set to `true`.

 |
| base64(optional) | `boolean` |

Whether to also include the image data in Base64 format.

 |
| exif(optional) | `boolean` |

Whether to also include the EXIF data for the image.

 |
| imageType(optional) | `[ImageType](#imagetype)` |

Only for: Web

\-

 |
| isImageMirror(optional) | `boolean` |

Only for: Web

\-

 |
| onPictureSaved(optional) | `(picture: [CameraCapturedPicture](#cameracapturedpicture)) => void` |

A callback invoked when picture is saved. If set, the promise of this method will resolve immediately with no data after picture is captured. The data that it should contain will be passed to this callback. If displaying or processing a captured photo right after taking it is not your case, this callback lets you skip waiting for it to be saved.

 |
| quality(optional) | `number` |

Specify the compression quality from `0` to `1`. `0` means compress for small size, and `1` means compress for maximum quality.

 |
| scale(optional) | `number` |

Only for: Web

\-

 |
| skipProcessing(optional) | `boolean` |

If set to `true`, camera skips orientation adjustment and returns an image straight from the device's camera. If enabled, `quality` option is discarded (processing pipeline is skipped as a whole). Although enabling this option reduces image delivery time significantly, it may cause the image to appear in a wrong orientation in the `Image` component (at the time of writing, it does not respect EXIF orientation of the images).

> Note: Enabling `skipProcessing` would cause orientation uncertainty. `Image` component does not respect EXIF stored orientation information, that means obtained image would be displayed wrongly (rotated by 90°, 180° or 270°). Different devices provide different orientations. For example some Sony Xperia or Samsung devices don't provide correctly oriented images by default. To always obtain correctly oriented image disable `skipProcessing` option.

 |

### `CameraRecordingOptions`

| Property | Type | Description |
| --- | --- | --- |
| codec(optional) | `[VideoCodec](#videocodec)` |
Only for: iOS

This option specifies what codec to use when recording the video. See `VideoCodec` for the possible values.

 |
| maxDuration(optional) | `number` |

Maximum video duration in seconds.

 |
| maxFileSize(optional) | `number` |

Maximum video file size in bytes.

 |
| mirror(optional) | `boolean` |

Only for: iOS

If `true`, the recorded video will be flipped along the vertical axis. iOS flips videos recorded with the front camera by default, but you can reverse that back by setting this to `true`. On Android, this is handled in the user's device settings.

 |
| mute(optional) | `boolean` |

If present, video will be recorded with no sound.

 |
| quality(optional) | `number | string` |

Specify the quality of recorded video. Use one of `VideoQuality.<value>`. Possible values: for 16:9 resolution `2160p`, `1080p`, `720p`, `480p` : `Android only` and for 4:3 `4:3` (the size is 640x480). If the chosen quality is not available for a device, the highest available is chosen.

 |
| videoBitrate(optional) | `number` |

Only for: Android

Only works if `useCamera2Api` is set to `true`. This option specifies a desired video bitrate. For example, `5*1000*1000` would be 5Mbps.

 |

### `FaceDetectionResult`

| Property | Type | Description |
| --- | --- | --- |
| faces | `object` |
Array of objects representing results of face detection. See [`FaceFeature` in FaceDetector documentation for more details.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `Point`

| Property | Type | Description |
| --- | --- | --- |
| x | `number` |
\-

 |
| y | `number` |

\-

 |

### `ResponsiveOrientationChanged`

| Property | Type | Description |
| --- | --- | --- |
| orientation | `[CameraOrientation](#cameraorientation)` |
\-

 |

## Enums

### `AutoFocus`

#### `auto`

Only for: Web

`AutoFocus.auto ＝ "auto"`

#### `off`

`AutoFocus.off ＝ "off"`

#### `on`

`AutoFocus.on ＝ "on"`

#### `singleShot`

Only for: Web

`AutoFocus.singleShot ＝ "singleShot"`

### `CameraOrientation`

#### `portrait`

`CameraOrientation.portrait ＝ 1`

#### `portraitUpsideDown`

`CameraOrientation.portraitUpsideDown ＝ 2`

#### `landscapeLeft`

`CameraOrientation.landscapeLeft ＝ 3`

#### `landscapeRight`

`CameraOrientation.landscapeRight ＝ 4`

### `CameraType`

#### `back`

`CameraType.back ＝ "back"`

#### `front`

`CameraType.front ＝ "front"`

### `FlashMode`

#### `auto`

`FlashMode.auto ＝ "auto"`

#### `off`

`FlashMode.off ＝ "off"`

#### `on`

`FlashMode.on ＝ "on"`

#### `torch`

`FlashMode.torch ＝ "torch"`

### `ImageType`

#### `jpg`

`ImageType.jpg ＝ "jpg"`

#### `png`

`ImageType.png ＝ "png"`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

### `VideoCodec`

Only for: iOS

This option specifies what codec to use when recording a video.

#### `AppleProRes4444`

`VideoCodec.AppleProRes4444 ＝ "ap4h"`

#### `AppleProRes422`

`VideoCodec.AppleProRes422 ＝ "apcn"`

#### `H264`

`VideoCodec.H264 ＝ "avc1"`

#### `HEVC`

`VideoCodec.HEVC ＝ "hvc1"`

#### `JPEG`

`VideoCodec.JPEG ＝ "jpeg"`

### `VideoQuality`

#### `1080p`

`VideoQuality.1080p ＝ "1080p"`

#### `2160p`

`VideoQuality.2160p ＝ "2160p"`

#### `4:3`

`VideoQuality.4:3 ＝ "4:3"`

#### `480p`

`VideoQuality.480p ＝ "480p"`

#### `720p`

`VideoQuality.720p ＝ "720p"`

### `VideoStabilization`

Only for: iOS

This option specifies the stabilization mode to use when recording a video.

#### `auto`

`VideoStabilization.auto ＝ "auto"`

#### `cinematic`

`VideoStabilization.cinematic ＝ "cinematic"`

#### `off`

`VideoStabilization.off ＝ "off"`

#### `standard`

`VideoStabilization.standard ＝ "standard"`

### `WhiteBalance`

#### `auto`

`WhiteBalance.auto ＝ "auto"`

#### `cloudy`

Only for: Android, iOS

`WhiteBalance.cloudy ＝ "cloudy"`

#### `continuous`

Only for: Web

`WhiteBalance.continuous ＝ "continuous"`

#### `fluorescent`

Only for: Android, iOS

`WhiteBalance.fluorescent ＝ "fluorescent"`

#### `incandescent`

Only for: Android, iOS

`WhiteBalance.incandescent ＝ "incandescent"`

#### `manual`

Only for: Web

`WhiteBalance.manual ＝ "manual"`

#### `shadow`

Only for: Android, iOS

`WhiteBalance.shadow ＝ "shadow"`

#### `sunny`

Only for: Android, iOS

`WhiteBalance.sunny ＝ "sunny"`

## Permissions

### Android

This package automatically adds the `CAMERA` permission to your app. If you want to record videos with audio, you have to include the `RECORD_AUDIO` in your app.json inside the [`expo.android.permissions` array.

| Android Permission | Description |
| --- | --- |
|
`CAMERA`

 |

Required to be able to access the camera device.

 |
|

`RECORD_AUDIO`

 |

Allows an application to record audio.

 |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSCameraUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s camera. |
|

`NSMicrophoneUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s microphone. |

---

# Expo Camera

`expo-camera` provides a React component that renders a preview of the device's front or back camera. The camera's parameters such as zoom, torch, and flash mode are adjustable. Using `CameraView`, you can take photos and record videos that are saved to the app's cache. The component is also capable of detecting bar codes appearing in the preview. Run the [example on your device to see all these features working together.

## Installation

`npx expo install expo-camera`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-camera` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-camera",
    {
      "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
      "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
      "recordAudioAndroid": true
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `cameraPermission` | `"Allow $(PRODUCT_NAME) to access your camera"` |
Only for: iOS

A string to set the `NSCameraUsageDescription` permission message.

 |
| `microphonePermission` | `"Allow $(PRODUCT_NAME) to access your microphone"` |

Only for: iOS

A string to set the `NSMicrophoneUsageDescription` permission message.

 |
| `recordAudioAndroid` | `true` |

Only for: Android

A boolean that determines whether to enable the `RECORD_AUDIO` permission on Android.

 |

Are you using this library in an existing React Native app?

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) (you're using native android and ios projects manually), then you need to configure following permissions in your native projects:

Android

*   `expo-camera` automatically adds `android.permission.CAMERA` permission to your project's android/app/src/main/AndroidManifest.xml. If you want to record videos with audio, include `RECORD_AUDIO` permission:
```
<!-- Added permission -->
<uses-permission android:name="android.permission.CAMERA" />

<!-- Only when recording videos with audio -->
<uses-permission android:name="android.permission.RECORD_AUDIO" />
```
*   Then, adjust the android/build.gradle file to add new maven block after all other repositories as show below:
```
allprojects {
  repositories {
      // * Your other repositories here *
      // * Add a new maven block after other repositories / blocks *
      maven {
          // expo-camera bundles a custom com.google.android:cameraview
          url "$rootDir/../node_modules/expo-camera/android/maven"
      }
  }
}
```
iOS

*   Add `NSCameraUsageDescription` and `NSMicrophoneUsageDescription` keys to your project's ios/\[app\]/Info.plist:
```
<key>NSCameraUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your camera</string>
<key>NSMicrophoneUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your microphone</string>
```
## Usage

> Only one Camera preview can be active at any given time. If you have multiple screens in your app, you should unmount `Camera` components whenever a screen is unfocused.

Basic Camera Usage
```
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
```
// Camera permissions are still loading.
return <View />;
```
  }

  if (!permission.granted) {
```
// Camera permissions are not granted yet.
return (
  <View style={styles.container}>
    <Text style={styles.message}>We need your permission to show the camera</Text>
    <Button onPress={requestPermission} title="grant permission" />
  </View>
);
```
  }

  function toggleCameraFacing() {
```
setFacing(current => (current === 'back' ? 'front' : 'back'));
```
  }

  return (
```
<View style={styles.container}>
  <CameraView style={styles.camera} facing={facing}>
    <View style={styles.buttonContainer}>
      <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
        <Text style={styles.text}>Flip Camera</Text>
      </TouchableOpacity>
    </View>
  </CameraView>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
```
  },
  message: {
```
textAlign: 'center',
paddingBottom: 10,
```
  },
  camera: {
```
flex: 1,
```
  },
  buttonContainer: {
```
flex: 1,
flexDirection: 'row',
backgroundColor: 'transparent',
margin: 64,
```
  },
  button: {
```
flex: 1,
alignSelf: 'flex-end',
alignItems: 'center',
```
  },
  text: {
```
fontSize: 24,
fontWeight: 'bold',
color: 'white',
```
  },
});
```
### Advanced usage

Camera app example

A complete example that shows how to take a picture and display it. Written in TypeScript.

## Web support

Most browsers support a version of web camera functionality, you can check out the [web camera browser support here. Image URIs are always returned as base64 strings because local file system paths are unavailable in the browser.

### Chrome `iframe` usage

When using Chrome versions 64+, if you try to use a web camera in a cross-origin iframe nothing will render. To add support for cameras in your iframe simply add the attribute `allow="microphone; camera;"` to the iframe element:
```
<iframe src="..." allow="microphone; camera;">
  <!-- <CameraView /> -->
</iframe>
```
## API
```
import { CameraView } from 'expo-camera';
```
## Component

### `CameraView`

Type: `React.[Component<[CameraProps](#cameraprops)>`

CameraViewProps

### `active`

Only for: iOS

Optional Type: `boolean` Default: `true`

A boolean that determines whether the camera should be active. Useful in situations where the camera may not have unmounted but you still want to stop the camera session.

### `animateShutter`

Optional Type: `boolean` Default: `true`

A boolean that determines whether the camera shutter animation should be enabled.

### `autofocus`

Only for: iOS

Optional Type: `[FocusMode](#focusmode)` Default: `off`

Indicates the focus mode to use.

### `barcodeScannerSettings`

Optional Type: `[BarcodeSettings](#barcodesettings)`

Example
```
<CameraView
  barcodeScannerSettings={{
```
barcodeTypes: ["qr"],
```
  }}
/>
```
### `enableTorch`

Optional Type: `boolean` Default: `false`

A boolean to enable or disable the torch

### `facing`

Optional Type: `[CameraType](#cameratype)` Default: `'back'`

Camera facing. Use one of `CameraType`. When `front`, use the front-facing camera. When `back`, use the back-facing camera.

### `flash`

Optional Type: `[FlashMode](#flashmode)` Default: `'off'`

Camera flash mode. Use one of `FlashMode` values. When `on`, the flash on your device will turn on when taking a picture. When `off`, it won't. Setting it to `auto` will fire flash if required.

### `mirror`

Optional Type: `boolean` Default: `false`

A boolean that determines whether the camera should mirror the image when using the front camera.

### `mode`

Optional Type: `[CameraMode](#cameramode)` Default: `'picture'`

Used to select image or video output

### `mute`

Optional Type: `boolean` Default: `false`

If present, video will be recorded with no sound.

### `onBarcodeScanned`

Optional Type: `(scanningResult: [BarcodeScanningResult](#barcodescanningresult)) => void`

Callback that is invoked when a barcode has been successfully scanned. The callback is provided with an object of the `BarcodeScanningResult` shape, where the `type` refers to the barcode type that was scanned, and the `data` is the information encoded in the barcode (in this case of QR codes, this is often a URL). See `BarcodeType` for supported values. for supported values.

### `onCameraReady`

Optional Type: `() => void`

Callback invoked when camera preview has been set.

### `onMountError`

Optional Type: `(event: [CameraMountError](#cameramounterror)) => void`

Callback invoked when camera preview could not start.

`event: [CameraMountError](#cameramounterror)`

Error object that contains a `message`.

### `onResponsiveOrientationChanged`

Only for: iOS

Optional Type: `(event: [ResponsiveOrientationChanged](#responsiveorientationchanged)) => void`

Callback invoked when responsive orientation changes. Only applicable if `responsiveOrientationWhenOrientationLocked` is `true`

`event: [ResponsiveOrientationChanged](#responsiveorientationchanged)`

result object that contains updated orientation of camera

### `pictureSize`

Optional Type: `string`

A string representing the size of pictures `takePictureAsync` will take. Available sizes can be fetched with `getAvailablePictureSizesAsync`. Setting this prop will cause the `ratio` prop to be ignored as the aspect ratio is determined by the selected size.

### `poster`

Only for: Web

Optional Type: `string`

A URL for an image to be shown while the camera is loading.

### `ratio`

Only for: Android

Optional Type: `[CameraRatio](#cameraratio)` Default: `1:1`

A string representing the aspect ratio of the preview. For example, `4:3` and `16:9`. Note: Setting the aspect ratio here will change the scaleType of the camera preview from `FILL` to `FIT`.

### `responsiveOrientationWhenOrientationLocked`

Only for: iOS

Optional Type: `boolean`

Whether to allow responsive orientation of the camera when the screen orientation is locked (i.e. when set to `true` landscape photos will be taken if the device is turned that way, even if the app or device orientation is locked to portrait)

### `videoQuality`

Optional Type: `[VideoQuality](#videoquality)`

Specify the quality of the recorded video. Use one of `VideoQuality` possible values: for 16:9 resolution `2160p`, `1080p`, `720p`, `480p` : `Android only` and for 4:3 `4:3` (the size is 640x480). If the chosen quality is not available for a device, the highest available is chosen.

### `videoStabilizationMode`

Only for: iOS

Optional Type: `[VideoStabilization](#videostabilization)`

The video stabilization mode used for a video recording. Use one of `VideoStabilization.<value>`. You can read more about each stabilization type in [Apple Documentation.

### `zoom`

Optional Type: `number` Default: `0`

A value between `0` and `1` being a percentage of device's max zoom. `0` - not zoomed, `1` - maximum zoom.

#### Inherited Props

*   `[ViewProps`

## Static Methods

### `dismissScanner()`

Only for: iOS

Dismiss the scanner presented by `launchScanner`.

Returns:

`[Promise<void>`

### `getAvailableVideoCodecsAsync()`

Only for: iOS

Queries the device for the available video codecs that can be used in video recording.

Returns:

`[Promise<[VideoCodec](#videocodec)>`

A promise that resolves to a list of strings that represents available codecs.

### `isAvailableAsync()`

Only for: Web

Check whether the current device has a camera. This is useful for web and simulators cases. This isn't influenced by the Permissions API (all platforms), or HTTP usage (in the browser). You will still need to check if the native permission has been accepted.

Returns:

`[Promise<boolean>`

### `launchScanner(options)`

Only for: iOS

| Parameter | Type |
| --- | --- |
| options(optional) | `[ScanningOptions](#scanningoptions)` |

Presents a modal view controller that uses the [`DataScannerViewController` available on iOS 16+.

Returns:

`[Promise<void>`

### `onModernBarcodeScanned(listener)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [ScanningResult](#scanningresult)) => void` |
Invoked with the [ScanningResult](#scanningresult) when a bar code has been successfully scanned.

 |

Invokes the `listener` function when a bar code has been successfully scanned. The callback is provided with an object of the `ScanningResult` shape, where the `type` refers to the bar code type that was scanned and the `data` is the information encoded in the bar code (in this case of QR codes, this is often a URL). See `BarcodeType` for supported values.

Returns:

`EventSubscription`

## Component Methods

### `getAvailablePictureSizesAsync()`

Get picture sizes that are supported by the device.

Returns:

`[Promise<string>`

Returns a Promise that resolves to an array of strings representing picture sizes that can be passed to `pictureSize` prop. The list varies across Android devices but is the same for every iOS.

### `pausePreview()`

Pauses the camera preview. It is not recommended to use `takePictureAsync` when preview is paused.

Returns:

`[Promise<void>`

### `recordAsync(options)`

Only for: Android, iOS

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[CameraRecordingOptions](#camerarecordingoptions)` |
A map of `CameraRecordingOptions` type.

 |

Starts recording a video that will be saved to cache directory. Videos are rotated to match device's orientation. Flipping camera during a recording results in stopping it.

Returns:

`[Promise<undefined | { uri: string }>`

Returns a Promise that resolves to an object containing video file `uri` property and a `codec` property on iOS. The Promise is returned if `stopRecording` was invoked, one of `maxDuration` and `maxFileSize` is reached or camera preview is stopped.

### `resumePreview()`

Resumes the camera preview.

Returns:

`[Promise<void>`

### `stopRecording()`

Stops recording if any is in progress.

Returns:

`void`

### `takePictureAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[CameraPictureOptions](#camerapictureoptions)` |
An object in form of `CameraPictureOptions` type.

 |

Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation (if `options.skipProcessing` flag is not enabled) and scaled to match the preview.

> Note: Make sure to wait for the `onCameraReady` callback before calling this method.

Returns:

`[Promise<undefined | [CameraCapturedPicture](#cameracapturedpicture)>`

Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on Android, iOS, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify the dimensions of the image.

`base64` is included if the `base64` option was truthy, and is a string containing the JPEG data of the image in Base64. Prepend it with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source for an `Image` element for example.

`exif` is included if the `exif` option was truthy, and is an object containing EXIF data for the image. The names of its properties are EXIF tags and their values are the values for those tags.

> On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync` to make a permanent copy of the image.

Note Avoid calling this method while the preview is paused. On iOS, this will take a picture of the last frame that is currently on screen, on Android, this will throw an error.

## Hooks

### `useCameraPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to access the camera. This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example
```
const [status, requestPermission] = useCameraPermissions();
```
### `useMicrophonePermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to access the microphone. This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example
```
const [status, requestPermission] = Camera.useMicrophonePermissions();
```

## Methods

### `Camera.scanFromURLAsync(url, barcodeTypes)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
URL to get the image from.

 |
| barcodeTypes(optional) | `[BarcodeType](#barcodetype)` |

An array of bar code types. Defaults to all supported bar code types on the platform.

> Note: Only QR codes are supported on iOS. On android, the barcode should take up the majority of the image for best results.

 |

Scan bar codes from the image at the given URL.

Returns:

`[Promise<[BarcodeScanningResult](#barcodescanningresult)>`

A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type refers to the barcode type that was scanned and the data is the information encoded in the barcode.

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `BarcodeBounds`

| Property | Type | Description |
| --- | --- | --- |
| origin | `[BarcodePoint](#barcodepoint)` |
The origin point of the bounding box.

 |
| size | `[BarcodeSize](#barcodesize)` |

The size of the bounding box.

 |

### `BarcodePoint`

Type: `[Point](#point)`

These coordinates are represented in the coordinate space of the camera source (e.g. when you are using the camera view, these values are adjusted to the dimensions of the view).

### `BarcodeScanningResult`

| Property | Type | Description |
| --- | --- | --- |
| bounds | `[BarcodeBounds](#barcodebounds)` |
The [BarcodeBounds](#barcodebounds) object. `bounds` in some case will be representing an empty rectangle. Moreover, `bounds` doesn't have to bound the whole barcode. For some types, they will represent the area used by the scanner.

 |
| cornerPoints | `[BarcodePoint](#barcodepoint)` |

Corner points of the bounding box. `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417` you don't get this value.

 |
| data | `string` |

The parsed information encoded in the barcode.

 |
| type | `string` |

The barcode type.

 |

### `BarcodeSettings`

| Property | Type | Description |
| --- | --- | --- |
| barcodeTypes | `[BarcodeType](#barcodetype)` |
\-

 |

### `BarcodeSize`

| Property | Type | Description |
| --- | --- | --- |
| height | `number` |
The height value.

 |
| width | `number` |

The width value.

 |

### `BarcodeType`

Literal Type: `string`

The available barcode types that can be scanned.

Acceptable values are: `'aztec'` | `'ean13'` | `'ean8'` | `'qr'` | `'pdf417'` | `'upc_e'` | `'datamatrix'` | `'code39'` | `'code93'` | `'itf14'` | `'codabar'` | `'code128'` | `'upc_a'`

### `CameraCapturedPicture`

| Property | Type | Description |
| --- | --- | --- |
| base64(optional) | `string` |
A Base64 representation of the image.

 |
| exif(optional) | `[Partial<[MediaTrackSettings> | any` |

On Android and iOS this object may include various fields based on the device and operating system. On web, it is a partial representation of the [`MediaTrackSettings` dictionary.

 |
| height | `number` |

Captured image height.

 |
| uri | `string` |

On web, the value of `uri` is the same as `base64` because file system URLs are not supported in the browser.

 |
| width | `number` |

Captured image width.

 |

### `CameraMode`

Literal Type: `string`

Acceptable values are: `'picture'` | `'video'`

### `CameraMountError`

| Property | Type | Description |
| --- | --- | --- |
| message | `string` |
\-

 |

### `CameraOrientation`

Literal Type: `string`

Acceptable values are: `'portrait'` | `'portraitUpsideDown'` | `'landscapeLeft'` | `'landscapeRight'`

### `CameraPictureOptions`

| Property | Type | Description |
| --- | --- | --- |
| additionalExif(optional) | `Record<string, any>` |
Only for: Android, iOS

Additional EXIF data to be included for the image. Only useful when `exif` option is set to `true`.

 |
| base64(optional) | `boolean` |

Whether to also include the image data in Base64 format.

 |
| exif(optional) | `boolean` |

Whether to also include the EXIF data for the image.

 |
| imageType(optional) | `[ImageType](#imagetype)` |

Only for: Web

\-

 |
| isImageMirror(optional) | `boolean` |

Only for: Web

\-

 |
| mirror(optional) | `boolean` |

> Deprecated Use `mirror` prop on `CameraView` instead.

Only for: Android, iOS

When set to `true`, the output image will be flipped along the vertical axis when using the front camera.

Default:`false`

 |
| onPictureSaved(optional) | `(picture: [CameraCapturedPicture](#cameracapturedpicture)) => void` |

A callback invoked when picture is saved. If set, the promise of this method will resolve immediately with no data after picture is captured. The data that it should contain will be passed to this callback. If displaying or processing a captured photo right after taking it is not your case, this callback lets you skip waiting for it to be saved.

 |
| quality(optional) | `number` |

Specify the compression quality from `0` to `1`. `0` means compress for small size, and `1` means compress for maximum quality.

 |
| scale(optional) | `number` |

Only for: Web

\-

 |
| skipProcessing(optional) | `boolean` |

If set to `true`, camera skips orientation adjustment and returns an image straight from the device's camera. If enabled, `quality` option is discarded (processing pipeline is skipped as a whole). Although enabling this option reduces image delivery time significantly, it may cause the image to appear in a wrong orientation in the `Image` component (at the time of writing, it does not respect EXIF orientation of the images).

> Note: Enabling `skipProcessing` would cause orientation uncertainty. `Image` component does not respect EXIF stored orientation information, that means obtained image would be displayed wrongly (rotated by 90°, 180° or 270°). Different devices provide different orientations. For example some Sony Xperia or Samsung devices don't provide correctly oriented images by default. To always obtain correctly oriented image disable `skipProcessing` option.

 |

### `CameraRatio`

Literal Type: `string`

Acceptable values are: `'4:3'` | `'16:9'` | `'1:1'`

### `CameraRecordingOptions`

| Property | Type | Description |
| --- | --- | --- |
| codec(optional) | `[VideoCodec](#videocodec)` |
Only for: iOS

This option specifies what codec to use when recording the video. See `VideoCodec` for the possible values.

 |
| maxDuration(optional) | `number` |

Maximum video duration in seconds.

 |
| maxFileSize(optional) | `number` |

Maximum video file size in bytes.

 |
| mirror(optional) | `boolean` |

> Deprecated Use `mirror` prop on `CameraView` instead.

If `true`, the recorded video will be flipped along the vertical axis. iOS flips videos recorded with the front camera by default, but you can reverse that back by setting this to `true`. On Android, this is handled in the user's device settings.

 |

### `CameraType`

Literal Type: `string`

Acceptable values are: `'front'` | `'back'`

### `FlashMode`

Literal Type: `string`

Acceptable values are: `'off'` | `'on'` | `'auto'`

### `FocusMode`

Literal Type: `string`

This option specifies the mode of focus on the device.

*   `on` - Indicates that the device should autofocus once and then lock the focus.
*   `off` - Indicates that the device should automatically focus when needed.

Acceptable values are: `'on'` | `'off'`

### `ImageType`

Literal Type: `string`

Acceptable values are: `'png'` | `'jpg'`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `Point`

| Property | Type | Description |
| --- | --- | --- |
| x | `number` |
\-

 |
| y | `number` |

\-

 |

### `ResponsiveOrientationChanged`

| Property | Type | Description |
| --- | --- | --- |
| orientation | `[CameraOrientation](#cameraorientation)` |
\-

 |

### `ScanningOptions`

Only for: iOS

| Property | Type | Description |
| --- | --- | --- |
| barcodeTypes | `[BarcodeType](#barcodetype)` |
The type of codes to scan for.

 |
| isGuidanceEnabled(optional) | `boolean` |

Guidance text, such as “Slow Down,” appears over the live video.

Default:`true`

 |
| isHighlightingEnabled(optional) | `boolean` |

Indicates whether the scanner displays highlights around recognized items.

Default:`false`

 |
| isPinchToZoomEnabled(optional) | `boolean` |

Indicates whether people can use a two-finger pinch-to-zoom gesture.

Default:`true`

 |

### `ScanningResult`

Type: `[Omit<[BarcodeScanningResult](#barcodescanningresult), 'bounds'>`

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

 |

### `VideoCodec`

Only for: iOS

Literal Type: `string`

This option specifies what codec to use when recording a video.

Acceptable values are: `'avc1'` | `'hvc1'` | `'jpeg'` | `'apcn'` | `'ap4h'`

### `VideoQuality`

Literal Type: `string`

Acceptable values are: `'2160p'` | `'1080p'` | `'720p'` | `'480p'` | `'4:3'`

### `VideoStabilization`

Only for: iOS

Literal Type: `string`

This option specifies the stabilization mode to use when recording a video.

Acceptable values are: `'off'` | `'standard'` | `'cinematic'` | `'auto'`

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

This package automatically adds the `CAMERA` permission to your app. If you want to record videos with audio, you have to include the `RECORD_AUDIO` in your app.json inside the [`expo.android.permissions` array.

| Android Permission | Description |
| --- | --- |
|
`CAMERA`

 |

Required to be able to access the camera device.

 |
|

`RECORD_AUDIO`

 |

Allows an application to record audio.

 |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSCameraUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s camera. |
|

`NSMicrophoneUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s microphone. |

---

# captureRef

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

Given a view, `captureRef` will essentially screenshot that view and return an image for you. This is very useful for things like signature pads, where the user draws something, and then you want to save an image from it.

If you're interested in taking snapshots from the GLView, we recommend you use [GLView's takeSnapshotAsync instead.

## Installation

`npx expo install react-native-view-shot`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## API

```
import { captureRef } from 'react-native-view-shot';
```

### `captureRef(view, options)`

Snapshots the given view.

#### Arguments

*   view (_number|ReactElement_) -- The `ref` or `reactTag` (also known as node handle) for the view to snapshot.
```
*   options (_object_) --
```
An optional map of optional options

*   format (_string_) -- `"png" | "jpg" | "webm"`, defaults to `"png"`, `"webm"` supported only on Android.
*   quality (_number_) -- Number between 0 and 1 where 0 is worst quality and 1 is best, defaults to `1`
*   result (_string_) -- The type for the resulting image. - `'tmpfile'` -- (default) Return a temporary file uri. - `'base64'` -- base64 encoded image. - `'data-uri'` -- base64 encoded image with data-uri prefix.
*   height (_number_) -- Height of result in pixels
*   width (_number_) -- Width of result in pixels
*   snapshotContentContainer (_bool_) -- if true and when view is a ScrollView, the "content container" height will be evaluated instead of the container height
```

#### Returns

An image of the format specified in the options parameter.

## Note on pixel values

Remember to take the device `PixelRatio` into account. When you work with pixel values in a UI, most of the time those units are "logical pixels" or "device-independent pixels". With images like PNG files, you often work with "physical pixels". You can get the `PixelRatio` of the device using the React Native API: `PixelRatio.get()`

For example, to save a 'FullHD' picture of `1080x1080`, you would do something like this:

```
const targetPixelCount = 1080; // If you want full HD pictures
const pixelRatio = PixelRatio.get(); // The pixel ratio of the device
// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio
const pixels = targetPixelCount / pixelRatio;

const result = await captureRef(this.imageContainer, {
  result: 'tmpfile',
  height: pixels,
  width: pixels,
  quality: 1,
  format: 'png',
});
```

---

# Expo Cellular


`expo-cellular` provides information about the user's cellular service provider, such as its unique identifier, cellular connection type, and whether it allows VoIP calls on its network.

## Installation

`npx expo install expo-cellular`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using native a android project manually, then you need to add `android.permission.READ_PHONE_STATE` permission to your project's AndroidManifest.xml. This permission is used for `TelephonyManager`.

android/app/src/main/AndroidManifest.xml

```
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
```

This library does not require the more risky `READ_PRIVILEGED_PHONE_STATE` permission.

## API

```
import * as Cellular from 'expo-cellular';
```

## Constants

> Deprecated Use `allowsVoipAsync()` instead.

### `Cellular.allowsVoip`

Type: `boolean | null`

Indicates if the carrier allows making VoIP calls on its network. On Android, this checks whether the system supports SIP-based VoIP API. See the [Android documentation) for more information.

On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the `boolean` value indicating the carrier’s policy regarding VoIP. If you then install a new SIM card, its VoIP policy `boolean` replaces the previous value of this property.

On web, this returns `null`.

Example

```
Cellular.allowsVoip; // true or false
```

> Deprecated Use `getCarrierNameAsync()` instead.

### `Cellular.carrier`

Type: `string | null`

The name of the user’s home cellular service provider. If the device has dual SIM cards, only the carrier for the currently active SIM card will be returned. On Android, this value is only available when the SIM state is [`SIM_STATE_READY`. Otherwise, this returns `null`.

On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the name of the carrier. If you then install a new SIM card, its carrier name replaces the previous value of this property. The value for this property is `null` if the user never configured a carrier for the device.

On web, this returns `null`.

Example

```
Cellular.carrier; // "T-Mobile" or "Verizon"
```

> Deprecated Use `getIsoCountryCodeAsync()` instead.

### `Cellular.isoCountryCode`

Type: `string | null`

The ISO country code for the user’s cellular service provider. On iOS, the value is `null` if any of the following apply:

*   The device is in airplane mode.
*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
Cellular.isoCountryCode; // "us" or "au"
```

> Deprecated Use `getMobileCountryCodeAsync()` instead.

### `Cellular.mobileCountryCode`

Type: `string | null`

The mobile country code (MCC) for the user’s current registered cellular service provider. On Android, this value is only available when SIM state is [`SIM_STATE_READY`. Otherwise, this returns `null`. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is `null` if any of the following apply:

*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
Cellular.mobileCountryCode; // "310"
```

> Deprecated Use `getMobileNetworkCodeAsync()` instead.

### `Cellular.mobileNetworkCode`

Type: `string | null`

The ISO country code for the user’s cellular service provider. On iOS, the value is `null` if any of the following apply:

*   The device is in airplane mode.
*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
Cellular.mobileNetworkCode; // "260"
```

## Hooks

### `usePermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to access the phone state. This uses both `Cellular.requestPermissionsAsync` and `Cellular.getPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Cellular.usePermissions();
```

## Methods

### `Cellular.allowsVoipAsync()`

Returns:

`[Promise<boolean | null>`

Returns if the carrier allows making VoIP calls on its network. On Android, this checks whether the system supports SIP-based VoIP API. See [here) to view more information.

On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the `boolean` value indicating the carrier’s policy regarding VoIP. If you then install a new SIM card, its VoIP policy `boolean` replaces the previous value of this property.

On web, this returns `null`.

Example

```
await Cellular.allowsVoipAsync(); // true or false
```

### `Cellular.getCarrierNameAsync()`

Returns:

`[Promise<string | null>`

Returns name of the user’s home cellular service provider. If the device has dual SIM cards, only the carrier for the currently active SIM card will be returned.

On Android, this value is only available when the SIM state is [`SIM_STATE_READY`. Otherwise, this returns `null`.

On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the name of the carrier. If you then install a new SIM card, its carrier name replaces the previous value of this property. The value for this property is `null` if the user never configured a carrier for the device.

On web, this returns `null`.

Example

```
await Cellular.getCarrierNameAsync(); // "T-Mobile" or "Verizon"
```

### `Cellular.getCellularGenerationAsync()`

Returns:

`[Promise<[CellularGeneration](#cellulargeneration)>`

Returns a promise which fulfils with a `Cellular.CellularGeneration` enum value that represents the current cellular-generation type.

You will need to check if the native permission has been accepted to obtain generation. If the permission is denied `getCellularGenerationAsync` will resolve to `Cellular.Cellular Generation.UNKNOWN`.

On web, this method uses [`navigator.connection.effectiveType` to detect the effective type of the connection using a combination of recently observed round-trip time and downlink values. See [here to view browser compatibility.

Example

```
await Cellular.getCellularGenerationAsync();
// CellularGeneration.CELLULAR_4G
```

### `Cellular.getIsoCountryCodeAsync()`

Returns:

`[Promise<string | null>`

Returns the ISO country code for the user’s cellular service provider.

On iOS, the value is `null` if any of the following apply:

*   The device is in airplane mode.
*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
await Cellular.getIsoCountryCodeAsync(); // "us" or "au"
```

### `Cellular.getMobileCountryCodeAsync()`

Returns:

`[Promise<string | null>`

Returns mobile country code (MCC) for the user’s current registered cellular service provider.

On Android, this value is only available when SIM state is [`SIM_STATE_READY`. Otherwise, this returns `null`. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is `null` if any of the following apply:

*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
await Cellular.getMobileCountryCodeAsync(); // "310"
```

### `Cellular.getMobileNetworkCodeAsync()`

Returns:

`[Promise<string | null>`

Returns the mobile network code (MNC) for the user’s current registered cellular service provider.

On Android, this value is only available when SIM state is [`SIM_STATE_READY`. Otherwise, this returns `null`. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is `null` if any of the following apply:

*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
await Cellular.getMobileNetworkCodeAsync(); // "310"
```

### `Cellular.getPermissionsAsync()`

Checks user's permissions for accessing phone state.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `Cellular.requestPermissionsAsync()`

Asks the user to grant permissions for accessing the phone state.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

## Enums

### `CellularGeneration`

Describes the current generation of the cellular connection. It is an enum with these possible values:

#### `UNKNOWN`

`CellularGeneration.UNKNOWN ＝ 0`

Either we are not currently connected to a cellular network or type could not be determined.

#### `CELLULAR_2G`

`CellularGeneration.CELLULAR_2G ＝ 1`

Currently connected to a 2G cellular network. Includes CDMA, EDGE, GPRS, and IDEN type connections.

#### `CELLULAR_3G`

`CellularGeneration.CELLULAR_3G ＝ 2`

Currently connected to a 3G cellular network. Includes EHRPD, EVDO, HSPA, HSUPA, HSDPA, HSPAP, and UTMS type connections.

#### `CELLULAR_4G`

`CellularGeneration.CELLULAR_4G ＝ 3`

Currently connected to a 4G cellular network. Includes LTE type connections.

#### `CELLULAR_5G`

`CellularGeneration.CELLULAR_5G ＝ 4`

Currently connected to a 5G cellular network. Includes NR and NRNSA type connections.

## Error codes

| Code | Description |
| --- | --- |
| ERR\_CELLULAR\_GENERATION\_UNKNOWN\_NETWORK\_TYPE | Unable to access network type or not connected to a cellular network |

## Permissions

### Android

You must add the following permissions to your app.json inside the [`expo.android.permissions` array.

| Android Permission | Description |
| --- | --- |
|
`READ_PHONE_STATE`

 |

Allows read only access to phone state, including the current cellular network information, the status of any ongoing calls, and a list of any PhoneAccounts registered on the device.

> Allows read only access to phone state, including the current cellular network information, the status of any ongoing calls, and a list of any `[PhoneAccount`s registered on the device.

 |

### iOS

_No permissions required_.

---

# Expo Checkbox


`expo-checkbox` provides a basic `boolean` input element for all platforms.

## Installation

`npx expo install expo-checkbox`

## Usage

Basic Checkbox usage

```
import Checkbox from 'expo-checkbox';
import { useState } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [isChecked, setChecked] = useState(false);

  return (
```
<View style={styles.container}>
  <View style={styles.section}>
    <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />
    <Text style={styles.paragraph}>Normal checkbox</Text>
  </View>
  <View style={styles.section}>
    <Checkbox
      style={styles.checkbox}
      value={isChecked}
      onValueChange={setChecked}
      color={isChecked ? '#4630EB' : undefined}
    />
    <Text style={styles.paragraph}>Custom colored checkbox</Text>
  </View>
  <View style={styles.section}>
    <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />
    <Text style={styles.paragraph}>Disabled checkbox</Text>
  </View>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
marginHorizontal: 16,
marginVertical: 32,
```
  },
  section: {
```
flexDirection: 'row',
alignItems: 'center',
```
  },
  paragraph: {
```
fontSize: 15,
```
  },
  checkbox: {
```
margin: 8,
```
  },
});
```

## API

```
import Checkbox from 'expo-checkbox';
```

## Component

### `Checkbox`

Type: `React.[Element<[CheckboxProps](#checkboxprops)>`

CheckboxProps

### `color`

Optional Type: `[ColorValue`

The tint or color of the checkbox. This overrides the disabled opaque style.

### `disabled`

Optional Type: `boolean`

If the checkbox is disabled, it becomes opaque and uncheckable.

### `onChange`

Optional Type: `(event: NativeSyntheticEvent<[CheckboxEvent](#checkboxevent)> | [SyntheticEvent<[HTMLInputElement, [CheckboxEvent](#checkboxevent)>) => void`

Callback that is invoked when the user presses the checkbox.

`event: NativeSyntheticEvent<[CheckboxEvent](#checkboxevent)> | [SyntheticEvent<[HTMLInputElement, [CheckboxEvent](#checkboxevent)>`

A native event containing the checkbox change.

### `onValueChange`

Optional Type: `(value: boolean) => void`

Callback that is invoked when the user presses the checkbox.

`value: boolean`

A boolean indicating the new checked state of the checkbox.

### `value`

Optional Type: `boolean` Default: `false`

Value indicating if the checkbox should be rendered as checked or not.

#### Inherited Props

*   `[ViewProps`

## Types

### `CheckboxEvent`

| Property | Type | Description |
| --- | --- | --- |
| target | `any` |
On native platforms, a `NodeHandle` for the element on which the event has occurred. On web, a DOM node on which the event has occurred.

 |
| value | `boolean` |

A boolean representing checkbox current value.

 |

---

# Expo Clipboard

`expo-clipboard` provides an interface for getting and setting Clipboard content on Android, iOS, and Web.

## Installation

`npx expo install expo-clipboard`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Clipboard

```
import { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Clipboard from 'expo-clipboard';

export default function App() {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = async () => {
```
await Clipboard.setStringAsync('hello world');
```
  };

  const fetchCopiedText = async () => {
```
const text = await Clipboard.getStringAsync();
setCopiedText(text);
```
  };

  return (
```
<View style={styles.container}>
  <Button title="Click here to copy to Clipboard" onPress={copyToClipboard} />
  <Button title="View copied text" onPress={fetchCopiedText} />
  <Text style={styles.copiedText}>{copiedText}</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
```
  },
  copiedText: {
```
marginTop: 10,
color: 'red',
```
  },
});
```

## API

```
import * as Clipboard from 'expo-clipboard';
```

> On Web, this module uses the [`AsyncClipboard` API, which might behave differently between browsers or not be fully supported. Especially on WebKit, there's an issue which makes this API unusable in asynchronous code. [Click here for more details.

## Component

### `ClipboardPasteButton`

Type: `React.Element<[ClipboardPasteButtonProps](#clipboardpastebuttonprops)>`

This component displays the `UIPasteControl` button on your screen. This allows pasting from the clipboard without requesting permission from the user.

You should only attempt to render this if `Clipboard.isPasteButtonAvailable` is `true`. This component will render nothing if it is not available, and you will get a warning in development mode (`__DEV__ === true`).

The properties of this component extend from `View`; however, you should not attempt to set `backgroundColor`, `color` or `borderRadius` with the `style` property. Apple restricts customisation of this view. Instead, you should use the backgroundColor and foregroundColor properties to set the colors of the button, the cornerStyle property to change the border radius, and the displayMode property to change the appearance of the icon and label. The word "Paste" is not editable and neither is the icon.

Make sure to attach height and width via the style props as without these styles, the button will not appear on the screen.

> See: [Apple Documentation for more details.

ClipboardPasteButtonProps

### `acceptedContentTypes`

Optional Type: `[AcceptedContentType](#acceptedcontenttype)` Default: `['plain-text', 'image']`

An array of the content types that will cause the button to become active.

> Do not include `plain-text` and `html` at the same time as this will cause all text to be treated as `html`.

### `backgroundColor`

Optional Literal type: `union`

The backgroundColor of the button. Leaving this as the default allows the color to adjust to the system theme settings.

Acceptable values are: `string` | `null`

### `cornerStyle`

Optional Literal type: `union` Default: `'capsule'`

The cornerStyle of the button.

> See: [Apple Documentation for more details.

Acceptable values are: `[CornerStyleType](#cornerstyletype)` | `null`

### `displayMode`

Optional Literal type: `union` Default: `'iconAndLabel'`

The displayMode of the button.

> See: [Apple Documentation for more details.

Acceptable values are: `[DisplayModeType](#displaymodetype)` | `null`

### `foregroundColor`

Optional Literal type: `union` Default: `'white'`

The foregroundColor of the button.

Acceptable values are: `string` | `null`

### `imageOptions`

Optional Literal type: `union`

The options to use when pasting an image from the clipboard.

Acceptable values are: `[GetImageOptions](#getimageoptions)` | `null`

### `onPress`

Type: `(data: [PasteEventPayload](#pasteeventpayload)) => void`

A callback that is called with the result of the paste action. Inspect the `type` property to determine the type of the pasted data.

Can be one of `text` or `image`.

Example

```
  onPress={(data) => {
```
if (data.type === 'image') {
  setImageData(data);
```
   } else {
```
setTextData(data);
}
```
  }}
```

### `style`

Optional Type: `StyleProp<[Omit<[ViewStyle, 'backgroundColor' | 'borderRadius' | 'color'>>`

The custom style to apply to the button. Should not include `backgroundColor`, `borderRadius` or `color` properties.

#### Inherited Props

*   `[ViewProps`

## Constants

### `isPasteButtonAvailable`

Type: `boolean`

Property that determines if the `ClipboardPasteButton` is available.

This requires the users device to be using at least iOS 16.

`true` if the component is available, and `false` otherwise.

## Methods

### `getImageAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options | `[GetImageOptions](#getimageoptions)` |
A `GetImageOptions` object to specify the desired format of the image.

 |

Gets the image from the user's clipboard and returns it in the specified format. Please note that calling this method on web will prompt the user to grant your app permission to "see text and images copied to the clipboard."

Returns:

`[Promise<[ClipboardImage](#clipboardimage) | null>`

If there was an image in the clipboard, the promise resolves to a `ClipboardImage` object containing the base64 string and metadata of the image. Otherwise, it resolves to `null`.

Example

```
const img = await Clipboard.getImageAsync({ format: 'png' });
// ...
<Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />
```

### `getStringAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[GetStringOptions](#getstringoptions)` |
Options for the clipboard content to be retrieved.

Default:`{}`

 |

Gets the content of the user's clipboard. Please note that calling this method on web will prompt the user to grant your app permission to "see text and images copied to the clipboard."

Returns:

`[Promise<string>`

A promise that resolves to the content of the clipboard.

### `getUrlAsync()`

Only for: iOS

Gets the URL from the user's clipboard.

Returns:

`[Promise<string | null>`

A promise that fulfills to the URL in the clipboard.

### `hasImageAsync()`

Returns whether the clipboard has an image content.

On web, this requires the user to grant your app permission to _"see text and images copied to the clipboard"_.

Returns:

`[Promise<boolean>`

A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.

### `hasStringAsync()`

Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).

On web, this requires the user to grant your app permission to _"see text and images copied to the clipboard"_.

Returns:

`[Promise<boolean>`

A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.

### `hasUrlAsync()`

Only for: iOS

Returns whether the clipboard has a URL content.

Returns:

`[Promise<boolean>`

A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.

### `setImageAsync(base64Image)`

| Parameter | Type | Description |
| --- | --- | --- |
| base64Image | `string` |
Image encoded as a base64 string, without MIME type.

 |

Sets an image in the user's clipboard.

Returns:

`[Promise<void>`

Example

```
const result = await ImagePicker.launchImageLibraryAsync({
  mediaTypes: ImagePicker.MediaTypeOptions.Images,
  base64: true,
});
await Clipboard.setImageAsync(result.base64);
```

> Deprecated Use `setStringAsync()` instead.

### `setString(text)`

| Parameter | Type |
| --- | --- |
| text | `string` |

Sets the content of the user's clipboard.

Returns:

`void`

On web, this returns a boolean value indicating whether or not the string was saved to the user's clipboard. On iOS and Android, nothing is returned.

### `setStringAsync(text, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| text | `string` |
The string to save to the clipboard.

 |
| options(optional) | `[SetStringOptions](#setstringoptions)` |

Options for the clipboard content to be set.

Default:`{}`

 |

Sets the content of the user's clipboard.

Returns:

`[Promise<boolean>`

On web, this returns a promise that fulfills to a boolean value indicating whether or not the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.

### `setUrlAsync(url)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
The URL to save to the clipboard.

 |

Sets a URL in the user's clipboard.

This function behaves the same as `setStringAsync()`, except that it sets the clipboard content type to be a URL. It lets your app or other apps know that the clipboard contains a URL and behave accordingly.

Returns:

`[Promise<void>`

## Event Subscriptions

### `addClipboardListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [ClipboardEvent](#clipboardevent)) => void` |
Callback to execute when listener is triggered. The callback is provided a single argument that is an object containing information about clipboard contents.

 |

Adds a listener that will fire whenever the content of the user's clipboard changes. This method is a no-op on Web.

Returns:

`[Subscription](#subscription)`

Example

```
Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {
  if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {
```
Clipboard.getStringAsync().then(content => {
  alert('Copy pasta! Here\'s the string that was copied: ' + content)
});
```
  } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {
```
alert('Yay! Clipboard contains an image');
```
  }
});
```

### `removeClipboardListener(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
The subscription to remove (created by addClipboardListener).

 |

Removes the listener added by addClipboardListener. This method is a no-op on Web.

Returns:

`void`

Example

```
const subscription = addClipboardListener(() => {
  alert('Copy pasta!');
});
removeClipboardListener(subscription);
```

## Types

### `AcceptedContentType`

Literal Type: `string`

Acceptable values are: `'plain-text'` | `'image'` | `'url'` | `'html'`

### `ClipboardEvent`

| Property | Type | Description |
| --- | --- | --- |
| content | `string` |
> Deprecated Returns empty string. Use `getStringAsync()` instead to retrieve clipboard content.

 |
| contentTypes | `[ContentType](#contenttype)` |

An array of content types that are available on the clipboard.

 |

### `ClipboardImage`

| Property | Type | Description |
| --- | --- | --- |
| data | `string` |
A Base64-encoded string of the image data. Its format is dependent on the `format` option. You can use it directly as the source of an `Image` element.

> NOTE: The string is already prepended with `data:image/png;base64,` or `data:image/jpeg;base64,` prefix.

Example

```
<Image
  source={{ uri: clipboardImage.data }}
  style={{ width: 200, height: 200 }}
/>
```

 |
| size | `{ height: number, width: number }` |

Dimensions (`width` and `height`) of the image pasted from clipboard.

 |

### `CornerStyleType`

Literal Type: `string`

Acceptable values are: `'dynamic'` | `'fixed'` | `'capsule'` | `'large'` | `'medium'` | `'small'`

### `DisplayModeType`

Literal Type: `string`

Acceptable values are: `'iconAndLabel'` | `'iconOnly'` | `'labelOnly'`

### `GetImageOptions`

| Property | Type | Description |
| --- | --- | --- |
| format | `'png' | 'jpeg'` |
The format of the clipboard image to be converted to.

 |
| jpegQuality(optional) | `number` |

Specify the quality of the returned image, between `0` and `1`. Defaults to `1` (highest quality). Applicable only when `format` is set to `jpeg`, ignored otherwise.

Default:`1`

 |

### `GetStringOptions`

| Property | Type | Description |
| --- | --- | --- |
| preferredFormat(optional) | `[StringFormat](#stringformat)` |
The target format of the clipboard string to be converted to, if possible.

Default:`StringFormat.PLAIN_TEXT`

 |

### `ImagePasteEvent`

Type: `[ClipboardImage](#clipboardimage)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| type | `'image'` |
\-

 |

### `PasteEventPayload`

Literal Type: `union`

Acceptable values are: `[TextPasteEvent](#textpasteevent)` | `[ImagePasteEvent](#imagepasteevent)`

### `SetStringOptions`

| Property | Type | Description |
| --- | --- | --- |
| inputFormat(optional) | `[StringFormat](#stringformat)` |
The input format of the provided string. Adjusting this option can help other applications interpret copied string properly.

Default:`StringFormat.PLAIN_TEXT`

 |

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

### `TextPasteEvent`

| Property | Type | Description |
| --- | --- | --- |
| text | `string` |
\-

 |
| type | `'text'` |

\-

 |

## Enums

### `ContentType`

Type used to define what type of data is stored in the clipboard.

#### `HTML`

`ContentType.HTML ＝ "html"`

#### `IMAGE`

`ContentType.IMAGE ＝ "image"`

#### `PLAIN_TEXT`

`ContentType.PLAIN_TEXT ＝ "plain-text"`

#### `URL`

Only for: iOS

`ContentType.URL ＝ "url"`

### `StringFormat`

Type used to determine string format stored in the clipboard.

#### `HTML`

`StringFormat.HTML ＝ "html"`

#### `PLAIN_TEXT`

`StringFormat.PLAIN_TEXT ＝ "plainText"`

---

# Expo Constants

`expo-constants` provides system information that remains constant throughout the lifetime of your app's installation.

## Installation

`npx expo install expo-constants`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import Constants from 'expo-constants';
```

## Interfaces

### `AndroidManifest`

| Property | Type | Description |
| --- | --- | --- |
| versionCode | `number` |
> Deprecated Use `expo-application`'s [`Application.nativeBuildVersion`.

The version code set by `android.versionCode` in app.json. The value is set to `null` in case you run your app in Expo Go.

 |

### `IOSManifest`

| Property | Type | Description |
| --- | --- | --- |
| buildNumber | `null | string` |
The build number specified in the embedded Info.plist value for `CFBundleVersion` in this app. In a standalone app, you can set this with the `ios.buildNumber` value in app.json. This may differ from the value in `Constants.expoConfig.ios.buildNumber` because the manifest can be updated, whereas this value will never change for a given native binary. The value is set to `null` in case you run your app in Expo Go.

 |
| model | `null | string` |

> Deprecated Moved to `expo-device` as [`Device.modelName`.

The human-readable model name of this device, e.g. `"iPhone 7 Plus"` if it can be determined, otherwise will be `null`.

 |
| platform | `string` |

> Deprecated Use `expo-device`'s [`Device.modelId`.

The Apple internal model identifier for this device, e.g. `iPhone1,1`.

 |
| systemVersion | `string` |

> Deprecated Use `expo-device`'s [`Device.osVersion`.

The version of iOS running on this device, e.g. `10.3`.

 |
| userInterfaceIdiom | `[UserInterfaceIdiom](#userinterfaceidiom)` |

> Deprecated Use `expo-device`'s [`Device.getDeviceTypeAsync()`.

The user interface idiom of this device, i.e. whether the app is running on an iPhone, iPad, Mac or Apple TV.

 |

### `NativeConstants`

| Property | Type | Description |
| --- | --- | --- |
| appOwnership | `null | [Expo](#expo)` |
Returns `expo` when running in Expo Go, otherwise `null`.

 |
| debugMode | `boolean` |

\-

 |
| deviceName(optional) | `string` |

A human-readable name for the device type.

 |
| deviceYearClass | `null | number` |

> Deprecated Moved to `expo-device` as [`Device.deviceYearClass`.

The [device year class of this device.

 |
| easConfig | `null | [EASConfig` |

The standard EAS config object populated when using EAS.

 |
| executionEnvironment | `[ExecutionEnvironment](#executionenvironment)` |

\-

 |
| experienceUrl | `string` |

\-

 |
| expoConfig | `null | [ExpoConfig & { hostUri: string }` |

The standard Expo config object defined in `app.json` and `app.config.js` files. For both classic and modern manifests, whether they are embedded or remote.

 |
| expoGoConfig | `null | [ExpoGoConfig` |

The standard Expo Go config object populated when running in Expo Go.

 |
| expoRuntimeVersion | `null | string` |

\-

 |
| expoVersion | `null | string` |

The version string of the Expo Go app currently running. Returns `null` in bare workflow and web.

 |
| getWebViewUserAgentAsync | `() => [Promise<null | string>` |

Gets the user agent string which would be included in requests sent by a web view running on this device. This is probably not the same user agent you might be providing in your JS `fetch` requests.

 |
| intentUri(optional) | `string` |

\-

 |
| isDetached(optional) | `boolean` |

\-

 |
| isHeadless | `boolean` |

\-

 |
| linkingUri | `string` |

\-

 |
| manifest2 | `null | [ExpoUpdatesManifest` |

Manifest for Expo apps using modern Expo Updates from a remote source, such as apps that use EAS Update. `Constants.expoConfig` should be used for accessing the Expo config object.

 |
| platform(optional) | `[PlatformManifest](#platformmanifest)` |

\-

 |
| sessionId | `string` |

A string that is unique to the current session of your app. It is different across apps and across multiple launches of the same app.

 |
| statusBarHeight | `number` |

The default status bar height for the device. Does not factor in changes when location tracking is in use or a phone call is active.

 |
| systemFonts | `string` |

A list of the system font names available on the current device.

 |
| systemVersion(optional) | `number` |

\-

 |

### `PlatformManifest`

| Property | Type | Description |
| --- | --- | --- |
| android(optional) | `[AndroidManifest](#androidmanifest)` |
\-

 |
| detach(optional) | `{ scheme: string }` |

\-

 |
| developer(optional) | `string` |

\-

 |
| hostUri(optional) | `string` |

\-

 |
| ios(optional) | `[IOSManifest](#iosmanifest)` |

\-

 |
| scheme(optional) | `string` |

\-

 |
| web(optional) | `[WebManifest](#webmanifest)` |

\-

 |

## Types

### `ClientScopingConfig`

Type: `[ClientScopingConfigForReExport`

### `EASConfig`

Type: `[ManifestsEASConfig`

### `ExpoGoConfig`

Type: `[ManifestsExpoGoConfig`

### `ExpoGoPackagerOpts`

Type: `[ExpoGoPackagerOptsForReExport`

### `Manifest`

Type: `[ExpoUpdatesManifest`

### `ManifestAsset`

Type: `[ManifestAssetForReExport`

### `ManifestExtra`

Type: `[ManifestExtraForReExport`

## Enums

### `AppOwnership`

#### `Expo`

`AppOwnership.Expo ＝ "expo"`

The experience is running inside of the Expo Go app.

### `ExecutionEnvironment`

#### `Bare`

`ExecutionEnvironment.Bare ＝ "bare"`

#### `Standalone`

`ExecutionEnvironment.Standalone ＝ "standalone"`

#### `StoreClient`

`ExecutionEnvironment.StoreClient ＝ "storeClient"`

### `UserInterfaceIdiom`

Current supported values are `handset`, `tablet`, `desktop` and `tv`. CarPlay will show up as `unsupported`.

#### `Desktop`

`UserInterfaceIdiom.Desktop ＝ "desktop"`

#### `Handset`

`UserInterfaceIdiom.Handset ＝ "handset"`

#### `Tablet`

`UserInterfaceIdiom.Tablet ＝ "tablet"`

#### `TV`

`UserInterfaceIdiom.TV ＝ "tv"`

#### `Unsupported`

`UserInterfaceIdiom.Unsupported ＝ "unsupported"`

---

# Expo Contacts

`expo-contacts` provides access to the device's system contacts, allowing you to get contact information as well as adding, editing, or removing contacts.

On iOS, contacts have a multi-layered grouping system that you can also access through this API.

## Installation

`npx expo install expo-contacts`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-contacts` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-contacts",
    {
      "contactsPermission": "Allow $(PRODUCT_NAME) to access your contacts."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `contactsPermission` | `"Allow $(PRODUCT_NAME) to access your contacts"` |
Only for: iOS

A string to set the `NSContactsUsageDescription` permission message.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) (you're using native android and ios projects manually), then you need to configure following permissions in your native projects:

*   For Android, add `android.permission.READ_CONTACTS` and `android.permission.WRITE_CONTACTS` permissions to your project's android/app/src/main/AndroidManifest.xml:
```
<uses-permission android:name="android.permission.READ_CONTACTS" />
<uses-permission android:name="android.permission.WRITE_CONTACTS" />
```
*   For iOS, add the `NSContactsUsageDescription` key to your project's ios/\[app\]/Info.plist:
```
<key>NSContactsUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your contacts</string>
```
## Usage

Basic Contacts Usage
```
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Contacts from 'expo-contacts';

export default function App() {
  useEffect(() => {
```
(async () => {
  const { status } = await Contacts.requestPermissionsAsync();
  if (status === 'granted') {
    const { data } = await Contacts.getContactsAsync({
      fields: [Contacts.Fields.Emails],
    });
```
if (data.length > 0) {
      const contact = data[0];
      console.log(contact);
    }
  }
})();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text>Contacts Module Example</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
backgroundColor: '#fff',
alignItems: 'center',
justifyContent: 'center',
```
  },
});
```
## API
```
import * as Contacts from 'expo-contacts';
```
## Methods

### `Contacts.addContactAsync(contact, containerId)`

| Parameter | Type | Description |
| --- | --- | --- |
| contact | `[Contact](#contact)` |
A contact with the changes you wish to persist. The `id` parameter will not be used.

 |
| containerId(optional) | `string` |

Only for: iOS

The container that will parent the contact.

 |

Creates a new contact and adds it to the system.

> Note: For Android users, the Expo Go app does not have the required `WRITE_CONTACTS` permission to write to Contacts. You will need to create a [development build and add permission in there manually to use this method.

Returns:

`[Promise<string>`

A promise that fulfills with ID of the new system contact.

Example
```
const contact = {
  [Contacts.Fields.FirstName]: 'Bird',
  [Contacts.Fields.LastName]: 'Man',
  [Contacts.Fields.Company]: 'Young Money',
};
const contactId = await Contacts.addContactAsync(contact);
```
### `Contacts.addExistingContactToGroupAsync(contactId, groupId)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| contactId | `string` |
ID of the contact you want to edit.

 |
| groupId | `string` |

ID for the group you want to add membership to.

 |

Add a contact as a member to a group. A contact can be a member of multiple groups.

Returns:

`[Promise<any>`

Example
```
await Contacts.addExistingContactToGroupAsync(
  '665FDBCFAE55-D614-4A15-8DC6-161A368D',
  '161A368D-D614-4A15-8DC6-665FDBCFAE55'
);
```
### `Contacts.addExistingGroupToContainerAsync(groupId, containerId)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| groupId | `string` |
The group you want to target.

 |
| containerId | `string` |

The container you want to add membership to.

 |

Add a group to a container.

Returns:

`[Promise<any>`

Example
```
await Contacts.addExistingGroupToContainerAsync(
  '161A368D-D614-4A15-8DC6-665FDBCFAE55',
  '665FDBCFAE55-D614-4A15-8DC6-161A368D'
);
```
### `Contacts.createGroupAsync(name, containerId)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| name(optional) | `string` |
Name of the new group.

 |
| containerId(optional) | `string` |

The container you to add membership to.

 |

Create a group with a name, and add it to a container. If the container is `undefined`, the default container will be targeted.

Returns:

`[Promise<string>`

A promise that fulfills with ID of the new group.

Example
```
const groupId = await Contacts.createGroupAsync('Sailor Moon');
```
### `Contacts.getContactByIdAsync(id, fields)`

| Parameter | Type | Description |
| --- | --- | --- |
| id | `string` |
The ID of a system contact.

 |
| fields(optional) | `[FieldType](#fieldtype)` |

If specified, the fields defined will be returned. When skipped, all fields will be returned.

 |

Used for gathering precise data about a contact. Returns a contact matching the given `id`.

Returns:

`[Promise<[Contact](#contact) | undefined>`

A promise that fulfills with `Contact` object with ID matching the input ID, or `undefined` if there is no match.

Example
```
const contact = await Contacts.getContactByIdAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
if (contact) {
  console.log(contact);
}
```
### `Contacts.getContactsAsync(contactQuery)`

| Parameter | Type | Description |
| --- | --- | --- |
| contactQuery(optional) | `[ContactQuery](#contactquery)` |
Object used to query contacts.

Default:`{}`

 |

Return a list of contacts that fit a given criteria. You can get all of the contacts by passing no criteria.

Returns:

`[Promise<[ContactResponse](#contactresponse)>`

A promise that fulfills with `ContactResponse` object returned from the query.

Example
```
const { data } = await Contacts.getContactsAsync({
  fields: [Contacts.Fields.Emails],
});

if (data.length > 0) {
  const contact = data[0];
  console.log(contact);
}
```
### `Contacts.getContainersAsync(containerQuery)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| containerQuery | `[ContainerQuery](#containerquery)` |
Information used to gather containers.

 |

Query a list of system containers.

Returns:

`[Promise<[Container](#container)>`

A promise that fulfills with array of containers that fit the query.

Example
```
const allContainers = await Contacts.getContainersAsync({
  contactId: '665FDBCFAE55-D614-4A15-8DC6-161A368D',
});
```
### `Contacts.getDefaultContainerIdAsync()`

Only for: iOS

Get the default container's ID.

Returns:

`[Promise<string>`

A promise that fulfills with default container ID.

Example
```
const containerId = await Contacts.getDefaultContainerIdAsync();
```
### `Contacts.getGroupsAsync(groupQuery)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| groupQuery | `[GroupQuery](#groupquery)` |
Information regarding which groups you want to get.

 |

Query and return a list of system groups.

Returns:

`[Promise<[Group](#group)>`

A promise that fulfills with array of groups that fit the query.

Example
```
const groups = await Contacts.getGroupsAsync({ groupName: 'sailor moon' });
const allGroups = await Contacts.getGroupsAsync({});
```
### `Contacts.getPagedContactsAsync(contactQuery)`

| Parameter | Type |
| --- | --- |
| contactQuery(optional) | `[ContactQuery](#contactquery)` |

Returns:

`[Promise<[ContactResponse](#contactresponse)>`

### `Contacts.getPermissionsAsync()`

Checks user's permissions for accessing contacts data.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to a [PermissionResponse](#permissionresponse) object.

### `Contacts.isAvailableAsync()`

Returns whether the Contacts API is enabled on the current device. This method does not check the app permissions.

Returns:

`[Promise<boolean>`

A promise that fulfills with a `boolean`, indicating whether the Contacts API is available on the current device. It always resolves to `false` on web.

### `Contacts.presentContactPickerAsync()`

Presents a native contact picker to select a single contact from the system. On Android, the `READ_CONTACTS` permission is required. You can obtain this permission by calling the `Contacts.requestPermissionsAsync()` method. On iOS, no permissions are required to use this method.

Returns:

`[Promise<[Contact](#contact) | null>`

A promise that fulfills with a single `Contact` object if a contact is selected or `null` if no contact is selected (when selection is canceled).

### `Contacts.presentFormAsync(contactId, contact, formOptions)`

| Parameter | Type | Description |
| --- | --- | --- |
| contactId(optional) | `null | string` |
The ID of a system contact.

 |
| contact(optional) | `null | [Contact](#contact)` |

A contact with the changes you want to persist.

 |
| formOptions(optional) | `[FormOptions](#formoptions)` |

Options for the native editor.

Default:`{}`

 |

Present a native form for manipulating contacts.

Returns:

`[Promise<any>`

Example
```
await Contacts.presentFormAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
```
### `Contacts.removeContactAsync(contactId)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| contactId | `string` |
ID of the contact you want to delete.

 |

Delete a contact from the system.

Returns:

`[Promise<any>`

Example
```
await Contacts.removeContactAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
```
### `Contacts.removeContactFromGroupAsync(contactId, groupId)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| contactId | `string` |
ID of the contact you want to remove.

 |
| groupId | `string` |

ID for the group you want to remove membership of.

 |

Remove a contact's membership from a given group. This will not delete the contact.

Returns:

`[Promise<any>`

Example
```
await Contacts.removeContactFromGroupAsync(
  '665FDBCFAE55-D614-4A15-8DC6-161A368D',
  '161A368D-D614-4A15-8DC6-665FDBCFAE55'
);
```
### `Contacts.removeGroupAsync(groupId)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| groupId | `string` |
ID of the group you want to remove.

 |

Delete a group from the device.

Returns:

`[Promise<any>`

Example
```
await Contacts.removeGroupAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
```
### `Contacts.requestPermissionsAsync()`

Asks the user to grant permissions for accessing contacts data.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to a [PermissionResponse](#permissionresponse) object.

### `Contacts.shareContactAsync(contactId, message, shareOptions)`

| Parameter | Type |
| --- | --- |
| contactId | `string` |
| message | `string` |
| shareOptions(optional) | `[ShareOptions` |

Returns:

`[Promise<any>`

### `Contacts.updateContactAsync(contact)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| contact | `[Contact](#contact)` |
A contact object including the wanted changes.

 |

Mutate the information of an existing contact. Due to an iOS bug, `nonGregorianBirthday` field cannot be modified.

> On Android, you can use `presentFormAsync` to make edits to contacts.

Returns:

`[Promise<string>`

A promise that fulfills with ID of the updated system contact if mutation was successful.

Example
```
const contact = {
  id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',
  [Contacts.Fields.FirstName]: 'Drake',
  [Contacts.Fields.Company]: 'Young Money',
};
await Contacts.updateContactAsync(contact);
```
### `Contacts.updateGroupNameAsync(groupName, groupId)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| groupName | `string` |
New name for an existing group.

 |
| groupId | `string` |

ID of the group you want to edit.

 |

Change the name of an existing group.

Returns:

`[Promise<any>`

Example
```
await Contacts.updateGroupName('Expo Friends', '161A368D-D614-4A15-8DC6-665FDBCFAE55');
```
### `Contacts.writeContactToFileAsync(contactQuery)`

| Parameter | Type | Description |
| --- | --- | --- |
| contactQuery(optional) | `[ContactQuery](#contactquery)` |
Used to query contact you want to write.

Default:`{}`

 |

Query a set of contacts and write them to a local URI that can be used for sharing.

Returns:

`[Promise<string | undefined>`

A promise that fulfills with shareable local URI, or `undefined` if there was no match.

Example
```
const localUri = await Contacts.writeContactToFileAsync({
  id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',
});
Share.share({ url: localUri, message: 'Call me!' });
```

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `Address`

| Property | Type | Description |
| --- | --- | --- |
| city(optional) | `string` |
City name.

 |
| country(optional) | `string` |

Country name

 |
| id(optional) | `string` |

Unique ID. This value will be generated by the OS.

 |
| isoCountryCode(optional) | `string` |

[Standard country code.

 |
| label | `string` |

Localized display name.

 |
| neighborhood(optional) | `string` |

Neighborhood name.

 |
| poBox(optional) | `string` |

P.O. Box.

 |
| postalCode(optional) | `string` |

Local post code.

 |
| region(optional) | `string` |

Region or state name.

 |
| street(optional) | `string` |

Street name.

 |

### `CalendarFormatType`

Literal Type: `union`

Acceptable values are: `[CalendarFormats](#calendarformats)` | `{CalendarFormats}`

### `Contact`

A set of fields that define information about a single contact entity.

| Property | Type | Description |
| --- | --- | --- |
| addresses(optional) | `[Address](#address)` |
Locations.

 |
| birthday(optional) | `[Date` |

Birthday information in Gregorian format.

 |
| company(optional) | `string` |

Organization the entity belongs to.

 |
| contactType | `[ContactType](#contacttype)` |

Denoting a person or company.

 |
| dates(optional) | `[Date` |

A labeled list of other relevant user dates in Gregorian format.

 |
| department(optional) | `string` |

Job department.

 |
| emails(optional) | `[Email](#email)` |

Email addresses.

 |
| firstName(optional) | `string` |

Given name.

 |
| id(optional) | `string` |

Immutable identifier used for querying and indexing. This value will be generated by the OS when the contact is created.

 |
| image(optional) | `[Image](#image)` |

Thumbnail image. On iOS it size is set to 320×320px, on Android it may vary.

 |
| imageAvailable(optional) | `boolean` |

Used for efficient retrieval of images.

 |
| instantMessageAddresses(optional) | `[InstantMessageAddress](#instantmessageaddress)` |

Instant messaging connections.

 |
| jobTitle(optional) | `string` |

Job description.

 |
| lastName(optional) | `string` |

Last name.

 |
| maidenName(optional) | `string` |

Maiden name.

 |
| middleName(optional) | `string` |

Middle name

 |
| name | `string` |

Full name with proper format.

 |
| namePrefix(optional) | `string` |

Dr., Mr., Mrs., and so on.

 |
| nameSuffix(optional) | `string` |

Jr., Sr., an so on.

 |
| nickname(optional) | `string` |

An alias to the proper name.

 |
| nonGregorianBirthday(optional) | `[Date` |

Only for: iOS

Birthday that doesn't conform to the Gregorian calendar format, interpreted based on the [calendar `format`](#date) setting.

 |
| note(optional) | `string` |

Additional information.

> The `note` field [requires your app to request additional entitlements. The Expo Go app does not contain those entitlements, so in order to test this feature you will need to [request the entitlement from Apple, set the [`ios.accessesContactNotes` field in app config to `true`, and [create your development build.

 |
| phoneNumbers(optional) | `[PhoneNumber](#phonenumber)` |

Phone numbers.

 |
| phoneticFirstName(optional) | `string` |

Pronunciation of the first name.

 |
| phoneticLastName(optional) | `string` |

Pronunciation of the last name.

 |
| phoneticMiddleName(optional) | `string` |

Pronunciation of the middle name.

 |
| rawImage(optional) | `[Image](#image)` |

Raw image without cropping, usually large.

 |
| relationships(optional) | `[Relationship](#relationship)` |

Names of other relevant user connections.

 |
| socialProfiles(optional) | `[SocialProfile](#socialprofile)` |

Only for: iOS

Social networks.

 |
| urlAddresses(optional) | `[UrlAddress](#urladdress)` |

Associated web URLs.

 |

### `ContactQuery`

Used to query contacts from the user's device.

| Property | Type | Description |
| --- | --- | --- |
| containerId(optional) | `string` |
Only for: iOS

Get all contacts that belong to the container matching this ID.

 |
| fields(optional) | `[FieldType](#fieldtype)` |

If specified, the defined fields will be returned. If skipped, all fields will be returned.

 |
| groupId(optional) | `string` |

Only for: iOS

Get all contacts that belong to the group matching this ID.

 |
| id(optional) | `string | string` |

Get contacts with a matching ID or array of IDs.

 |
| name(optional) | `string` |

Get all contacts whose name contains the provided string (not case-sensitive).

 |
| pageOffset(optional) | `number` |

The number of contacts to skip before gathering contacts.

 |
| pageSize(optional) | `number` |

The max number of contacts to return. If skipped or set to `0` all contacts will be returned.

 |
| rawContacts(optional) | `boolean` |

Only for: iOS

Prevent unification of contacts when gathering.

Default:`false`

 |
| sort(optional) | `[ContactSort](#contactsort)` |

Sort method used when gathering contacts.

 |

### `ContactResponse`

The return value for queried contact operations like `getContactsAsync`.

| Property | Type | Description |
| --- | --- | --- |
| data | `[Contact](#contact)` |
An array of contacts that match a particular query.

 |
| hasNextPage | `boolean` |

This will be `true` if there are more contacts to retrieve beyond what is returned.

 |
| hasPreviousPage | `boolean` |

This will be `true` if there are previous contacts that weren't retrieved due to `pageOffset` limit.

 |

### `ContactSort`

String union of `[SortTypes](#sorttypes)` values.

### `ContactType`

Literal Type: `union`

Acceptable values are: `[ContactTypes](#contacttypes)` | `{ContactTypes}`

### `Container`

| Property | Type | Description |
| --- | --- | --- |
| id | `string` |
\-

 |
| name | `string` |

\-

 |
| type | `[ContainerType](#containertype)` |

\-

 |

### `ContainerQuery`

Only for: iOS

Used to query native contact containers.

| Property | Type | Description |
| --- | --- | --- |
| contactId(optional) | `string` |
Query all the containers that parent a contact.

 |
| containerId(optional) | `string | string` |

Query all the containers that matches ID or an array od IDs.

 |
| groupId(optional) | `string` |

Query all the containers that parent a group.

 |

### `ContainerType`

Literal Type: `union`

Acceptable values are: `[ContainerTypes](#containertypes)` | `{ContainerTypes}`

### `Date`

| Property | Type | Description |
| --- | --- | --- |
| day(optional) | `number` |
Day.

 |
| format(optional) | `[CalendarFormatType](#calendarformattype)` |

Format for the input date.

 |
| id(optional) | `string` |

Unique ID. This value will be generated by the OS.

 |
| label | `string` |

Localized display name.

 |
| month(optional) | `number` |

Month - adjusted for JavaScript `Date` which starts at `0`.

 |
| year(optional) | `number` |

Year.

 |

### `Email`

| Property | Type | Description |
| --- | --- | --- |
| email(optional) | `string` |
Email address.

 |
| id(optional) | `string` |

Unique ID. This value will be generated by the OS.

 |
| isPrimary(optional) | `boolean` |

Flag signifying if it is a primary email address.

 |
| label | `string` |

Localized display name.

 |

### `FieldType`

Literal Type: `union`

Acceptable values are: `[Fields](#fields)` | `{Fields}`

### `FormOptions`

Denotes the functionality of a native contact form.

| Property | Type | Description |
| --- | --- | --- |
| allowsActions(optional) | `boolean` |
Actions like share, add, create.

 |
| allowsEditing(optional) | `boolean` |

Allows for contact mutation.

 |
| alternateName(optional) | `string` |

Used if contact doesn't have a name defined.

 |
| cancelButtonTitle(optional) | `string` |

The name of the left bar button.

 |
| displayedPropertyKeys(optional) | `[FieldType](#fieldtype)` |

The properties that will be displayed. On iOS those properties does nothing while in editing mode.

 |
| groupId(optional) | `string` |

The parent group for a new contact.

 |
| isNew(optional) | `boolean` |

Present the new contact controller. If set to `false` the unknown controller will be shown.

 |
| message(optional) | `string` |

Controller title.

 |
| preventAnimation(optional) | `boolean` |

Prevents the controller from animating in.

 |
| shouldShowLinkedContacts(optional) | `boolean` |

Show or hide the similar contacts.

 |

### `Group`

Only for: iOS

A parent to contacts. A contact can belong to multiple groups. Here are some query operations you can perform:

*   Child Contacts: `getContactsAsync({ groupId })`
*   Groups From Container: `getGroupsAsync({ containerId })`
*   Groups Named: `getContainersAsync({ groupName })`

| Property | Type | Description |
| --- | --- | --- |
| id(optional) | `string` |
The editable name of a group.

 |
| name(optional) | `string` |

Immutable id representing the group.

 |

### `GroupQuery`

Only for: iOS

Used to query native contact groups.

| Property | Type | Description |
| --- | --- | --- |
| containerId(optional) | `string` |
Query all groups that belong to a certain container.

 |
| groupId(optional) | `string` |

Query the group with a matching ID.

 |
| groupName(optional) | `string` |

Query all groups matching a name.

 |

### `Image`

Information regarding thumbnail images.

> On Android you can get dimensions using [`Image.getSize` method.

| Property | Type | Description |
| --- | --- | --- |
| base64(optional) | `string` |
Image as Base64 string.

 |
| height(optional) | `number` |

Only for: iOS

Image height

 |
| uri(optional) | `string` |

A local image URI.

> Note: If you have a remote URI, download it first using [`FileSystem.downloadAsync`.

 |
| width(optional) | `number` |

Only for: iOS

Image width.

 |

### `InstantMessageAddress`

| Property | Type | Description |
| --- | --- | --- |
| id(optional) | `string` |
Unique ID. This value will be generated by the OS.

 |
| label | `string` |

Localized display name.

 |
| localizedService(optional) | `string` |

Localized name of app.

 |
| service(optional) | `string` |

Name of instant messaging app.

 |
| username(optional) | `string` |

Username in IM app.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PhoneNumber`

| Property | Type | Description |
| --- | --- | --- |
| countryCode(optional) | `string` |
Country code.

Example

`us`

 |
| digits(optional) | `string` |

Phone number without format.

Example

`8674305`

 |
| id(optional) | `string` |

Unique ID. This value will be generated by the OS.

 |
| isPrimary(optional) | `boolean` |

Flag signifying if it is a primary phone number.

 |
| label | `string` |

Localized display name.

 |
| number(optional) | `string` |

Phone number.

 |

### `Relationship`

| Property | Type | Description |
| --- | --- | --- |
| id(optional) | `string` |
Unique ID. This value will be generated by the OS.

 |
| label | `string` |

Localized display name.

 |
| name(optional) | `string` |

Name of related contact.

 |

### `SocialProfile`

Only for: iOS

| Property | Type | Description |
| --- | --- | --- |
| id(optional) | `string` |
Unique ID. This value will be generated by the OS.

 |
| label | `string` |

Localized display name.

 |
| localizedProfile(optional) | `string` |

Localized profile name.

 |
| service(optional) | `string` |

Name of social app.

 |
| url(optional) | `string` |

Web URL.

 |
| userId(optional) | `string` |

Username ID in social app.

 |
| username(optional) | `string` |

Username in social app.

 |

### `UrlAddress`

| Property | Type | Description |
| --- | --- | --- |
| id(optional) | `string` |
Unique ID. This value will be generated by the OS.

 |
| label | `string` |

Localized display name.

 |
| url(optional) | `string` |

Web URL.

 |

## Enums

### `CalendarFormats`

This format denotes the common calendar format used to specify how a date is calculated in `nonGregorianBirthday` fields.

#### `Buddhist`

Only for: iOS

`CalendarFormats.Buddhist ＝ "buddhist"`

#### `Chinese`

Only for: iOS

`CalendarFormats.Chinese ＝ "chinese"`

#### `Coptic`

Only for: iOS

`CalendarFormats.Coptic ＝ "coptic"`

#### `EthiopicAmeteAlem`

Only for: iOS

`CalendarFormats.EthiopicAmeteAlem ＝ "ethiopicAmeteAlem"`

#### `EthiopicAmeteMihret`

Only for: iOS

`CalendarFormats.EthiopicAmeteMihret ＝ "ethiopicAmeteMihret"`

#### `Gregorian`

`CalendarFormats.Gregorian ＝ "gregorian"`

#### `Hebrew`

Only for: iOS

`CalendarFormats.Hebrew ＝ "hebrew"`

#### `Indian`

Only for: iOS

`CalendarFormats.Indian ＝ "indian"`

#### `Islamic`

Only for: iOS

`CalendarFormats.Islamic ＝ "islamic"`

#### `IslamicCivil`

Only for: iOS

`CalendarFormats.IslamicCivil ＝ "islamicCivil"`

#### `IslamicTabular`

Only for: iOS

`CalendarFormats.IslamicTabular ＝ "islamicTabular"`

#### `IslamicUmmAlQura`

Only for: iOS

`CalendarFormats.IslamicUmmAlQura ＝ "islamicUmmAlQura"`

#### `ISO8601`

Only for: iOS

`CalendarFormats.ISO8601 ＝ "iso8601"`

#### `Japanese`

Only for: iOS

`CalendarFormats.Japanese ＝ "japanese"`

#### `Persian`

Only for: iOS

`CalendarFormats.Persian ＝ "persian"`

#### `RepublicOfChina`

Only for: iOS

`CalendarFormats.RepublicOfChina ＝ "republicOfChina"`

### `ContactTypes`

#### `Company`

`ContactTypes.Company ＝ "company"`

Contact is group or company.

#### `Person`

`ContactTypes.Person ＝ "person"`

Contact is a human.

### `ContainerTypes`

Only for: iOS

#### `CardDAV`

`ContainerTypes.CardDAV ＝ "cardDAV"`

With cardDAV protocol used for sharing.

#### `Exchange`

`ContainerTypes.Exchange ＝ "exchange"`

In association with email server.

#### `Local`

`ContainerTypes.Local ＝ "local"`

A local non-iCloud container.

#### `Unassigned`

`ContainerTypes.Unassigned ＝ "unassigned"`

Unknown container.

### `Fields`

Possible fields to retrieve for a contact.

#### `Addresses`

`Fields.Addresses ＝ "addresses"`

#### `Birthday`

`Fields.Birthday ＝ "birthday"`

#### `Company`

`Fields.Company ＝ "company"`

#### `ContactType`

`Fields.ContactType ＝ "contactType"`

#### `Dates`

`Fields.Dates ＝ "dates"`

#### `Department`

`Fields.Department ＝ "department"`

#### `Emails`

`Fields.Emails ＝ "emails"`

#### `ExtraNames`

`Fields.ExtraNames ＝ "extraNames"`

#### `FirstName`

`Fields.FirstName ＝ "firstName"`

#### `ID`

`Fields.ID ＝ "id"`

#### `Image`

`Fields.Image ＝ "image"`

#### `ImageAvailable`

`Fields.ImageAvailable ＝ "imageAvailable"`

#### `InstantMessageAddresses`

`Fields.InstantMessageAddresses ＝ "instantMessageAddresses"`

#### `JobTitle`

`Fields.JobTitle ＝ "jobTitle"`

#### `LastName`

`Fields.LastName ＝ "lastName"`

#### `MaidenName`

`Fields.MaidenName ＝ "maidenName"`

#### `MiddleName`

`Fields.MiddleName ＝ "middleName"`

#### `Name`

`Fields.Name ＝ "name"`

#### `NamePrefix`

`Fields.NamePrefix ＝ "namePrefix"`

#### `NameSuffix`

`Fields.NameSuffix ＝ "nameSuffix"`

#### `Nickname`

`Fields.Nickname ＝ "nickname"`

#### `NonGregorianBirthday`

Only for: iOS

`Fields.NonGregorianBirthday ＝ "nonGregorianBirthday"`

#### `Note`

`Fields.Note ＝ "note"`

#### `PhoneNumbers`

`Fields.PhoneNumbers ＝ "phoneNumbers"`

#### `PhoneticFirstName`

`Fields.PhoneticFirstName ＝ "phoneticFirstName"`

#### `PhoneticLastName`

`Fields.PhoneticLastName ＝ "phoneticLastName"`

#### `PhoneticMiddleName`

`Fields.PhoneticMiddleName ＝ "phoneticMiddleName"`

#### `RawImage`

`Fields.RawImage ＝ "rawImage"`

#### `Relationships`

`Fields.Relationships ＝ "relationships"`

#### `SocialProfiles`

Only for: iOS

`Fields.SocialProfiles ＝ "socialProfiles"`

#### `UrlAddresses`

`Fields.UrlAddresses ＝ "urlAddresses"`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

### `SortTypes`

#### `FirstName`

`SortTypes.FirstName ＝ "firstName"`

Sort by first name in ascending order.

#### `LastName`

`SortTypes.LastName ＝ "lastName"`

Sort by last name in ascending order.

#### `None`

`SortTypes.None ＝ "none"`

No sorting should be applied.

#### `UserDefault`

Only for: Android

`SortTypes.UserDefault ＝ "userDefault"`

The user default method of sorting.

## Permissions

### Android

This library automatically adds `READ_CONTACTS` and `WRITE_CONTACTS` permissions to your app:

| Android Permission | Description |
| --- | --- |
|
`READ_CONTACTS`

 |

Allows an application to read the user's contacts data.

 |
|

`WRITE_CONTACTS`

 |

Allows an application to write the user's contacts data.

 |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSContactsUsageDescription`

 | A message that tells the user why the app is requesting access to the user’s contacts. |

---

# Expo Crypto

`expo-crypto` enables you to hash data in an equivalent manner to the Node.js core `crypto` API.

## Installation

`npx expo install expo-crypto`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic Crypto usage

```
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Crypto from 'expo-crypto';

export default function App() {
  useEffect(() => {
```
(async () => {
  const digest = await Crypto.digestStringAsync(
    Crypto.CryptoDigestAlgorithm.SHA256,
    'GitHub stars are neat 🌟'
  );
  console.log('Digest: ', digest);
  /* Some crypto operation... */
})();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text>Crypto Module Example</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
backgroundColor: '#fff',
alignItems: 'center',
justifyContent: 'center',
```
  },
});
```

## API

```
import * as Crypto from 'expo-crypto';
```

## Methods

### `Crypto.digest(algorithm, data)`

| Parameter | Type | Description |
| --- | --- | --- |
| algorithm | `[CryptoDigestAlgorithm](#cryptodigestalgorithm)` |
The cryptographic hash function to use to transform a block of data into a fixed-size output.

 |
| data | `BufferSource` |

The value that will be used to generate a digest.

 |

The `digest()` method of `Crypto` generates a digest of the supplied `TypedArray` of bytes `data` with the provided digest `algorithm`. A digest is a short fixed-length value derived from some variable-length input. Cryptographic digests should exhibit _collision-resistance_, meaning that it's very difficult to generate multiple inputs that have equal digest values. On web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown.

Returns:

`[Promise<[ArrayBuffer>`

A Promise which fulfills with an ArrayBuffer representing the hashed input.

Example

```
const array = new Uint8Array([1, 2, 3, 4, 5]);
const digest = await Crypto.digest(Crypto.CryptoDigestAlgorithm.SHA512, array);
console.log('Your digest: ' + digest);
```

### `Crypto.digestStringAsync(algorithm, data, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| algorithm | `[CryptoDigestAlgorithm](#cryptodigestalgorithm)` |
The cryptographic hash function to use to transform a block of data into a fixed-size output.

 |
| data | `string` |

The value that will be used to generate a digest.

 |
| options(optional) | `[CryptoDigestOptions](#cryptodigestoptions)` |

Format of the digest string. Defaults to: `CryptoDigestOptions.HEX`.

 |

The `digestStringAsync()` method of `Crypto` generates a digest of the supplied `data` string with the provided digest `algorithm`. A digest is a short fixed-length value derived from some variable-length input. Cryptographic digests should exhibit _collision-resistance_, meaning that it's very difficult to generate multiple inputs that have equal digest values. You can specify the returned string format as one of `CryptoEncoding`. By default, the resolved value will be formatted as a `HEX` string. On web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown.

Returns:

`[Promise<[Digest](#digest)>`

Return a Promise which fulfills with a value representing the hashed input.

Example

```
const digest = await Crypto.digestStringAsync(
  Crypto.CryptoDigestAlgorithm.SHA512,
  '🥓 Easy to Digest! 💙'
);
```

### `Crypto.getRandomBytes(byteCount)`

| Parameter | Type | Description |
| --- | --- | --- |
| byteCount | `number` |
A number within the range from `0` to `1024`. Anything else will throw a `TypeError`.

 |

Generates completely random bytes using native implementations. The `byteCount` property is a `number` indicating the number of bytes to generate in the form of a `Uint8Array`. Falls back to `Math.random` during development to prevent issues with React Native Debugger.

Returns:

`[Uint8Array`

An array of random bytes with the same length as the `byteCount`.

### `Crypto.getRandomBytesAsync(byteCount)`

| Parameter | Type | Description |
| --- | --- | --- |
| byteCount | `number` |
A number within the range from `0` to `1024`. Anything else will throw a `TypeError`.

 |

Generates completely random bytes using native implementations. The `byteCount` property is a `number` indicating the number of bytes to generate in the form of a `Uint8Array`.

Returns:

`[Promise<[Uint8Array>`

A promise that fulfills with an array of random bytes with the same length as the `byteCount`.

### `Crypto.getRandomValues<T>(typedArray)`

| Parameter | Type | Description |
| --- | --- | --- |
| typedArray | `T` |
An integer based [`TypedArray` to fill with cryptographically secure random values. It modifies the input array in place.

 |

The `getRandomValues()` method of `Crypto` fills a provided `TypedArray` with cryptographically secure random values.

Returns:

`T`

The input array filled with cryptographically secure random values.

Example

```
const byteArray = new Uint8Array(16);
Crypto.getRandomValues(byteArray);
console.log('Your lucky bytes: ' + byteArray);
```

### `Crypto.randomUUID()`

The `randomUUID()` method returns a unique identifier based on the V4 UUID spec (RFC4122). It uses cryptographically secure random values to generate the UUID.

Returns:

`string`

A string containing a newly generated UUIDv4 identifier

Example

```
const UUID = Crypto.randomUUID();
console.log('Your UUID: ' + UUID);
```

## Types

### `CryptoDigestOptions`

| Property | Type | Description |
| --- | --- | --- |
| encoding | `[CryptoEncoding](#cryptoencoding)` |
Format the digest is returned in.

 |

### `Digest`

Type: `string`

## Enums

### `CryptoDigestAlgorithm`

[`Cryptographic hash function`

#### `MD2`

Only for: iOS

`CryptoDigestAlgorithm.MD2 ＝ "MD2"`

`128` bits.

#### `MD4`

Only for: iOS

`CryptoDigestAlgorithm.MD4 ＝ "MD4"`

`128` bits.

#### `MD5`

Only for: Android, iOS

`CryptoDigestAlgorithm.MD5 ＝ "MD5"`

`128` bits.

#### `SHA1`

`CryptoDigestAlgorithm.SHA1 ＝ "SHA-1"`

`160` bits.

#### `SHA256`

`CryptoDigestAlgorithm.SHA256 ＝ "SHA-256"`

`256` bits. Collision Resistant.

#### `SHA384`

`CryptoDigestAlgorithm.SHA384 ＝ "SHA-384"`

`384` bits. Collision Resistant.

#### `SHA512`

`CryptoDigestAlgorithm.SHA512 ＝ "SHA-512"`

`512` bits. Collision Resistant.

### `CryptoEncoding`

#### `BASE64`

`CryptoEncoding.BASE64 ＝ "base64"`

Has trailing padding. Does not wrap lines. Does not have a trailing newline.

#### `HEX`

`CryptoEncoding.HEX ＝ "hex"`

## Error codes

| Code | Description |
| --- | --- |
| `ERR_CRYPTO_UNAVAILABLE` | Web Only. Access to the WebCrypto API is restricted to secure origins (localhost/https). |
| `ERR_CRYPTO_DIGEST` | An invalid encoding type provided. |

---

# DateTimePicker

A component that provides access to the system UI for date and time selection.

## Installation

`npx expo install @react-native-community/datetimepicker`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See full documentation at [`react-native-community/react-native-datetimepicker`.

---

# Expo DevClient

`expo-dev-client` adds various useful development tools to your debug builds:

*   A configurable launcher UI, so you can launch updates (such as from [PR previews) and switch between development servers without needing to recompile the native app
*   Improved debugging tools (such as support for [inspecting network requests)
*   [A powerful and extensible developer menu UI

Expo documentation refers to debug builds that include `expo-dev-client` as [development builds.

## Installation

`npx expo install expo-dev-client`

If you are installing this in an [existing React Native app, start by installing [`expo` in your project. Then, follow the instructions from [Install `expo-dev-client` in an existing React Native project.

## Configuration in app config

You can configure development client launcher using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-dev-client",
    {
      "launchMode": "most-recent"
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `launchMode` | `"most-recent"` |
Determines whether to launch the most recently opened project or navigate to the launcher screen.

*   `most-recent` - Attempt to launch directly into a previously opened project and if unable to connect, fall back to the launcher screen.
*   `launcher` - Opens the launcher screen.

 |
| `addGeneratedScheme` | `true` |

By default, `expo-dev-client` will register a custom URL scheme to open a project. Set this property to `false` to disable this scheme.

 |

## API

```
import { DevLauncher, DevMenu } from 'expo-dev-client';
```

## Methods

### `DevMenu.closeMenu()`

A method that closes development client menu when called.

Returns:

`void`

### `DevMenu.hideMenu()`

A method that hides development client menu when called.

Returns:

`void`

### `DevMenu.openMenu()`

A method that opens development client menu when called.

Returns:

`void`

### `DevMenu.registerDevMenuItems(items)`

| Parameter | Type |
| --- | --- |
| items | `[ExpoDevMenuItem](#expodevmenuitem)` |

A method that allows to specify custom entries in the development client menu.

Returns:

`[Promise<void>`

## Types

### `ExpoDevMenuItem`

An object representing the custom development client menu entry.

| Property | Type | Description |
| --- | --- | --- |
| callback | `() => void` |
Callback to fire, when user selects an item.

 |
| name | `string` |

Name of the entry, will be used as label.

 |
| shouldCollapse(optional) | `boolean` |

A boolean specifying if the menu should close after the user interaction.

Default:`false`

 |

## Methods

### `DevLauncher.isDevelopmentBuild()`

A method that returns a boolean to indicate if the current application is a development build.

Returns:

`boolean`

---

# Expo Device

`expo-device` provides access to system information about the physical device, such as its manufacturer and model.

## Installation

`npx expo install expo-device`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic Device Usage

```
import { Text, View } from 'react-native';
import * as Device from 'expo-device';

export default function App() {
  return (
```
<View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
  <Text>
    {Device.manufacturer}: {Device.modelName}
  </Text>
</View>
```
  );
}
```

## API

```
import * as Device from 'expo-device';
```

## Constants

### `Device.brand`

Only for: Android, iOS

Type: `string | null`

The device brand. The consumer-visible brand of the product/hardware. On web, this value is always `null`.

Example

```
Device.brand; // Android: "google", "xiaomi"; iOS: "Apple"; web: null
```

### `Device.designName`

Only for: Android

Type: `string | null`

The specific configuration or name of the industrial design. It represents the device's name when it was designed during manufacturing into mass production. On Android, it corresponds to [`Build.DEVICE`. On web and iOS, this value is always `null`.

Example

```
Device.designName; // Android: "kminilte"; iOS: null; web: null
```

### `Device.deviceName`

Type: `string | null`

The human-readable name of the device, which may be set by the device's user. If the device name is unavailable, particularly on web, this value is `null`.

> On iOS 16 and newer, this value will be set to generic "iPhone" until you add the correct entitlement, see [iOS Capabilities page to learn how to add one and check out [Apple documentation for more details on this change.

Example

```
Device.deviceName; // "Vivian's iPhone XS"
```

### `Device.deviceType`

Type: `[DeviceType](#devicetype) | null`

The type of the device as a `DeviceType` enum value.

On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate. If the screen diagonal length is between 3" and 6.9", the method returns `DeviceType.PHONE`. For lengths between 7" and 18", the method returns `DeviceType.TABLET`. Otherwise, the method returns `DeviceType.UNKNOWN`.

Example

```
Device.deviceType; // UNKNOWN, PHONE, TABLET, TV, DESKTOP
```

### `Device.deviceYearClass`

Type: `number | null`

The [device year class of this device. On web, this value is always `null`.

### `Device.isDevice`

Type: `boolean`

`true` if the app is running on a real device and `false` if running in a simulator or emulator. On web, this is always set to `true`.

### `Device.manufacturer`

Type: `string | null`

The actual device manufacturer of the product or hardware. This value of this field may be `null` if it cannot be determined.

To view difference between `brand` and `manufacturer` on Android see [official documentation.

Example

```
Device.manufacturer; // Android: "Google", "xiaomi"; iOS: "Apple"; web: "Google", null
```

### `Device.modelId`

Only for: iOS

Type: `any`

The internal model ID of the device. This is useful for programmatically identifying the type of device and is not a human-friendly string. On web and Android, this value is always `null`.

Example

```
Device.modelId; // iOS: "iPhone7,2"; Android: null; web: null
```

### `Device.modelName`

Type: `string | null`

The human-friendly name of the device model. This is the name that people would typically use to refer to the device rather than a programmatic model identifier. This value of this field may be `null` if it cannot be determined.

Example

```
Device.modelName; // Android: "Pixel 2"; iOS: "iPhone XS Max"; web: "iPhone", null
```

### `Device.osBuildFingerprint`

Only for: Android

Type: `string | null`

A string that uniquely identifies the build of the currently running system OS. On Android, it follows this template:

*   `$(BRAND)/$(PRODUCT)/$(DEVICE)/$(BOARD):$(VERSION.RELEASE)/$(ID)/$(VERSION.INCREMENTAL):$(TYPE)/\$(TAGS)` On web and iOS, this value is always `null`.

Example

```
Device.osBuildFingerprint;
// Android: "google/sdk_gphone_x86/generic_x86:9/PSR1.180720.075/5124027:user/release-keys";
// iOS: null; web: null
```

### `Device.osBuildId`

Type: `string | null`

The build ID of the OS that more precisely identifies the version of the OS. On Android, this corresponds to `Build.DISPLAY` (not `Build.ID`) and currently is a string as described [here. On iOS, this corresponds to `kern.osversion` and is the detailed OS version sometimes displayed next to the more human-readable version. On web, this value is always `null`.

Example

```
Device.osBuildId; // Android: "PSR1.180720.075"; iOS: "16F203"; web: null
```

### `Device.osInternalBuildId`

Type: `string | null`

The internal build ID of the OS running on the device. On Android, this corresponds to `Build.ID`. On iOS, this is the same value as `Device.osBuildId`. On web, this value is always `null`.

Example

```
Device.osInternalBuildId; // Android: "MMB29K"; iOS: "16F203"; web: null,
```

### `Device.osName`

Type: `string | null`

The name of the OS running on the device.

Example

```
Device.osName; // Android: "Android"; iOS: "iOS" or "iPadOS"; web: "iOS", "Android", "Windows"
```

### `Device.osVersion`

Type: `string | null`

The human-readable OS version string. Note that the version string may not always contain three numbers separated by dots.

Example

```
Device.osVersion; // Android: "4.0.3"; iOS: "12.3.1"; web: "11.0", "8.1.0"
```

### `Device.platformApiLevel`

Only for: Android

Type: `number | null`

The Android SDK version of the software currently running on this hardware device. This value never changes while a device is booted, but it may increase when the hardware manufacturer provides an OS update. See [here to see all possible version codes and corresponding versions. On iOS and web, this value is always `null`.

Example

```
Device.platformApiLevel; // Android: 19; iOS: null; web: null
```

### `Device.productName`

Only for: Android

Type: `string | null`

The device's overall product name chosen by the device implementer containing the development name or code name of the device. Corresponds to [`Build.PRODUCT`. On web and iOS, this value is always `null`.

Example

```
Device.productName; // Android: "kminiltexx"; iOS: null; web: null
```

### `Device.supportedCpuArchitectures`

Type: `string | null`

A list of supported processor architecture versions. The device expects the binaries it runs to be compiled for one of these architectures. This value is `null` if the supported architectures could not be determined, particularly on web.

Example

```
Device.supportedCpuArchitectures; // ['arm64 v8', 'Intel x86-64h Haswell', 'arm64-v8a', 'armeabi-v7a", 'armeabi']
```

### `Device.totalMemory`

Type: `number | null`

The device's total memory, in bytes. This is the total memory accessible to the kernel, but not necessarily to a single app. This is basically the amount of RAM the device has, not including below-kernel fixed allocations like DMA buffers, RAM for the baseband CPU, etc… On web, this value is always `null`.

Example

```
Device.totalMemory; // 17179869184
```

## Methods

### `Device.getDeviceTypeAsync()`

Checks the type of the device as a `DeviceType` enum value.

On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate. If the screen diagonal length is between 3" and 6.9", the method returns `DeviceType.PHONE`. For lengths between 7" and 18", the method returns `DeviceType.TABLET`. Otherwise, the method returns `DeviceType.UNKNOWN`.

Returns:

`[Promise<[DeviceType](#devicetype)>`

Returns a promise that resolves to a `DeviceType` enum value.

Example

```
await Device.getDeviceTypeAsync();
// DeviceType.PHONE
```

### `Device.getMaxMemoryAsync()`

Only for: Android

Returns the maximum amount of memory that the Java VM will attempt to use. If there is no inherent limit then `Number.MAX_SAFE_INTEGER` is returned.

Returns:

`[Promise<number>`

Returns a promise that resolves to the maximum available memory that the Java VM will use, in bytes.

Example

```
await Device.getMaxMemoryAsync();
// 402653184
```

### `Device.getPlatformFeaturesAsync()`

Only for: Android

Gets a list of features that are available on the system. The feature names are platform-specific. See [Android documentation) to learn more about this implementation.

Returns:

`[Promise<string>`

Returns a promise that resolves to an array of strings, each of which is a platform-specific name of a feature available on the current device. On iOS and web, the promise always resolves to an empty array.

Example

```
await Device.getPlatformFeaturesAsync();
// //   'android.software.adoptable_storage',
//   'android.software.backup',
//   'android.hardware.sensor.accelerometer',
//   'android.hardware.touchscreen',
// ]
```

### `Device.getUptimeAsync()`

Only for: Android, iOS

Gets the uptime since the last reboot of the device, in milliseconds. Android devices do not count time spent in deep sleep.

Returns:

`[Promise<number>`

Returns a promise that resolves to a `number` that represents the milliseconds since last reboot.

Example

```
await Device.getUptimeAsync();
// 4371054
```

### `Device.hasPlatformFeatureAsync(feature)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| feature | `string` |
The platform-specific name of the feature to check for on the device. You can get all available system features with `Device.getSystemFeatureAsync()`. See [Android documentation) to view acceptable feature strings.

 |

Tells if the device has a specific system feature.

Returns:

`[Promise<boolean>`

Returns a promise that resolves to a boolean value indicating whether the device has the specified system feature. On iOS and web, the promise always resolves to `false`.

Example

```
await Device.hasPlatformFeatureAsync('amazon.hardware.fire_tv');
// true or false
```

### `Device.isRootedExperimentalAsync()`

> This method is experimental and is not completely reliable. See description below.

Checks whether the device has been rooted (Android) or jailbroken (iOS). This is not completely reliable because there exist solutions to bypass root-detection on both [iOS and [Android. Further, many root-detection checks can be bypassed via reverse engineering.

*   On Android, it's implemented in a way to find all possible files paths that contain the `"su"` executable but some devices that are not rooted may also have this executable. Therefore, there's no guarantee that this method will always return correctly.
*   On iOS, [these jailbreak checks are used to detect if a device is rooted/jailbroken. However, since there are closed-sourced solutions such as [xCon that aim to hook every known method and function responsible for informing an application of a jailbroken device, this method may not reliably detect devices that have xCon or similar packages installed.
*   On web, this always resolves to `false` even if the device is rooted.

Returns:

`[Promise<boolean>`

Returns a promise that resolves to a `boolean` that specifies whether this device is rooted.

Example

```
await Device.isRootedExperimentalAsync();
// true or false
```

### `Device.isSideLoadingEnabledAsync()`

Only for: Android

Using this method requires you to [add the `REQUEST_INSTALL_PACKAGES` permission. Returns whether applications can be installed for this user via the system's [`ACTION_INSTALL_PACKAGE` mechanism rather than through the OS's default app store, like Google Play.

Returns:

`[Promise<boolean>`

Returns a promise that resolves to a `boolean` that represents whether the calling package is allowed to request package installation.

Example

```
await Device.isSideLoadingEnabledAsync();
// true or false
```

## Enums

### `DeviceType`

An enum representing the different types of devices supported by Expo.

#### `UNKNOWN`

`DeviceType.UNKNOWN ＝ 0`

An unrecognized device type.

#### `PHONE`

`DeviceType.PHONE ＝ 1`

Mobile phone handsets, typically with a touch screen and held in one hand.

#### `TABLET`

`DeviceType.TABLET ＝ 2`

Tablet computers, typically with a touch screen that is larger than a usual phone.

#### `DESKTOP`

`DeviceType.DESKTOP ＝ 3`

Desktop or laptop computers, typically with a keyboard and mouse.

#### `TV`

`DeviceType.TV ＝ 4`

Device with TV-based interfaces.

## Error codes

| Code | Description |
| --- | --- |
| ERR\_DEVICE\_ROOT\_DETECTION | Error code thrown for `isRootedExperimentalAsync`. This may be thrown if there's no read access to certain system files. |

---

# Expo DeviceMotion

`DeviceMotion` from `expo-sensors` provides access to the device motion and orientation sensors. All data is presented in terms of three axes that run through a device. According to portrait orientation: X runs from left to right, Y from bottom to top and Z perpendicularly through the screen from back to front.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `DeviceMotion` from `expo-sensor` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-sensors",
    {
      "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `motionPermission` | `"Allow $(PRODUCT_NAME) to access your device motion"` |
Only for: iOS

A string to set the `NSMotionUsageDescription` permission message.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using native ios project manually, then you need to configure `NSMotionUsageDescription` key in your native project to access `DeviceMotion` stats:

ios/\[app\]/Info.plist

```
<key>NSMotionUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your device motion</string>
```

## API

```
import { DeviceMotion } from 'expo-sensors';
```

## Constants

### `Gravity`

Type: `number`

Constant value representing standard gravitational acceleration for Earth (`9.80665` m/s^2).

## Classes

### `DeviceMotion`

Type: Class extends `[DeviceSensor<[DeviceMotionMeasurement](#devicemotionmeasurement)>`

A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type `Measurement`.

DeviceMotion Properties

### `Gravity`

Type: `number` Default: `ExponentDeviceMotion.Gravity`

Constant value representing standard gravitational acceleration for Earth (`9.80665` m/s^2).

DeviceMotion Methods

### `addListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `Listener<[DeviceMotionMeasurement](#devicemotionmeasurement)>` |
A callback that is invoked when a device motion sensor update is available. When invoked, the listener is provided a single argument that is a `DeviceMotionMeasurement` object.

 |

Subscribe for updates to the device motion sensor.

Returns:

`[Subscription](#subscription)`

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

Returns:

`number`

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

Returns:

`boolean`

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Returns whether the accelerometer is enabled on the device.

On mobile web, you must first invoke `DeviceMotion.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module. If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.

On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as `DeviceMotion` is now considered a secure API. There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.

Returns:

`[Promise<boolean>`

A promise that resolves to a `boolean` denoting the availability of device motion sensor.

### `removeAllListeners()`

Removes all registered listeners.

Returns:

`void`

### `removeSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
A subscription to remove.

 |

Removes the given subscription.

Returns:

`void`

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `setUpdateInterval(intervalMs)`

| Parameter | Type | Description |
| --- | --- | --- |
| intervalMs | `number` |
Desired interval in milliseconds between sensor updates.

> Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
>
> If you need an update interval less than 200ms, you should:
>
> *   add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [app.json `permissions` field
> *   or if you are using bare workflow, add `<uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/>` to AndroidManifest.xml.

 |

Set the sensor update interval.

Returns:

`void`

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `DeviceMotionMeasurement`

| Property | Type | Description |
| --- | --- | --- |
| acceleration | `null | { timestamp: number, x: number, y: number, z: number }` |
Device acceleration on the three axis as an object with `x`, `y`, `z` keys. Expressed in meters per second squared (m/s^2).

 |
| accelerationIncludingGravity | `{ timestamp: number, x: number, y: number, z: number }` |

Device acceleration with the effect of gravity on the three axis as an object with `x`, `y`, `z` keys. Expressed in meters per second squared (m/s^2).

 |
| interval | `number` |

Interval at which data is obtained from the native platform. Expressed in milliseconds (ms).

 |
| orientation | `[DeviceMotionOrientation](#devicemotionorientation)` |

Device orientation based on screen rotation. Value is one of:

*   `0` (portrait),
*   `90` (right landscape),
*   `180` (upside down),
*   `-90` (left landscape).

 |
| rotation | `{ alpha: number, beta: number, gamma: number, timestamp: number }` |

Device's orientation in space as an object with alpha, beta, gamma keys where alpha is for rotation around Z axis, beta for X axis rotation and gamma for Y axis rotation.

 |
| rotationRate | `null | { alpha: number, beta: number, gamma: number, timestamp: number }` |

Device's rate of rotation in space expressed in degrees per second (deg/s).

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `DeviceMotionOrientation`

#### `LeftLandscape`

`DeviceMotionOrientation.LeftLandscape ＝ -90`

#### `Portrait`

`DeviceMotionOrientation.Portrait ＝ 0`

#### `RightLandscape`

`DeviceMotionOrientation.RightLandscape ＝ 90`

#### `UpsideDown`

`DeviceMotionOrientation.UpsideDown ＝ 180`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSMotionUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s motion data. |

---

# Expo DocumentPicker

`expo-document-picker` provides access to the system's UI for selecting documents from the available providers on the user's device.

## Installation

`npx expo install expo-document-picker`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-document-picker` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.

### Example app.json with config plugin

If you want to enable [iCloud storage features, set the `expo.ios.usesIcloudStorage` key to `true` in the [app config file as specified [configuration properties.

Running [EAS Build locally will use [iOS capabilities signing to enable the required capabilities before building.

app.json

```
{
  "expo": {
```
"plugins":
    "expo-document-picker",
    {
      "iCloudContainerEnvironment": "Production"
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `iCloudContainerEnvironment` | `undefined` |
Only for: iOS

Sets the iOS `com.apple.developer.icloud-container-environment` entitlement used for AdHoc iOS builds. Possible values: `Development`, `Production`. [Learn more.

 |

Are you using this library in an existing React Native app?

Apps that don't use [EAS Build and want [iCloud storage features must [manually configure the [iCloud service with CloudKit support for their bundle identifier.

If you enable the iCloud capability through the [Apple Developer Console, then be sure to add the following entitlements in your `ios/[app]/[app].entitlements` file (where `dev.expo.my-app` if your bundle identifier):

```
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
```
<string>iCloud.dev.expo.my-app</string>
```
</array>
<key>com.apple.developer.icloud-services</key>
<array>
```
<string>CloudDocuments</string>
```
</array>
<key>com.apple.developer.ubiquity-container-identifiers</key>
<array>
```
<string>iCloud.dev.expo.my-app</string>
```
</array>
<key>com.apple.developer.ubiquity-kvstore-identifier</key>
<string>$(TeamIdentifierPrefix)dev.expo.my-app</string>
```

Apple Developer Console also requires an iCloud Container to be created. When registering the new container, you are asked to provide a description and identifier for the container. You may enter any name under the description. Under the identifier, add `iCloud.<your_bundle_identifier>` (same value used for `com.apple.developer.icloud-container-identifiers` and `com.apple.developer.ubiquity-container-identifiers` entitlements).

## Using with `expo-file-system`

When using `expo-document-picker` with [`expo-file-system`, it's not always possible for the file system to read the file immediately after the `expo-document-picker` picks it.

To allow the `expo-file-system` to read the file immediately after it is picked, you'll need to ensure that the [`copyToCacheDirectory` option is set to `true`.

## API

```
import * as DocumentPicker from 'expo-document-picker';
```

## Component

### `getDocumentAsync`

Type: `React.[Element<[DocumentPickerOptions](#documentpickeroptions)>`

Display the system UI for choosing a document. By default, the chosen file is copied to [the app's internal cache directory.

> Notes for Web: The system UI can only be shown after user activation (e.g. a `Button` press). Therefore, calling `getDocumentAsync` in `componentDidMount`, for example, will not work as intended. The `cancel` event will not be returned in the browser due to platform restrictions and inconsistencies across browsers.

## Types

### `DocumentPickerAsset`

| Property | Type | Description |
| --- | --- | --- |
| file(optional) | `[File](#file)` |
Only for: Web

`File` object for the parity with web File API.

 |
| lastModified(optional) | `number` |

Timestamp of last document modification.

 |
| mimeType(optional) | `string` |

Document MIME type.

 |
| name | `string` |

Document original name.

 |
| size(optional) | `number` |

Document size in bytes.

 |
| uri | `string` |

An URI to the local document file.

 |

### `DocumentPickerCanceledResult`

Type representing canceled pick result.

| Property | Type | Description |
| --- | --- | --- |
| assets | `null` |
Always `null` when the request was canceled.

 |
| canceled | `true` |

Always `true` when the request was canceled.

 |
| output(optional) | `null` |

Only for: Web

Always `null` when the request was canceled.

 |

### `DocumentPickerOptions`

| Property | Type | Description |
| --- | --- | --- |
| copyToCacheDirectory(optional) | `boolean` |
If `true`, the picked file is copied to [`FileSystem.CacheDirectory`, which allows other Expo APIs to read the file immediately. This may impact performance for large files, so you should consider setting this to `false` if you expect users to pick particularly large files and your app does not need immediate read access.

Default:`true`

 |
| multiple(optional) | `boolean` |

Allows multiple files to be selected from the system UI.

Default:`false`

 |
| type(optional) | `string | string` |

The [MIME type(s) of the documents that are available to be picked. It also supports wildcards like `'image/*'` to choose any image. To allow any type of document you can use `'*/*'`.

Default:`'*/*'`

 |

### `DocumentPickerResult`

Literal Type: `union`

Type representing successful and canceled document pick result.

Acceptable values are: `[DocumentPickerSuccessResult](#documentpickersuccessresult)` | `[DocumentPickerCanceledResult](#documentpickercanceledresult)`

### `DocumentPickerSuccessResult`

Type representing successful pick result.

| Property | Type | Description |
| --- | --- | --- |
| assets | `[DocumentPickerAsset](#documentpickerasset)` |
An array of picked assets.

 |
| canceled | `false` |

If asset data have been returned this should always be `false`.

 |
| output(optional) | `[FileList` |

Only for: Web

`FileList` object for the parity with web File API.

 |

---

# Expo FaceDetector

> Deprecated: This library will no longer be available from SDK 51. We recommend [`react-native-vision-camera` if you require this functionality.

`expo-face-detector` lets you use the power of the [Google's ML Kit framework to detect faces on images.

#### Known issues 

Android

Face detector does not recognize faces that aren't aligned with the interface (top of the interface matches top of the head).

## Installation

This module is not available in the [Expo Go app because it has dependencies that break builds for iOS Simulators.

You can create a [development build to work with this package.

`npx expo install expo-face-detector`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

### Settings

To configure detector's behavior modules pass a [`DetectionOptions` object which is then interpreted by this module.

### Example

You can use the following snippet to detect faces in a fast mode without detecting landmarks or whether a face is smiling.

Quick face detection

```
import { Camera } from 'expo-camera';
import * as FaceDetector from 'expo-face-detector';

const App = () => (
  <Camera
```
// other props
onFacesDetected={handleFacesDetected}
faceDetectorSettings={{
  mode: FaceDetector.FaceDetectorMode.fast,
  detectLandmarks: FaceDetector.FaceDetectorLandmarks.none,
  runClassifications: FaceDetector.FaceDetectorClassifications.none,
  minDetectionInterval: 100,
  tracking: true,
}}
```
  />
);

const handleFacesDetected = ({ faces }) => {
  console.log(faces);
};

export default App;
```

## API

```
import * as FaceDetector from 'expo-face-detector';
```

## Methods

> Deprecated If you require this functionality, we recommend using [react-native-vision-camera

### `FaceDetector.detectFacesAsync(uri, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| uri | `string` |
`file://` URI to the image.

 |
| options(optional) | `[DetectionOptions](#detectionoptions)` |

A map of detection options.

Default:`{}`

 |

Detect faces on a picture.

Returns:

`[Promise<[DetectionResult](#detectionresult)>`

Returns a Promise which fulfils with `DetectionResult` object.

## Types

### `DetectionOptions`

In order to configure detector's behavior modules pass a settings object which is then interpreted by this module.

| Property | Type | Description |
| --- | --- | --- |
| detectLandmarks(optional) | `[FaceDetectorLandmarks](#facedetectorlandmarks)` |
Whether to detect and return landmarks positions on the face (ears, eyes, mouth, cheeks, nose). Use `FaceDetector.FaceDetectorLandmarks.{all, none}`.

 |
| minDetectionInterval(optional) | `number` |

Minimal interval in milliseconds between two face detection events being submitted to JS. Use, when you expect lots of faces for long time and are afraid of JS Bridge being overloaded.

Default:`0`

 |
| mode(optional) | `[FaceDetectorMode](#facedetectormode)` |

Whether to detect faces in fast or accurate mode. Use `FaceDetector.FaceDetectorMode.{fast, accurate}`.

 |
| runClassifications(optional) | `[FaceDetectorClassifications](#facedetectorclassifications)` |

Whether to run additional classifications on detected faces (smiling probability, open eye probabilities). Use `FaceDetector.FaceDetectorClassifications.{all, none}`.

 |
| tracking(optional) | `boolean` |

Flag to enable tracking of faces between frames. If true, each face will be returned with `faceID` attribute which should be consistent across frames.

Default:`false`

 |

### `DetectionResult`

| Property | Type | Description |
| --- | --- | --- |
| faces | `[FaceFeature](#facefeature)` |
Array of faces objects.

 |
| image | `[Image](#image)` |

\-

 |

### `FaceFeature`

| Property | Type | Description |
| --- | --- | --- |
| bottomMouthPosition(optional) | `[Point](#point)` |
Position of the bottom edge of the mouth in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| bounds | `[FaceFeatureBounds](#facefeaturebounds)` |

An object containing face bounds.

 |
| faceID(optional) | `number` |

A face identifier (used for tracking, if the same face appears on consecutive frames it will have the same `faceID`).

 |
| leftCheekPosition(optional) | `[Point](#point)` |

Position of the left cheek in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| leftEarPosition(optional) | `[Point](#point)` |

Position of the left ear in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| leftEyeOpenProbability(optional) | `number` |

Probability that the left eye is open. Returned only if detection classifications property is set to `FaceDetectorClassifications.all`.

 |
| leftEyePosition(optional) | `[Point](#point)` |

Position of the left eye in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| leftMouthPosition(optional) | `[Point](#point)` |

Position of the left edge of the mouth in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| mouthPosition(optional) | `[Point](#point)` |

Position of the center of the mouth in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| noseBasePosition(optional) | `[Point](#point)` |

Position of the nose base in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| rightCheekPosition(optional) | `[Point](#point)` |

Position of the right cheek in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| rightEarPosition(optional) | `[Point](#point)` |

Position of the right ear in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| rightEyeOpenProbability(optional) | `number` |

Probability that the right eye is open. Returned only if detection classifications property is set to `FaceDetectorClassifications.all`.

 |
| rightEyePosition(optional) | `[Point](#point)` |

Position of the right eye in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| rightMouthPosition(optional) | `[Point](#point)` |

Position of the right edge of the mouth in image coordinates. Returned only if detection classifications property is set to `FaceDetectorLandmarks.all`.

 |
| rollAngle(optional) | `number` |

Roll angle of the face (bank).

 |
| smilingProbability(optional) | `number` |

Probability that the face is smiling. Returned only if detection classifications property is set to `FaceDetectorClassifications.all`.

 |
| yawAngle(optional) | `number` |

Yaw angle of the face (heading, turning head left or right).

 |

### `FaceFeatureBounds`

| Property | Type | Description |
| --- | --- | --- |
| origin | `[Point](#point)` |
Position of the top left corner of a square containing the face in image coordinates,

 |
| size | `{ height: number, width: number }` |

Size of the square containing the face in image coordinates,

 |

### `Image`

| Property | Type | Description |
| --- | --- | --- |
| height | `number` |
Height of the image in pixels.

 |
| orientation | `number` |

Orientation of the image (value conforms to the EXIF orientation tag standard).

 |
| uri | `string` |

URI of the image.

 |
| width | `number` |

Width of the image in pixels.

 |

### `Point`

| Property | Type | Description |
| --- | --- | --- |
| x | `number` |
\-

 |
| y | `number` |

\-

 |

## Enums

### `FaceDetectorClassifications`

#### `none`

`FaceDetectorClassifications.none ＝ 1`

#### `all`

`FaceDetectorClassifications.all ＝ 2`

### `FaceDetectorLandmarks`

#### `none`

`FaceDetectorLandmarks.none ＝ 1`

#### `all`

`FaceDetectorLandmarks.all ＝ 2`

### `FaceDetectorMode`

#### `fast`

`FaceDetectorMode.fast ＝ 1`

#### `accurate`

`FaceDetectorMode.accurate ＝ 2`

---

# Expo FileSystem

`expo-file-system` provides access to a file system stored locally on the device. It is also capable of uploading and downloading files from network URLs.

Diagram explaining how expo-file-system interacts with different resources

How expo-file-system works differently inside of the Expo Go app

Within Expo Go, each project has a separate file system scope and has no access to the file system of other projects.

## Installation

`npx expo install expo-file-system`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

### Downloading files

Component.js

```
const callback = downloadProgress => {
  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;
  this.setState({
```
downloadProgress: progress,
```
  });
};

const downloadResumable = FileSystem.createDownloadResumable(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4',
  {},
  callback
);

try {
  const { uri } = await downloadResumable.downloadAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

try {
  await downloadResumable.pauseAsync();
  console.log('Paused download operation, saving for future retrieval');
  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));
} catch (e) {
  console.error(e);
}

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:
const downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');
const downloadSnapshot = JSON.parse(downloadSnapshotJson);
const downloadResumable = new FileSystem.DownloadResumable(
  downloadSnapshot.url,
  downloadSnapshot.fileUri,
  downloadSnapshot.options,
  callback,
  downloadSnapshot.resumeData
);

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}
```

### Managing Giphy's

Giphy example

```
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

// Checks if gif directory exists. If not, creates it
async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
```
console.log("Gif directory doesn't exist, creating…");
await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
```
  }
}

// Downloads all gifs specified as array of IDs
export async function addMultipleGifs(gifIds: string) {
  try {
```
await ensureDirExists();
```
console.log('Downloading', gifIds.length, 'gif files…');
await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));
```
  } catch (e) {
```
console.error("Couldn't download gif files:", e);
```
  }
}

// Returns URI to our local gif file
// If our gif doesn't exist locally, it downloads it
export async function getSingleGif(gifId: string) {
  await ensureDirExists();

  const fileUri = gifFileUri(gifId);
  const fileInfo = await FileSystem.getInfoAsync(fileUri);

  if (!fileInfo.exists) {
```
console.log("Gif isn't cached locally. Downloading…");
await FileSystem.downloadAsync(gifUrl(gifId), fileUri);
```
  }

  return fileUri;
}

// Exports shareable URI - it can be shared outside your app
export async function getGifContentUri(gifId: string) {
  return FileSystem.getContentUriAsync(await getSingleGif(gifId));
}

// Deletes whole giphy directory with all its content
export async function deleteAllGifs() {
  console.log('Deleting all GIF files…');
  await FileSystem.deleteAsync(gifDir);
}
```

### Server: handling multipart requests

The simple server in Node.js, which can save uploaded images to disk:

index.js

```
const express = require('express');
const app = express();
const fs = require('fs');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

// This method will save the binary content of the request as a file.
app.patch('/binary-upload', (req, res) => {
  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));
  res.end('OK');
});

// This method will save a "photo" field from the request as a file.
app.patch('/multipart-upload', upload.single('photo'), (req, res) => {
  // You can access other HTTP parameters. They are located in the body object.
  console.log(req.body);
  res.end('OK');
});

app.listen(3000, () => {
  console.log('Working on port 3000');
});
```

## API

```
import * as FileSystem from 'expo-file-system';
```

### Directories

The API takes `file://` URIs pointing to local files on the device to identify files. Each app only has read and write access to locations under the following directories:

*   [`FileSystem.documentDirectory`
*   [`FileSystem.cacheDirectory`

So, for example, the URI to a file named `'myFile'` under `'myDirectory'` in the app's user documents directory would be `FileSystem.documentDirectory + 'myDirectory/myFile'`.

Expo APIs that create files generally operate within these directories. This includes `Audio` recordings, `Camera` photos, `ImagePicker` results, `SQLite` databases and `takeSnapShotAsync()` results. This allows their use with the `FileSystem` API.

Some `FileSystem` functions are able to read from (but not write to) other locations.

### SAF URI

A SAF URI is a URI that is compatible with the Storage Access Framework. It should look like this `content://com.android.externalstorage.*`. The easiest way to obtain such URI is by [`requestDirectoryPermissionsAsync` method.

## Constants

### `FileSystem.bundleDirectory`

Type: `null | string`

URI to the directory where assets bundled with the application are stored.

### `FileSystem.cacheDirectory`

Type: `null | string`

`file://` URI pointing to the directory where temporary files used by this app will be stored. Files stored here may be automatically deleted by the system when low on storage. Example uses are for downloaded or generated files that the app just needs for one-time usage.

### `FileSystem.documentDirectory`

Type: `null | string`

`file://` URI pointing to the directory where user documents for this app will be stored. Files stored here will remain until explicitly deleted by the app. Ends with a trailing `/`. Example uses are for files the user saves that they expect to see again.

## Classes

### `DownloadResumable`

Type: Class extends `[FileSystemCancellableNetworkTask](#filesystemcancellablenetworktask)<[DownloadProgressData](#downloadprogressdata)>`

DownloadResumable Properties

### `fileUri`

Type: `string`

DownloadResumable Methods

### `cancelAsync()`

Returns:

`[Promise<void>`

### `downloadAsync()`

Download the contents at a remote URI to a file in the app's file system.

Returns:

`[Promise<undefined | [FileSystemDownloadResult](#filesystemdownloadresult)>`

Returns a Promise that resolves to `FileSystemDownloadResult` object, or to `undefined` when task was cancelled.

### `pauseAsync()`

Pause the current download operation. `resumeData` is added to the `DownloadResumable` object after a successful pause operation. Returns an object that can be saved with `AsyncStorage` for future retrieval (the same object that is returned from calling `FileSystem.DownloadResumable.savable()`).

Returns:

`[Promise<[DownloadPauseState](#downloadpausestate)>`

Returns a Promise that resolves to `DownloadPauseState` object.

### `resumeAsync()`

Resume a paused download operation.

Returns:

`[Promise<undefined | [FileSystemDownloadResult](#filesystemdownloadresult)>`

Returns a Promise that resolves to `FileSystemDownloadResult` object, or to `undefined` when task was cancelled.

### `savable()`

Method to get the object which can be saved with `AsyncStorage` for future retrieval.

Returns:

`[DownloadPauseState](#downloadpausestate)`

Returns object in shape of `DownloadPauseState` type.

### `FileSystemCancellableNetworkTask`

FileSystemCancellableNetworkTask Methods

### `cancelAsync()`

Returns:

`[Promise<void>`

### `UploadTask`

Type: Class extends `[FileSystemCancellableNetworkTask](#filesystemcancellablenetworktask)<[UploadProgressData](#uploadprogressdata)>`

UploadTask Methods

### `cancelAsync()`

Returns:

`[Promise<void>`

### `uploadAsync()`

Returns:

`[Promise<undefined | [FileSystemUploadResult](#filesystemuploadresult)>`

## Methods

### `FileSystem.copyAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options | `[RelocatingOptions](#relocatingoptions)` |
A map of move options represented by `RelocatingOptions` type.

 |

Create a copy of a file or directory. Directories are recursively copied with all of their contents. It can be also used to copy content shared by other apps to local filesystem.

Returns:

`[Promise<void>`

### `FileSystem.createDownloadResumable(uri, fileUri, options, callback, resumeData)`

| Parameter | Type | Description |
| --- | --- | --- |
| uri | `string` |
The remote URI to download from.

 |
| fileUri | `string` |

The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced. The directory for the file must exist.

 |
| options(optional) | `[DownloadOptions](#downloadoptions)` |

A map of download options represented by `DownloadOptions` type.

 |
| callback(optional) | `[FileSystemNetworkTaskProgressCallback](#filesystemnetworktaskprogresscallback)<[DownloadProgressData](#downloadprogressdata)>` |

This function is called on each data write to update the download progress.

> Note: When the app has been moved to the background, this callback won't be fired until it's moved to the foreground.

 |
| resumeData(optional) | `string` |

The string which allows the api to resume a paused download. This is set on the `DownloadResumable` object automatically when a download is paused. When initializing a new `DownloadResumable` this should be `null`.

 |

Create a `DownloadResumable` object which can start, pause, and resume a download of contents at a remote URI to a file in the app's file system.

> Note: You need to call `downloadAsync()`, on a `DownloadResumable` instance to initiate the download. The `DownloadResumable` object has a callback that provides download progress updates. Downloads can be resumed across app restarts by using `AsyncStorage` to store the `DownloadResumable.savable()` object for later retrieval. The `savable` object contains the arguments required to initialize a new `DownloadResumable` object to resume the download after an app restart. The directory for a local file uri must exist prior to calling this function.

Returns:

`[DownloadResumable](#downloadresumable)`

### `FileSystem.createUploadTask(url, fileUri, options, callback)`

| Parameter | Type |
| --- | --- |
| url | `string` |
| fileUri | `string` |
| options(optional) | `[FileSystemUploadOptions](#filesystemuploadoptions)` |
| callback(optional) | `[FileSystemNetworkTaskProgressCallback](#filesystemnetworktaskprogresscallback)<[UploadProgressData](#uploadprogressdata)>` |

Returns:

`[UploadTask](#uploadtask)`

### `FileSystem.deleteAsync(fileUri, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| fileUri | `string` |
`file://` or [SAF](#saf-uri) URI to the file or directory.

 |
| options(optional) | `[DeletingOptions](#deletingoptions)` |

A map of write options represented by `DeletingOptions` type.

Default:`{}`

 |

Delete a file or directory. If the URI points to a directory, the directory and all its contents are recursively deleted.

Returns:

`[Promise<void>`

### `FileSystem.deleteLegacyDocumentDirectoryAndroid()`

Returns:

`[Promise<void>`

### `FileSystem.downloadAsync(uri, fileUri, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| uri | `string` |
The remote URI to download from.

 |
| fileUri | `string` |

The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced. The directory for the file must exist.

 |
| options(optional) | `[DownloadOptions](#downloadoptions)` |

A map of download options represented by `DownloadOptions` type.

Default:`{}`

 |

Download the contents at a remote URI to a file in the app's file system. The directory for a local file uri must exist prior to calling this function.

Returns:

`[Promise<[FileSystemDownloadResult](#filesystemdownloadresult)>`

Returns a Promise that resolves to a `FileSystemDownloadResult` object.

Example

```
FileSystem.downloadAsync(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4'
)
  .then(({ uri }) => {
```
console.log('Finished downloading to ', uri);
```
  })
  .catch(error => {
```
console.error(error);
```
  });
```

### `FileSystem.getContentUriAsync(fileUri)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| fileUri | `string` |
The local URI of the file. If there is no file at this URI, an exception will be thrown.

 |

Takes a `file://` URI and converts it into content URI (`content://`) so that it can be accessed by other applications outside of Expo.

Returns:

`[Promise<string>`

Returns a Promise that resolves to a `string` containing a `content://` URI pointing to the file. The URI is the same as the `fileUri` input parameter but in a different format.

Example

```
FileSystem.getContentUriAsync(uri).then(cUri => {
  console.log(cUri);
  IntentLauncher.startActivityAsync('android.intent.action.VIEW', {
```
data: cUri,
flags: 1,
```
  });
});
```

### `FileSystem.getFreeDiskStorageAsync()`

Gets the available internal disk storage size, in bytes. This returns the free space on the data partition that hosts all of the internal storage for all apps on the device.

Returns:

`[Promise<number>`

Returns a Promise that resolves to the number of bytes available on the internal disk, or JavaScript's [`MAX_SAFE_INTEGER` if the capacity is greater than 253 - 1 bytes.

### `FileSystem.getInfoAsync(fileUri, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| fileUri | `string` |
URI to the file or directory. See [supported URI schemes](#supported-uri-schemes).

 |
| options(optional) | `[InfoOptions](#infooptions)` |

A map of options represented by `InfoOptions` type.

Default:`{}`

 |

Get metadata information about a file, directory or external content/asset.

Returns:

`[Promise<[FileInfo](#fileinfo)>`

A Promise that resolves to a `FileInfo` object. If no item exists at this URI, the returned Promise resolves to `FileInfo` object in form of `{ exists: false, isDirectory: false }`.

### `FileSystem.getTotalDiskCapacityAsync()`

Gets total internal disk storage size, in bytes. This is the total capacity of the data partition that hosts all the internal storage for all apps on the device.

Returns:

`[Promise<number>`

Returns a Promise that resolves to a number that specifies the total internal disk storage capacity in bytes, or JavaScript's [`MAX_SAFE_INTEGER` if the capacity is greater than 253 - 1 bytes.

### `FileSystem.makeDirectoryAsync(fileUri, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| fileUri | `string` |
`file://` URI to the new directory to create.

 |
| options(optional) | `[MakeDirectoryOptions](#makedirectoryoptions)` |

A map of create directory options represented by `MakeDirectoryOptions` type.

Default:`{}`

 |

Create a new empty directory.

Returns:

`[Promise<void>`

### `FileSystem.moveAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options | `[RelocatingOptions](#relocatingoptions)` |
A map of move options represented by `RelocatingOptions` type.

 |

Move a file or directory to a new location.

Returns:

`[Promise<void>`

### `FileSystem.readAsStringAsync(fileUri, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| fileUri | `string` |
`file://` or [SAF](#saf-uri) URI to the file or directory.

 |
| options(optional) | `[ReadingOptions](#readingoptions)` |

A map of read options represented by `ReadingOptions` type.

Default:`{}`

 |

Read the entire contents of a file as a string. Binary will be returned in raw format, you will need to append `data:image/png;base64,` to use it as Base64.

Returns:

`[Promise<string>`

A Promise that resolves to a string containing the entire contents of the file.

### `FileSystem.readDirectoryAsync(fileUri)`

| Parameter | Type | Description |
| --- | --- | --- |
| fileUri | `string` |
`file://` URI to the directory.

 |

Enumerate the contents of a directory.

Returns:

`[Promise<string>`

A Promise that resolves to an array of strings, each containing the name of a file or directory contained in the directory at `fileUri`.

### `FileSystem.uploadAsync(url, fileUri, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
The remote URL, where the file will be sent.

 |
| fileUri | `string` |

The local URI of the file to send. The file must exist.

 |
| options(optional) | `[FileSystemUploadOptions](#filesystemuploadoptions)` |

A map of download options represented by `FileSystemUploadOptions` type.

Default:`{}`

 |

Upload the contents of the file pointed by `fileUri` to the remote url.

Returns:

`[Promise<[FileSystemUploadResult](#filesystemuploadresult)>`

Returns a Promise that resolves to `FileSystemUploadResult` object.

Example

Client

```
import * as FileSystem from 'expo-file-system';

try {
  const response = await FileSystem.uploadAsync(`http://192.168.0.1:1234/binary-upload`, fileUri, {
```
fieldName: 'file',
httpMethod: 'PATCH',
uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT,
```
  });
  console.log(JSON.stringify(response, null, 4));
} catch (error) {
  console.log(error);
}
```

Server

Please refer to the "[Server: Handling multipart requests](#server-handling-multipart-requests)" example - there is code for a simple Node.js server.

### `FileSystem.writeAsStringAsync(fileUri, contents, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| fileUri | `string` |
`file://` or [SAF](#saf-uri) URI to the file or directory.

> Note: when you're using SAF URI the file needs to exist. You can't create a new file.

 |
| contents | `string` |

The string to replace the contents of the file with.

 |
| options(optional) | `[WritingOptions](#writingoptions)` |

A map of write options represented by `WritingOptions` type.

Default:`{}`

 |

Write the entire contents of a file as a string.

Returns:

`[Promise<void>`

## Namespaces

### `StorageAccessFramework`

Only for: Android

The `StorageAccessFramework` is a namespace inside of the `expo-file-system` module, which encapsulates all functions which can be used with [SAF URIs](#saf-uri). You can read more about SAF in the [Android documentation.

Example

#### Basic Usage

```
import { StorageAccessFramework } from 'expo-file-system';

// Requests permissions for external directory
const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync();

if (permissions.granted) {
  // Gets SAF URI from response
  const uri = permissions.directoryUri;

  // Gets all files inside of selected directory
  const files = await StorageAccessFramework.readDirectoryAsync(uri);
  alert(`Files inside ${uri}:\n\n${JSON.stringify(files)}`);
}
```

#### Migrating an album

```
import * as MediaLibrary from 'expo-media-library';
import * as FileSystem from 'expo-file-system';
const { StorageAccessFramework } = FileSystem;

async function migrateAlbum(albumName: string) {
  // Gets SAF URI to the album
  const albumUri = StorageAccessFramework.getUriForDirectoryInRoot(albumName);

  // Requests permissions
  const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync(albumUri);
  if (!permissions.granted) {
```
return;
```
  }

  const permittedUri = permissions.directoryUri;
  // Checks if users selected the correct folder
  if (!permittedUri.includes(albumName)) {
```
return;
```
  }

  const mediaLibraryPermissions = await MediaLibrary.requestPermissionsAsync();
  if (!mediaLibraryPermissions.granted) {
```
return;
```
  }

  // Moves files from external storage to internal storage
  await StorageAccessFramework.moveAsync({
```
from: permittedUri,
to: FileSystem.documentDirectory!,
```
  });

  const outputDir = FileSystem.documentDirectory! + albumName;
  const migratedFiles = await FileSystem.readDirectoryAsync(outputDir);

  // Creates assets from local files
  const [newAlbumCreator, ...assets] = await Promise.all(
```
migratedFiles.map<Promise<MediaLibrary.Asset>>(
  async fileName => await MediaLibrary.createAssetAsync(outputDir + '/' + fileName)
)
```
  );

  // Album was empty
  if (!newAlbumCreator) {
```
return;
```
  }

  // Creates a new album in the scoped directory
  const newAlbum = await MediaLibrary.createAlbumAsync(albumName, newAlbumCreator, false);
  if (assets.length) {
```
await MediaLibrary.addAssetsToAlbumAsync(assets, newAlbum, false);
```
  }
}
```

StorageAccessFramework Methods

### `copyAsync(options)`

Only for: Android

| Parameter | Type |
| --- | --- |
| options | `[RelocatingOptions](#relocatingoptions)` |

Alias for `copyAsync` method.

Returns:

`[Promise<void>`

### `createFileAsync(parentUri, fileName, mimeType)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| parentUri | `string` |
The [SAF](#saf-uri) URI to the parent directory.

 |
| fileName | `string` |

The name of new file without the extension.

 |
| mimeType | `string` |

The MIME type of new file.

 |

Creates a new empty file.

Returns:

`[Promise<string>`

A Promise that resolves to a [SAF URI](#saf-uri) to the created file.

### `deleteAsync(fileUri, options)`

Only for: Android

| Parameter | Type |
| --- | --- |
| fileUri | `string` |
| options(optional) | `[DeletingOptions](#deletingoptions)` |

Alias for `deleteAsync` method.

Returns:

`[Promise<void>`

### `getUriForDirectoryInRoot(folderName)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| folderName | `string` |
The name of the folder which is located in the Android root directory.

 |

Gets a [SAF URI](#saf-uri) pointing to a folder in the Android root directory. You can use this function to get URI for `StorageAccessFramework.requestDirectoryPermissionsAsync()` when you trying to migrate an album. In that case, the name of the album is the folder name.

Returns:

`string`

Returns a [SAF URI](#saf-uri) to a folder.

### `makeDirectoryAsync(parentUri, dirName)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| parentUri | `string` |
The [SAF](#saf-uri) URI to the parent directory.

 |
| dirName | `string` |

The name of new directory.

 |

Creates a new empty directory.

Returns:

`[Promise<string>`

A Promise that resolves to a [SAF URI](#saf-uri) to the created directory.

### `moveAsync(options)`

Only for: Android

| Parameter | Type |
| --- | --- |
| options | `[RelocatingOptions](#relocatingoptions)` |

Alias for `moveAsync` method.

Returns:

`[Promise<void>`

### `readAsStringAsync(fileUri, options)`

Only for: Android

| Parameter | Type |
| --- | --- |
| fileUri | `string` |
| options(optional) | `[ReadingOptions](#readingoptions)` |

Alias for `readAsStringAsync` method.

Returns:

`[Promise<string>`

### `readDirectoryAsync(dirUri)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| dirUri | `string` |
[SAF](#saf-uri) URI to the directory.

 |

Enumerate the contents of a directory.

Returns:

`[Promise<string>`

A Promise that resolves to an array of strings, each containing the full [SAF URI](#saf-uri) of a file or directory contained in the directory at `fileUri`.

### `requestDirectoryPermissionsAsync(initialFileUrl)`

Only for: Android 11+

| Parameter | Type | Description |
| --- | --- | --- |
| initialFileUrl(optional) | `null | string` |
The [SAF URI](#saf-uri) of the directory that the file picker should display when it first loads. If URI is incorrect or points to a non-existing folder, it's ignored.

Default:`null`

 |

Allows users to select a specific directory, granting your app access to all of the files and sub-directories within that directory.

Returns:

`[Promise<[FileSystemRequestDirectoryPermissionsResult](#filesystemrequestdirectorypermissionsresult)>`

Returns a Promise that resolves to `FileSystemRequestDirectoryPermissionsResult` object.

### `writeAsStringAsync(fileUri, contents, options)`

Only for: Android

| Parameter | Type |
| --- | --- |
| fileUri | `string` |
| contents | `string` |
| options(optional) | `[WritingOptions](#writingoptions)` |

Alias for `writeAsStringAsync` method.

Returns:

`[Promise<void>`

## Types

### `DeletingOptions`

| Property | Type | Description |
| --- | --- | --- |
| idempotent(optional) | `boolean` |
If `true`, don't throw an error if there is no file or directory at this URI.

Default:`false`

 |

### `DownloadOptions`

| Property | Type | Description |
| --- | --- | --- |
| cache(optional) | `boolean` |
\-

 |
| headers(optional) | `Record<string, string>` |

An object containing all the HTTP header fields and their values for the download network request. The keys and values of the object are the header names and values respectively.

 |
| md5(optional) | `boolean` |

If `true`, include the MD5 hash of the file in the returned object. Provided for convenience since it is common to check the integrity of a file immediately after downloading.

Default:`false`

 |
| sessionType(optional) | `[FileSystemSessionType](#filesystemsessiontype)` |

Only for: iOS

A session type. Determines if tasks can be handled in the background. On Android, sessions always work in the background and you can't change it.

Default:`FileSystemSessionType.BACKGROUND`

 |

### `DownloadPauseState`

| Property | Type | Description |
| --- | --- | --- |
| fileUri | `string` |
The local URI of the file to download to. If there is no file at this URI, a new one is created. If there is a file at this URI, its contents are replaced.

 |
| options | `[DownloadOptions](#downloadoptions)` |

Object representing the file download options.

 |
| resumeData(optional) | `string` |

The string which allows the API to resume a paused download.

 |
| url | `string` |

The remote URI to download from.

 |

> Deprecated use `FileSystemNetworkTaskProgressCallback<DownloadProgressData>` instead.

### `DownloadProgressCallback`

Type: `[FileSystemNetworkTaskProgressCallback](#filesystemnetworktaskprogresscallback)<[DownloadProgressData](#downloadprogressdata)>`

### `DownloadProgressData`

| Property | Type | Description |
| --- | --- | --- |
| totalBytesExpectedToWrite | `number` |
The total bytes expected to be written by the download operation. A value of `-1` means that the server did not return the `Content-Length` header and the total size is unknown. Without this header, you won't be able to track the download progress.

 |
| totalBytesWritten | `number` |

The total bytes written by the download operation.

 |

> Deprecated Use `FileSystemDownloadResult` instead.

### `DownloadResult`

Type: `[FileSystemDownloadResult](#filesystemdownloadresult)`

### `FileInfo`

Type: `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| exists | `true` |
Signifies that the requested file exist.

 |
| isDirectory | `boolean` |

Boolean set to `true` if this is a directory and `false` if it is a file.

 |
| md5(optional) | `string` |

Present if the `md5` option was truthy. Contains the MD5 hash of the file.

 |
| modificationTime | `number` |

The last modification time of the file expressed in seconds since epoch.

 |
| size | `number` |

The size of the file in bytes. If operating on a source such as an iCloud file, only present if the `size` option was truthy.

 |
| uri | `string` |

A `file://` URI pointing to the file. This is the same as the `fileUri` input parameter.

 |

Or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| exists | `false` |
\-

 |
| isDirectory | `false` |

\-

 |
| uri | `string` |

\-

 |

### `FileSystemAcceptedUploadHttpMethod`

Literal Type: `string`

Acceptable values are: `'POST'` | `'PUT'` | `'PATCH'`

### `FileSystemDownloadResult`

Type: `[FileSystemHttpResult](#filesystemhttpresult)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| md5(optional) | `string` |
Present if the `md5` option was truthy. Contains the MD5 hash of the file.

 |
| uri | `string` |

A `file://` URI pointing to the file. This is the same as the `fileUri` input parameter.

 |

### `FileSystemHttpResult`

| Property | Type | Description |
| --- | --- | --- |
| headers | `Record<string, string>` |
An object containing all the HTTP response header fields and their values for the download network request. The keys and values of the object are the header names and values respectively.

 |
| mimeType | `string | null` |

\-

 |
| status | `number` |

The HTTP response status code for the download network request.

 |

### `FileSystemNetworkTaskProgressCallback(data)`

| Parameter | Type |
| --- | --- |
| data | `T` |

Returns:

`void`

### `FileSystemRequestDirectoryPermissionsResult`

Type: `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| granted | `false` |
\-

 |

Or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| directoryUri | `string` |
The [SAF URI](#saf-uri) to the user's selected directory. Available only if permissions were granted.

 |
| granted | `true` |

\-

 |

### `FileSystemUploadOptions`

Type: `[UploadOptionsBinary](#uploadoptionsbinary) | [UploadOptionsMultipart](#uploadoptionsmultipart)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| headers(optional) | `Record<string, string>` |
An object containing all the HTTP header fields and their values for the upload network request. The keys and values of the object are the header names and values respectively.

 |
| httpMethod(optional) | `[FileSystemAcceptedUploadHttpMethod](#filesystemaccepteduploadhttpmethod)` |

The request method.

Default:`FileSystemAcceptedUploadHttpMethod.POST`

 |
| sessionType(optional) | `[FileSystemSessionType](#filesystemsessiontype)` |

Only for: iOS

A session type. Determines if tasks can be handled in the background. On Android, sessions always work in the background and you can't change it.

Default:`FileSystemSessionType.BACKGROUND`

 |

### `FileSystemUploadResult`

Type: `[FileSystemHttpResult](#filesystemhttpresult)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| body | `string` |
The body of the server response.

 |

### `InfoOptions`

| Property | Type | Description |
| --- | --- | --- |
| md5(optional) | `boolean` |
Whether to return the MD5 hash of the file.

Default:`false`

 |
| size(optional) | `boolean` |

Explicitly specify that the file size should be included. For example, skipping this can prevent downloading the file if it's stored in iCloud. The size is always returned for `file://` locations.

 |

### `MakeDirectoryOptions`

| Property | Type | Description |
| --- | --- | --- |
| intermediates(optional) | `boolean` |
If `true`, don't throw an error if there is no file or directory at this URI.

Default:`false`

 |

### `ProgressEvent`

| Property | Type | Description |
| --- | --- | --- |
| data | `T` |
\-

 |
| uuid | `string` |

\-

 |

### `ReadingOptions`

| Property | Type | Description |
| --- | --- | --- |
| encoding(optional) | `[EncodingType](#encodingtype) | 'utf8' | 'base64'` |
The encoding format to use when reading the file.

Default:`EncodingType.UTF8`

 |
| length(optional) | `number` |

Optional number of bytes to read. This option is only used when `encoding: FileSystem.EncodingType.Base64` and `position` is defined.

 |
| position(optional) | `number` |

Optional number of bytes to skip. This option is only used when `encoding: FileSystem.EncodingType.Base64` and `length` is defined.

 |

### `RelocatingOptions`

| Property | Type | Description |
| --- | --- | --- |
| from | `string` |
URI or [SAF](#saf-uri) URI to the asset, file, or directory. See [supported URI schemes](#supported-uri-schemes-1).

 |
| to | `string` |

`file://` URI to the file or directory which should be its new location.

 |

### `UploadOptionsBinary`

Upload options when upload type is set to binary.

| Property | Type | Description |
| --- | --- | --- |
| uploadType(optional) | `[FileSystemUploadType](#filesystemuploadtype)` |
Upload type determines how the file will be sent to the server. Value will be `FileSystemUploadType.BINARY_CONTENT`.

 |

### `UploadOptionsMultipart`

Upload options when upload type is set to multipart.

| Property | Type | Description |
| --- | --- | --- |
| fieldName(optional) | `string` |
The name of the field which will hold uploaded file. Defaults to the file name without an extension.

 |
| mimeType(optional) | `string` |

The MIME type of the provided file. If not provided, the module will try to guess it based on the extension.

 |
| parameters(optional) | `Record<string, string>` |

Additional form properties. They will be located in the request body.

 |
| uploadType | `[FileSystemUploadType](#filesystemuploadtype)` |

Upload type determines how the file will be sent to the server. Value will be `FileSystemUploadType.MULTIPART`.

 |

### `UploadProgressData`

| Property | Type | Description |
| --- | --- | --- |
| totalBytesExpectedToSend | `number` |
The total bytes expected to be sent by the upload operation.

 |
| totalBytesSent | `number` |

The total bytes sent by the upload operation.

 |

### `WritingOptions`

| Property | Type | Description |
| --- | --- | --- |
| encoding(optional) | `[EncodingType](#encodingtype) | 'utf8' | 'base64'` |
The encoding format to use when writing the file.

Default:`FileSystem.EncodingType.UTF8`

 |

## Enums

### `EncodingType`

These values can be used to define how file system data is read / written.

#### `Base64`

`EncodingType.Base64 ＝ "base64"`

Binary, radix-64 representation.

#### `UTF8`

`EncodingType.UTF8 ＝ "utf8"`

Standard encoding format.

### `FileSystemSessionType`

Only for: iOS

These values can be used to define how sessions work on iOS.

#### `BACKGROUND`

`FileSystemSessionType.BACKGROUND ＝ 0`

Using this mode means that the downloading/uploading session on the native side will work even if the application is moved to background. If the task completes while the application is in background, the Promise will be either resolved immediately or (if the application execution has already been stopped) once the app is moved to foreground again.

> Note: The background session doesn't fail if the server or your connection is down. Rather, it continues retrying until the task succeeds or is canceled manually.

#### `FOREGROUND`

`FileSystemSessionType.FOREGROUND ＝ 1`

Using this mode means that downloading/uploading session on the native side will be terminated once the application becomes inactive (e.g. when it goes to background). Bringing the application to foreground again would trigger Promise rejection.

### `FileSystemUploadType`

#### `BINARY_CONTENT`

`FileSystemUploadType.BINARY_CONTENT ＝ 0`

The file will be sent as a request's body. The request can't contain additional data.

#### `MULTIPART`

`FileSystemUploadType.MULTIPART ＝ 1`

An [RFC 2387-compliant request body. The provided file will be encoded into HTTP request. This request can contain additional data represented by `UploadOptionsMultipart` type.

## Supported URI schemes

In this table, you can see what type of URI can be handled by each method. For example, if you have an URI, which begins with `content://`, you cannot use `FileSystem.readAsStringAsync()`, but you can use `FileSystem.copyAsync()` which supports this scheme.

| Method name | Android | iOS |
| --- | --- | --- |
| `getInfoAsync` | `file:///`,
`content://`,
`asset://`,
no scheme | `file://`,
`ph://`,
`assets-library://` |
| `readAsStringAsync` | `file:///`,
`asset://`,
[SAF URI | `file://` |
| `writeAsStringAsync` | `file:///`,
[SAF URI | `file://` |
| `deleteAsync` | `file:///`,
[SAF URI | `file://` |
| `moveAsync` | Source:
`file:///`,
[SAF URI

Destination:
`file://` | Source:
`file://`

Destination:
`file://` |
| `copyAsync` | Source:
`file:///`,
`content://`,
`asset://`,
[SAF URI,
no scheme

Destination:
`file://` | Source:
`file://`,
`ph://`,
`assets-library://`

Destination:
`file://` |
| `makeDirectoryAsync` | `file:///` | `file://` |
| `readDirectoryAsync` | `file:///` | `file://` |
| `downloadAsync` | Source:
`http://`,
`https://`

Destination:
`file:///` | Source:
`http://`,
`https://`

Destination:
`file://` |
| `uploadAsync` | Source:
`file:///`

Destination:
`http://`
`https://` | Source:
`file://`

Destination:
`http://`
`https://` |
| `createDownloadResumable` | Source:
`http://`,
`https://`

Destination:
`file:///` | Source:
`http://`,
`https://`

Destination:
`file://` |

> On Android no scheme defaults to a bundled resource.

## Permissions

### Android

The following permissions are added automatically through this library's AndroidManifest.xml:

| Android Permission | Description |
| --- | --- |
|
`READ_EXTERNAL_STORAGE`

 |

Allows an application to read from external storage.

 |
|

`WRITE_EXTERNAL_STORAGE`

 |

Allows an application to write to external storage.

 |
|

`INTERNET`

 |

Allows applications to open network sockets.

 |

### iOS

_No permissions required_.

---

# FlashList

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

`@shopify/flash-list` is a "Fast and performant React Native list" component that is a drop-in replacement for React Native's `<FlatList>` component. It "recycles components under the hood to maximize performance."

## Installation

`npx expo install @shopify/flash-list`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See full documentation at [https://shopify.github.io/flash-list/.

---

# Expo Font

`expo-font` allows loading fonts from the web and using them in React Native components. See more detailed usage information in the [Fonts guide.

## Installation

`npx expo install expo-font`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-font` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-font",
    {
      "fonts": ["path/to/file.ttf"]
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `fonts` | `` |
An array of font files to link to the native project. The paths should be relative to the project root, and the file names will become the font family names.

 |

Are you using this library in an existing React Native app?

*   Android: Copy font files to android/app/src/main/assets/fonts.
*   iOS: See [Adding a Custom Font to Your App in the Apple Developer documentation.

## Usage

Minimal example of using a custom font

```
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';
import { Text, View, StyleSheet } from 'react-native';

SplashScreen.preventAutoHideAsync();

export default function App() {
  const [loaded, error] = useFonts({
```
'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
```
  });

  useEffect(() => {
```
if (loaded || error) {
  SplashScreen.hideAsync();
}
```
  }, [loaded, error]);

  if (!loaded && !error) {
```
return null;
```
  }

  return (
```
<View style={styles.container}>
  <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>
  <Text style={{ fontSize: 30 }}>Platform Default</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
```
  },
});
```

## API

```
import * as Font from 'expo-font';
```

## Hooks

### `useFonts(map)`

| Parameter | Type | Description |
| --- | --- | --- |
| map | `string | Record<string, [FontSource](#fontsource)>` |
A map of `fontFamily`s to `FontSource`s. After loading the font you can use the key in the `fontFamily` style prop of a `Text` element.

 |

```
const [loaded, error] = useFonts({ ... });
```

Load a map of fonts with `loadAsync`. This returns a `boolean` if the fonts are loaded and ready to use. It also returns an error if something went wrong, to use in development.

> Note, the fonts are not "reloaded" when you dynamically change the font map.

Returns:

`[boolean, null | [Error]`

*   loaded (`boolean`) - A boolean to detect if the font for `fontFamily` has finished loading.
*   error (`Error | null`) - An error encountered when loading the fonts.

## Methods

### `isLoaded(fontFamily)`

| Parameter | Type | Description |
| --- | --- | --- |
| fontFamily | `string` |
The name used to load the `FontResource`.

 |

Synchronously detect if the font for `fontFamily` has finished loading.

Returns:

`boolean`

Returns `true` if the font has fully loaded.

### `isLoading(fontFamily)`

| Parameter | Type | Description |
| --- | --- | --- |
| fontFamily | `string` |
The name used to load the `FontResource`.

 |

Synchronously detect if the font for `fontFamily` is still being loaded.

Returns:

`boolean`

Returns `true` if the font is still loading.

### `loadAsync(fontFamilyOrFontMap, source)`

| Parameter | Type | Description |
| --- | --- | --- |
| fontFamilyOrFontMap | `string | Record<string, [FontSource](#fontsource)>` |
string or map of values that can be used as the [`fontFamily` style prop with React Native Text elements.

 |
| source(optional) | `[FontSource](#fontsource)` |

the font asset that should be loaded into the `fontFamily` namespace.

 |

Highly efficient method for loading fonts from static or remote resources which can then be used with the platform's native text elements. In the browser this generates a `@font-face` block in a shared style sheet for fonts. No CSS is needed to use this method.

Returns:

`[Promise<void>`

Returns a promise that fulfils when the font has loaded. Often you may want to wrap the method in a `try/catch/finally` to ensure the app continues if the font fails to load.

### `processFontFamily(fontFamily)`

| Parameter | Type | Description |
| --- | --- | --- |
| fontFamily | `null | string` |
Name of font to process.

 |

Used to transform font family names to the scoped name. This does not need to be called in standalone or bare apps but it will return unscoped font family names if it is called in those contexts.

Returns:

`string | null`

Returns a name processed for use with the [current workflow.

### `unloadAllAsync()`

Unloads all the custom fonts. This is used for testing.

Returns:

`[Promise<void>`

### `unloadAsync(fontFamilyOrFontMap, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| fontFamilyOrFontMap | `string | Record<string, [UnloadFontOptions](#unloadfontoptions)>` |
The name or names of the custom fonts that will be unloaded.

 |
| options(optional) | `[UnloadFontOptions](#unloadfontoptions)` |

When `fontFamilyOrFontMap` is a string, this should be the font source used to load the custom font originally.

 |

Unload custom fonts matching the `fontFamily`s and display values provided. Because fonts are automatically unloaded on every platform this is mostly used for testing.

Returns:

`[Promise<void>`

## Types

### `FontResource`

An object used to dictate the resource that is loaded into the provided font namespace when used with `loadAsync`.

| Property | Type | Description |
| --- | --- | --- |
| default(optional) | `string` |
\-

 |
| display(optional) | `[FontDisplay](#fontdisplay)` |

Only for: Web

Sets the `font-display` property for a given typeface in the browser.

 |
| uri(optional) | `string | number` |

\-

 |

### `FontSource`

Literal Type: `union`

The different types of assets you can provide to the `loadAsync()` function. A font source can be a URI, a module ID, or an Expo Asset.

Acceptable values are: `string` | `number` | `[Asset` | `[FontResource](#fontresource)`

### `UnloadFontOptions`

Type: `[Pick<[FontResource](#fontresource), 'display'>`

Object used to query fonts for unloading.

## Enums

### `FontDisplay`

Only for: Web

Sets the [font-display for a given typeface. The default font value on web is `FontDisplay.AUTO`. Even though setting the `fontDisplay` does nothing on native platforms, the default behavior emulates `FontDisplay.SWAP` on flagship devices like iOS, Samsung, Pixel, etc. Default functionality varies on One Plus devices. In the browser this value is set in the generated `@font-face` CSS block and not as a style property meaning you cannot dynamically change this value based on the element it's used in.

#### `AUTO`

`FontDisplay.AUTO ＝ "auto"`

(Default) The font display strategy is defined by the user agent or platform. This generally defaults to the text being invisible until the font is loaded. Good for buttons or banners that require a specific treatment.

#### `BLOCK`

`FontDisplay.BLOCK ＝ "block"`

The text will be invisible until the font has loaded. If the font fails to load then nothing will appear - it's best to turn this off when debugging missing text.

#### `FALLBACK`

`FontDisplay.FALLBACK ＝ "fallback"`

Splits the behavior between `SWAP` and `BLOCK`. There will be a [100ms timeout where the text with a custom font is invisible, after that the text will either swap to the styled text or it'll show the unstyled text and continue to load the custom font. This is good for buttons that need a custom font but should also be quickly available to screen-readers.

#### `OPTIONAL`

`FontDisplay.OPTIONAL ＝ "optional"`

This works almost identically to `FALLBACK`, the only difference is that the browser will decide to load the font based on slow connection speed or critical resource demand.

#### `SWAP`

`FontDisplay.SWAP ＝ "swap"`

Fallback text is rendered immediately with a default font while the desired font is loaded. This is good for making the content appear to load instantly and is usually preferred.

## Error codes

| Code | Description |
| --- | --- |
| ERR\_FONT\_API | If the arguments passed to `loadAsync` are invalid. |
| ERR\_FONT\_SOURCE | The provided resource was of an incorrect type. |
| ERR\_WEB\_ENVIRONMENT | The browser's `document` element doesn't support injecting fonts. |
| ERR\_DOWNLOAD | Failed to download the provided resource. |
| ERR\_FONT\_FAMILY | Invalid font family name was provided. |
| ERR\_UNLOAD | Attempting to unload fonts that haven't finished loading yet. |

---

# React Native Gesture Handler

`react-native-gesture-handler` is a library for handling complex gestures. From it's README:

> This library provides an API that exposes mobile platform-specific native capabilities of touch and gesture handling and recognition. It allows for defining complex gesture handling and recognition logic that runs 100% in the native thread and is therefore deterministic.

## Installation

`npx expo install react-native-gesture-handler`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

Read the [`react-native-gesture-handler` documentation for more information on the API and usage.

---

# Expo GLView

`expo-gl` provides a `View` that acts as an OpenGL ES render target, useful for rendering 2D and 3D graphics. On mounting, an OpenGL ES context is created. Its drawing buffer is presented as the contents of the `View` every frame.

## Installation

`npx expo install expo-gl`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic GL usage

```
import { View } from 'react-native';
import { GLView } from 'expo-gl';

export default function App() {
  return (
```
<View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
  <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />
</View>
```
  );
}

function onContextCreate(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  gl.clearColor(0, 1, 1, 1);

  // Create vertex shader (shape & position)
  const vert = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(
```
vert,
`
void main(void) {
  gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
  gl_PointSize = 150.0;
}
```
  `
  );
  gl.compileShader(vert);

  // Create fragment shader (color)
  const frag = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(
```
frag,
`
void main(void) {
  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
}
```
  `
  );
  gl.compileShader(frag);

  // Link together into a program
  const program = gl.createProgram();
  gl.attachShader(program, vert);
  gl.attachShader(program, frag);
  gl.linkProgram(program);
  gl.useProgram(program);

  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.drawArrays(gl.POINTS, 0, 1);

  gl.flush();
  gl.endFrameEXP();
}
```

## High-level APIs

Since the WebGL API is quite low-level, it can be helpful to use higher-level graphics APIs rendering through a `GLView` underneath. The following libraries integrate popular graphics APIs:

*   [expo-three for [three.js
*   [expo-processing for [processing.js](http://processingjs.org)

Any WebGL-supporting library that expects a [WebGLRenderingContext could be used. Some times such libraries assume a web JavaScript context (such as assuming `document`). Usually this is for resource loading or event handling, with the main rendering logic still only using pure WebGL. So these libraries can usually still be used with a couple workarounds. The Expo-specific integrations above include workarounds for some popular libraries.

## Integration with Reanimated worklets

To use this API inside Reanimated worklet, you need to pass the GL context ID to the worklet and recreate the GL object like in the example below.

GL usage in reanimated worklet

```
import { View } from 'react-native';
import { runOnUI } from 'react-native-reanimated';
import { GLView } from 'expo-gl';

function render(gl) {
  'worklet';
  // add your WebGL code here
}

function onContextCreate(gl) {
  runOnUI((contextId: number) => {
```
'worklet';
const gl = GLView.getWorkletContext(contextId);
render(gl);
```
  })(gl.contextId);
}

export default function App() {
  return (
```
<View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
  <GLView
    style={{ width: 300, height: 300 }}
    enableExperimentalWorkletSupport
    onContextCreate={onContextCreate}
  />
</View>
```
  );
}
```

For more in-depth example on how to use `expo-gl` with Reanimated and Gesture Handler you can check [this example.

### Limitations

Worklet runtime is imposing some limitations on the code that runs inside it, so if you have existing WebGL code, it'll likely require some modifications to run inside a worklet thread.

*   Third-party libraries like Pixi.js or Three.js won't work inside the worklet, you can only use functions that have `'worklet'` added at the start.
*   If you need to load some assets to pass to the WebGL code, it needs to be done on the main thread and passed via some reference to the worklet. If you are using `expo-assets` you can just pass asset object returned by `Asset.fromModule` or from hook `useAssets` to the `runOnUI` function.
*   To implement a rendering loop you need to use `requestAnimationFrame`, APIs like `setTimeout` are not supported.
*   It's supported only on Android and iOS, it doesn't work on Web.

Check [Reanimated documentation to learn more.

## Remote debugging and GLView

This API does not function as intended with remote debugging enabled. The React Native debugger runs JavaScript on your computer, not the mobile device. GLView requires synchronous native calls that are not supported in Chrome.

## API

```
import { GLView } from 'expo-gl';
```

## Component

### `GLView`

Type: `React.[Component<[GLViewProps](#glviewprops)>`

A View that acts as an OpenGL ES render target. On mounting, an OpenGL ES context is created. Its drawing buffer is presented as the contents of the View every frame.

GLViewProps

### `enableExperimentalWorkletSupport`

Type: `boolean` Default: `false`

Enables support for interacting with a `gl` object from code running on the Reanimated worklet thread.

### `msaaSamples`

Only for: iOS

Type: `number` Default: `4`

`GLView` can enable iOS's built-in [multisampling. This prop specifies the number of samples to use. Setting this to `0` turns off multisampling.

### `onContextCreate`

Type: `(gl: [ExpoWebGLRenderingContext](#expowebglrenderingcontext)) => void`

A function that will be called when the OpenGL ES context is created. The function is passed a single argument `gl` that extends a [WebGLRenderingContext interface.

#### Inherited Props

*   `[ViewProps`

## Static Methods

### `createContextAsync()`

Imperative API that creates headless context which is devoid of underlying view. It's useful for headless rendering or in case you want to keep just one context per application and share it between multiple components. It is slightly faster than usual context as it doesn't swap framebuffers and doesn't present them on the canvas, however it may require you to take a snapshot in order to present its results. Also, keep in mind that you need to set up a viewport and create your own framebuffer and texture that you will be drawing to, before you take a snapshot.

Returns:

`[Promise<[ExpoWebGLRenderingContext](#expowebglrenderingcontext)>`

A promise that resolves to WebGL context object. See [WebGL API](#webgl-api) for more details.

### `destroyContextAsync(exgl)`

| Parameter | Type | Description |
| --- | --- | --- |
| exgl(optional) | `number | [ExpoWebGLRenderingContext](#expowebglrenderingcontext)` |
WebGL context to destroy.

 |

Destroys given context.

Returns:

`[Promise<boolean>`

A promise that resolves to boolean value that is `true` if given context existed and has been destroyed successfully.

### `takeSnapshotAsync(exgl, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| exgl(optional) | `number | [ExpoWebGLRenderingContext](#expowebglrenderingcontext)` |
WebGL context to take a snapshot from.

 |
| options(optional) | `[SnapshotOptions](#snapshotoptions)` |

Default:`{}`

 |

Takes a snapshot of the framebuffer and saves it as a file to app's cache directory.

Returns:

`[Promise<[GLSnapshot](#glsnapshot)>`

A promise that resolves to `GLSnapshot` object.

## Component Methods

### `createCameraTextureAsync(cameraRefOrHandle)`

| Parameter | Type |
| --- | --- |
| cameraRefOrHandle | `[ComponentOrHandle](#componentorhandle)` |

Returns:

`[Promise<[WebGLTexture>`

### `destroyObjectAsync(glObject)`

| Parameter | Type |
| --- | --- |
| glObject | `[WebGLObject](#webglobject)` |

Returns:

`[Promise<boolean>`

### `startARSessionAsync()`

Returns:

`[Promise<any>`

### `takeSnapshotAsync(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[SnapshotOptions](#snapshotoptions)` |

Same as static `takeSnapshotAsync()`, but uses WebGL context that is associated with the view on which the method is called.

Returns:

`[Promise<[GLSnapshot](#glsnapshot)>`

## Methods

### `GLView.getWorkletContext(contextId)`

| Parameter | Type |
| --- | --- |
| contextId | `number` |

Returns:

`[ExpoWebGLRenderingContext](#expowebglrenderingcontext) | undefined`

## Interfaces

### `ExpoWebGLRenderingContext`

Extends: `[WebGL2RenderingContext`

| Property | Type | Description |
| --- | --- | --- |
| contextId | `number` |
\-

 |

ExpoWebGLRenderingContext Methods

### `__expoSetLogging(option)`

| Parameter | Type |
| --- | --- |
| option | `[GLLoggingOption](#glloggingoption)` |

Returns:

`void`

### `endFrameEXP()`

Returns:

`void`

### `flushEXP()`

Returns:

`void`

## Types

### `ComponentOrHandle`

Literal Type: `union`

Acceptable values are: `null` | `number` | `[Component<any, any>` | `ComponentClass<any>`

### `GLSnapshot`

| Property | Type | Description |
| --- | --- | --- |
| height | `number` |
Height of the snapshot.

 |
| localUri | `string` |

Synonym for `uri`. Makes snapshot object compatible with `texImage2D`.

 |
| uri | `string | [Blob | null` |

URI to the snapshot.

 |
| width | `number` |

Width of the snapshot.

 |

### `SnapshotOptions`

| Property | Type | Description |
| --- | --- | --- |
| compress(optional) | `number` |
A value in range `0` to `1.0` specifying compression level of the result image. `1.0` means no compression and `0` the highest compression.

Default:`1.0`

 |
| flip(optional) | `boolean` |

Whether to flip the snapshot vertically.

Default:`false`

 |
| format(optional) | `'jpeg' | 'png' | 'webp'` |

Specifies what type of compression should be used and what is the result file extension. PNG compression is lossless but slower, JPEG is faster but the image has visible artifacts.

> Note: When using WebP format, the iOS version will print a warning, and generate a `'png'` file instead. It is recommended to use [platform-specific code in this case.

Default:`'jpeg'`

 |
| framebuffer(optional) | `[WebGLFramebuffer` |

Specify the framebuffer that we will be reading from. Defaults to underlying framebuffer that is presented in the view or the current framebuffer if context is headless.

 |
| rect(optional) | `{ height: number, width: number, x: number, y: number }` |

Rect to crop the snapshot. It's passed directly to `glReadPixels`.

 |

### `SurfaceCreateEvent`

| Property | Type | Description |
| --- | --- | --- |
| nativeEvent | `{ exglCtxId: number }` |
\-

 |

### `WebGLObject`

| Property | Type | Description |
| --- | --- | --- |
| id | `number` |
\-

 |

## Enums

### `GLLoggingOption`

#### `DISABLED`

`GLLoggingOption.DISABLED ＝ 0`

Disables logging entirely.

#### `METHOD_CALLS`

`GLLoggingOption.METHOD_CALLS ＝ 1`

Logs method calls, their parameters and results.

#### `GET_ERRORS`

`GLLoggingOption.GET_ERRORS ＝ 2`

Calls `gl.getError()` after each other method call and prints an error if any is returned. This option has a significant impact on the performance as this method is blocking.

#### `RESOLVE_CONSTANTS`

`GLLoggingOption.RESOLVE_CONSTANTS ＝ 4`

Resolves parameters of type `number` to their constant names.

#### `TRUNCATE_STRINGS`

`GLLoggingOption.TRUNCATE_STRINGS ＝ 8`

When this option is enabled, long strings will be truncated. It's useful if your shaders are really big and logging them significantly reduces performance.

#### `ALL`

`GLLoggingOption.ALL ＝ 15`

Enables all other options. It implies `GET_ERRORS` so be aware of the slowdown.

## WebGL API

Once the component is mounted and the OpenGL ES context has been created, the `gl` object received through the `onContextCreate` prop becomes the interface to the OpenGL ES context, providing a WebGL API. It resembles a [WebGL2RenderingContext in the WebGL 2 spec.

Some older Android devices may not support WebGL2 features. To check whether the device supports WebGL2 it's recommended to use `gl instanceof WebGL2RenderingContext`.

An additional method `gl.endFrameEXP()` is present, which notifies the context that the current frame is ready to present. This is similar to a 'swap buffers' API call in other OpenGL platforms.

The following WebGL2RenderingContext methods are currently unimplemented:

*   `getFramebufferAttachmentParameter()`
*   `getRenderbufferParameter()`
*   `compressedTexImage2D()`
*   `compressedTexSubImage2D()`
*   `getTexParameter()`
*   `getUniform()`
*   `getVertexAttrib()`
*   `getVertexAttribOffset()`
*   `getBufferSubData()`
*   `getInternalformatParameter()`
*   `renderbufferStorageMultisample()`
*   `compressedTexImage3D()`
*   `compressedTexSubImage3D()`
*   `fenceSync()`
*   `isSync()`
*   `deleteSync()`
*   `clientWaitSync()`
*   `waitSync()`
*   `getSyncParameter()`
*   `getActiveUniformBlockParameter()`

The `pixels` argument of [`texImage2D()` must be `null`, an `ArrayBuffer` with pixel data, or an object of the form `{ localUri }` where `localUri` is the `file://` URI of an image in the device's file system. Thus, an `Asset` object is used once `.downloadAsync()` has been called on it (and completed) to fetch the resource.

For efficiency reasons, the current implementations of the methods don't perform type or bounds checking on their arguments. So, passing invalid arguments may cause a native crash. There are plans to update the API to perform argument checking in upcoming SDK versions.

Currently, the priority for error checking is low since engines generally don't rely on the OpenGL API to perform argument checking; otherwise, checks performed by the underlying OpenGL ES implementation are often sufficient.

---

# Expo Gyroscope

`Gyroscope` from `expo-sensors` provides access to the device's gyroscope sensor to respond to changes in rotation in three-dimensional space.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic Gyroscope usage

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Gyroscope } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
```
x: 0,
y: 0,
z: 0,
```
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Gyroscope.setUpdateInterval(1000);
  const _fast = () => Gyroscope.setUpdateInterval(16);

  const _subscribe = () => {
```
setSubscription(
  Gyroscope.addListener(gyroscopeData => {
    setData(gyroscopeData);
  })
);
```
  };

  const _unsubscribe = () => {
```
subscription && subscription.remove();
setSubscription(null);
```
  };

  useEffect(() => {
```
_subscribe();
return () => _unsubscribe();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text style={styles.text}>Gyroscope:</Text>
  <Text style={styles.text}>x: {x}</Text>
  <Text style={styles.text}>y: {y}</Text>
  <Text style={styles.text}>z: {z}</Text>
  <View style={styles.buttonContainer}>
    <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
      <Text>{subscription ? 'On' : 'Off'}</Text>
    </TouchableOpacity>
    <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
      <Text>Slow</Text>
    </TouchableOpacity>
    <TouchableOpacity onPress={_fast} style={styles.button}>
      <Text>Fast</Text>
    </TouchableOpacity>
  </View>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
paddingHorizontal: 10,
```
  },
  text: {
```
textAlign: 'center',
```
  },
  buttonContainer: {
```
flexDirection: 'row',
alignItems: 'stretch',
marginTop: 15,
```
  },
  button: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
backgroundColor: '#eee',
padding: 10,
```
  },
  middleButton: {
```
borderLeftWidth: 1,
borderRightWidth: 1,
borderColor: '#ccc',
```
  },
});
```

## API

```
import { Gyroscope } from 'expo-sensors';
```

## Classes

### `Gyroscope`

Type: Class extends `[DeviceSensor<[GyroscopeMeasurement](#gyroscopemeasurement)>`

A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type `Measurement`.

Gyroscope Methods

### `addListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `Listener<[GyroscopeMeasurement](#gyroscopemeasurement)>` |
A callback that is invoked when a gyroscope update is available. When invoked, the listener is provided a single argument that is an `GyroscopeMeasurement` object.

 |

Subscribe for updates to the gyroscope.

Returns:

`[Subscription](#subscription)`

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

Returns:

`number`

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

Returns:

`boolean`

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Returns whether the gyroscope is enabled on the device.

On mobile web, you must first invoke `Gyroscope.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module. If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.

On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as `DeviceMotion` is now considered a secure API. There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.

Returns:

`[Promise<boolean>`

A promise that resolves to a `boolean` denoting the availability of the gyroscope.

### `removeAllListeners()`

Removes all registered listeners.

Returns:

`void`

### `removeSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
A subscription to remove.

 |

Removes the given subscription.

Returns:

`void`

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `setUpdateInterval(intervalMs)`

| Parameter | Type | Description |
| --- | --- | --- |
| intervalMs | `number` |
Desired interval in milliseconds between sensor updates.

> Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
>
> If you need an update interval less than 200ms, you should:
>
> *   add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [app.json `permissions` field
> *   or if you are using bare workflow, add `<uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/>` to AndroidManifest.xml.

 |

Set the sensor update interval.

Returns:

`void`

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `GyroscopeMeasurement`

Each of these keys represents the rotation along that particular axis measured in degrees per second (°/s).

| Property | Type | Description |
| --- | --- | --- |
| timestamp | `number` |
Timestamp of the measurement in seconds.

 |
| x | `number` |

Value of rotation in degrees per second device reported in X axis.

 |
| y | `number` |

Value of rotation in degrees per second device reported in Y axis.

 |
| z | `number` |

Value of rotation in degrees per second device reported in Z axis.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

---

# Expo Haptics




A library that provides access to the system's vibration effects on Android and the haptics engine on iOS.



3.0.1

`expo-haptics` provides haptic (touch) feedback for:

*   Android devices using Vibrator system service.
*   iOS 10+ devices using the Taptic Engine.

On iOS, the Taptic engine will do nothing if any of the following conditions are true on a user's device:

*   Low Power Mode is enabled. This can be detected with [`expo-battery`.
*   User disabled the Taptic Engine in settings.
*   iOS Camera is active (to prevent destabilization).

## Installation

`npx expo install expo-haptics`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration

On Android, this library requires permission to control vibration on the device. The `VIBRATE` permission is added automatically.

## Usage

Haptics usage

```
import { StyleSheet, View, Text, Button } from 'react-native';
import * as Haptics from 'expo-haptics';

export default function App() {
  return (
```
<View style={styles.container}>
  <Text style={styles.text}>Haptics.selectionAsync</Text>
  <View style={styles.buttonContainer}>
    <Button title="Selection" onPress={() => Haptics.selectionAsync()} />
  </View>
  <Text style={styles.text}>Haptics.notificationAsync</Text>
  <View style={styles.buttonContainer}>
    <Button
      title="Success"
      onPress={
        () =>
          Haptics.notificationAsync(
            Haptics.NotificationFeedbackType.Success
          )
      }
    />
    <Button
      title="Error"
      onPress={
        () =>
          Haptics.notificationAsync(
            Haptics.NotificationFeedbackType.Error
          )
      }
    />
    <Button
      title="Warning"
      onPress={
        () =>
          Haptics.notificationAsync(
            Haptics.NotificationFeedbackType.Warning
          )
      }
    />
  </View>
  <Text style={styles.text}>Haptics.impactAsync</Text>
  <View style={styles.buttonContainer}>
    <Button
      title="Light"
      onPress={
        () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
      }
    />
    <Button
      title="Medium"
      onPress={
        () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)
      }
    />
    <Button
      title="Heavy"
      onPress={
        () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)
      }
    />
    <Button
      title="Rigid"
      onPress={
        () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid)
      }
    />
    <Button
      title="Soft"
      onPress={
        () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft)
      }
    />
  </View>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
paddingHorizontal: 16,
```
  },
  buttonContainer: {
```
flexDirection: 'row',
alignItems: 'stretch',
marginTop: 10,
marginBottom: 30,
justifyContent: 'space-between',
```
  },
});
```

## API

```
import * as Haptics from 'expo-haptics';
```

## Methods

### `Haptics.impactAsync(style)`

| Parameter | Type | Description |
| --- | --- | --- |
| style(optional) | `[ImpactFeedbackStyle](#impactfeedbackstyle)` |
A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`, while on Android these are simulated using [Vibrator. You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.

Default:`ImpactFeedbackStyle.Medium`

 |

Returns:

`[Promise<void>`

A `Promise` which fulfils once native size haptics functionality is triggered.

### `Haptics.notificationAsync(type)`

| Parameter | Type | Description |
| --- | --- | --- |
| type(optional) | `[NotificationFeedbackType](#notificationfeedbacktype)` |
A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType, while on Android these are simulated using [Vibrator. You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.

Default:`NotificationFeedbackType.Success`

 |

The kind of notification response used in the feedback.

Returns:

`[Promise<void>`

A `Promise` which fulfils once native size haptics functionality is triggered.

### `Haptics.selectionAsync()`

Used to let a user know when a selection change has been registered.

Returns:

`[Promise<void>`

A `Promise` which fulfils once native size haptics functionality is triggered.

## Enums

### `ImpactFeedbackStyle`

The mass of the objects in the collision simulated by a UIImpactFeedbackGenerator object [`UINotificationFeedbackStyle`

#### `Heavy`

`ImpactFeedbackStyle.Heavy ＝ "heavy"`

A collision between large, heavy user interface elements.

#### `Light`

`ImpactFeedbackStyle.Light ＝ "light"`

A collision between small, light user interface elements.

#### `Medium`

`ImpactFeedbackStyle.Medium ＝ "medium"`

A collision between moderately sized user interface elements.

#### `Rigid`

`ImpactFeedbackStyle.Rigid ＝ "rigid"`

A collision between user interface elements that are rigid, exhibiting a small amount of compression or elasticity.

#### `Soft`

`ImpactFeedbackStyle.Soft ＝ "soft"`

A collision between user interface elements that are soft, exhibiting a large amount of compression or elasticity.

### `NotificationFeedbackType`

The type of notification feedback generated by a UINotificationFeedbackGenerator object. [`UINotificationFeedbackType`

#### `Error`

`NotificationFeedbackType.Error ＝ "error"`

A notification feedback type indicating that a task has failed.

#### `Success`

`NotificationFeedbackType.Success ＝ "success"`

A notification feedback type indicating that a task has completed successfully.

#### `Warning`

`NotificationFeedbackType.Warning ＝ "warning"`

A notification feedback type indicating that a task has produced a warning.

---

# Expo Image

`expo-image` is a cross-platform React component that loads and renders images.

Main features:

*   Designed for speed
*   Support for many image formats (including animated ones)
*   Disk and memory caching
*   Supports [BlurHash and [ThumbHash - compact representations of a placeholder for an image
*   Transitioning between images when the source changes (no more flickering!)
*   Implements the CSS [`object-fit` and [`object-position` properties (see [`contentFit` and [`contentPosition` props)
*   Uses performant [`SDWebImage` and [`Glide` under the hood

#### Supported image formats

| Format | Android | iOS | Web |
| --- | --- | --- | --- |
| WebP |  |  |  |
| PNG / APNG |  |  |  |
| AVIF |  |  | [~87% adoption |
| HEIC |  |  | [not adopted yet |
| JPEG |  |  |  |
| GIF |  |  |  |
| SVG |  |  |  |
| ICO |  |  |  |
| ICNS |  |  |  |

## Installation

`npx expo install expo-image`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

```
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
```
<View style={styles.container}>
  <Image
    style={styles.image}
    source="https://picsum.photos/seed/696/3000/2000"
    placeholder={{ blurhash }}
    contentFit="cover"
    transition={1000}
  />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
backgroundColor: '#fff',
alignItems: 'center',
justifyContent: 'center',
```
  },
  image: {
```
flex: 1,
width: '100%',
backgroundColor: '#0553',
```
  },
});
```

## API

```
import { Image } from 'expo-image';
```

## Component

### `Image`

Type: `React.[PureComponent<[ImageProps](#imageprops)>`

Some props are from React Native Image that Expo Image supports (more or less) for easier migration, but all of them are deprecated and might be removed in the future.

ImageProps

### `accessibilityLabel`

Optional Type: `string` Default: `undefined`

The text that's read by the screen reader when the user interacts with the image. Sets the the `alt` tag on web which is used for web crawlers and link traversal.

### `accessible`

Only for: Android, iOS

Optional Type: `boolean` Default: `false`

When true, indicates that the view is an accessibility element. When a view is an accessibility element, it groups its children into a single selectable component.

On Android, the `accessible` property will be translated into the native `isScreenReaderFocusable`, so it's only affecting the screen readers behaviour.

### `allowDownscaling`

Optional Type: `boolean` Default: `true`

Whether the image should be downscaled to match the size of the view container. Turning off this functionality could negatively impact the application's performance, particularly when working with large assets. However, it would result in smoother image resizing, and end-users would always have access to the highest possible asset quality.

Downscaling is never used when the `contentFit` prop is set to `none` or `fill`.

### `alt`

Optional Type: `string` Default: `undefined`

The text that's read by the screen reader when the user interacts with the image. Sets the the `alt` tag on web which is used for web crawlers and link traversal. Is an alias for `accessibilityLabel`.

### `autoplay`

Only for: Android, iOS

Optional Type: `boolean` Default: `true`

Determines if an image should automatically begin playing if it is an animated image.

### `blurRadius`

Optional Type: `number` Default: `0`

The radius of the blur in points, `0` means no blur effect. This effect is not applied to placeholders.

### `cachePolicy`

Optional Literal type: `union` Default: `'disk'`

Determines whether to cache the image and where: on the disk, in the memory or both.

*   `'none'` - Image is not cached at all.
```
*   `'disk'` - Image is queried from the disk cache if exists, otherwise it's downloaded and then stored on the disk.
```
*   `'memory'` - Image is cached in memory. Might be useful when you render a high-resolution picture many times. Memory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.
```
*   `'memory-disk'` - Image is cached in memory, but with a fallback to the disk cache.
```

Acceptable values are: `null` | `'disk'` | `'memory-disk'` | `'memory'` | `'none'`

### `contentFit`

Optional Type: `[ImageContentFit](#imagecontentfit)` Default: `'cover'`

Determines how the image should be resized to fit its container. This property tells the image to fill the container in a variety of ways; such as "preserve that aspect ratio" or "stretch up and take up as much space as possible". It mirrors the CSS [`object-fit` property.

*   `'cover'` - The image is sized to maintain its aspect ratio while filling the container box. If the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.
```
*   `'contain'` - The image is scaled down or up to maintain its aspect ratio while fitting within the container box.
```
*   `'fill'` - The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit.
```
*   `'none'` - The image is not resized and is centered by default. When specified, the exact position can be controlled with `contentPosition` prop.
```
*   `'scale-down'` - The image is sized as if `none` or `contain` were specified, whichever would result in a smaller concrete image size.
```

### `contentPosition`

Optional Type: `[ImageContentPosition](#imagecontentposition)` Default: `'center'`

It is used together with `contentFit` to specify how the image should be positioned with x/y coordinates inside its own container. An equivalent of the CSS [`object-position` property.

### `decodeFormat`

Only for: Android

Optional Type: `[ImageDecodeFormat](#imagedecodeformat)` Default: `'argb'`

The format in which the image data should be decoded. It's not guaranteed that the platform will use the specified format.

*   `'argb'` - The image is decoded into a 32-bit color space with alpha channel ([https://developer.android.com/reference/android/graphics/Bitmap.Config#ARGB\_8888).
```
*   `'rgb'` - The image is decoded into a 16-bit color space without alpha channel ([https://developer.android.com/reference/android/graphics/Bitmap.Config#RGB\_565).
```

> Deprecated Provides compatibility for [`defaultSource` from React Native Image. Use `placeholder` prop instead.

### `defaultSource`

Optional Literal type: `union`

Acceptable values are: `null` | `[ImageSource](#imagesource)`

### `enableLiveTextInteraction`

Only for: iOS 16.0+

Optional Type: `boolean` Default: `false`

Enables Live Text interaction with the image. Check official [Apple documentation for more details.

> Deprecated Provides compatibility for [`fadeDuration` from React Native Image. Instead use `transition` with the provided duration.

### `fadeDuration`

Optional Type: `number`

### `focusable`

Only for: Android

Optional Type: `boolean` Default: `false`

Whether this View should be focusable with a non-touch input device and receive focus with a hardware keyboard.

> Deprecated Provides compatibility for [`loadingIndicatorSource` from React Native Image. Use `placeholder` prop instead.

### `loadingIndicatorSource`

Optional Literal type: `union`

Acceptable values are: `null` | `[ImageSource](#imagesource)`

### `onError`

Optional Type: `(event: [ImageErrorEventData](#imageerroreventdata)) => void`

Called on an image fetching error.

### `onLoad`

Optional Type: `(event: [ImageLoadEventData](#imageloadeventdata)) => void`

Called when the image load completes successfully.

### `onLoadEnd`

Optional Type: `() => void`

Called when the image load either succeeds or fails.

### `onLoadStart`

Optional Type: `() => void`

Called when the image starts to load.

### `onProgress`

Optional Type: `(event: [ImageProgressEventData](#imageprogresseventdata)) => void`

Called when the image is loading. Can be called multiple times before the image has finished loading. The event object provides details on how many bytes were loaded so far and what's the expected total size.

### `placeholder`

Optional Literal type: `union`

An image to display while loading the proper image and no image has been displayed yet or the source is unset.

Acceptable values are: `null` | `string` | `number` | `string` | `[ImageSource](#imagesource)` | `[ImageSource](#imagesource)`

### `placeholderContentFit`

Optional Type: `[ImageContentFit](#imagecontentfit)` Default: `'scale-down'`

Determines how the placeholder should be resized to fit its container. Available resize modes are the same as for the `contentFit` prop.

### `priority`

Optional Literal type: `union` Default: `'normal'`

Priorities for completing loads. If more than one load is queued at a time, the load with the higher priority will be started first. Priorities are considered best effort, there are no guarantees about the order in which loads will start or finish.

Acceptable values are: `null` | `'low'` | `'normal'` | `'high'`

### `recyclingKey`

Only for: Android, iOS

Optional Literal type: `union` Default: `null`

Changing this prop resets the image view content to blank or a placeholder before loading and rendering the final image. This is especially useful for any kinds of recycling views like [FlashList to prevent showing the previous source before the new one fully loads.

Acceptable values are: `null` | `string`

> Deprecated Provides compatibility for [`resizeMode` from React Native Image. Note that `"repeat"` option is not supported at all. Use the more powerful `contentFit` and `contentPosition` props instead.

### `resizeMode`

Optional Literal type: `string`

Acceptable values are: `'cover'` | `'contain'` | `'center'` | `'stretch'` | `'repeat'`

### `responsivePolicy`

Only for: Web

Optional Literal type: `string` Default: `'static'`

Controls the selection of the image source based on the container or viewport size on the web.

If set to `'static'`, the browser selects the correct source based on user's viewport width. Works with static rendering. Make sure to set the `'webMaxViewportWidth'` property on each source for best results. For example, if an image occupies 1/3 of the screen width, set the `'webMaxViewportWidth'` to 3x the image width. The source with the largest `'webMaxViewportWidth'` is used even for larger viewports.

If set to `'initial'`, the component will select the correct source during mount based on container size. Does not work with static rendering.

If set to `'live'`, the component will select the correct source on every resize based on container size. Does not work with static rendering.

Acceptable values are: `'live'` | `'initial'` | `'static'`

### `source`

Optional Literal type: `union`

The image source, either a remote URL, a local file resource or a number that is the result of the `require()` function. When provided as an array of sources, the source that fits best into the container size and is closest to the screen scale will be chosen. In this case it is important to provide `width`, `height` and `scale` properties.

Acceptable values are: `null` | `string` | `number` | `string` | `[ImageSource](#imagesource)` | `[ImageSource](#imagesource)`

### `tintColor`

Optional Literal type: `union` Default: `null`

A color used to tint template images (a bitmap image where only the opacity matters). The color is applied to every non-transparent pixel, causing the image’s shape to adopt that color. This effect is not applied to placeholders.

Acceptable values are: `null` | `string`

### `transition`

Optional Literal type: `union`

Describes how the image view should transition the contents when switching the image source.
If provided as a number, it is the duration in milliseconds of the `'cross-dissolve'` effect.

Acceptable values are: `null` | `number` | `[ImageTransition](#imagetransition)`

#### Inherited Props

*   `[ViewProps`

## Static Methods

### `clearDiskCache()`

Only for: Android, iOS

Asynchronously clears all images from the disk cache.

Returns:

`[Promise<boolean>`

A promise resolving to `true` when the operation succeeds. It may resolve to `false` on Android when the activity is no longer available. Resolves to `false` on Web.

### `clearMemoryCache()`

Only for: Android, iOS

Asynchronously clears all images stored in memory.

Returns:

`[Promise<boolean>`

A promise resolving to `true` when the operation succeeds. It may resolve to `false` on Android when the activity is no longer available. Resolves to `false` on Web.

### `generateBlurhashAsync(url, numberOfComponents)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
The URL of the image to generate a blurhash from.

 |
| numberOfComponents | `[number, number] | { height: number, width: number }` |

The number of components to encode the blurhash with. Must be between 1 and 9. Defaults to `[4, 3]`.

 |

Asynchronously generates a [Blurhash from an image.

Returns:

`[Promise<null | string>`

A promise resolving to the blurhash string.

### `getCachePathAsync(cacheKey)`

Only for: Android, iOS

| Parameter | Type | Description |
| --- | --- | --- |
| cacheKey | `string` |
The cache key for the requested image. Unless you have set a custom cache key, this will be the source URL of the image.

 |

Asynchronously checks if an image exists in the disk cache and resolves to the path of the cached image if it does.

Returns:

`[Promise<null | string>`

A promise resolving to the path of the cached image. It will resolve to `null` if the image does not exist in the cache.

### `prefetch(urls, cachePolicy)`

| Parameter | Type | Description |
| --- | --- | --- |
| urls | `string | string` |
A URL string or an array of URLs of images to prefetch.

 |
| cachePolicy(optional) | `'disk' | 'memory-disk' | 'memory'` |

The cache policy for prefetched images.

 |

Preloads images at the given URLs that can be later used in the image view. Preloaded images are cached to the memory and disk by default, so make sure to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).

Returns:

`[Promise<boolean>`

A promise resolving to `true` as soon as all images have been successfully prefetched. If an image fails to be prefetched, the promise will immediately resolve to `false` regardless of whether other images have finished prefetching.

### `prefetch(urls, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| urls | `string | string` |
A URL string or an array of URLs of images to prefetch.

 |
| options(optional) | `[ImagePrefetchOptions](#imageprefetchoptions)` |

Options for prefetching images.

 |

Preloads images at the given URLs that can be later used in the image view. Preloaded images are cached to the memory and disk by default, so make sure to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).

Returns:

`[Promise<boolean>`

A promise resolving to `true` as soon as all images have been successfully prefetched. If an image fails to be prefetched, the promise will immediately resolve to `false` regardless of whether other images have finished prefetching.

## Component Methods

### `startAnimating()`

Only for: Android, iOS

Asynchronously starts playback of the view's image if it is animated.

Returns:

`[Promise<void>`

### `stopAnimating()`

Only for: Android, iOS

Asynchronously stops the playback of the view's image if it is animated.

Returns:

`[Promise<void>`

## Types

### `ImageContentPosition`

Specifies the position of the image inside its container. One value controls the x-axis and the second value controls the y-axis.

Additionally, it supports stringified shorthand form that specifies the edges to which to align the image content:
`'center'`, `'top'`, `'right'`, `'bottom'`, `'left'`, `'top center'`, `'top right'`, `'top left'`, `'right center'`, `'right top'`, `'right bottom'`, `'bottom center'`, `'bottom right'`, `'bottom left'`, `'left center'`, `'left top'`, `'left bottom'`.
If only one keyword is provided, then the other dimension is set to `'center'` (`'50%'`), so the image is placed in the middle of the specified edge.
As an example, `'top right'` is the same as `{ top: 0, right: 0 }` and `'bottom'` is the same as `{ bottom: 0, left: '50%' }`.

Type: `[ImageContentPositionString](#imagecontentpositionstring)` or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| right(optional) | `[ImageContentPositionValue](#imagecontentpositionvalue)` |
\-

 |
| top(optional) | `[ImageContentPositionValue](#imagecontentpositionvalue)` |

\-

 |

Or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| left(optional) | `[ImageContentPositionValue](#imagecontentpositionvalue)` |
\-

 |
| top(optional) | `[ImageContentPositionValue](#imagecontentpositionvalue)` |

\-

 |

Or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| bottom(optional) | `[ImageContentPositionValue](#imagecontentpositionvalue)` |
\-

 |
| right(optional) | `[ImageContentPositionValue](#imagecontentpositionvalue)` |

\-

 |

Or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| bottom(optional) | `[ImageContentPositionValue](#imagecontentpositionvalue)` |
\-

 |
| left(optional) | `[ImageContentPositionValue](#imagecontentpositionvalue)` |

\-

 |

### `ImageContentPositionValue`

Literal Type: `union`

A value that represents the relative position of a single axis.

If `number`, it is a distance in points (logical pixels) from the respective edge.
If `string`, it must be a percentage value where `'100%'` is the difference in size between the container and the image along the respective axis, or `'center'` which is an alias for `'50%'` that is the default value. You can read more regarding percentages on the MDN docs for [`background-position` that describes this concept well.

Acceptable values are: `number` | `string` | `{number}%` | `{number}` | `'center'`

### `ImageErrorEventData`

| Property | Type | Description |
| --- | --- | --- |
| error | `string` |
\-

 |

### `ImageLoadEventData`

| Property | Type | Description |
| --- | --- | --- |
| cacheType | `'none' | 'disk' | 'memory'` |
\-

 |
| source | `{ height: number, isAnimated: boolean, mediaType: string | null, url: string, width: number }` |

\-

 |

### `ImagePrefetchOptions`

| Property | Type | Description |
| --- | --- | --- |
| cachePolicy(optional) | `'disk' | 'memory-disk' | 'memory'` |
The cache policy for prefetched images.

Default:`'memory-disk'`

 |
| headers(optional) | `Record<string, string>` |

A map of headers to use when prefetching the images.

 |

### `ImageProgressEventData`

| Property | Type | Description |
| --- | --- | --- |
| loaded | `number` |
\-

 |
| total | `number` |

\-

 |

### `ImageSource`

| Property | Type | Description |
| --- | --- | --- |
| blurhash(optional) | `string` |
A string used to generate the image `placeholder`. For example, `placeholder={blurhash}`. If `uri` is provided as the value of the `source` prop, this is ignored since the `source` can only have `blurhash` or `uri`.

When using the blurhash, you should also provide `width` and `height` (higher values reduce performance), otherwise their default value is `16`. For more information, see [`woltapp/blurhash` repository.

 |
| cacheKey(optional) | `string` |

The cache key used to query and store this specific image. If not provided, the `uri` is used also as the cache key.

 |
| headers(optional) | `Record<string, string>` |

An object representing the HTTP headers to send along with the request for a remote image. On web requires the `Access-Control-Allow-Origin` header returned by the server to include the current domain.

 |
| height(optional) | `number` |

Can be specified if known at build time, in which case the value will be used to set the default `<Image/>` component dimension.

 |
| isAnimated(optional) | `boolean` |

Only for: Android, iOS

Whether the image is animated (an animated GIF or WebP for example).

 |
| thumbhash(optional) | `string` |

A string used to generate the image `placeholder`. For example, `placeholder={thumbhash}`. If `uri` is provided as the value of the `source` prop, this is ignored since the `source` can only have `thumbhash` or `uri`.

For more information, see [`thumbhash website`.

 |
| uri(optional) | `string` |

A string representing the resource identifier for the image, which could be an HTTPS address, a local file path, or the name of a static image resource.

 |
| webMaxViewportWidth(optional) | `number` |

Only for: Web

The max width of the viewport for which this source should be selected. Has no effect if `source` prop is not an array or has only 1 element. Has no effect if `responsivePolicy` is not set to `static`. Ignored if `blurhash` or `thumbhash` is provided (image hashes are never selected if passed in an array).

 |
| width(optional) | `number` |

Can be specified if known at build time, in which case the value will be used to set the default `<Image/>` component dimension.

 |

### `ImageTransition`

An object that describes the smooth transition when switching the image source.

| Property | Type | Description |
| --- | --- | --- |
| duration(optional) | `number` |
The duration of the transition in milliseconds.

Default:`0`

 |
| effect(optional) | `'cross-dissolve' | 'flip-from-top' | 'flip-from-right' | 'flip-from-bottom' | 'flip-from-left' | 'curl-up' | 'curl-down' | null` |

An animation effect used for transition.

Default:``'cross-dissolve' On Android, only `'cross-dissolve'` is supported. On Web, `'curl-up'` and `'curl-down'` effects are not supported.``

 |
| timing(optional) | `'ease-in-out' | 'ease-in' | 'ease-out' | 'linear'` |

Specifies the speed curve of the transition effect and how intermediate values are calculated.

Default:`'ease-in-out'`

 |

## Generating a blurhash on a server

Images can significantly improve the visual experience, however, they can also slow down app/page loading times due to their large file sizes. To overcome this, you can create placeholder images using blurhash algorithm that provides an immersive experience while deferring the loading of the actual picture until later.

This guide demonstrates how to create a blurhash of an uploaded image on the backend using JavaScript and Express.js. The same techniques and principles apply to other languages and server technologies.

Start by installing a few dependencies: [`multer` for handling multipart requests, [`sharp` for converting files to a data buffer, and the official [`blurhash` JavaScript package.

`npm install multer sharp blurhash`

Next, import all required functions from installed packages and initialize `multer`:

```
// Multer is a middleware for handling `multipart/form-data`.
const multer = require('multer');
// Sharp allows you to receive a data buffer from the uploaded image.
const sharp = require('sharp');
// Import the encode function from the blurhash package.
const { encode } = require('blurhash');

// Initialize `multer`.
const upload = multer();
```

Assuming the `app` is a variable that holds a reference to the Express server, an endpoint can be created that accepts an image and returns a JSON response containing the generated blurhash.

```
app.post('/blurhash', upload.single('image'), async (req, res) => {
  const { file } = req;
  // If the file is not available we're returning with error.
  if (file === null) {
```
res.status(400).json({ message: 'Image is missing' });
return;
```
  }

  // Users can specify number of components in each axes.
  const componentX = req.body.componentX ?? 4;
  const componentY = req.body.componentY ?? 3;

  // We're converting provided image to a byte buffer.
  // Sharp currently supports multiple common formats like JPEG, PNG, WebP, GIF, and AVIF.
  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({
```
resolveWithObject: true,
```
  });

  const blurhash = encode(
```
new Uint8ClampedArray(data),
info.width,
info.height,
componentX,
componentY
```
  );
  res.json({ blurhash });
});
```

Additionally, the request can include two parameters: `componentX` and `componentY`, are passed through the algorithm. These values can be calculated or hard-coded on the server or specified by the user. However, they must be within the range of 1 to 9 and have an aspect ratio similar to the uploaded image. A value of 9 will give the best results but may take longer to generate the hash.

The process of generating a blurhash can be accomplished in various languages and server technologies, similar to the one using JavaScript. The key step is to locate an encoder for your chosen language, which can often be found in the [`woltapp/blurhash` repository. Once you have the encoder, you will need to obtain a representation of the image. Some libraries use a default image class (for example, the Swift implementation uses `UIImage`). In other cases, you will have to provide raw byte data. Make sure to check the encoder's documentation to confirm the expected data format.

> When working with raw byte data, ensure that the alpha layer is present (each pixel is represented by red, green, blue, and alpha values). Failing to do so will lead to errors such as "width and height must match the pixels array".

---

# Expo ImageManipulator

`expo-image-manipulator` provides an API to modify images stored on the local file system.

## Installation

`npx expo install expo-image-manipulator`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

This will first rotate the image 90 degrees clockwise, then flip the rotated image vertically and save it as a PNG.

Basic ImageManipulator usage

```
import { useState, useEffect } from 'react';
import { Button, Image, StyleSheet, View } from 'react-native';
import { Asset } from 'expo-asset';
import { manipulateAsync, FlipType, SaveFormat } from 'expo-image-manipulator';

export default function App() {
  const [ready, setReady] = useState(false);
  const [image, setImage] = useState(null);

  useEffect(() => {
```
(async () => {
  const image = Asset.fromModule(require('./assets/snack-icon.png'));
  await image.downloadAsync();
  setImage(image);
  setReady(true);
})();
```
  }, );

  const _rotate90andFlip = async () => {
```
const manipResult = await manipulateAsync(
  image.localUri || image.uri,
  [{ rotate: 90 }, { flip: FlipType.Vertical }],
  { compress: 1, format: SaveFormat.PNG }
);
setImage(manipResult);
```
  };

  const _renderImage = () => (
```
<View style={styles.imageContainer}>
  <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />
</View>
```
  );

  return (
```
<View style={styles.container}>
  {ready && image && _renderImage()}
  <Button title="Rotate and Flip" onPress={_rotate90andFlip} />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
```
  },
  imageContainer: {
```
marginVertical: 20,
alignItems: 'center',
justifyContent: 'center',
```
  },
  image: {
```
width: 300,
height: 300,
resizeMode: 'contain',
```
  },
});
```

## API

```
import * as ImageManipulator from 'expo-image-manipulator';
```

## Methods

### `ImageManipulator.manipulateAsync(uri, actions, saveOptions)`

| Parameter | Type | Description |
| --- | --- | --- |
| uri | `string` |
URI of the file to manipulate. Should be on the local file system or a base64 data URI.

 |
| actions(optional) | `[Action](#action)` |

An array of objects representing manipulation options. Each object should have only one of the keys that corresponds to specific transformation.

Default:``

 |
| saveOptions(optional) | `[SaveOptions](#saveoptions)` |

A map defining how modified image should be saved.

Default:`{}`

 |

Manipulate the image provided via `uri`. Available modifications are rotating, flipping (mirroring), resizing and cropping. Each invocation results in a new file. With one invocation you can provide a set of actions to perform over the image. Overwriting the source file would not have an effect in displaying the result as images are cached.

Returns:

`[Promise<[ImageResult](#imageresult)>`

Promise which fulfils with `ImageResult` object.

## Types

### `Action`

Literal Type: `union`

Acceptable values are: `[ActionResize](#actionresize)` | `[ActionRotate](#actionrotate)` | `[ActionFlip](#actionflip)` | `[ActionCrop](#actioncrop)` | `[ActionExtent](#actionextent)`

### `ActionCrop`

| Property | Type | Description |
| --- | --- | --- |
| crop | `{ height: number, originX: number, originY: number, width: number }` |
Fields specify top-left corner and dimensions of a crop rectangle.

 |

### `ActionExtent`

| Property | Type | Description |
| --- | --- | --- |
| extent | `{ backgroundColor: string | null, height: number, originX: number, originY: number, width: number }` |
Only for: Web

Set the image size and offset. If the image is enlarged, unfilled areas are set to the `backgroundColor`. To position the image, use `originX` and `originY`.

 |

### `ActionFlip`

| Property | Type | Description |
| --- | --- | --- |
| flip | `[FlipType](#fliptype)` |
An axis on which image will be flipped. Only one flip per transformation is available. If you want to flip according to both axes then provide two separate transformations.

 |

### `ActionResize`

| Property | Type | Description |
| --- | --- | --- |
| resize | `{ height: number, width: number }` |
Values correspond to the result image dimensions. If you specify only one value, the other will be calculated automatically to preserve image ratio.

 |

### `ActionRotate`

| Property | Type | Description |
| --- | --- | --- |
| rotate | `number` |
Degrees to rotate the image. Rotation is clockwise when the value is positive and counter-clockwise when negative.

 |

### `ImageResult`

| Property | Type | Description |
| --- | --- | --- |
| base64(optional) | `string` |
It is included if the `base64` save option was truthy, and is a string containing the JPEG/PNG (depending on `format`) data of the image in Base64. Prepend that with `'data:image/xxx;base64,'` to get a data URI, which you can use as the source for an `Image` element for example (where `xxx` is `jpeg` or `png`).

 |
| height | `number` |

Height of the image or video.

 |
| uri | `string` |

An URI to the modified image (usable as the source for an `Image` or `Video` element).

 |
| width | `number` |

Width of the image or video.

 |

### `SaveOptions`

A map defining how modified image should be saved.

| Property | Type | Description |
| --- | --- | --- |
| base64(optional) | `boolean` |
Whether to also include the image data in Base64 format.

 |
| compress(optional) | `number` |

A value in range `0.0` - `1.0` specifying compression level of the result image. `1` means no compression (highest quality) and `0` the highest compression (lowest quality).

 |
| format(optional) | `[SaveFormat](#saveformat)` |

Specifies what type of compression should be used and what is the result file extension. `SaveFormat.PNG` compression is lossless but slower, `SaveFormat.JPEG` is faster but the image has visible artifacts. Defaults to `SaveFormat.JPEG`

 |

## Enums

### `FlipType`

#### `Horizontal`

`FlipType.Horizontal ＝ "horizontal"`

#### `Vertical`

`FlipType.Vertical ＝ "vertical"`

### `SaveFormat`

#### `JPEG`

`SaveFormat.JPEG ＝ "jpeg"`

#### `PNG`

`SaveFormat.PNG ＝ "png"`

#### `WEBP`

`SaveFormat.WEBP ＝ "webp"`

---

# Expo ImagePicker

`expo-image-picker` provides access to the system's UI for selecting images and videos from the phone's library or taking a photo with the camera.

## Installation

`npx expo install expo-image-picker`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

#### Known issues 

iOS

On iOS, when an image (usually of a [higher resolution](http://www.openradar.me/49866214)) is picked from the camera roll, the result of the cropped image gives the wrong value for the cropped rectangle in some cases. Unfortunately, this issue is with the underlying `UIImagePickerController` due to a bug in the closed-source tools built into iOS.

## Configuration in app config

You can configure `expo-image-picker` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-image-picker",
    {
      "photosPermission": "The app accesses your photos to let you share them with your friends."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `photosPermission` | `"Allow $(PRODUCT_NAME) to access your photos"` |
Only for: iOS

A string to set the `NSPhotoLibraryUsageDescription` permission message.

 |
| `cameraPermission` | `"Allow $(PRODUCT_NAME) to access your camera"` |

Only for: iOS

A string to set the `NSCameraUsageDescription` permission message.

 |
| `microphonePermission` | `"Allow $(PRODUCT_NAME) to access your microphone"` |

Only for: iOS

A string to set the `NSMicrophoneUsageDescription` permission message.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using a native ios project manually, then you need to add `NSPhotoLibraryUsageDescription`, `NSCameraUsageDescription`, and `NSMicrophoneUsageDescription` keys to your ios/\[app\]/Info.plist:

Info.plist

```
<key>NSPhotoLibraryUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to save photos</string>
<key>NSCameraUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to access your camera</string>
<key>NSMicrophoneUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to use your microphone</string>
```

## Usage

Image Picker

```
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
```
// No permissions request is necessary for launching the image library
let result = await ImagePicker.launchImageLibraryAsync({
  mediaTypes: ImagePicker.MediaTypeOptions.All,
  allowsEditing: true,
  aspect: [4, 3],
  quality: 1,
});
```
console.log(result);
```
if (!result.canceled) {
  setImage(result.assets[0].uri);
}
```
  };

  return (
```
<View style={styles.container}>
  <Button title="Pick an image from camera roll" onPress={pickImage} />
  {image && <Image source={{ uri: image }} style={styles.image} />}
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
```
  },
  image: {
```
width: 200,
height: 200,
```
  },
});
```

When you run this example and pick an image, you will see the image that you picked show up in your app, and a similar log will be shown in the console:

```
{
  "assets": ```
{
  "assetId": "C166F9F5-B5FE-4501-9531",
  "base64": null,
  "duration": null,
  "exif": null,
  "fileName": "IMG.HEIC",
  "fileSize": 6018901,
  "height": 3025,
  "type": "image",
  "uri": "file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg"
  "width": 3024
}
```
  ],
  "canceled": false
}
```

### With AWS S3

AWS storage example

An example of how to use AWS storage can be found in with-aws-storage-upload.

See [Amplify documentation guide to set up your project correctly.

### With Firebase

Firebase storage example

An example of how to use Firebase storage can be found in with-firebase-storage-upload.

See [Using Firebase guide to set up your project correctly.

## API

```
import * as ImagePicker from 'expo-image-picker';
```

## Hooks

### `useCameraPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions to access the camera. This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = ImagePicker.useCameraPermissions();
```

### `useMediaLibraryPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<{ writeOnly: boolean }>` |

Check or request permissions to access the media library. This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.

Returns:

`[null | [MediaLibraryPermissionResponse](#medialibrarypermissionresponse), RequestPermissionMethod<[MediaLibraryPermissionResponse](#medialibrarypermissionresponse)>, GetPermissionMethod<[MediaLibraryPermissionResponse](#medialibrarypermissionresponse)>]`

Example

```
const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();
```

## Methods

### `ImagePicker.getCameraPermissionsAsync()`

Checks user's permissions for accessing camera.

Returns:

`[Promise<[CameraPermissionResponse](#camerapermissionresponse)>`

A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).

### `ImagePicker.getMediaLibraryPermissionsAsync(writeOnly)`

| Parameter | Type | Description |
| --- | --- | --- |
| writeOnly(optional) | `boolean` |
Whether to request write or read and write permissions. Defaults to `false`

Default:`false`

 |

Checks user's permissions for accessing photos.

Returns:

`[Promise<[MediaLibraryPermissionResponse](#medialibrarypermissionresponse)>`

A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).

### `ImagePicker.getPendingResultAsync()`

Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this happens, we lost the data selected from the `ImagePicker`. However, you can retrieve the lost data by calling `getPendingResultAsync`. You can test this functionality by turning on `Don't keep activities` in the developer options.

Returns:

`[Promise<([ImagePickerResult](#imagepickerresult) | [ImagePickerErrorResult](#imagepickererrorresult))>`

*   On Android: a promise that resolves to an array of objects of exactly same type as in `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker` finished successfully. Otherwise, to the array of `ImagePickerErrorResult`.
*   On other platforms: an empty array.

### `ImagePicker.launchCameraAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[ImagePickerOptions](#imagepickeroptions)` |
An `ImagePickerOptions` object.

Default:`{}`

 |

Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`. On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be called immediately in a user interaction like a button press, otherwise the browser will block the request without a warning.

> Note: Make sure that you handle `MainActivity` destruction on Android. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync). Notes for Web: The system UI can only be shown after user activation (e.g. a `Button` press). Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will not work as intended. The `cancelled` event will not be returned in the browser due to platform restrictions and inconsistencies across browsers.

Returns:

`[Promise<[ImagePickerResult](#imagepickerresult)>`

A promise that resolves to an object with `canceled` and `assets` fields. When the user canceled the action the `assets` is always `null`, otherwise it's an array of the selected media assets which have a form of `ImagePickerAsset`.

### `ImagePicker.launchImageLibraryAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[ImagePickerOptions](#imagepickeroptions)` |
An object extended by `ImagePickerOptions`.

 |

Display the system UI for choosing an image or a video from the phone's library. Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be called immediately in a user interaction like a button press, otherwise the browser will block the request without a warning.

Animated GIFs support: On Android, if the selected image is an animated GIF, the result image will be an animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`. Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.

> Notes for Web: The system UI can only be shown after user activation (e.g. a `Button` press). Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will not work as intended. The `cancelled` event will not be returned in the browser due to platform restrictions and inconsistencies across browsers.

Returns:

`[Promise<[ImagePickerResult](#imagepickerresult)>`

A promise that resolves to an object with `canceled` and `assets` fields. When the user canceled the action the `assets` is always `null`, otherwise it's an array of the selected media assets which have a form of `ImagePickerAsset`.

### `ImagePicker.requestCameraPermissionsAsync()`

Asks the user to grant permissions for accessing camera. This does nothing on web because the browser camera is not used.

Returns:

`[Promise<[CameraPermissionResponse](#camerapermissionresponse)>`

A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).

### `ImagePicker.requestMediaLibraryPermissionsAsync(writeOnly)`

| Parameter | Type | Description |
| --- | --- | --- |
| writeOnly(optional) | `boolean` |
Whether to request write or read and write permissions. Defaults to `false`

Default:`false`

 |

Asks the user to grant permissions for accessing user's photo. This method does nothing on web.

Returns:

`[Promise<[MediaLibraryPermissionResponse](#medialibrarypermissionresponse)>`

A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `CameraPermissionResponse`

Type: `[PermissionResponse](#permissionresponse)`

Alias for `PermissionResponse` type exported by `expo-modules-core`.

### `ImagePickerAsset`

Represents an asset (image or video) returned by the image picker or camera.

| Property | Type | Description |
| --- | --- | --- |
| assetId(optional) | `string | null` |
Only for: Android, iOS

The unique ID that represents the picked image or video, if picked from the library. It can be used by [expo-media-library to manage the picked asset.

> This might be `null` when the ID is unavailable or the user gave limited permission to access the media library. On Android, the ID is unavailable when the user selects a photo by directly browsing file system.

 |
| base64(optional) | `string | null` |

When the `base64` option is truthy, it is a Base64-encoded string of the selected image's JPEG data, otherwise `null`. If you prepend this with `'data:image/jpeg;base64,'` to create a data URI, you can use it as the source of an `Image` element; for example:

```
<Image
  source={{ uri: 'data:image/jpeg;base64,' + asset.base64 }}
  style={{ width: 200, height: 200 }}
/>
```

 |
| duration(optional) | `number | null` |

Length of the video in milliseconds or `null` if the asset is not a video.

 |
| exif(optional) | `Record<string, any> | null` |

The `exif` field is included if the `exif` option is truthy, and is an object containing the image's EXIF data. The names of this object's properties are EXIF tags and the values are the respective EXIF values for those tags.

 |
| fileName(optional) | `string | null` |

Preferred filename to use when saving this item. This might be `null` when the name is unavailable or user gave limited permission to access the media library.

 |
| fileSize(optional) | `number` |

File size of the picked image or video, in bytes.

 |
| height | `number` |

Height of the image or video.

 |
| mimeType(optional) | `string` |

The MIME type of the selected asset or `null` if could not be determined.

 |
| type(optional) | `'image' | 'video'` |

The type of the asset.

 |
| uri | `string` |

URI to the local image or video file (usable as the source of an `Image` element, in the case of an image) and `width` and `height` specify the dimensions of the media.

 |
| width | `number` |

Width of the image or video.

 |

### `ImagePickerCanceledResult`

Type representing canceled pick result.

| Property | Type | Description |
| --- | --- | --- |
| assets | `null` |
`null` signifying that the request was canceled.

 |
| canceled | `true` |

Boolean flag set to `true` showing that the request was canceled.

 |

### `ImagePickerErrorResult`

| Property | Type | Description |
| --- | --- | --- |
| code | `string` |
The error code.

 |
| exception(optional) | `string` |

The exception which caused the error.

 |
| message | `string` |

The error message.

 |

### `ImagePickerOptions`

| Property | Type | Description |
| --- | --- | --- |
| allowsEditing(optional) | `boolean` |
Only for: Android, iOS

Whether to show a UI to edit the image after it is picked. On Android the user can crop and rotate the image and on iOS simply crop it.

> *   Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.
> *   On iOS, this option is ignored if `allowsMultipleSelection` is enabled.
> *   On iOS cropping a `.bmp` image will convert it to `.png`.

Default:`false`

 |
| allowsMultipleSelection(optional) | `boolean` |

Only for: Android, iOS 14+

Whether or not to allow selecting multiple media files at once.

> Cropping multiple images is not supported - this option is mutually exclusive with `allowsEditing`. If this option is enabled, then `allowsEditing` is ignored.

Default:`false`

 |
| aspect(optional) | `[number, number]` |

An array with two entries `[x, y]` specifying the aspect ratio to maintain if the user is allowed to edit the image (by passing `allowsEditing: true`). This is only applicable on Android, since on iOS the crop rectangle is always a square.

 |
| base64(optional) | `boolean` |

Whether to also include the image data in Base64 format.

 |
| cameraType(optional) | `[CameraType](#cameratype)` |

Only for: Android, iOS

Selects the camera-facing type. The `CameraType` enum provides two options: `front` for the front-facing camera and `back` for the back-facing camera.

*   On Android, the behavior of this option may vary based on the camera app installed on the device.

Default:`CameraType.back`

 |
| exif(optional) | `boolean` |

Whether to also include the EXIF data for the image. On iOS the EXIF data does not include GPS tags in the camera case.

 |
| legacy(optional) | `boolean` |

Only for: Android

Uses the legacy image picker on Android. This will allow media to be selected from outside the users photo library.

Default:`false`

 |
| mediaTypes(optional) | `[MediaTypeOptions](#mediatypeoptions)` |

Choose what type of media to pick.

Default:`ImagePicker.MediaTypeOptions.Images`

 |
| orderedSelection(optional) | `boolean` |

Only for: iOS 15+

Whether to display number badges when assets are selected. The badges are numbered in selection order. Assets are then returned in the exact same order they were selected.

> Assets should be returned in the selection order regardless of this option, but there is no guarantee that it is always true when this option is disabled.

Default:`false`

 |
| preferredAssetRepresentationMode(optional) | `[UIImagePickerPreferredAssetRepresentationMode](#uiimagepickerpreferredassetrepresentationmode)` |

Only for: iOS 14+

Choose [preferred asset representation mode to use when loading assets.

Default:`ImagePicker.UIImagePickerPreferredAssetRepresentationMode.Automatic`

 |
| presentationStyle(optional) | `[UIImagePickerPresentationStyle](#uiimagepickerpresentationstyle)` |

Only for: iOS

Choose [presentation style to customize view during taking photo/video.

Default:`ImagePicker.UIImagePickerPresentationStyle.Automatic`

 |
| quality(optional) | `number` |

Only for: Android, iOS

Specify the quality of compression, from `0` to `1`. `0` means compress for small size, `1` means compress for maximum quality.

> Note: If the selected image has been compressed before, the size of the output file may be bigger than the size of the original image.

> Note: On iOS, if a `.bmp` or `.png` image is selected from the library, this option is ignored.

Default:`0.2`

 |
| selectionLimit(optional) | `number` |

Only for: Android, iOS 14+

The maximum number of items that user can select. Applicable when `allowsMultipleSelection` is enabled. Setting the value to `0` sets the selection limit to the maximum that the system supports.

Default:`0`

 |
| videoExportPreset(optional) | `[VideoExportPreset](#videoexportpreset)` |

> Deprecated See [`videoExportPreset` in Apple documentation.

Only for: iOS 11+

Specify preset which will be used to compress selected video.

Default:`ImagePicker.VideoExportPreset.Passthrough`

 |
| videoMaxDuration(optional) | `number` |

Maximum duration, in seconds, for video recording. Setting this to `0` disables the limit. Defaults to `0` (no limit).

*   On iOS, when `allowsEditing` is set to `true`, maximum duration is limited to 10 minutes. This limit is applied automatically, if `0` or no value is specified.
*   On Android, effect of this option depends on support of installed camera app.
*   On Web this option has no effect - the limit is browser-dependant.

 |
| videoQuality(optional) | `[UIImagePickerControllerQualityType](#uiimagepickercontrollerqualitytype)` |

Only for: iOS

Specify the quality of recorded videos. Defaults to the highest quality available for the device.

Default:`ImagePicker.UIImagePickerControllerQualityType.High`

 |

### `ImagePickerResult`

Literal Type: `union`

Type representing successful and canceled pick result.

Acceptable values are: `[ImagePickerSuccessResult](#imagepickersuccessresult)` | `[ImagePickerCanceledResult](#imagepickercanceledresult)`

### `ImagePickerSuccessResult`

Type representing successful pick result.

| Property | Type | Description |
| --- | --- | --- |
| assets | `[ImagePickerAsset](#imagepickerasset)` |
An array of picked assets.

 |
| canceled | `false` |

Boolean flag set to `false` showing that the request was successful.

 |

### `MediaLibraryPermissionResponse`

Extends `PermissionResponse` type exported by `expo-modules-core`, containing additional iOS-specific field.

Type: `[PermissionResponse](#permissionresponse)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| accessPrivileges(optional) | `'all' | 'limited' | 'none'` |
Indicates if your app has access to the whole or only part of the photo library. Possible values are:

*   `'all'` if the user granted your app access to the whole photo library
*   `'limited'` if the user granted your app access only to selected photos (only available on Android API 34+ and iOS 14.0+)
*   `'none'` if user denied or hasn't yet granted the permission

 |

### `OpenFileBrowserOptions`

| Property | Type | Description |
| --- | --- | --- |
| allowsMultipleSelection | `boolean` |
Only for: Web

Whether or not to allow selecting multiple media files at once.

 |
| base64 | `boolean` |

Whether to also include the image data in Base64 format.

 |
| capture(optional) | `boolean` |

\-

 |
| mediaTypes(optional) | `[MediaTypeOptions](#mediatypeoptions)` |

Choose what type of media to pick.

Default:`ImagePicker.MediaTypeOptions.Images`

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

## Enums

### `CameraType`

#### `back`

`CameraType.back ＝ "back"`

Back/rear camera.

#### `front`

`CameraType.front ＝ "front"`

Front camera

### `MediaTypeOptions`

#### `All`

`MediaTypeOptions.All ＝ "All"`

Images and videos.

#### `Images`

`MediaTypeOptions.Images ＝ "Images"`

Only images.

#### `Videos`

`MediaTypeOptions.Videos ＝ "Videos"`

Only videos.

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

### `UIImagePickerControllerQualityType`

#### `High`

`UIImagePickerControllerQualityType.High ＝ 0`

Highest available resolution.

#### `Medium`

`UIImagePickerControllerQualityType.Medium ＝ 1`

Depends on the device.

#### `Low`

`UIImagePickerControllerQualityType.Low ＝ 2`

Depends on the device.

#### `VGA640x480`

`UIImagePickerControllerQualityType.VGA640x480 ＝ 3`

640 × 480

#### `IFrame1280x720`

`UIImagePickerControllerQualityType.IFrame1280x720 ＝ 4`

1280 × 720

#### `IFrame960x540`

`UIImagePickerControllerQualityType.IFrame960x540 ＝ 5`

960 × 540

### `UIImagePickerPreferredAssetRepresentationMode`

Only for: iOS

Picker preferred asset representation mode. Its values are directly mapped to the [`PHPickerConfigurationAssetRepresentationMode`.

#### `Automatic`

`UIImagePickerPreferredAssetRepresentationMode.Automatic ＝ "automatic"`

A mode that indicates that the system chooses the appropriate asset representation.

#### `Compatible`

`UIImagePickerPreferredAssetRepresentationMode.Compatible ＝ "compatible"`

A mode that uses the most compatible asset representation.

#### `Current`

`UIImagePickerPreferredAssetRepresentationMode.Current ＝ "current"`

A mode that uses the current representation to avoid transcoding, if possible.

### `UIImagePickerPresentationStyle`

Only for: iOS

Picker presentation style. Its values are directly mapped to the [`UIModalPresentationStyle`.

#### `AUTOMATIC`

Only for: iOS

`UIImagePickerPresentationStyle.AUTOMATIC ＝ "automatic"`

The default presentation style chosen by the system. On older iOS versions, falls back to `WebBrowserPresentationStyle.FullScreen`.

#### `CURRENT_CONTEXT`

`UIImagePickerPresentationStyle.CURRENT_CONTEXT ＝ "currentContext"`

A presentation style where the picker is displayed over the app's content.

#### `FORM_SHEET`

`UIImagePickerPresentationStyle.FORM_SHEET ＝ "formSheet"`

A presentation style that displays the picker centered in the screen.

#### `FULL_SCREEN`

`UIImagePickerPresentationStyle.FULL_SCREEN ＝ "fullScreen"`

A presentation style in which the presented picker covers the screen.

#### `OVER_CURRENT_CONTEXT`

`UIImagePickerPresentationStyle.OVER_CURRENT_CONTEXT ＝ "overCurrentContext"`

A presentation style where the picker is displayed over the app's content.

#### `OVER_FULL_SCREEN`

`UIImagePickerPresentationStyle.OVER_FULL_SCREEN ＝ "overFullScreen"`

A presentation style in which the picker view covers the screen.

#### `PAGE_SHEET`

`UIImagePickerPresentationStyle.PAGE_SHEET ＝ "pageSheet"`

A presentation style that partially covers the underlying content.

#### `POPOVER`

`UIImagePickerPresentationStyle.POPOVER ＝ "popover"`

A presentation style where the picker is displayed in a popover view.

### `VideoExportPreset`

#### `Passthrough`

`VideoExportPreset.Passthrough ＝ 0`

Resolution: Unchanged Video compression: None Audio compression: None

#### `LowQuality`

`VideoExportPreset.LowQuality ＝ 1`

Resolution: Depends on the device Video compression: H.264 Audio compression: AAC

#### `MediumQuality`

`VideoExportPreset.MediumQuality ＝ 2`

Resolution: Depends on the device Video compression: H.264 Audio compression: AAC

#### `HighestQuality`

`VideoExportPreset.HighestQuality ＝ 3`

Resolution: Depends on the device Video compression: H.264 Audio compression: AAC

#### `H264_640x480`

`VideoExportPreset.H264_640x480 ＝ 4`

Resolution: 640 × 480 Video compression: H.264 Audio compression: AAC

#### `H264_960x540`

`VideoExportPreset.H264_960x540 ＝ 5`

Resolution: 960 × 540 Video compression: H.264 Audio compression: AAC

#### `H264_1280x720`

`VideoExportPreset.H264_1280x720 ＝ 6`

Resolution: 1280 × 720 Video compression: H.264 Audio compression: AAC

#### `H264_1920x1080`

`VideoExportPreset.H264_1920x1080 ＝ 7`

Resolution: 1920 × 1080 Video compression: H.264 Audio compression: AAC

#### `H264_3840x2160`

`VideoExportPreset.H264_3840x2160 ＝ 8`

Resolution: 3840 × 2160 Video compression: H.264 Audio compression: AAC

#### `HEVC_1920x1080`

`VideoExportPreset.HEVC_1920x1080 ＝ 9`

Resolution: 1920 × 1080 Video compression: HEVC Audio compression: AAC

#### `HEVC_3840x2160`

`VideoExportPreset.HEVC_3840x2160 ＝ 10`

Resolution: 3840 × 2160 Video compression: HEVC Audio compression: AAC

## Permissions

### Android

The following permissions are added automatically through the library's AndroidManifest.xml.

| Android Permission | Description |
| --- | --- |
|
`CAMERA`

 |

Required to be able to access the camera device.

 |
|

`READ_EXTERNAL_STORAGE`

 |

Allows an application to read from external storage.

 |
|

`WRITE_EXTERNAL_STORAGE`

 |

Allows an application to write to external storage.

 |

### iOS

The following usage description keys are used by the APIs in this library.

| Info.plist Key | Description |
| --- | --- |
|
`NSMicrophoneUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s microphone. |
|

`NSPhotoLibraryUsageDescription`

 | A message that tells the user why the app is requesting access to the user’s photo library. |
|

`NSCameraUsageDescription`

 | A message that tells the user why the app is requesting access to the device’s camera. |

---

# Expo IntentLauncher

`expo-intent-launcher` provides a way to launch Android intents. For example, you can use this API to open a specific settings screen.

## Installation

`npx expo install expo-intent-launcher`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

```
import { startActivityAsync, ActivityAction } from 'expo-intent-launcher';

// Open location settings
startActivityAsync(ActivityAction.LOCATION_SOURCE_SETTINGS);
```

## API

```
import * as IntentLauncher from 'expo-intent-launcher';
```

## Methods

### `IntentLauncher.startActivityAsync(activityAction, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| activityAction | `string` |
The action to be performed, e.g. `IntentLauncher.ActivityAction.WIRELESS_SETTINGS`. There are a few pre-defined constants you can use for this parameter. You can find them at [expo-intent-launcher/src/IntentLauncher.ts.

 |
| params(optional) | `[IntentLauncherParams](#intentlauncherparams)` |

An object of intent parameters.

Default:`{}`

 |

Starts the specified activity. The method will return a promise which resolves when the user returns to the app.

Returns:

`[Promise<[IntentLauncherResult](#intentlauncherresult)>`

A promise which fulfils with `IntentLauncherResult` object.

## Interfaces

### `IntentLauncherParams`

| Property | Type | Description |
| --- | --- | --- |
| category(optional) | `string` |
Category provides more details about the action the intent performs. See [Intent.addCategory).

 |
| className(optional) | `string` |

Class name of the ComponentName.

 |
| data(optional) | `string` |

A URI specifying the data that the intent should operate upon. (_Note:_ Android requires the URI scheme to be lowercase, unlike the formal RFC.)

 |
| extra(optional) | `Record<string, any>` |

A map specifying additional key-value pairs which are passed with the intent as `extras`. The keys must include a package prefix, for example the app `com.android.contacts` would use names like `com.android.contacts.ShowAll`.

 |
| flags(optional) | `number` |

Bitmask of flags to be used. See [Intent.setFlags) for more details.

 |
| packageName(optional) | `string` |

Package name used as an identifier of ComponentName. Set this only if you want to explicitly set the component to handle the intent.

 |
| type(optional) | `string` |

A string specifying the MIME type of the data represented by the data parameter. Ignore this argument to allow Android to infer the correct MIME type.

 |

### `IntentLauncherResult`

| Property | Type | Description |
| --- | --- | --- |
| data(optional) | `string` |
Optional data URI that can be returned by the activity.

 |
| extra(optional) | `object` |

Optional extras object that can be returned by the activity.

 |
| resultCode | `[ResultCode](#resultcode)` |

Result code returned by the activity.

 |

## Enums

### `ActivityAction`

Constants are from the source code of [Settings provider.

#### `ACCESSIBILITY_SETTINGS`

`ActivityAction.ACCESSIBILITY_SETTINGS ＝ "android.settings.ACCESSIBILITY_SETTINGS"`

#### `APP_NOTIFICATION_REDACTION`

`ActivityAction.APP_NOTIFICATION_REDACTION ＝ "android.settings.ACTION_APP_NOTIFICATION_REDACTION"`

#### `CONDITION_PROVIDER_SETTINGS`

`ActivityAction.CONDITION_PROVIDER_SETTINGS ＝ "android.settings.ACTION_CONDITION_PROVIDER_SETTINGS"`

#### `NOTIFICATION_LISTENER_SETTINGS`

`ActivityAction.NOTIFICATION_LISTENER_SETTINGS ＝ "android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS"`

#### `PRINT_SETTINGS`

`ActivityAction.PRINT_SETTINGS ＝ "android.settings.ACTION_PRINT_SETTINGS"`

#### `ADD_ACCOUNT_SETTINGS`

`ActivityAction.ADD_ACCOUNT_SETTINGS ＝ "android.settings.ADD_ACCOUNT_SETTINGS"`

#### `AIRPLANE_MODE_SETTINGS`

`ActivityAction.AIRPLANE_MODE_SETTINGS ＝ "android.settings.AIRPLANE_MODE_SETTINGS"`

#### `APN_SETTINGS`

`ActivityAction.APN_SETTINGS ＝ "android.settings.APN_SETTINGS"`

#### `APP_NOTIFICATION_SETTINGS`

`ActivityAction.APP_NOTIFICATION_SETTINGS ＝ "android.settings.APP_NOTIFICATION_SETTINGS"`

#### `APP_OPS_SETTINGS`

`ActivityAction.APP_OPS_SETTINGS ＝ "android.settings.APP_OPS_SETTINGS"`

#### `APPLICATION_DETAILS_SETTINGS`

`ActivityAction.APPLICATION_DETAILS_SETTINGS ＝ "android.settings.APPLICATION_DETAILS_SETTINGS"`

#### `APPLICATION_DEVELOPMENT_SETTINGS`

`ActivityAction.APPLICATION_DEVELOPMENT_SETTINGS ＝ "android.settings.APPLICATION_DEVELOPMENT_SETTINGS"`

#### `APPLICATION_SETTINGS`

`ActivityAction.APPLICATION_SETTINGS ＝ "android.settings.APPLICATION_SETTINGS"`

#### `BATTERY_SAVER_SETTINGS`

`ActivityAction.BATTERY_SAVER_SETTINGS ＝ "android.settings.BATTERY_SAVER_SETTINGS"`

#### `BLUETOOTH_SETTINGS`

`ActivityAction.BLUETOOTH_SETTINGS ＝ "android.settings.BLUETOOTH_SETTINGS"`

#### `CAPTIONING_SETTINGS`

`ActivityAction.CAPTIONING_SETTINGS ＝ "android.settings.CAPTIONING_SETTINGS"`

#### `CAST_SETTINGS`

`ActivityAction.CAST_SETTINGS ＝ "android.settings.CAST_SETTINGS"`

#### `DATA_ROAMING_SETTINGS`

`ActivityAction.DATA_ROAMING_SETTINGS ＝ "android.settings.DATA_ROAMING_SETTINGS"`

#### `DATE_SETTINGS`

`ActivityAction.DATE_SETTINGS ＝ "android.settings.DATE_SETTINGS"`

#### `DEVICE_INFO_SETTINGS`

`ActivityAction.DEVICE_INFO_SETTINGS ＝ "android.settings.DEVICE_INFO_SETTINGS"`

#### `DEVICE_NAME`

`ActivityAction.DEVICE_NAME ＝ "android.settings.DEVICE_NAME"`

#### `DISPLAY_SETTINGS`

`ActivityAction.DISPLAY_SETTINGS ＝ "android.settings.DISPLAY_SETTINGS"`

#### `DREAM_SETTINGS`

`ActivityAction.DREAM_SETTINGS ＝ "android.settings.DREAM_SETTINGS"`

#### `HARD_KEYBOARD_SETTINGS`

`ActivityAction.HARD_KEYBOARD_SETTINGS ＝ "android.settings.HARD_KEYBOARD_SETTINGS"`

#### `HOME_SETTINGS`

`ActivityAction.HOME_SETTINGS ＝ "android.settings.HOME_SETTINGS"`

#### `IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS`

`ActivityAction.IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS ＝ "android.settings.IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS"`

#### `IGNORE_BATTERY_OPTIMIZATION_SETTINGS`

`ActivityAction.IGNORE_BATTERY_OPTIMIZATION_SETTINGS ＝ "android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS"`

#### `INPUT_METHOD_SETTINGS`

`ActivityAction.INPUT_METHOD_SETTINGS ＝ "android.settings.INPUT_METHOD_SETTINGS"`

#### `INPUT_METHOD_SUBTYPE_SETTINGS`

`ActivityAction.INPUT_METHOD_SUBTYPE_SETTINGS ＝ "android.settings.INPUT_METHOD_SUBTYPE_SETTINGS"`

#### `INTERNAL_STORAGE_SETTINGS`

`ActivityAction.INTERNAL_STORAGE_SETTINGS ＝ "android.settings.INTERNAL_STORAGE_SETTINGS"`

#### `LOCALE_SETTINGS`

`ActivityAction.LOCALE_SETTINGS ＝ "android.settings.LOCALE_SETTINGS"`

#### `LOCATION_SOURCE_SETTINGS`

`ActivityAction.LOCATION_SOURCE_SETTINGS ＝ "android.settings.LOCATION_SOURCE_SETTINGS"`

#### `MANAGE_ALL_APPLICATIONS_SETTINGS`

`ActivityAction.MANAGE_ALL_APPLICATIONS_SETTINGS ＝ "android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS"`

#### `MANAGE_APPLICATIONS_SETTINGS`

`ActivityAction.MANAGE_APPLICATIONS_SETTINGS ＝ "android.settings.MANAGE_APPLICATIONS_SETTINGS"`

#### `MANAGE_DEFAULT_APPS_SETTINGS`

`ActivityAction.MANAGE_DEFAULT_APPS_SETTINGS ＝ "android.settings.MANAGE_DEFAULT_APPS_SETTINGS"`

#### `MEMORY_CARD_SETTINGS`

`ActivityAction.MEMORY_CARD_SETTINGS ＝ "android.settings.MEMORY_CARD_SETTINGS"`

#### `MONITORING_CERT_INFO`

`ActivityAction.MONITORING_CERT_INFO ＝ "android.settings.MONITORING_CERT_INFO"`

#### `NETWORK_OPERATOR_SETTINGS`

`ActivityAction.NETWORK_OPERATOR_SETTINGS ＝ "android.settings.NETWORK_OPERATOR_SETTINGS"`

#### `NFC_PAYMENT_SETTINGS`

`ActivityAction.NFC_PAYMENT_SETTINGS ＝ "android.settings.NFC_PAYMENT_SETTINGS"`

#### `NFC_SETTINGS`

`ActivityAction.NFC_SETTINGS ＝ "android.settings.NFC_SETTINGS"`

#### `NFCSHARING_SETTINGS`

`ActivityAction.NFCSHARING_SETTINGS ＝ "android.settings.NFCSHARING_SETTINGS"`

#### `NIGHT_DISPLAY_SETTINGS`

`ActivityAction.NIGHT_DISPLAY_SETTINGS ＝ "android.settings.NIGHT_DISPLAY_SETTINGS"`

#### `NOTIFICATION_POLICY_ACCESS_SETTINGS`

`ActivityAction.NOTIFICATION_POLICY_ACCESS_SETTINGS ＝ "android.settings.NOTIFICATION_POLICY_ACCESS_SETTINGS"`

#### `NOTIFICATION_SETTINGS`

`ActivityAction.NOTIFICATION_SETTINGS ＝ "android.settings.NOTIFICATION_SETTINGS"`

#### `PAIRING_SETTINGS`

`ActivityAction.PAIRING_SETTINGS ＝ "android.settings.PAIRING_SETTINGS"`

#### `PRIVACY_SETTINGS`

`ActivityAction.PRIVACY_SETTINGS ＝ "android.settings.PRIVACY_SETTINGS"`

#### `QUICK_LAUNCH_SETTINGS`

`ActivityAction.QUICK_LAUNCH_SETTINGS ＝ "android.settings.QUICK_LAUNCH_SETTINGS"`

#### `REQUEST_IGNORE_BATTERY_OPTIMIZATIONS`

`ActivityAction.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS ＝ "android.settings.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"`

#### `SECURITY_SETTINGS`

`ActivityAction.SECURITY_SETTINGS ＝ "android.settings.SECURITY_SETTINGS"`

#### `SETTINGS`

`ActivityAction.SETTINGS ＝ "android.settings.SETTINGS"`

#### `SHOW_ADMIN_SUPPORT_DETAILS`

`ActivityAction.SHOW_ADMIN_SUPPORT_DETAILS ＝ "android.settings.SHOW_ADMIN_SUPPORT_DETAILS"`

#### `SHOW_INPUT_METHOD_PICKER`

`ActivityAction.SHOW_INPUT_METHOD_PICKER ＝ "android.settings.SHOW_INPUT_METHOD_PICKER"`

#### `SHOW_REGULATORY_INFO`

`ActivityAction.SHOW_REGULATORY_INFO ＝ "android.settings.SHOW_REGULATORY_INFO"`

#### `SHOW_REMOTE_BUGREPORT_DIALOG`

`ActivityAction.SHOW_REMOTE_BUGREPORT_DIALOG ＝ "android.settings.SHOW_REMOTE_BUGREPORT_DIALOG"`

#### `SOUND_SETTINGS`

`ActivityAction.SOUND_SETTINGS ＝ "android.settings.SOUND_SETTINGS"`

#### `STORAGE_MANAGER_SETTINGS`

`ActivityAction.STORAGE_MANAGER_SETTINGS ＝ "android.settings.STORAGE_MANAGER_SETTINGS"`

#### `SYNC_SETTINGS`

`ActivityAction.SYNC_SETTINGS ＝ "android.settings.SYNC_SETTINGS"`

#### `SYSTEM_UPDATE_SETTINGS`

`ActivityAction.SYSTEM_UPDATE_SETTINGS ＝ "android.settings.SYSTEM_UPDATE_SETTINGS"`

#### `TETHER_PROVISIONING_UI`

`ActivityAction.TETHER_PROVISIONING_UI ＝ "android.settings.TETHER_PROVISIONING_UI"`

#### `TRUSTED_CREDENTIALS_USER`

`ActivityAction.TRUSTED_CREDENTIALS_USER ＝ "android.settings.TRUSTED_CREDENTIALS_USER"`

#### `USAGE_ACCESS_SETTINGS`

`ActivityAction.USAGE_ACCESS_SETTINGS ＝ "android.settings.USAGE_ACCESS_SETTINGS"`

#### `USER_DICTIONARY_INSERT`

`ActivityAction.USER_DICTIONARY_INSERT ＝ "android.settings.USER_DICTIONARY_INSERT"`

#### `USER_DICTIONARY_SETTINGS`

`ActivityAction.USER_DICTIONARY_SETTINGS ＝ "android.settings.USER_DICTIONARY_SETTINGS"`

#### `USER_SETTINGS`

`ActivityAction.USER_SETTINGS ＝ "android.settings.USER_SETTINGS"`

#### `VOICE_CONTROL_AIRPLANE_MODE`

`ActivityAction.VOICE_CONTROL_AIRPLANE_MODE ＝ "android.settings.VOICE_CONTROL_AIRPLANE_MODE"`

#### `VOICE_CONTROL_BATTERY_SAVER_MODE`

`ActivityAction.VOICE_CONTROL_BATTERY_SAVER_MODE ＝ "android.settings.VOICE_CONTROL_BATTERY_SAVER_MODE"`

#### `VOICE_CONTROL_DO_NOT_DISTURB_MODE`

`ActivityAction.VOICE_CONTROL_DO_NOT_DISTURB_MODE ＝ "android.settings.VOICE_CONTROL_DO_NOT_DISTURB_MODE"`

#### `VOICE_INPUT_SETTINGS`

`ActivityAction.VOICE_INPUT_SETTINGS ＝ "android.settings.VOICE_INPUT_SETTINGS"`

#### `VPN_SETTINGS`

`ActivityAction.VPN_SETTINGS ＝ "android.settings.VPN_SETTINGS"`

#### `VR_LISTENER_SETTINGS`

`ActivityAction.VR_LISTENER_SETTINGS ＝ "android.settings.VR_LISTENER_SETTINGS"`

#### `WEBVIEW_SETTINGS`

`ActivityAction.WEBVIEW_SETTINGS ＝ "android.settings.WEBVIEW_SETTINGS"`

#### `WIFI_IP_SETTINGS`

`ActivityAction.WIFI_IP_SETTINGS ＝ "android.settings.WIFI_IP_SETTINGS"`

#### `WIFI_SETTINGS`

`ActivityAction.WIFI_SETTINGS ＝ "android.settings.WIFI_SETTINGS"`

#### `WIRELESS_SETTINGS`

`ActivityAction.WIRELESS_SETTINGS ＝ "android.settings.WIRELESS_SETTINGS"`

#### `ZEN_MODE_AUTOMATION_SETTINGS`

`ActivityAction.ZEN_MODE_AUTOMATION_SETTINGS ＝ "android.settings.ZEN_MODE_AUTOMATION_SETTINGS"`

#### `ZEN_MODE_EVENT_RULE_SETTINGS`

`ActivityAction.ZEN_MODE_EVENT_RULE_SETTINGS ＝ "android.settings.ZEN_MODE_EVENT_RULE_SETTINGS"`

#### `ZEN_MODE_EXTERNAL_RULE_SETTINGS`

`ActivityAction.ZEN_MODE_EXTERNAL_RULE_SETTINGS ＝ "android.settings.ZEN_MODE_EXTERNAL_RULE_SETTINGS"`

#### `ZEN_MODE_PRIORITY_SETTINGS`

`ActivityAction.ZEN_MODE_PRIORITY_SETTINGS ＝ "android.settings.ZEN_MODE_PRIORITY_SETTINGS"`

#### `ZEN_MODE_SCHEDULE_RULE_SETTINGS`

`ActivityAction.ZEN_MODE_SCHEDULE_RULE_SETTINGS ＝ "android.settings.ZEN_MODE_SCHEDULE_RULE_SETTINGS"`

#### `ZEN_MODE_SETTINGS`

`ActivityAction.ZEN_MODE_SETTINGS ＝ "android.settings.ZEN_MODE_SETTINGS"`

### `ResultCode`

#### `Success`

`ResultCode.Success ＝ -1`

Indicates that the activity operation succeeded.

#### `Canceled`

`ResultCode.Canceled ＝ 0`

Means that the activity was canceled, e.g. by tapping on the back button.

#### `FirstUser`

`ResultCode.FirstUser ＝ 1`

First custom, user-defined value that can be returned by the activity.

---

# Expo KeepAwake

`expo-keep-awake` provides a React hook that prevents the screen from sleeping and a pair of functions to enable this behavior imperatively.

## Installation

`npx expo install expo-keep-awake`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

### Example: hook

Keep Awake hook

```
import { useKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Text, View } from 'react-native';

export default function KeepAwakeExample() {
  useKeepAwake();
  return (
```
<View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
  <Text>This screen will never sleep!</Text>
</View>
```
  );
}
```

### Example: functions

Keep Awake functions

```
import { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Button, View } from 'react-native';

export default class KeepAwakeExample extends React.Component {
  render() {
```
return (
  <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
    <Button onPress={this._activate} title="Activate" />
    <Button onPress={this._deactivate} title="Deactivate" />
  </View>
);
```
  }

  _activate = () => {
```
activateKeepAwake();
alert('Activated!');
```
  };

  _deactivate = () => {
```
deactivateKeepAwake();
alert('Deactivated!');
```
  };
}
```

## API

```
import * as KeepAwake from 'expo-keep-awake';
```

## Constants

### `KeepAwake.ExpoKeepAwakeTag`

Type: `'ExpoKeepAwakeDefaultTag'`

Default tag, used when no tag has been specified in keep awake method calls.

## Hooks

### `useKeepAwake(tag, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| tag(optional) | `string` |
Tag to lock screen sleep prevention. If not provided, an ID unique to the owner component is used.

 |
| options(optional) | `[KeepAwakeOptions](#keepawakeoptions)` |

Additional options for the keep awake hook.

 |

A React hook to keep the screen awake for as long as the owner component is mounted. The optionally provided `tag` argument is used when activating and deactivating the keep-awake feature. If unspecified, an ID unique to the owner component is used. See the documentation for `activateKeepAwakeAsync` below to learn more about the `tag` argument.

Returns:

`void`

## Methods

> Deprecated use `activateKeepAwakeAsync` instead.

### `KeepAwake.activateKeepAwake(tag)`

| Parameter | Type | Description |
| --- | --- | --- |
| tag(optional) | `string` |
Tag to lock screen sleep prevention. If not provided, the default tag is used.

Default:`ExpoKeepAwakeTag`

 |

Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.

If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake` with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.

Web support [is limited.

Returns:

`[Promise<void>`

### `KeepAwake.activateKeepAwakeAsync(tag)`

| Parameter | Type | Description |
| --- | --- | --- |
| tag(optional) | `string` |
Tag to lock screen sleep prevention. If not provided, the default tag is used.

Default:`ExpoKeepAwakeTag`

 |

Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.

If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake` with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.

Web support [is limited.

Returns:

`[Promise<void>`

### `KeepAwake.deactivateKeepAwake(tag)`

| Parameter | Type | Description |
| --- | --- | --- |
| tag(optional) | `string` |
Tag to release the lock on screen sleep prevention. If not provided, the default tag is used.

Default:`ExpoKeepAwakeTag`

 |

Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag` is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.

Returns:

`[Promise<void>`

### `KeepAwake.isAvailableAsync()`

Returns:

`[Promise<boolean>`

`true` on all platforms except [unsupported web browsers.

## Event Subscriptions

### `KeepAwake.addListener(tagOrListener, listener)`

Only for: Web

| Parameter | Type |
| --- | --- |
| tagOrListener | `string | [KeepAwakeListener](#keepawakelistener)` |
| listener(optional) | `[KeepAwakeListener](#keepawakelistener)` |

Observe changes to the keep awake timer. On web, this changes when navigating away from the active window/tab. No-op on native.

Returns:

`[Subscription](#subscription)`

Example

```
KeepAwake.addListener(({ state }) => {
  // ...
});
```

## Types

### `KeepAwakeEvent`

| Property | Type | Description |
| --- | --- | --- |
| state | `[KeepAwakeEventState](#keepawakeeventstate)` |
Keep awake state.

 |

### `KeepAwakeListener(event)`

| Parameter | Type |
| --- | --- |
| event | `[KeepAwakeEvent](#keepawakeevent)` |

Returns:

`void`

### `KeepAwakeOptions`

| Property | Type | Description |
| --- | --- | --- |
| listener(optional) | `[KeepAwakeListener](#keepawakelistener)` |
Only for: Web

A callback that is invoked when the keep-awake state changes.

 |
| suppressDeactivateWarnings(optional) | `boolean` |

The call will throw an unhandled promise rejection on Android when the original Activity is dead or deactivated. Set the value to `true` for suppressing the uncaught exception.

 |

## Enums

### `KeepAwakeEventState`

#### `RELEASE`

`KeepAwakeEventState.RELEASE ＝ "release"`

---

# Expo LightSensor

`LightSensor` from `expo-sensors` provides access to the device's light sensor to respond to illuminance changes.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic Light Sensor usage

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { LightSensor } from 'expo-sensors';

export default function App() {
  const [{ illuminance }, setData] = useState({ illuminance: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggle = () => {
```
if (subscription) {
  unsubscribe();
} else {
  subscribe();
}
```
  };

  const subscribe = () => {
```
setSubscription(
  LightSensor.addListener(sensorData => {
    setData(sensorData);
  })
);
```
  };

  const unsubscribe = () => {
```
subscription && subscription.remove();
setSubscription(null);
```
  };

  useEffect(() => {
```
subscribe();
return () => unsubscribe();
```
  }, );

  return (
```
<View style={styles.sensor}>
  <Text>Light Sensor:</Text>
  <Text>
    Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}
  </Text>
  <View style={styles.buttonContainer}>
    <TouchableOpacity onPress={toggle} style={styles.button}>
      <Text>Toggle</Text>
    </TouchableOpacity>
  </View>
</View>
```
  );
}

const styles = StyleSheet.create({
  sensor: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
paddingHorizontal: 10,
```
  },
  buttonContainer: {
```
flexDirection: 'row',
alignItems: 'stretch',
marginTop: 15,
```
  },
  button: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
backgroundColor: '#eee',
padding: 10,
```
  },
});
```

## API

```
import { LightSensor } from 'expo-sensors';
```

## Classes

### `LightSensor`

Only for: Android

Type: Class extends `[DeviceSensor<[LightSensorMeasurement](#lightsensormeasurement)>`

LightSensor Methods

### `addListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `Listener<[LightSensorMeasurement](#lightsensormeasurement)>` |
A callback that is invoked when a LightSensor update is available. When invoked, the listener is provided a single argument that is the illuminance value.

 |

Subscribe for updates to the light sensor.

Returns:

`[Subscription](#subscription)`

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

Returns:

`number`

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

Returns:

`boolean`

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Returns whether the light sensor is available and enabled on the device. Requires at least Android 2.3 (API Level 9).

Returns:

`[Promise<boolean>`

A promise that resolves to a `boolean` denoting the availability of the light sensor.

### `removeAllListeners()`

Removes all registered listeners.

Returns:

`void`

### `removeSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
A subscription to remove.

 |

Removes the given subscription.

Returns:

`void`

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `setUpdateInterval(intervalMs)`

| Parameter | Type | Description |
| --- | --- | --- |
| intervalMs | `number` |
Desired interval in milliseconds between sensor updates.

> Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
>
> If you need an update interval less than 200ms, you should:
>
> *   add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [app.json `permissions` field
> *   or if you are using bare workflow, add `<uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/>` to AndroidManifest.xml.

 |

Set the sensor update interval.

Returns:

`void`

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `LightSensorMeasurement`

| Property | Type | Description |
| --- | --- | --- |
| illuminance | `number` |
Ambient light level registered by the device measured in lux (lx).

 |
| timestamp | `number` |

Timestamp of the measurement in seconds.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

---

# Expo LinearGradient

`expo-linear-gradient` provides a native React view that transitions between multiple colors in a linear direction.

## Installation

`npx expo install expo-linear-gradient`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Linear Gradient

```
import { StyleSheet, Text, View } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

export default function App() {
  return (
```
<View style={styles.container}>
  <LinearGradient
    // Background Linear Gradient
    colors={['rgba(0,0,0,0.8)', 'transparent']}
    style={styles.background}
  />
  <LinearGradient
    // Button Linear Gradient
    colors={['#4c669f', '#3b5998', '#192f6a']}
    style={styles.button}>
    <Text style={styles.text}>Sign in with Facebook</Text>
  </LinearGradient>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
backgroundColor: 'orange',
```
  },
  background: {
```
position: 'absolute',
left: 0,
right: 0,
top: 0,
height: 300,
```
  },
  button: {
```
padding: 15,
alignItems: 'center',
borderRadius: 5,
```
  },
  text: {
```
backgroundColor: 'transparent',
fontSize: 15,
color: '#fff',
```
  },
});
```

## API

```
import { LinearGradient } from 'expo-linear-gradient';
```

## Component

### `LinearGradient`

Type: `React.[Component<[LinearGradientProps](#lineargradientprops)>`

Renders a native view that transitions between multiple colors in a linear direction.

LinearGradientProps

### `colors`

Type: `readonly`

A readonly array of colors that represent stops in the gradient. At least two colors are required (for a single-color background, use the `style.backgroundColor` prop on a `View` component).

### `dither`

Only for: Android

Optional Type: `boolean` Default: `true`

Enables or disables paint dithering. Dithering can reduce the gradient color banding issue. Setting `false` may improve gradient rendering performance.

### `end`

Optional Literal type: `union`

For example, `{ x: 0.1, y: 0.2 }` means that the gradient will end `10%` from the left and `20%` from the bottom.

On web, this only changes the angle of the gradient because CSS gradients don't support changing the end position.

Acceptable values are: `[LinearGradientPoint](#lineargradientpoint)` | `null`

### `locations`

Optional Literal type: `union` Default: ``

A readonly array that contains `number`s ranging from `0` to `1`, inclusive, and is the same length as the `colors` property. Each number indicates a color-stop location where each respective color should be located. If not specified, the colors will be distributed evenly across the gradient.

For example, `[0.5, 0.8]` would render:

*   the first color, solid, from the beginning of the gradient view to 50% through (the middle);
*   a gradient from the first color to the second from the 50% point to the 80% point; and
*   the second color, solid, from the 80% point to the end of the gradient view.

> The color-stop locations must be ascending from least to greatest.

Acceptable values are: `readonly` | `null`

### `start`

Optional Literal type: `union`

For example, `{ x: 0.1, y: 0.2 }` means that the gradient will start `10%` from the left and `20%` from the top.

On web, this only changes the angle of the gradient because CSS gradients don't support changing the starting position.

Acceptable values are: `[LinearGradientPoint](#lineargradientpoint)` | `null`

#### Inherited Props

*   `[ViewProps`

## Types

### `LinearGradientPoint`

An object `{ x: number; y: number }` or array `[x, y]` that represents the point at which the gradient starts or ends, as a fraction of the overall size of the gradient ranging from `0` to `1`, inclusive.

Type: `[NativeLinearGradientPoint](#nativelineargradientpoint)` or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| x | `number` |
A number ranging from `0` to `1`, representing the position of gradient transformation.

 |
| y | `number` |

A number ranging from `0` to `1`, representing the position of gradient transformation.

 |

---

# Expo Linking

`expo-linking` provides utilities for your app to interact with other installed apps using deep links. It also provides helper methods for constructing and parsing deep links into your app. This module is an extension of the React Native [Linking module.

For a more comprehensive explanation of how to use `expo-linking`, refer to the [Linking into other apps.

## Installation

`npx expo install expo-linking`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as Linking from 'expo-linking';
```

## Hooks

### `useURL()`

Returns the initial URL followed by any subsequent changes to the URL.

Returns:

`string | null`

Returns the initial URL or `null`.

## Methods

### `Linking.canOpenURL(url)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
The URL that you want to test can be opened.

 |

Determine whether or not an installed app can handle a given URL. On web this always returns `true` because there is no API for detecting what URLs can be opened.

Returns:

`[Promise<boolean>`

A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it `false` if not.

The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside Info.plist.

### `Linking.collectManifestSchemes()`

Collect a list of platform schemes from the manifest.

This method is based on the `Scheme` modules from `@expo/config-plugins` which are used for collecting the schemes before prebuilding a native app.

*   iOS: scheme -> ios.scheme -> ios.bundleIdentifier
*   Android: scheme -> android.scheme -> android.package

Returns:

`string`

### `Linking.createURL(path, namedParameters)`

| Parameter | Type | Description |
| --- | --- | --- |
| path | `string` |
Addition path components to append to the base URL.

 |
| namedParameters(optional) | `[CreateURLOptions` |

Additional options object.

Default:`{}`

 |

Helper method for constructing a deep link into your app, given an optional path and set of query parameters. Creates a URI scheme with two slashes by default.

The scheme must be defined in the Expo config (`app.config.js` or `app.json`) under `expo.scheme` or `expo.{android,ios}.scheme`. Platform-specific schemes defined under `expo.{android,ios}.scheme` take precedence over universal schemes defined under `expo.scheme`.

#### Examples

*   Development and production builds: `<scheme>://path` - uses the optional `scheme` property if provided, and otherwise uses the first scheme defined by your Expo config
*   Web (dev): `https://localhost:19006/path`
*   Web (prod): `https://myapp.com/path`
*   Expo Go (dev): `exp://128.0.0.1:8081/--/path`

The behavior of this method in Expo Go for published updates is undefined and should not be relied upon. The created URL in this case is neither stable nor predictable during the lifetime of the app. If a stable URL is needed, for example in authorization callbacks, a build (or development build) of your application should be used and the scheme provided.

Returns:

`string`

A URL string which points to your app with the given deep link information.

### `Linking.getInitialURL()`

Get the URL that was used to launch the app if it was launched by a link.

Returns:

`[Promise<string | null>`

The URL string that launched your app, or `null`.

### `Linking.hasConstantsManifest()`

Ensure the user has linked the expo-constants manifest in bare workflow.

Returns:

`boolean`

### `Linking.hasCustomScheme()`

Returns:

`boolean`

### `Linking.openSettings()`

Open the operating system settings app and displays the app’s custom settings, if it has any.

Returns:

`[Promise<void>`

### `Linking.openURL(url)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
A URL for the operating system to open, eg: `tel:5555555`, `exp://`.

 |

Attempt to open the given URL with an installed app. See the [Linking guide for more information.

Returns:

`[Promise<true>`

A `Promise` that is fulfilled with `true` if the link is opened operating system automatically or the user confirms the prompt to open the link. The `Promise` rejects if there are no applications registered for the URL or the user cancels the dialog.

### `Linking.parse(url)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
A URL that points to the currently running experience (e.g. an output of `Linking.createURL()`).

 |

Helper method for parsing out deep link information from a URL.

Returns:

`[ParsedURL](#parsedurl)`

A `ParsedURL` object.

### `Linking.parseInitialURLAsync()`

Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`. Parses the deep link information out of the URL used to open the experience initially. If no link opened the app, all the fields will be `null`.

> On the web it parses the current window URL.

Returns:

`[Promise<[ParsedURL](#parsedurl)>`

A promise that resolves with `ParsedURL` object.

### `Linking.resolveScheme(options)`

| Parameter | Type |
| --- | --- |
| options | `{ isSilent: boolean, scheme: string }` |

Returns:

`string`

### `Linking.sendIntent(action, extras)`

Only for: Android

| Parameter | Type |
| --- | --- |
| action | `string` |
| extras(optional) | `[SendIntentExtras](#sendintentextras)` |

Launch an Android intent with extras.

> Use [IntentLauncher instead, `sendIntent` is only included in `Linking` for API compatibility with React Native's Linking API.

Returns:

`[Promise<void>`

## Event Subscriptions

### `Linking.addEventListener(type, handler)`

| Parameter | Type | Description |
| --- | --- | --- |
| type | `'url'` |
The only valid type is `'url'`.

 |
| handler | `[URLListener](#urllistener)` |

An `URLListener` function that takes an `event` object of the type `EventType`.

 |

Add a handler to `Linking` changes by listening to the `url` event type and providing the handler. It is recommended to use the `useURL()` hook instead.

Returns:

`EmitterSubscription`

An EmitterSubscription that has the remove method from EventSubscription

> See: [React Native Docs Linking page.

## Types

### `CreateURLOptions`

| Property | Type | Description |
| --- | --- | --- |
| isTripleSlashed(optional) | `boolean` |
Should the URI be triple slashed `scheme:///path` or double slashed `scheme://path`.

 |
| queryParams(optional) | `[QueryParams](#queryparams)` |

An object of parameters that will be converted into a query string.

 |
| scheme(optional) | `string` |

URI protocol `<scheme>://` that must be built into your native app.

 |

### `EventType`

| Property | Type | Description |
| --- | --- | --- |
| nativeEvent(optional) | `[MessageEvent` |
\-

 |
| url | `string` |

\-

 |

### `NativeURLListener(nativeEvent)`

| Parameter | Type |
| --- | --- |
| nativeEvent | `[MessageEvent` |

Returns:

`void`

### `ParsedURL`

| Property | Type | Description |
| --- | --- | --- |
| hostname | `string | null` |
\-

 |
| path | `string | null` |

The path into the app specified by the URL.

 |
| queryParams | `[QueryParams](#queryparams) | null` |

The set of query parameters specified by the query string of the url used to open the app.

 |
| scheme | `string | null` |

\-

 |

### `QueryParams`

Type: `Record<string, undefined | string | string>`

### `SendIntentExtras`

| Property | Type | Description |
| --- | --- | --- |
| key | `string` |
\-

 |
| value | `string | number | boolean` |

\-

 |

### `URLListener(event)`

| Parameter | Type |
| --- | --- |
| event | `[EventType](#eventtype)` |

Returns:

`void`

---

# Expo LocalAuthentication

`expo-local-authentication` allows you to use the Biometric Prompt (Android) or FaceID and TouchID (iOS) to authenticate the user with a fingerprint or face scan.

## Known limitation

### iOS 

iOS

The FaceID authentication for iOS is not supported in Expo Go. You will need to create a [development build to test FaceID.

## Installation

`npx expo install expo-local-authentication`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-local-authentication` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-local-authentication",
    {
      "faceIDPermission": "Allow $(PRODUCT_NAME) to use Face ID."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `faceIDPermission` | `"Allow $(PRODUCT_NAME) to use Face ID"` |
Only for: iOS

A string to set the `NSFaceIDUsageDescription` permission message.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using a native ios project manually, then you need to add `NSFaceIDUsageDescription` key to your ios/\[app\]/Info.plist:

Info.plist

```
<key>NSFaceIDUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use FaceID</string>
```

## API

```
import * as LocalAuthentication from 'expo-local-authentication';
```

## Methods

### `LocalAuthentication.authenticateAsync(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[LocalAuthenticationOptions](#localauthenticationoptions)` |

Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).

> Note: Apple requires apps which use FaceID to provide a description of why they use this API. If you try to use FaceID on an iPhone with FaceID without providing `infoPlist.NSFaceIDUsageDescription` in `app.json`, the module will authenticate using device passcode. For more information about usage descriptions on iOS, see [permissions guide.

Returns:

`[Promise<[LocalAuthenticationResult](#localauthenticationresult)>`

Returns a promise which fulfils with `LocalAuthenticationResult`.

### `LocalAuthentication.cancelAuthenticate()`

Only for: Android

Cancels authentication flow.

Returns:

`[Promise<void>`

### `LocalAuthentication.getEnrolledLevelAsync()`

Determine what kind of authentication is enrolled on the device.

Returns:

`[Promise<[SecurityLevel](#securitylevel)>`

Returns a promise which fulfils with `SecurityLevel`.

> Note: On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been enrolled, which is not the method that `authenticateAsync` prompts.

### `LocalAuthentication.hasHardwareAsync()`

Determine whether a face or fingerprint scanner is available on the device.

Returns:

`[Promise<boolean>`

Returns a promise which fulfils with a `boolean` value indicating whether a face or fingerprint scanner is available on this device.

### `LocalAuthentication.isEnrolledAsync()`

Determine whether the device has saved fingerprints or facial data to use for authentication.

Returns:

`[Promise<boolean>`

Returns a promise which fulfils to `boolean` value indicating whether the device has saved fingerprints or facial data for authentication.

### `LocalAuthentication.supportedAuthenticationTypesAsync()`

Determine what kinds of authentications are available on the device.

Returns:

`[Promise<[AuthenticationType](#authenticationtype)>`

Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).

Devices can support multiple authentication methods- i.e. `[1,2]` means the device supports both fingerprint and facial recognition. If none are supported, this method returns an empty array.

## Types

### `BiometricsSecurityLevel`

Only for: Android

Literal Type: `string`

Security level of the biometric authentication to allow.

Acceptable values are: `'weak'` | `'strong'`

### `LocalAuthenticationOptions`

| Property | Type | Description |
| --- | --- | --- |
| biometricsSecurityLevel(optional) | `[BiometricsSecurityLevel](#biometricssecuritylevel)` |
Only for: Android

Sets the security class of biometric authentication to allow. `strong` allows only Android Class 3 biometrics. For example, a fingerprint or a 3D face scan. `weak` allows both Android Class 3 and Class 2 biometrics. Class 2 biometrics are less secure than Class 3. For example, a camera-based face unlock.

Default:`'weak'`

 |
| cancelLabel(optional) | `string` |

Allows to customize the default `Cancel` label shown.

 |
| disableDeviceFallback(optional) | `boolean` |

After several failed attempts the system will fallback to the device passcode. This setting allows you to disable this option and instead handle the fallback yourself. This can be preferable in certain custom authentication workflows. This behaviour maps to using the iOS [LAPolicyDeviceOwnerAuthenticationWithBiometrics policy rather than the [LAPolicyDeviceOwnerAuthentication policy. Defaults to `false`.

 |
| fallbackLabel(optional) | `string` |

Only for: iOS

Allows to customize the default `Use Passcode` label shown after several failed authentication attempts. Setting this option to an empty string disables this button from showing in the prompt.

 |
| promptMessage(optional) | `string` |

A message that is shown alongside the TouchID or FaceID prompt.

 |
| requireConfirmation(optional) | `boolean` |

Only for: Android

Sets a hint to the system for whether to require user confirmation after authentication. This may be ignored by the system if the user has disabled implicit authentication in Settings or if it does not apply to a particular biometric modality. Defaults to `true`.

 |

### `LocalAuthenticationResult`

Type: `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| success | `true` |
\-

 |

Or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| error | `string` |
\-

 |
| success | `false` |

\-

 |
| warning(optional) | `string` |

\-

 |

## Enums

### `AuthenticationType`

#### `FINGERPRINT`

`AuthenticationType.FINGERPRINT ＝ 1`

Indicates fingerprint support.

#### `FACIAL_RECOGNITION`

`AuthenticationType.FACIAL_RECOGNITION ＝ 2`

Indicates facial recognition support.

#### `IRIS`

Only for: Android

`AuthenticationType.IRIS ＝ 3`

Indicates iris recognition support.

### `SecurityLevel`

#### `NONE`

`SecurityLevel.NONE ＝ 0`

Indicates no enrolled authentication.

#### `SECRET`

`SecurityLevel.SECRET ＝ 1`

Indicates non-biometric authentication (e.g. PIN, Pattern).

#### `BIOMETRIC_WEAK`

`SecurityLevel.BIOMETRIC_WEAK ＝ 2`

Indicates weak biometric authentication. For example, a 2D image-based face unlock.

> There are currently no weak biometric authentication options on iOS.

#### `BIOMETRIC_STRONG`

`SecurityLevel.BIOMETRIC_STRONG ＝ 3`

Indicates strong biometric authentication. For example, a fingerprint scan or 3D face unlock.

## Permissions

### Android

The following permissions are added automatically through this library's AndroidManifest.xml:

| Android Permission | Description |
| --- | --- |
|
`USE_BIOMETRIC`

 |

Allows an app to use device supported biometric modalities.

 |
|

`USE_FINGERPRINT`

 |

> This constant was deprecated in API level 28. Applications should request USE\_BIOMETRIC instead

 |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSFaceIDUsageDescription`

 | A message that tells the user why the app is requesting the ability to authenticate with Face ID. |

---

# Expo Localization

`expo-localization` allows you to Localize your app, customizing the experience for specific regions, languages, or cultures. It also provides access to the locale data on the native device. Using a localization library such as [`lingui-js`, [`react-i18next`, [`react-intl` or [`i18n-js` with `expo-localization` will enable you to create a very accessible experience for users.

## Installation

`npx expo install expo-localization`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-localization` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins": ["expo-localization"]
```
  }
}
```

## Usage

Find more information about using `expo-localization` and adding support for right-to-left languages in the [Localization guide.

## API

```
import { getLocales, getCalendars } from 'expo-localization';
```

### Behavior

You can use synchronous `getLocales()` and `getCalendars()` methods to get the locale settings of the user device. On iOS, the results will remain the same while the app is running.

On Android, the user can change locale preferences in Settings without restarting apps. To keep the localization current, you can rerun the `getLocales()` and `getCalendars()` methods every time the app returns to the foreground. Use `AppState` to detect this.

## Constants

> Deprecated Use `Localization.getLocales()` instead. An [IETF BCP 47 language tag, consisting of a two-character language code and optional script, region and variant codes.

### `Localization.locale`

Type: `string`

Example

`'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`

## Hooks

### `useCalendars()`

A hook providing a list of user's preferred calendars, returned as an array of objects of type `Calendar`. Guaranteed to contain at least 1 element. For now always returns a single element, but it's likely to return a user preference list on some platforms in the future. If the OS settings change, the hook will rerender with a new list of calendars.

Returns:

`[Calendar](#calendar)`

Example

```
[{
  "calendar": "gregory",
  "timeZone": "Europe/Warsaw",
  "uses24hourClock": true,
  "firstWeekday": 1
}]
```

### `useLocales()`

A hook providing a list of user's locales, returned as an array of objects of type `Locale`. Guaranteed to contain at least 1 element. These are returned in the order the user defines in their device settings. On the web currency and measurements systems are not provided, instead returned as null. If needed, you can infer them from the current region using a lookup table. If the OS settings change, the hook will rerender with a new list of locales.

Returns:

`[Locale](#locale)`

Example

```
[{
  "languageTag": "pl-PL",
  "languageCode": "pl",
  "textDirection": "ltr",
  "digitGroupingSeparator": " ",
  "decimalSeparator": ",",
  "measurementSystem": "metric",
  "currencyCode": "PLN",
  "currencySymbol": "zł",
  "regionCode": "PL",
  "temperatureUnit": "celsius"
}]
```

## Methods

### `Localization.getCalendars()`

List of user's preferred calendars, returned as an array of objects of type `Calendar`. Guaranteed to contain at least 1 element. For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.

Returns:

`[Calendar](#calendar)`

Example

```
[{
  "calendar": "gregory",
  "timeZone": "Europe/Warsaw",
  "uses24hourClock": true,
  "firstWeekday": 1
}]
```

### `Localization.getLocales()`

List of user's locales, returned as an array of objects of type `Locale`. Guaranteed to contain at least 1 element. These are returned in the order the user defines in their device settings. On the web currency and measurements systems are not provided, instead returned as null. If needed, you can infer them from the current region using a lookup table.

Returns:

`[Locale](#locale)`

Example

```
[{
  "languageTag": "pl-PL",
  "languageCode": "pl",
  "textDirection": "ltr",
  "digitGroupingSeparator": " ",
  "decimalSeparator": ",",
  "measurementSystem": "metric",
  "currencyCode": "PLN",
  "currencySymbol": "zł",
  "regionCode": "PL",
  "temperatureUnit": "celsius"
}]
```

## Types

### `Calendar`

| Property | Type | Description |
| --- | --- | --- |
| calendar | `[CalendarIdentifier](#calendaridentifier) | null` |
The calendar identifier, one of [Unicode calendar types.

On Android is limited to one of device's [available calendar types).

On iOS uses [calendar identifiers, but maps them to the corresponding Unicode types, will also never contain `'dangi'` or `'islamic-rgsa'` due to it not being implemented on iOS.

 |
| firstWeekday | `[Weekday](#weekday) | null` |

The first day of the week. For most calendars Sunday is numbered `1`, with Saturday being number `7`. Can be null on some browsers that don't support the [weekInfo property in [Intl API.

Example

`1`, `7`.

 |
| timeZone | `string | null` |

Time zone for the calendar. Can be `null` on Web.

Example

`'America/Los_Angeles'`, `'Europe/Warsaw'`, `'GMT+1'`.

 |
| uses24hourClock | `boolean | null` |

True when current device settings use 24-hour time format. Can be null on some browsers that don't support the [hourCycle property in [Intl API.

 |

### `Locale`

| Property | Type | Description |
| --- | --- | --- |
| currencyCode | `string | null` |
Currency code for the locale. Is `null` on Web, use a table lookup based on region instead.

Example

`'USD'`, `'EUR'`, `'PLN'`.

 |
| currencySymbol | `string | null` |

Currency symbol for the locale. Is `null` on Web, use a table lookup based on region (if available) instead.

Example

`'$'`, `'€'`, `'zł'`.

 |
| decimalSeparator | `string | null` |

Decimal separator used for formatting numbers with fractional parts.

Example

`'.'`, `','`.

 |
| digitGroupingSeparator | `string | null` |

Digit grouping separator used for formatting large numbers.

Example

`'.'`, `','`.

 |
| languageCode | `string | null` |

An [IETF BCP 47 language tag without the region code.

Example

`'en'`, `'es'`, `'pl'`.

 |
| languageTag | `string` |

An [IETF BCP 47 language tag with a region code.

Example

`'en-US'`, `'es-419'`, `'pl-PL'`.

 |
| measurementSystem | `'metric' | 'us' | 'uk' | null` |

The measurement system used in the locale. Is `null` on Web, as user chosen measurement system is not exposed on the web and using locale to determine measurement systems is unreliable. Ask for user preferences if possible.

 |
| regionCode | `string | null` |

The region code for your device that comes from the Region setting under Language & Region on iOS, Region settings on Android and is parsed from locale on Web (can be `null` on Web).

 |
| temperatureUnit | `'celsius' | 'fahrenheit' | null` |

The temperature unit used in the locale. Returns `null` if the region code is unknown.

 |
| textDirection | `'ltr' | 'rtl' | null` |

Text direction for the locale. One of: `'ltr'`, `'rtl'`, but can also be `null` on some browsers without support for the [textInfo property in [Intl API.

 |

### `Localization`

| Property | Type | Description |
| --- | --- | --- |
| currency | `string | null` |
Three-character ISO 4217 currency code. Returns `null` on web.

Example

`'USD'`, `'EUR'`, `'CNY'`, `null`

 |
| decimalSeparator | `string` |

Decimal separator used for formatting numbers.

Example

`','`, `'.'`

 |
| digitGroupingSeparator | `string` |

Digit grouping separator used when formatting numbers larger than 1000.

Example

`'.'`, `''`, `','`

 |
| isMetric | `boolean` |

Boolean value that indicates whether the system uses the metric system. On Android and web, this is inferred from the current region.

 |
| isRTL | `boolean` |

Returns if the system's language is written from Right-to-Left. This can be used to build features like [bidirectional icons.

Returns `false` in Server Side Rendering (SSR) environments.

 |
| isoCurrencyCodes | `string` |

A list of all the supported language ISO codes.

 |
| locale | `string` |

An [IETF BCP 47 language tag, consisting of a two-character language code and optional script, region and variant codes.

Example

`'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`

 |
| locales | `string` |

List of all the native languages provided by the user settings. These are returned in the order that the user defined in the device settings.

Example

`['en', 'en-US', 'zh-Hans', 'zh-Hans-CN', 'en-emodeng']`

 |
| region | `string | null` |

The region code for your device that comes from the Region setting under Language & Region on iOS. This value is always available on iOS, but might return `null` on Android or web.

Example

`'US'`, `'NZ'`, `null`

 |
| timezone | `string` |

The current time zone in display format. On Web time zone is calculated with Intl.DateTimeFormat().resolvedOptions().timeZone. For a better estimation you could use the moment-timezone package but it will add significant bloat to your website's bundle size.

Example

`'America/Los_Angeles'`

 |

## Enums

### `CalendarIdentifier`

The calendar identifier, one of [Unicode calendar types. Gregorian calendar is aliased and can be referred to as both `CalendarIdentifier.GREGORIAN` and `CalendarIdentifier.GREGORY`.

#### `BUDDHIST`

`CalendarIdentifier.BUDDHIST ＝ "buddhist"`

Thai Buddhist calendar

#### `CHINESE`

`CalendarIdentifier.CHINESE ＝ "chinese"`

Traditional Chinese calendar

#### `COPTIC`

`CalendarIdentifier.COPTIC ＝ "coptic"`

Coptic calendar

#### `DANGI`

`CalendarIdentifier.DANGI ＝ "dangi"`

Traditional Korean calendar

#### `ETHIOAA`

`CalendarIdentifier.ETHIOAA ＝ "ethioaa"`

Ethiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)

#### `ETHIOPIC`

`CalendarIdentifier.ETHIOPIC ＝ "ethiopic"`

Ethiopic calendar, Amete Mihret (epoch approx, 8 C.E.)

#### `GREGORIAN`

`CalendarIdentifier.GREGORIAN ＝ "gregory"`

Gregorian calendar (alias)

#### `GREGORY`

`CalendarIdentifier.GREGORY ＝ "gregory"`

Gregorian calendar

#### `HEBREW`

`CalendarIdentifier.HEBREW ＝ "hebrew"`

Traditional Hebrew calendar

#### `INDIAN`

`CalendarIdentifier.INDIAN ＝ "indian"`

Indian calendar

#### `ISLAMIC`

`CalendarIdentifier.ISLAMIC ＝ "islamic"`

Islamic calendar

#### `ISLAMIC_CIVIL`

`CalendarIdentifier.ISLAMIC_CIVIL ＝ "islamic-civil"`

Islamic calendar, tabular (intercalary years \[2,5,7,10,13,16,18,21,24,26,29\] - civil epoch)

#### `ISLAMIC_RGSA`

`CalendarIdentifier.ISLAMIC_RGSA ＝ "islamic-rgsa"`

Islamic calendar, Saudi Arabia sighting

#### `ISLAMIC_TBLA`

`CalendarIdentifier.ISLAMIC_TBLA ＝ "islamic-tbla"`

Islamic calendar, tabular (intercalary years \[2,5,7,10,13,16,18,21,24,26,29\] - astronomical epoch)

#### `ISLAMIC_UMALQURA`

`CalendarIdentifier.ISLAMIC_UMALQURA ＝ "islamic-umalqura"`

Islamic calendar, Umm al-Qura

#### `ISO8601`

`CalendarIdentifier.ISO8601 ＝ "iso8601"`

ISO calendar (Gregorian calendar using the ISO 8601 calendar week rules)

#### `JAPANESE`

`CalendarIdentifier.JAPANESE ＝ "japanese"`

Japanese imperial calendar

#### `PERSIAN`

`CalendarIdentifier.PERSIAN ＝ "persian"`

Persian calendar

#### `ROC`

`CalendarIdentifier.ROC ＝ "roc"`

Civil (algorithmic) Arabic calendar

### `Weekday`

An enum mapping days of the week in Gregorian calendar to their index as returned by the `firstWeekday` property.

#### `SUNDAY`

`Weekday.SUNDAY ＝ 1`

#### `MONDAY`

`Weekday.MONDAY ＝ 2`

#### `TUESDAY`

`Weekday.TUESDAY ＝ 3`

#### `WEDNESDAY`

`Weekday.WEDNESDAY ＝ 4`

#### `THURSDAY`

`Weekday.THURSDAY ＝ 5`

#### `FRIDAY`

`Weekday.FRIDAY ＝ 6`

#### `SATURDAY`

`Weekday.SATURDAY ＝ 7`

---

# Expo Location

`expo-location` allows reading geolocation information from the device. Your app can poll for the current location or subscribe to location update events.

## Installation

`npx expo install expo-location`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-location` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-location",
    {
      "locationAlwaysAndWhenInUsePermission": "Allow $(PRODUCT_NAME) to use your location."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `locationAlwaysAndWhenInUsePermission` | `"Allow $(PRODUCT_NAME) to use your location"` |
Only for: iOS

A string to set the `NSLocationAlwaysAndWhenInUseUsageDescription` permission message.

 |
| `locationAlwaysPermission` | `"Allow $(PRODUCT_NAME) to use your location"` |

Only for: iOS

A string to set the `NSLocationAlwaysUsageDescription` permission message.

 |
| `locationWhenInUsePermission` | `"Allow $(PRODUCT_NAME) to use your location"` |

Only for: iOS

A string to set the `NSLocationWhenInUseUsageDescription` permission message.

 |
| `isIosBackgroundLocationEnabled` | `false` |

Only for: iOS

A boolean to enable `location` in the `UIBackgroundModes` in Info.plist.

 |
| `isAndroidBackgroundLocationEnabled` | `false` |

Only for: Android

A boolean to enable the `ACCESS_BACKGROUND_LOCATION` permission.

 |
| `isAndroidForegroundServiceEnabled` | \- |

Only for: Android

A boolean to enable the `FOREGROUND_SERVICE` permission and `FOREGROUND_SERVICE_LOCATION`. Defaults to `true` if `isAndroidBackgroundLocationEnabled` is `true`, otherwise `false`.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using native ios project manually, then you need to add the `NSLocationAlwaysAndWhenInUseUsageDescription`, `NSLocationAlwaysUsageDescription` and `NSLocationWhenInUseUsageDescription` keys to your project's ios/\[app\]/Info.plist:

```
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>
<key>NSLocationWhenInUseUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to use your location</string>
```

### Background Location methods

> Warning: Background location tracking support is provided as-is and is not guaranteed to work in all scenarios. We currently are not prioritizing resources to improve it, but we hope to in the future. You may want to use [`react-native-background-geolocation` instead — it requires purchasing a license and is a well-maintained and supported library that includes a config plugin.

To use Background Location methods, the following requirements apply:

*   Location permissions must be granted. On iOS it must be granted with `Always` option.
*   Background location task must be defined in the top-level scope, using [`TaskManager.defineTask`.
*   iOS
```
`"location"` background mode must be specified in Info.plist file. See [background tasks configuration guide.
```

### Geofencing methods

To use Geofencing methods, the following requirements apply:

*   Location permissions must be granted. On iOS it must be granted with `Always` option.
*   The Geofencing task must be defined in the top-level scope, using [`TaskManager.defineTask`.
*   On iOS, there is a [limit of 20 `regions` that can be simultaneously monitored.

## Usage

If you're using the Android Emulator or iOS Simulator, ensure that [Location is enabled.

Location

```
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
%%placeholder-start%%%%placeholder-end%%import * as Device from 'expo-device';
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);

  useEffect(() => {
```
(async () => {
  %%placeholder-start%%%%placeholder-end%%if (Platform.OS === 'android' && !Device.isDevice) {
    setErrorMsg(
      'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'
    );
    return;
  }
  let { status } = await Location.requestForegroundPermissionsAsync();
  if (status !== 'granted') {
    setErrorMsg('Permission to access location was denied');
    return;
  }
```
let location = await Location.getCurrentPositionAsync({});
  setLocation(location);
})();
```
  }, );

  let text = 'Waiting..';
  if (errorMsg) {
```
text = errorMsg;
```
  } else if (location) {
```
text = JSON.stringify(location);
```
  }

  return (
```
<View style={styles.container}>
  <Text style={styles.paragraph}>{text}</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
padding: 20,
```
  },
  paragraph: {
```
fontSize: 18,
textAlign: 'center',
```
  },
});
```

## Enable emulator location

### Android Emulator

Open Android Studio, and launch the Android Emulator. Inside it, go to Settings > Location and enable Use location.

If you don't receive the locations in the emulator, you may have to turn off the Improve Location Accuracy setting. This will turn off Wi-Fi location and only use GPS. Then you can manipulate the location with GPS data through the emulator.

For Android 12 and higher, go to Settings > Location > Location Services > Google Location Accuracy, and turn off Improve Location Accuracy. For Android 11 and lower, go to Settings > Location > Advanced > Google Location Accuracy, and turn off Google Location Accuracy.

### iOS Simulator

With Simulator open, go to Features > Location and choose any option besides None.

## API

```
import * as Location from 'expo-location';
```

## Hooks

### `useBackgroundPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions for the background location. This uses both `requestBackgroundPermissionsAsync` and `getBackgroundPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Location.useBackgroundPermissions();
```

### `useForegroundPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions for the foreground location. This uses both `requestForegroundPermissionsAsync` and `getForegroundPermissionsAsync` to interact with the permissions.

Returns:

`[null | [LocationPermissionResponse](#locationpermissionresponse), RequestPermissionMethod<[LocationPermissionResponse](#locationpermissionresponse)>, GetPermissionMethod<[LocationPermissionResponse](#locationpermissionresponse)>]`

Example

```
const [status, requestPermission] = Location.useForegroundPermissions();
```

## Methods

### `Location.enableNetworkProviderAsync()`

Asks the user to turn on high accuracy location mode which enables network provider that uses Google Play services to improve location accuracy and location-based services.

Returns:

`[Promise<void>`

A promise resolving as soon as the user accepts the dialog. Rejects if denied.

### `Location.geocodeAsync(address, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| address | `string` |
A string representing address, eg. `"Baker Street London"`.

 |
| options(optional) | `[LocationGeocodingOptions](#locationgeocodingoptions)` |

\-

 |

Geocode an address string to latitude-longitude location.

> Note: Using the Geocoding web api is no longer supported. Use [Place Autocomplete instead.

> Note: Geocoding is resource consuming and has to be used reasonably. Creating too many requests at a time can result in an error, so they have to be managed properly. It's also discouraged to use geocoding while the app is in the background and its results won't be shown to the user immediately.

> On Android, you must request a location permission (`Permissions.LOCATION`) from the user before geocoding can be used.

Returns:

`[Promise<[LocationGeocodedLocation](#locationgeocodedlocation)>`

A promise which fulfills with an array (in most cases its size is 1) of `LocationGeocodedLocation` objects.

### `Location.getBackgroundPermissionsAsync()`

Checks user's permissions for accessing location while the app is in the background.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).

### `Location.getCurrentPositionAsync(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[LocationOptions](#locationoptions)` |

Requests for one-time delivery of the user's current location. Depending on given `accuracy` option it may take some time to resolve, especially when you're inside a building.

> Note: Calling it causes the location manager to obtain a location fix which may take several seconds. Consider using `Location.getLastKnownPositionAsync` if you expect to get a quick response and high accuracy is not required.

Returns:

`[Promise<[LocationObject](#locationobject)>`

A promise which fulfills with an object of type `LocationObject`.

### `Location.getForegroundPermissionsAsync()`

Checks user's permissions for accessing location while the app is in the foreground.

Returns:

`[Promise<[LocationPermissionResponse](#locationpermissionresponse)>`

A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).

### `Location.getHeadingAsync()`

Gets the current heading information from the device. To simplify, it calls `watchHeadingAsync` and waits for a couple of updates, and then returns the one that is accurate enough.

Returns:

`[Promise<[LocationHeadingObject](#locationheadingobject)>`

A promise which fulfills with an object of type [LocationHeadingObject](#locationheadingobject).

### `Location.getLastKnownPositionAsync(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[LocationLastKnownOptions](#locationlastknownoptions)` |

Gets the last known position of the device or `null` if it's not available or doesn't match given requirements such as maximum age or required accuracy. It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current location, but keep in mind the returned location may not be up-to-date.

Returns:

`[Promise<[LocationObject](#locationobject) | null>`

A promise which fulfills with an object of type [LocationObject](#locationobject) or `null` if it's not available or doesn't match given requirements such as maximum age or required accuracy.

> Deprecated Use `getForegroundPermissionsAsync` or `getBackgroundPermissionsAsync` instead.

### `Location.getPermissionsAsync()`

Checks user's permissions for accessing location.

Returns:

`[Promise<[LocationPermissionResponse](#locationpermissionresponse)>`

A promise that fulfills with an object of type [LocationPermissionResponse](#locationpermissionresponse).

### `Location.getProviderStatusAsync()`

Check status of location providers.

Returns:

`[Promise<[LocationProviderStatus](#locationproviderstatus)>`

A promise which fulfills with an object of type [LocationProviderStatus](#locationproviderstatus).

### `Location.hasServicesEnabledAsync()`

Checks whether location services are enabled by the user.

Returns:

`[Promise<boolean>`

A promise which fulfills to `true` if location services are enabled on the device, or `false` if not.

### `Location.hasStartedGeofencingAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the geofencing task to check.

 |

Returns:

`[Promise<boolean>`

A promise which fulfills with boolean value indicating whether the geofencing task is started or not.

### `Location.hasStartedLocationUpdatesAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the location task to check.

 |

Returns:

`[Promise<boolean>`

A promise which fulfills with boolean value indicating whether the location task is started or not.

### `Location.installWebGeolocationPolyfill()`

Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.

Returns:

`void`

### `Location.isBackgroundLocationAvailableAsync()`

Returns:

`[Promise<boolean>`

### `Location.requestBackgroundPermissionsAsync()`

Asks the user to grant permissions for location while the app is in the background. On Android 11 or higher: this method will open the system settings page - before that happens you should explain to the user why your application needs background location permission. For example, you can use `Modal` component from `react-native` to do that.

> Note: Foreground permissions should be granted before asking for the background permissions (your app can't obtain background permission without foreground permission).

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).

### `Location.requestForegroundPermissionsAsync()`

Asks the user to grant permissions for location while the app is in the foreground.

Returns:

`[Promise<[LocationPermissionResponse](#locationpermissionresponse)>`

A promise that fulfills with an object of type [PermissionResponse](#permissionresponse).

> Deprecated Use `requestForegroundPermissionsAsync` or `requestBackgroundPermissionsAsync` instead.

### `Location.requestPermissionsAsync()`

Asks the user to grant permissions for location.

Returns:

`[Promise<[LocationPermissionResponse](#locationpermissionresponse)>`

A promise that fulfills with an object of type [LocationPermissionResponse](#locationpermissionresponse).

### `Location.reverseGeocodeAsync(location, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| location | `[Pick<[LocationGeocodedLocation](#locationgeocodedlocation), 'latitude' | 'longitude'>` |
An object representing a location.

 |
| options(optional) | `[LocationGeocodingOptions](#locationgeocodingoptions)` |

\-

 |

Reverse geocode a location to postal address.

> Note: Using the Geocoding web api is no longer supported. Use [Place Autocomplete instead.

> Note: Geocoding is resource consuming and has to be used reasonably. Creating too many requests at a time can result in an error, so they have to be managed properly. It's also discouraged to use geocoding while the app is in the background and its results won't be shown to the user immediately.

> On Android, you must request a location permission (`Permissions.LOCATION`) from the user before geocoding can be used.

Returns:

`[Promise<[LocationGeocodedAddress](#locationgeocodedaddress)>`

A promise which fulfills with an array (in most cases its size is 1) of `LocationGeocodedAddress` objects.

> Deprecated The Geocoding web api is no longer available from SDK 49 onwards. Use [Place Autocomplete instead.

### `Location.setGoogleApiKey(_apiKey)`

| Parameter | Type | Description |
| --- | --- | --- |
| \_apiKey | `string` |
Google API key obtained from Google API Console. This API key must have `Geocoding API` enabled, otherwise your geocoding requests will be denied.

 |

Returns:

`void`

### `Location.startGeofencingAsync(taskName, regions)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task that will be called when the device enters or exits from specified regions.

 |
| regions(optional) | `[LocationRegion](#locationregion)` |

Array of region objects to be geofenced.

Default:``

 |

Starts geofencing for given regions. When the new event comes, the task with specified name will be called with the region that the device enter to or exit from. If you want to add or remove regions from already running geofencing task, you can just call `startGeofencingAsync` again with the new array of regions.

#### Task parameters

Geofencing task will be receiving following data:

*   `eventType` - Indicates the reason for calling the task, which can be triggered by entering or exiting the region. See [GeofencingEventType](#geofencingeventtype).
*   `region` - Object containing details about updated region. See [LocationRegion](#locationregion) for more details.

Returns:

`[Promise<void>`

A promise resolving as soon as the task is registered.

Example

```
import { GeofencingEventType } from 'expo-location';
import * as TaskManager from 'expo-task-manager';

 TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { eventType, region }, error }) => {
  if (error) {
```
// check `error.message` for more details.
return;
```
  }
  if (eventType === GeofencingEventType.Enter) {
```
console.log("You've entered region:", region);
```
  } else if (eventType === GeofencingEventType.Exit) {
```
console.log("You've left region:", region);
```
  }
});
```

### `Location.startLocationUpdatesAsync(taskName, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task receiving location updates.

 |
| options(optional) | `[LocationTaskOptions](#locationtaskoptions)` |

An object of options passed to the location manager.

 |

Registers for receiving location updates that can also come when the app is in the background.

#### Task parameters

Background location task will be receiving following data:

*   `locations` - An array of the new locations.

```
import * as TaskManager from 'expo-task-manager';

TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { locations }, error }) => {
 if (error) {
   // check `error.message` for more details.
   return;
 }
 console.log('Received new locations', locations);
});
```

Returns:

`[Promise<void>`

A promise resolving once the task with location updates is registered.

### `Location.stopGeofencingAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task to unregister.

 |

Stops geofencing for specified task. It unregisters the background task so the app will not be receiving any updates, especially in the background.

Returns:

`[Promise<void>`

A promise resolving as soon as the task is unregistered.

### `Location.stopLocationUpdatesAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the background location task to stop.

 |

Stops geofencing for specified task.

Returns:

`[Promise<void>`

A promise resolving as soon as the task is unregistered.

### `Location.watchHeadingAsync(callback)`

| Parameter | Type | Description |
| --- | --- | --- |
| callback | `[LocationHeadingCallback](#locationheadingcallback)` |
This function is called on each compass update. It receives an object of type [LocationHeadingObject](#locationheadingobject) as the first argument.

 |

Subscribe to compass updates from the device.

Returns:

`[Promise<[LocationSubscription](#locationsubscription)>`

A promise which fulfills with a `LocationSubscription` object.

### `Location.watchPositionAsync(options, callback)`

| Parameter | Type | Description |
| --- | --- | --- |
| options | `[LocationOptions](#locationoptions)` |
\-

 |
| callback | `[LocationCallback](#locationcallback)` |

This function is called on each location update. It receives an object of type `LocationObject` as the first argument.

 |

Subscribe to location updates from the device. Please note that updates will only occur while the application is in the foreground. To get location updates while in background you'll need to use [Location.startLocationUpdatesAsync](#locationstartlocationupdatesasynctaskname-options).

Returns:

`[Promise<[LocationSubscription](#locationsubscription)>`

A promise which fulfills with a `LocationSubscription` object.

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `LocationCallback(location)`

Represents `watchPositionAsync` callback.

| Parameter | Type |
| --- | --- |
| location | `[LocationObject](#locationobject)` |

Returns:

`any`

### `LocationGeocodedAddress`

Type representing a result of `reverseGeocodeAsync`.

| Property | Type | Description |
| --- | --- | --- |
| city | `string | null` |
City name of the address.

 |
| country | `string | null` |

Localized country name of the address.

 |
| district | `string | null` |

Additional city-level information like district name.

 |
| formattedAddress | `string | null` |

Only for: Android

Composed string of the address components, for example, "111 8th Avenue, New York, NY".

 |
| isoCountryCode | `string | null` |

Localized (ISO) country code of the address, if available.

 |
| name | `string | null` |

The name of the placemark, for example, "Tower Bridge".

 |
| postalCode | `string | null` |

Postal code of the address.

 |
| region | `string | null` |

The state or province associated with the address.

 |
| street | `string | null` |

Street name of the address.

 |
| streetNumber | `string | null` |

Street number of the address.

 |
| subregion | `string | null` |

Additional information about administrative area.

 |
| timezone | `string | null` |

Only for: iOS

The timezone identifier associated with the address.

 |

### `LocationGeocodedLocation`

Type representing a result of `geocodeAsync`.

| Property | Type | Description |
| --- | --- | --- |
| accuracy(optional) | `number` |
The radius of uncertainty for the location, measured in meters.

 |
| altitude(optional) | `number` |

The altitude in meters above the WGS 84 reference ellipsoid.

 |
| latitude | `number` |

The latitude in degrees.

 |
| longitude | `number` |

The longitude in degrees.

 |

### `LocationGeocodingOptions`

An object of options for forward and reverse geocoding.

| Property | Type | Description |
| --- | --- | --- |
| useGoogleMaps(optional) | `boolean` |
Whether to force using Google Maps API instead of the native implementation. Used by default only on Web platform. Requires providing an API key by `setGoogleApiKey`.

 |

### `LocationHeadingCallback(location)`

Represents `watchHeadingAsync` callback.

| Parameter | Type |
| --- | --- |
| location | `[LocationHeadingObject](#locationheadingobject)` |

Returns:

`any`

### `LocationHeadingObject`

Type of the object containing heading details and provided by `watchHeadingAsync` callback.

| Property | Type | Description |
| --- | --- | --- |
| accuracy | `number` |
Level of calibration of compass.

*   `3`: high accuracy, `2`: medium accuracy, `1`: low accuracy, `0`: none Reference for iOS:
*   `3`: < 20 degrees uncertainty, `2`: < 35 degrees, `1`: < 50 degrees, `0`: > 50 degrees

 |
| magHeading | `number` |

Measure of magnetic north in degrees.

 |
| trueHeading | `number` |

Measure of true north in degrees (needs location permissions, will return `-1` if not given).

 |

### `LocationLastKnownOptions`

Type representing options object that can be passed to `getLastKnownPositionAsync`.

| Property | Type | Description |
| --- | --- | --- |
| maxAge(optional) | `number` |
A number of milliseconds after which the last known location starts to be invalid and thus `null` is returned.

 |
| requiredAccuracy(optional) | `number` |

The maximum radius of uncertainty for the location, measured in meters. If the last known location's accuracy radius is bigger (less accurate) then `null` is returned.

 |

### `LocationObject`

Type representing the location object.

| Property | Type | Description |
| --- | --- | --- |
| coords | `[LocationObjectCoords](#locationobjectcoords)` |
The coordinates of the position.

 |
| mocked(optional) | `boolean` |

Only for: Android

Whether the location coordinates is mocked or not.

 |
| timestamp | `number` |

The time at which this position information was obtained, in milliseconds since epoch.

 |

### `LocationObjectCoords`

Type representing the location GPS related data.

| Property | Type | Description |
| --- | --- | --- |
| accuracy | `number | null` |
The radius of uncertainty for the location, measured in meters. Can be `null` on Web if it's not available.

 |
| altitude | `number | null` |

The altitude in meters above the WGS 84 reference ellipsoid. Can be `null` on Web if it's not available.

 |
| altitudeAccuracy | `number | null` |

The accuracy of the altitude value, in meters. Can be `null` on Web if it's not available.

 |
| heading | `number | null` |

Horizontal direction of travel of this device, measured in degrees starting at due north and continuing clockwise around the compass. Thus, north is 0 degrees, east is 90 degrees, south is 180 degrees, and so on. Can be `null` on Web if it's not available.

 |
| latitude | `number` |

The latitude in degrees.

 |
| longitude | `number` |

The longitude in degrees.

 |
| speed | `number | null` |

The instantaneous speed of the device in meters per second. Can be `null` on Web if it's not available.

 |

### `LocationOptions`

Type representing options argument in `getCurrentPositionAsync`.

| Property | Type | Description |
| --- | --- | --- |
| accuracy(optional) | `[Accuracy](#accuracy)` |
Location manager accuracy. Pass one of `Accuracy` enum values. For low-accuracies the implementation can avoid geolocation providers that consume a significant amount of power (such as GPS).

 |
| distanceInterval(optional) | `number` |

Receive updates only when the location has changed by at least this distance in meters. Default value may depend on `accuracy` option.

 |
| mayShowUserSettingsDialog(optional) | `boolean` |

Only for: Android

Specifies whether to ask the user to turn on improved accuracy location mode which uses Wi-Fi, cell networks and GPS sensor.

Default:`true`

 |
| timeInterval(optional) | `number` |

Only for: Android

Minimum time to wait between each update in milliseconds. Default value may depend on `accuracy` option.

 |

### `LocationPermissionResponse`

`LocationPermissionResponse` extends [PermissionResponse](#permissionresponse) type exported by `expo-modules-core` and contains additional platform-specific fields.

Type: `[PermissionResponse](#permissionresponse)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| android(optional) | `[PermissionDetailsLocationAndroid](#permissiondetailslocationandroid)` |
\-

 |
| ios(optional) | `[PermissionDetailsLocationIOS](#permissiondetailslocationios)` |

\-

 |

### `LocationProviderStatus`

Represents the object containing details about location provider.

| Property | Type | Description |
| --- | --- | --- |
| backgroundModeEnabled | `boolean` |
\-

 |
| gpsAvailable(optional) | `boolean` |

Only for: Android

Whether the GPS provider is available. If `true` the location data will come from GPS, especially for requests with high accuracy.

 |
| locationServicesEnabled | `boolean` |

Whether location services are enabled. See [Location.hasServicesEnabledAsync](#locationhasservicesenabledasync) for a more convenient solution to get this value.

 |
| networkAvailable(optional) | `boolean` |

Only for: Android

Whether the network provider is available. If `true` the location data will come from cellular network, especially for requests with low accuracy.

 |
| passiveAvailable(optional) | `boolean` |

Only for: Android

Whether the passive provider is available. If `true` the location data will be determined passively.

 |

### `LocationRegion`

Type representing geofencing region object.

| Property | Type | Description |
| --- | --- | --- |
| identifier(optional) | `string` |
The identifier of the region object. Defaults to auto-generated UUID hash.

 |
| latitude | `number` |

The latitude in degrees of region's center point.

 |
| longitude | `number` |

The longitude in degrees of region's center point.

 |
| notifyOnEnter(optional) | `boolean` |

Boolean value whether to call the task if the device enters the region.

Default:`true`

 |
| notifyOnExit(optional) | `boolean` |

Boolean value whether to call the task if the device exits the region.

Default:`true`

 |
| radius | `number` |

The radius measured in meters that defines the region's outer boundary.

 |
| state(optional) | `[GeofencingRegionState](#geofencingregionstate)` |

One of [GeofencingRegionState](#geofencingregionstate) region state. Determines whether the device is inside or outside a region.

 |

### `LocationSubscription`

Represents subscription object returned by methods watching for new locations or headings.

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
Call this function with no arguments to remove this subscription. The callback will no longer be called for location updates.

 |

### `LocationTaskOptions`

Type representing background location task options.

Type: `[LocationOptions](#locationoptions)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| activityType(optional) | `[ActivityType](#activitytype)` |
Only for: iOS

The type of user activity associated with the location updates.

Default:`ActivityType.Other`

> See: See [Apple docs for more details.

 |
| deferredUpdatesDistance(optional) | `number` |

The distance in meters that must occur between last reported location and the current location before deferred locations are reported.

Default:`0`

 |
| deferredUpdatesInterval(optional) | `number` |

Minimum time interval in milliseconds that must pass since last reported location before all later locations are reported in a batched update

Default:`0`

 |
| deferredUpdatesTimeout(optional) | `number` |

\-

 |
| foregroundService(optional) | `[LocationTaskServiceOptions](#locationtaskserviceoptions)` |

\-

 |
| pausesUpdatesAutomatically(optional) | `boolean` |

Only for: iOS

A boolean value indicating whether the location manager can pause location updates to improve battery life without sacrificing location data. When this option is set to `true`, the location manager pauses updates (and powers down the appropriate hardware) at times when the location data is unlikely to change. You can help the determination of when to pause location updates by assigning a value to the `activityType` property.

Default:`false`

 |
| showsBackgroundLocationIndicator(optional) | `boolean` |

Only for: iOS 11+

A boolean indicating whether the status bar changes its appearance when location services are used in the background.

Default:`false`

 |

### `LocationTaskServiceOptions`

| Property | Type | Description |
| --- | --- | --- |
| killServiceOnDestroy(optional) | `boolean` |
Boolean value whether to destroy the foreground service if the app is killed.

 |
| notificationBody | `string` |

Subtitle of the foreground service notification.

 |
| notificationColor(optional) | `string` |

Color of the foreground service notification. Accepts `#RRGGBB` and `#AARRGGBB` hex formats.

 |
| notificationTitle | `string` |

Title of the foreground service notification.

 |

### `PermissionDetailsLocationAndroid`

| Property | Type | Description |
| --- | --- | --- |
| accuracy | `'fine' | 'coarse' | 'none'` |
Indicates the type of location provider.

 |
| scope | `'fine' | 'coarse' | 'none'` |

> Deprecated Use `accuracy` field instead.

 |

### `PermissionDetailsLocationIOS`

| Property | Type | Description |
| --- | --- | --- |
| scope | `'whenInUse' | 'always' | 'none'` |
The scope of granted permission. Indicates when it's possible to use location.

 |

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

## Enums

### `Accuracy`

Enum with available location accuracies.

#### `Lowest`

`Accuracy.Lowest ＝ 1`

Accurate to the nearest three kilometers.

#### `Low`

`Accuracy.Low ＝ 2`

Accurate to the nearest kilometer.

#### `Balanced`

`Accuracy.Balanced ＝ 3`

Accurate to within one hundred meters.

#### `High`

`Accuracy.High ＝ 4`

Accurate to within ten meters of the desired target.

#### `Highest`

`Accuracy.Highest ＝ 5`

The best level of accuracy available.

#### `BestForNavigation`

`Accuracy.BestForNavigation ＝ 6`

The highest possible accuracy that uses additional sensor data to facilitate navigation apps.

### `ActivityType`

Enum with available activity types of background location tracking.

#### `Other`

`ActivityType.Other ＝ 1`

Default activity type. Use it if there is no other type that matches the activity you track.

#### `AutomotiveNavigation`

`ActivityType.AutomotiveNavigation ＝ 2`

Location updates are being used specifically during vehicular navigation to track location changes to the automobile.

#### `Fitness`

`ActivityType.Fitness ＝ 3`

Use this activity type if you track fitness activities such as walking, running, cycling, and so on.

#### `OtherNavigation`

`ActivityType.OtherNavigation ＝ 4`

Activity type for movements for other types of vehicular navigation that are not automobile related.

#### `Airborne`

Only for: iOS 12+

`ActivityType.Airborne ＝ 5`

Intended for airborne activities. Fall backs to `ActivityType.Other` if unsupported.

### `GeofencingEventType`

A type of the event that geofencing task can receive.

#### `Enter`

`GeofencingEventType.Enter ＝ 1`

Emitted when the device entered observed region.

#### `Exit`

`GeofencingEventType.Exit ＝ 2`

Occurs as soon as the device left observed region

### `GeofencingRegionState`

State of the geofencing region that you receive through the geofencing task.

#### `Unknown`

`GeofencingRegionState.Unknown ＝ 0`

Indicates that the device position related to the region is unknown.

#### `Inside`

`GeofencingRegionState.Inside ＝ 1`

Indicates that the device is inside the region.

#### `Outside`

`GeofencingRegionState.Outside ＝ 2`

Inverse of inside state.

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

> Note: Foreground and background services are not available in Expo Go for Android.

When you install the `expo-location` module, it automatically adds the following permissions:

*   `ACCESS_COARSE_LOCATION`: for approximate device location
*   `ACCESS_FINE_LOCATION`: for precise device location

The following permissions are optional:

*   `FOREGROUND_SERVICE` and `FOREGROUND_SERVICE_LOCATION`: to be able to access location while the app is open but backgrounded. `FOREGROUND_SERVICE_LOCATION` is only required as of Android 14. When you enable this in a new build, you will need to [submit your app for review and request access to use the foreground service permission.
*   `ACCESS_BACKGROUND_LOCATION`: to be able to access location while the app is backgrounded or closed. When you enable this in a new build, you will need to [submit your app for review and request access to use the background location permission.

| Android Permission | Description |
| --- | --- |
|
`ACCESS_COARSE_LOCATION`

 |

Allows an app to access approximate location.

> Alternatively, you might want `[ACCESS_FINE_LOCATION`.

 |
|

`ACCESS_FINE_LOCATION`

 |

Allows an app to access precise location.

> Alternatively, you might want `[ACCESS_COARSE_LOCATION`.

 |
|

`FOREGROUND_SERVICE`

 |

Allows a regular application to use Service.startForeground.

> Allows a regular application to use `[Service.startForeground)`.

 |
|

`FOREGROUND_SERVICE_LOCATION`

 |

Allows a regular application to use Service.startForeground with the type "location".

> Allows a regular application to use `[Service.startForeground)` with the type "location".

 |
|

`ACCESS_BACKGROUND_LOCATION`

 |

Allows an app to access location in the background.

> If you're requesting this permission, you must also request either `[ACCESS_COARSE_LOCATION` or `[ACCESS_FINE_LOCATION`. Requesting this permission by itself doesn't give you location access.

 |

#### Excluding a permission

> Note: Excluding a required permission from a module in your app can break the functionality corresponding to that permission. Always make sure to include all permissions a module is dependent on.

When your Expo project doesn't benefit from having particular permission included, you can omit it. For example, if your application doesn't need access to the precise location, you can exclude the `ACCESS_FINE_LOCATION` permission.

Another example can be stated using [available location accuracies. Android defines the approximate location accuracy estimation within about 3 square kilometers, and the precise location accuracy estimation within about 50 meters. For example, if the location accuracy value is [Low, you can exclude `ACCESS_FINE_LOCATION` permission. To learn more about levels of location accuracies, see [Android documentation.

To learn more on how to exclude permission, see [Excluding Android permissions.

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSLocationAlwaysAndWhenInUseUsageDescription`

 | A message that tells the user why the app is requesting access to the user’s location information at all times. |
|

`NSLocationAlwaysUsageDescription`

 | A message that tells the user why the app is requesting access to the user's location at all times.DeprecatedFor apps deployed to targets in iOS 11 and later, use NSLocationAlwaysAndWhenInUseUsageDescription instead. |
|

`NSLocationWhenInUseUsageDescription`

 | A message that tells the user why the app is requesting access to the user’s location information while the app is running in the foreground. |

---

# Lottie

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

[Lottie renders After Effects animations in real time, allowing apps to use animations as easily as they use static images.

## Installation

`npx expo install lottie-react-native`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

Lottie

```
import { useRef, useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';
import LottieView from 'lottie-react-native';

export default function App() {
  const animation = useRef<LottieView>(null);
  useEffect(() => {
```
// You can control the ref programmatically, rather than using autoPlay
// animation.current?.play();
```
  }, );

  return (
```
<View style={styles.animationContainer}>
  <LottieView
    autoPlay
    ref={animation}
    style={{
      width: 200,
      height: 200,
      backgroundColor: '#eee',
    }}
    // Find more Lottie files at https://lottiefiles.com/featured
    source={require('./assets/gradientBall.json')}
  />
  <View style={styles.buttonContainer}>
    <Button
      title="Restart Animation"
      onPress={() => {
        animation.current?.reset();
        animation.current?.play();
      }}
    />
  </View>
</View>
```
  );
}

const styles = StyleSheet.create({
  animationContainer: {
```
backgroundColor: '#fff',
alignItems: 'center',
justifyContent: 'center',
flex: 1,
```
  },
  buttonContainer: {
```
paddingTop: 20,
```
  },
});
```

## API

```
import LottieView from 'lottie-react-native';
```

Refer to the [lottie-react-native repository for more detailed documentation.

---

# Expo Magnetometer

`Magnetometer` from `expo-sensors` provides access to the device magnetometer sensor(s) to respond to and measure the changes in the magnetic field measured in microtesla (`μT`).

You can access the calibrated values with `Magnetometer` and uncalibrated raw values with `MagnetometerUncalibrated`.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Magnetometer

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Magnetometer } from 'expo-sensors';

export default function Compass() {
  const [{ x, y, z }, setData] = useState({
```
x: 0,
y: 0,
z: 0,
```
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Magnetometer.setUpdateInterval(1000);
  const _fast = () => Magnetometer.setUpdateInterval(16);

  const _subscribe = () => {
```
setSubscription(
  Magnetometer.addListener(result => {
    setData(result);
  })
);
```
  };

  const _unsubscribe = () => {
```
subscription && subscription.remove();
setSubscription(null);
```
  };

  useEffect(() => {
```
_subscribe();
return () => _unsubscribe();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text style={styles.text}>Magnetometer:</Text>
  <Text style={styles.text}>x: {x}</Text>
  <Text style={styles.text}>y: {y}</Text>
  <Text style={styles.text}>z: {z}</Text>
  <View style={styles.buttonContainer}>
    <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
      <Text>{subscription ? 'On' : 'Off'}</Text>
    </TouchableOpacity>
    <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
      <Text>Slow</Text>
    </TouchableOpacity>
    <TouchableOpacity onPress={_fast} style={styles.button}>
      <Text>Fast</Text>
    </TouchableOpacity>
  </View>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
paddingHorizontal: 10,
```
  },
  text: {
```
textAlign: 'center',
```
  },
  buttonContainer: {
```
flexDirection: 'row',
alignItems: 'stretch',
marginTop: 15,
```
  },
  button: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
backgroundColor: '#eee',
padding: 10,
```
  },
  middleButton: {
```
borderLeftWidth: 1,
borderRightWidth: 1,
borderColor: '#ccc',
```
  },
});
```

## API

```
import { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';
```

## Classes

### `Magnetometer`

Only for: Android, iOS

Type: Class extends `[DeviceSensor<[MagnetometerMeasurement](#magnetometermeasurement)>`

Magnetometer Methods

### `addListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `Listener<[MagnetometerMeasurement](#magnetometermeasurement)>` |
A callback that is invoked when a magnetometer update is available. When invoked, the listener is provided with a single argument that is `MagnetometerMeasurement`.

 |

Subscribe for updates to the magnetometer.

Returns:

`[Subscription](#subscription)`

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

Returns:

`number`

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

Returns:

`boolean`

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Check the availability of the device magnetometer. Requires at least Android 2.3 (API Level 9) and iOS 8.

Returns:

`[Promise<boolean>`

A promise that resolves to a `boolean` denoting the availability of the sensor.

### `removeAllListeners()`

Removes all registered listeners.

Returns:

`void`

### `removeSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
A subscription to remove.

 |

Removes the given subscription.

Returns:

`void`

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `setUpdateInterval(intervalMs)`

| Parameter | Type | Description |
| --- | --- | --- |
| intervalMs | `number` |
Desired interval in milliseconds between sensor updates.

> Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
>
> If you need an update interval less than 200ms, you should:
>
> *   add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [app.json `permissions` field
> *   or if you are using bare workflow, add `<uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/>` to AndroidManifest.xml.

 |

Set the sensor update interval.

Returns:

`void`

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `MagnetometerMeasurement`

Each of these keys represents the strength of magnetic field along that particular axis measured in microteslas (`μT`).

| Property | Type | Description |
| --- | --- | --- |
| timestamp | `number` |
Timestamp of the measurement in seconds.

 |
| x | `number` |

Value representing strength of magnetic field recorded in X axis.

 |
| y | `number` |

Value representing strength of magnetic field recorded in Y axis.

 |
| z | `number` |

Value representing strength of magnetic field recorded in Z axis.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

---

# Expo MailComposer

`expo-mail-composer` allows you to compose and send emails quickly and easily using the OS UI. This module can't be used on iOS Simulators since you can't sign into a mail account on them.

## Installation

`npx expo install expo-mail-composer`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as MailComposer from 'expo-mail-composer';
```

## Methods

### `MailComposer.composeAsync(options)`

| Parameter | Type |
| --- | --- |
| options | `[MailComposerOptions](#mailcomposeroptions)` |

Opens a mail modal for iOS and a mail app intent for Android and fills the fields with provided data. On iOS you will need to be signed into the Mail app.

Returns:

`[Promise<[MailComposerResult](#mailcomposerresult)>`

A promise fulfilled with an object containing a `status` field that specifies whether an email was sent, saved, or cancelled. Android does not provide this info, so the status is always set as if the email were sent.

### `MailComposer.isAvailableAsync()`

Determine if the `MailComposer` API can be used in this app.

Returns:

`[Promise<boolean>`

A promise resolves to `true` if the API can be used, and `false` otherwise.

*   Returns `true` on iOS when the device has a default email setup for sending mail.
*   Can return `false` on iOS if an MDM profile is setup to block outgoing mail. If this is the case, you may want to use the Linking API instead.
*   Always returns `true` in the browser and on Android.

## Types

### `MailComposerOptions`

A map defining the data to fill the mail.

| Property | Type | Description |
| --- | --- | --- |
| attachments(optional) | `string` |
An array of app's internal file URIs to attach.

 |
| bccRecipients(optional) | `string` |

An array of e-mail addresses of the BCC recipients.

 |
| body(optional) | `string` |

Body of the e-mail.

 |
| ccRecipients(optional) | `string` |

An array of e-mail addresses of the CC recipients.

 |
| isHtml(optional) | `boolean` |

Whether the body contains HTML tags so it could be formatted properly. Not working perfectly on Android.

 |
| recipients(optional) | `string` |

An array of e-mail addresses of the recipients.

 |
| subject(optional) | `string` |

Subject of the e-mail.

 |

### `MailComposerResult`

| Property | Type | Description |
| --- | --- | --- |
| status | `[MailComposerStatus](#mailcomposerstatus)` |
\-

 |

## Enums

### `MailComposerStatus`

#### `CANCELLED`

`MailComposerStatus.CANCELLED ＝ "cancelled"`

#### `SAVED`

`MailComposerStatus.SAVED ＝ "saved"`

#### `SENT`

`MailComposerStatus.SENT ＝ "sent"`

#### `UNDETERMINED`

`MailComposerStatus.UNDETERMINED ＝ "undetermined"`

---

# Expo Manifests




A library that provides types for Expo Manifests.



tvOS

## Installation

`npx expo install expo-manifests`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as Manifests from 'expo-manifests';
```

## Interfaces

### `ManifestAsset`

| Property | Type | Description |
| --- | --- | --- |
| url | `string` |
\-

 |

## Types

> Deprecated renamed to EmbeddedManifest, will be removed in a few versions

### `BareManifest`

Type: `[EmbeddedManifest`

> See: EmbeddedManifest

### `ClientScopingConfig`

| Property | Type | Description |
| --- | --- | --- |
| scopeKey(optional) | `string` |
An opaque unique string for scoping client-side data to this project. This value will not change when a project is transferred between accounts or renamed.

 |

### `EASConfig`

| Property | Type | Description |
| --- | --- | --- |
| projectId(optional) | `string` |
The ID for this project if it's using EAS. UUID. This value will not change when a project is transferred between accounts or renamed.

 |

### `EmbeddedManifest`

An embedded manifest.

Generated during build in createManifest.js build step script.

| Property | Type | Description |
| --- | --- | --- |
| assets | `any` |
\-

 |
| commitTime | `number` |

\-

 |
| id | `string` |

\-

 |

### `ExpoGoConfig`

| Property | Type | Description |
| --- | --- | --- |
| debuggerHost(optional) | `string` |
\-

 |
| developer(optional) | `{ tool: string }` |

\-

 |
| mainModuleName(optional) | `string` |

\-

 |
| packagerOpts(optional) | `[ExpoGoPackagerOpts` |

\-

 |

### `ExpoGoPackagerOpts`

| Property | Type | Description |
| --- | --- | --- |
| dev(optional) | `boolean` |
\-

 |
| hostType(optional) | `string` |

\-

 |
| lanType(optional) | `string` |

\-

 |
| minify(optional) | `boolean` |

\-

 |
| strict(optional) | `boolean` |

\-

 |
| urlRandomness(optional) | `string` |

\-

 |
| urlType(optional) | `string` |

\-

 |
| key[(index signature) | `string` |

\-

 |

### `ExpoUpdatesManifest`

A expo-updates manifest.

| Property | Type | Description |
| --- | --- | --- |
| assets | `[ManifestAsset](#manifestasset)` |
\-

 |
| createdAt | `string` |

\-

 |
| extra(optional) | `[ManifestExtra` |

\-

 |
| id | `string` |

\-

 |
| launchAsset | `[ManifestAsset` |

\-

 |
| metadata | `object` |

\-

 |
| runtimeVersion | `string` |

\-

 |

### `ManifestExtra`

Type: `[ClientScopingConfig` extended by:

| Property | Type | Description |
| --- | --- | --- |
| eas(optional) | `[EASConfig` |
\-

 |
| expoClient(optional) | `[ExpoConfig & { hostUri: string }` |

\-

 |
| expoGo(optional) | `[ExpoGoConfig` |

\-

 |

> Deprecated renamed to ExpoUpdatesManifest, will be removed in a few versions

### `NewManifest`

Type: `[ExpoUpdatesManifest`

> See: ExpoUpdatesManifest

---

# React Native Maps

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

`react-native-maps` provides a Map component that uses Google Maps on Android and Apple Maps or Google Maps on iOS.

No additional setup is required when testing your project using Expo Go. However, to deploy the app binary on app stores additional steps are required for Google Maps. For more information, see the [instructions below.

## Installation

`npx expo install react-native-maps`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See full documentation at [`react-native-maps/react-native-maps`.

MapView

```
import React from 'react';
import MapView from 'react-native-maps';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
```
<View style={styles.container}>
  <MapView style={styles.map} />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
```
  },
  map: {
```
width: '100%',
height: '100%',
```
  },
});
```

## Deploy app with Google Maps

### Android

> If you have already registered a project for another Google service on Android, such as Google Sign In, you enable the Maps SDK for Android on your project and jump to step 4.

1

#### Register a Google Cloud API project and enable the Maps SDK for Android

*   Open your browser to the [Google API Manager and create a project.
*   Once it's created, go to the project and enable the Maps SDK for Android.

2

#### Copy your app's SHA-1 certificate fingerprint

*   If you are deploying your app to the Google Play Store, you'll need to [upload your app binary to Google Play console at least once. This is required for Google to generate your app signing credentials.
*   Go to the [Google Play Console > (your app) > Release > Setup > App integrity > App Signing.
*   Copy the value of SHA-1 certificate fingerprint.

*   If you have already created a [development build, your project will be signed using a debug keystore.
*   After the build is complete, go to your [project's dashboard, then, under Configure > click Credentials.
*   Under Application Identifiers, click your project's package name and under Android Keystore copy the value of SHA-1 Certificate Fingerprint.

3

#### Create an API key

*   Go to [Google Cloud Credential manager and click Create Credentials, then API Key.
*   In the modal, click Edit API key.
*   Under Key restrictions > Application restrictions, choose Android apps.
*   Under Restrict usage to your Android apps, click Add an item.
*   Add your `android.package` from app.json (for example: `com.company.myapp`) to the package name field.
*   Then, add the SHA-1 certificate fingerprint's value from step 2.
*   Click Done and then click Save.

4

#### Add the API key to your project

*   Copy your API Key into your your to either a .env file and then add it to your app.json under the `android.config.googleMaps.apiKey` field like or copy it:

```
"android": {
  "config": {
    "googleMaps": {
      "apiKey": "process.env.GOOGLE_MAPS_API_KEY",
    },
  },
}
```
*   In your code, import `{ PROVIDER_GOOGLE }` from `react-native-maps` and add the property `provider={PROVIDER_GOOGLE}` to your `<MapView>`. This property works on both Android and iOS.
*   Rebuild the app binary (or re-submit to the Google Play Store in case your app is already uploaded). An easy way to test if the configuration was successful is to do an [emulator build.

### iOS

> If you have already registered a project for another Google service on iOS, such as Google Sign In, you enable the Maps SDK for iOS on your project and jump to step 3.

1

#### Register a Google Cloud API project and enable the Maps SDK for iOS

*   Open your browser to the [Google API Manager and create a project.
*   Then, go to the project, click Enable APIs and Services and enable the Maps SDK for iOS.

2

#### Create an API key

*   Go to [Google Cloud Credential manager and click Create Credentials, then API Key.
*   In the modal, click Edit API key.
*   Under Key restrictions > Application restrictions, choose iOS apps.
*   Under Accept requests from an iOS application with one of these bundle identifiers, click the Add an item button.
*   Add your `ios.bundleIdentifier` from app.json (for example: `com.company.myapp`) to the bundle ID field.
*   Click Done and then click Save.

3

#### Add the API key to your project

*   Copy your API Key into your your to either a .env file and then add it to your app.json under the `ios.config.googleMapsApiKey` field like or copy it:
```
"ios": {
  "config": {
    "googleMapsApiKey":  "process.env.GOOGLE_MAPS_API_KEY",
    },
  }
```

*   In your code, import `{ PROVIDER_GOOGLE }` from `react-native-maps` and add the property `provider={PROVIDER_GOOGLE}` to your `<MapView>`. This property works on both Android and iOS.
*   Rebuild the app binary. An easy way to test if the configuration was successful is to do a [simulator build.

---

# MaskedView

`@react-native-masked-view/masked-view` provides a masked view that only displays the pixels that overlap with the view rendered in its mask element.

> You can only have one of either `@react-native-community/masked-view` (deprecated) or `@react-native-masked-view/masked-view` installed in your project at any given time. React Navigation v6 and above requires `@react-native-masked-view/masked-view`, so you should use that package instead if you are using the latest version of React Navigation.

> Android support for this library is experimental and you may encounter inconsistencies in behavior across platforms. Report issues you encounter to [`react-native-masked-view` GitHub repository.

## Installation

`npx expo install @react-native-masked-view/masked-view`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See full documentation at [`react-native-masked-view/masked-view`.

---

# Expo MediaLibrary

`expo-media-library` provides access to the user's media library, allowing them to access their existing images and videos from your app, as well as save new ones. You can also subscribe to any updates made to the user's media library.

## Installation

`npx expo install expo-media-library`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-media-library` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
```
"plugins":
    "expo-media-library",
    {
      "photosPermission": "Allow $(PRODUCT_NAME) to access your photos.",
      "savePhotosPermission": "Allow $(PRODUCT_NAME) to save photos.",
      "isAccessMediaLocationEnabled": true
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `photosPermission` | `"Allow $(PRODUCT_NAME) to access your photos."` |
Only for: iOS

Sets the iOS `NSPhotoLibraryUsageDescription` permission message in Info.plist.

 |
| `savePhotosPermission` | `"Allow $(PRODUCT_NAME) to save photos."` |

Only for: iOS

Sets the iOS `NSPhotoLibraryAddUsageDescription` permission message in Info.plist.

 |
| `isAccessMediaLocationEnabled` | `false` |

Only for: Android

Sets whether or not to request the `ACCESS_MEDIA_LOCATION` permission on Android.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using native android ios projects manually, then you need to add following permissions and configuration to your native projects:

Android

*   To access asset location (latitude and longitude EXIF tags), add `ACCESS_MEDIA_LOCATION` permission to your project's android/app/src/main/AndroidManifest.xml:
```
<uses-permission android:name="android.permission.ACCESS_MEDIA_LOCATION" />
```
*   [Scoped storage is available from Android 10. To make `expo-media-library` work with scoped storage, you need to add the following configuration to your android/app/src/main/AndroidManifest.xml:
```
<manifest ... >
  <application android:requestLegacyExternalStorage="true" ...>
</manifest>
```
iOS

*   Add `NSPhotoLibraryUsageDescription`, and `NSPhotoLibraryAddUsageDescription` keys to your project's ios/\[app\]/Info.plist:
```
<key>NSPhotoLibraryUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to access your photos</string>
<key>NSPhotoLibraryAddUsageDescription</key>
<string>Give $(PRODUCT_NAME) permission to save photos</string>
```
## Usage

Fetching albums and displaying assets
```
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
```
if (permissionResponse.status !== 'granted') {
  await requestPermission();
}
const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
  includeSmartAlbums: true,
});
setAlbums(fetchedAlbums);
```
  }

  return (
```
<SafeAreaView style={styles.container}>
  <Button onPress={getAlbums} title="Get albums" />
  <ScrollView>
    {albums && albums.map((album) => <AlbumEntry album={album} />)}
  </ScrollView>
</SafeAreaView>
```
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState();

  useEffect(() => {
```
async function getAlbumAssets() {
  const albumAssets = await MediaLibrary.getAssetsAsync({ album });
  setAssets(albumAssets.assets);
}
getAlbumAssets();
```
  }, [album]);

  return (
```
<View key={album.id} style={styles.albumContainer}>
  <Text>
    {album.title} - {album.assetCount ?? 'no'} assets
  </Text>
  <View style={styles.albumAssetsContainer}>
    {assets && assets.map((asset) => (
      <Image source={{ uri: asset.uri }} width={50} height={50} />
    ))}
  </View>
</View>
```
  );
}

%%placeholder-start%%const styles = StyleSheet.create({ ... }); %%placeholder-end%%const styles = StyleSheet.create({
  container: {
```
flex: 1,
gap: 8,
justifyContent: 'center',
...Platform.select({
  android: {
    paddingTop: 40,
  },
}),
```
  },
  albumContainer: {
```
paddingHorizontal: 20,
marginBottom: 12,
gap: 4,
```
  },
  albumAssetsContainer: {
```
flexDirection: 'row',
flexWrap: 'wrap',
```
  },
});
```
## API
```
import * as MediaLibrary from 'expo-media-library';
```
## Component

### `getAlbumsAsync`

Type: `React.[Element<[AlbumsOptions](#albumsoptions)>`

Queries for user-created albums in media gallery.

## Constants

### `MediaLibrary.MediaType`

Type: `[MediaTypeObject](#mediatypeobject)`

Possible media types.

### `MediaLibrary.SortBy`

Type: `[SortByObject](#sortbyobject)`

Supported keys that can be used to sort `getAssetsAsync` results.

## Hooks

### `usePermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<{ granularPermissions: [GranularPermission](#granularpermission), writeOnly: boolean }>` |

Check or request permissions to access the media library. This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example
```
const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();
```
## Methods

### `MediaLibrary.addAssetsToAlbumAsync(assets, album, copy)`

| Parameter | Type | Description |
| --- | --- | --- |
| assets | `[AssetRef](#assetref) | [AssetRef](#assetref)` |
An array of [Asset](#asset) or their IDs.

 |
| album | `[AlbumRef](#albumref)` |

An [Album](#album) or its ID.

 |
| copy(optional) | `boolean` |

Android only. Whether to copy assets to the new album instead of move them. Defaults to `true`.

Default:`true`

 |

Adds array of assets to the album.

On Android, by default it copies assets from the current album to provided one, however it's also possible to move them by passing `false` as `copyAssets` argument.In case they're copied you should keep in mind that `getAssetsAsync` will return duplicated assets.

Returns:

`[Promise<boolean>`

Returns promise which fulfils with `true` if the assets were successfully added to the album.

### `MediaLibrary.albumNeedsMigrationAsync(album)`

| Parameter | Type | Description |
| --- | --- | --- |
| album | `[AlbumRef](#albumref)` |
An [Album](#album) or its ID.

 |

Checks if the album should be migrated to a different location. In other words, it checks if the application has the write permission to the album folder. If not, it returns `true`, otherwise `false`.

> Note: For Android below R, web or iOS, this function always returns `false`.

Returns:

`[Promise<boolean>`

Returns a promise which fulfils with `true` if the album should be migrated.

### `MediaLibrary.createAlbumAsync(albumName, asset, copyAsset)`

| Parameter | Type | Description |
| --- | --- | --- |
| albumName | `string` |
Name of the album to create.

 |
| asset(optional) | `[AssetRef](#assetref)` |

An [Asset](#asset) or its ID (required on Android).

 |
| copyAsset(optional) | `boolean` |

Android Only. Whether to copy asset to the new album instead of move it. Defaults to `true`.

Default:`true`

 |

Creates an album with given name and initial asset. The asset parameter is required on Android, since it's not possible to create empty album on this platform. On Android, by default it copies given asset from the current album to the new one, however it's also possible to move it by passing `false` as `copyAsset` argument. In case it's copied you should keep in mind that `getAssetsAsync` will return duplicated asset.

Returns:

`[Promise<[Album](#album)>`

Newly created `Album`.

### `MediaLibrary.createAssetAsync(localUri)`

| Parameter | Type | Description |
| --- | --- | --- |
| localUri | `string` |
A URI to the image or video file. It must contain an extension. On Android it must be a local path, so it must start with `file:///`

 |

Creates an asset from existing file. The most common use case is to save a picture taken by [Camera. This method requires `CAMERA_ROLL` permission.

Returns:

`[Promise<[Asset>`

A promise which fulfils with an object representing an `Asset`.

Example
```
const { uri } = await Camera.takePictureAsync();
const asset = await MediaLibrary.createAssetAsync(uri);
```

### `MediaLibrary.deleteAlbumsAsync(albums, assetRemove)`

| Parameter | Type | Description |
| --- | --- | --- |
| albums | `[AlbumRef](#albumref) | [AlbumRef](#albumref)` |
An array of `Album`s or their IDs.

 |
| assetRemove(optional) | `boolean` |

iOS Only. Whether to also delete assets belonging to given albums. Defaults to `false`.

Default:`false`

 |

Deletes given albums from the library. On Android by default it deletes assets belonging to given albums from the library. On iOS it doesn't delete these assets, however it's possible to do by passing `true` as `deleteAssets`.

Returns:

`[Promise<boolean>`

Returns a promise which fulfils with `true` if the albums were successfully deleted from the library.

### `MediaLibrary.deleteAssetsAsync(assets)`

| Parameter | Type | Description |
| --- | --- | --- |
| assets | `[AssetRef](#assetref) | [AssetRef](#assetref)` |
An array of [Asset](#asset) or their IDs.

 |

Deletes assets from the library. On iOS it deletes assets from all albums they belong to, while on Android it keeps all copies of them (album is strictly connected to the asset). Also, there is additional dialog on iOS that requires user to confirm this action.

Returns:

`[Promise<boolean>`

Returns promise which fulfils with `true` if the assets were successfully deleted.

### `MediaLibrary.getAlbumAsync(title)`

| Parameter | Type | Description |
| --- | --- | --- |
| title | `string` |
Name of the album to look for.

 |

Queries for an album with a specific name.

Returns:

`[Promise<[Album](#album)>`

An object representing an `Album`, if album with given name exists, otherwise returns `null`.

### `MediaLibrary.getAssetInfoAsync(asset, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| asset | `[AssetRef](#assetref)` |
An [Asset](#asset) or its ID.

 |
| options(optional) | `[MediaLibraryAssetInfoQueryOptions](#medialibraryassetinfoqueryoptions)` |

\-

 |

Provides more information about an asset, including GPS location, local URI and EXIF metadata.

Returns:

`[Promise<[AssetInfo](#assetinfo)>`

An [AssetInfo](#assetinfo) object, which is an `Asset` extended by an additional fields.

### `MediaLibrary.getAssetsAsync(assetsOptions)`

| Parameter | Type |
| --- | --- |
| assetsOptions(optional) | `[AssetsOptions](#assetsoptions)` |

Fetches a page of assets matching the provided criteria.

Returns:

`[Promise<[PagedInfo](#pagedinfo)<[Asset>>`

A promise that fulfils with to `PagedInfo` object with array of `Asset`s.

### `MediaLibrary.getMomentsAsync()`

Only for: iOS

Fetches a list of moments, which is a group of assets taken around the same place and time.

Returns:

`[Promise<any>`

An array of [albums](#album) whose type is `moment`.

### `MediaLibrary.getPermissionsAsync(writeOnly, granularPermissions)`

| Parameter | Type | Description |
| --- | --- | --- |
| writeOnly(optional) | `boolean` |
Default:`false`

 |
| granularPermissions(optional) | `[GranularPermission](#granularpermission)` |

A list of `GranularPermission` values. This parameter will have an effect only on Android API 33 and newer. By default, `expo-media-library` will ask for all possible permissions.

 |

Checks user's permissions for accessing media library.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that fulfils with `PermissionResponse` object.

### `MediaLibrary.isAvailableAsync()`

Returns whether the Media Library API is enabled on the current device.

Returns:

`[Promise<boolean>`

A promise which fulfils with a `boolean`, indicating whether the Media Library API is available on the current device.

### `MediaLibrary.migrateAlbumIfNeededAsync(album)`

| Parameter | Type | Description |
| --- | --- | --- |
| album | `[AlbumRef](#albumref)` |
An [Album](#album) or its ID.

 |

Moves album content to the special media directories on Android R or above if needed. Those new locations are in line with the Android `scoped storage` - so your application won't lose write permission to those directories in the future.

This method does nothing if:

*   app is running on iOS, web or Android below R
*   app has write permission to the album folder

The migration is possible when the album contains only compatible files types. For instance, movies and pictures are compatible with each other, but music and pictures are not. If automatic migration isn't possible, the function will be rejected. In that case, you can use methods from the `expo-file-system` to migrate all your files manually.

#### Why do you need to migrate files?

Android R introduced a lot of changes in the storage system. Now applications can't save anything to the root directory. The only available locations are from the `MediaStore` API. Unfortunately, the media library stored albums in folders for which, because of those changes, the application doesn't have permissions anymore. However, it doesn't mean you need to migrate all your albums. If your application doesn't add assets to albums, you don't have to migrate. Everything will work as it used to. You can read more about scoped storage in [the Android documentation.

Returns:

`[Promise<void>`

A promise which fulfils to `void`.

### `MediaLibrary.presentPermissionsPickerAsync()`

Available only on iOS >= 14. Allows the user to update the assets that your app has access to. The system modal is only displayed if the user originally allowed only `limited` access to their media library, otherwise this method is a no-op.

Returns:

`[Promise<void>`

A promise that either rejects if the method is unavailable (meaning the device is not running iOS >= 14), or resolves to `void`.

> Note: This method doesn't inform you if the user changes which assets your app has access to. For that information, you need to subscribe for updates to the user's media library using [addListener(listener)](#medialibraryaddlistenerlistener). If `hasIncrementalChanges` is `false`, the user changed their permissions.

### `MediaLibrary.removeAssetsFromAlbumAsync(assets, album)`

| Parameter | Type | Description |
| --- | --- | --- |
| assets | `[AssetRef](#assetref) | [AssetRef](#assetref)` |
An array of [Asset](#asset) or their IDs.

 |
| album | `[AlbumRef](#albumref)` |

An [Album](#album) or its ID.

 |

Removes given assets from album.

On Android, album will be automatically deleted if there are no more assets inside.

Returns:

`[Promise<boolean>`

Returns promise which fulfils with `true` if the assets were successfully removed from the album.

### `MediaLibrary.removeSubscription(subscription)`

| Parameter | Type |
| --- | --- |
| subscription | `[Subscription](#subscription)` |

Returns:

`void`

### `MediaLibrary.requestPermissionsAsync(writeOnly, granularPermissions)`

| Parameter | Type | Description |
| --- | --- | --- |
| writeOnly(optional) | `boolean` |
Default:`false`

 |
| granularPermissions(optional) | `[GranularPermission](#granularpermission)` |

A list of `GranularPermission` values. This parameter will have an effect only on Android API 33 and newer. By default, `expo-media-library` will ask for all possible permissions.

 |

Asks the user to grant permissions for accessing media in user's media library.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that fulfils with `PermissionResponse` object.

### `MediaLibrary.saveToLibraryAsync(localUri)`

| Parameter | Type | Description |
| --- | --- | --- |
| localUri | `string` |
A URI to the image or video file. It must contain an extension. On Android it must be a local path, so it must start with `file:///`.

 |

Saves the file at given `localUri` to the user's media library. Unlike `createAssetAsync()`, This method doesn't return created asset. On iOS 11+, it's possible to use this method without asking for `CAMERA_ROLL` permission, however then yours `Info.plist` should have `NSPhotoLibraryAddUsageDescription` key.

Returns:

`[Promise<void>`

## Event Subscriptions

### `MediaLibrary.addListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [MediaLibraryAssetsChangeEvent](#medialibraryassetschangeevent)) => void` |
A callback that is fired when any assets have been inserted or deleted from the library, or when the user changes which assets they're allowing access to. On Android it's invoked with an empty object. On iOS it's invoked with `MediaLibraryAssetsChangeEvent` object.

 |

Subscribes for updates in user's media library.

Returns:

`[Subscription](#subscription)`

An `Subscription` object that you can call `remove()` on when you would like to unsubscribe the listener.

### `MediaLibrary.removeAllListeners()`

Removes all listeners.

Returns:

`void`

## Interfaces

### `EXPermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `Album`

| Property | Type | Description |
| --- | --- | --- |
| approximateLocation(optional) | `[Location](#location)` |
Only for: iOS

Apply only to albums whose type is `'moment'`. Approximated location of all assets in the moment.

 |
| assetCount | `number` |

Estimated number of assets in the album.

 |
| endTime | `number` |

Only for: iOS

Apply only to albums whose type is `'moment'`. Latest creation timestamp of all assets in the moment.

 |
| id | `string` |

Album ID.

 |
| locationNames(optional) | `string` |

Only for: iOS

Apply only to albums whose type is `'moment'`. Names of locations grouped in the moment.

 |
| startTime | `number` |

Only for: iOS

Apply only to albums whose type is `'moment'`. Earliest creation timestamp of all assets in the moment.

 |
| title | `string` |

Album title.

 |
| type(optional) | `[AlbumType](#albumtype)` |

Only for: iOS

The type of the assets album.

 |

### `AlbumRef`

Literal Type: `union`

Acceptable values are: `[Album](#album)` | `string`

### `AlbumType`

Literal Type: `string`

Acceptable values are: `'album'` | `'moment'` | `'smartAlbum'`

### `AlbumsOptions`

| Property | Type | Description |
| --- | --- | --- |
| includeSmartAlbums(optional) | `boolean` |
\-

 |

### `Asset`

| Property | Type | Description |
| --- | --- | --- |
| albumId(optional) | `string` |
Only for: Android

Album ID that the asset belongs to.

 |
| creationTime | `number` |

File creation timestamp.

 |
| duration | `number` |

Duration of the video or audio asset in seconds.

 |
| filename | `string` |

Filename of the asset.

 |
| height | `number` |

Height of the image or video.

 |
| id | `string` |

Internal ID that represents an asset.

 |
| mediaSubtypes(optional) | `[MediaSubtype](#mediasubtype)` |

Only for: iOS

An array of media subtypes.

 |
| mediaType | `[MediaTypeValue](#mediatypevalue)` |

Media type.

 |
| modificationTime | `number` |

Last modification timestamp.

 |
| uri | `string` |

URI that points to the asset. `assets://*` (iOS), `file://*` (Android)

 |
| width | `number` |

Width of the image or video.

 |

### `AssetInfo`

Type: `[Asset` extended by:

| Property | Type | Description |
| --- | --- | --- |
| exif(optional) | `object` |
EXIF metadata associated with the image.

 |
| isFavorite(optional) | `boolean` |

Only for: iOS

Whether the asset is marked as favorite.

 |
| isNetworkAsset(optional) | `boolean` |

Only for: iOS

This field is available only if flag `shouldDownloadFromNetwork` is set to `false`. Whether the asset is stored on the network (iCloud on iOS).

 |
| localUri(optional) | `string` |

Local URI for the asset.

 |
| location(optional) | `[Location](#location)` |

GPS location if available.

 |
| orientation(optional) | `number` |

Only for: iOS

Display orientation of the image. Orientation is available only for assets whose `mediaType` is `MediaType.photo`. Value will range from 1 to 8, see [EXIF orientation specification](http://sylvana.net/jpegcrop/exif_orientation.html) for more details.

 |

### `AssetRef`

Literal Type: `union`

Acceptable values are: `[Asset` | `string`

### `AssetsOptions`

| Property | Type | Description |
| --- | --- | --- |
| after(optional) | `[AssetRef](#assetref)` |
Asset ID of the last item returned on the previous page. To get the ID of the next page, pass `endCursor` as its value.

 |
| album(optional) | `[AlbumRef](#albumref)` |

[Album](#album) or its ID to get assets from specific album.

 |
| createdAfter(optional) | `[Date | number` |

`Date` object or Unix timestamp in milliseconds limiting returned assets only to those that were created after this date.

 |
| createdBefore(optional) | `[Date | number` |

Similarly as `createdAfter`, but limits assets only to those that were created before specified date.

 |
| first(optional) | `number` |

The maximum number of items on a single page.

Default:`20`

 |
| mediaType(optional) | `[MediaTypeValue](#mediatypevalue) | [MediaTypeValue](#mediatypevalue)` |

An array of [MediaTypeValue](#expomedialibrarymediatypevalue)s or a single `MediaTypeValue`.

Default:`MediaType.photo`

 |
| sortBy(optional) | `[SortByValue](#sortbyvalue) | [SortByValue](#sortbyvalue)` |

An array of `SortByValue`s or a single `SortByValue` value. By default, all keys are sorted in descending order, however you can also pass a pair `[key, ascending]` where the second item is a `boolean` value that means whether to use ascending order. Note that if the `SortBy.default` key is used, then `ascending` argument will not matter. Earlier items have higher priority when sorting out the results. If empty, this method will use the default sorting that is provided by the platform.

 |

### `GranularPermission`

Only for: Android API 33+

Literal Type: `string`

Determines the type of media that the app will ask the OS to get access to.

Acceptable values are: `'audio'` | `'photo'` | `'video'`

### `Location`

| Property | Type | Description |
| --- | --- | --- |
| latitude | `number` |
\-

 |
| longitude | `number` |

\-

 |

### `MediaLibraryAssetInfoQueryOptions`

| Property | Type | Description |
| --- | --- | --- |
| shouldDownloadFromNetwork(optional) | `boolean` |
Whether allow the asset to be downloaded from network. Only available in iOS with iCloud assets.

Default:`true`

 |

### `MediaLibraryAssetsChangeEvent`

| Property | Type | Description |
| --- | --- | --- |
| deletedAssets(optional) | `[Asset` |
Available only if `hasIncrementalChanges` is `true`. Array of `Asset`s that have been deleted from the library.

 |
| hasIncrementalChanges | `boolean` |

Whether the media library's changes could be described as "incremental changes". `true` indicates the changes are described by the `insertedAssets`, `deletedAssets` and `updatedAssets` values. `false` indicates that the scope of changes is too large and you should perform a full assets reload (eg. a user has changed access to individual assets in the media library).

 |
| insertedAssets(optional) | `[Asset` |

Available only if `hasIncrementalChanges` is `true`. Array of `Asset`s that have been inserted to the library.

 |
| updatedAssets(optional) | `[Asset` |

Available only if `hasIncrementalChanges` is `true`. Array of `Asset`s that have been updated or completed downloading from network storage (iCloud on iOS).

 |

### `MediaSubtype`

Literal Type: `string`

Acceptable values are: `'depthEffect'` | `'hdr'` | `'highFrameRate'` | `'livePhoto'` | `'panorama'` | `'screenshot'` | `'stream'` | `'timelapse'`

### `MediaTypeObject`

| Property | Type | Description |
| --- | --- | --- |
| audio | `'audio'` |
\-

 |
| photo | `'photo'` |

\-

 |
| unknown | `'unknown'` |

\-

 |
| video | `'video'` |

\-

 |

### `MediaTypeValue`

Literal Type: `string`

Acceptable values are: `'audio'` | `'photo'` | `'video'` | `'unknown'`

### `PagedInfo`

| Property | Type | Description |
| --- | --- | --- |
| assets | `T` |
A page of `Asset`s fetched by the query.

 |
| endCursor | `string` |

ID of the last fetched asset. It should be passed as `after` option in order to get the next page.

 |
| hasNextPage | `boolean` |

Whether there are more assets to fetch.

 |
| totalCount | `number` |

Estimated total number of assets that match the query.

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

Type: `[EXPermissionResponse](#expermissionresponse)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| accessPrivileges(optional) | `'all' | 'limited' | 'none'` |
Indicates if your app has access to the whole or only part of the photo library. Possible values are:

*   `'all'` if the user granted your app access to the whole photo library
*   `'limited'` if the user granted your app access only to selected photos (only available on Android API 34+ and iOS 14.0+)
*   `'none'` if user denied or hasn't yet granted the permission

 |

### `SortByKey`

Literal Type: `string`

Acceptable values are: `'default'` | `'mediaType'` | `'width'` | `'height'` | `'creationTime'` | `'modificationTime'` | `'duration'`

### `SortByObject`

| Property | Type | Description |
| --- | --- | --- |
| creationTime | `'creationTime'` |
\-

 |
| default | `'default'` |

\-

 |
| duration | `'duration'` |

\-

 |
| height | `'height'` |

\-

 |
| mediaType | `'mediaType'` |

\-

 |
| modificationTime | `'modificationTime'` |

\-

 |
| width | `'width'` |

\-

 |

### `SortByValue`

Literal Type: `union`

Acceptable values are: `[[SortByKey](#sortbykey), boolean]` | `[SortByKey](#sortbykey)`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

The following permissions are added automatically through this library's AndroidManifest.xml:

| Android Permission | Description |
| --- | --- |
|
`READ_EXTERNAL_STORAGE`

 |

Allows an application to read from external storage.

 |
|

`WRITE_EXTERNAL_STORAGE`

 |

Allows an application to write to external storage.

 |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSPhotoLibraryUsageDescription`

 | A message that tells the user why the app is requesting access to the user’s photo library. |
|

`NSPhotoLibraryAddUsageDescription`

 | A message that tells the user why the app is requesting add-only access to the user’s photo library. |

---

# Expo NavigationBar

`expo-navigation-bar` enables you to modify and observe the native navigation bar on Android devices. Due to some Android platform restrictions, parts of this API overlap with the `expo-status-bar` API.

Properties are named after style properties; visibility, position, backgroundColor, borderColor, and so on.

The APIs in this package have no impact when "Gesture Navigation" is enabled on the Android device. There is currently no native Android API to detect if "Gesture Navigation" is enabled or not.

## Installation

`npx expo install expo-navigation-bar`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as NavigationBar from 'expo-navigation-bar';
```

## Hooks

### `useVisibility()`

React hook that statefully updates with the visibility of the system navigation bar.

Returns:

`[NavigationBarVisibility](#navigationbarvisibility) | null`

Visibility of the navigation bar, `null` during async initialization.

Example

```
function App() {
  const visibility = NavigationBar.useVisibility()
  // React Component...
}
```

## Methods

### `NavigationBar.getBackgroundColorAsync()`

Gets the navigation bar's background color.

Returns:

`[Promise<[ColorValue>`

Current navigation bar color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).

Example

```
const color = await NavigationBar.getBackgroundColorAsync();
```

### `NavigationBar.getBehaviorAsync()`

Gets the behavior of the status and navigation bars when the user swipes or touches the screen.

Returns:

`[Promise<[NavigationBarBehavior](#navigationbarbehavior)>`

Navigation bar interaction behavior. Returns `inset-touch` on unsupported platforms (iOS, web).

Example

```
await NavigationBar.getBehaviorAsync()
```

### `NavigationBar.getBorderColorAsync()`

Gets the navigation bar's top border color, also known as the "divider color".

Returns:

`[Promise<[ColorValue>`

Navigation bar top border color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).

Example

```
const color = await NavigationBar.getBorderColorAsync();
```

### `NavigationBar.getButtonStyleAsync()`

Gets the navigation bar's button color styles.

Returns:

`[Promise<[NavigationBarButtonStyle](#navigationbarbuttonstyle)>`

Navigation bar foreground element color settings. Returns `light` on unsupported platforms (iOS, web).

Example

```
const style = await NavigationBar.getButtonStyleAsync();
```

### `NavigationBar.getVisibilityAsync()`

Get the navigation bar's visibility.

Returns:

`[Promise<[NavigationBarVisibility](#navigationbarvisibility)>`

Navigation bar's current visibility status. Returns `hidden` on unsupported platforms (iOS, web).

Example

```
const visibility = await NavigationBar.getVisibilityAsync("hidden");
```

### `NavigationBar.setBackgroundColorAsync(color)`

| Parameter | Type | Description |
| --- | --- | --- |
| color | `[ColorValue` |
Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).

 |

Changes the navigation bar's background color.

Returns:

`[Promise<void>`

Example

```
NavigationBar.setBackgroundColorAsync("white");
```

### `NavigationBar.setBehaviorAsync(behavior)`

| Parameter | Type | Description |
| --- | --- | --- |
| behavior | `[NavigationBarBehavior](#navigationbarbehavior)` |
Dictates the interaction behavior of the navigation bar.

 |

Sets the behavior of the status bar and navigation bar when they are hidden and the user wants to reveal them.

For example, if the navigation bar is hidden (`setVisibilityAsync(false)`) and the behavior is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the navigation bar.

*   `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.
*   `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.
*   `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.

Returns:

`[Promise<void>`

Example

```
await NavigationBar.setBehaviorAsync('overlay-swipe')
```

### `NavigationBar.setBorderColorAsync(color)`

| Parameter | Type | Description |
| --- | --- | --- |
| color | `[ColorValue` |
Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).

 |

Changes the navigation bar's border color.

Returns:

`[Promise<void>`

Example

```
NavigationBar.setBorderColorAsync("red");
```

### `NavigationBar.setButtonStyleAsync(style)`

| Parameter | Type | Description |
| --- | --- | --- |
| style | `[NavigationBarButtonStyle](#navigationbarbuttonstyle)` |
Dictates the color of the foreground element color.

 |

Changes the navigation bar's button colors between white (`light`) and a dark gray color (`dark`).

Returns:

`[Promise<void>`

Example

```
NavigationBar.setButtonStyleAsync("light");
```

### `NavigationBar.setPositionAsync(position)`

| Parameter | Type | Description |
| --- | --- | --- |
| position | `[NavigationBarPosition](#navigationbarposition)` |
Based on CSS position property.

 |

Sets positioning method used for the navigation bar (and status bar). Setting position `absolute` will float the navigation bar above the content, whereas position `relative` will shrink the screen to inline the navigation bar.

When drawing behind the status and navigation bars, ensure the safe area insets are adjusted accordingly.

Returns:

`[Promise<void>`

Example

```
// enables edge-to-edge mode
await NavigationBar.setPositionAsync('absolute')
// transparent backgrounds to see through
await NavigationBar.setBackgroundColorAsync('#ffffff00')
```

### `NavigationBar.setVisibilityAsync(visibility)`

| Parameter | Type | Description |
| --- | --- | --- |
| visibility | `[NavigationBarVisibility](#navigationbarvisibility)` |
Based on CSS visibility property.

 |

Set the navigation bar's visibility.

Returns:

`[Promise<void>`

Example

```
NavigationBar.setVisibilityAsync("hidden");
```

### `NavigationBar.unstable_getPositionAsync()`

Whether the navigation and status bars float above the app (absolute) or sit inline with it (relative). This value can be incorrect if `androidNavigationBar.visible` is used instead of the config plugin `position` property.

This method is unstable because the position can be set via another native module and get out of sync. Alternatively, you can get the position by measuring the insets returned by `react-native-safe-area-context`.

Returns:

`[Promise<[NavigationBarPosition](#navigationbarposition)>`

Navigation bar positional rendering mode. Returns `relative` on unsupported platforms (iOS, web).

Example

```
await NavigationBar.unstable_getPositionAsync()
```

## Event Subscriptions

### `NavigationBar.addVisibilityListener(listener)`

| Parameter | Type |
| --- | --- |
| listener | `(event: [NavigationBarVisibilityEvent](#navigationbarvisibilityevent)) => void` |

Observe changes to the system navigation bar. Due to platform constraints, this callback will also be triggered when the status bar visibility changes.

Returns:

`[Subscription](#subscription)`

Example

```
NavigationBar.addVisibilityListener(({ visibility }) => {
  // ...
});
```

## Types

### `NavigationBarBehavior`

Literal Type: `string`

Interaction behavior for the system navigation bar.

Acceptable values are: `'overlay-swipe'` | `'inset-swipe'` | `'inset-touch'`

### `NavigationBarButtonStyle`

Literal Type: `string`

Appearance of the foreground elements in the navigation bar, i.e. the color of the menu, back, home button icons.

*   `dark` makes buttons darker to adjust for a mostly light nav bar.
*   `light` makes buttons lighter to adjust for a mostly dark nav bar.

Acceptable values are: `'light'` | `'dark'`

### `NavigationBarPosition`

Literal Type: `string`

Navigation bar positional mode.

Acceptable values are: `'relative'` | `'absolute'`

### `NavigationBarVisibility`

Literal Type: `string`

Visibility of the navigation bar.

Acceptable values are: `'visible'` | `'hidden'`

### `NavigationBarVisibilityEvent`

Current system UI visibility state. Due to platform constraints, this will return when the status bar visibility changes as well as the navigation bar.

| Property | Type | Description |
| --- | --- | --- |
| rawVisibility | `number` |
Native Android system UI visibility state, returned from the native Android `setOnSystemUiVisibilityChangeListener` API.

 |
| visibility | `[NavigationBarVisibility](#navigationbarvisibility)` |

Current navigation bar visibility.

 |

---

# NetInfo

`@react-native-community/netinfo` allows you to get information about connection type and connection quality.

## Installation

`npx expo install @react-native-community/netinfo`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## API

To import this library, use:

```
import NetInfo from '@react-native-community/netinfo';
```

If you want to grab information about the network connection just once, you can use:

```
NetInfo.fetch().then(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});
```

Or, if you'd rather subscribe to updates about the network state (which then allows you to run code/perform actions anytime the network state changes) use:

```
const unsubscribe = NetInfo.addEventListener(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

// To unsubscribe to these update, just use:
unsubscribe();
```

## Accessing the SSID

To access the `ssid` property (available under `state.details.ssid`), there are a few additional configuration steps:

### Android and iOS

*   Request location permissions with [`Location.requestForegroundPermissionsAsync()` or [`Location.requestBackgroundPermissionsAsync()`.

### iOS only

*   Add the `com.apple.developer.networking.wifi-info` entitlement to your app.json under `ios.entitlements`:
```
app.json
```
  "ios": {
    "entitlements": {
      "com.apple.developer.networking.wifi-info": true
    }
  }
```
*   Check the Access Wi-Fi Information box in your app's App Identifier, [which can be found here.
```
*   Rebuild your app with [`eas build --platform ios` or [`npx expo run:ios`.
```

For more information on API and usage, see [`react-native-netinfo` documentation.

---

# Expo Network

`expo-network` provides useful information about the device's network such as its IP address, MAC address, and airplane mode status.

## Installation

`npx expo install expo-network`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration

On Android, this module requires permissions to access the network and Wi-Fi state. The permissions `ACCESS_NETWORK_STATE` and `ACCESS_WIFI_STATE` are added automatically.

## API

```
import * as Network from 'expo-network';
```

## Methods

### `Network.getIpAddressAsync()`

Gets the device's current IPv4 address. Returns `0.0.0.0` if the IP address could not be retrieved.

On web, this method uses the third-party [`ipify service` to get the public IP address of the current device.

Returns:

`[Promise<string>`

A `Promise` that fulfils with a `string` of the current IP address of the device's main network interface. Can only be IPv4 address.

Example

```
await Network.getIpAddressAsync();
// "92.168.32.44"
```

### `Network.getNetworkStateAsync()`

Gets the device's current network connection state.

On web, `navigator.connection.type` is not available on browsers. So if there is an active network connection, the field `type` returns `NetworkStateType.UNKNOWN`. Otherwise, it returns `NetworkStateType.NONE`.

Returns:

`[Promise<[NetworkState](#networkstate)>`

A `Promise` that fulfils with a `NetworkState` object.

Example

```
await Network.getNetworkStateAsync();
// {
//   type: NetworkStateType.CELLULAR,
//   isConnected: true,
//   isInternetReachable: true,
// }
```

### `Network.isAirplaneModeEnabledAsync()`

Only for: Android

Tells if the device is in airplane mode.

Returns:

`[Promise<boolean>`

Returns a `Promise` that fulfils with a `boolean` value for whether the device is in airplane mode or not.

Example

```
await Network.isAirplaneModeEnabledAsync();
// false
```

## Types

### `NetworkState`

| Property | Type | Description |
| --- | --- | --- |
| isConnected(optional) | `boolean` |
If there is an active network connection. Note that this does not mean that internet is reachable. This field is `false` if the type is either `Network.NetworkStateType.NONE` or `Network.NetworkStateType.UNKNOWN`, `true` otherwise.

 |
| isInternetReachable(optional) | `boolean` |

If the internet is reachable with the currently active network connection. On Android, this depends on `NetInfo.isConnected()` (API level < 29) or `ConnectivityManager.getActiveNetwork()` (API level >= 29). On iOS, this value will always be the same as `isConnected`.

 |
| type(optional) | `[NetworkStateType](#networkstatetype)` |

A `NetworkStateType` enum value that represents the current network connection type.

 |

## Enums

### `NetworkStateType`

An enum of the different types of devices supported by Expo.

#### `BLUETOOTH`

`NetworkStateType.BLUETOOTH ＝ "BLUETOOTH"`

Active network connection over Bluetooth.

#### `CELLULAR`

`NetworkStateType.CELLULAR ＝ "CELLULAR"`

Active network connection over mobile data or [`DUN-specific` mobile connection when setting an upstream connection for tethering.

#### `ETHERNET`

`NetworkStateType.ETHERNET ＝ "ETHERNET"`

Active network connection over Ethernet.

#### `NONE`

`NetworkStateType.NONE ＝ "NONE"`

No active network connection detected.

#### `OTHER`

`NetworkStateType.OTHER ＝ "OTHER"`

Active network connection over other network connection types.

#### `UNKNOWN`

`NetworkStateType.UNKNOWN ＝ "UNKNOWN"`

The connection type could not be determined.

#### `VPN`

`NetworkStateType.VPN ＝ "VPN"`

Active network connection over VPN.

#### `WIFI`

`NetworkStateType.WIFI ＝ "WIFI"`

Active network connection over WiFi.

#### `WIMAX`

`NetworkStateType.WIMAX ＝ "WIMAX"`

Active network connection over Wimax.

## Error codes

| Code | Description |
| --- | --- |
| ERR\_NETWORK\_IP\_ADDRESS | On Android, there may be an unknown Wi-Fi host when trying to access `WifiManager` in `getIpAddressAsync`. On iOS, no network interfaces could be retrieved. |
| ERR\_NETWORK\_UNDEFINED\_INTERFACE | An undefined `interfaceName` was passed as an argument in `getMacAddressAsync`. |
| ERR\_NETWORK\_SOCKET\_EXCEPTION | An error was encountered in creating or accessing the socket in `getMacAddressAsync`. |
| ERR\_NETWORK\_INVALID\_PERMISSION\_INTERNET | There are invalid permissions for [`android.permission.ACCESS_WIFI_STATE` in `getMacAddressAsync`. |
| ERR\_NETWORK\_NO\_ACCESS\_NETWORKINFO | Unable to access network information |

---

# Expo Notifications

`expo-notifications` provides an API to fetch push notification tokens and to present, schedule, receive and respond to notifications.

> Push notifications (remote notifications) functionality provided by `expo-notifications` will be unavailable in Expo Go from SDK 53. Instead, use a [development build. Scheduled notifications (local notifications) will remain available in Expo Go.

## Features

*   Schedule a one-off notification for a specific date or some time from now
*   Schedule a notification repeating in some time interval (or a calendar date match on iOS)
*   Get and set the application badge icon number
*   Fetch a native device push token, so you can send push notifications with FCM and APNs
*   Fetch an Expo push token, so you can send push notifications with Expo
*   Listen to incoming notifications in the foreground and background
*   Listen to interactions with notifications
*   Handle notifications when the app is in the foreground
*   Imperatively dismiss notifications from Notification Center/tray
*   Create, update, and delete Android notification channels
*   Set custom icon and color for notifications on Android

## Installation

`npx expo install expo-notifications`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Check out the example Snack below to see Notifications in action, make sure to use a physical device to test it. Push notifications don't work on emulators/simulators.

Push Notifications

```
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
```
shouldShowAlert: true,
shouldPlaySound: false,
shouldSetBadge: false,
```
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [channels, setChannels] = useState<Notifications.NotificationChannel>();
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
```
undefined
```
  );
  const notificationListener = useRef<Notifications.Subscription>();
  const responseListener = useRef<Notifications.Subscription>();

  useEffect(() => {
```
registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));
```
if (Platform.OS === 'android') {
  Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? ));
}
notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
  setNotification(notification);
});
```
responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
  console.log(response);
});
```
return () => {
  notificationListener.current &&
    Notifications.removeNotificationSubscription(notificationListener.current);
  responseListener.current &&
    Notifications.removeNotificationSubscription(responseListener.current);
};
```
  }, );

  return (
```
<View
  style={{
    flex: 1,
    alignItems: 'center',
    justifyContent: 'space-around',
  }}>
  <Text>Your expo push token: {expoPushToken}</Text>
  <Text>{`Channels: ${JSON.stringify(
    channels.map(c => c.id),
    null,
    2
  )}`}</Text>
  <View style={{ alignItems: 'center', justifyContent: 'center' }}>
    <Text>Title: {notification && notification.request.content.title} </Text>
    <Text>Body: {notification && notification.request.content.body}</Text>
    <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
  </View>
  <Button
    title="Press to schedule a notification"
    onPress={async () => {
      await schedulePushNotification();
    }}
  />
</View>
```
  );
}

async function schedulePushNotification() {
  await Notifications.scheduleNotificationAsync({
```
content: {
  title: "You've got mail! 📬",
  body: 'Here is the notification body',
  data: { data: 'goes here', test: { test1: 'more data' } },
},
trigger: { seconds: 2 },
```
  });
}

async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
```
await Notifications.setNotificationChannelAsync('default', {
  name: 'default',
  importance: Notifications.AndroidImportance.MAX,
  vibrationPattern: [0, 250, 250, 250],
  lightColor: '#FF231F7C',
});
```
  }

  if (Device.isDevice) {
```
const { status: existingStatus } = await Notifications.getPermissionsAsync();
let finalStatus = existingStatus;
if (existingStatus !== 'granted') {
  const { status } = await Notifications.requestPermissionsAsync();
  finalStatus = status;
}
if (finalStatus !== 'granted') {
  alert('Failed to get push token for push notification!');
  return;
}
// Learn more about projectId:
// https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid
// EAS projectId is used here.
try {
  const projectId =
    Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
  if (!projectId) {
    throw new Error('Project ID not found');
  }
  token = (
    await Notifications.getExpoPushTokenAsync({
      projectId,
    })
  ).data;
  console.log(token);
} catch (e) {
  token = `${e}`;
}
```
  } else {
```
alert('Must use physical device for Push Notifications');
```
  }

  return token;
}
```

### Present the notification to the user

```
import * as Notifications from 'expo-notifications';

// First, set the handler that will cause the notification
// to show the alert

Notifications.setNotificationHandler({
  handleNotification: async () => ({
```
shouldShowAlert: true,
shouldPlaySound: false,
shouldSetBadge: false,
```
  }),
});

// Second, call the method

Notifications.scheduleNotificationAsync({
  content: {
```
title: 'Look at that notification',
body: "I'm so proud of myself!",
```
  },
  trigger: null,
});
```

### Handle push notifications with navigation

If you'd like to deep link to a specific screen in your app when you receive a push notification, you can configure either of Expo's navigation systems to do that.

You can use Expo Router's [built-in deep linking to handle incoming URLs from push notifications. Simply configure the root layout to listen for incoming and initial notification events.

app/\_layout.tsx

```
import { useEffect } from 'react';
import * as Notifications from 'expo-notifications';
import { router } from 'expo-router';

function useNotificationObserver() {
  useEffect(() => {
```
let isMounted = true;
```
function redirect(notification: Notifications.Notification) {
  const url = notification.request.content.data?.url;
  if (url) {
    router.push(url);
  }
}
```
Notifications.getLastNotificationResponseAsync()
  .then(response => {
    if (!isMounted || !response?.notification) {
      return;
    }
    redirect(response?.notification);
  });
```
const subscription = Notifications.addNotificationResponseReceivedListener(response => {
  redirect(response.notification);
});
```
return () => {
  isMounted = false;
  subscription.remove();
};
```
  }, );
}

export default function Layout() {
  useNotificationObserver();

  return <Slot />;
}
```

React Navigation's manual [linking configuration can be configured to handle incoming redirects from push notifications:

App.tsx

```
import React from 'react';
import { Linking } from 'react-native';
import * as Notifications from 'expo-notifications';
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return (
```
<NavigationContainer
  linking={{
    config: {
      // Configuration for linking
    },
    async getInitialURL() {
      // First, you may want to do the default deep link handling
      // Check if app was opened from a deep link
      const url = await Linking.getInitialURL();
```
if (url != null) {
        return url;
      }
```
// Handle URL from expo push notifications
      const response = await Notifications.getLastNotificationResponseAsync();
```
return response?.notification.request.content.data.url;
    },
    subscribe(listener) {
      const onReceiveURL = ({ url }: { url: string }) => listener(url);
```
// Listen to incoming links from deep linking
      const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);
```
// Listen to expo push notifications
      const subscription = Notifications.addNotificationResponseReceivedListener(response => {
        const url = response.notification.request.content.data.url;
```
// Any custom logic to see whether the URL needs to be handled
        //...
```
// Let React Navigation handle the URL
        listener(url);
      });
```
return () => {
        // Clean up the event listeners
        eventListenerSubscription.remove();
        subscription.remove();
      };
    },
  }}>
  {/* Your app content */}
</NavigationContainer>
```
  );
}
```

See more details on [React Navigation documentation.

## Configuration

### Credentials

#### Android

Firebase Cloud Messaging credentials are required for all Android apps to receive push notifications in your app (except when testing in Expo Go). For more information, see how to get [FCM credentials for your app.

#### iOS

To register your iOS device and automatically enable push notifications for your EAS Build, see [push notification setup.

### App config

To configure `expo-notifications`, use the built-in [config plugin in the app config (app.json or app.config.js) for [EAS Build or with `npx expo run:[android|ios]`. The plugin allows you to configure the following properties that cannot be set at runtime and require building a new app binary to take effect:

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `icon` | \- |
Only for: Android

Local path to an image to use as the icon for push notifications. 96x96 all-white png with transparency.

 |
| `color` | `#ffffff` |

Only for: Android

Tint color for the push notification image when it appears in the notification tray.

 |
| `defaultChannel` | \- |

Only for: Android

Default channel for FCMv1 notifications.

 |
| `sounds` | \- |

Array of local paths to sound files (.wav recommended) that can be used as custom notification sounds.

 |

Here is an example of using the config plugin in the app config file:

app.json

```
{
  "expo": {
```
"plugins":
    "expo-notifications",
    {
      "icon": "./local/assets/notification-icon.png",
      "color": "#ffffff",
      "defaultChannel": "default",
      "sounds":         "./local/assets/notification-sound.wav",
        "./local/assets/notification-sound-other.wav"

    }

```
  }
}
```

> The iOS APNs entitlement is _always_ set to 'development'. Xcode automatically changes this to 'production' during the archive. [Learn more.

Are you using this library in an existing React Native app?

Learn how to configure the native projects in the [installation instructions in the `expo-notifications` repository.

## Permissions

### Android

*   On Android, this module requires permission to subscribe to the device boot. It's used to setup scheduled notifications when the device (re)starts. The `RECEIVE_BOOT_COMPLETED` permission is added automatically through the library's AndroidManifest.xml.
```
*   Starting from Android 12 (API level 31), to schedule the notification that triggers at the exact time, you need to add `<uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM"/>` to AndroidManifest.xml. You can read more about the [exact alarm permission.
```
*   On Android 13, app users must opt-in to receive notifications via a permissions prompt automatically triggered by the operating system. This prompt will not appear until at least one notification channel is created. The `setNotificationChannelAsync` must be called before `getDevicePushTokenAsync` or `getExpoPushTokenAsync` to obtain a push token. You can read more about the new notification permission behavior for Android 13 in the [official documentation.
```

| Android Permission | Description |
| --- | --- |
|
`RECEIVE_BOOT_COMPLETED`

 |

Allows an application to receive the Intent.ACTION\_BOOT\_COMPLETED that is broadcast after the system finishes booting.

> Allows an application to receive the `[Intent.ACTION_BOOT_COMPLETED` that is broadcast after the system finishes booting. If you don't request this permission, you will not receive the broadcast at that time. Though holding this permission does not have any security implications, it can have a negative impact on the user experience by increasing the amount of time it takes the system to start and allowing applications to have themselves running without the user being aware of them. As such, you must explicitly declare your use of this facility to make that visible to the user.

 |
|

`SCHEDULE_EXACT_ALARM`

 |

Allows applications to use exact alarm APIs.

 |

### iOS

No usage description is required, see [notification-related permissions.

## Notification events listeners

Notification events include incoming notifications, interactions your users perform with notifications (this can be tapping on a notification, or interacting with it via [notification categories), and rare occasions when your notifications may be dropped.

A few different listeners are exposed, so we've provided a chart below which will hopefully help you understand when you can expect each one to be triggered:

| User interacted with notification? | App state | Listener(s) triggered |
| --- | --- | --- |
| false | Foreground | `NotificationReceivedListener` |
| false | Foreground or Background | `BackgroundNotificationTask` |
| false | Killed | none |
| true | Foreground | `NotificationReceivedListener` & `NotificationResponseReceivedListener` |
| true | Background | `NotificationResponseReceivedListener` |
| true | Killed | `useLastNotificationResponse` or `getLastNotificationResponseAsync` |

In the table above, whenever `NotificationResponseReceivedListener` is triggered, the same would apply to the `useLastNotificationResponse` hook.

> When the app is not running or killed and is restarted by tapping on a notification, the `NotificationResponseReceivedListener` may or may not be triggered. To reliably capture the response, we recommend using `useLastNotificationResponse` or `getLastNotificationResponseAsync`.

### Background notifications

> Background event listeners are not supported in Expo Go.

A background notification (iOS) or a data-only notification (Android) is a remote notification that does not display an alert, play a sound, or add a badge to your app's icon. The purpose of a background notification is to provide a way to wake up your app to trigger an app data refresh in the background.

To handle notifications while the app is in the background or not running, you need to do the following:

*   Add `expo-task-manager` package to your project.
*   In your application code, set up a [background task to run when the notification is received.

For Android:

*   Send a push notification payload containing only the `data` key.

For iOS:

*   In the array under the `ios.infoPlist.UIBackgroundModes` key in your [app config, add the values `remote-notification` and `processing`.
*   Add `_contentAvailable: true` to your push notification payload for the Expo push notification service. Under normal circumstances, the "content-available" flag should launch your app in the background.

## Additional information

### Set custom notification sounds

Custom notification sounds are only supported when using [EAS Build.

To add custom push notification sounds to your app, add the `expo-notifications` plugin to your app.json file and then under the `sounds` key, provide an array of local paths to sound files that can be used as custom notification sounds. These local paths are local to your project.

app.json

```
{
  "expo": {
```
"plugins":
    "expo-notifications",
    {
      "sounds": ["local/path/to/mySoundFile.wav"]
    }

```
  }
}
```

After building your app, the array of files will be available for use in both [`NotificationContentInput` and [`NotificationChannelInput`. You only need to provide the base filename. Here's an example using the config above:

```
await Notifications.setNotificationChannelAsync('new-emails', {
  name: 'E-mail notifications',
  importance: Notifications.AndroidImportance.HIGH,
  sound: 'mySoundFile.wav', // Provide ONLY the base filename
});

await Notifications.scheduleNotificationAsync({
  content: {
```
title: "You've got mail! 📬",
sound: 'mySoundFile.wav', // Provide ONLY the base filename
```
  },
  trigger: {
```
seconds: 2,
channelId: 'new-emails',
```
  },
});
```

You can also manually add notification files to your Android and iOS projects if you prefer:

Manually adding notification sounds on Android

On Androids 8.0+, playing a custom sound for a notification requires more than setting the `sound` property on the `NotificationContentInput`. You will also need to configure the `NotificationChannel` with the appropriate `sound`, and use it when sending/scheduling the notification.

For the example below to work, you would place your email-sound.wav file in android/app/src/main/res/raw/.

```
// Prepare the notification channel
await Notifications.setNotificationChannelAsync('new-emails', {
  name: 'E-mail notifications',
  importance: Notifications.AndroidImportance.HIGH,
  sound: 'email-sound.wav', // <- for Android 8.0+, see channelId property below
});

// Eg. schedule the notification
await Notifications.scheduleNotificationAsync({
  content: {
```
title: "You've got mail! 📬",
body: 'Open the notification to read them all',
sound: 'email-sound.wav', // <- for Android below 8.0
```
  },
  trigger: {
```
seconds: 2,
channelId: 'new-emails', // <- for Android 8.0+, see definition above
```
  },
});
```
Manually adding notification sounds on iOS

On iOS, all that's needed is to place your sound file in your Xcode project (see the screenshot below), and then specify the sound file in your `NotificationContentInput`, like this:

```
await Notifications.scheduleNotificationAsync({
  content: {
```
title: "You've got mail! 📬",
body: 'Open the notification to read them all',
sound: 'notification.wav',
```
  },
  trigger: {
```
// ...
```
  },
});
```

### Android push notification payload specification

When sending a push notification, put an object conforming to the following type as `data` of the notification:

```
export interface FirebaseData {
  title?: string;
  message?: string;
  subtitle?: string;
  sound?: boolean | string;
  vibrate?: boolean | number;
  badge?: number;
}
```

### Interpret the iOS permissions response

On iOS, permissions for sending notifications are a little more granular than they are on Android. Because of this, you should rely on the `NotificationPermissionsStatus`'s `ios.status` field, instead of the root `status` field. This value will be one of the following, accessible under `Notifications.IosAuthorizationStatus`:

*   `NOT_DETERMINED`: The user hasn't yet made a choice about whether the app is allowed to schedule notifications
*   `DENIED`: The app isn't authorized to schedule or receive notifications
*   `AUTHORIZED`: The app is authorized to schedule or receive notifications
*   `PROVISIONAL`: The application is provisionally authorized to post noninterruptive user notifications
*   `EPHEMERAL`: The app is authorized to schedule or receive notifications for a limited amount of time

### Manage notification categories (interactive notifications)

Notification categories allow you to create interactive push notifications, so that a user can respond directly to the incoming notification either via buttons or a text response. A category defines the set of actions a user can take, and then those actions are applied to a notification by specifying the `categoryIdentifier` in the [`NotificationContent`.

On iOS, notification categories also allow you to customize your notifications further. With each category, not only can you set interactive actions a user can take, but you can also configure things like the placeholder text to display when the user disables notification previews for your app.

## Platform specific guides

### Handling notification channels 

Android 8+

Starting in Android 8.0 (API level 26), all notifications must be assigned to a channel. For each channel, you can set the visual and auditory behavior that is applied to all notifications in that channel. Then, users can change these settings and decide which notification channels from your app should be intrusive or visible at all, as [Android developer docs states.

If you do not specify a notification channel, `expo-notifications` will create a fallback channel for you, named Miscellaneous. We encourage you to always ensure appropriate channels with informative names are set up for the application and to always send notifications to these channels.

> Calling these methods is a no-op for platforms that do not support this feature (Android below version 8.0 (26) and iOS).

### Custom notification icon and colors 

Android

You can configure the [`notification.icon` and [`notification.color` keys in the project's app.json if you are using [Expo Prebuild or by using the [`expo-notifications` config plugin directly. These are build-time settings, so you'll need to recompile your native Android app with `eas build -p android` or `npx expo run:android` to see the changes.

For your notification icon, make sure you follow [Google's design guidelines (the icon must be all white with a transparent background) or else it may not be displayed as intended.

You can also set a custom notification color per-notification directly in your [`NotificationContentInput` under the `color` attribute.

## API

```
import * as Notifications from 'expo-notifications';
```

## Fetch tokens for push notifications

### `addPushTokenListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `[PushTokenListener](#pushtokenlistener)` |
A function accepting a push token as an argument, it will be called whenever the push token changes.

 |

In rare situations, a push token may be changed by the push notification service while the app is running. When a token is rolled, the old one becomes invalid and sending notifications to it will fail. A push token listener will let you handle this situation gracefully by registering the new token with your backend right away.

Returns:

`EventSubscription`

A `Subscription` object represents the subscription of the provided listener.

Example

```
import React from 'react';
import * as Notifications from 'expo-notifications';

import { registerDevicePushTokenAsync } from '../api';

export default function App() {
  React.useEffect(() => {
```
const subscription = Notifications.addPushTokenListener(registerDevicePushTokenAsync);
return () => subscription.remove();
```
  }, );

  return (
```
// Your app content
```
  );
}
```

### `getDevicePushTokenAsync()`

Returns a native FCM, APNs token or a [`PushSubscription` data that can be used with another push notification service.

Returns:

`[Promise<[DevicePushToken](#devicepushtoken)>`

### `getExpoPushTokenAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[ExpoPushTokenOptions](#expopushtokenoptions)` |
Object allowing you to pass in push notification configuration.

Default:`{}`

 |

Returns an Expo token that can be used to send a push notification to the device using Expo's push notifications service.

This method makes requests to the Expo's servers. It can get rejected in cases where the request itself fails (for example, due to the device being offline, experiencing a network timeout, or other HTTPS request failures). To provide offline support to your users, you should `try/catch` this method and implement retry logic to attempt to get the push token later, once the device is back online.

> For Expo's backend to be able to send notifications to your app, you will need to provide it with push notification keys. For more information, see [credentials in the push notifications setup.

Returns:

`[Promise<[ExpoPushToken](#expopushtoken)>`

Returns a `Promise` that resolves to an object representing acquired push token.

Example

```
import * as Notifications from 'expo-notifications';

export async function registerForPushNotificationsAsync(userId: string) {
  const expoPushToken = await Notifications.getExpoPushTokenAsync({
   projectId: 'your-project-id',
  });

  await fetch('https://example.com/', {
```
method: 'POST',
headers: {
  'Content-Type': 'application/json',
},
body: JSON.stringify({
  userId,
  expoPushToken,
}),
```
  });
}
```

### `removePushTokenSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `EventSubscription` |
A subscription returned by `addPushTokenListener` method.

 |

Removes a push token subscription returned by an `addPushTokenListener` call.

Returns:

`void`

## Listen to notification events

### `addNotificationReceivedListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [Notification](#notification)) => void` |
A function accepting a notification (`Notification`) as an argument.

 |

Listeners registered by this method will be called whenever a notification is received while the app is running.

Returns:

`EventSubscription`

A `Subscription` object represents the subscription of the provided listener.

Example

```
import React from 'react';
import * as Notifications from 'expo-notifications';

export default function App() {
  React.useEffect(() => {
```
const subscription = Notifications.addNotificationReceivedListener(notification => {
  console.log(notification);
});
return () => subscription.remove();
```
  }, );

  return (
```
// Your app content
```
  );
}
```

### `addNotificationResponseReceivedListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [NotificationResponse](#notificationresponse)) => void` |
A function accepting notification response (`NotificationResponse`) as an argument.

 |

Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).

Returns:

`EventSubscription`

A `Subscription` object represents the subscription of the provided listener.

Example

```
import React from 'react';
import { Linking } from 'react-native';
import * as Notifications from 'expo-notifications';

export default function Container() {
  React.useEffect(() => {
```
const subscription = Notifications.addNotificationResponseReceivedListener(response => {
  const url = response.notification.request.content.data.url;
  Linking.openURL(url);
});
return () => subscription.remove();
```
  }, );

  return (
```
// Your app content
```
  );
}
```

### `addNotificationsDroppedListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `() => void` |
A callback function.

 |

Listeners registered by this method will be called whenever some notifications have been dropped by the server. Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback. More information can be found in [Firebase docs.

Returns:

`EventSubscription`

A `Subscription` object represents the subscription of the provided listener.

### `getLastNotificationResponseAsync()`

Returns:

`[Promise<[NotificationResponse](#notificationresponse) | null>`

### `removeNotificationSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `EventSubscription` |
A subscription returned by `addNotificationListener` method.

 |

Removes a notification subscription returned by an `addNotificationListener` call.

Returns:

`void`

### `useLastNotificationResponse()`

A React hook always returns the notification response that was received most recently (a notification response designates an interaction with a notification, such as tapping on it).

> If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.

Returns:

`undefined | null | [NotificationResponse](#notificationresponse)`

The hook may return one of these three types/values:

*   `undefined` - until we're sure of what to return,
*   `null` - if no notification response has been received yet,
*   a `NotificationResponse` object - if a notification response was received.

Example

Responding to a notification tap by opening a URL that could be put into the notification's `data` (opening the URL is your responsibility and is not a part of the `expo-notifications` API):

```
import * as Notifications from 'expo-notifications';
import { Linking } from 'react-native';

export default function App() {
  const lastNotificationResponse = Notifications.useLastNotificationResponse();
  React.useEffect(() => {
```
if (
  lastNotificationResponse &&
  lastNotificationResponse.notification.request.content.data.url &&
  lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER
) {
  Linking.openURL(lastNotificationResponse.notification.request.content.data.url);
}
```
  }, [lastNotificationResponse]);
  return (
```
// Your app content
```
  );
}
```

## Handle incoming notifications when the app is in the foreground

### `setNotificationHandler(handler)`

| Parameter | Type | Description |
| --- | --- | --- |
| handler | `null | [NotificationHandler](#notificationhandler)` |
A single parameter which should be either `null` (if you want to clear the handler) or a `NotificationHandler` object.

 |

When a notification is received while the app is running, using this function you can set a callback that will decide whether the notification should be shown to the user or not.

When a notification is received, `handleNotification` is called with the incoming notification as an argument. The function should respond with a behavior object within 3 seconds, otherwise, the notification will be discarded. If the notification is handled successfully, `handleSuccess` is called with the identifier of the notification, otherwise (or on timeout) `handleError` will be called.

The default behavior when the handler is not set or does not respond in time is not to show the notification.

Returns:

`void`

Example

```
import * as Notifications from 'expo-notifications';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
```
shouldShowAlert: true,
shouldPlaySound: false,
shouldSetBadge: false,
```
  }),
});
```

## Handle incoming notifications when the app is not in the foreground

### `registerTaskAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
The string you passed to `TaskManager.defineTask` as the `taskName` parameter.

 |

When a notification is received while the app is backgrounded, using this function you can set a callback that will be run in response to that notification. Under the hood, this function is run using `expo-task-manager`. You must define the task first, with [`TaskManager.defineTask`. Make sure you define it in the global scope.

The callback function you define with `TaskManager.defineTask` will receive an object with the following fields:

*   `data`: The remote payload delivered by either FCM (Android) or APNs (iOS). See `PushNotificationTrigger` for details.
*   `error`: The error (if any) that occurred during execution of the task.
*   `executionInfo`: JSON object of additional info related to the task, including the `taskName`.

Returns:

`[Promise<null>`

Example

```
import * as TaskManager from 'expo-task-manager';
import * as Notifications from 'expo-notifications';

const BACKGROUND_NOTIFICATION_TASK = 'BACKGROUND-NOTIFICATION-TASK';

TaskManager.defineTask(BACKGROUND_NOTIFICATION_TASK, ({ data, error, executionInfo }) => {
  console.log('Received a notification in the background!');
  // Do something with the notification data
});

Notifications.registerTaskAsync(BACKGROUND_NOTIFICATION_TASK);
```

### `unregisterTaskAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
The string you passed to `registerTaskAsync` as the `taskName` parameter.

 |

Used to unregister tasks registered with `registerTaskAsync` method.

Returns:

`[Promise<null>`

## Fetch information about notifications-related permissions

### `getPermissionsAsync()`

Calling this function checks current permissions settings related to notifications. It lets you verify whether the app is currently allowed to display alerts, play sounds, etc. There is no user-facing effect of calling this.

Returns:

`[Promise<[NotificationPermissionsStatus](#notificationpermissionsstatus)>`

It returns a `Promise` resolving to an object represents permission settings (`NotificationPermissionsStatus`). On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).

Example

```
import * as Notifications from 'expo-notifications';

export async function allowsNotificationsAsync() {
  const settings = await Notifications.getPermissionsAsync();
  return (
```
settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL
```
  );
}
```

### `requestPermissionsAsync(permissions)`

| Parameter | Type | Description |
| --- | --- | --- |
| permissions(optional) | `[NotificationPermissionsRequest](#notificationpermissionsrequest)` |
An object representing configuration for the request scope.

 |

Prompts the user for notification permissions according to request. Request defaults to asking the user to allow displaying alerts, setting badge count and playing sounds.

Returns:

`[Promise<[NotificationPermissionsStatus](#notificationpermissionsstatus)>`

It returns a Promise resolving to an object represents permission settings (`NotificationPermissionsStatus`). On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).

Example

```
import * as Notifications from 'expo-notifications';

export function requestPermissionsAsync() {
  return await Notifications.requestPermissionsAsync({
```
ios: {
  allowAlert: true,
  allowBadge: true,
  allowSound: true,
  allowAnnouncements: true,
},
```
  });
}
```

## Manage application badge icon

### `getBadgeCountAsync()`

Fetches the number currently set as the badge of the app icon on device's home screen. A `0` value means that the badge is not displayed.

> Note: Not all Android launchers support application badges. If the launcher does not support icon badges, the method will always resolve to `0`.

Returns:

`[Promise<number>`

Returns a Promise resolving to a number that represents the current badge of the app icon.

### `setBadgeCountAsync(badgeCount, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| badgeCount | `number` |
The count which should appear on the badge. A value of `0` will clear the badge.

 |
| options(optional) | `[SetBadgeCountOptions](#setbadgecountoptions)` |

An object of options configuring behavior applied.

 |

Sets the badge of the app's icon to the specified number. Setting it to `0` clears the badge. On iOS, this method requires that you have requested the user's permission for `allowBadge` via `requestPermissionsAsync`, otherwise it will automatically return `false`.

> Note: Not all Android launchers support application badges. If the launcher does not support icon badges, the method will resolve to `false`.

Returns:

`[Promise<boolean>`

It returns a Promise resolving to a boolean representing whether the setting of the badge succeeded.

## Schedule notifications

### `cancelAllScheduledNotificationsAsync()`

Cancels all scheduled notifications.

Returns:

`[Promise<void>`

A Promise that resolves once all the scheduled notifications are successfully canceled, or if there are no scheduled notifications.

### `cancelScheduledNotificationAsync(identifier)`

| Parameter | Type | Description |
| --- | --- | --- |
| identifier | `string` |
The notification identifier with which `scheduleNotificationAsync` method resolved when the notification has been scheduled.

 |

Cancels a single scheduled notification. The scheduled notification of given ID will not trigger.

Returns:

`[Promise<void>`

A Promise resolves once the scheduled notification is successfully canceled or if there is no scheduled notification for a given identifier.

Example

```
import * as Notifications from 'expo-notifications';

async function scheduleAndCancel() {
  const identifier = await Notifications.scheduleNotificationAsync({
```
content: {
  title: 'Hey!',
},
trigger: { seconds: 60, repeats: true },
```
  });
  await Notifications.cancelScheduledNotificationAsync(identifier);
}
```

### `getAllScheduledNotificationsAsync()`

Fetches information about all scheduled notifications.

Returns:

`[Promise<[NotificationRequest](#notificationrequest)>`

Returns a Promise resolving to an array of objects conforming to the `Notification` interface.

### `getNextTriggerDateAsync(trigger)`

| Parameter | Type | Description |
| --- | --- | --- |
| trigger | `[SchedulableNotificationTriggerInput](#schedulablenotificationtriggerinput)` |
The schedulable notification trigger you would like to check next trigger date for (of type `SchedulableNotificationTriggerInput`).

 |

Allows you to check what will be the next trigger date for given notification trigger input.

Returns:

`[Promise<number | null>`

If the return value is `null`, the notification won't be triggered. Otherwise, the return value is the Unix timestamp in milliseconds at which the notification will be triggered.

Example

```
import * as Notifications from 'expo-notifications';

async function logNextTriggerDate() {
  try {
```
const nextTriggerDate = await Notifications.getNextTriggerDateAsync({
  hour: 9,
  minute: 0,
});
console.log(nextTriggerDate === null ? 'No next trigger date' : new Date(nextTriggerDate));
```
  } catch (e) {
```
console.warn(`Couldn't have calculated next trigger date: ${e}`);
```
  }
}
```

> Deprecated This method has been deprecated in favor of using an explicit `NotificationHandler` and the `scheduleNotificationAsync` method. More information can be found in our [FYI document.

### `presentNotificationAsync(content, identifier)`

| Parameter | Type | Description |
| --- | --- | --- |
| content | `[NotificationContentInput](#notificationcontentinput)` |
An object representing the notification content.

 |
| identifier(optional) | `string` |

\-

 |

Schedules a notification for immediate trigger.

Returns:

`[Promise<string>`

It returns a Promise resolving with the notification's identifier once the notification is successfully scheduled for immediate display.

### `scheduleNotificationAsync(request)`

| Parameter | Type | Description |
| --- | --- | --- |
| request | `[NotificationRequestInput](#notificationrequestinput)` |
An object describing the notification to be triggered.

 |

Schedules a notification to be triggered in the future.

> Note: Please note that this does not mean that the notification will be presented when it is triggered. For the notification to be presented you have to set a notification handler with `setNotificationHandler` that will return an appropriate notification behavior. For more information see the example below.

Returns:

`[Promise<string>`

Returns a Promise resolving to a string which is a notification identifier you can later use to cancel the notification or to identify an incoming notification.

Example

#### Schedule the notification that will trigger once, in one minute from now

```
import * as Notifications from 'expo-notifications';

Notifications.scheduleNotificationAsync({
  content: {
```
title: "Time's up!",
body: 'Change sides!',
```
  },
  trigger: {
```
seconds: 60,
```
  },
});
```

#### Schedule the notification that will trigger repeatedly, every 20 minutes

```
import * as Notifications from 'expo-notifications';

Notifications.scheduleNotificationAsync({
  content: {
```
title: 'Remember to drink water!',
```
  },
  trigger: {
```
seconds: 60 * 20,
repeats: true,
```
  },
});
```

#### Schedule the notification that will trigger once, at the beginning of next hour

```
import * as Notifications from 'expo-notifications';

const trigger = new Date(Date.now() + 60 * 60 * 1000);
trigger.setMinutes(0);
trigger.setSeconds(0);

Notifications.scheduleNotificationAsync({
  content: {
```
title: 'Happy new hour!',
```
  },
  trigger,
});
```

## Dismiss notifications

### `dismissAllNotificationsAsync()`

Removes all application's notifications displayed in the notification tray (Notification Center).

Returns:

`[Promise<void>`

A Promise which resolves once the request to dismiss the notifications is successfully dispatched to the notifications manager.

### `dismissNotificationAsync(notificationIdentifier)`

| Parameter | Type | Description |
| --- | --- | --- |
| notificationIdentifier | `string` |
The notification identifier, obtained either via `setNotificationHandler` method or in the listener added with `addNotificationReceivedListener`.

 |

Removes notification displayed in the notification tray (Notification Center).

Returns:

`[Promise<void>`

A Promise which resolves once the request to dismiss the notification is successfully dispatched to the notifications manager.

### `getPresentedNotificationsAsync()`

Fetches information about all notifications present in the notification tray (Notification Center).

> This method is not supported on Android below 6.0 (API level 23) – on these devices it will resolve to an empty array.

Returns:

`[Promise<[Notification](#notification)>`

A Promise which resolves with a list of notifications (`Notification`) currently present in the notification tray (Notification Center).

## Manage notification channels (Android-specific)

### `deleteNotificationChannelAsync(channelId)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| channelId | `string` |
The channel identifier.

 |

Removes the notification channel.

Returns:

`[Promise<void>`

A Promise which resolving once the channel is removed (or if there was no channel for given identifier).

### `deleteNotificationChannelGroupAsync(groupId)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| groupId | `string` |
The channel group identifier.

 |

Removes the notification channel group and all notification channels that belong to it.

Returns:

`[Promise<void>`

A Promise which resolves once the channel group is removed (or if there was no channel group for given identifier).

### `getNotificationChannelAsync(channelId)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| channelId | `string` |
The channel's identifier.

 |

Fetches information about a single notification channel.

Returns:

`[Promise<[NotificationChannel](#notificationchannel) | null>`

A Promise which resolves to the channel object (of type `NotificationChannel`) or to `null` if there was no channel found for this identifier. On platforms that do not support notification channels, it will always resolve to `null`.

### `getNotificationChannelGroupAsync(groupId)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| groupId | `string` |
The channel group's identifier.

 |

Fetches information about a single notification channel group.

Returns:

`[Promise<[NotificationChannelGroup](#notificationchannelgroup) | null>`

A Promise which resolves to the channel group object (of type `NotificationChannelGroup`) or to `null` if there was no channel group found for this identifier. On platforms that do not support notification channels, it will always resolve to `null`.

### `getNotificationChannelGroupsAsync()`

Only for: Android

Fetches information about all known notification channel groups.

Returns:

`[Promise<[NotificationChannelGroup](#notificationchannelgroup)>`

A Promise which resoles to an array of channel groups. On platforms that do not support notification channel groups, it will always resolve to an empty array.

### `getNotificationChannelsAsync()`

Only for: Android

Fetches information about all known notification channels.

Returns:

`[Promise<[NotificationChannel](#notificationchannel)>`

A Promise which resolves to an array of channels. On platforms that do not support notification channels, it will always resolve to an empty array.

### `setNotificationChannelAsync(channelId, channel)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| channelId | `string` |
The channel identifier.

 |
| channel | `[NotificationChannelInput](#notificationchannelinput)` |

Object representing the channel's configuration.

 |

Assigns the channel configuration to a channel of a specified name (creating it if need be). This method lets you assign given notification channel to a notification channel group.

> Note: For some settings to be applied on all Android versions, it may be necessary to duplicate the configuration across both a single notification and its respective notification channel.

For example, for a notification to play a custom sound on Android versions below 8.0, the custom notification sound has to be set on the notification (through the `NotificationContentInput`), and for the custom sound to play on Android versions above 8.0, the relevant notification channel must have the custom sound configured (through the `NotificationChannelInput`). For more information, see [Set custom notification sounds on Android](#set-custom-notification-sounds).

Returns:

`[Promise<[NotificationChannel](#notificationchannel) | null>`

A Promise which resolving to the object (of type `NotificationChannel`) describing the modified channel or to `null` if the platform does not support notification channels.

### `setNotificationChannelGroupAsync(groupId, group)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| groupId | `string` |
The channel group's identifier.

 |
| group | `[NotificationChannelGroupInput](#notificationchannelgroupinput)` |

Object representing the channel group configuration.

 |

Assigns the channel group configuration to a channel group of a specified name (creating it if need be).

Returns:

`[Promise<[NotificationChannelGroup](#notificationchannelgroup) | null>`

A `Promise` resolving to the object (of type `NotificationChannelGroup`) describing the modified channel group or to `null` if the platform does not support notification channels.

## Manage notification categories (interactive notifications)

### `deleteNotificationCategoryAsync(identifier)`

Only for: Android, iOS

| Parameter | Type | Description |
| --- | --- | --- |
| identifier | `string` |
Identifier initially provided to `setNotificationCategoryAsync` when creating the category.

 |

Deletes the category associated with the provided identifier.

Returns:

`[Promise<boolean>`

A Promise which resolves to `true` if the category was successfully deleted, or `false` if it was not. An example of when this method would return `false` is if you try to delete a category that doesn't exist.

### `getNotificationCategoriesAsync()`

Only for: Android, iOS

Fetches information about all known notification categories.

Returns:

`[Promise<[NotificationCategory](#notificationcategory)>`

A Promise which resolves to an array of `NotificationCategory`s. On platforms that do not support notification channels, it will always resolve to an empty array.

### `setNotificationCategoryAsync(identifier, actions, options)`

Only for: Android, iOS

| Parameter | Type | Description |
| --- | --- | --- |
| identifier | `string` |
A string to associate as the ID of this category. You will pass this string in as the `categoryIdentifier` in your `NotificationContent` to associate a notification with this category.

> Don't use the characters `:` or `-` in your category identifier. If you do, categories might not work as expected.

 |
| actions | `[NotificationAction](#notificationaction)` |

An array of `NotificationAction`, which describe the actions associated with this category.

 |
| options(optional) | `[NotificationCategoryOptions](#notificationcategoryoptions)` |

An optional object of additional configuration options for your category.

 |

Sets the new notification category.

Returns:

`[Promise<[NotificationCategory](#notificationcategory)>`

A Promise which resolves to the category you just have created.

## Constants

### `Notifications.DEFAULT_ACTION_IDENTIFIER`

Type: `'expo.modules.notifications.actions.DEFAULT'`

## Methods

### `Notifications.setAutoServerRegistrationEnabledAsync(enabled)`

| Parameter | Type |
| --- | --- |
| enabled | `boolean` |

Sets the registration information so that the device push token gets pushed to the given registration endpoint

Returns:

`[Promise<void>`

### `Notifications.unregisterForNotificationsAsync()`

Returns:

`[Promise<void>`

## Interfaces

### `AudioAttributes`

| Property | Type | Description |
| --- | --- | --- |
| contentType | `[AndroidAudioContentType](#androidaudiocontenttype)` |
\-

 |
| flags | `{ enforceAudibility: boolean, requestHardwareAudioVideoSynchronization: boolean }` |

\-

 |
| usage | `[AndroidAudioUsage](#androidaudiousage)` |

\-

 |

### `BeaconRegion`

Only for: iOS

Extends: `[Region](#region)`

A region used to detect the presence of iBeacon devices. Based on Core Location [`CLBeaconRegion` class.

| Property | Type | Description |
| --- | --- | --- |
| beaconIdentityConstraint(optional) | `{ major: null | number, minor: null | number, uuid: string }` |
The beacon identity constraint that defines the beacon region.

 |
| major | `null | number` |

The major value from the beacon identity constraint that defines the beacon region.

 |
| minor | `null | number` |

The minor value from the beacon identity constraint that defines the beacon region.

 |
| notifyEntryStateOnDisplay | `boolean` |

A Boolean value that indicates whether Core Location sends beacon notifications when the device’s display is on.

 |
| type | `'beacon'` |

\-

 |
| uuid(optional) | `string` |

The UUID value from the beacon identity constraint that defines the beacon region.

 |

### `CalendarNotificationTrigger`

Only for: iOS

A trigger related to a [`UNCalendarNotificationTrigger`.

| Property | Type | Description |
| --- | --- | --- |
| dateComponents | `{ calendar: string, day: number, era: number, hour: number, isLeapMonth: boolean, minute: number, month: number, nanosecond: number, quarter: number, second: number, timeZone: string, weekOfMonth: number, weekOfYear: number, weekday: number, weekdayOrdinal: number, year: number, yearForWeekOfYear: number }` |
\-

 |
| repeats | `boolean` |

\-

 |
| type | `'calendar'` |

\-

 |

### `CircularRegion`

Only for: iOS

Extends: `[Region](#region)`

A circular geographic region, specified as a center point and radius. Based on Core Location [`CLCircularRegion` class.

| Property | Type | Description |
| --- | --- | --- |
| center | `{ latitude: number, longitude: number }` |
The center point of the geographic area.

 |
| radius | `number` |

The radius (measured in meters) that defines the geographic area’s outer boundary.

 |
| type | `'circular'` |

\-

 |

### `DailyNotificationTrigger`

Only for: Android

A trigger related to a daily notification.

> The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.

| Property | Type | Description |
| --- | --- | --- |
| hour | `number` |
\-

 |
| minute | `number` |

\-

 |
| type | `'daily'` |

\-

 |

### `DailyTriggerInput`

A trigger that will cause the notification to be delivered once per day.

| Property | Type | Description |
| --- | --- | --- |
| channelId(optional) | `string` |
\-

 |
| hour | `number` |

\-

 |
| minute | `number` |

\-

 |
| repeats | `true` |

\-

 |

### `ExpoPushToken`

Borrowing structure from `DevicePushToken` a little. You can use the `data` value to send notifications via Expo Notifications service.

| Property | Type | Description |
| --- | --- | --- |
| data | `string` |
The acquired push token.

 |
| type | `'expo'` |

Always set to `"expo"`.

 |

### `ExpoPushTokenOptions`

| Property | Type | Description |
| --- | --- | --- |
| applicationId(optional) | `string` |
The ID of the application to which the token should be attributed. Defaults to [`Application.applicationId` exposed by `expo-application`.

 |
| baseUrl(optional) | `string` |

Endpoint URL override.

 |
| development(optional) | `boolean` |

Only for: iOS

Makes sense only on iOS, where there are two push notification services: "sandbox" and "production". This defines whether the push token is supposed to be used with the sandbox platform notification service. Defaults to [`Application.getIosPushNotificationServiceEnvironmentAsync()` exposed by `expo-application` or `false`. Most probably you won't need to customize that. You may want to customize that if you don't want to install `expo-application` and still use the sandbox APNs.

 |
| deviceId(optional) | `string` |

\-

 |
| devicePushToken(optional) | `[DevicePushToken](#devicepushtoken)` |

The device push token with which to register at the backend. Defaults to a token fetched with `getDevicePushTokenAsync()`.

 |
| projectId(optional) | `string` |

The ID of the project to which the token should be attributed. Defaults to [`Constants.expoConfig.extra.eas.projectId` exposed by `expo-constants`.

When using EAS Build, this value is automatically set. However, it is recommended to set it manually. Once you have EAS Build configured, you can find the value in app.json under `extra.eas.projectId`. You can copy and paste it into your code. If you are not using EAS Build, it will fallback to [`Constants.expoConfig?.extra?.eas?.projectId`.

 |
| type(optional) | `string` |

Request body override.

 |
| url(optional) | `string` |

Request URL override.

 |

### `FirebaseRemoteMessage`

A Firebase `RemoteMessage` that caused the notification to be delivered to the app.

| Property | Type | Description |
| --- | --- | --- |
| collapseKey | `null | string` |
\-

 |
| data | `Record<string, string>` |

\-

 |
| from | `null | string` |

\-

 |
| messageId | `null | string` |

\-

 |
| messageType | `null | string` |

\-

 |
| notification | `null | [FirebaseRemoteMessageNotification](#firebaseremotemessagenotification)` |

\-

 |
| originalPriority | `number` |

\-

 |
| priority | `number` |

\-

 |
| sentTime | `number` |

\-

 |
| to | `null | string` |

\-

 |
| ttl | `number` |

\-

 |

### `FirebaseRemoteMessageNotification`

| Property | Type | Description |
| --- | --- | --- |
| body | `null | string` |
\-

 |
| bodyLocalizationArgs | `null | string` |

\-

 |
| bodyLocalizationKey | `null | string` |

\-

 |
| channelId | `null | string` |

\-

 |
| clickAction | `null | string` |

\-

 |
| color | `null | string` |

\-

 |
| eventTime | `null | number` |

\-

 |
| icon | `null | string` |

\-

 |
| imageUrl | `null | string` |

\-

 |
| lightSettings | `null | number` |

\-

 |
| link | `null | string` |

\-

 |
| localOnly | `boolean` |

\-

 |
| notificationCount | `null | number` |

\-

 |
| notificationPriority | `null | number` |

\-

 |
| sound | `null | string` |

\-

 |
| sticky | `boolean` |

\-

 |
| tag | `null | string` |

\-

 |
| ticker | `null | string` |

\-

 |
| title | `null | string` |

\-

 |
| titleLocalizationArgs | `null | string` |

\-

 |
| titleLocalizationKey | `null | string` |

\-

 |
| usesDefaultLightSettings | `boolean` |

\-

 |
| usesDefaultSound | `boolean` |

\-

 |
| usesDefaultVibrateSettings | `boolean` |

\-

 |
| vibrateTimings | `null | number` |

\-

 |
| visibility | `null | number` |

\-

 |

### `IosNotificationPermissionsRequest`

Available configuration for permission request on iOS platform. See Apple documentation for [`UNAuthorizationOptions` to learn more.

| Property | Type | Description |
| --- | --- | --- |
| allowAlert(optional) | `boolean` |
The ability to display alerts.

 |
| allowAnnouncements(optional) | `boolean` |

> Deprecated

The ability for Siri to automatically read out messages over AirPods.

 |
| allowBadge(optional) | `boolean` |

The ability to update the app’s badge.

 |
| allowCriticalAlerts(optional) | `boolean` |

The ability to play sounds for critical alerts.

 |
| allowDisplayInCarPlay(optional) | `boolean` |

The ability to display notifications in a CarPlay environment.

 |
| allowProvisional(optional) | `boolean` |

The ability to post noninterrupting notifications provisionally to the Notification Center.

 |
| allowSound(optional) | `boolean` |

The ability to play sounds.

 |
| provideAppNotificationSettings(optional) | `boolean` |

An option indicating the system should display a button for in-app notification settings.

 |

### `LocationNotificationTrigger`

Only for: iOS

A trigger related to a [`UNLocationNotificationTrigger`.

| Property | Type | Description |
| --- | --- | --- |
| region | `[CircularRegion](#circularregion) | [BeaconRegion](#beaconregion)` |
\-

 |
| repeats | `boolean` |

\-

 |
| type | `'location'` |

\-

 |

### `NativeDevicePushToken`

| Property | Type | Description |
| --- | --- | --- |
| data | `string` |
\-

 |
| type | `'ios' | 'android'` |

\-

 |

### `Notification`

An object represents a single notification that has been triggered by some request (`NotificationRequest`) at some point in time.

| Property | Type | Description |
| --- | --- | --- |
| date | `number` |
\-

 |
| request | `[NotificationRequest](#notificationrequest)` |

\-

 |

### `NotificationAction`

| Property | Type | Description |
| --- | --- | --- |
| buttonTitle | `string` |
The title of the button triggering this action.

 |
| identifier | `string` |

A unique string that identifies this action. If a user takes this action (for example, selects this button in the system's Notification UI), your app will receive this `actionIdentifier` via the `NotificationResponseReceivedListener`.

 |
| options(optional) | `{ isAuthenticationRequired: boolean, isDestructive: boolean, opensAppToForeground: boolean }` |

Object representing the additional configuration options.

 |
| textInput(optional) | `{ placeholder: string, submitButtonTitle: string }` |

Object which, if provided, will result in a button that prompts the user for a text response.

 |

### `NotificationBehavior`

An object represents behavior that should be applied to the incoming notification.

> On Android, setting `shouldPlaySound: false` will result in the drop-down notification alert not showing, no matter what the priority is. This setting will also override any channel-specific sounds you may have configured.

| Property | Type | Description |
| --- | --- | --- |
| priority(optional) | `[AndroidNotificationPriority](#androidnotificationpriority)` |
\-

 |
| shouldPlaySound | `boolean` |

\-

 |
| shouldSetBadge | `boolean` |

\-

 |
| shouldShowAlert | `boolean` |

\-

 |

### `NotificationCategory`

| Property | Type | Description |
| --- | --- | --- |
| actions | `[NotificationAction](#notificationaction)` |
\-

 |
| identifier | `string` |

\-

 |
| options(optional) | `[NotificationCategoryOptions](#notificationcategoryoptions)` |

\-

 |

### `NotificationChannel`

Only for: Android

An object represents a notification channel.

| Property | Type | Description |
| --- | --- | --- |
| audioAttributes | `[AudioAttributes](#audioattributes)` |
\-

 |
| bypassDnd | `boolean` |

\-

 |
| description | `null | string` |

\-

 |
| enableLights | `boolean` |

\-

 |
| enableVibrate | `boolean` |

\-

 |
| groupId(optional) | `null | string` |

\-

 |
| id | `string` |

\-

 |
| importance | `[AndroidImportance](#androidimportance)` |

\-

 |
| lightColor | `string` |

\-

 |
| lockscreenVisibility | `[AndroidNotificationVisibility](#androidnotificationvisibility)` |

\-

 |
| name | `null | string` |

\-

 |
| showBadge | `boolean` |

\-

 |
| sound | `null | 'default' | 'custom'` |

\-

 |
| vibrationPattern | `null | number` |

\-

 |

### `NotificationChannelGroup`

Only for: Android

An object represents a notification channel group.

| Property | Type | Description |
| --- | --- | --- |
| channels | `[NotificationChannel](#notificationchannel)` |
\-

 |
| description(optional) | `null | string` |

\-

 |
| id | `string` |

\-

 |
| isBlocked(optional) | `boolean` |

\-

 |
| name | `null | string` |

\-

 |

### `NotificationChannelGroupInput`

Only for: Android

An object represents a notification channel group to be set.

| Property | Type | Description |
| --- | --- | --- |
| description(optional) | `null | string` |
\-

 |
| name | `null | string` |

\-

 |

### `NotificationChannelGroupManager`

Extends: `ProxyNativeModule`

| Property | Type | Description |
| --- | --- | --- |
| deleteNotificationChannelGroupAsync(optional) | `(groupId: string) => [Promise<void>` |
\-

 |
| getNotificationChannelGroupAsync(optional) | `(groupId: string) => [Promise<null | [NotificationChannelGroup](#notificationchannelgroup)>` |

\-

 |
| getNotificationChannelGroupsAsync(optional) | `() => [Promise<[NotificationChannelGroup](#notificationchannelgroup)>` |

\-

 |
| setNotificationChannelGroupAsync(optional) | `(groupId: string, group: [NotificationChannelGroupInput](#notificationchannelgroupinput)) => [Promise<null | [NotificationChannelGroup](#notificationchannelgroup)>` |

\-

 |

### `NotificationChannelManager`

Extends: `ProxyNativeModule`

| Property | Type | Description |
| --- | --- | --- |
| deleteNotificationChannelAsync(optional) | `(channelId: string) => [Promise<void>` |
\-

 |
| getNotificationChannelAsync(optional) | `(channelId: string) => [Promise<null | [NotificationChannel](#notificationchannel)>` |

\-

 |
| getNotificationChannelsAsync(optional) | `() => [Promise<null | [NotificationChannel](#notificationchannel)>` |

\-

 |
| setNotificationChannelAsync(optional) | `(channelId: string, channelConfiguration: [NotificationChannelInput](#notificationchannelinput)) => [Promise<null | [NotificationChannel](#notificationchannel)>` |

\-

 |

### `NotificationHandler`

| Property | Type | Description |
| --- | --- | --- |
| handleError(optional) | `(notificationId: string, error: [NotificationHandlingError](#notificationhandlingerror)) => void` |
A function called whenever handling of an incoming notification fails.

 |
| handleNotification | `(notification: [Notification](#notification)) => [Promise<[NotificationBehavior](#notificationbehavior)>` |

A function accepting an incoming notification returning a `Promise` resolving to a behavior (`NotificationBehavior`) applicable to the notification

 |
| handleSuccess(optional) | `(notificationId: string) => void` |

A function called whenever an incoming notification is handled successfully.

 |

### `NotificationPermissionsRequest`

An interface representing the permissions request scope configuration. Each option corresponds to a different native platform authorization option.

| Property | Type | Description |
| --- | --- | --- |
| android(optional) | `object` |
On Android, all available permissions are granted by default, and if a user declines any permission, an app cannot prompt the user to change.

 |
| ios(optional) | `[IosNotificationPermissionsRequest](#iosnotificationpermissionsrequest)` |

Available configuration for permission request on iOS platform.

 |

### `NotificationPermissionsStatus`

Extends: `[PermissionResponse](#permissionresponse)`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| android(optional) | `{ importance: number, interruptionFilter: number }` |
\-

 |
| ios(optional) | `{ alertStyle: [IosAlertStyle](#iosalertstyle), allowsAlert: null | boolean, allowsAnnouncements: null | boolean, allowsBadge: null | boolean, allowsCriticalAlerts: null | boolean, allowsDisplayInCarPlay: null | boolean, allowsDisplayInNotificationCenter: null | boolean, allowsDisplayOnLockScreen: null | boolean, allowsPreviews: [IosAllowsPreviews](#iosallowspreviews), allowsSound: null | boolean, providesAppNotificationSettings: boolean, status: [IosAuthorizationStatus](#iosauthorizationstatus) }` |

\-

 |

### `NotificationRequest`

An object represents a request to present a notification. It has content — how it's being represented, and a trigger — what triggers the notification. Many notifications (`Notification`) may be triggered with the same request (for example, a repeating notification).

| Property | Type | Description |
| --- | --- | --- |
| content | `[NotificationContent](#notificationcontent)` |
\-

 |
| identifier | `string` |

\-

 |
| trigger | `[NotificationTrigger](#notificationtrigger)` |

\-

 |

### `NotificationRequestInput`

An object represents a notification request you can pass into `scheduleNotificationAsync`.

| Property | Type | Description |
| --- | --- | --- |
| content | `[NotificationContentInput](#notificationcontentinput)` |
\-

 |
| identifier(optional) | `string` |

\-

 |
| trigger | `[NotificationTriggerInput](#notificationtriggerinput)` |

\-

 |

### `NotificationResponse`

An object represents user's interaction with the notification.

> Note: If the user taps on a notification `actionIdentifier` will be equal to `Notifications.DEFAULT_ACTION_IDENTIFIER`.

| Property | Type | Description |
| --- | --- | --- |
| actionIdentifier | `string` |
\-

 |
| notification | `[Notification](#notification)` |

\-

 |
| userText(optional) | `string` |

\-

 |

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

### `Region`

Only for: iOS

The region used to determine when the system sends the notification.

| Property | Type | Description |
| --- | --- | --- |
| identifier | `string` |
The identifier for the region object.

 |
| notifyOnEntry | `boolean` |

A Boolean indicating that notifications are generated upon entry into the region.

 |
| notifyOnExit | `boolean` |

A Boolean indicating that notifications are generated upon exit from the region.

 |
| type | `string` |

\-

 |

### `TimeIntervalNotificationTrigger`

A trigger related to an elapsed time interval. May be repeating (see `repeats` field).

| Property | Type | Description |
| --- | --- | --- |
| repeats | `boolean` |
\-

 |
| seconds | `number` |

\-

 |
| type | `'timeInterval'` |

\-

 |

### `TimeIntervalTriggerInput`

A trigger that will cause the notification to be delivered once or many times (depends on the `repeats` field) after `seconds` time elapse.

> On iOS, when `repeats` is `true`, the time interval must be 60 seconds or greater. Otherwise, the notification won't be triggered.

| Property | Type | Description |
| --- | --- | --- |
| channelId(optional) | `string` |
\-

 |
| repeats(optional) | `boolean` |

\-

 |
| seconds | `number` |

\-

 |

### `UnknownNotificationTrigger`

Represents a notification trigger that is unknown to `expo-notifications` and that it didn't know how to serialize for JS.

| Property | Type | Description |
| --- | --- | --- |
| type | `'unknown'` |
\-

 |

### `WeeklyNotificationTrigger`

Only for: Android

A trigger related to a weekly notification.

> The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.

| Property | Type | Description |
| --- | --- | --- |
| hour | `number` |
\-

 |
| minute | `number` |

\-

 |
| type | `'weekly'` |

\-

 |
| weekday | `number` |

\-

 |

### `WeeklyTriggerInput`

A trigger that will cause the notification to be delivered once every week.

> Note: Weekdays are specified with a number from `1` through `7`, with `1` indicating Sunday.

| Property | Type | Description |
| --- | --- | --- |
| channelId(optional) | `string` |
\-

 |
| hour | `number` |

\-

 |
| minute | `number` |

\-

 |
| repeats | `true` |

\-

 |
| weekday | `number` |

\-

 |

### `YearlyNotificationTrigger`

Only for: Android

A trigger related to a yearly notification.

> The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.

| Property | Type | Description |
| --- | --- | --- |
| day | `number` |
\-

 |
| hour | `number` |

\-

 |
| minute | `number` |

\-

 |
| month | `number` |

\-

 |
| type | `'yearly'` |

\-

 |

### `YearlyTriggerInput`

A trigger that will cause the notification to be delivered once every year.

> Note: all properties are specified in JavaScript Date's ranges.

| Property | Type | Description |
| --- | --- | --- |
| channelId(optional) | `string` |
\-

 |
| day | `number` |

\-

 |
| hour | `number` |

\-

 |
| minute | `number` |

\-

 |
| month | `number` |

\-

 |
| repeats | `true` |

\-

 |

## Types

### `AudioAttributesInput`

Type: `[Partial<[AudioAttributes](#audioattributes)>`

### `CalendarTriggerInput`

Only for: iOS

A trigger that will cause the notification to be delivered once or many times when the date components match the specified values. Corresponds to native [`UNCalendarNotificationTrigger`.

Type: `[CalendarTriggerInputValue](#calendartriggerinputvalue)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| channelId(optional) | `string` |
\-

 |
| repeats(optional) | `boolean` |

\-

 |

### `CalendarTriggerInputValue`

| Property | Type | Description |
| --- | --- | --- |
| day(optional) | `number` |
\-

 |
| hour(optional) | `number` |

\-

 |
| minute(optional) | `number` |

\-

 |
| month(optional) | `number` |

\-

 |
| second(optional) | `number` |

\-

 |
| timezone(optional) | `string` |

\-

 |
| weekOfMonth(optional) | `number` |

\-

 |
| weekOfYear(optional) | `number` |

\-

 |
| weekday(optional) | `number` |

\-

 |
| weekdayOrdinal(optional) | `number` |

\-

 |
| year(optional) | `number` |

\-

 |

### `ChannelAwareTriggerInput`

A trigger that will cause the notification to be delivered immediately.

| Property | Type | Description |
| --- | --- | --- |
| channelId | `string` |
\-

 |

### `DateTriggerInput`

A trigger that will cause the notification to be delivered once at the specified `Date`. If you pass in a `number` it will be interpreted as a Unix timestamp.

Type: `[Date` or `number` or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| channelId(optional) | `string` |
\-

 |
| date | `[Date | number` |

\-

 |

### `DevicePushToken`

Literal Type: `union`

In simple terms, an object of `type: Platform.OS` and `data: any`. The `data` type depends on the environment - on a native device it will be a string, which you can then use to send notifications via Firebase Cloud Messaging (Android) or APNs (iOS).

Acceptable values are: `[ExplicitlySupportedDevicePushToken](#explicitlysupporteddevicepushtoken)` | `[ImplicitlySupportedDevicePushToken](#implicitlysupporteddevicepushtoken)`

### `ExplicitlySupportedDevicePushToken`

Type: `[NativeDevicePushToken](#nativedevicepushtoken)`

### `ImplicitlySupportedDevicePushToken`

| Property | Type | Description |
| --- | --- | --- |
| data | `any` |
The push token as a string for a native platform.

 |
| type | `[Exclude<Platform.OS, ExplicitlySupportedDevicePushToken[type]>` |

Either `android` or `ios`.

 |

### `NativeNotificationPermissionsRequest`

Literal Type: `union`

Acceptable values are: `[IosNotificationPermissionsRequest](#iosnotificationpermissionsrequest)` | `object`

### `NotificationCategoryOptions`

Only for: iOS

| Property | Type | Description |
| --- | --- | --- |
| allowAnnouncement(optional) | `boolean` |
A boolean indicating whether to allow notifications to be automatically read by Siri when the user is using AirPods.

Default:`false`

 |
| allowInCarPlay(optional) | `boolean` |

A boolean indicating whether to allow CarPlay to display notifications of this type. Apps must be approved for CarPlay to make use of this feature.

Default:`false`

 |
| categorySummaryFormat(optional) | `string` |

A format string for the summary description used when the system groups the category’s notifications.

 |
| customDismissAction(optional) | `boolean` |

A boolean indicating whether to send actions for handling when the notification is dismissed (the user must explicitly dismiss the notification interface - ignoring a notification or flicking away a notification banner does not trigger this action).

Default:`false`

 |
| intentIdentifiers(optional) | `string` |

Array of [Intent Class Identifiers. When a notification is delivered, the presence of an intent identifier lets the system know that the notification is potentially related to the handling of a request made through Siri.

Default:``

 |
| previewPlaceholder(optional) | `string` |

Customizable placeholder for the notification preview text. This is shown if the user has disabled notification previews for the app. Defaults to the localized iOS system default placeholder (`Notification`).

 |
| showSubtitle(optional) | `boolean` |

A boolean indicating whether to show the notification's subtitle, even if the user has disabled notification previews for the app.

Default:`false`

 |
| showTitle(optional) | `boolean` |

A boolean indicating whether to show the notification's title, even if the user has disabled notification previews for the app.

Default:`false`

 |

### `NotificationChannelInput`

Only for: Android

Type: `[RequiredBy](#requiredby)<[Omit<[NotificationChannel](#notificationchannel), 'id' | 'audioAttributes' | 'sound'> & { audioAttributes: [AudioAttributesInput](#audioattributesinput), sound: string | null }, 'name' | 'importance'>`

An object represents a notification channel to be set.

### `NotificationContent`

An object represents notification's content.

Type: `[NotificationContentIos](#notificationcontentios) | [NotificationContentAndroid](#notificationcontentandroid)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| body | `string | null` |
Notification body - the main content of the notification.

 |
| data | `Record<string, any>` |

Data associated with the notification, not displayed

 |
| sound | `'default' | 'defaultCritical' | 'custom' | null` |

\-

 |
| subtitle | `string | null` |

On Android: `subText` - the display depends on the device.

On iOS: `subtitle` - the bold text displayed between title and the rest of the content.

 |
| title | `string | null` |

Notification title - the bold text displayed above the rest of the content.

 |

### `NotificationContentAndroid`

See [Android developer documentation for more information on specific fields.

| Property | Type | Description |
| --- | --- | --- |
| badge(optional) | `number` |
Application badge number associated with the notification.

 |
| color(optional) | `string` |

Accent color (in `#AARRGGBB` or `#RRGGBB` format) to be applied by the standard Style templates when presenting this notification.

 |
| priority(optional) | `[AndroidNotificationPriority](#androidnotificationpriority)` |

Relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The system will make a determination about how to interpret this priority when presenting the notification.

 |
| vibrationPattern(optional) | `number` |

The pattern with which to vibrate.

 |

### `NotificationContentAttachmentIos`

Only for: iOS

| Property | Type | Description |
| --- | --- | --- |
| hideThumbnail(optional) | `boolean` |
\-

 |
| identifier | `string | null` |

\-

 |
| thumbnailClipArea(optional) | `{ height: number, width: number, x: number, y: number }` |

\-

 |
| thumbnailTime(optional) | `number` |

\-

 |
| type | `string | null` |

\-

 |
| typeHint(optional) | `string` |

\-

 |
| url | `string | null` |

\-

 |

### `NotificationContentInput`

An object represents notification content that you pass in to `presentNotificationAsync` or as a part of `NotificationRequestInput`.

| Property | Type | Description |
| --- | --- | --- |
| attachments(optional) | `[NotificationContentAttachmentIos](#notificationcontentattachmentios)` |
Only for: iOS

The visual and audio attachments to display alongside the notification’s main content.

 |
| autoDismiss(optional) | `boolean` |

Only for: Android

If set to `false`, the notification will not be automatically dismissed when clicked. The setting will be used when the value is not provided or is invalid is set to `true`, and the notification will be dismissed automatically anyway. Corresponds directly to Android's `setAutoCancel` behavior.

See [Android developer documentation) for more details.

 |
| badge(optional) | `number` |

Application badge number associated with the notification.

 |
| body(optional) | `string | null` |

The main content of the notification.

 |
| categoryIdentifier(optional) | `string` |

Only for: iOS

The identifier of the notification’s category.

 |
| color(optional) | `string` |

Only for: Android

Accent color (in `#AARRGGBB` or `#RRGGBB` format) to be applied by the standard Style templates when presenting this notification.

 |
| data(optional) | `Record<string, any>` |

Data associated with the notification, not displayed.

 |
| interruptionLevel(optional) | `'passive' | 'active' | 'timeSensitive' | 'critical'` |

\-

 |
| launchImageName(optional) | `string` |

The name of the image or storyboard to use when your app launches because of the notification.

 |
| priority(optional) | `string` |

Only for: Android

Relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification. Low-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification. The system will make a determination about how to interpret this priority when presenting the notification.

 |
| sound(optional) | `boolean | string` |

\-

 |
| sticky(optional) | `boolean` |

Only for: Android

If set to `true`, the notification cannot be dismissed by swipe. This setting defaults to `false` if not provided or is invalid. Corresponds directly do Android's `isOngoing` behavior. In Firebase terms this property of a notification is called `sticky`.

See [Android developer documentation) and [Firebase documentation for more details.

 |
| subtitle(optional) | `string | null` |

On Android: `subText` - the display depends on the device.

On iOS: `subtitle` - the bold text displayed between title and the rest of the content.

 |
| title(optional) | `string | null` |

Notification title - the bold text displayed above the rest of the content.

 |
| vibrate(optional) | `number` |

Only for: Android

The pattern with which to vibrate.

 |

### `NotificationContentIos`

See [Apple documentation for more information on specific fields.

| Property | Type | Description |
| --- | --- | --- |
| attachments | `[NotificationContentAttachmentIos](#notificationcontentattachmentios)` |
The visual and audio attachments to display alongside the notification’s main content.

 |
| badge | `number | null` |

The number that your app’s icon displays.

 |
| categoryIdentifier | `string | null` |

The identifier of the notification’s category.

 |
| interruptionLevel(optional) | `'passive' | 'active' | 'timeSensitive' | 'critical'` |

\-

 |
| launchImageName | `string | null` |

The name of the image or storyboard to use when your app launches because of the notification.

 |
| summaryArgument(optional) | `string | null` |

The text the system adds to the notification summary to provide additional context.

 |
| summaryArgumentCount(optional) | `number` |

The number the system adds to the notification summary when the notification represents multiple items.

 |
| targetContentIdentifier(optional) | `string` |

The value your app uses to determine which scene to display to handle the notification.

 |
| threadIdentifier | `string | null` |

The identifier that groups related notifications.

 |

### `NotificationHandlingError`

Literal Type: `union`

Acceptable values are: `NotificationTimeoutError` | `[Error`

### `NotificationTrigger`

Literal Type: `union`

A union type containing different triggers which may cause the notification to be delivered to the application.

Acceptable values are: `[PushNotificationTrigger](#pushnotificationtrigger)` | `[CalendarNotificationTrigger](#calendarnotificationtrigger)` | `[LocationNotificationTrigger](#locationnotificationtrigger)` | `[TimeIntervalNotificationTrigger](#timeintervalnotificationtrigger)` | `[DailyNotificationTrigger](#dailynotificationtrigger)` | `[WeeklyNotificationTrigger](#weeklynotificationtrigger)` | `[YearlyNotificationTrigger](#yearlynotificationtrigger)` | `[UnknownNotificationTrigger](#unknownnotificationtrigger)`

### `NotificationTriggerInput`

Literal Type: `union`

A type represents possible triggers with which you can schedule notifications. A `null` trigger means that the notification should be scheduled for delivery immediately.

Acceptable values are: `null` | `[ChannelAwareTriggerInput](#channelawaretriggerinput)` | `[SchedulableNotificationTriggerInput](#schedulablenotificationtriggerinput)`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PushNotificationTrigger`

An object represents a notification delivered by a push notification system.

On Android under `remoteMessage` field a JS version of the Firebase `RemoteMessage` may be accessed. On iOS under `payload` you may find full contents of [`UNNotificationContent`'s [`userInfo`, for example [remote notification payload.

| Property | Type | Description |
| --- | --- | --- |
| payload(optional) | `Record<string, unknown>` |
Only for: iOS

\-

 |
| remoteMessage(optional) | `[FirebaseRemoteMessage](#firebaseremotemessage)` |

Only for: Android

\-

 |
| type | `'push'` |

\-

 |

### `PushTokenListener(token)`

A function accepting a device push token (`DevicePushToken`) as an argument.

> Note: You should not call `getDevicePushTokenAsync` inside this function, as it triggers the listener and may lead to an infinite loop.

| Parameter | Type |
| --- | --- |
| token | `[DevicePushToken](#devicepushtoken)` |

Returns:

`void`

### `RequiredBy`

Literal Type: `union`

Acceptable values are: `[Partial<[Omit<T, K>>` | `[Required<[Pick<T, K>>`

### `SchedulableNotificationTriggerInput`

Literal Type: `union`

A type represents time-based, schedulable triggers. For these triggers you can check the next trigger date with `getNextTriggerDateAsync`.

Acceptable values are: `[DateTriggerInput](#datetriggerinput)` | `[TimeIntervalTriggerInput](#timeintervaltriggerinput)` | `[DailyTriggerInput](#dailytriggerinput)` | `[WeeklyTriggerInput](#weeklytriggerinput)` | `[YearlyTriggerInput](#yearlytriggerinput)` | `[CalendarTriggerInput](#calendartriggerinput)`

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

 |

## Enums

### `AndroidAudioContentType`

#### `UNKNOWN`

`AndroidAudioContentType.UNKNOWN ＝ 0`

#### `SPEECH`

`AndroidAudioContentType.SPEECH ＝ 1`

#### `MUSIC`

`AndroidAudioContentType.MUSIC ＝ 2`

#### `MOVIE`

`AndroidAudioContentType.MOVIE ＝ 3`

#### `SONIFICATION`

`AndroidAudioContentType.SONIFICATION ＝ 4`

### `AndroidAudioUsage`

#### `UNKNOWN`

`AndroidAudioUsage.UNKNOWN ＝ 0`

#### `MEDIA`

`AndroidAudioUsage.MEDIA ＝ 1`

#### `VOICE_COMMUNICATION`

`AndroidAudioUsage.VOICE_COMMUNICATION ＝ 2`

#### `VOICE_COMMUNICATION_SIGNALLING`

`AndroidAudioUsage.VOICE_COMMUNICATION_SIGNALLING ＝ 3`

#### `ALARM`

`AndroidAudioUsage.ALARM ＝ 4`

#### `NOTIFICATION`

`AndroidAudioUsage.NOTIFICATION ＝ 5`

#### `NOTIFICATION_RINGTONE`

`AndroidAudioUsage.NOTIFICATION_RINGTONE ＝ 6`

#### `NOTIFICATION_COMMUNICATION_REQUEST`

`AndroidAudioUsage.NOTIFICATION_COMMUNICATION_REQUEST ＝ 7`

#### `NOTIFICATION_COMMUNICATION_INSTANT`

`AndroidAudioUsage.NOTIFICATION_COMMUNICATION_INSTANT ＝ 8`

#### `NOTIFICATION_COMMUNICATION_DELAYED`

`AndroidAudioUsage.NOTIFICATION_COMMUNICATION_DELAYED ＝ 9`

#### `NOTIFICATION_EVENT`

`AndroidAudioUsage.NOTIFICATION_EVENT ＝ 10`

#### `ASSISTANCE_ACCESSIBILITY`

`AndroidAudioUsage.ASSISTANCE_ACCESSIBILITY ＝ 11`

#### `ASSISTANCE_NAVIGATION_GUIDANCE`

`AndroidAudioUsage.ASSISTANCE_NAVIGATION_GUIDANCE ＝ 12`

#### `ASSISTANCE_SONIFICATION`

`AndroidAudioUsage.ASSISTANCE_SONIFICATION ＝ 13`

#### `GAME`

`AndroidAudioUsage.GAME ＝ 14`

### `AndroidImportance`

#### `UNKNOWN`

`AndroidImportance.UNKNOWN ＝ 0`

#### `UNSPECIFIED`

`AndroidImportance.UNSPECIFIED ＝ 1`

#### `NONE`

`AndroidImportance.NONE ＝ 2`

#### `MIN`

`AndroidImportance.MIN ＝ 3`

#### `LOW`

`AndroidImportance.LOW ＝ 4`

> Deprecated Use `DEFAULT` instead.

#### `DEEFAULT`

`AndroidImportance.DEEFAULT ＝ 5`

#### `DEFAULT`

`AndroidImportance.DEFAULT ＝ 5`

#### `HIGH`

`AndroidImportance.HIGH ＝ 6`

#### `MAX`

`AndroidImportance.MAX ＝ 7`

### `AndroidNotificationPriority`

An enum corresponding to values appropriate for Android's [`Notification#priority` field.

#### `DEFAULT`

`AndroidNotificationPriority.DEFAULT ＝ "default"`

#### `HIGH`

`AndroidNotificationPriority.HIGH ＝ "high"`

#### `LOW`

`AndroidNotificationPriority.LOW ＝ "low"`

#### `MAX`

`AndroidNotificationPriority.MAX ＝ "max"`

#### `MIN`

`AndroidNotificationPriority.MIN ＝ "min"`

### `AndroidNotificationVisibility`

#### `UNKNOWN`

`AndroidNotificationVisibility.UNKNOWN ＝ 0`

#### `PUBLIC`

`AndroidNotificationVisibility.PUBLIC ＝ 1`

#### `PRIVATE`

`AndroidNotificationVisibility.PRIVATE ＝ 2`

#### `SECRET`

`AndroidNotificationVisibility.SECRET ＝ 3`

### `IosAlertStyle`

#### `NONE`

`IosAlertStyle.NONE ＝ 0`

#### `BANNER`

`IosAlertStyle.BANNER ＝ 1`

#### `ALERT`

`IosAlertStyle.ALERT ＝ 2`

### `IosAllowsPreviews`

#### `NEVER`

`IosAllowsPreviews.NEVER ＝ 0`

#### `ALWAYS`

`IosAllowsPreviews.ALWAYS ＝ 1`

#### `WHEN_AUTHENTICATED`

`IosAllowsPreviews.WHEN_AUTHENTICATED ＝ 2`

### `IosAuthorizationStatus`

#### `NOT_DETERMINED`

`IosAuthorizationStatus.NOT_DETERMINED ＝ 0`

#### `DENIED`

`IosAuthorizationStatus.DENIED ＝ 1`

#### `AUTHORIZED`

`IosAuthorizationStatus.AUTHORIZED ＝ 2`

#### `PROVISIONAL`

`IosAuthorizationStatus.PROVISIONAL ＝ 3`

#### `EPHEMERAL`

`IosAuthorizationStatus.EPHEMERAL ＝ 4`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

---

# Expo Pedometer

`Pedometer` from `expo-sensors` uses the system `hardware.Sensor` on Android and Core Motion on iOS to get the user's step count, and also allows you to subscribe to pedometer updates.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Pedometer

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { Pedometer } from 'expo-sensors';

export default function App() {
  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');
  const [pastStepCount, setPastStepCount] = useState(0);
  const [currentStepCount, setCurrentStepCount] = useState(0);

  const subscribe = async () => {
```
const isAvailable = await Pedometer.isAvailableAsync();
setIsPedometerAvailable(String(isAvailable));
```
if (isAvailable) {
  const end = new Date();
  const start = new Date();
  start.setDate(end.getDate() - 1);
```
const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);
  if (pastStepCountResult) {
    setPastStepCount(pastStepCountResult.steps);
  }
```
return Pedometer.watchStepCount(result => {
    setCurrentStepCount(result.steps);
  });
}
```
  };

  useEffect(() => {
```
const subscription = subscribe();
return () => subscription && subscription.remove();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>
  <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>
  <Text>Walk! And watch this go up: {currentStepCount}</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
marginTop: 15,
alignItems: 'center',
justifyContent: 'center',
```
  },
});
```

## API

```
import { Pedometer } from 'expo-sensors';
```

## Methods

### `Pedometer.getPermissionsAsync()`

Checks user's permissions for accessing pedometer.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `Pedometer.getStepCountAsync(start, end)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| start | `[Date` |
A date indicating the start of the range over which to measure steps.

 |
| end | `[Date` |

A date indicating the end of the range over which to measure steps.

 |

Get the step count between two dates.

Returns:

`[Promise<[PedometerResult](#pedometerresult)>`

Returns a promise that fulfills with a `PedometerResult`.

As [Apple documentation states:

> Only the past seven days worth of data is stored and available for you to retrieve. Specifying a start date that is more than seven days in the past returns only the available data.

### `Pedometer.isAvailableAsync()`

Returns whether the pedometer is enabled on the device.

Returns:

`[Promise<boolean>`

Returns a promise that fulfills with a `boolean`, indicating whether the pedometer is available on this device.

### `Pedometer.requestPermissionsAsync()`

Asks the user to grant permissions for accessing pedometer.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

### `Pedometer.watchStepCount(callback)`

| Parameter | Type | Description |
| --- | --- | --- |
| callback | `[PedometerUpdateCallback](#pedometerupdatecallback)` |
A callback that is invoked when new step count data is available. The callback is provided with a single argument that is `PedometerResult`.

 |

Subscribe to pedometer updates.

Returns:

`[Subscription](#subscription)`

Returns a `Subscription` that enables you to call `remove()` when you would like to unsubscribe the listener.

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `PedometerResult`

| Property | Type | Description |
| --- | --- | --- |
| steps | `number` |
Number of steps taken between the given dates.

 |

### `PedometerUpdateCallback(result)`

Callback function providing event result as an argument.

| Parameter | Type |
| --- | --- |
| result | `[PedometerResult](#pedometerresult)` |

Returns:

`void`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

---

# React Native Picker

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

A component that provides access to the system UI for picking between several options.

## Installation

`npx expo install @react-native-picker/picker`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See complete documentation at [`react-native-picker/picker`.

---

# Expo Print

`expo-print` provides an API for Android and iOS (AirPrint) printing functionality.

## Installation

`npx expo install expo-print`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Print usage

```
import { useState } from 'react';
import { View, StyleSheet, Button, Platform, Text } from 'react-native';
import * as Print from 'expo-print';
import { shareAsync } from 'expo-sharing';

const html = `
<html>
  <head>
```
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
```
  </head>
  <body style="text-align: center;">
```
<h1 style="font-size: 50px; font-family: Helvetica Neue; font-weight: normal;">
  Hello Expo!
</h1>
<img
  src="https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png"
  style="width: 90vw;" />
```
  </body>
</html>
`;

export default function App() {
  const [selectedPrinter, setSelectedPrinter] = useState();

  const print = async () => {
```
// On iOS/android prints the given html. On web prints the HTML from the current page.
await Print.printAsync({
  html,
  printerUrl: selectedPrinter?.url, // iOS only
});
```
  };

  const printToFile = async () => {
```
// On iOS/android prints the given html. On web prints the HTML from the current page.
const { uri } = await Print.printToFileAsync({ html });
console.log('File has been saved to:', uri);
await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });
```
  };

  const selectPrinter = async () => {
```
const printer = await Print.selectPrinterAsync(); // iOS only
setSelectedPrinter(printer);
```
  };

  return (
```
<View style={styles.container}>
  <Button title="Print" onPress={print} />
  <View style={styles.spacer} />
  <Button title="Print to PDF file" onPress={printToFile} />
  {Platform.OS === 'ios' && (
    <>
      <View style={styles.spacer} />
      <Button title="Select printer" onPress={selectPrinter} />
      <View style={styles.spacer} />
      {selectedPrinter ? (
        <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>
      ) : undefined}
    </>
  )}
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
backgroundColor: '#ecf0f1',
flexDirection: 'column',
padding: 8,
```
  },
  spacer: {
```
height: 8,
```
  },
  printer: {
```
textAlign: 'center',
```
  },
});
```

## API

```
import * as Print from 'expo-print';
```

## Constants

### `Print.Orientation`

Type: `[OrientationType](#orientationtype)`

The orientation of the printed content.

## Methods

### `Print.printAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options | `[PrintOptions](#printoptions)` |
A map defining what should be printed.

 |

Prints a document or HTML, on web this prints the HTML from the page.

> Note: On iOS, printing from HTML source doesn't support local asset URLs (due to `WKWebView` limitations). As a workaround you can use inlined base64-encoded strings. See [this comment for more details.

> Note: on iOS, when printing without providing a `PrintOptions.printerUrl` the `Promise` will be resolved once printing is started in the native print window and rejected if the window is closed without starting the print. On Android the `Promise` will be resolved immediately after displaying the native print window and won't be rejected if the window is closed without starting the print.

Returns:

`[Promise<void>`

Resolves to an empty `Promise` if printing started.

### `Print.printToFileAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options(optional) | `[FilePrintOptions](#fileprintoptions)` |
A map of print options.

Default:`{}`

 |

Prints HTML to PDF file and saves it to [app's cache directory. On Web this method opens the print dialog.

Returns:

`[Promise<[FilePrintResult](#fileprintresult)>`

### `Print.selectPrinterAsync()`

Only for: iOS

Chooses a printer that can be later used in `printAsync`

Returns:

`[Promise<[Printer](#printer)>`

A promise which fulfils with an object containing `name` and `url` of the selected printer.

## Interfaces

### `OrientationType`

The possible values of orientation for the printed content.

| Property | Type | Description |
| --- | --- | --- |
| landscape | `string` |
\-

 |
| portrait | `string` |

\-

 |

## Types

### `FilePrintOptions`

| Property | Type | Description |
| --- | --- | --- |
| base64(optional) | `boolean` |
Whether to include base64 encoded string of the file in the returned object.

 |
| height(optional) | `number` |

Height of the single page in pixels. Defaults to `792` which is a height of US Letter paper format with 72 PPI.

 |
| html(optional) | `string` |

HTML string to print into PDF file.

 |
| margins(optional) | `[PageMargins](#pagemargins)` |

Only for: iOS

Page margins for the printed document.

 |
| useMarkupFormatter(optional) | `boolean` |

Only for: iOS

Alternative to default option that uses [UIMarkupTextPrintFormatter instead of WebView, but it doesn't display images.

 |
| width(optional) | `number` |

Width of the single page in pixels. Defaults to `612` which is a width of US Letter paper format with 72 PPI.

 |

### `FilePrintResult`

| Property | Type | Description |
| --- | --- | --- |
| base64(optional) | `string` |
Base64 encoded string containing the data of the PDF file. Available only if `base64` option is truthy. It doesn't include data URI prefix `data:application/pdf;base64,`.

 |
| numberOfPages | `number` |

Number of pages that were needed to render given content.

 |
| uri | `string` |

A URI to the printed PDF file.

 |

### `PrintOptions`

| Property | Type | Description |
| --- | --- | --- |
| height(optional) | `number` |
Height of the single page in pixels. Defaults to `792` which is a height of US Letter paper format with 72 PPI. Available only with `html` option.

 |
| html(optional) | `string` |

Only for: Android, iOS

HTML string to print.

 |
| margins(optional) | `[PageMargins](#pagemargins)` |

Only for: iOS

Page margins for the printed document.

 |
| markupFormatterIOS(optional) | `string` |

> Deprecated This argument is deprecated, use `useMarkupFormatter` instead. Might be removed in the future releases.

Only for: iOS

 |
| orientation(optional) | `OrientationType[portrait] | OrientationType[landscape]` |

Only for: iOS

The orientation of the printed content, `Print.Orientation.portrait` or `Print.Orientation.landscape`.

 |
| printerUrl(optional) | `string` |

Only for: iOS

URL of the printer to use. Returned from `selectPrinterAsync`.

 |
| uri(optional) | `string` |

URI of a PDF file to print. Remote, local (ex. selected via `DocumentPicker`) or base64 data URI starting with `data:application/pdf;base64,`. This only supports PDF, not other types of document (e.g. images).

 |
| useMarkupFormatter(optional) | `boolean` |

Only for: iOS

Alternative to default option that uses [UIMarkupTextPrintFormatter instead of WebView, but it doesn't display images.

 |
| width(optional) | `number` |

Width of the single page in pixels. Defaults to `612` which is a width of US Letter paper format with 72 PPI. Available only with `html` option.

 |

### `Printer`

| Property | Type | Description |
| --- | --- | --- |
| name | `string` |
Name of the printer.

 |
| url | `string` |

URL of the printer.

 |

## Local images

On iOS, printing from HTML source doesn't support local asset URLs (due to WKWebView limitations). Instead, images need to be converted to base64 and inlined into the HTML.

```
import { Asset } from 'expo-asset';
import { printAsync } from 'expo-print';
import { manipulateAsync } from 'expo-image-manipulator';

async function generateHTML() {
  const asset = Asset.fromModule(require('../../assets/logo.png'));
  const image = await manipulateAsync(asset.localUri ?? asset.uri, , { base64: true });
  return `
```
<html>
  <img
    src="data:image/jpeg;base64,${image.base64}"
    style="width: 90vw;" />
</html>
```
  `;
}

async function print() {
  const html = await generateHTML();
  await printAsync({ html });
}
```

## Page margins

On iOS you can set the page margins using the `margins` option:

```
const { uri } = await Print.printToFileAsync({
  html: 'This page is printed with margins',
  margins: {
```
left: 20,
top: 50,
right: 20,
bottom: 100,
```
  },
});
```

If `useMarkupFormatter` is set to `true`, setting margins may cause a blank page to appear at the end of your printout. To prevent this, make sure your HTML string is a well-formed document, including `<!DOCTYPE html>` at the beginning of the string.

On Android, if you're using `html` option in `printAsync` or `printToFileAsync`, the resulting print might contain page margins (it depends on the WebView engine). They are set by `@page` style block and you can override them in your HTML code:

```
<style>
  @page {
```
margin: 20px;
```
  }
</style>
```

See [`@page` documentation on MDN for more details.

---

# React Native Reanimated

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

[`react-native-reanimated` provides an API that greatly simplifies the process of creating smooth, powerful, and maintainable animations.

> Reanimated uses React Native APIs that are incompatible with "Remote JS Debugging" for JavaScriptCore. To use a debugger with your app with `react-native-reanimated`, you'll need to use the [Hermes JavaScript engine and the [JavaScript Inspector for Hermes.

## Installation

`npx expo install react-native-reanimated`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

No additional configuration is required. [Reanimated Babel plugin is automatically configured in [`babel-preset-expo` when you install the library.

## Usage

The following example shows how to use the `react-native-reanimated` library to create a simple animation. For more information on the API and its usage, see [`react-native-reanimated` documentation.

Using react-native-reanimated

```
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
```
duration: 500,
easing: Easing.bezier(0.5, 0.01, 0, 1),
```
  };

  const style = useAnimatedStyle(() => {
```
return {
  width: withTiming(randomWidth.value, config),
};
```
  });

  return (
```
<View style={styles.container}>
  <Animated.View style={[styles.box, style]} />
  <Button
    title="toggle"
    onPress={() => {
      randomWidth.value = Math.random() * 350;
    }}
  />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
```
  },
  box: {
```
width: 100,
height: 80,
backgroundColor: 'black',
margin: 30,
```
  },
});
```

---

# registerRootComponent

A universal component that allows setting the initial React component to render natively in the app's root React Native view.

Sets the initial React component to render natively in the app's root React Native view on Android, iOS, and the web. It also adds dev-only debugging tools for use with `npx expo start`.

## Installation

`npx expo install expo`

### Manual Android setup

> This is only required if your app does not use [Expo Prebuild to continuously generate the android directory.

Update the android/app/src/main/your-package/MainActivity.java file to use the name `main` in the `getMainComponentName` function.

```
  @Override
  protected String getMainComponentName() {
+    return "main";
  }
```

### Manual iOS setup

> This is only required if your app does not use [Expo Prebuild to continuously generate the ios directory.

Update the iOS ios/your-name/AppDelegate.(m|mm|swift) file to use the moduleName `main` in the `createRootViewWithBridge:bridge moduleName:@"main" initialProperties:initProps` line of the `application:didFinishLaunchingWithOptions:` function.

## API

```
import { registerRootComponent } from 'expo';
```

### `registerRootComponent(component)`

Sets the initial React component to render natively in your app's root React Native view (`RCTView`).

This function does the following:

*   Invokes React Native's [AppRegistry.registerComponent
*   Invokes React Native web's `AppRegistry.runApplication` on web to render to the root `index.html` file.
*   Polyfills the [`process.nextTick` function globally.
*   Adds support for using the `fontFamily` React Native style with the `expo-font` package.

This function also adds the following dev-only features that are removed in production bundles.

*   Adds the Fast Refresh and bundle splitting indicator to the app.
*   Asserts if the `expo-updates` package is misconfigured.
*   Asserts if `react-native` is not aliased to `react-native-web` when running in the browser.
*   Polyfills `console.log` to send logs to the dev server via `/logs`

#### Arguments

*   component (ReactComponent): The React component class that renders the rest of your app.

#### Returns

No return value.

## Common questions

### What if I want to name my main app file something other than App.js?

You can set the `"main"` in package.json to any file within your project. If you do this, then you need to use `registerRootComponent`; `export default` will not make this component the root for the app if you are using a custom entry file.

For example, let's say you want to make `"src/main.js"` the entry file for your app -- maybe you don't like having JavaScript files in the project root. First, set this in package.json:

```
{
  "main": "src/main.js"
}
```

Then in `"src/main.js"`, make sure you call `registerRootComponent` and pass in the component you want to render at the root of the app.

```
import { registerRootComponent } from 'expo';
import { View } from 'react-native';

function App() {
  return <View />;
}

registerRootComponent(App);
```

---

# React Native Safe Area Context

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

`react-native-safe-area-context` provides a flexible API for accessing device safe area inset information. This allows you to position your content appropriately around notches, status bars, home indicators, and other such device and operating system interface elements. It also provides a `SafeAreaView` component that you can use in place of `View` to automatically inset your views to account for safe areas.

## Installation

`npx expo install react-native-safe-area-context`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## API

```
import {
  SafeAreaView,
  SafeAreaProvider,
  SafeAreaInsetsContext,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';
```

## Components

### `SafeAreaView`

`SafeAreaView` is a regular `View` component with the safe area edges applied as padding.

If you set your own padding on the view, it will be added to the padding from the safe area.

> If you are targeting web, you must set up `SafeAreaProvider` as described in the [Context section.

```
import { SafeAreaView } from 'react-native-safe-area-context';

function SomeComponent() {
  return (
```
<SafeAreaView>
  <View />
</SafeAreaView>
```
  );
}
```

## Props

### `edges`

Optional Type: [`Edge` Default: `["top", "right", "bottom", "left"]`

Sets the edges to apply the safe area insets to.

### `emulateUnlessSupported`

Optional Type: `boolean` Default: `true`

On iOS 10+, emulate the safe area using the status bar height and home indicator sizes.

## Hooks

### `useSafeAreaInsets()`

Hook gives you direct access to the safe area insets. This is a more advanced use-case, and might perform worse than `SafeAreaView` when rotating the device.

Example

```
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function HookComponent() {
  const insets = useSafeAreaInsets();

  return <View style={{ paddingTop: insets.top }} />;
}
```

Returns

[`EdgeInsets`

## Types

### `Edge`

String union of possible edges.

Acceptable values are: `'top'`, `'right'`, `'bottom'`, `'left'`.

### `EdgeInsets`

Represent the hook result.

EdgeInsets Properties

| Name | Type | Description |
| --- | --- | --- |
| `bottom` | `number` | Value of bottom inset. |
| `left` | `number` | Value of left inset. |
| `right` | `number` | Value of right inset. |
| `top` | `number` | Value of top inset. |

## Guides

### Context

To use safe area context, you need to add `SafeAreaProvider` in your app root component.

> You may need to add it in other places too, including at the root of any modals any routes when using `react-native-screen`.

```
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}
```

Then, you can use [`useSafeAreaInsets()` hook and also consumer API to access inset data:

```
import { SafeAreaInsetsContext } from 'react-native-safe-area-context';

function Component() {
  return (
```
<SafeAreaInsetsContext.Consumer>
  {insets => <View style={{ paddingTop: insets.top }} />}
</SafeAreaInsetsContext.Consumer>
```
  );
}
```

### Optimization

If you can, use `SafeAreaView`. It's implemented natively so when rotating the device, there is no delay from the asynchronous bridge.

To speed up the initial render, you can import `initialWindowMetrics` from this package and set as the `initialMetrics` prop on the provider as described in Web SSR. You cannot do this if your provider remounts, or you are using `react-native-navigation`.

```
import { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;
}
```

### Web SSR

If you are doing server side rendering on the web, you can use `initialSafeAreaInsets` to inject values based on the device the user has, or simply pass zero. Otherwise, insets measurement will break rendering your page content since it is async.

### Migrating from CSS

#### Before

In a web-only app, you would use CSS environment variables to get the size of the screen's safe area insets.

styles.css

```
div {
  padding-top: env(safe-area-inset-top);
  padding-left: env(safe-area-inset-left);
  padding-bottom: env(safe-area-inset-bottom);
  padding-right: env(safe-area-inset-right);
}
```

#### After

Universally, the hook `useSafeAreaInsets()` can provide access to this information.

App.js

```
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const insets = useSafeAreaInsets();
  return (
```
<View
  style={{
    paddingTop: insets.top,
    paddingLeft: insets.left,
    paddingBottom: insets.bottom,
    paddingRight: insets.right,
  }}
/>
```
  );
}
```

---

# Expo ScreenCapture

`expo-screen-capture` allows you to protect screens in your app from being captured or recorded, as well as be notified if a screenshot is taken while your app is foregrounded. The two most common reasons you may want to prevent screen capture are:

*   If a screen is displaying sensitive information (password, credit card data, and so on)
*   You are displaying paid content that you don't want to be recorded and shared

This is especially important on Android since the [`android.media.projection` API allows third-party apps to perform screen capture or screen sharing (even if the app is in the background).

> Currently, taking screenshots on iOS cannot be prevented. This is due to underlying OS limitations.

> For testing screen capture functionality: On Android Emulator, run `adb shell input keyevent 120` in a separate terminal to trigger a screenshot. On iOS Simulator, you can trigger screenshots using Device > Trigger Screenshot from the menu bar.

## Installation

`npx expo install expo-screen-capture`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

### Example: hook

Screen Capture hook

```
import { usePreventScreenCapture } from 'expo-screen-capture';
import { Text, View } from 'react-native';

export default function ScreenCaptureExample() {
  usePreventScreenCapture();

  return (
```
<View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
  <Text>As long as this component is mounted, this screen is unrecordable!</Text>
</View>
```
  );
}
```

### Example: functions

Screen Capture functions

```
import * as ScreenCapture from 'expo-screen-capture';
import { useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';

export default function ScreenCaptureExample() {
  const hasPermissions = async () => {
```
const { status } = await ScreenCapture.requestPermissionsAsync();
return status === 'granted';
```
  };

  useEffect(() => {
```
let subscription;
```
const addListenerAsync = async () => {
  if (await hasPermissions()) {
    subscription = ScreenCapture.addScreenshotListener(() => {
      alert('Thanks for screenshotting my beautiful app 😊');
    });
  } else {
    console.error('Permissions needed to subscribe to screenshot events are missing!');
  }
};
addListenerAsync();
```
return () => {
  subscription?.remove();
};
```
  }, );

  const activate = async () => {
```
await ScreenCapture.preventScreenCaptureAsync();
```
  };

  const deactivate = async () => {
```
await ScreenCapture.allowScreenCaptureAsync();
```
  };

  return (
```
<View style={styles.container}>
  <Button title="Activate" onPress={activate} />
  <Button title="Deactivate" onPress={deactivate} />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
```
  },
});
```

## API

```
import * as ScreenCapture from 'expo-screen-capture';
```

## Hooks

### `usePermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request permissions necessary for detecting when a screenshot is taken. This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = ScreenCapture.useScreenCapturePermissions();
```

### `usePreventScreenCapture(key)`

| Parameter | Type | Description |
| --- | --- | --- |
| key(optional) | `string` |
If provided, this will prevent multiple instances of this hook or the `preventScreenCaptureAsync` and `allowScreenCaptureAsync` methods from conflicting with each other. This argument is useful if you have multiple active components using the `allowScreenCaptureAsync` hook. Defaults to `'default'`.

Default:`'default'`

 |

A React hook to prevent screen capturing for as long as the owner component is mounted.

Returns:

`void`

## Methods

### `ScreenCapture.allowScreenCaptureAsync(key)`

| Parameter | Type | Description |
| --- | --- | --- |
| key(optional) | `string` |
This will prevent multiple instances of the `preventScreenCaptureAsync` and `allowScreenCaptureAsync` methods from conflicting with each other. If provided, the value must be the same as the key passed to `preventScreenCaptureAsync` in order to re-enable screen capturing. Defaults to 'default'.

Default:`'default'`

 |

Re-allows the user to screen record or screenshot your app. If you haven't called `preventScreenCapture()` yet, this method does nothing.

Returns:

`[Promise<void>`

### `ScreenCapture.getPermissionsAsync()`

Checks user's permissions for detecting when a screenshot is taken.

> Only Android requires additional permissions to detect screenshots. On iOS devices, this method will always resolve to a `granted` permission response.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to a [PermissionResponse](#permissionresponse) object.

### `ScreenCapture.isAvailableAsync()`

Returns whether the Screen Capture API is available on the current device.

Returns:

`[Promise<boolean>`

A promise that resolves to a `boolean` indicating whether the Screen Capture API is available on the current device. Currently, this resolves to `true` on Android and iOS only.

### `ScreenCapture.preventScreenCaptureAsync(key)`

| Parameter | Type | Description |
| --- | --- | --- |
| key(optional) | `string` |
Optional. If provided, this will help prevent multiple instances of the `preventScreenCaptureAsync` and `allowScreenCaptureAsync` methods (and `usePreventScreenCapture` hook) from conflicting with each other. When using multiple keys, you'll have to re-allow each one in order to re-enable screen capturing. Defaults to `'default'`.

Default:`'default'`

 |

Prevents screenshots and screen recordings until `allowScreenCaptureAsync` is called or the app is restarted. If you are already preventing screen capture, this method does nothing (unless you pass a new and unique `key`).

> Please note that on iOS, this will only prevent screen recordings, and is only available on iOS 11 and newer. On older iOS versions, this method does nothing.

Returns:

`[Promise<void>`

### `ScreenCapture.requestPermissionsAsync()`

Asks the user to grant permissions necessary for detecting when a screenshot is taken.

> Only Android requires additional permissions to detect screenshots. On iOS devices, this method will always resolve to a `granted` permission response.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

A promise that resolves to a [PermissionResponse](#permissionresponse) object.

## Event Subscriptions

### `ScreenCapture.addScreenshotListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `() => void` |
The function that will be executed when the user takes a screenshot. This function accepts no arguments.

 |

Adds a listener that will fire whenever the user takes a screenshot while the app is foregrounded. On Android, this method requires the `READ_EXTERNAL_STORAGE` permission. You can request this with [`MediaLibrary.requestPermissionsAsync()`.

Returns:

`[Subscription](#subscription)`

A `Subscription` object that you can use to unregister the listener, either by calling `remove()` or passing it to `removeScreenshotListener`.

### `ScreenCapture.removeScreenshotListener(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
Subscription returned by `addScreenshotListener`.

 |

Removes the subscription you provide, so that you are no longer listening for screenshots.

If you prefer, you can also call `remove()` on that `Subscription` object, for example:

```
let mySubscription = addScreenshotListener(() => {
  console.log("You took a screenshot!");
});
...
mySubscription.remove();
// OR
removeScreenshotListener(mySubscription);
```

Returns:

`void`

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

---

# Expo ScreenOrientation

Screen Orientation is defined as the orientation in which graphics are painted on the device. For example, the figure below has a device in a vertical and horizontal physical orientation, but a portrait screen orientation. For physical device orientation, see the orientation section of [Device Motion.

On both Android and iOS platforms, changes to the screen orientation will override any system settings or user preferences. On Android, it is possible to change the screen orientation while taking the user's preferred orientation into account. On iOS, user and system settings are not accessible by the application and any changes to the screen orientation will override existing settings.

> Web has [limited support.

## Installation

`npx expo install expo-screen-orientation`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

### Warning

Apple added support for _split view_ mode to iPads in iOS 9. This changed how the screen orientation is handled by the system. To put the matter shortly, for iOS, your iPad is always in landscape mode unless you open two applications side by side. To be able to lock screen orientation using this module you will need to disable support for this feature. For more information about the _split view_ mode, check out [the official Apple documentation.

## Configuration in app config

You can configure `expo-screen-orientation` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"ios": {
  "requireFullScreen": true
},
"plugins":
    "expo-screen-orientation",
    {
      "initialOrientation": "DEFAULT"
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `initialOrientation` | `undefined` |
Only for: iOS

Sets the iOS initial screen orientation. Possible values: `DEFAULT`, `ALL`, `PORTRAIT`, `PORTRAIT_UP`, `PORTRAIT_DOWN`, `LANDSCAPE`, `LANDSCAPE_LEFT`, `LANDSCAPE_RIGHT`

 |

Are you using this library in an existing React Native app?

1.  Open the ios directory in Xcode with `xed ios`. If you don't have the directory, run `npx expo prebuild -p ios` to generate one.
2.  Tick the `Requires Full Screen` checkbox in Xcode. It should be located under Project Target > General > Deployment Info.

## API

```
import * as ScreenOrientation from 'expo-screen-orientation';
```

## Methods

### `ScreenOrientation.getOrientationAsync()`

Gets the current screen orientation.

Returns:

`[Promise<[Orientation](#orientation)>`

Returns a promise that fulfils with an `Orientation` value that reflects the current screen orientation.

### `ScreenOrientation.getOrientationLockAsync()`

Gets the current screen orientation lock type.

Returns:

`[Promise<[OrientationLock](#orientationlock)>`

Returns a promise which fulfils with an `OrientationLock` value.

### `ScreenOrientation.getPlatformOrientationLockAsync()`

Gets the platform specific screen orientation lock type.

Returns:

`[Promise<[PlatformOrientationInfo](#platformorientationinfo)>`

Returns a promise which fulfils with a `PlatformOrientationInfo` value.

### `ScreenOrientation.lockAsync(orientationLock)`

| Parameter | Type | Description |
| --- | --- | --- |
| orientationLock | `[OrientationLock](#orientationlock)` |
The orientation lock to apply. See the `OrientationLock` enum for possible values.

 |

Lock the screen orientation to a particular `OrientationLock`.

Returns:

`[Promise<void>`

Returns a promise with `void` value, which fulfils when the orientation is set.

Example

```
async function changeScreenOrientation() {
  await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_LEFT);
}
```

### `ScreenOrientation.lockPlatformAsync(options)`

| Parameter | Type | Description |
| --- | --- | --- |
| options | `[PlatformOrientationInfo](#platformorientationinfo)` |
The platform specific lock to apply. See the `PlatformOrientationInfo` object type for the different platform formats.

 |

Returns:

`[Promise<void>`

Returns a promise with `void` value, resolving when the orientation is set and rejecting if an invalid option or value is passed.

### `ScreenOrientation.supportsOrientationLockAsync(orientationLock)`

| Parameter | Type |
| --- | --- |
| orientationLock | `[OrientationLock](#orientationlock)` |

Returns whether the `OrientationLock` policy is supported on the device.

Returns:

`[Promise<boolean>`

Returns a promise that resolves to a `boolean` value that reflects whether or not the orientationLock is supported.

### `ScreenOrientation.unlockAsync()`

Sets the screen orientation back to the `OrientationLock.DEFAULT` policy.

Returns:

`[Promise<void>`

Returns a promise with `void` value, which fulfils when the orientation is set.

## Event Subscriptions

### `ScreenOrientation.addOrientationChangeListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `[OrientationChangeListener](#orientationchangelistener)` |
Each orientation update will pass an object with the new `OrientationChangeEvent` to the listener.

 |

Invokes the `listener` function when the screen orientation changes from `portrait` to `landscape` or from `landscape` to `portrait`. For example, it won't be invoked when screen orientation change from `portrait up` to `portrait down`, but it will be called when there was a change from `portrait up` to `landscape left`.

Returns:

`[Subscription](#subscription)`

### `ScreenOrientation.removeOrientationChangeListener(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `[Subscription](#subscription)` |
A subscription object that manages the updates passed to a listener function on an orientation change.

 |

Unsubscribes the listener associated with the `Subscription` object from all orientation change updates.

Returns:

`void`

### `ScreenOrientation.removeOrientationChangeListeners()`

Removes all listeners subscribed to orientation change updates.

Returns:

`void`

## Types

### `OrientationChangeEvent`

| Property | Type | Description |
| --- | --- | --- |
| orientationInfo | `[ScreenOrientationInfo](#screenorientationinfo)` |
The current `ScreenOrientationInfo` of the device.

 |
| orientationLock | `[OrientationLock](#orientationlock)` |

The current `OrientationLock` of the device.

 |

### `OrientationChangeListener(event)`

| Parameter | Type |
| --- | --- |
| event | `[OrientationChangeEvent](#orientationchangeevent)` |

Returns:

`void`

### `PlatformOrientationInfo`

| Property | Type | Description |
| --- | --- | --- |
| screenOrientationArrayIOS(optional) | `[Orientation](#orientation)` |
Only for: iOS

An array of orientations to allow on the iOS platform.

 |
| screenOrientationConstantAndroid(optional) | `number` |

Only for: Android

A constant to set using the Android native [API. For example, in order to set the lock policy to [unspecified, `-1` should be passed in.

 |
| screenOrientationLockWeb(optional) | `[WebOrientationLock](#weborientationlock)` |

Only for: Web

A web orientation lock to apply in the browser.

 |

### `ScreenOrientationInfo`

| Property | Type | Description |
| --- | --- | --- |
| horizontalSizeClass(optional) | `[SizeClassIOS](#sizeclassios)` |
Only for: iOS

The [horizontal size class of the device.

 |
| orientation | `[Orientation](#orientation)` |

The current orientation of the device.

 |
| verticalSizeClass(optional) | `[SizeClassIOS](#sizeclassios)` |

Only for: iOS

The [vertical size class of the device.

 |

### `Subscription`

| Property | Type | Description |
| --- | --- | --- |
| remove | `() => void` |
A method to unsubscribe the listener.

 |

## Enums

### `Orientation`

#### `UNKNOWN`

`Orientation.UNKNOWN ＝ 0`

An unknown screen orientation. For example, the device is flat, perhaps on a table.

#### `PORTRAIT_UP`

`Orientation.PORTRAIT_UP ＝ 1`

Right-side up portrait interface orientation.

#### `PORTRAIT_DOWN`

`Orientation.PORTRAIT_DOWN ＝ 2`

Upside down portrait interface orientation.

#### `LANDSCAPE_LEFT`

`Orientation.LANDSCAPE_LEFT ＝ 3`

Left landscape interface orientation.

#### `LANDSCAPE_RIGHT`

`Orientation.LANDSCAPE_RIGHT ＝ 4`

Right landscape interface orientation.

### `OrientationLock`

An enum whose values can be passed to the `lockAsync` method.

> Note: `OrientationLock.ALL` and `OrientationLock.PORTRAIT` are invalid on devices which don't support `OrientationLock.PORTRAIT_DOWN`.

#### `DEFAULT`

`OrientationLock.DEFAULT ＝ 0`

The default orientation. On iOS, this will allow all orientations except `Orientation.PORTRAIT_DOWN`. On Android, this lets the system decide the best orientation.

#### `ALL`

`OrientationLock.ALL ＝ 1`

All four possible orientations

#### `PORTRAIT`

`OrientationLock.PORTRAIT ＝ 2`

Any portrait orientation.

#### `PORTRAIT_UP`

`OrientationLock.PORTRAIT_UP ＝ 3`

Right-side up portrait only.

#### `PORTRAIT_DOWN`

`OrientationLock.PORTRAIT_DOWN ＝ 4`

Upside down portrait only.

#### `LANDSCAPE`

`OrientationLock.LANDSCAPE ＝ 5`

Any landscape orientation.

#### `LANDSCAPE_LEFT`

`OrientationLock.LANDSCAPE_LEFT ＝ 6`

Left landscape only.

#### `LANDSCAPE_RIGHT`

`OrientationLock.LANDSCAPE_RIGHT ＝ 7`

Right landscape only.

#### `OTHER`

`OrientationLock.OTHER ＝ 8`

A platform specific orientation. This is not a valid policy that can be applied in `lockAsync`.

#### `UNKNOWN`

`OrientationLock.UNKNOWN ＝ 9`

An unknown screen orientation lock. This is not a valid policy that can be applied in `lockAsync`.

### `SizeClassIOS`

Each iOS device has a default set of [size classes that you can use as a guide when designing your interface.

#### `UNKNOWN`

`SizeClassIOS.UNKNOWN ＝ 0`

#### `COMPACT`

`SizeClassIOS.COMPACT ＝ 1`

#### `REGULAR`

`SizeClassIOS.REGULAR ＝ 2`

### `WebOrientation`

#### `LANDSCAPE_PRIMARY`

`WebOrientation.LANDSCAPE_PRIMARY ＝ "landscape-primary"`

#### `LANDSCAPE_SECONDARY`

`WebOrientation.LANDSCAPE_SECONDARY ＝ "landscape-secondary"`

#### `PORTRAIT_PRIMARY`

`WebOrientation.PORTRAIT_PRIMARY ＝ "portrait-primary"`

#### `PORTRAIT_SECONDARY`

`WebOrientation.PORTRAIT_SECONDARY ＝ "portrait-secondary"`

### `WebOrientationLock`

An enum representing the lock policies that can be applied on the web platform, modelled after the [W3C specification. These values can be applied through the `lockPlatformAsync` method.

#### `ANY`

`WebOrientationLock.ANY ＝ "any"`

#### `LANDSCAPE`

`WebOrientationLock.LANDSCAPE ＝ "landscape"`

#### `LANDSCAPE_PRIMARY`

`WebOrientationLock.LANDSCAPE_PRIMARY ＝ "landscape-primary"`

#### `LANDSCAPE_SECONDARY`

`WebOrientationLock.LANDSCAPE_SECONDARY ＝ "landscape-secondary"`

#### `NATURAL`

`WebOrientationLock.NATURAL ＝ "natural"`

#### `PORTRAIT`

`WebOrientationLock.PORTRAIT ＝ "portrait"`

#### `PORTRAIT_PRIMARY`

`WebOrientationLock.PORTRAIT_PRIMARY ＝ "portrait-primary"`

#### `PORTRAIT_SECONDARY`

`WebOrientationLock.PORTRAIT_SECONDARY ＝ "portrait-secondary"`

#### `UNKNOWN`

`WebOrientationLock.UNKNOWN ＝ "unknown"`

---

# Screens

`react-native-screens` provides native primitives to represent screens instead of plain `<View>` components To better take advantage of operating system behavior and optimizations around screens. This capability is used by library authors and is unlikely to be used directly by most app developers. It also provides the native components needed for React Navigation's [`createNativeStackNavigator`.

> Note: See [`react-native-screens` issue tracker if you encounter any problems.

## Installation

`npx expo install react-native-screens`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## API

The complete API reference and documentation are available in the [`react-native-screens` README.

To use the native stack navigator if you are using React Navigation, see [`createNativeStackNavigator` documentation.

---

# Expo SecureStore

`expo-secure-store` provides a way to encrypt and securely store key–value pairs locally on the device. Each Expo project has a separate storage system and has no access to the storage of other Expo projects.

Size limit for a value is 2048 bytes. An attempt to store larger values may fail. Currently, we print a warning when the limit is reached, however, in a future SDK version an error might be thrown.

The `requireAuthentication` option is not supported in Expo Go when biometric authentication is available due to a missing `NSFaceIDUsageDescription` key.

> This API is not compatible with devices running Android 5 or lower.

## Installation

`npx expo install expo-secure-store`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-secure-store` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-secure-store",
    {
      "faceIDPermission": "Allow $(PRODUCT_NAME) to access your Face ID biometric data."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `faceIDPermission` | `"Allow $(PRODUCT_NAME) to access your Face ID biometric data."` |
Only for: iOS

A string to set the `NSFaceIDUsageDescription` permission message.

 |

Are you using this library in an existing React Native app?

Add `NSFaceIDUsageDescription` key to Info.plist:

Info.plist

```
<key>NSFaceIDUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your Face ID biometric data.</string>
```

## Platform value storage

### Android

On Android, values are stored in [`SharedPreferences`, encrypted with [Android's Keystore system.

### iOS

> For iOS standalone apps, data stored with `expo-secure-store` can persist across app installs.

On iOS, values are stored using the [keychain services as `kSecClassGenericPassword`. iOS has the additional option of being able to set the value's `kSecAttrAccessible` attribute, which controls when the value is available to be fetched.

#### Exempting encryption prompt

Apple App Store Connect prompts you to select the type of encryption algorithm your app implements. This is known as Export Compliance Information. It is asked when publishing the app or submitting for TestFlight.

When using `expo-secure-store`, you can set the [`ios.config.usesNonExemptEncryption` property to `false` in the app config:

app.json

```
{
  "expo": {
```
"ios": {
  "config": {
    "usesNonExemptEncryption": false
  }
  %%placeholder-start%%... %%placeholder-end%%
}
```
  }
}
```

Setting this property automatically handles the compliance information prompt.

## Usage

SecureStore

```
import { useState } from 'react';
import { Text, View, StyleSheet, TextInput, Button } from 'react-native';
import * as SecureStore from 'expo-secure-store';

async function save(key, value) {
  await SecureStore.setItemAsync(key, value);
}

async function getValueFor(key) {
  let result = await SecureStore.getItemAsync(key);
  if (result) {
```
alert("🔐 Here's your value 🔐 \n" + result);
```
  } else {
```
alert('No values stored under that key.');
```
  }
}

export default function App() {
  const [key, onChangeKey] = useState('Your key here');
  const [value, onChangeValue] = useState('Your value here');

  return (
```
<View style={styles.container}>
  <Text style={styles.paragraph}>Save an item, and grab it later!</Text>
  {%%placeholder-start%%Add some TextInput components... %%placeholder-end%%}
```
<TextInput
    style={styles.textInput}
    clearTextOnFocus
    onChangeText={text => onChangeKey(text)}
    value={key}
  />
  <TextInput
    style={styles.textInput}
    clearTextOnFocus
    onChangeText={text => onChangeValue(text)}
    value={value}
  />
  {}
  <Button
    title="Save this key/value pair"
    onPress={() => {
      save(key, value);
      onChangeKey('Your key here');
      onChangeValue('Your value here');
    }}
  />
  <Text style={styles.paragraph}>🔐 Enter your key 🔐</Text>
  <TextInput
    style={styles.textInput}
    onSubmitEditing={event => {
      getValueFor(event.nativeEvent.text);
    }}
    placeholder="Enter the key for the value you want to get"
  />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
paddingTop: 10,
backgroundColor: '#ecf0f1',
padding: 8,
```
  },
  paragraph: {
```
marginTop: 34,
margin: 24,
fontSize: 18,
fontWeight: 'bold',
textAlign: 'center',
```
  },
  textInput: {
```
height: 35,
borderColor: 'gray',
borderWidth: 0.5,
padding: 4,
```
  },
});
```

## API

```
import * as SecureStore from 'expo-secure-store';
```

## Constants

### `SecureStore.AFTER_FIRST_UNLOCK`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

The data in the keychain item cannot be accessed after a restart until the device has been unlocked once by the user. This may be useful if you need to access the item when the phone is locked.

### `SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

Similar to `AFTER_FIRST_UNLOCK`, except the entry is not migrated to a new device when restoring from a backup.

> Deprecated Use an accessibility level that provides some user protection, such as `AFTER_FIRST_UNLOCK`.

### `SecureStore.ALWAYS`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

The data in the keychain item can always be accessed regardless of whether the device is locked. This is the least secure option.

> Deprecated Use an accessibility level that provides some user protection, such as `AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY`.

### `SecureStore.ALWAYS_THIS_DEVICE_ONLY`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

Similar to `ALWAYS`, except the entry is not migrated to a new device when restoring from a backup.

### `SecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

Similar to `WHEN_UNLOCKED_THIS_DEVICE_ONLY`, except the user must have set a passcode in order to store an entry. If the user removes their passcode, the entry will be deleted.

### `SecureStore.WHEN_UNLOCKED`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

The data in the keychain item can be accessed only while the device is unlocked by the user.

### `SecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

Similar to `WHEN_UNLOCKED`, except the entry is not migrated to a new device when restoring from a backup.

## Methods

### `SecureStore.canUseBiometricAuthentication()`

Checks if the value can be saved with `requireAuthentication` option enabled.

Returns:

`boolean`

`true` if the device supports biometric authentication and the enrolled method is sufficiently secure. Otherwise, returns `false`.

### `SecureStore.deleteItemAsync(key, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| key | `string` |
The key that was used to store the associated value.

 |
| options(optional) | `[SecureStoreOptions](#securestoreoptions)` |

An `SecureStoreOptions` object.

Default:`{}`

 |

Delete the value associated with the provided key.

Returns:

`[Promise<void>`

A promise that rejects if the value can't be deleted.

### `SecureStore.getItem(key, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| key | `string` |
The key that was used to store the associated value.

 |
| options(optional) | `[SecureStoreOptions](#securestoreoptions)` |

An `SecureStoreOptions` object.

Default:`{}`

 |

Synchronously reads the stored value associated with the provided key.

> Note: This function blocks the JavaScript thread, so the application may not be interactive when reading a value with `requireAuthentication` option set to `true` until the user authenticates.

Returns:

`string | null`

Previously stored value. It resolves with `null` if there is no entry for the given key or if the key has been invalidated.

### `SecureStore.getItemAsync(key, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| key | `string` |
The key that was used to store the associated value.

 |
| options(optional) | `[SecureStoreOptions](#securestoreoptions)` |

An `SecureStoreOptions` object.

Default:`{}`

 |

Reads the stored value associated with the provided key.

Returns:

`[Promise<string | null>`

A promise that resolves to the previously stored value. It resolves with `null` if there is no entry for the given key or if the key has been invalidated. It rejects if an error occurs while retrieving the value.

> Keys are invalidated by the system when biometrics change, such as adding a new fingerprint or changing the face profile used for face recognition. After a key has been invalidated, it becomes impossible to read its value. This only applies to values stored with `requireAuthentication` set to `true`.

### `SecureStore.isAvailableAsync()`

Returns whether the SecureStore API is enabled on the current device. This does not check the app permissions.

Returns:

`[Promise<boolean>`

Promise which fulfils witch `boolean`, indicating whether the SecureStore API is available on the current device. Currently, this resolves `true` on Android and iOS only.

### `SecureStore.setItem(key, value, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| key | `string` |
The key to associate with the stored value. Keys may contain alphanumeric characters, `.`, `-`, and `_`.

 |
| value | `string` |

The value to store. Size limit is 2048 bytes.

 |
| options(optional) | `[SecureStoreOptions](#securestoreoptions)` |

An `SecureStoreOptions` object.

Default:`{}`

 |

Stores a key–value pair synchronously.

> Note: This function blocks the JavaScript thread, so the application may not be interactive when the `requireAuthentication` option is set to `true` until the user authenticates.

Returns:

`void`

### `SecureStore.setItemAsync(key, value, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| key | `string` |
The key to associate with the stored value. Keys may contain alphanumeric characters, `.`, `-`, and `_`.

 |
| value | `string` |

The value to store. Size limit is 2048 bytes.

 |
| options(optional) | `[SecureStoreOptions](#securestoreoptions)` |

An `SecureStoreOptions` object.

Default:`{}`

 |

Stores a key–value pair.

Returns:

`[Promise<void>`

A promise that rejects if value cannot be stored on the device.

## Types

### `KeychainAccessibilityConstant`

Type: `number`

### `SecureStoreOptions`

| Property | Type | Description |
| --- | --- | --- |
| authenticationPrompt(optional) | `string` |
Custom message displayed to the user while `requireAuthentication` option is turned on.

 |
| keychainAccessible(optional) | `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)` |

Only for: iOS

Specifies when the stored entry is accessible, using iOS's `kSecAttrAccessible` property.

Default:`SecureStore.WHEN_UNLOCKED`

> See: Apple's documentation on [keychain item accessibility.

 |
| keychainService(optional) | `string` |

*   Android: Equivalent of the public/private key pair `Alias`.
*   iOS: The item's service, equivalent to [`kSecAttrService`.

> If the item is set with the `keychainService` option, it will be required to later fetch the value.

 |
| requireAuthentication(optional) | `boolean` |

Option responsible for enabling the usage of the user authentication methods available on the device while accessing data stored in SecureStore.

*   Android: Equivalent to [`setUserAuthenticationRequired(true)`) (requires API 23).
*   iOS: Equivalent to [`biometryCurrentSet`. Complete functionality is unlocked only with a freshly generated key - this would not work in tandem with the `keychainService` value used for the others non-authenticated operations.

This option works slightly differently across platforms: On iOS, the user is prompted to authenticate only when reading or updating an existing value (not when creating a new one). On Android, user authentication is required for all operations.

Warning: This option is not supported in Expo Go when biometric authentication is available due to a missing NSFaceIDUsageDescription. In release builds or when using continuous native generation, make sure to use the `expo-secure-store` config plugin.

 |

---

# SegmentedControl

It's like a fancy radio button, or in Apple's words: "A horizontal control that consists of multiple segments, each segment functioning as a discrete button" ([source). This component renders to a [`UISegmentedControl` on iOS, and to faithful recreations of that control on Android and web (because no equivalent exists on those platforms' standard libraries).

## Installation

`npx expo install @react-native-segmented-control/segmented-control`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See full documentation at [`react-native-community/segmented-control`.

---

# Expo Sensors

`expo-sensors` provide various APIs for accessing device sensors to measure motion, orientation, pressure, magnetic fields, ambient light, and step count.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as Sensors from 'expo-sensors';
// OR
import {
  Accelerometer,
  Barometer,
  DeviceMotion,
  Gyroscope,
  LightSensor,
  Magnetometer,
  MagnetometerUncalibrated,
  Pedometer,
} from 'expo-sensors';
```

## Permissions

### Android

Starting in Android 12 (API level 31), the system has a 200Hz limit for each sensor updates.

If you need an update interval of less than 200Hz, you must add the following permissions to your app.json inside the [`expo.android.permissions` array.

| Android Permission | Description |
| --- | --- |
|
`HIGH_SAMPLING_RATE_SENSORS`

 |

Allows an app to access sensor data with a sampling rate greater than 200 Hz.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) or you're using native android project manually, add `HIGH_SAMPLING_RATE_SENSORS` permission to your project's android/app/src/main/AndroidManifest.xml:

```
<uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS" />
```

## Available sensors

For more information, see the documentation for the sensor you are interested in:

Accelerometer

Measures device acceleration on all platforms.

Barometer

Measures pressure on Android and iOS platforms.

DeviceMotion

Measures device motion on all platforms.

Gyroscope

Measures device rotation on all platforms.

Magnetometer

Measures magnetic fields on Android and iOS platforms.

LightSensor

Measures ambient light on Android platform.

Pedometer

Measures steps count on Android and iOS platforms.

---

# Expo Sharing

`expo-sharing` allows you to share files directly with other compatible applications.

#### Sharing limitations on web

*   `expo-sharing` for web is built on top of the Web Share API, which still has [very limited browser support. Be sure to check that the API can be used before calling it by using `Sharing.isAvailableAsync()`.
*   HTTPS required on web: The Web Share API is only available on web when the page is served over https. Run your app with `npx expo start --tunnel` to enable it.
*   No local file sharing on web: Sharing local files by URI works on Android and iOS, but not on web. You cannot share local files on web by URI — you will need to upload them somewhere and share that URI.

#### Sharing to your app from other apps

Currently `expo-sharing` only supports sharing _from your app to other apps_ and you cannot register to your app to have content shared to it through the native share dialog on native platforms. You can read more [in the related feature request. You can setup this functionality manually in Xcode and Android Studio and create an [Expo Config Plugin to continue using [Expo Prebuild.

## Installation

`npx expo install expo-sharing`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as Sharing from 'expo-sharing';
```

## Methods

### `Sharing.isAvailableAsync()`

Determine if the sharing API can be used in this app.

Returns:

`[Promise<boolean>`

A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.

### `Sharing.shareAsync(url, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
Local file URL to share.

 |
| options(optional) | `[SharingOptions](#sharingoptions)` |

A map of share options.

Default:`{}`

 |

Opens action sheet to share file to different applications which can handle this type of file.

Returns:

`[Promise<void>`

## Types

### `SharingOptions`

| Property | Type | Description |
| --- | --- | --- |
| UTI(optional) | `string` |
Only for: iOS

[Uniform Type Identifier

*   the type of the target file.

 |
| dialogTitle(optional) | `string` |

Only for: Android, Web

Sets share dialog title.

 |
| mimeType(optional) | `string` |

Only for: Android

Sets `mimeType` for `Intent`.

 |

---

# Skia

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

`@shopify/react-native-skia` brings the Skia Graphics Library to React Native. Skia serves as the graphics engine for Google Chrome and Chrome OS, Android, Flutter, Mozilla Firefox and Firefox OS, and many other products.

## Installation

`npx expo install @shopify/react-native-skia`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

> Additional setup required for web: If you want to use Skia on web, you will need to follow [web installation instructions to load CanvasKit.

## Usage

See [`@shopify/react-native-skia` documentation for usage instructions.

---

# Slider

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

A component library that provides access to the system UI for a slider control, that allows users to pick among a range of values by dragging an anchor.

## Installation

`npx expo install @react-native-community/slider`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See full documentation at [`@react-native-community/slider`.

---

# Expo SMS

A library that provides access to the system's UI/app for sending SMS messages.



2.0.1

`expo-sms` provides access to the system's UI/app for sending SMS messages.

## Installation

`npx expo install expo-sms`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as SMS from 'expo-sms';
```

## Methods

### `SMS.isAvailableAsync()`

Determines whether SMS is available. Always returns `false` in the iOS simulator, and in browser.

Returns:

`[Promise<boolean>`

Returns a promise that fulfils with a `boolean`, indicating whether SMS is available on this device.

Example

```
const isAvailable = await SMS.isAvailableAsync();
if (isAvailable) {
  // do your SMS stuff here
} else {
  // misfortune... there's no SMS available on this device
}
```

### `SMS.sendSMSAsync(addresses, message, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| addresses | `string | string` |
An array of addresses (phone numbers) or single address passed as strings. Those would appear as recipients of the prepared message.

 |
| message | `string` |

Message to be sent.

 |
| options(optional) | `[SMSOptions](#smsoptions)` |

A `SMSOptions` object defining additional SMS configuration options.

 |

Opens the default UI/app for sending SMS messages with prefilled addresses and message.

Returns:

`[Promise<[SMSResponse](#smsresponse)>`

Returns a Promise that fulfils with the SMS action is invoked by the user, with corresponding result:

*   If the user cancelled the SMS sending process: `{ result: 'cancelled' }`.
*   If the user has sent/scheduled message for sending: `{ result: 'sent' }`.
*   If the status of the SMS message cannot be determined: `{ result: 'unknown' }`.

Android does not provide information about the status of the SMS message, so on Android devices the Promise will always resolve with `{ result: 'unknown' }`.

> Note: The only feedback collected by this module is whether any message has been sent. That means we do not check actual content of message nor recipients list.

Example

```
const { result } = await SMS.sendSMSAsync(
  ['0123456789', '9876543210'],
  'My sample HelloWorld message',
  {
```
attachments: {
  uri: 'path/myfile.png',
  mimeType: 'image/png',
  filename: 'myfile.png',
},
```
  }
);
```

## Types

### `SMSAttachment`

An object that is used to describe an attachment that is included with a SMS message.

| Property | Type | Description |
| --- | --- | --- |
| filename | `string` |
The filename of the attachment.

 |
| mimeType | `string` |

The mime type of the attachment such as `image/png`.

 |
| uri | `string` |

The content URI of the attachment. The URI needs be a content URI so that it can be accessed by other applications outside of Expo. See [FileSystem.getContentUriAsync).

 |

### `SMSOptions`

| Property | Type | Description |
| --- | --- | --- |
| attachments(optional) | `[SMSAttachment](#smsattachment) | [SMSAttachment](#smsattachment)` |
\-

 |

### `SMSResponse`

| Property | Type | Description |
| --- | --- | --- |
| result | `'unknown' | 'sent' | 'cancelled'` |
Status of SMS action invoked by the user.

 |

---

# Expo Speech

`expo-speech` provides an API that allows you to utilize Text-to-speech functionality in your app.

> On iOS physical devices, `expo-speech` won't produce sound if the device is in silent mode. Make sure silent mode is turned off.

## Installation

`npx expo install expo-speech`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Speech

```
import { View, StyleSheet, Button } from 'react-native';
import * as Speech from 'expo-speech';

export default function App() {
  const speak = () => {
```
const thingToSay = '1';
Speech.speak(thingToSay);
```
  };

  return (
```
<View style={styles.container}>
  <Button title="Press to hear some words" onPress={speak} />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
backgroundColor: '#ecf0f1',
padding: 8,
```
  },
});
```

## API

```
import * as Speech from 'expo-speech';
```

## Constants

### `Speech.maxSpeechInputLength`

Type: `number`

Maximum possible text length acceptable by `Speech.speak()` method. It is platform-dependent. On iOS, this returns `Number.MAX_VALUE`.

## Methods

### `Speech.getAvailableVoicesAsync()`

Returns list of all available voices.

Returns:

`[Promise<[Voice](#voice)>`

List of `Voice` objects.

### `Speech.isSpeakingAsync()`

Determine whether the Text-to-speech utility is currently speaking. Will return `true` if speaker is paused.

Returns:

`[Promise<boolean>`

Returns a Promise that fulfils with a boolean, `true` if speaking, `false` if not.

### `Speech.pause()`

Pauses current speech. This method is not available on Android.

Returns:

`[Promise<void>`

### `Speech.resume()`

Resumes speaking previously paused speech or does nothing if there's none. This method is not available on Android.

Returns:

`[Promise<void>`

### `Speech.speak(text, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| text | `string` |
The text to be spoken. Cannot be longer than `Speech.maxSpeechInputLength`.

 |
| options(optional) | `[SpeechOptions](#speechoptions)` |

A `SpeechOptions` object.

Default:`{}`

 |

Speak out loud the text given options. Calling this when another text is being spoken adds an utterance to queue.

Returns:

`void`

### `Speech.stop()`

Interrupts current speech and deletes all in queue.

Returns:

`[Promise<void>`

## Types

### `SpeechEventCallback(this, ev)`

| Parameter | Type |
| --- | --- |
| this | `[SpeechSynthesisUtterance` |
| ev | `[SpeechSynthesisEvent` |

Returns:

`any`

### `SpeechOptions`

| Property | Type | Description |
| --- | --- | --- |
| \_voiceIndex(optional) | `number` |
\-

 |
| language(optional) | `string` |

The code of a language that should be used to read the `text`, refer to IETF BCP 47 to see valid codes.

 |
| onBoundary(optional) | `[NativeBoundaryEventCallback](#nativeboundaryeventcallback) | [SpeechEventCallback](#speecheventcallback) | null` |

A callback that is invoked when the spoken utterance reaches a word.

 |
| onDone(optional) | `() => void | [SpeechEventCallback](#speecheventcallback)` |

A callback that is invoked when speaking finishes.

 |
| onError(optional) | `(error: [Error) => void | [SpeechEventCallback](#speecheventcallback)` |

Only for: Android, iOS

A callback that is invoked when an error occurred while speaking.

 |
| onMark(optional) | `[SpeechEventCallback](#speecheventcallback) | null` |

\-

 |
| onPause(optional) | `[SpeechEventCallback](#speecheventcallback) | null` |

\-

 |
| onResume(optional) | `[SpeechEventCallback](#speecheventcallback) | null` |

\-

 |
| onStart(optional) | `() => void | [SpeechEventCallback](#speecheventcallback)` |

A callback that is invoked when speaking starts.

 |
| onStopped(optional) | `() => void | [SpeechEventCallback](#speecheventcallback)` |

A callback that is invoked when speaking is stopped by calling `Speech.stop()`.

 |
| pitch(optional) | `number` |

Pitch of the voice to speak `text`. `1.0` is the normal pitch.

 |
| rate(optional) | `number` |

Rate of the voice to speak `text`. `1.0` is the normal rate.

 |
| voice(optional) | `string` |

Voice identifier.

 |
| volume(optional) | `number` |

Only for: Web

Volume of the voice to speak `text`. A number between `0.0` (muted) and `1.0` (max volume)

Default:`1.0`

 |

### `Voice`

Object describing the available voices on the device.

| Property | Type | Description |
| --- | --- | --- |
| identifier | `string` |
Voice unique identifier.

 |
| language | `string` |

Voice language.

 |
| name | `string` |

Voice name.

 |
| quality | `[VoiceQuality](#voicequality)` |

Voice quality.

 |

### `WebVoice`

Type: `[Voice](#voice)` extended by:

| Property | Type | Description |
| --- | --- | --- |
| isDefault | `boolean` |
\-

 |
| localService | `boolean` |

\-

 |
| name | `string` |

\-

 |
| voiceURI | `string` |

\-

 |

## Enums

### `VoiceQuality`

Enum representing the voice quality.

#### `Default`

`VoiceQuality.Default ＝ "Default"`

#### `Enhanced`

`VoiceQuality.Enhanced ＝ "Enhanced"`

---

# Expo SplashScreen

The `SplashScreen` module from the `expo-splash-screen` library is used to tell the splash screen to remain visible until it has been explicitly told to hide. This is useful to do tasks that will happen behind the scenes such as making API calls, pre-loading fonts, animating the splash screen and so on.

Also, see the guide on [creating a splash screen image, or [quickly generate an icon and splash screen using your browser.

## Installation

`npx expo install expo-splash-screen`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

This example shows how to keep the splash screen visible while loading app resources and then hide the splash screen when the app has rendered some initial content.

App.js

```
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
```
async function prepare() {
  try {
    // Pre-load fonts, make any API calls you need to do here
    await Font.loadAsync(Entypo.font);
    // Artificially delay for two seconds to simulate a slow loading
    // experience. Remove this if you copy and paste the code!
    await new Promise(resolve => setTimeout(resolve, 2000));
  } catch (e) {
    console.warn(e);
  } finally {
    // Tell the application to render
    setAppIsReady(true);
  }
}
```
prepare();
```
  }, );

  const onLayoutRootView = useCallback(async () => {
```
if (appIsReady) {
  // This tells the splash screen to hide immediately! If we call this after
  // `setAppIsReady`, then we may see a blank screen while the app is
  // loading its initial state and rendering its first pixels. So instead,
  // we hide the splash screen once we know the root view has already
  // performed layout.
  await SplashScreen.hideAsync();
}
```
  }, [appIsReady]);

  if (!appIsReady) {
```
return null;
```
  }

  return (
```
<View
  style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
  onLayout={onLayoutRootView}>
  <Text>SplashScreen Demo! 👋</Text>
  <Entypo name="rocket" size={30} />
</View>
```
  );
}
```

## Configuration

To configure `expo-splash-screen`, see the following [app config properties.

*   [`splash`
*   [`android.splash`
*   [`ios.splash`

Are you using this library in an existing React Native app?

See how to configure the native projects in the [installation instructions in the `expo-splash-screen` repository.

### Animating the splash screen

See the [with-splash-screen example on how to apply any arbitrary animations to your splash screen, such as a fade out. You can initialize a new project from this example by running `npx create-expo-app --example with-splash-screen`.

## API

```
import * as SplashScreen from 'expo-splash-screen';
```

## Methods

### `SplashScreen.hideAsync()`

Hides the native splash screen immediately. Be careful to ensure that your app has content ready to display when you hide the splash screen, or you may see a blank screen briefly. See the ["Usage"](#usage) section for an example.

Returns:

`[Promise<boolean>`

### `SplashScreen.preventAutoHideAsync()`

Makes the native splash screen (configured in `app.json`) remain visible until `hideAsync` is called.

> Important note: It is recommended to call this in global scope without awaiting, rather than inside React components or hooks, because otherwise this might be called too late, when the splash screen is already hidden.

Returns:

`[Promise<boolean>`

Example

```
import * as SplashScreen from 'expo-splash-screen';

SplashScreen.preventAutoHideAsync();

export default function App() {
 // ...
}
```

---

# Expo SQLite (legacy)




A library that provides access to a database that can be queried through a WebSQL-like API.



4.0.6

`expo-sqlite` gives your app access to a database that can be queried through a [WebSQL\-like API. The database is persisted across restarts of your app.

## Installation

`npx expo install expo-sqlite`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

To-do list app

An example to-do list app is available that uses this module for storage.

### Importing an existing database

To open a new SQLite database using an existing `.db` file you already have, follow the steps below:

1

Install `expo-file-system` and `expo-asset` modules:

`npx expo install expo-file-system expo-asset`

2

Create a metro.config.js file at the root of your project with the following contents to include [extra asset extensions:

```
const { getDefaultConfig } = require('expo/metro-config');

const defaultConfig = getDefaultConfig(__dirname);

defaultConfig.resolver.assetExts.push('db');

module.exports = defaultConfig;
```

3

Use the following function (or similar) to open your database:

```
import * as FileSystem from 'expo-file-system';
import * as SQLite from 'expo-sqlite/legacy';
import { Asset } from 'expo-asset';

async function openDatabase(pathToDatabaseFile: string): Promise<SQLite.SQLiteDatabase> {
  if (!(await FileSystem.getInfoAsync(FileSystem.documentDirectory + 'SQLite')).exists) {
```
await FileSystem.makeDirectoryAsync(FileSystem.documentDirectory + 'SQLite');
```
  }
  const asset = await Asset.fromModule(require(pathToDatabaseFile)).downloadAsync();
  await FileSystem.copyAsync({
```
from: asset.localUri,
to: FileSystem.documentDirectory + 'SQLite/myDatabaseName.db',
```
  });
  return SQLite.openDatabase('myDatabaseName.db');
}
```

### Executing statements with an async transaction

```
import * as SQLite from 'expo-sqlite/legacy';

const db = SQLite.openDatabase('dbName', version);

const readOnly = true;
await db.transactionAsync(async tx => {
  const result = await tx.executeSqlAsync('SELECT COUNT(*) FROM USERS', );
  console.log('Count:', result.rows[0]['COUNT(*)']);
}, readOnly);
```

### Executing statements outside of a transaction

> You should use this kind of execution only when it is necessary. For instance, when code is a no-op within transactions. Example: `PRAGMA foreign_keys = ON;`.

```
import * as SQLite from 'expo-sqlite/legacy';

const db = SQLite.openDatabase('dbName', version);

await db.execAsync([{ sql: 'PRAGMA foreign_keys = ON;', args:  }], false);
console.log('Foreign keys turned on');
```

## API

```
import * as SQLite from 'expo-sqlite/legacy';
```

## Classes

### `ExpoSQLTransactionAsync`

Type: Class implements `[SQLTransactionAsync](#sqltransactionasync)`

Internal data structure for the async transaction API.

### `SQLError`

SQLError Properties

### `code`

Type: `number`

### `message`

Type: `string`

### `CONSTRAINT_ERR`

Type: `number`

### `DATABASE_ERR`

Type: `number`

### `QUOTA_ERR`

Type: `number`

### `SYNTAX_ERR`

Type: `number`

### `TIMEOUT_ERR`

Type: `number`

### `TOO_LARGE_ERR`

Type: `number`

### `UNKNOWN_ERR`

Type: `number`

### `VERSION_ERR`

Type: `number`

### `SQLiteDatabase`

The database returned by `openDatabase()`

SQLiteDatabase Properties

> Deprecated Use `closeAsync()` instead.

### `close`

Type: `() => [Promise<void>`

### `version`

Type: `string`

SQLiteDatabase Methods

### `closeAsync()`

Close the database.

Returns:

`[Promise<void>`

### `closeSync()`

Synchronously closes the database.

Returns:

`void`

### `deleteAsync()`

Delete the database file.

> The database has to be closed prior to deletion.

Returns:

`[Promise<void>`

### `exec(queries, readOnly, callback)`

| Parameter | Type |
| --- | --- |
| queries | `[Query](#query)` |
| readOnly | `boolean` |
| callback | `[SQLiteCallback](#sqlitecallback)` |

Executes the SQL statement and returns a callback resolving with the result.

Returns:

`void`

### `execAsync(queries, readOnly)`

| Parameter | Type |
| --- | --- |
| queries | `[Query](#query)` |
| readOnly | `boolean` |

Executes the SQL statement and returns a Promise resolving with the result.

Returns:

`[Promise<([ResultSetError](#resultseterror) | [ResultSet](#resultset))>`

### `execRawQuery(queries, readOnly, callback)`

| Parameter | Type |
| --- | --- |
| queries | `[Query](#query)` |
| readOnly | `boolean` |
| callback | `[SQLiteCallback](#sqlitecallback)` |

Due to limitations on `Android` this function is provided to allow raw SQL queries to be executed on the database. This will be less efficient than using the `exec` function, please use only when necessary.

Returns:

`void`

### `readTransaction(callback, errorCallback, successCallback)`

| Parameter | Type |
| --- | --- |
| callback | `[SQLTransactionCallback](#sqltransactioncallback)` |
| errorCallback(optional) | `[SQLTransactionErrorCallback](#sqltransactionerrorcallback)` |
| successCallback(optional) | `() => void` |

Returns:

`void`

### `transaction(callback, errorCallback, successCallback)`

| Parameter | Type | Description |
| --- | --- | --- |
| callback | `[SQLTransactionCallback](#sqltransactioncallback)` |
A function representing the transaction to perform. Takes a Transaction (see below) as its only parameter, on which it can add SQL statements to execute.

 |
| errorCallback(optional) | `[SQLTransactionErrorCallback](#sqltransactionerrorcallback)` |

Called if an error occurred processing this transaction. Takes a single parameter describing the error.

 |
| successCallback(optional) | `() => void` |

Called when the transaction has completed executing on the database.

 |

Execute a database transaction.

Returns:

`void`

### `transactionAsync(asyncCallback, readOnly)`

| Parameter | Type | Description |
| --- | --- | --- |
| asyncCallback | `[SQLTransactionAsyncCallback](#sqltransactionasynccallback)` |
A `SQLTransactionAsyncCallback` function that can perform SQL statements in a transaction.

 |
| readOnly(optional) | `boolean` |

true if all the SQL statements in the callback are read only.

Default:`false`

 |

Creates a new transaction with Promise support.

Returns:

`[Promise<void>`

## Methods

### `SQLite.openDatabase(name, version, description, size, callback)`

| Parameter | Type | Description |
| --- | --- | --- |
| name | `string` |
Name of the database file to open.

 |
| version(optional) | `string` |

Default:`'1.0'`

 |
| description(optional) | `string` |

Default:`name`

 |
| size(optional) | `number` |

Default:`1`

 |
| callback(optional) | `(db: [SQLiteDatabase](#sqlitedatabase)) => void` |

\-

 |

Open a database, creating it if it doesn't exist, and return a `Database` object. On disk, the database will be created under the app's [documents directory, i.e. `${FileSystem.documentDirectory}/SQLite/${name}`.

> The `version`, `description` and `size` arguments are ignored, but are accepted by the function for compatibility with the WebSQL specification.

Returns:

`[SQLiteDatabase](#sqlitedatabase)`

## Interfaces

### `Database`

`Database` objects are returned by calls to `SQLite.openDatabase()`. Such an object represents a connection to a database on your device.

| Property | Type | Description |
| --- | --- | --- |
| version | `string` |
\-

 |

Database Methods

### `readTransaction(callback, errorCallback, successCallback)`

| Parameter | Type |
| --- | --- |
| callback | `[SQLTransactionCallback](#sqltransactioncallback)` |
| errorCallback(optional) | `[SQLTransactionErrorCallback](#sqltransactionerrorcallback)` |
| successCallback(optional) | `() => void` |

Returns:

`void`

### `transaction(callback, errorCallback, successCallback)`

| Parameter | Type | Description |
| --- | --- | --- |
| callback | `[SQLTransactionCallback](#sqltransactioncallback)` |
A function representing the transaction to perform. Takes a Transaction (see below) as its only parameter, on which it can add SQL statements to execute.

 |
| errorCallback(optional) | `[SQLTransactionErrorCallback](#sqltransactionerrorcallback)` |

Called if an error occurred processing this transaction. Takes a single parameter describing the error.

 |
| successCallback(optional) | `() => void` |

Called when the transaction has completed executing on the database.

 |

Execute a database transaction.

Returns:

`void`

### `ResultSet`

`ResultSet` objects are returned through second parameter of the `success` callback for the `tx.executeSql()` method on a `SQLTransaction` (see above).

| Property | Type | Description |
| --- | --- | --- |
| insertId(optional) | `number` |
The row ID of the row that the SQL statement inserted into the database, if a row was inserted.

 |
| rows | `{ [column]: any }` |

\-

 |
| rowsAffected | `number` |

The number of rows that were changed by the SQL statement.

 |

### `ResultSetError`

| Property | Type | Description |
| --- | --- | --- |
| error | `[Error` |
\-

 |

### `SQLResultSetRowList`

| Property | Type | Description |
| --- | --- | --- |
| \_array | `any` |
The actual array of rows returned by the query. Can be used directly instead of getting rows through rows.item().

 |
| length | `number` |

The number of rows returned by the query.

 |

SQLResultSetRowList Methods

### `item(index)`

| Parameter | Type | Description |
| --- | --- | --- |
| index | `number` |
Index of row to get.

 |

Returns the row with the given `index`. If there is no such row, returns `null`.

Returns:

`any`

### `SQLTransaction`

A `SQLTransaction` object is passed in as a parameter to the `callback` parameter for the `db.transaction()` method on a `Database` (see above). It allows enqueuing SQL statements to perform in a database transaction.

SQLTransaction Methods

### `executeSql(sqlStatement, args, callback, errorCallback)`

| Parameter | Type | Description |
| --- | --- | --- |
| sqlStatement | `string` |
A string containing a database query to execute expressed as SQL. The string may contain `?` placeholders, with values to be substituted listed in the `arguments` parameter.

 |
| args(optional) | `[SQLStatementArg](#sqlstatementarg)` |

An array of values (numbers, strings or nulls) to substitute for `?` placeholders in the SQL statement.

 |
| callback(optional) | `[SQLStatementCallback](#sqlstatementcallback)` |

Called when the query is successfully completed during the transaction. Takes two parameters: the transaction itself, and a `ResultSet` object (see below) with the results of the query.

 |
| errorCallback(optional) | `[SQLStatementErrorCallback](#sqlstatementerrorcallback)` |

Called if an error occurred executing this particular query in the transaction. Takes two parameters: the transaction itself, and the error object.

 |

Enqueue a SQL statement to execute in the transaction. Authors are strongly recommended to make use of the `?` placeholder feature of the method to avoid against SQL injection attacks, and to never construct SQL statements on the fly.

Returns:

`void`

### `SQLTransactionAsync`

A transaction object to perform SQL statements in async mode.

SQLTransactionAsync Methods

### `executeSqlAsync(sqlStatement, args)`

| Parameter | Type |
| --- | --- |
| sqlStatement | `string` |
| args(optional) | `[SQLStatementArg](#sqlstatementarg)` |

Executes a SQL statement in async mode.

Returns:

`[Promise<[ResultSet](#resultset)>`

> Deprecated Use `SQLiteDatabase` instead.

### `WebSQLDatabase`

Extends: `[Database](#database)`

WebSQLDatabase Methods

### `closeAsync()`

Close the database.

Returns:

`void`

### `deleteAsync()`

Delete the database file.

> The database has to be closed prior to deletion.

Returns:

`[Promise<void>`

### `exec(queries, readOnly, callback)`

| Parameter | Type |
| --- | --- |
| queries | `[Query](#query)` |
| readOnly | `boolean` |
| callback | `[SQLiteCallback](#sqlitecallback)` |

Returns:

`void`

### `Window`

| Property | Type | Description |
| --- | --- | --- |
| openDatabase(optional) | `(name: string, version: string, displayName: string, estimatedSize: number, creationCallback: [DatabaseCallback](#databasecallback)) => [Database](#database)` |
\-

 |

## Types

### `DatabaseCallback(database)`

| Parameter | Type |
| --- | --- |
| database | `[Database](#database)` |

Returns:

`void`

### `Query`

| Property | Type | Description |
| --- | --- | --- |
| args | `unknown` |
\-

 |
| sql | `string` |

\-

 |

### `SQLResultSet`

| Property | Type | Description |
| --- | --- | --- |
| insertId(optional) | `number` |
The row ID of the row that the SQL statement inserted into the database, if a row was inserted.

 |
| rows | `[SQLResultSetRowList](#sqlresultsetrowlist)` |

\-

 |
| rowsAffected | `number` |

The number of rows that were changed by the SQL statement.

 |

### `SQLStatementArg`

Literal Type: `union`

Acceptable values are: `string` | `number` | `null`

### `SQLStatementCallback(transaction, resultSet)`

| Parameter | Type |
| --- | --- |
| transaction | `[SQLTransaction](#sqltransaction)` |
| resultSet | `[SQLResultSet](#sqlresultset)` |

Returns:

`void`

### `SQLStatementErrorCallback(transaction, error)`

| Parameter | Type |
| --- | --- |
| transaction | `[SQLTransaction](#sqltransaction)` |
| error | `[SQLError](#sqlerror)` |

Returns:

`boolean`

### `SQLTransactionAsyncCallback(transaction)`

A transaction callback with given `SQLTransactionAsync` object to perform SQL statements in async mode.

| Parameter | Type |
| --- | --- |
| transaction | `[SQLTransactionAsync](#sqltransactionasync)` |

Returns:

`[Promise<void>`

### `SQLTransactionCallback(transaction)`

| Parameter | Type |
| --- | --- |
| transaction | `[SQLTransaction](#sqltransaction)` |

Returns:

`void`

### `SQLTransactionErrorCallback(error)`

| Parameter | Type |
| --- | --- |
| error | `[SQLError](#sqlerror)` |

Returns:

`void`

### `SQLiteCallback(error, resultSet)`

| Parameter | Type |
| --- | --- |
| error(optional) | `[Error | null` |
| resultSet(optional) | `([ResultSetError](#resultseterror) | [ResultSet](#resultset))` |

Returns:

`void`

---

# Expo SQLite




A library that provides access to a database that can be queried through a SQLite API.



4.0.6

`expo-sqlite` gives your app access to a database that can be queried through a SQLite API. The database is persisted across restarts of your app.

## Installation

`npx expo install expo-sqlite`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Import the module from `expo-sqlite`.

Import the module from expo-sqlite

```
import * as SQLite from 'expo-sqlite';
```

### Basic CRUD operations

Basic CRUD operations

```
const db = await SQLite.openDatabaseAsync('databaseName');

// `execAsync()` is useful for bulk queries when you want to execute altogether.
// Note that `execAsync()` does not escape parameters and may lead to SQL injection.
await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

// `runAsync()` is useful when you want to execute some write operations.
const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object

// `getFirstAsync()` is useful when you want to get a single row from the database.
const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

// `getAllAsync()` is useful when you want to get all results as an array of objects.
const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

// `getEachAsync()` is useful when you want to iterate SQLite query cursor.
for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}
```

### Prepared statements

Prepared statement allows you compile your SQL query once and execute it multiple times with different parameters. You can get a prepared statement by calling [`prepareAsync()` or [`prepareSync()` method on a database instance. The prepared statement can fulfill CRUD operations by calling [`executeAsync()` or [`executeSync()` method.

> Note: Remember to call [`finalizeAsync()` or [`finalizeSync()` method to release the prepared statement after you finish using the statement. `try-finally` block is recommended to ensure the prepared statement is finalized.

Prepared statements

```
const statement = await db.prepareAsync(
  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'
);
try {
  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });
  console.log('bbb and 101:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });
  console.log('ccc and 102:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });
  console.log('ddd and 103:', result.lastInsertRowId, result.changes);
} finally {
  await statement.finalizeAsync();
}

const statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');
try {
  const result = await statement2.executeAsync<{ value: string; intValue: number }>({
```
$intValue: 100,
```
  });

  // `getFirstAsync()` is useful when you want to get a single row from the database.
  const firstRow = await result.getFirstAsync();
  console.log(firstRow.id, firstRow.value, firstRow.intValue);

  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.
  await result.resetAsync();

  // `getAllAsync()` is useful when you want to get all results as an array of objects.
  const allRows = await result.getAllAsync();
  for (const row of allRows) {
```
console.log(row.value, row.intValue);
```
  }

  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.
  await result.resetAsync();

  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.
  for await (const row of result) {
```
console.log(row.value, row.intValue);
```
  }
} finally {
  await statement2.finalizeAsync();
}
```

### `useSQLiteContext()` hook

useSQLiteContext() hook

```
import { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';
import { useEffect, useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
```
<View style={styles.container}>
  <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded}>
    <Header />
    <Content />
  </SQLiteProvider>
</View>
```
  );
}

export function Header() {
  const db = useSQLiteContext();
  const [version, setVersion] = useState('');
  useEffect(() => {
```
async function setup() {
  const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(
    'SELECT sqlite_version()'
  );
  setVersion(result['sqlite_version()']);
}
setup();
```
  }, );
  return (
```
<View style={styles.headerContainer}>
  <Text style={styles.headerText}>SQLite version: {version}</Text>
</View>
```
  );
}

interface Todo {
  value: string;
  intValue: number;
}

export function Content() {
  const db = useSQLiteContext();
  const [todos, setTodos] = useState<Todo>();

  useEffect(() => {
```
async function setup() {
  const result = await db.getAllAsync<Todo>('SELECT * FROM todos');
  setTodos(result);
}
setup();
```
  }, );

  return (
```
<View style={styles.contentContainer}>
  {todos.map((todo, index) => (
    <View style={styles.todoItemContainer} key={index}>
      <Text>{`${todo.intValue} - ${todo.value}`}</Text>
    </View>
  ))}
</View>
```
  );
}

async function migrateDbIfNeeded(db: SQLiteDatabase) {
  const DATABASE_VERSION = 1;
  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(
```
'PRAGMA user_version'
```
  );
  if (currentDbVersion >= DATABASE_VERSION) {
```
return;
```
  }
  if (currentDbVersion === 0) {
```
await db.execAsync(`
```
PRAGMA journal_mode = 'wal';
CREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
`);
```
await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);
await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);
currentDbVersion = 1;
```
  }
  // if (currentDbVersion === 1) {
  //   Add more migrations
  // }
  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);
}

const styles = StyleSheet.create({
  // Your styles...
});
```

### `useSQLiteContext()` hook with `React.Suspense`

As with the [`useSQLiteContext()` hook, you can also integrate the [`SQLiteProvider` with [`React.Suspense` to show a fallback component until the database is ready. To enable the integration, pass the `useSuspense` prop to the `SQLiteProvider` component.

useSQLiteContext() hook with React.Suspense

```
import { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';
import { Suspense } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
```
<View style={styles.container}>
  <Suspense fallback={<Fallback />}>
    <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded} useSuspense>
      <Header />
      <Content />
    </SQLiteProvider>
  </Suspense>
</View>
```
  );
}
```

### Executing queries within an async transaction

Executing queries within an async transaction

```
const db = await SQLite.openDatabaseAsync('databaseName');

await db.withTransactionAsync(async () => {
  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');
  console.log('Count:', result.rows[0]['COUNT(*)']);
});
```

Due to the nature of async/await, any query that runs while the transaction is active will be included in the transaction. This includes query statements that are outside of the scope function passed to `withTransactionAsync()` and may be surprising behavior. For example, the following test case runs queries inside and outside of a scope function passed to `withTransactionAsync()`. However, all of the queries will run within the actual SQL transaction because the second `UPDATE` query runs before the transaction finishes.

```
Promise.all(  // 1. A new transaction begins
  db.withTransactionAsync(async () => {
```
// 2. The value "first" is inserted into the test table and we wait 2
//    seconds
await db.execAsync('INSERT INTO test (data) VALUES ("first")');
await sleep(2000);
```
// 4. Two seconds in, we read the latest data from the table
const row = await db.getFirstAsync<{ data: string }>('SELECT data FROM test');
```
// ❌ The data in the table will be "second" and this expectation will fail.
//    Additionally, this expectation will throw an error and roll back the
//    transaction, including the `UPDATE` query below since it ran within
//    the transaction.
expect(row.data).toBe('first');
```
  }),
  // 3. One second in, the data in the test table is updated to be "second".
  //    This `UPDATE` query runs in the transaction even though its code is
  //    outside of it because the transaction happens to be active at the time
  //    this query runs.
  sleep(1000).then(async () => db.execAsync('UPDATE test SET data = "second"')),
]);
```

The [`withExclusiveTransactionAsync()` function addresses this. Only queries that run within the scope function passed to `withExclusiveTransactionAsync()` will run within the actual SQL transaction.

### Executing PRAGMA queries

Executing PRAGMA queries

```
const db = await SQLite.openDatabaseAsync('databaseName');
await db.execAsync('PRAGMA journal_mode = WAL');
await db.execAsync('PRAGMA foreign_keys = ON');
```

> Tip: Enable [WAL journal mode when you create a new database to improve performance in general.

### Import an existing database

To open a new SQLite database using an existing .db file you already have, you can use the [`SQLiteProvider` with [`assetSource`.

useSQLiteContext() with existing database

```
import { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
```
<View style={styles.container}>
  <SQLiteProvider databaseName="test.db" assetSource={{ assetId: require('./assets/test.db') }}>
    <Header />
    <Content />
  </SQLiteProvider>
</View>
```
  );
}
```

### Passing binary data

Use [`Uint8Array` to pass binary data to the database:

Passing binary data

```
await db.execAsync(`
DROP TABLE IF EXISTS blobs;
CREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);
`);

const blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);
await db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);

const row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');
expect(row.data).toEqual(blob);
```

### Browse an on-device database

You can inspect a database, execute queries against it, and explore data with the [`drizzle-studio-expo` dev tools plugin. This plugin enables you to launch [Drizzle Studio, connected to a database in your app, directly from Expo CLI. This plugin can be used with any `expo-sqlite` configuration. It does not require that you use [Drizzle ORM in your app. [Learn how to install and use the plugin.

## Third-party library integrations

The `expo-sqlite` library is designed to be a solid SQLite foundation. It enables broader integrations with third-party libraries for more advanced higher-level features. Here are some of the libraries that you can use with `expo-sqlite`.

### Drizzle ORM

[Drizzle is a ["headless TypeScript ORM with a head". It runs on Node.js, Bun, Deno, and React Native. It also has a CLI companion called [`drizzle-kit` for generating SQL migrations.

Check out the [Drizzle ORM documentation and the [`expo-sqlite` integration guide for more details.

### Knex.js

[Knex.js is a SQL query builder that is ["flexible, portable, and fun to use!"

Check out the [`expo-sqlite` integration guide for more details.

## API

### Cheatsheet for the common API

The following table summarizes the common API for [`SQLiteDatabase` and [`SQLiteStatement` classes:

| [`SQLiteDatabase` methods | [`SQLiteStatement` methods | Description | Use Case |
| --- | --- | --- | --- |
| [`runAsync()` | [`executeAsync()` | Executes a SQL query, returning information on the changes made. | Ideal for SQL write operations such as `INSERT`, `UPDATE`, `DELETE`. |
| [`getFirstAsync()` | [`executeAsync()` + [`getFirstAsync()` | Retrieves the first row from the query result. | Suitable for fetching a single row from the database. For example: `getFirstAsync('SELECT * FROM Users WHERE id = ?', userId)`. |
| [`getAllAsync()` | [`executeAsync()` + [`getFirstAsync()` | Fetches all query results at once. | Best suited for scenarios with smaller result sets, such as queries with a LIMIT clause, like `SELECT * FROM Table LIMIT 100`, where you intend to retrieve all results in a single batch. |
| [`getEachAsync()` | [`executeAsync()` + `for-await-of` async iterator | Provides an iterator for result set traversal. This method fetches one row at a time from the database, potentially reducing memory usage compared to `getAllAsync()`. | Recommended for handling large result sets incrementally, such as with infinite scrolling implementations. |

## Component

### `SQLiteProvider`

Type: `React.[Element<[SQLiteProviderProps](#sqliteproviderprops)>`

Context.Provider component that provides a SQLite database to all children. All descendants of this component will be able to access the database using the `useSQLiteContext` hook.

SQLiteProviderProps

### `assetSource`

Optional Type: `[SQLiteProviderAssetSource](#sqliteproviderassetsource)`

Import a bundled database file from the specified asset module.

Example

```
assetSource={{ assetId: require('./assets/db.db') }}
```

### `children`

Type: `[ReactNode`

The children to render.

### `databaseName`

Type: `string`

The name of the database file to open.

### `onError`

Optional Type: `(error: [Error) => void` Default: `rethrow the error`

Handle errors from SQLiteProvider.

### `onInit`

Optional Type: `(db: [SQLiteDatabase](#sqlitedatabase)) => [Promise<void>`

A custom initialization handler to run before rendering the children. You can use this to run database migrations or other setup tasks.

### `options`

Optional Type: `[SQLiteOpenOptions](#sqliteopenoptions)`

Open options.

### `useSuspense`

Optional Type: `boolean` Default: `false`

Enable [`React.Suspense` integration.

Example

```
export default function App() {
  return (
```
<Suspense fallback={<Text>Loading...</Text>}>
  <SQLiteProvider databaseName="test.db" useSuspense={true}>
    <Main />
  </SQLiteProvider>
</Suspense>
```
  );
}
```

## Hooks

### `useSQLiteContext()`

A global hook for accessing the SQLite database across components. This hook should only be used within a `<SQLiteProvider>` component.

Returns:

`[SQLiteDatabase](#sqlitedatabase)`

Example

```
export default function App() {
  return (
```
<SQLiteProvider databaseName="test.db">
  <Main />
</SQLiteProvider>
```
  );
}

export function Main() {
  const db = useSQLiteContext();
  console.log('sqlite version', db.getFirstSync('SELECT sqlite_version()'));
  return <View />
}
```

## Classes

### `SQLiteDatabase`

A SQLite database.

SQLiteDatabase Properties

### `databaseName`

Read Only Type: `string`

### `options`

Read Only Type: `[SQLiteOpenOptions](#sqliteopenoptions)`

SQLiteDatabase Methods

### `closeAsync()`

Close the database.

Returns:

`[Promise<void>`

### `closeSync()`

Close the database.

Returns:

`void`

### `execAsync(source)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing all the SQL queries.

 |

Execute all SQL queries in the supplied string.

> Note: The queries are not escaped for you! Be careful when constructing your queries.

Returns:

`[Promise<void>`

### `execSync(source)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing all the SQL queries.

 |

Execute all SQL queries in the supplied string.

> Note: The queries are not escaped for you! Be careful when constructing your queries.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`void`

### `getAllAsync<T>(source, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |
| params | `[SQLiteBindParams](#sqlitebindparams)` |

The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

A convenience wrapper around `SQLiteDatabase.prepareAsync()`, `SQLiteStatement.executeAsync()`, `SQLiteExecuteAsyncResult.getAllAsync()`, and `SQLiteStatement.finalizeAsync()`.

Returns:

`[Promise<T>`

Example

```
// For unnamed parameters, you pass values in an array.
db.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', [1, 'Hello']);

// For unnamed parameters, you pass values in variadic arguments.
db.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', 1, 'Hello');

// For named parameters, you should pass values in object.
db.getAllAsync('SELECT * FROM test WHERE intValue = $intValue AND name = $name', { $intValue: 1, $name: 'Hello' });
```

### `getAllSync<T>(source, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |
| params | `[SQLiteBindParams](#sqlitebindparams)` |

The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

A convenience wrapper around `SQLiteDatabase.prepareSync()`, `SQLiteStatement.executeSync()`, `SQLiteExecuteSyncResult.getAllSync()`, and `SQLiteStatement.finalizeSync()`.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`T`

### `getEachAsync<T>(source, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |
| params | `[SQLiteBindParams](#sqlitebindparams)` |

The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

A convenience wrapper around `SQLiteDatabase.prepareAsync()`, `SQLiteStatement.executeAsync()`, `SQLiteExecuteAsyncResult` `AsyncIterator`, and `SQLiteStatement.finalizeAsync()`.

Returns:

`[AsyncIterableIterator<T>`

Rather than returning Promise, this function returns an [`AsyncIterableIterator`. You can use `for await...of` to iterate over the rows from the SQLite query result.

### `getEachSync<T>(source, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |
| params | `[SQLiteBindParams](#sqlitebindparams)` |

The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

A convenience wrapper around `SQLiteDatabase.prepareSync()`, `SQLiteStatement.executeSync()`, `SQLiteExecuteSyncResult` `Iterator`, and `SQLiteStatement.finalizeSync()`.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`[IterableIterator<T>`

This function returns an [`IterableIterator`. You can use `for...of` to iterate over the rows from the SQLite query result.

### `getFirstAsync<T>(source, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |
| params | `[SQLiteBindParams](#sqlitebindparams)` |

The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

A convenience wrapper around `SQLiteDatabase.prepareAsync()`, `SQLiteStatement.executeAsync()`, `SQLiteExecuteAsyncResult.getFirstAsync()`, and `SQLiteStatement.finalizeAsync()`.

Returns:

`[Promise<null | T>`

### `getFirstSync<T>(source, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |
| params | `[SQLiteBindParams](#sqlitebindparams)` |

The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

A convenience wrapper around `SQLiteDatabase.prepareSync()`, `SQLiteStatement.executeSync()`, `SQLiteExecuteSyncResult.getFirstSync()`, and `SQLiteStatement.finalizeSync()`.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`null | T`

### `isInTransactionAsync()`

Asynchronous call to return whether the database is currently in a transaction.

Returns:

`[Promise<boolean>`

### `isInTransactionSync()`

Synchronous call to return whether the database is currently in a transaction.

Returns:

`boolean`

### `prepareAsync(source)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |

Create a [prepared SQLite statement.

Returns:

`[Promise<[SQLiteStatement](#sqlitestatement)>`

### `prepareSync(source)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |

Create a [prepared SQLite statement.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`[SQLiteStatement](#sqlitestatement)`

### `runAsync(source, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |
| params | `[SQLiteBindParams](#sqlitebindparams)` |

The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

A convenience wrapper around `SQLiteDatabase.prepareAsync()`, `SQLiteStatement.executeAsync()`, and `SQLiteStatement.finalizeAsync()`.

Returns:

`[Promise<[SQLiteRunResult](#sqliterunresult)>`

### `runSync(source, params)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `string` |
A string containing the SQL query.

 |
| params | `[SQLiteBindParams](#sqlitebindparams)` |

The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

A convenience wrapper around `SQLiteDatabase.prepareSync()`, `SQLiteStatement.executeSync()`, and `SQLiteStatement.finalizeSync()`.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`[SQLiteRunResult](#sqliterunresult)`

### `serializeAsync(databaseName)`

| Parameter | Type | Description |
| --- | --- | --- |
| databaseName(optional) | `string` |
The name of the current attached databases. The default value is `main` which is the default database name.

Default:`'main'`

 |

[Serialize the database as `Uint8Array`.

Returns:

`[Promise<[Uint8Array>`

### `serializeSync(databaseName)`

| Parameter | Type | Description |
| --- | --- | --- |
| databaseName(optional) | `string` |
The name of the current attached databases. The default value is `main` which is the default database name.

Default:`'main'`

 |

[Serialize the database as `Uint8Array`.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`[Uint8Array`

### `withExclusiveTransactionAsync(task)`

| Parameter | Type | Description |
| --- | --- | --- |
| task | `(txn: [Transaction](#transaction)) => [Promise<void>` |
An async function to execute within a transaction. Any queries inside the transaction must be executed on the `txn` object. The `txn` object has the same interfaces as the `SQLiteDatabase` object. You can use `txn` like a `SQLiteDatabase` object.

 |

Execute a transaction and automatically commit/rollback based on the `task` result.

The transaction may be exclusive. As long as the transaction is converted into a write transaction, the other async write queries will abort with `database is locked` error.

Returns:

`[Promise<void>`

Example

```
db.withExclusiveTransactionAsync(async (txn) => {
  await txn.execAsync('UPDATE test SET name = "aaa"');
});
```

### `withTransactionAsync(task)`

| Parameter | Type | Description |
| --- | --- | --- |
| task | `() => [Promise<void>` |
An async function to execute within a transaction.

 |

Execute a transaction and automatically commit/rollback based on the `task` result.

> Note: This transaction is not exclusive and can be interrupted by other async queries.

Returns:

`[Promise<void>`

Example

```
db.withTransactionAsync(async () => {
  await db.execAsync('UPDATE test SET name = "aaa"');

  //
  // We cannot control the order of async/await order, so order of execution is not guaranteed.
  // The following UPDATE query out of transaction may be executed here and break the expectation.
  //

  const result = await db.getAsync<{ name: string }>('SELECT name FROM Users');
  expect(result?.name).toBe('aaa');
});
db.execAsync('UPDATE test SET name = "bbb"');
```

If you worry about the order of execution, use `withExclusiveTransactionAsync` instead.

### `withTransactionSync(task)`

| Parameter | Type | Description |
| --- | --- | --- |
| task | `() => void` |
An async function to execute within a transaction.

 |

Execute a transaction and automatically commit/rollback based on the `task` result.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`void`

### `SQLiteStatement`

A prepared statement returned by `SQLiteDatabase.prepareAsync()` or `SQLiteDatabase.prepareSync()` that can be binded with parameters and executed.

SQLiteStatement Methods

### `executeAsync<T>(params)`

| Parameter | Type | Description |
| --- | --- | --- |
| params | `[SQLiteBindParams](#sqlitebindparams)` |
The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

Run the prepared statement and return the `SQLiteExecuteAsyncResult` instance.

Returns:

`[Promise<[SQLiteExecuteAsyncResult](#sqliteexecuteasyncresult)<T>>`

### `executeSync<T>(params)`

| Parameter | Type | Description |
| --- | --- | --- |
| params | `[SQLiteBindParams](#sqlitebindparams)` |
The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See `SQLiteBindValue` for more information about binding values.

 |

Run the prepared statement and return the `SQLiteExecuteSyncResult` instance.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`[SQLiteExecuteSyncResult](#sqliteexecutesyncresult)<T>`

### `finalizeAsync()`

Finalize the prepared statement. This will call the [`sqlite3_finalize()` C function under the hood.

Attempting to access a finalized statement will result in an error.

> Note: While expo-sqlite will automatically finalize any orphaned prepared statements upon closing the database, it is considered best practice to manually finalize prepared statements as soon as they are no longer needed. This helps to prevent resource leaks. You can use the `try...finally` statement to ensure that prepared statements are finalized even if an error occurs.

Returns:

`[Promise<void>`

### `finalizeSync()`

Finalize the prepared statement. This will call the [`sqlite3_finalize()` C function under the hood.

Attempting to access a finalized statement will result in an error.

> Note: While expo-sqlite will automatically finalize any orphaned prepared statements upon closing the database, it is considered best practice to manually finalize prepared statements as soon as they are no longer needed. This helps to prevent resource leaks. You can use the `try...finally` statement to ensure that prepared statements are finalized even if an error occurs.

Returns:

`void`

### `getColumnNamesAsync()`

Get the column names of the prepared statement.

Returns:

`[Promise<string>`

### `getColumnNamesSync()`

Get the column names of the prepared statement.

Returns:

`string`

## Methods

### `SQLite.deleteDatabaseAsync(databaseName)`

| Parameter | Type | Description |
| --- | --- | --- |
| databaseName | `string` |
The name of the database file to delete.

 |

Delete a database file.

Returns:

`[Promise<void>`

### `SQLite.deleteDatabaseSync(databaseName)`

| Parameter | Type | Description |
| --- | --- | --- |
| databaseName | `string` |
The name of the database file to delete.

 |

Delete a database file.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`void`

### `SQLite.deserializeDatabaseAsync(serializedData, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| serializedData | `[Uint8Array` |
The binary array to deserialize from `SQLiteDatabase.serializeAsync()`.

 |
| options(optional) | `[SQLiteOpenOptions](#sqliteopenoptions)` |

Open options.

 |

Given a `Uint8Array` data and [deserialize to memory database.

Returns:

`[Promise<[SQLiteDatabase](#sqlitedatabase)>`

### `SQLite.deserializeDatabaseSync(serializedData, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| serializedData | `[Uint8Array` |
The binary array to deserialize from `SQLiteDatabase.serializeSync()`

 |
| options(optional) | `[SQLiteOpenOptions](#sqliteopenoptions)` |

Open options.

 |

Given a `Uint8Array` data and [deserialize to memory database.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`[SQLiteDatabase](#sqlitedatabase)`

### `SQLite.openDatabaseAsync(databaseName, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| databaseName | `string` |
The name of the database file to open.

 |
| options(optional) | `[SQLiteOpenOptions](#sqliteopenoptions)` |

Open options.

 |

Open a database.

Returns:

`[Promise<[SQLiteDatabase](#sqlitedatabase)>`

### `SQLite.openDatabaseSync(databaseName, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| databaseName | `string` |
The name of the database file to open.

 |
| options(optional) | `[SQLiteOpenOptions](#sqliteopenoptions)` |

Open options.

 |

Open a database.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Returns:

`[SQLiteDatabase](#sqlitedatabase)`

## Event Subscriptions

### `SQLite.addDatabaseChangeListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [DatabaseChangeEvent](#databasechangeevent)) => void` |
A function that receives the `databaseName`, `databaseFilePath`, `tableName` and `rowId` of the modified data.

 |

Add a listener for database changes.

> Note: to enable this feature, you must set [`enableChangeListener` to `true`](#sqliteopenoptions) when opening the database.

Returns:

`[Subscription](#subscription)`

A `Subscription` object that you can call `remove()` on when you would like to unsubscribe the listener.

## Interfaces

### `SQLiteExecuteAsyncResult`

Extends: `[AsyncIterableIterator<T>`

A result returned by `SQLiteStatement.executeAsync()`.

Example

The result includes the [`lastInsertRowId` and [`changes` properties. You can get the information from the write operations.

```
const statement = await db.prepareAsync('INSERT INTO test (value) VALUES (?)');
try {
  const result = await statement.executeAsync(101);
  console.log('lastInsertRowId:', result.lastInsertRowId);
  console.log('changes:', result.changes);
} finally {
  await statement.finalizeAsync();
}
```

Example

The result implements the [`AsyncIterator` interface, so you can use it in `for await...of` loops.

```
const statement = await db.prepareAsync('SELECT value FROM test WHERE value > ?');
try {
  const result = await statement.executeAsync<{ value: number }>(100);
  for await (const row of result) {
```
console.log('row value:', row.value);
```
  }
} finally {
  await statement.finalizeAsync();
}
```

Example

If your write operations also return values, you can mix all of them together.

```
const statement = await db.prepareAsync('INSERT INTO test (name, value) VALUES (?, ?) RETURNING name');
try {
  const result = await statement.executeAsync<{ name: string }>('John Doe', 101);
  console.log('lastInsertRowId:', result.lastInsertRowId);
  console.log('changes:', result.changes);
  for await (const row of result) {
```
console.log('name:', row.name);
```
  }
} finally {
  await statement.finalizeAsync();
}
```

| Property | Type | Description |
| --- | --- | --- |
| changes | `number` |
The number of rows affected. Returned from the [`sqlite3_changes()` function.

 |
| lastInsertRowId | `number` |

The last inserted row ID. Returned from the [`sqlite3_last_insert_rowid()` function.

 |

SQLiteExecuteAsyncResult Methods

### `getAllAsync()`

Get all rows of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling `resetAsync()`. Otherwise, an error will be thrown.

Returns:

`[Promise<T>`

### `getFirstAsync()`

Get the first row of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling `resetAsync()`. Otherwise, an error will be thrown.

Returns:

`[Promise<null | T>`

### `resetAsync()`

Reset the prepared statement cursor. This will call the [`sqlite3_reset()` C function under the hood.

Returns:

`[Promise<void>`

### `SQLiteExecuteSyncResult`

Extends: `[IterableIterator<T>`

A result returned by `SQLiteStatement.executeSync()`.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Example

The result includes the [`lastInsertRowId` and [`changes` properties. You can get the information from the write operations.

```
const statement = db.prepareSync('INSERT INTO test (value) VALUES (?)');
try {
  const result = statement.executeSync(101);
  console.log('lastInsertRowId:', result.lastInsertRowId);
  console.log('changes:', result.changes);
} finally {
  statement.finalizeSync();
}
```

Example

The result implements the [`Iterator` interface, so you can use it in `for...of` loops.

```
const statement = db.prepareSync('SELECT value FROM test WHERE value > ?');
try {
  const result = statement.executeSync<{ value: number }>(100);
  for (const row of result) {
```
console.log('row value:', row.value);
```
  }
} finally {
  statement.finalizeSync();
}
```

Example

If your write operations also return values, you can mix all of them together.

```
const statement = db.prepareSync('INSERT INTO test (name, value) VALUES (?, ?) RETURNING name');
try {
  const result = statement.executeSync<{ name: string }>('John Doe', 101);
  console.log('lastInsertRowId:', result.lastInsertRowId);
  console.log('changes:', result.changes);
  for (const row of result) {
```
console.log('name:', row.name);
```
  }
} finally {
  statement.finalizeSync();
}
```

| Property | Type | Description |
| --- | --- | --- |
| changes | `number` |
The number of rows affected. Returned from the [`sqlite3_changes()` function.

 |
| lastInsertRowId | `number` |

The last inserted row ID. Returned from the [`sqlite3_last_insert_rowid()` function.

 |

SQLiteExecuteSyncResult Methods

### `getAllSync()`

Get all rows of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling `resetSync()`. Otherwise, an error will be thrown.

Returns:

`T`

### `getFirstSync()`

Get the first row of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling `resetSync()`. Otherwise, an error will be thrown.

Returns:

`null | T`

### `resetSync()`

Reset the prepared statement cursor. This will call the [`sqlite3_reset()` C function under the hood.

Returns:

`void`

### `SQLiteOpenOptions`

Options for opening a database.

| Property | Type | Description |
| --- | --- | --- |
| enableCRSQLite(optional) | `boolean` |
Whether to enable the CR-SQLite extension.

Default:`false`

 |
| enableChangeListener(optional) | `boolean` |

Whether to call the [`sqlite3_update_hook()` function and enable the `onDatabaseChange` events. You can later subscribe to the change events by `addDatabaseChangeListener`.

Default:`false`

 |
| useNewConnection(optional) | `boolean` |

Whether to create new connection even if connection with the same database name exists in cache.

Default:`false`

 |

### `SQLiteProviderAssetSource`

| Property | Type | Description |
| --- | --- | --- |
| assetId | `number` |
The asset ID returned from the `require()` call.

 |
| forceOverwrite(optional) | `boolean` |

Force overwrite the local database file even if it already exists.

Default:`false`

 |

### `SQLiteRunResult`

A result returned by `SQLiteDatabase.runAsync` or `SQLiteDatabase.runSync`.

| Property | Type | Description |
| --- | --- | --- |
| changes | `number` |
The number of rows affected. Returned from the [`sqlite3_changes()` function.

 |
| lastInsertRowId | `number` |

The last inserted row ID. Returned from the [`sqlite3_last_insert_rowid()` function.

 |

## Types

### `DatabaseChangeEvent`

The event payload for the listener of `addDatabaseChangeListener`

| Property | Type | Description |
| --- | --- | --- |
| databaseFilePath | `string` |
The absolute file path to the database.

 |
| databaseName | `string` |

The database name. The value would be `main` by default and other database names if you use `ATTACH DATABASE` statement.

 |
| rowId | `number` |

The changed row ID.

 |
| tableName | `string` |

The table name.

 |

### `SQLiteBindParams`

Literal Type: `Record`

Acceptable values are: `Record<string, [SQLiteBindValue](#sqlitebindvalue)>`

### `SQLiteBindValue`

Literal Type: `union`

Bind parameters to the prepared statement. You can either pass the parameters in the following forms:

Example

A single array for unnamed parameters.

```
const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');
const result = await statement.executeAsync(['test1', 789]);
const firstRow = await result.getFirstAsync();
```

Example

Variadic arguments for unnamed parameters.

```
const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');
const result = await statement.executeAsync('test1', 789);
const firstRow = await result.getFirstAsync();
```

Example

A single object for [named parameters

We support multiple named parameter forms such as `:VVV`, `@VVV`, and `$VVV`. We recommend using `$VVV` because JavaScript allows using `$` in identifiers without escaping.

```
const statement = await db.prepareAsync('SELECT * FROM test WHERE value = $value AND intValue = $intValue');
const result = await statement.executeAsync({ $value: 'test1', $intValue: 789 });
const firstRow = await result.getFirstAsync();
```

Acceptable values are: `string` | `number` | `null` | `boolean` | `[Uint8Array`

### `SQLiteVariadicBindParams`

Type: `[SQLiteBindValue](#sqlitebindvalue)`

---

# Expo StatusBar

`expo-status-bar` gives you a component and imperative interface to control the app status bar to change its text color, background color, hide it, make it translucent or opaque, and apply animations to any of these changes. Exactly what you are able to do with the `StatusBar` component depends on the platform you're using.

> tvOS and web support
>
> For tvOS, the `expo-status-bar` code will compile and run, but no status bar will show.
>
> For web, there is no API available to control the operating system's status bar, so `expo-status-bar` will do nothing and won't throw an error.

## Installation

`npx expo install expo-status-bar`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Example

```
import { StyleSheet, Text, View } from 'react-native';
import { StatusBar } from 'expo-status-bar';

export default function App() {
  return (
```
<View style={styles.container}>
  <Text style={styles.text}>Notice that the status bar has light text!</Text>
  <StatusBar style="light" />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
backgroundColor: '#000',
alignItems: 'center',
justifyContent: 'center',
```
  },
  text: {
```
color: '#fff',
```
  },
});
```

## API

```
import { StatusBar } from 'expo-status-bar';
```

## Component

### `StatusBar`

Type: `React.[Element<[StatusBarProps](#statusbarprops)>`

A component that allows you to configure your status bar without directly calling imperative methods like `setBarStyle`.

You will likely have multiple `StatusBar` components mounted in the same app at the same time. For example, if you have multiple screens in your app, you may end up using one per screen. The props of each `StatusBar` component will be merged in the order that they were mounted. This component is built on top of the [StatusBar component exported from React Native, and it provides defaults that work better for Expo users.

StatusBarProps

### `animated`

Optional Type: `boolean`

If the transition between status bar property changes should be animated. Supported for `backgroundColor`, `barStyle` and `hidden`.

### `backgroundColor`

Only for: Android

Optional Type: `string`

The background color of the status bar.

### `hidden`

Optional Type: `boolean`

If the status bar is hidden.

### `hideTransitionAnimation`

Only for: iOS

Optional Type: `[StatusBarAnimation](#statusbaranimation)` Default: `'fade'`

The transition effect when showing and hiding the status bar using the hidden prop.

### `networkActivityIndicatorVisible`

Only for: iOS

Optional Type: `boolean`

If the network activity indicator should be visible.

### `style`

Optional Type: `[StatusBarStyle](#statusbarstyle)` Default: `'auto'`

Sets the color of the status bar text. Default value is `"auto"` which picks the appropriate value according to the active color scheme, eg: if your app is dark mode, the style will be `"light"`.

### `translucent`

Only for: Android

Optional Type: `boolean`

If the status bar is translucent. When translucent is set to `true`, the app will draw under the status bar. This is the default behaviour in projects created with Expo tools because it is consistent with iOS.

## Methods

### `StatusBar.setStatusBarBackgroundColor(backgroundColor, animated)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| backgroundColor | `string` |
The background color of the status bar.

 |
| animated | `boolean` |

`true` to animate the background color change, `false` to change immediately.

 |

Set the background color of the status bar.

Returns:

`void`

### `StatusBar.setStatusBarHidden(hidden, animation)`

| Parameter | Type | Description |
| --- | --- | --- |
| hidden | `boolean` |
If the status bar should be hidden.

 |
| animation(optional) | `[StatusBarAnimation](#statusbaranimation)` |

Animation to use when toggling hidden, defaults to `'none'`.

 |

Toggle visibility of the status bar.

Returns:

`void`

### `StatusBar.setStatusBarNetworkActivityIndicatorVisible(visible)`

Only for: iOS

| Parameter | Type | Description |
| --- | --- | --- |
| visible | `boolean` |
If the network activity indicator should be visible.

 |

Toggle visibility of the network activity indicator.

Returns:

`void`

### `StatusBar.setStatusBarStyle(style, animated)`

| Parameter | Type | Description |
| --- | --- | --- |
| style | `[StatusBarStyle](#statusbarstyle)` |
The color of the status bar text.

 |
| animated(optional) | `boolean` |

If the transition should be animated.

 |

Set the bar style of the status bar.

Returns:

`void`

### `StatusBar.setStatusBarTranslucent(translucent)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| translucent | `boolean` |
Whether the app can draw under the status bar. When `true`, content will be rendered under the status bar. This is always `true` on iOS and cannot be changed.

 |

Set the translucency of the status bar.

Returns:

`void`

## Types

### `StatusBarAnimation`

Literal Type: `string`

Acceptable values are: `'none'` | `'fade'` | `'slide'`

### `StatusBarStyle`

Literal Type: `string`

Acceptable values are: `'auto'` | `'inverted'` | `'light'` | `'dark'`

---

# Expo StoreReview


`expo-store-review` is a library that provides access to `ReviewManager` API on Android 5+ and `SKStoreReviewController` API on iOS. It allows you to ask the user to rate your app without leaving the app itself.

## Installation

`npx expo install expo-store-review`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

It is important that you follow the [Human Interface Guidelines for iOS and [Guidelines for Android when using this API.

Specifically:

*   Don't call `StoreReview.requestReview()` from a button - instead try calling it after the user has finished some signature interaction in the app.
*   Don't spam the user.
*   Don't request a review when the user is doing something time sensitive like navigating.
*   Don't ask the user any questions before or while presenting the rating button or card.

### Write reviews

#### Android

There is no equivalent redirect on Android, you can still open the Play Store to the reviews sections using the query parameter `showAllReviews=true` like this:

Android Play Store example

```
const androidPackageName = 'host.exp.exponent';
// Open the Android Play Store in the browser -> redirects to Play Store on Android
Linking.openURL(
  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`
);
// Open the Android Play Store directly
Linking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);
```

#### iOS

You can redirect an app user to the "Write a Review" screen for an app in the iOS App Store by using the query parameter `action=write-review`. For example:

iOS App Store example

```
const itunesItemId = 982107779;
// Open the iOS App Store in the browser -> redirects to App Store on iOS
Linking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);
// Open the iOS App Store directly
Linking.openURL(
  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`
);
```

## API

```
import * as StoreReview from 'expo-store-review';
```

## Methods

### `StoreReview.hasAction()`

Returns:

`[Promise<boolean>`

This returns a promise that fulfills to `true` if `StoreReview.requestReview()` is capable directing the user to some kind of store review flow. If the app config (`app.json`) does not contain store URLs and native store review capabilities are not available then the promise will fulfill to `false`.

Example

```
if (await StoreReview.hasAction()) {
  // you can call StoreReview.requestReview()
}
```

### `StoreReview.isAvailableAsync()`

Determines if the platform has the capabilities to use `StoreReview.requestReview()`.

Returns:

`[Promise<boolean>`

This returns a promise fulfills with `boolean`, depending on the platform:

*   On iOS, it will resolve to `true` unless the app is distributed through TestFlight.
*   On Android, it will resolve to `true` if the device is running Android 5.0+.
*   On Web, it will resolve to `false`.

### `StoreReview.requestReview()`

In ideal circumstances this will open a native modal and allow the user to select a star rating that will then be applied to the App Store, without leaving the app. If the device is running a version of Android lower than 5.0, this will attempt to get the store URL and link the user to it.

Returns:

`[Promise<void>`

### `StoreReview.storeUrl()`

This uses the `Constants` API to get the `Constants.expoConfig.ios.appStoreUrl` on iOS, or the `Constants.expoConfig.android.playStoreUrl` on Android.

On Web this will return `null`.

Returns:

`string | null`

## Error codes

### `ERR_STORE_REVIEW_FAILED`

This error occurs when the store review request was not successful.

---

# Stripe

Expo includes support for [`@stripe/stripe-react-native`, which allows you to build delightful payment experiences in your native Android and iOS apps using React Native and Expo. This library provides powerful and customizable UI screens and elements that can be used out-of-the-box to collect your users' payment details.

> Migrating from Expo's `expo-payments-stripe` module? [Learn more about how to transition to the new `@stripe/stripe-react-native` library.

## Installation

Each Expo SDK version requires a specific `@stripe/stripe-react-native` version. See the [Stripe   for a mapping of versions. To automatically install the correct version for your Expo SDK version, run:

`npx expo install @stripe/stripe-react-native`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

### Config plugin setup (optional)

If you're using EAS Build, you can do most of your Stripe setup using the `@stripe/stripe-react-native` [config plugin. To set up, just add the config plugin to the `plugins` array of your app.json or app.config.js as shown below, then rebuild the app.

app.json

```
{
  "expo": {
```
%%placeholder-start%%... %%placeholder-end%%
"plugins":
    "@stripe/stripe-react-native",
    {
      "merchantIdentifier": string | string ,
      "enableGooglePay": boolean
    }

],
```
  }
}
```

*   merchantIdentifier: iOS only. This is the [Apple merchant ID obtained here. Otherwise, Apple Pay will not work as expected. If you have multiple merchantIdentifiers, you can set them in an array.
*   enableGooglePay: Android only. Boolean indicating whether or not Google Pay is enabled. Defaults to `false`.

## Example

Trying out Stripe takes just a few seconds. Connect to [this Snack on your device.

Under the hood, that example connects to [this Glitch server code, so you'll need to open that page to spin up the server. Feel free to run your own Glitch server and copy that code!

## Usage

For usage information and detailed documentation, see the following resources:

*   [Stripe's React Native SDK reference
*   [Stripe's React Native GitHub repo
*   [Stripe's example React Native app

### Common issues

#### Browser pop-ups are not redirecting back to my app

If you're relying on redirects, you'll need to pass in a `urlScheme` to `initStripe`. To make sure you always use the proper `urlScheme`, pass in:

```
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';

urlScheme:
  Constants.appOwnership === 'expo'
```
? Linking.createURL('/--/')
: Linking.createURL(''),
```

[`Linking.createURL()` will ensure you're using the proper scheme, whether you're running in Expo Go or your production app. `'/--/'` is necessary in Expo Go because it indicates that the substring after it corresponds to the deep link path, and is not part of the path to the app itself.

## Limitations

### Google Pay

Google Pay is not supported in [Expo Go. To use Google Pay, you must create a [development build. This can be done with [EAS Build, or locally by running `npx expo run:android`.

### Apple Pay

Apple Pay is not supported in [Expo Go. To use Apple Pay, you must create a [development build. This can be done with [EAS Build, or locally by running `npx expo run:ios`.

---

# React Native SVG

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

`react-native-svg` allows you to use SVGs in your app, with support for interactivity and animation.

## Installation

`npx expo install react-native-svg`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## API

```
import * as Svg from 'react-native-svg';
```

### `Svg`

A set of drawing primitives such as `Circle`, `Rect`, `Path`, `ClipPath`, and `Polygon`. It supports most SVG elements and properties. The implementation is provided by [react-native-svg, and documentation is provided in that repository.

SVG

```
import Svg, { Circle, Rect } from 'react-native-svg';

export default function SvgComponent(props) {
  return (
```
<Svg height="50%" width="50%" viewBox="0 0 100 100" {...props}>
  <Circle cx="50" cy="50" r="45" stroke="blue" strokeWidth="2.5" fill="green" />
  <Rect x="15" y="15" width="70" height="70" stroke="red" strokeWidth="2" fill="yellow" />
</Svg>
```
  );
}
```

### Pro tips

Here are some helpful links that will get you moving fast!

*   Looking for SVGs? Try the [noun project.
*   Create or modify your own SVGs for free using [Figma.
*   Optimize your SVG with [SVGOMG. This will make the code smaller and easier to work with. Be sure not to remove the `viewbox` for best results on Android.
*   Convert your SVG to an Expo component in the browser using [React SVGR.

---

# Expo Symbols

> This library is currently in beta and subject to breaking changes.

`expo-symbols` provides access to the [SF Symbols library on iOS.

## Installation

`npx expo install expo-symbols`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

App.js

```
import { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
```
<View style={styles.container}>
  <SymbolView name="airpods.chargingcase" style={styles.symbol} type="hierarchical" />
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
backgroundColor: '#fff',
alignItems: 'center',
justifyContent: 'center',
```
  },
  symbol: {
```
width: 35,
height: 35,
margin: 5,
```
  },
});
```

## API

```
import { SymbolView } from 'expo-symbols';
```

## Component

### `SymbolView`

Type: `React.[Element<[SymbolViewProps](#symbolviewprops)>`

SymbolViewProps

### `animationSpec`

Optional Type: `[AnimationSpec](#animationspec)`

The animation configuration to apply to the symbol.

### `colors`

Optional Literal type: `union`

An array of colors to use when the [SymbolType](#symboltype) is `palette`.

Acceptable values are: `string` | `string` | `null`

### `fallback`

Optional Type: `React.ReactNode`

Fallback to render on Android and Web where `SF Symbols` are not available.

### `name`

Type: `[SFSymbol`

The name of the symbol. Symbols can be viewed in the [Apple SF Symbols app.

### `resizeMode`

Optional Type: `[ContentMode](#contentmode)` Default: `'scaleToAspectFit'`

Determines how the image should be resized to fit its container.

### `scale`

Optional Type: `[SymbolScale](#symbolscale)` Default: `'unspecified'`

The scale of the symbol to render.

### `size`

Optional Type: `number` Default: `24`

The size of the symbol.

### `tintColor`

Optional Literal type: `union` Default: `null`

The tint color to apply to the symbol.

Acceptable values are: `string` | `null`

### `type`

Optional Type: `[SymbolType](#symboltype)` Default: `'monochrome'`

Determines the symbol variant to use.

### `weight`

Optional Type: `[SymbolWeight](#symbolweight)` Default: `'unspecified'`

The weight of the symbol to render.

#### Inherited Props

*   `[ViewProps`

## Types

### `AnimationEffect`

| Property | Type | Description |
| --- | --- | --- |
| direction(optional) | `'up' | 'down'` |
The direction of the animation.

 |
| type | `[AnimationType](#animationtype)` |

The type of animation to apply to the symbol.

 |
| wholeSymbol(optional) | `boolean` |

Whether the entire symbol should animate or just the individual layers.

Default:`false`

 |

### `AnimationSpec`

The animation configuration to apply to the symbol.

| Property | Type | Description |
| --- | --- | --- |
| effect(optional) | `[AnimationEffect](#animationeffect)` |
The effect to apply to the symbol.

 |
| repeatCount(optional) | `number` |

The number of times the animation should repeat.

 |
| repeating(optional) | `boolean` |

If the animation should repeat.

 |
| speed(optional) | `number` |

The duration of the animation in seconds.

 |
| variableAnimationSpec(optional) | `[VariableAnimationSpec](#variableanimationspec)` |

An object that specifies how the symbol’s layers should animate.

 |

### `AnimationType`

Literal Type: `string`

The type of animation to apply to the symbol.

Acceptable values are: `'bounce'` | `'pulse'` | `'scale'`

### `ContentMode`

Literal Type: `string`

Determines how the image should be resized to fit its container.

Acceptable values are: `'scaleToFill'` | `'scaleAspectFit'` | `'scaleAspectFill'` | `'redraw'` | `'center'` | `'top'` | `'bottom'` | `'left'` | `'right'` | `'topLeft'` | `'topRight'` | `'bottomLeft'` | `'bottomRight'`

### `SymbolScale`

Literal Type: `string`

The scale of the symbol to render.

Acceptable values are: `'default'` | `'unspecified'` | `'small'` | `'medium'` | `'large'`

### `SymbolType`

Literal Type: `string`

Determines the symbol variant to use.

*   `'monochrome'` - Creates a color configuration that specifies that the symbol image uses its monochrome variant.
```
*   `'hierarchical'` - Creates a color configuration with a color scheme that originates from one color.
```
*   `'palette'` - Creates a color configuration with a color scheme from a palette of multiple colors.
```
*   `'multicolor'` - Creates a color configuration that specifies that the symbol image uses its multicolor variant, if one exists.
```

Acceptable values are: `'monochrome'` | `'hierarchical'` | `'palette'` | `'multicolor'`

### `SymbolWeight`

Literal Type: `string`

The weight of the symbol to render.

Acceptable values are: `'unspecified'` | `'ultraLight'` | `'thin'` | `'light'` | `'regular'` | `'medium'` | `'semibold'` | `'bold'` | `'heavy'` | `'black'`

### `VariableAnimationSpec`

A variable color animation draws attention to a symbol by changing the opacity of the symbol’s layers. You can choose to apply the effect to layers either cumulatively or iteratively. For cumulative animations, each layer’s opacity remains changed until the end of the animation cycle. For iterative animations, each layer’s opacity changes briefly before returning to its original state. These effects are compounding, each value set to `true` will add an additional effect.

| Property | Type | Description |
| --- | --- | --- |
| cumulative(optional) | `boolean` |
This effect enables each successive variable layer, and the layer remains enabled until the end of the animation cycle. This effect cancels the iterative variant.

 |
| dimInactiveLayers(optional) | `boolean` |

An effect that dims inactive layers of a symbol. This effect draws inactive layers with reduced, but nonzero, opacity.

 |
| hideInactiveLayers(optional) | `boolean` |

An effect that hides inactive layers of a symbol. This effect hides inactive layers completely, rather than drawing them with reduced, but nonzero, opacity.

 |
| iterative(optional) | `boolean` |

An effect that momentarily enables each layer of a symbol in sequence.

 |
| nonReversing(optional) | `boolean` |

An effect that doesn’t reverse each time it repeats.

 |
| reversing(optional) | `boolean` |

An effect that reverses each time it repeats.

 |

---

# Expo SystemUI

`expo-system-ui` enables you to interact with UI elements that fall outside of the React tree. Specifically the root view background color, and locking the user interface style globally on Android.

## Installation

`npx expo install expo-system-ui`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## API

```
import * as SystemUI from 'expo-system-ui';
```

## Methods

### `SystemUI.getBackgroundColorAsync()`

Gets the root view background color.

Returns:

`[Promise<[ColorValue | null>`

Current root view background color in hex format. Returns `null` if the background color is not set.

Example

```
const color = await SystemUI.getBackgroundColorAsync();
```

### `SystemUI.setBackgroundColorAsync(color)`

| Parameter | Type | Description |
| --- | --- | --- |
| color | `null | [ColorValue` |
Any valid [CSS 3 (SVG) color](http://www.w3.org/TR/css3-color/#svg-color).

 |

Changes the root view background color. Call this function in the root file outside of you component.

Returns:

`[Promise<void>`

Example

```
SystemUI.setBackgroundColorAsync("black");
```

---

# Expo TaskManager




A library that provides support for tasks that can run in the background.



1.8.2

`expo-task-manager` provides an API that allows you to manage long-running tasks, in particular those tasks that can run while your app is in the background. Some features of this library are used by other libraries under the hood. Here is a list of Expo SDK libraries that use `TaskManager`:

*   [Location
*   [BackgroundFetch
*   [Notifications

## Installation

`npx expo install expo-task-manager`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

### Background modes on iOS

`TaskManager` works out of the box in the Expo Go app on Android. However, on iOS, you'll need to use a [development build.

Standalone apps need some extra configuration: on iOS, each background feature requires a special key in `UIBackgroundModes` array in your Info.plist file. In standalone apps this array is empty by default, so to use background features you will need to add appropriate keys to your app.json configuration.

Here is an example of an app.json configuration that enables background location, background fetch and remote notifications:

app.json

```
{
  "expo": {
```
"ios": {
  "infoPlist": {
    "UIBackgroundModes": ["location", "fetch", "remote-notification"]
  }
}
```
  }
}
```

Are you using this library in an existing React Native app?

Learn how to configure the native projects in the [installation instructions in the `expo-task-manager` repository.

## Example

Example

```
import React from 'react';
import { Button, View, StyleSheet } from 'react-native';
import * as TaskManager from 'expo-task-manager';
import * as Location from 'expo-location';

const LOCATION_TASK_NAME = 'background-location-task';

const requestPermissions = async () => {
  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();
  if (foregroundStatus === 'granted') {
```
const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();
if (backgroundStatus === 'granted') {
  await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
    accuracy: Location.Accuracy.Balanced,
  });
}
```
  }
};

const PermissionsButton = () => (
  <View style={styles.container}>
```
<Button onPress={requestPermissions} title="Enable background location" />
```
  </View>
);

TaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {
  if (error) {
```
// Error occurred - check `error.message` for more details.
return;
```
  }
  if (data) {
```
const { locations } = data;
// do something with the locations captured in the background
```
  }
});

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
```
  },
});

export default PermissionsButton;
```

## API

```
import * as TaskManager from 'expo-task-manager';
```

## Methods

### `TaskManager.defineTask<T>(taskName, taskExecutor)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task. It must be the same as the name you provided when registering the task.

 |
| taskExecutor | `[TaskManagerTaskExecutor](#taskmanagertaskexecutor)<T>` |

A function that will be invoked when the task with given `taskName` is executed.

 |

Defines task function. It must be called in the global scope of your JavaScript bundle. In particular, it cannot be called in any of React lifecycle methods like `componentDidMount`. This limitation is due to the fact that when the application is launched in the background, we need to spin up your JavaScript app, run your task and then shut down — no views are mounted in this scenario.

Returns:

`void`

### `TaskManager.getRegisteredTasksAsync()`

Provides information about tasks registered in the app.

Returns:

`[Promise<[TaskManagerTask](#taskmanagertask)>`

A promise which fulfills with an array of tasks registered in the app. Example:

```
  {
```
taskName: 'location-updates-task-name',
taskType: 'location',
options: {
  accuracy: Location.Accuracy.High,
  showsBackgroundLocationIndicator: false,
},
```
  },
  {
```
taskName: 'geofencing-task-name',
taskType: 'geofencing',
options: {
  regions: [...],
},
```
  },
```

### `TaskManager.getTaskOptionsAsync<TaskOptions>(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task.

 |

Retrieves `options` associated with the task, that were passed to the function registering the task (eg. `Location.startLocationUpdatesAsync`).

Returns:

`[Promise<TaskOptions>`

A promise which fulfills with the `options` object that was passed while registering task with given name or `null` if task couldn't be found.

### `TaskManager.isAvailableAsync()`

Determine if the `TaskManager` API can be used in this app.

Returns:

`[Promise<boolean>`

A promise fulfills with `true` if the API can be used, and `false` otherwise. On the web it always returns `false`.

### `TaskManager.isTaskDefined(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task.

 |

Checks whether the task is already defined.

Returns:

`boolean`

### `TaskManager.isTaskRegisteredAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task.

 |

Determine whether the task is registered. Registered tasks are stored in a persistent storage and preserved between sessions.

Returns:

`[Promise<boolean>`

A promise which fulfills with a `boolean` value whether or not the task with given name is already registered.

### `TaskManager.unregisterAllTasksAsync()`

Unregisters all tasks registered for the running app. You may want to call this when the user is signing out and you no longer need to track his location or run any other background tasks.

Returns:

`[Promise<void>`

A promise which fulfills as soon as all tasks are completely unregistered.

### `TaskManager.unregisterTaskAsync(taskName)`

| Parameter | Type | Description |
| --- | --- | --- |
| taskName | `string` |
Name of the task to unregister.

 |

Unregisters task from the app, so the app will not be receiving updates for that task anymore. _It is recommended to use methods specialized by modules that registered the task, eg. [`Location.stopLocationUpdatesAsync`._

Returns:

`[Promise<void>`

A promise which fulfills as soon as the task is unregistered.

## Interfaces

### `TaskManagerError`

Error object that can be received through `TaskManagerTaskBody` when the task fails.

| Property | Type | Description |
| --- | --- | --- |
| code | `string | number` |
\-

 |
| message | `string` |

\-

 |

### `TaskManagerTask`

Represents an already registered task.

| Property | Type | Description |
| --- | --- | --- |
| options | `any` |
Provides `options` that the task was registered with.

 |
| taskName | `string` |

Name that the task is registered with.

 |
| taskType | `string` |

Type of the task which depends on how the task was registered.

 |

### `TaskManagerTaskBody`

Represents the object that is passed to the task executor.

| Property | Type | Description |
| --- | --- | --- |
| data | `T` |
An object of data passed to the task executor. Its properties depends on the type of the task.

 |
| error | `null | [TaskManagerError](#taskmanagererror)` |

Error object if the task failed or `null` otherwise.

 |
| executionInfo | `[TaskManagerTaskBodyExecutionInfo](#taskmanagertaskbodyexecutioninfo)` |

Additional details containing unique ID of task event and name of the task.

 |

### `TaskManagerTaskBodyExecutionInfo`

Additional details about execution provided in `TaskManagerTaskBody`.

| Property | Type | Description |
| --- | --- | --- |
| appState(optional) | `'active' | 'background' | 'inactive'` |
Only for: iOS

State of the application.

 |
| eventId | `string` |

Unique ID of task event.

 |
| taskName | `string` |

Name of the task.

 |

## Types

### `TaskManagerTaskExecutor(body)`

Type of task executor – a function that handles the task.

| Parameter | Type |
| --- | --- |
| body | `[TaskManagerTaskBody](#taskmanagertaskbody)<T>` |

Returns:

`void`

---

# Expo TrackingTransparency

A library for requesting permission to track the user or their device. Examples of data used for tracking include email address, device ID, advertising ID, and more. This permission is only necessary on iOS 14 and higher; on iOS 13 and below this permission is always granted. If the "Allow Apps to Request to Track" device-level setting is off, this permission will be denied. Be sure to add `NSUserTrackingUsageDescription` to your [Info.plist to explain how the user will be tracked. Otherwise, your app will be rejected by Apple.

For more information on Apple's new App Tracking Transparency framework, see their [documentation.

## Installation

`npx expo install expo-tracking-transparency`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Configuration in app config

You can configure `expo-tracking-transparency` using its built-in [config plugin if you use config plugins in your project ([EAS Build or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

app.json

```
{
  "expo": {
```
"plugins":
    "expo-tracking-transparency",
    {
      "userTrackingPermission": "This identifier will be used to deliver personalized ads to you."
    }

```
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `userTrackingPermission` | `"Allow this app to collect app-related data that can be used for tracking you or your device."` |
Only for: iOS

Sets the iOS `NSUserTrackingUsageDescription` permission message in Info.plist.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG) (you're using native android and ios projects manually), then you need to configure following permissions in your native projects:

*   For Android, add `com.google.android.gms.permission.AD_ID` permission to your project's android/app/src/main/AndroidManifest.xml.
```
<uses-permission android:name="com.google.android.gms.permission.AD_ID"/>
```
*   For iOS, add `NSUserTrackingUsageDescription` key to your project's ios/\[app\]/Info.plist:
```
<key>NSUserTrackingUsageDescription</key>
<string>Your custom usage description string here.</string>
```
## Usage

Basic tracking transparency usage
```
import { useEffect } from 'react';
import { Text, StyleSheet, View } from 'react-native';
import { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';

export default function App() {
  useEffect(() => {
```
(async () => {
  const { status } = await requestTrackingPermissionsAsync();
  if (status === 'granted') {
    console.log('Yay! I have user permission to track data');
  }
})();
```
  }, );

  return (
```
<View style={styles.container}>
  <Text>Tracking Transparency Module Example</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
```
  },
});
```
## API
```
import * as ExpoTrackingTransparency from 'expo-tracking-transparency';
```
## Hooks

### `useTrackingPermissions(options)`

| Parameter | Type |
| --- | --- |
| options(optional) | `[PermissionHookOptions](#permissionhookoptions)<object>` |

Check or request the user to authorize or deny access to app-related data that can be used for tracking the user or the device. Examples of data used for tracking include email address, device ID, advertising ID, etc. On iOS 14.5 and above, if the user denies this permission, any attempt to collect the IDFA will return a string of 0s.

The system remembers the user’s choice and doesn’t prompt again unless a user uninstalls and then reinstalls the app on the device.

On Android, web, and iOS 13 and below, this method always returns that the permission was granted.

Returns:

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example
```
const [status, requestPermission] = useTrackingPermissions();
```
## Methods

### `getAdvertisingId()`

Gets the advertising ID, a UUID string intended only for advertising. Use this string for frequency capping, attribution, conversion events, estimating the number of unique users, advertising fraud detection, and debugging.

As a best practice, don't store the advertising ID. Instead, call this function each time your app needs to use the advertising ID. Users can change whether they allow app tracking and can reset their advertising ID at any time in their system settings. Check your app's authorization using `getTrackingPermissionsAsync()` to determine the user's intent.

On Android, this function returns the "Android Advertising ID" ([AAID). On Android devices that support multiple users, including guest users, it's possible for your app to obtain different advertising IDs on the same device. These different IDs correspond to different users who could be signed in on that device. See Google's documentation for more information: [Get a user-resettable advertising ID.

On iOS, this function returns the "Identifier for Advertisers" ([IDFA), a string that's unique to each device. On devices running iOS 14.5 and newer, your app must request tracking authorization using `requestTrackingPermissionsAsync()` before it can get the advertising identifier.

Returns:

`string | null`

Returns either a UUID `string` or `null`. It returns null in the following cases:

*   On Android, when `isLimitAdTrackingEnabled()` is `true`
*   In the iOS simulator, regardless of any settings
*   On devices running iOS 14.5 and later if you haven't received permission using `requestTrackingPermissionsAsync()`
*   On iOS, if you've requested permission and the user declines
*   On iOS, when a profile or configuration restricts access to the advertising identifier, such as when the user has turned off the system-wide "Allow Apps to Request to Track" setting

Example
```
TrackingTransparency.getAdvertisingId();
// "E9228286-4C4E-4789-9D95-15827DCB291B"
```
### `getTrackingPermissionsAsync()`

Checks whether or not the user has authorized the app to access app-related data that can be used for tracking the user or the device. See `requestTrackingPermissionsAsync` for more details.

On Android, web, and iOS 13 and below, this method always returns that the permission was granted.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

Example
```
const { granted } = await getTrackingPermissionsAsync();

if (granted) {
  // Your app is authorized to track the user or their device
}
```
### `isAvailable()`

Returns whether the TrackingTransparency API is available on the current device.

Returns:

`boolean`

Currently this is `true` on iOS 14 and above only. On devices where the Tracking Transparency API is unavailable, the get and request permissions methods will always resolve to `granted`.

### `requestTrackingPermissionsAsync()`

Requests the user to authorize or deny access to app-related data that can be used for tracking the user or the device. Examples of data used for tracking include email address, device ID, advertising ID, etc. On iOS 14.5 and above, if the user denies this permission, any attempt to collect the IDFA will return a string of 0s.

The system remembers the user’s choice and doesn’t prompt again unless a user uninstalls and then reinstalls the app on the device.

On Android, web, and iOS 13 and below, this method always returns that the permission was granted.

Returns:

`[Promise<[PermissionResponse](#permissionresponse)>`

Example
```
const { granted } = await requestTrackingPermissionsAsync();

if (granted) {
  // Your app is authorized to track the user or their device
}
```

## Interfaces

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` |
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` |

Determines time when the permission expires.

 |
| granted | `boolean` |

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` |

Determines the status of the permission.

 |

## Types

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ＝ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ＝ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ＝ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

The following permissions are added automatically through the library's AndroidManifest.xml.

| Android Permission | Description |
| --- | --- |
| `com.google.android.gms.permission.AD_ID` | Allows access to the Advertising ID for tracking and analytics. Required for apps targeting Android 13 (API level 33) or higher that use Google Play services' Advertising ID. |

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
|
`NSUserTrackingUsageDescription`

 | A message that informs the user why an app is requesting permission to use data for tracking the user or the device. |

---

# Expo Updates

`expo-updates` is a library that enables your app to manage remote updates to your application code. It communicates with the configured remote update service to get information about available updates.

## Installation

The `expo-updates` library can be automatically configured using [EAS Update, which is a hosted service that manages and serves updates to your app. To get started with EAS Update, follow the instructions in the [Get started guide.

Alternatively, it is also possible to configure the `expo-updates` library manually in cases where a different remote update service is required or configuration is only specified in native files.

Manual installation, configuration, and custom remote update services

`npx expo install expo-updates`

If you're installing this library in a [bare React Native app or a generic app with manually configured native code, follow these [installation instructions.

If using [app config for configuration, this library can be configured by setting at least the following app config properties:

*   [`updates.url`: a URL of a remote service implementing the [Expo Updates protocol
*   [`runtimeVersion`: a [runtime version

The remote service must implement the [Expo Updates protocol. [EAS Update is one such service, but it is also possible to use this library with a custom server.

Custom Expo Updates Server

Example implementation of a custom server and an app using that server

## Configuration

There are build-time configuration options that control the behavior of the library. For most apps, these configuration values are set in the [app config under the [`updates` property.

| [App config property | Default | Required? | iOS plist/dictionary key | Android meta-data name | Android Map key |
| --- | --- | --- | --- | --- | --- |
| [`updates.enabled` | `true` |  | `EXUpdatesEnabled` | `expo.modules.updates.ENABLED` | `enabled` |
| [`updates.url` | (none) |  | `EXUpdatesURL` | `expo.modules.updates.EXPO_UPDATE_URL` | `updateUrl` |
| [`updates.requestHeaders` | (none) |  | `EXUpdatesRequestHeaders` | `expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY` | `requestHeaders` |
| [`runtimeVersion` | (none) |  | `EXUpdatesRuntimeVersion` | `expo.modules.updates.EXPO_RUNTIME_VERSION` | `runtimeVersion` |
| [`updates.checkAutomatically` | `ALWAYS` |  | `EXUpdatesCheckOnLaunch` | `expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH` | `checkOnLaunch` |
| [`updates.fallbackToCacheTimeout` | `0` |  | `EXUpdatesLaunchWaitMs` | `expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS` | `launchWaitMs` |
| [`updates.useEmbeddedUpdate` | `true` |  | `EXUpdatesHasEmbeddedUpdate` | `expo.modules.updates.HAS_EMBEDDED_UPDATE` | `hasEmbeddedUpdate` |
| [`updates.codeSigningCertificate` | (none) |  | `EXUpdatesCodeSigningCertificate` | `expo.modules.updates.CODE_SIGNING_CERTIFICATE` | `codeSigningCertificate` |
| [`updates.codeSigningMetadata` | (none) |  | `EXUpdatesCodeSigningMetadata` | `expo.modules.updates.CODE_SIGNING_METADATA` | `codeSigningMetadata` |

The two core required configuration options are:

*   [`updates.url`: the URL at which the library fetches remote updates
*   [`runtimeVersion`: a [runtime version

These are configured automatically when following the EAS Update [Get started guide.

#### Runtime version

Each time you build a binary for your app it includes the native code and configuration present at the time of the build as well as native configuration, and this unique combination is represented by a string called a runtime version. A remote update targets one runtime version, indicating that only binaries with a matching runtime version can load the remote update.

Manual configuration

The runtime version can be managed manually by setting the string value in the config field.

```
{
  "expo": {
```
"runtimeVersion": "<runtime_version_string>"
```
  }
}
```

Automatic configuration using runtime version policies

Runtime version policies derive the runtime version from another piece of information already present in your project. They can be set in the [`runtimeVersion` config field as follows:

```
{
  "expo": {
```
"runtimeVersion": {
  "policy": "<policy_name>"
}
```
  }
}
```

Available policy types:

appVersion

The `"appVersion"` policy is provided for projects with that wish to define their runtime compatibility based on the app version.

For example, in a project that has the following in its app config:

```
{
  "expo": {
```
"runtimeVersion": {
  "policy": "appVersion"
},
"version": "1.0.0",
"ios": {
  "buildNumber": "1"
},
"android": {
  "versionCode": 1
}
```
  }
}
```

The `"appVersion"` policy will set the runtime version to the project's current `"version"` property. In this case, the runtime version for the Android and iOS builds and any updates would be `"1.0.0"`.

This policy is great for projects that contain custom native code and that update the `"version"` field after every public release. To submit an app, the app stores require an updated native version number for each submitted build, which makes this policy convenient if you want to be sure that every version installed on user devices has a different runtime version.

When using this policy, you need to manually update `"version"` field in the app config every time there is a public release, but for Play Store's Internal Test Track and the App Store's TestFlight uploads, you can rely on `"autoIncrement"` option in eas.json to [manage versions for you.

nativeVersion

The `"nativeVersion"` policy is provided for projects that wish to define their runtime compatibility based on the project's current `"version"` and `"versionCode"` (Android) or `"buildNumber"` (iOS) properties.

For example, in a project that has the following in its app config:

```
{
  "expo": {
```
"runtimeVersion": {
  "policy": "nativeVersion"
},
"version": "1.0.0",
"ios": {
  "buildNumber": "1"
},
"android": {
  "versionCode": 1
}
```
  }
}
```

The runtime version for the Android and iOS builds and any updates would be the combination of `"[version]([buildNumber|versionCode])"`, which in this case would be `"1.0.0(1)"`.

This policy is great for projects containing custom native code that update the native version numbers (`"buildNumber"` for iOS and `"versionCode"` for Android) for each build. To submit an app, the app stores require an updated native version number for each submitted build, which makes this policy convenient if you want to be sure that every app uploaded to the Play Store's Internal Test Track and the App Store's TestFlight distribution tools has a different `runtimeVersion`.

It's important to know that this policy requires management of the native version numbers manually between each build.

Also, if you select a different native version between Android and iOS, you'll end up with builds and updates with separate runtime versions.

#### Native configuration and overriding

If your project does not use Continuous Native Generation, these configuration values may also be set in your app's native configuration files or overridden at during initialization in native code.

Native configuration instructions

On Android, these options are set as `meta-data` tags in the AndroidManifest.xml file (adjacent to the tags added during installation if auto-setup was used). You can also set or override them at runtime using `UpdatesController.overrideConfiguration()`.

On iOS, these properties are set as keys in the Expo.plist file. You can also set or override them at runtime by calling `AppController.overrideConfiguration`.

Importing Swift generated headers for use in Objective-C++

If your iOS native code or `AppDelegate.mm` is written in Objective-C++, you will need to add the following imports to reference methods on `EXUpdatesAppController`. This is only necessary for overriding configuration at runtime.

```
#import "ExpoModulesCore-Swift.h"
#import "EXUpdatesInterface-Swift.h"
#import "EXUpdates-Swift.h"
```

## Usage

By default, `expo-updates` checks for updates when the app launches. If an update is available, it downloads the update and applies it the next time the app is restarted. You can tune this startup behavior using the `checkAutomatically` and `fallbackToCacheTimeout` configuration options above.

The library also provides a variety of constants to inspect the current update and functions to customize update behavior from your application code (after startup). For example, one common alternative usage pattern is to manually check for updates after the app has started instead of doing the default check on launch.

Example: Check for updates manually

You can configure your app to check for updates manually by doing the following steps:

1.  Set the `checkAutomatically` configuration value to `ON_ERROR_RECOVERY` or `NEVER` to disable the library's default launch behavior.
```
2.  Add the following code to check for available updates, download them, and reload:
```
App.js
```
import { View, Button } from 'react-native';
import * as Updates from 'expo-updates';

function App() {
  async function onFetchUpdateAsync() {
    try {
      const update = await Updates.checkForUpdateAsync();

      if (update.isAvailable) {
        await Updates.fetchUpdateAsync();
        await Updates.reloadAsync();
      }
    } catch (error) {
      // You can also add an alert() to see the error message in case of an error when fetching updates.
      alert(`Error fetching latest Expo update: ${error}`);
    }
  }

  return (
    <View>
      <Button title="Fetch update" onPress={onFetchUpdateAsync} />
    </View>
  );
}
```
## Testing

Most of the methods and constants in this library can be used or tested only in release builds. In debug builds, the default behavior is to always load the latest JavaScript from a development server. It is possible to [build a debug version of your app with the same updates behavior as a release build. Such an app will not open the latest JavaScript from your development server — it will load published updates just as a release build does. This may be useful for debugging the behavior of your app when it is not connected to a development server.

To test the content of an update in a development build, run [`eas update` and then browse to the update in your development build. Note that this only simulates what an update will look like in your app, and most of the [Updates API is unavailable when running in a development build.

To test updates in a release build, you can create a [.apk or a [simulator build, or make a release build locally with `npx expo run:android --variant release` and `npx expo run:ios --configuration Release` (you don't need to submit this build to the store to test). The full [Updates API is available in a release build.

To test the content of an update in Expo Go, run [`eas update` and then browse to the update in Expo Go. Note that this only simulates what an update will look like in your app, and most of the [Updates API is unavailable when running in Expo Go. Also note that only updates using [Expo Go-compatible libraries are supported.

## API
```
import * as Updates from 'expo-updates';
```
## Constants

### `Updates.channel`

Type: `string | null`

The channel name of the current build, if configured for use with EAS Update. `null` otherwise.

Expo Go and development builds are not set to a specific channel and can run any updates compatible with their native runtime. Therefore, this value will always be `null` when running an update on Expo Go or a development build.

### `Updates.checkAutomatically`

Type: `[UpdatesCheckAutomaticallyValue](#updatescheckautomaticallyvalue) | null`

Determines if and when `expo-updates` checks for and downloads updates automatically on startup.

### `Updates.createdAt`

Type: `[Date | null`

If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).

In development mode, or any other environment in which `expo-updates` is disabled, this value is null.

### `Updates.emergencyLaunchReason`

Type: `null | string`

If `isEmergencyLaunch` is set to true, this will contain a string error message describing what failed during initialization.

### `Updates.isEmbeddedLaunch`

Type: `boolean`

This will be true if the currently running update is the one embedded in the build, and not one downloaded from the updates server.

### `Updates.isEmergencyLaunch`

Type: `boolean`

`expo-updates` does its very best to always launch monotonically newer versions of your app so you don't need to worry about backwards compatibility when you put out an update. In very rare cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in the app binary, even after newer updates have been downloaded and run (an "emergency launch"). This boolean will be `true` if the app is launching under this fallback mechanism and `false` otherwise. If you are concerned about backwards compatibility of future updates to your app, you can use this constant to provide special behavior for this rare case.

### `Updates.isEnabled`

Type: `boolean`

Whether `expo-updates` is enabled. This may be false in a variety of cases including:

*   enabled set to false in configuration
*   missing or invalid URL in configuration
*   missing runtime version or SDK version in configuration
*   error accessing storage on device during initialization

When false, the embedded update is loaded.

### `Updates.manifest`

Type: `[Partial<[Manifest](#manifest)>`

If `expo-updates` is enabled, this is the [manifest (or [classic manifest) object for the update that's currently running.

In development mode, or any other environment in which `expo-updates` is disabled, this object is empty.

### `Updates.runtimeVersion`

Type: `string | null`

The runtime version of the current build.

### `Updates.updateId`

Type: `string | null`

The UUID that uniquely identifies the currently running update. The UUID is represented in its canonical string form and will always use lowercase letters. This value is `null` when running in a local development environment or any other environment where `expo-updates` is disabled.

Example

`"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"`

## Hooks

### `useUpdates()`

Hook that obtains information on available updates and on the currently running update.

Returns:

`[UseUpdatesReturnType](#useupdatesreturntype)`

the structures with information on currently running and available updates.

Example

UpdatesDemo.tsx
```
import { StatusBar } from 'expo-status-bar';
import * as Updates from 'expo-updates';
import { useEffect } from 'react';
import { Button, Text, View } from 'react-native';

export default function UpdatesDemo() {
  const {
```
currentlyRunning,
isUpdateAvailable,
isUpdatePending
```
  } = Updates.useUpdates();

  useEffect(() => {
```
if (isUpdatePending) {
  // Update has successfully downloaded; apply it now
  Updates.reloadAsync();
}
```
  }, [isUpdatePending]);

  // If true, we show the button to download and run the update
  const showDownloadButton = isUpdateAvailable;

  // Show whether or not we are running embedded code or an update
  const runTypeMessage = currentlyRunning.isEmbeddedLaunch
```
? 'This app is running from built-in code'
: 'This app is running an update';
```

  return (
```
<View style={styles.container}>
  <Text style={styles.headerText}>Updates Demo</Text>
  <Text>{runTypeMessage}</Text>
  <Button onPress={() => Updates.checkForUpdateAsync()} title="Check manually for updates" />
  {showDownloadButton ? (
    <Button onPress={() => Updates.fetchUpdateAsync()} title="Download and run update" />
  ) : null}
  <StatusBar style="auto" />
</View>
```
  );
}
```

## Methods

### `Updates.checkForUpdateAsync()`

Checks the server to see if a newly deployed update to your project is available. Does not actually download the update. This method cannot be used in development mode, and the returned promise will be rejected if you try to do so.

Checking for an update uses a device's bandwidth and battery life like any network call. Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for updates in a frequent loop.

Returns:

`[Promise<[UpdateCheckResult](#updatecheckresult)>`

A promise that fulfills with an `UpdateCheckResult` object.

The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or timeout communicating with the server. It also rejects when `expo-updates` is not enabled.

### `Updates.clearLogEntriesAsync()`

Clears existing `expo-updates` log entries.

> For now, this operation does nothing on the client. Once log persistence has been implemented, this operation will actually remove existing logs.

Returns:

`[Promise<void>`

A promise that fulfills if the clear operation was successful.

The promise rejects if there is an unexpected error in clearing the logs.

### `Updates.fetchUpdateAsync()`

Downloads the most recently deployed update to your project from server to the device's local storage. This method cannot be used in development mode, and the returned promise will be rejected if you try to do so.

> Note: `reloadAsync()` can be called after promise resolution to reload the app using the most recently downloaded version. Otherwise, the update will be applied on the next app cold start.

Returns:

`[Promise<[UpdateFetchResult](#updatefetchresult)>`

A promise that fulfills with an `UpdateFetchResult` object.

The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or timeout communicating with the server. It also rejects when `expo-updates` is not enabled.

### `Updates.getExtraParamsAsync()`

Retrieves the current extra params.

This method cannot be used in Expo Go or development mode. It also rejects when `expo-updates` is not enabled.

Returns:

`[Promise<Record<string, string>>`

### `Updates.readLogEntriesAsync(maxAge)`

| Parameter | Type | Description |
| --- | --- | --- |
| maxAge(optional) | `number` |
Sets the max age of retrieved log entries in milliseconds. Default to `3600000` ms (1 hour).

Default:`3600000`

 |

Retrieves the most recent `expo-updates` log entries.

Returns:

`[Promise<[UpdatesLogEntry](#updateslogentry)>`

A promise that fulfills with an array of `UpdatesLogEntry` objects;

The promise rejects if there is an unexpected error in retrieving the logs.

### `Updates.reloadAsync()`

Instructs the app to reload using the most recently downloaded version. This is useful for triggering a newly downloaded update to launch without the user needing to manually restart the app. Unlike `Expo.reloadAppAsync()` provided by the `expo` package, this function not only reloads the app but also changes the loaded JavaScript bundle to that of the most recently downloaded update.

It is not recommended to place any meaningful logic after a call to `await Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can be reloaded, and immediately before posting an asynchronous task to the main thread to actually reload the app. It is unsafe to make any assumptions about whether any more JS code will be executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and the state of the native module and main threads.

This method cannot be used in Expo Go or development mode, and the returned promise will be rejected if you try to do so. It also rejects when `expo-updates` is not enabled.

Returns:

`[Promise<void>`

A promise that fulfills right before the reload instruction is sent to the JS runtime, or rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production mode, it most likely means you have installed the module incorrectly. Double check you've followed the installation instructions. In particular, on iOS ensure that you set the `bridge` property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on Android ensure you either call `UpdatesController.initialize` with the instance of `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the proper instance of `ReactNativeHost`.

### `Updates.setExtraParamAsync(key, value)`

| Parameter | Type |
| --- | --- |
| key | `string` |
| value | `undefined | null | string` |

Sets an extra param if value is non-null, otherwise unsets the param. Extra params are sent as an [Expo Structured Field Value Dictionary in the `Expo-Extra-Params` header of update requests. A compliant update server may use these params when selecting an update to serve.

This method cannot be used in Expo Go or development mode. It also rejects when `expo-updates` is not enabled.

Returns:

`[Promise<void>`

## Interfaces

### `ExpoUpdatesModule`

Extends: `[Pick<ProxyNativeModule, 'addListener' | 'removeListeners'>`

| Property | Type | Description |
| --- | --- | --- |
| channel | `string` |
Can be empty string

 |
| checkAutomatically | `string` |

\-

 |
| checkForUpdateAsync | `() => [Promise<[UpdateCheckResultRollBack](#updatecheckresultrollback) | [UpdateCheckResultNotAvailable](#updatecheckresultnotavailable) | Omit<UpdateCheckResultAvailable, "manifest"> & ({ manifestString: string; } | { manifest: Manifest; })>` |

\-

 |
| clearLogEntriesAsync | `() => [Promise<void>` |

\-

 |
| commitTime(optional) | `string` |

\-

 |
| emergencyLaunchReason | `null | string` |

\-

 |
| fetchUpdateAsync | `() => [Promise<[UpdateFetchResultFailure](#updatefetchresultfailure) | [UpdateFetchResultRollBackToEmbedded](#updatefetchresultrollbacktoembedded) | Omit<UpdateFetchResultSuccess, "manifest"> & ({ manifestString: string; } | { manifest: Manifest; })>` |

\-

 |
| getExtraParamsAsync | `() => [Promise<Record<string, string>>` |

\-

 |
| isEmbeddedLaunch | `boolean` |

\-

 |
| isEmergencyLaunch | `boolean` |

\-

 |
| isEnabled | `boolean` |

\-

 |
| isUsingEmbeddedAssets(optional) | `boolean` |

\-

 |
| localAssets(optional) | `Record<string, string>` |

\-

 |
| manifest(optional) | `[Manifest](#manifest)` |

Only for: iOS

\-

 |
| manifestString(optional) | `string` |

Only for: Android

\-

 |
| readLogEntriesAsync | `(maxAge: number) => [Promise<[UpdatesLogEntry](#updateslogentry)>` |

\-

 |
| reload | `() => [Promise<void>` |

\-

 |
| runtimeVersion | `string` |

Can be empty string

 |
| setExtraParamAsync | `(key: string, value: null | string) => [Promise<void>` |

\-

 |
| shouldDeferToNativeForAPIMethodAvailabilityInDevelopment | `boolean` |

\-

 |
| updateId(optional) | `string` |

\-

 |

## Types

### `CurrentlyRunningInfo`

Structure encapsulating information on the currently running app (either the embedded bundle or a downloaded update).

| Property | Type | Description |
| --- | --- | --- |
| channel(optional) | `string` |
The channel name of the current build, if configured for use with EAS Update, `undefined` otherwise.

 |
| createdAt(optional) | `[Date` |

If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).

In development mode, or any other environment in which `expo-updates` is disabled, this value is undefined.

 |
| emergencyLaunchReason | `string | null` |

If `isEmergencyLaunch` is set to true, this will contain a string error message describing what failed during initialization.

 |
| isEmbeddedLaunch | `boolean` |

This will be true if the currently running update is the one embedded in the build, and not one downloaded from the updates server.

 |
| isEmergencyLaunch | `boolean` |

`expo-updates` does its very best to always launch monotonically newer versions of your app so you don't need to worry about backwards compatibility when you put out an update. In very rare cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in the app binary, even after newer updates have been downloaded and run (an "emergency launch"). This boolean will be `true` if the app is launching under this fallback mechanism and `false` otherwise. If you are concerned about backwards compatibility of future updates to your app, you can use this constant to provide special behavior for this rare case.

 |
| manifest(optional) | `[Partial<[Manifest](#manifest)>` |

If `expo-updates` is enabled, this is the [manifest object for the update that's currently running.

In development mode, or any other environment in which `expo-updates` is disabled, this object is empty.

 |
| runtimeVersion(optional) | `string` |

The runtime version of the current build.

 |
| updateId(optional) | `string` |

The UUID that uniquely identifies the currently running update if `expo-updates` is enabled. The UUID is represented in its canonical string form and will always use lowercase letters. In development mode, or any other environment in which `expo-updates` is disabled, this value is undefined.

Example

`"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"`

 |

### `Manifest`

Literal Type: `union`

Acceptable values are: `[ExpoUpdatesManifest` | `[EmbeddedManifest`

### `UpdateCheckResult`

Literal Type: `union`

The result of checking for a new update.

Acceptable values are: `[UpdateCheckResultRollBack](#updatecheckresultrollback)` | `[UpdateCheckResultAvailable](#updatecheckresultavailable)` | `[UpdateCheckResultNotAvailable](#updatecheckresultnotavailable)`

### `UpdateCheckResultAvailable`

The update check result when a new update is found on the server.

| Property | Type | Description |
| --- | --- | --- |
| isAvailable | `true` |
Whether an update is available. This property is false for a roll back update.

 |
| isRollBackToEmbedded | `false` |

Whether a roll back to embedded update is available.

 |
| manifest | `[Manifest](#manifest)` |

The manifest of the update when available.

 |
| reason | `undefined` |

If no new update is found, this contains one of several enum values indicating the reason.

 |

> Deprecated

### `UpdateCheckResultFailure`

Type: `[UpdateCheckResultNotAvailable](#updatecheckresultnotavailable)`

### `UpdateCheckResultNotAvailable`

The update check result if no new update was found.

| Property | Type | Description |
| --- | --- | --- |
| isAvailable | `false` |
Whether an update is available. This property is false for a roll back update.

 |
| isRollBackToEmbedded | `false` |

Whether a roll back to embedded update is available.

 |
| manifest | `undefined` |

The manifest of the update when available.

 |
| reason | `[UpdateCheckResultNotAvailableReason](#updatecheckresultnotavailablereason)` |

If no new update is found, this contains one of several enum values indicating the reason.

 |

### `UpdateCheckResultRollBack`

The update check result when a rollback directive is received.

| Property | Type | Description |
| --- | --- | --- |
| isAvailable | `false` |
Whether an update is available. This property is false for a roll back update.

 |
| isRollBackToEmbedded | `true` |

Whether a roll back to embedded update is available.

 |
| manifest | `undefined` |

The manifest of the update when available.

 |
| reason | `undefined` |

If no new update is found, this contains one of several enum values indicating the reason.

 |

> Deprecated

### `UpdateCheckResultSuccess`

Type: `[UpdateCheckResultAvailable](#updatecheckresultavailable)`

### `UpdateFetchResult`

Literal Type: `union`

The result of fetching a new update.

Acceptable values are: `[UpdateFetchResultSuccess](#updatefetchresultsuccess)` | `[UpdateFetchResultFailure](#updatefetchresultfailure)` | `[UpdateFetchResultRollBackToEmbedded](#updatefetchresultrollbacktoembedded)`

### `UpdateFetchResultFailure`

The failed result of fetching a new update.

| Property | Type | Description |
| --- | --- | --- |
| isNew | `false` |
Whether the fetched update is new (that is, a different version than what's currently running). Always `false` when `isRollBackToEmbedded` is `true`.

 |
| isRollBackToEmbedded | `false` |

Whether the fetched update is a roll back to the embedded update.

 |
| manifest | `undefined` |

The manifest of the fetched update.

 |

### `UpdateFetchResultRollBackToEmbedded`

The roll back to embedded result of fetching a new update.

| Property | Type | Description |
| --- | --- | --- |
| isNew | `false` |
Whether the fetched update is new (that is, a different version than what's currently running). Always `false` when `isRollBackToEmbedded` is `true`.

 |
| isRollBackToEmbedded | `true` |

Whether the fetched update is a roll back to the embedded update.

 |
| manifest | `undefined` |

The manifest of the fetched update.

 |

### `UpdateFetchResultSuccess`

The successful result of fetching a new update.

| Property | Type | Description |
| --- | --- | --- |
| isNew | `true` |
Whether the fetched update is new (that is, a different version than what's currently running). Always `true` when `isRollBackToEmbedded` is `false`.

 |
| isRollBackToEmbedded | `false` |

Whether the fetched update is a roll back to the embedded update.

 |
| manifest | `[Manifest](#manifest)` |

The manifest of the fetched update.

 |

### `UpdateInfo`

Literal Type: `union`

Combined structure representing any type of update.

Acceptable values are: `[UpdateInfoNew](#updateinfonew)` | `[UpdateInfoRollback](#updateinforollback)`

### `UpdateInfoNew`

Structure representing a new update.

| Property | Type | Description |
| --- | --- | --- |
| createdAt | `[Date` |
For all types of updates, this is a `Date` object representing the creation time or commit time of the update.

 |
| manifest | `[Manifest](#manifest)` |

For updates of type `UpdateInfoType.NEW`, this is the [manifest for the update.

 |
| type | `UpdateInfoType.NEW` |

The type of update.

 |
| updateId | `string` |

For updates of type `UpdateInfoType.NEW`, this is a string that uniquely identifies the update. For the manifests used in the current Expo Updates protocol (including EAS Update), this represents the update's UUID in its canonical string form and will always use lowercase letters.

Example

`"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"`

 |

### `UpdateInfoRollback`

Structure representing a rollback directive.

| Property | Type | Description |
| --- | --- | --- |
| createdAt | `[Date` |
For all types of updates, this is a `Date` object representing the creation time or commit time of the update.

 |
| manifest | `undefined` |

For updates of type `UpdateInfoType.ROLLBACK`, this is always set to `undefined`.

 |
| type | `UpdateInfoType.ROLLBACK` |

The type of update.

 |
| updateId | `undefined` |

For updates of type `UpdateInfoType.ROLLBACK`, this is always set to `undefined`.

 |

### `UpdatesLogEntry`

An object representing a single log entry from `expo-updates` logging on the client.

| Property | Type | Description |
| --- | --- | --- |
| assetId(optional) | `string` |
If present, the unique ID or hash of an asset associated with this log entry.

 |
| code | `[UpdatesLogEntryCode](#updateslogentrycode)` |

One of the defined code values for `expo-updates` log entries.

 |
| level | `[UpdatesLogEntryLevel](#updateslogentrylevel)` |

One of the defined log level or severity values.

 |
| message | `string` |

The log entry message.

 |
| stacktrace(optional) | `string` |

If present, an Android or iOS native stack trace associated with this log entry.

 |
| timestamp | `number` |

The time the log was written, in milliseconds since Jan 1 1970 UTC.

 |
| updateId(optional) | `string` |

If present, the unique ID of an update associated with this log entry.

 |

### `UseUpdatesReturnType`

The structures and methods returned by `useUpdates()`.

| Property | Type | Description |
| --- | --- | --- |
| availableUpdate(optional) | `[UpdateInfo](#updateinfo)` |
If a new available update has been found, either by using `checkForUpdateAsync()`, or by the `UpdateEvent` listener in `useUpdates()`, this will contain the information for that update.

 |
| checkError(optional) | `[Error` |

If an error is returned from either the startup check for updates, or a call to `checkForUpdateAsync()`, the error description will appear here.

 |
| currentlyRunning | `[CurrentlyRunningInfo](#currentlyrunninginfo)` |

Information on the currently running app.

 |
| downloadError(optional) | `[Error` |

If an error is returned from either a startup update download, or a call to `fetchUpdateAsync()`, the error description will appear here.

 |
| downloadedUpdate(optional) | `[UpdateInfo](#updateinfo)` |

If an available update has been downloaded, this will contain the information for that update.

 |
| initializationError(optional) | `[Error` |

If an error occurs during initialization of `useUpdates()`, the error description will appear here.

 |
| isChecking | `boolean` |

True if the app is currently checking for a new available update from the server.

 |
| isDownloading | `boolean` |

True if the app is currently downloading an update from the server.

 |
| isUpdateAvailable | `boolean` |

True if a new available update has been found, false otherwise.

 |
| isUpdatePending | `boolean` |

True if a new available update is available and has been downloaded.

 |
| lastCheckForUpdateTimeSinceRestart(optional) | `[Date` |

A `Date` object representing the last time this client checked for an available update, or `undefined` if no check has yet occurred since the app started. Does not persist across app reloads or restarts.

 |

## Enums

### `UpdateCheckResultNotAvailableReason`

#### `NO_UPDATE_AVAILABLE_ON_SERVER`

`UpdateCheckResultNotAvailableReason.NO_UPDATE_AVAILABLE_ON_SERVER ＝ "noUpdateAvailableOnServer"`

No update manifest or rollback directive received from the update server.

#### `ROLLBACK_NO_EMBEDDED`

`UpdateCheckResultNotAvailableReason.ROLLBACK_NO_EMBEDDED ＝ "rollbackNoEmbeddedConfiguration"`

A rollback directive was received from the update server, but this app has no embedded update.

#### `ROLLBACK_REJECTED_BY_SELECTION_POLICY`

`UpdateCheckResultNotAvailableReason.ROLLBACK_REJECTED_BY_SELECTION_POLICY ＝ "rollbackRejectedBySelectionPolicy"`

A rollback directive was received from the update server, but the directive does not pass the configured selection policy.

#### `UPDATE_PREVIOUSLY_FAILED`

`UpdateCheckResultNotAvailableReason.UPDATE_PREVIOUSLY_FAILED ＝ "updatePreviouslyFailed"`

An update manifest was received from the update server, but the update has been previously launched on this device and never successfully launched.

#### `UPDATE_REJECTED_BY_SELECTION_POLICY`

`UpdateCheckResultNotAvailableReason.UPDATE_REJECTED_BY_SELECTION_POLICY ＝ "updateRejectedBySelectionPolicy"`

An update manifest was received from the update server, but the update is not launchable, or does not pass the configured selection policy.

### `UpdateInfoType`

The different possible types of updates. Currently, the only supported type is `UpdateInfoType.NEW`, indicating a new update that can be downloaded and launched on the device. In the future, other types of updates may be added to this list.

#### `NEW`

`UpdateInfoType.NEW ＝ "new"`

This is the type for new updates found on or downloaded from the update server, that are launchable on the device.

#### `ROLLBACK`

`UpdateInfoType.ROLLBACK ＝ "rollback"`

This type is used when an update is a directive to roll back to the embedded bundle.

### `UpdatesCheckAutomaticallyValue`

The possible settings that determine if `expo-updates` will check for updates on app startup. By default, Expo will check for updates every time the app is loaded. Set this to `ON_ERROR_RECOVERY` to disable automatic checking unless recovering from an error. Set this to `NEVER` to completely disable automatic checking.

#### `NEVER`

`UpdatesCheckAutomaticallyValue.NEVER ＝ "NEVER"`

Automatic update checks are off, and update checks must be done through the JS API.

#### `ON_ERROR_RECOVERY`

`UpdatesCheckAutomaticallyValue.ON_ERROR_RECOVERY ＝ "ON_ERROR_RECOVERY"`

Only checks for updates when the app starts up after an error recovery.

#### `ON_LOAD`

`UpdatesCheckAutomaticallyValue.ON_LOAD ＝ "ON_LOAD"`

Checks for updates whenever the app is loaded. This is the default setting.

#### `WIFI_ONLY`

`UpdatesCheckAutomaticallyValue.WIFI_ONLY ＝ "WIFI_ONLY"`

Only checks for updates when the app starts and has a Wi-Fi connection.

### `UpdatesLogEntryCode`

The possible code values for `expo-updates` log entries

#### `ASSETS_FAILED_TO_LOAD`

`UpdatesLogEntryCode.ASSETS_FAILED_TO_LOAD ＝ "AssetsFailedToLoad"`

#### `INITIALIZATION_ERROR`

`UpdatesLogEntryCode.INITIALIZATION_ERROR ＝ "InitializationError"`

#### `JS_RUNTIME_ERROR`

`UpdatesLogEntryCode.JS_RUNTIME_ERROR ＝ "JSRuntimeError"`

#### `NONE`

`UpdatesLogEntryCode.NONE ＝ "None"`

#### `NO_UPDATES_AVAILABLE`

`UpdatesLogEntryCode.NO_UPDATES_AVAILABLE ＝ "NoUpdatesAvailable"`

#### `UNKNOWN`

`UpdatesLogEntryCode.UNKNOWN ＝ "Unknown"`

#### `UPDATE_ASSETS_NOT_AVAILABLE`

`UpdatesLogEntryCode.UPDATE_ASSETS_NOT_AVAILABLE ＝ "UpdateAssetsNotAvailable"`

#### `UPDATE_CODE_SIGNING_ERROR`

`UpdatesLogEntryCode.UPDATE_CODE_SIGNING_ERROR ＝ "UpdateCodeSigningError"`

#### `UPDATE_FAILED_TO_LOAD`

`UpdatesLogEntryCode.UPDATE_FAILED_TO_LOAD ＝ "UpdateFailedToLoad"`

#### `UPDATE_HAS_INVALID_SIGNATURE`

`UpdatesLogEntryCode.UPDATE_HAS_INVALID_SIGNATURE ＝ "UpdateHasInvalidSignature"`

#### `UPDATE_SERVER_UNREACHABLE`

`UpdatesLogEntryCode.UPDATE_SERVER_UNREACHABLE ＝ "UpdateServerUnreachable"`

### `UpdatesLogEntryLevel`

The possible log levels for `expo-updates` log entries

#### `DEBUG`

`UpdatesLogEntryLevel.DEBUG ＝ "debug"`

#### `ERROR`

`UpdatesLogEntryLevel.ERROR ＝ "error"`

#### `FATAL`

`UpdatesLogEntryLevel.FATAL ＝ "fatal"`

#### `INFO`

`UpdatesLogEntryLevel.INFO ＝ "info"`

#### `TRACE`

`UpdatesLogEntryLevel.TRACE ＝ "trace"`

#### `WARN`

`UpdatesLogEntryLevel.WARN ＝ "warn"`

## Error codes

| Code | Description |
| --- | --- |
| `ERR_UPDATES_DISABLED` | A method call was attempted when the Updates library was disabled, or the application was running in development mode |
| `ERR_UPDATES_RELOAD` | An error occurred when trying to reload the application and it could not be reloaded. For bare React Native apps, double-check the setup steps for this library to ensure it has been installed correctly and the proper native initialization methods are called. |
| `ERR_UPDATES_CHECK` | An unexpected error occurred when trying to check for new updates. Check the error message for more information. |
| `ERR_UPDATES_FETCH` | An unexpected error occurred when trying to fetch a new update. Check the error message for more information. |
| `ERR_UPDATES_READ_LOGS` | An unexpected error occurred when trying to read log entries. Check the error message for more information. |
| `ERR_NOT_AVAILABLE_IN_DEV_CLIENT` | A method is not available when running in a development build. A release build should be used to test this method. |

---

# URL

Standard URL API available on all Expo-supported platforms.

The standard URL API is available on all Expo-supported platforms.

## Installation

This API is part of the `expo` package. On native platforms, built-in `URL` and `URLSearchParams` implementations replace the shims in `react-native`. Refer to the [browser and server runtime support for web and Node.js.

## Usage

```
const url = new URL('https://expo.dev');

const params = new URLSearchParams();
```

## Conformance

Expo's built-in URL support attempts to be fully [spec compliant.

The only missing exception is that native platforms do not currently support [non-ASCII characters in the hostname.

Consider the following example:

```
console.log(new URL('http://🥓').toString());
```

This outputs the following:

*   Web, Node.js: `http://xn--pr9h/`
*   Android, iOS: `http://🥓/`

---

# Expo Video (expo-av)

> The `Video` component from `expo-av`, which is documented on this page, will be replaced by an improved version in `expo-video` in an upcoming release when the new library is stable. [Learn about `expo-video`.

The `Video` component from `expo-av` displays a video inline with the other UI elements in your app.

Much of Video and Audio have common APIs that are documented in [AV documentation. This page covers video-specific props and APIs. We encourage you to skim through this document to get basic video working, and then move on to [AV documentation for more advanced functionality. The audio experience of video (such as whether to interrupt music already playing in another app, or whether to play sound while the phone is on silent mode) can be customized using the [Audio API.

## Installation

`npx expo install expo-av`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Here's a simple example of a video with a play/pause button.

Video

```
import { useState, useRef } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Video, ResizeMode } from 'expo-av';

export default function App() {
  const video = useRef(null);
  const [status, setStatus] = useState({});
  return (
```
<View style={styles.container}>
  <Video
    ref={video}
    style={styles.video}
    source={{
      uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
    }}
    useNativeControls
    resizeMode={ResizeMode.CONTAIN}
    isLooping
    onPlaybackStatusUpdate={status => setStatus(() => status)}
  />
  <View style={styles.buttons}>
    <Button
      title={status.isPlaying ? 'Pause' : 'Play'}
      onPress={() =>
        status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()
      }
    />
  </View>
</View>
```
  );
}

%%placeholder-start%%const styles = StyleSheet.create({ ... }); %%placeholder-end%%const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
backgroundColor: '#ecf0f1',
```
  },
  video: {
```
alignSelf: 'center',
width: 320,
height: 200,
```
  },
  buttons: {
```
flexDirection: 'row',
justifyContent: 'center',
alignItems: 'center',
```
  },
});
```

For more advanced examples, check out the [Playlist example, and the [custom `VideoPlayer` controls component that wraps `<Video>`, adds custom controls and use the `<Video>` API extensively. The `VideoPlayer` controls is used in [this app.

## API

```
import { Video } from 'expo-av';
```

## Component

### `Video`

Type: `React.[Component<[VideoProps](#videoprops), [VideoState](#videostate)>`

The Video component props can be divided into following groups:

*   The `source` and `posterSource` props customize the source of the video content.
*   The `useNativeControls`, `resizeMode`, and `usePoster` props customize the UI of the component.
*   The `onPlaybackStatusUpdate`, `onReadyForDisplay`, and `onIOSFullscreenUpdate` props pass information of the state of the `Video` component.
*   The `onLoadStart`, `onLoad`, and `onError` props are also provided for backwards compatibility with `Image` (but they are redundant with `onPlaybackStatusUpdate`). Finally, the rest of props are available to control the playback of the video, but we recommend that, for finer control, you use the methods available on the `ref` described in the [AV documentation.

VideoProps

### `PosterComponent`

Optional Type: `React.ComponentType<{ source: ImageProps[source], style: ImageProps[style] }>`

A react-native `Image` like component to display the poster image.

### `audioPan`

Optional Type: `number`

The desired audio panning value of the audio for this media. This value must be between `-1.0` (full left) and `1.0` (full right). See the [AV documentation for more information.

### `isLooping`

Optional Type: `boolean`

A boolean describing if the media should play once (`false`) or loop indefinitely (`true`). See the [AV documentation for more information.

### `isMuted`

Optional Type: `boolean`

A boolean describing if the audio of this media should be muted. See the [AV documentation for more information.

### `onError`

Optional Type: `(error: string) => void`

A function to be called if load or playback have encountered a fatal error. The function is passed a single error message string as a parameter. Errors sent here are also set on `playbackStatus.error` that are passed into the `onPlaybackStatusUpdate` callback.

### `onFullscreenUpdate`

Optional Type: `(event: [VideoFullscreenUpdateEvent](#videofullscreenupdateevent)) => void`

A function to be called when the state of the native iOS fullscreen view changes (controlled via the `presentFullscreenPlayer()` and `dismissFullscreenPlayer()` methods on the `Video`'s `ref`).

### `onLoad`

Optional Type: `(status: [AVPlaybackStatus) => void`

A function to be called once the video has been loaded. The data is streamed so all of it may not have been fetched yet, just enough to render the first frame. The function is called with the `AVPlaybackStatus` of the video as its parameter. See the [AV documentation for further information.

### `onLoadStart`

Optional Type: `() => void`

A function to be called when the video begins to be loaded into memory. Called without any arguments.

### `onPlaybackStatusUpdate`

Optional Type: `(status: [AVPlaybackStatus) => void`

A function to be called regularly with the `AVPlaybackStatus` of the video. You will likely be using this a lot. See the [AV documentation for further information on `onPlaybackStatusUpdate`, and the interval at which it is called.

### `onReadyForDisplay`

Optional Type: `(event: [VideoReadyForDisplayEvent](#videoreadyfordisplayevent)) => void`

A function to be called when the video is ready for display. Note that this function gets called whenever the video's natural size changes.

### `positionMillis`

Optional Type: `number`

The desired position of playback in milliseconds. See the [AV documentation for more information.

### `posterSource`

Optional Type: `ImageProps[source]`

The source of an optional image to display over the video while it is loading. The following forms are supported:

*   A dictionary of the form `{ uri: 'http://path/to/file' }` with a network URL pointing to an image file on the web.
*   `require('path/to/file')` for an image file asset in the source code directory.

### `posterStyle`

Optional Type: `ImageProps[style]`

An optional property to pass custom styles to the poster image.

### `progressUpdateIntervalMillis`

Optional Type: `number`

A number describing the new minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`. See the [AV documentation for more information.

### `rate`

Optional Type: `number`

The desired playback rate of the media. This value must be between `0.0` and `32.0`. Only available on Android API version 23 and later and iOS. See the [AV documentation for more information.

### `resizeMode`

Optional Type: `[ResizeMode](#resizemode)`

A string describing how the video should be scaled for display in the component view bounds. Must be one of the `ResizeMode` enum values.

### `shouldCorrectPitch`

Optional Type: `boolean`

A boolean describing if we should correct the pitch for a changed rate. If set to `true`, the pitch of the audio will be corrected (so a rate different than `1.0` will timestretch the audio). See the [AV documentation for more information.

### `shouldPlay`

Optional Type: `boolean`

A boolean describing if the media is supposed to play. Playback may not start immediately after setting this value for reasons such as buffering. Make sure to update your UI based on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`. See the [AV documentation for more information.

### `source`

Optional Type: `[AVPlaybackSource`

The source of the video data to display. If this prop is `null`, or left blank, the video component will display nothing. Note that this can also be set on the `ref` via `loadAsync()`. See the [AV documentation for further information.

> See: The [Android developer documentation and the [iOS developer documentation lists of the video formats supported on Android and iOS.

### `status`

Optional Type: `[AVPlaybackStatusToSet`

A dictionary setting a new `AVPlaybackStatusToSet` on the video. See the [AV documentation for more information on `AVPlaybackStatusToSet`.

### `useNativeControls`

Optional Type: `boolean`

A boolean which, if set to `true`, will display native playback controls (such as play and pause) within the `Video` component. If you'd prefer to use custom controls, you can write them yourself, and/or check out the [`VideoPlayer` component.

### `usePoster`

Optional Type: `boolean`

A boolean which, if set to `true`, will display an image (whose source is set via the prop `posterSource`) while the video is loading.

### `videoStyle`

Optional Type: `StyleProp<[ViewStyle>`

An optional property to pass custom styles to the internal video component.

### `volume`

Optional Type: `number`

The desired volume of the audio for this media. This value must be between `0.0` (silence) and `1.0` (maximum volume). See the [AV documentation for more information.

#### Inherited Props

*   `[ViewProps`

## Component Methods

### `dismissFullscreenPlayer()`

This dismisses the fullscreen video view.

Returns:

`[Promise<[AVPlaybackStatus>`

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing, or rejects if there was an error, or if this was called on an Android device.

### `presentFullscreenPlayer()`

This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`, native controls will be visible in fullscreen mode.

Returns:

`[Promise<[AVPlaybackStatus>`

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting, or rejects if there was an error, or if this was called on an Android device.

### `setOnPlaybackStatusUpdate(onPlaybackStatusUpdate)`

| Parameter | Type | Description |
| --- | --- | --- |
| onPlaybackStatusUpdate | `null | (status: [AVPlaybackStatus) => void` |
A function taking a single parameter `AVPlaybackStatus`.

 |

Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.

`onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals while the media is in the loaded state.

Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify the interval with which `onPlaybackStatusUpdate` is called while loaded.

Returns:

`void`

## Types

### `VideoFullscreenUpdateEvent`

| Property | Type | Description |
| --- | --- | --- |
| fullscreenUpdate | `[VideoFullscreenUpdate](#videofullscreenupdate)` |
The kind of the fullscreen update.

 |
| status(optional) | `[AVPlaybackStatus` |

The `AVPlaybackStatus` of the video. See the [AV documentation for further information.

 |

### `VideoNaturalSize`

| Property | Type | Description |
| --- | --- | --- |
| height | `number` |
A number describing the height in pixels of the video data.

 |
| orientation | `'portrait' | 'landscape'` |

A string describing the natural orientation of the video data.

 |
| width | `number` |

A number describing the width in pixels of the video data.

 |

### `VideoReadyForDisplayEvent`

| Property | Type | Description |
| --- | --- | --- |
| naturalSize | `[VideoNaturalSize](#videonaturalsize)` |
An object containing the basic data about video size.

 |
| status(optional) | `[AVPlaybackStatus` |

The `AVPlaybackStatus` of the video. See the [AV documentation for further information.

 |

### `VideoState`

| Property | Type | Description |
| --- | --- | --- |
| showPoster | `boolean` |
\-

 |

## Enums

### `ResizeMode`

#### `CONTAIN`

`ResizeMode.CONTAIN ＝ "contain"`

Fit within component bounds while preserving aspect ratio.

#### `COVER`

`ResizeMode.COVER ＝ "cover"`

Fill component bounds while preserving aspect ratio.

#### `STRETCH`

`ResizeMode.STRETCH ＝ "stretch"`

Stretch to fill component bounds.

### `VideoFullscreenUpdate`

#### `PLAYER_WILL_PRESENT`

`VideoFullscreenUpdate.PLAYER_WILL_PRESENT ＝ 0`

Describing that the fullscreen player is about to present.

#### `PLAYER_DID_PRESENT`

`VideoFullscreenUpdate.PLAYER_DID_PRESENT ＝ 1`

Describing that the fullscreen player just finished presenting.

#### `PLAYER_WILL_DISMISS`

`VideoFullscreenUpdate.PLAYER_WILL_DISMISS ＝ 2`

Describing that the fullscreen player is about to dismiss.

#### `PLAYER_DID_DISMISS`

`VideoFullscreenUpdate.PLAYER_DID_DISMISS ＝ 3`

Describing that the fullscreen player just finished dismissing.

## Unified API

The rest of the API on the `Video` component `ref` is the same as the API for `Audio.Sound` - see the [AV documentation for further information.

---

# Expo VideoThumbnails

`expo-video-thumbnails` allows you to generate an image to serve as a thumbnail from a video file.

## Installation

`npx expo install expo-video-thumbnails`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Video Thumbnails

```
import { useState } from 'react';
import { StyleSheet, Button, View, Image, Text } from 'react-native';
import * as VideoThumbnails from 'expo-video-thumbnails';

export default function App() {
  const [image, setImage] = useState(null);

  const generateThumbnail = async () => {
```
try {
  const { uri } = await VideoThumbnails.getThumbnailAsync(
    'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
    {
      time: 15000,
    }
  );
  setImage(uri);
} catch (e) {
  console.warn(e);
}
```
  };

  return (
```
<View style={styles.container}>
  <Button onPress={generateThumbnail} title="Generate thumbnail" />
  {image && <Image source={{ uri: image }} style={styles.image} />}
  <Text>{image}</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
justifyContent: 'center',
alignItems: 'center',
backgroundColor: '#F5FCFF',
```
  },
  image: {
```
width: 200,
height: 200,
```
  },
});
```

## API

```
import * as VideoThumbnails from 'expo-video-thumbnails';
```

## Methods

### `VideoThumbnails.getThumbnailAsync(sourceFilename, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| sourceFilename | `string` |
An URI of the video, local or remote.

 |
| options(optional) | `[VideoThumbnailsOptions](#videothumbnailsoptions)` |

A map defining how modified thumbnail should be created.

Default:`{}`

 |

Create an image thumbnail from video provided via `sourceFilename`.

Returns:

`[Promise<[VideoThumbnailsResult](#videothumbnailsresult)>`

Returns a promise which fulfils with `VideoThumbnailsResult`.

## Types

### `VideoThumbnailsOptions`

| Property | Type | Description |
| --- | --- | --- |
| headers(optional) | `Record<string, string>` |
In case `sourceFilename` is a remote URI, `headers` object is passed in a network request.

 |
| quality(optional) | `number` |

A value in range `0.0` - `1.0` specifying quality level of the result image. `1` means no compression (highest quality) and `0` the highest compression (lowest quality).

 |
| time(optional) | `number` |

The time position where the image will be retrieved in ms.

 |

### `VideoThumbnailsResult`

| Property | Type | Description |
| --- | --- | --- |
| height | `number` |
Height of the created image.

 |
| uri | `string` |

URI to the created image (usable as the source for an Image/Video element).

 |
| width | `number` |

Width of the created image.

 |

---

# Expo Video (expo-video)

A library that provides an API to implement video playback in apps.

> `expo-video` is a new, experimental library that aims to replace the `Video` component from `expo-av` with a more modern and reliable implementation. If you are looking for a more stable API, use [`expo-av` until this library has stabilized.

> To provide quicker updates, `expo-video` is currently unsupported in Expo Go and Snack. To use it, create a [development build.

`expo-video` is a cross-platform, performant video component for React Native and Expo with Web support.

## Installation

`npx expo install expo-video`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Here's a simple example of a video with a play and pause button.

Video

```
import { useVideoPlayer, VideoView } from 'expo-video';
import { useEffect, useRef, useState } from 'react';
import { PixelRatio, StyleSheet, View, Button } from 'react-native';

const videoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';

export default function VideoScreen() {
  const ref = useRef(null);
  const [isPlaying, setIsPlaying] = useState(true);
  const player = useVideoPlayer(videoSource, player => {
```
player.loop = true;
player.play();
```
  });

  useEffect(() => {
```
const subscription = player.addListener('playingChange', isPlaying => {
  setIsPlaying(isPlaying);
});
```
return () => {
  subscription.remove();
};
```
  }, [player]);

  return (
```
<View style={styles.contentContainer}>
  <VideoView
    ref={ref}
    style={styles.video}
    player={player}
    allowsFullscreen
    allowsPictureInPicture
  />
  <View style={styles.controlsContainer}>
    <Button
      title={isPlaying ? 'Pause' : 'Play'}
      onPress={() => {
        if (isPlaying) {
          player.pause();
        } else {
          player.play();
        }
        setIsPlaying(!isPlaying);
      }}
    />
  </View>
</View>
```
  );
}

const styles = StyleSheet.create({
  contentContainer: {
```
flex: 1,
padding: 10,
alignItems: 'center',
justifyContent: 'center',
paddingHorizontal: 50,
```
  },
  video: {
```
width: 350,
height: 275,
```
  },
  controlsContainer: {
```
padding: 10,
```
  },
});
```

## API

```
import { VideoView, useVideoPlayer } from 'expo-video';
```

## Component

### `VideoView`

Type: `React.[PureComponent<[VideoViewProps](#videoviewprops)>`

VideoViewProps

### `allowsFullscreen`

Optional Type: `boolean` Default: `true`

Determines whether fullscreen mode is allowed or not.

### `allowsPictureInPicture`

Only for: iOS 14+

Optional Type: `boolean` Default: `false`

Determines whether the player allows Picture in Picture (PiP) mode.

> Note: The `supportsPictureInPicture` property of the [config plugin](#configuration-in-appjsonappconfigjs) has to be configured for the PiP to work.

### `allowsVideoFrameAnalysis`

Only for: iOS 16.0+

Optional Type: `boolean` Default: `true`

Specifies whether to perform video frame analysis (Live Text in videos). Check official [Apple documentation for more details.

### `contentFit`

Optional Type: `[VideoContentFit](#videocontentfit)` Default: `'contain'`

Describes how the video should be scaled to fit in the container. Options are 'contain', 'cover', and 'fill'.

### `contentPosition`

Only for: iOS

Optional Type: `{ dx: number, dy: number }`

Determines the position offset of the video inside the container.

### `nativeControls`

Optional Type: `boolean` Default: `true`

Determines whether native controls should be displayed or not.

### `onFullscreenEnter`

Optional Type: `() => void`

A callback to call after the video player enters fullscreen mode.

### `onFullscreenExit`

Optional Type: `() => void`

A callback to call after the video player exits fullscreen mode.

### `onPictureInPictureStart`

Only for: Android, iOS 14+

Optional Type: `() => void`

A callback to call after the video player enters Picture in Picture (PiP) mode.

### `onPictureInPictureStop`

Only for: Android, iOS 14+

Optional Type: `() => void`

A callback to call after the video player exits Picture in Picture (PiP) mode.

### `player`

Type: `[VideoPlayer](#videoplayer)`

A player instance – use `useVideoPlayer()` to create one.

### `requiresLinearPlayback`

Only for: Android, iOS

Optional Type: `boolean` Default: `false`

Determines whether the player allows the user to skip media content.

### `showsTimecodes`

Only for: iOS

Optional Type: `boolean` Default: `true`

Determines whether the timecodes should be displayed or not.

### `startsPictureInPictureAutomatically`

Only for: Android 12+

iOS 14.2+

Optional Type: `boolean` Default: `false`

Determines whether the player should start Picture in Picture (PiP) automatically when the app is in the background.

> Note: Only one player can be in Picture in Picture (PiP) mode at a time.

> Note: The `supportsPictureInPicture` property of the [config plugin](#configuration-in-appjsonappconfigjs) has to be configured for the PiP to work.

#### Inherited Props

*   `[ViewProps`

## Component Methods

### `enterFullscreen()`

Enters fullscreen mode.

Returns:

`void`

### `exitFullscreen()`

Exits fullscreen mode.

Returns:

`void`

### `startPictureInPicture()`

Only for: Android, iOS 14+

Enters Picture in Picture (PiP) mode. Throws an exception if the device does not support PiP.

> Note: Only one player can be in Picture in Picture (PiP) mode at a time.

> Note: The `supportsPictureInPicture` property of the [config plugin](#configuration-in-appjsonappconfigjs) has to be configured for the PiP to work.

Returns:

`void`

### `stopPictureInPicture()`

Only for: Android, iOS 14+

Exits Picture in Picture (PiP) mode.

Returns:

`void`

## Hooks

### `useVideoPlayer(source, setup)`

| Parameter | Type | Description |
| --- | --- | --- |
| source | `[VideoSource](#videosource)` |
A video source that is used to initialize the player.

 |
| setup(optional) | `(player: [VideoPlayer](#videoplayer)) => void` |

A function that allows setting up the player. It will run after the player is created.

 |

Creates a `VideoPlayer`, which will be automatically cleaned up when the component is unmounted.

Returns:

`[VideoPlayer](#videoplayer)`

## Classes

### `VideoPlayer`

Type: Class extends `[_default](#_default)<[VideoPlayerEvents](#videoplayerevents)>`

A class that represents an instance of the video player.

VideoPlayer Properties

### `currentLiveTimestamp`

Only for: Android, iOS

Read Only Literal type: `union`

The exact timestamp when the currently displayed video frame was sent from the server, based on the `EXT-X-PROGRAM-DATE-TIME` tag in the livestream metadata. If this metadata is missing, this property will return `null`.

> This property is read-only.

Acceptable values are: `null` | `number`

### `currentOffsetFromLive`

Only for: Android, iOS

Read Only Literal type: `union`

Float value indicating the latency of the live stream in seconds. If a livestream doesn't have the required metadata, this will return `null`.

> This property is get-only

Acceptable values are: `null` | `number`

### `currentTime`

Type: `number`

Float value indicating the current playback time in seconds.

If the player is not yet playing, this value indicates the time position at which playback will begin once the `play()` method is called.

Setting `currentTime` to a new value seeks the player to the given time.

### `duration`

Type: `number`

Float value indicating the duration of the current video in seconds.

> This property is get-only

### `isLive`

Type: `boolean`

Boolean value indicating whether the player is currently playing a live stream.

> This property is get-only

### `loop`

Type: `boolean` Default: `false`

Determines whether the player should automatically replay after reaching the end of the video.

### `muted`

Type: `boolean` Default: `false`

Boolean value whether the player is currently muted. Setting this property to `true`/`false` will mute/unmute the player.

### `playbackRate`

Type: `number` Default: `1.0`

Float value between 0 and 16 indicating the current playback speed of the player.

### `playing`

Type: `boolean`

Boolean value whether the player is currently playing.

> This property is get-only, use `play` and `pause` methods to control the playback.

### `preservesPitch`

Only for: Android, iOS

Type: `boolean` Default: `true`

Boolean value indicating if the player should correct audio pitch when the playback speed changes.

> On web, changing this property is not supported, the player will always correct the pitch.

### `showNowPlayingNotification`

Only for: iOS

Type: `boolean` Default: `false`

Boolean value determining whether the player should show the now playing notification.

### `status`

Type: `[VideoPlayerStatus](#videoplayerstatus)`

Indicates the current status of the player.

> This property is get-only

### `staysActiveInBackground`

Only for: Android, iOS

Type: `boolean` Default: `false`

Determines whether the player should continue playing after the app enters the background.

### `targetOffsetFromLive`

Only for: iOS

Type: `number`

Float value indicating the time offset from the live in seconds.

### `volume`

Type: `number` Default: `1.0`

Float value between 0 and 1 representing the current volume. Muting the player doesn't affect the volume. In other words, when the player is muted, the volume is the same as when unmuted. Similarly, setting the volume doesn't unmute the player.

VideoPlayer Methods

### `pause()`

Pauses the player.

Returns:

`void`

### `play()`

Resumes the player.

Returns:

`void`

### `replace(source)`

| Parameter | Type |
| --- | --- |
| source | `[VideoSource](#videosource)` |

Replaces the current source with a new one.

Returns:

`void`

### `replay()`

Seeks the playback to the beginning.

Returns:

`void`

### `seekBy(seconds)`

| Parameter | Type |
| --- | --- |
| seconds | `number` |

Seeks the playback by the given number of seconds.

Returns:

`void`

## Methods

### `Video.isPictureInPictureSupported()`

Only for: Android, iOS

Returns whether the current device supports Picture in Picture (PiP) mode.

Returns:

`boolean`

A `boolean` which is `true` if the device supports PiP mode, and `false` otherwise.

## Types

### `DRMOptions`

Specifies DRM options which will be used by the player while loading the video.

| Property | Type | Description |
| --- | --- | --- |
| base64CertificateData(optional) | `string` |
Only for: iOS

Specifies the base64 encoded certificate data for the FairPlay DRM. When this property is set, the `certificateUrl` property is ignored.

 |
| certificateUrl(optional) | `string` |

Only for: iOS

Specifies the certificate URL for the FairPlay DRM.

 |
| contentId(optional) | `string` |

Only for: iOS

Specifies the content ID of the stream.

 |
| headers(optional) | `undefined` |

Determines headers sent to the license server on license requests.

 |
| licenseServer | `string` |

Determines the license server URL.

 |
| multiKey(optional) | `boolean` |

Only for: Android

Specifies whether the DRM is a multi-key DRM.

 |
| type | `[DRMType](#drmtype)` |

Determines which type of DRM to use.

 |

### `DRMType`

Literal Type: `string`

Specifies which type of DRM to use. Android supports Widevine, PlayReady and ClearKey, iOS supports FairPlay.

Acceptable values are: `'clearkey'` | `'fairplay'` | `'playready'` | `'widevine'`

### `PlayerError`

Contains information about any errors that the player encountered during the playback

| Property | Type | Description |
| --- | --- | --- |
| message | `string` |
\-

 |

### `VideoContentFit`

Literal Type: `string`

Describes how a video should be scaled to fit in a container.

*   `contain`: The video maintains its aspect ratio and fits inside the container, with possible letterboxing/pillarboxing.
*   `cover`: The video maintains its aspect ratio and covers the entire container, potentially cropping some portions.
*   `fill`: The video stretches/squeezes to completely fill the container, potentially causing distortion.

Acceptable values are: `'contain'` | `'cover'` | `'fill'`

### `VideoMetadata`

Contains information that will be displayed in the now playing notification when the video is playing.

| Property | Type | Description |
| --- | --- | --- |
| artist(optional) | `string` |
Secondary text that will be displayed under the title.

 |
| title(optional) | `string` |

The title of the video.

 |

### `VideoPlayerEvents`

Handlers for events which can be emitted by the player.

| Property | Type | Description |
| --- | --- | --- |
| playToEnd | `() => void` |
Handler for an event emitted when the player plays to the end of the current source.

 |
| playbackRateChange | `(newPlaybackRate: number, oldPlaybackRate: number) => void` |

Handler for an event emitted when the `playbackRate` property of the player changes.

 |
| playingChange | `(newIsPlaying: boolean, oldIsPlaying: boolean) => void` |

Handler for an event emitted when the player starts or stops playback.

 |
| sourceChange | `(newSource: [VideoSource](#videosource), previousSource: [VideoSource](#videosource)) => void` |

Handler for an event emitted when the current media source of the player changes.

 |
| statusChange | `(newStatus: [VideoPlayerStatus](#videoplayerstatus), oldStatus: [VideoPlayerStatus](#videoplayerstatus), error?: [PlayerError](#playererror)) => void` |

Handler for an event emitted when the status of the player changes.

 |
| volumeChange | `(newVolume: [VolumeEvent](#volumeevent), oldVolume: [VolumeEvent](#volumeevent)) => void` |

Handler for an event emitted when the `volume` property of the player changes.

 |

### `VideoPlayerStatus`

Literal Type: `string`

Describes the current status of the player.

*   `idle`: The player is not playing or loading any videos.
*   `loading`: The player is loading video data from the provided source
*   `readyToPlay`: The player has loaded enough data to start playing or to continue playback.
*   `error`: The player has encountered an error while loading or playing the video.

Acceptable values are: `'idle'` | `'loading'` | `'readyToPlay'` | `'error'`

### `VideoSource`

Type: `string` or `number` or `null` or `object` shaped as below:

| Property | Type | Description |
| --- | --- | --- |
| assetId(optional) | `number` |
The asset ID of a local video asset, acquired with the `require` function. This property is exclusive with the `uri` property. When both are present, the `assetId` will be ignored.

 |
| drm(optional) | `[DRMOptions](#drmoptions)` |

Specifies the DRM options which will be used by the player while loading the video.

 |
| headers(optional) | `Record<string, string>` |

Only for: Android, iOS

Specifies headers sent with the video request.

> For DRM license headers use the `headers` field of `DRMOptions`.

 |
| metadata(optional) | `[VideoMetadata](#videometadata)` |

Specifies information which will be displayed in the now playing notification. When undefined the player will display information contained in the video metadata.

 |
| uri(optional) | `string` |

The URI of the video.

This property is exclusive with the `assetId` property. When both are present, the `assetId` will be ignored.

 |

### `VolumeEvent`

Contains information about the current volume and whether the player is muted.

| Property | Type | Description |
| --- | --- | --- |
| isMuted | `boolean` |
\-

 |
| volume | `number` |

\-

 |

---

# ViewPager

> This library is listed in the Expo SDK reference because it is included in [Expo Go. You may use any library of your choice with [development builds.

`react-native-pager-view` exposes a component that provides the layout and gestures to scroll between pages of content, like a carousel.

## Installation

`npx expo install react-native-pager-view`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

See full documentation at [callstack/react-native-pager-view.

## Example

App.js

```
import { StyleSheet, View, Text } from 'react-native';
import PagerView from 'react-native-pager-view';

export default function MyPager() {
  return (
```
<View style={styles.container}>
  <PagerView style={styles.container} initialPage={0}>
    <View style={styles.page} key="1">
      <Text>First page</Text>
      <Text>Swipe ➡️</Text>
    </View>
    <View style={styles.page} key="2">
      <Text>Second page</Text>
    </View>
    <View style={styles.page} key="3">
      <Text>Third page</Text>
    </View>
  </PagerView>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
```
  },
  page: {
```
justifyContent: 'center',
alignItems: 'center',
```
  },
});
```

---

# Expo WebBrowser

`expo-web-browser` provides access to the system's web browser and supports handling redirects. On Android, it uses `ChromeCustomTabs` and on iOS, it uses `SFSafariViewController` or `ASWebAuthenticationSession`, depending on the method you call. As of iOS 11, `SFSafariViewController` no longer shares cookies with Safari, so if you are using `WebBrowser` for authentication you will want to use `WebBrowser.openAuthSessionAsync`, and if you just want to open a webpage (such as your app privacy policy), then use `WebBrowser.openBrowserAsync`.

## Installation

`npx expo install expo-web-browser`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project.

## Usage

Basic WebBrowser usage

```
import { useState } from 'react';
import { Button, Text, View, StyleSheet } from 'react-native';
import * as WebBrowser from 'expo-web-browser';
%%placeholder-start%%%%placeholder-end%%import Constants from 'expo-constants';

export default function App() {
  const [result, setResult] = useState(null);

  const _handlePressButtonAsync = async () => {
```
let result = await WebBrowser.openBrowserAsync('https://expo.dev');
setResult(result);
```
  };
  return (
```
<View style={styles.container}>
  <Button title="Open WebBrowser" onPress={_handlePressButtonAsync} />
  <Text>{result && JSON.stringify(result)}</Text>
</View>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
alignItems: 'center',
justifyContent: 'center',
paddingTop: Constants.statusBarHeight,
backgroundColor: '#ecf0f1',
```
  },
});
```

### Handling deep links from the WebBrowser

If your project uses Expo Router, deep links are handled automatically.

If you use the `WebBrowser` window for authentication or another use case where you want to pass information back into your app through a deep link, add a handler with `Linking.addEventListener` before opening the browser. When the listener fires, you should call [`dismissBrowser`. It will not automatically be dismissed when a deep link is handled. Aside from that, redirects from `WebBrowser` work the same as other deep links. Read more about it in [Linking.

## API

```
import * as WebBrowser from 'expo-web-browser';
```

## Methods

### `WebBrowser.coolDownAsync(browserPackage)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| browserPackage(optional) | `string` |
Package of browser to be cooled. If not set, preferred browser will be used.

 |

This methods removes all bindings to services created by `warmUpAsync` or `mayInitWithUrlAsync`. You should call this method once you don't need them to avoid potential memory leaks. However, those binding would be cleared once your application is destroyed, which might be sufficient in most cases.

Returns:

`[Promise<[WebBrowserCoolDownResult](#webbrowsercooldownresult)>`

The promise which fulfils with `WebBrowserCoolDownResult` when cooling is performed, or an empty object when there was no connection to be dismissed.

### `WebBrowser.dismissAuthSession()`

Returns:

`void`

### `WebBrowser.dismissBrowser()`

Only for: iOS

Dismisses the presented web browser.

Returns:

`void`

The `void` on successful attempt, or throws error, if dismiss functionality is not avaiable.

### `WebBrowser.getCustomTabsSupportingBrowsersAsync()`

Only for: Android

Returns a list of applications package names supporting Custom Tabs, Custom Tabs service, user chosen and preferred one. This may not be fully reliable, since it uses `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be present in browserPackages list once another browser is set to default.)

Returns:

`[Promise<[WebBrowserCustomTabsResults](#webbrowsercustomtabsresults)>`

The promise which fulfils with `WebBrowserCustomTabsResults` object.

### `WebBrowser.mayInitWithUrlAsync(url, browserPackage)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
The url of page that is likely to be loaded first when opening browser.

 |
| browserPackage(optional) | `string` |

Package of browser to be informed. If not set, preferred browser will be used.

 |

This method initiates (if needed) [CustomTabsSession and calls its `mayLaunchUrl` method for browser specified by the package.

Returns:

`[Promise<[WebBrowserMayInitWithUrlResult](#webbrowsermayinitwithurlresult)>`

A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.

### `WebBrowser.maybeCompleteAuthSession(options)`

Only for: Web

| Parameter | Type |
| --- | --- |
| options(optional) | `[WebBrowserCompleteAuthSessionOptions](#webbrowsercompleteauthsessionoptions)` |

Possibly completes an authentication session on web in a window popup. The method should be invoked on the page that the window redirects to.

Returns:

`[WebBrowserCompleteAuthSessionResult](#webbrowsercompleteauthsessionresult)`

Returns an object with message about why the redirect failed or succeeded:

If `type` is set to `failed`, the reason depends on the message:

*   `Not supported on this platform`: If the platform doesn't support this method (iOS, Android).
*   `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR or node environment.
*   `No auth session is currently in progress`: (the cached state wasn't found in local storage). This can happen if the window redirects to an origin (website) that is different to the initial website origin. If this happens in development, it may be because the auth started on localhost and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl` and `returnUrl`.
*   `Current URL "<URL>" and original redirect URL "<URL>" do not match`: This can occur when the redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test in development by passing `{ skipRedirectCheck: true }` to the function.

If `type` is set to `success`, the parent window will attempt to close the child window immediately.

If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was reloaded before the auth was completed. In this case you'll need to close the child window manually.

### `WebBrowser.openAuthSessionAsync(url, redirectUrl, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
The url to open in the web browser. This should be a login page.

 |
| redirectUrl(optional) | `null | string` |

_Optional_ - The url to deep link back into your app. On web, this defaults to the output of [`Linking.createURL("")`.

 |
| options(optional) | `[AuthSessionOpenOptions](#authsessionopenoptions)` |

_Optional_ - An object extending the `WebBrowserOpenOptions`. If there is no native AuthSession implementation available (which is the case on Android) these params will be used in the browser polyfill. If there is a native AuthSession implementation, these params will be ignored.

Default:`{}`

 |

#### On Android:

This will be done using a "custom Chrome tabs" browser, [AppState, and [Linking APIs.

#### On iOS:

Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked whether to allow the app to authenticate using the given url. To handle redirection back to the mobile application, the redirect URI set in the authentication server has to use the protocol provided as the scheme in app.json [`expo.scheme`. For example, `demo://` not `https://` protocol. Using `Linking.addEventListener` is not needed and can have side effects.

#### On web:

> This API can only be used in a secure environment (localhost/https). to test this. Otherwise, an error with code `ERR_WEB_BROWSER_CRYPTO` will be thrown. This will use the browser's [`window.open()` API.

*   _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.
*   _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.

How this works on web:

*   A crypto state will be created for verifying the redirect.
```
*   This means you need to run with `npx expo start --https`
```
*   The state will be added to the window's `localstorage`. This ensures that auth cannot complete unless it's done from a page running with the same origin as it was started. Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession` must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different website, or even a different host like `https://128.0.0.*:19006` for example will not work.
*   A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.

> On mobile web, Chrome and Safari will block any call to [`window.open()` which takes too long to fire after a user interaction. This method must be invoked immediately after a user interaction. If the event is blocked, an error with code `ERR_WEB_BROWSER_BLOCKED` will be thrown.

Returns:

`[Promise<[WebBrowserAuthSessionResult](#webbrowserauthsessionresult)>`

*   If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.
*   If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.
*   If the browser is closed using `dismissBrowser`, the Promise fulfills with `{ type: 'dismiss' }` object.

### `WebBrowser.openBrowserAsync(url, browserParams)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` |
The url to open in the web browser.

 |
| browserParams(optional) | `[WebBrowserOpenOptions` |

A dictionary of key-value pairs.

Default:`{}`

 |

Opens the url with Safari in a modal on iOS using [`SFSafariViewController`, and Chrome in a new [custom tab on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need this, use `openAuthSessionAsync`.

Returns:

`[Promise<[WebBrowserResult](#webbrowserresult)>`

The promise behaves differently based on the platform. On Android promise resolves with `{ type: 'opened' }` if we were able to open browser. On iOS:

*   If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.
*   If the browser is closed using `dismissBrowser`, the Promise resolves with `{ type: 'dismiss' }`.

### `WebBrowser.warmUpAsync(browserPackage)`

Only for: Android

| Parameter | Type | Description |
| --- | --- | --- |
| browserPackage(optional) | `string` |
Package of browser to be warmed up. If not set, preferred browser will be warmed.

 |

This method calls `warmUp` method on [CustomTabsClient) for specified package.

Returns:

`[Promise<[WebBrowserWarmUpResult](#webbrowserwarmupresult)>`

A promise which fulfils with `WebBrowserWarmUpResult` object.

## Types

### `AuthSessionOpenOptions`

If there is no native AuthSession implementation available (which is the case on Android) the params inherited from `WebBrowserOpenOptions` will be used in the browser polyfill. Otherwise, the browser parameters will be ignored.

Type: `[WebBrowserOpenOptions` extended by:

| Property | Type | Description |
| --- | --- | --- |
| preferEphemeralSession(optional) | `boolean` |
Only for: iOS

Determines whether the session should ask the browser for a private authentication session. Set this to `true` to request that the browser doesn’t share cookies or other browsing data between the authentication session and the user’s normal browser session. Whether the request is honored depends on the user’s default web browser.

Default:`false`

 |

### `WebBrowserAuthSessionResult`

Literal Type: `union`

Acceptable values are: `[WebBrowserRedirectResult](#webbrowserredirectresult)` | `[WebBrowserResult](#webbrowserresult)`

### `WebBrowserCompleteAuthSessionOptions`

| Property | Type | Description |
| --- | --- | --- |
| skipRedirectCheck(optional) | `boolean` |
Attempt to close the window without checking to see if the auth redirect matches the cached redirect URL.

 |

### `WebBrowserCompleteAuthSessionResult`

| Property | Type | Description |
| --- | --- | --- |
| message | `string` |
Additional description or reasoning of the result.

 |
| type | `'success' | 'failed'` |

Type of the result.

 |

### `WebBrowserCoolDownResult`

Type: `ServiceActionResult`

### `WebBrowserCustomTabsResults`

| Property | Type | Description |
| --- | --- | --- |
| browserPackages | `string` |
All packages recognized by `PackageManager` as capable of handling Custom Tabs. Empty array means there is no supporting browsers on device.

 |
| defaultBrowserPackage(optional) | `string` |

Default package chosen by user, `null` if there is no such packages. Also `null` usually means, that user will be prompted to choose from available packages.

 |
| preferredBrowserPackage(optional) | `string` |

Package preferred by `CustomTabsClient` to be used to handle Custom Tabs. It favors browser chosen by user as default, as long as it is present on both `browserPackages` and `servicePackages` lists. Only such browsers are considered as fully supporting Custom Tabs. It might be `null` when there is no such browser installed or when default browser is not in `servicePackages` list.

 |
| servicePackages | `string` |

All packages recognized by `PackageManager` as capable of handling Custom Tabs Service. This service is used by `warmUpAsync`, `mayInitWithUrlAsync` and `coolDownAsync`.

 |

### `WebBrowserMayInitWithUrlResult`

Type: `ServiceActionResult`

### `WebBrowserOpenOptions`

| Property | Type | Description |
| --- | --- | --- |
| browserPackage(optional) | `string` |
Only for: Android

Package name of a browser to be used to handle Custom Tabs. List of available packages is to be queried by `getCustomTabsSupportingBrowsers` method.

 |
| controlsColor(optional) | `string` |

Only for: iOS

Tint color for controls in SKSafariViewController. Supports React Native [color formats.

 |
| createTask(optional) | `boolean` |

Only for: Android

A boolean determining whether the browser should open in a new task or in the same task as your app.

Default:`true`

 |
| dismissButtonStyle(optional) | `'done' | 'close' | 'cancel'` |

Only for: iOS

The style of the dismiss button. Should be one of: `done`, `close`, or `cancel`.

 |
| enableBarCollapsing(optional) | `boolean` |

A boolean determining whether the toolbar should be hiding when a user scrolls the website.

 |
| enableDefaultShareMenuItem(optional) | `boolean` |

Only for: Android

A boolean determining whether a default share item should be added to the menu.

 |
| presentationStyle(optional) | `[WebBrowserPresentationStyle](#webbrowserpresentationstyle)` |

Only for: iOS

The [presentation style of the browser window.

Default:`WebBrowser.WebBrowserPresentationStyle.OverFullScreen`

 |
| readerMode(optional) | `boolean` |

Only for: iOS

A boolean determining whether Safari should enter Reader mode, if it is available.

 |
| secondaryToolbarColor(optional) | `string` |

Only for: Android

Color of the secondary toolbar. Supports React Native [color formats.

 |
| showInRecents(optional) | `boolean` |

Only for: Android

A boolean determining whether browsed website should be shown as separate entry in Android recents/multitasking view. Requires `createTask` to be `true` (default).

Default:`false`

 |
| showTitle(optional) | `boolean` |

Only for: Android

A boolean determining whether the browser should show the title of website on the toolbar.

 |
| toolbarColor(optional) | `string` |

Color of the toolbar. Supports React Native [color formats.

 |
| windowFeatures(optional) | `string | [WebBrowserWindowFeatures` |

Only for: Web

Features to use with `window.open()`.

 |
| windowName(optional) | `string` |

Only for: Web

Name to assign to the popup window.

 |

### `WebBrowserRedirectResult`

| Property | Type | Description |
| --- | --- | --- |
| type | `'success'` |
Type of the result.

 |
| url | `string` |

\-

 |

### `WebBrowserResult`

| Property | Type | Description |
| --- | --- | --- |
| type | `[WebBrowserResultType](#webbrowserresulttype)` |
Type of the result.

 |

### `WebBrowserWarmUpResult`

Type: `ServiceActionResult`

### `WebBrowserWindowFeatures`

Type: `Record<string, number | boolean | string>`

## Enums

### `WebBrowserPresentationStyle`

Only for: iOS

A browser presentation style. Its values are directly mapped to the [`UIModalPresentationStyle`.

#### `AUTOMATIC`

Only for: iOS

`WebBrowserPresentationStyle.AUTOMATIC ＝ "automatic"`

The default presentation style chosen by the system. On older iOS versions, falls back to `WebBrowserPresentationStyle.FullScreen`.

#### `CURRENT_CONTEXT`

`WebBrowserPresentationStyle.CURRENT_CONTEXT ＝ "currentContext"`

A presentation style where the browser is displayed over the app's content.

#### `FORM_SHEET`

`WebBrowserPresentationStyle.FORM_SHEET ＝ "formSheet"`

A presentation style that displays the browser centered in the screen.

#### `FULL_SCREEN`

`WebBrowserPresentationStyle.FULL_SCREEN ＝ "fullScreen"`

A presentation style in which the presented browser covers the screen.

#### `OVER_CURRENT_CONTEXT`

`WebBrowserPresentationStyle.OVER_CURRENT_CONTEXT ＝ "overCurrentContext"`

A presentation style where the browser is displayed over the app's content.

#### `OVER_FULL_SCREEN`

`WebBrowserPresentationStyle.OVER_FULL_SCREEN ＝ "overFullScreen"`

A presentation style in which the browser view covers the screen.

#### `PAGE_SHEET`

`WebBrowserPresentationStyle.PAGE_SHEET ＝ "pageSheet"`

A presentation style that partially covers the underlying content.

#### `POPOVER`

`WebBrowserPresentationStyle.POPOVER ＝ "popover"`

A presentation style where the browser is displayed in a popover view.

### `WebBrowserResultType`

#### `CANCEL`

Only for: iOS

`WebBrowserResultType.CANCEL ＝ "cancel"`

#### `DISMISS`

Only for: iOS

`WebBrowserResultType.DISMISS ＝ "dismiss"`

#### `LOCKED`

`WebBrowserResultType.LOCKED ＝ "locked"`

#### `OPENED`

Only for: Android

`WebBrowserResultType.OPENED ＝ "opened"`

## Error codes

### `ERR_WEB_BROWSER_REDIRECT`

Web only: The window cannot complete the redirect request because the invoking window doesn't have a reference to its parent. This can happen if the parent window was reloaded.

### `ERR_WEB_BROWSER_BLOCKED`

Web only: The popup window was blocked by the browser or failed to open. This can happen in mobile browsers when the `window.open()` method was invoked too long after a user input was fired.

Mobile browsers do this to prevent malicious websites from opening many unwanted popups on mobile.

You're method can still run in an async function but there cannot be any long running tasks before it. You can use hooks to disable user-inputs until any other processes have finished loading.

### `ERR_WEB_BROWSER_CRYPTO`

Web only: The current environment doesn't support crypto. Ensure you are running from a secure origin (localhost/https).

---

# React Native WebView

`react-native-webview` provides a `WebView` component that renders web content in a native view.

## Installation

`npx expo install react-native-webview`

If you are installing this in an [existing React Native app, make sure to [install `expo` in your project. Then, follow the [installation instructions provided in the library's README or documentation.

## Usage

You should refer to the [`react-native-webview` documentation for more information on the API and its usage. The following example (courtesy of that repository) is a quick way to get up and running!

Basic Webview usage

```
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
```
<WebView
  style={styles.container}
  source={{ uri: 'https://expo.dev' }}
/>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
marginTop: Constants.statusBarHeight,
```
  },
});
```

Minimal example with inline HTML:

Webview inline HTML

```
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
```
<WebView
  style={styles.container}
  originWhitelist={['*']}
  source={{ html: '<h1><center>Hello world</center></h1>' }}
/>
```
  );
}

const styles = StyleSheet.create({
  container: {
```
flex: 1,
marginTop: Constants.statusBarHeight,
```
  },
});
```

---

