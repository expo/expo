{"name":"expo-secure-store","kind":1,"children":[{"name":"KeychainAccessibilityConstant","kind":4194304,"type":{"type":"intrinsic","name":"number"}},{"name":"SecureStoreOptions","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"authenticationPrompt","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Custom message displayed to the user while "},{"kind":"code","text":"`requireAuthentication`"},{"kind":"text","text":" option is turned on."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"keychainAccessible","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies when the stored entry is accessible, using iOS's "},{"kind":"code","text":"`kSecAttrAccessible`"},{"kind":"text","text":" property."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"Apple's documentation on [keychain item accessibility](https://developer.apple.com/documentation/security/ksecattraccessible/)."}]},{"tag":"@default","content":[{"kind":"text","text":"SecureStore.WHEN_UNLOCKED"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reference","name":"KeychainAccessibilityConstant"}},{"name":"keychainService","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"- Android: Equivalent of the public/private key pair "},{"kind":"code","text":"`Alias`"},{"kind":"text","text":".\n- iOS: The item's service, equivalent to ["},{"kind":"code","text":"`kSecAttrService`"},{"kind":"text","text":"](https://developer.apple.com/documentation/security/ksecattrservice/).\n> If the item is set with the "},{"kind":"code","text":"`keychainService`"},{"kind":"text","text":" option, it will be required to later fetch the value."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"requireAuthentication","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Option responsible for enabling the usage of the user authentication methods available on the device while\naccessing data stored in SecureStore.\n- Android: Equivalent to ["},{"kind":"code","text":"`setUserAuthenticationRequired(true)`"},{"kind":"text","text":"](https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean))\n  (requires API 23).\n- iOS: Equivalent to ["},{"kind":"code","text":"`kSecAccessControlBiometryCurrentSet`"},{"kind":"text","text":"](https://developer.apple.com/documentation/security/secaccesscontrolcreateflags/ksecaccesscontrolbiometrycurrentset/).\nComplete functionality is unlocked only with a freshly generated key - this would not work in tandem with the "},{"kind":"code","text":"`keychainService`"},{"kind":"text","text":"\nvalue used for the others non-authenticated operations."}]},"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"AFTER_FIRST_UNLOCK","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The data in the keychain item cannot be accessed after a restart until the device has been\nunlocked once by the user. This may be useful if you need to access the item when the phone\nis locked."}]},"type":{"type":"reference","name":"KeychainAccessibilityConstant"},"defaultValue":"ExpoSecureStore.AFTER_FIRST_UNLOCK"},{"name":"AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Similar to "},{"kind":"code","text":"`AFTER_FIRST_UNLOCK`"},{"kind":"text","text":", except the entry is not migrated to a new device when restoring\nfrom a backup."}]},"type":{"type":"reference","name":"KeychainAccessibilityConstant"},"defaultValue":"ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY"},{"name":"ALWAYS","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The data in the keychain item can always be accessed regardless of whether the device is locked.\nThis is the least secure option."}]},"type":{"type":"reference","name":"KeychainAccessibilityConstant"},"defaultValue":"ExpoSecureStore.ALWAYS"},{"name":"ALWAYS_THIS_DEVICE_ONLY","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Similar to "},{"kind":"code","text":"`ALWAYS`"},{"kind":"text","text":", except the entry is not migrated to a new device when restoring from a backup."}]},"type":{"type":"reference","name":"KeychainAccessibilityConstant"},"defaultValue":"ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY"},{"name":"WHEN_PASSCODE_SET_THIS_DEVICE_ONLY","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Similar to "},{"kind":"code","text":"`WHEN_UNLOCKED_THIS_DEVICE_ONLY`"},{"kind":"text","text":", except the user must have set a passcode in order to\nstore an entry. If the user removes their passcode, the entry will be deleted."}]},"type":{"type":"reference","name":"KeychainAccessibilityConstant"},"defaultValue":"ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY"},{"name":"WHEN_UNLOCKED","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The data in the keychain item can be accessed only while the device is unlocked by the user."}]},"type":{"type":"reference","name":"KeychainAccessibilityConstant"},"defaultValue":"ExpoSecureStore.WHEN_UNLOCKED"},{"name":"WHEN_UNLOCKED_THIS_DEVICE_ONLY","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Similar to "},{"kind":"code","text":"`WHEN_UNLOCKED`"},{"kind":"text","text":", except the entry is not migrated to a new device when restoring from\na backup."}]},"type":{"type":"reference","name":"KeychainAccessibilityConstant"},"defaultValue":"ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY"},{"name":"deleteItemAsync","kind":64,"signatures":[{"name":"deleteItemAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Delete the value associated with the provided key."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that will reject if the value couldn't be deleted."}]}]},"parameters":[{"name":"key","kind":32768,"comment":{"summary":[{"kind":"text","text":"The key that was used to store the associated value."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","kind":32768,"comment":{"summary":[{"kind":"text","text":"An ["},{"kind":"code","text":"`SecureStoreOptions`"},{"kind":"text","text":"](#securestoreoptions) object."}]},"type":{"type":"reference","name":"SecureStoreOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getItemAsync","kind":64,"signatures":[{"name":"getItemAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetch the stored value associated with the provided key."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that resolves to the previously stored value. It will return "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if there is no entry\nfor the given key or if the key has been invalidated. It will reject if an error occurs while retrieving the value.\n\n> Keys are invalidated by the system when biometrics change, such as adding a new fingerprint or changing the face profile used for face recognition.\n> After a key has been invalidated, it becomes impossible to read its value.\n> This only applies to values stored with "},{"kind":"code","text":"`requireAuthentication`"},{"kind":"text","text":" set to "},{"kind":"code","text":"`true`"},{"kind":"text","text":"."}]}]},"parameters":[{"name":"key","kind":32768,"comment":{"summary":[{"kind":"text","text":"The key that was used to store the associated value."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","kind":32768,"comment":{"summary":[{"kind":"text","text":"An ["},{"kind":"code","text":"`SecureStoreOptions`"},{"kind":"text","text":"](#securestoreoptions) object."}]},"type":{"type":"reference","name":"SecureStoreOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"isAvailableAsync","kind":64,"signatures":[{"name":"isAvailableAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns whether the SecureStore API is enabled on the current device. This does not check the app\npermissions."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Promise which fulfils witch "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":", indicating whether the SecureStore API is available\non the current device. Currently, this resolves "},{"kind":"code","text":"`true`"},{"kind":"text","text":" on Android and iOS only."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setItemAsync","kind":64,"signatures":[{"name":"setItemAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Store a keyâ€“value pair."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that will reject if value cannot be stored on the device."}]}]},"parameters":[{"name":"key","kind":32768,"comment":{"summary":[{"kind":"text","text":"The key to associate with the stored value. Keys may contain alphanumeric characters\n"},{"kind":"code","text":"`.`"},{"kind":"text","text":", "},{"kind":"code","text":"`-`"},{"kind":"text","text":", and "},{"kind":"code","text":"`_`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"value","kind":32768,"comment":{"summary":[{"kind":"text","text":"The value to store. Size limit is 2048 bytes."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","kind":32768,"comment":{"summary":[{"kind":"text","text":"An ["},{"kind":"code","text":"`SecureStoreOptions`"},{"kind":"text","text":"](#securestoreoptions) object."}]},"type":{"type":"reference","name":"SecureStoreOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]}]}