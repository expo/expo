{"name":"expo-audio","variant":"project","kind":1,"children":[{"name":"AudioQuality","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"Audio quality levels for recording.\n\nPredefined quality levels that balance file size and audio fidelity.\nHigher quality levels produce better sound but larger files and require more processing power."}]},"children":[{"name":"HIGH","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"High quality: good fidelity, larger file size."}]},"type":{"type":"literal","value":96}},{"name":"LOW","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Low quality: good for voice recordings where file size matters."}]},"type":{"type":"literal","value":32}},{"name":"MAX","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Maximum quality: best fidelity, largest file size."}]},"type":{"type":"literal","value":127}},{"name":"MEDIUM","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Medium quality: balanced option for most use cases."}]},"type":{"type":"literal","value":64}},{"name":"MIN","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Minimum quality: smallest file size, lowest fidelity."}]},"type":{"type":"literal","value":0}}]},{"name":"IOSOutputFormat","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"Audio output format options for iOS recording.\n\nComprehensive enum of audio formats supported by iOS for recording.\nEach format has different characteristics in terms of quality, file size, and compatibility.\nSome formats like LINEARPCM offer the highest quality but larger file sizes,\nwhile compressed formats like AAC provide good quality with smaller files."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"children":[{"name":"60958AC3","variant":"declaration","kind":16,"type":{"type":"literal","value":"cac3"}},{"name":"AC3","variant":"declaration","kind":16,"type":{"type":"literal","value":"ac-3"}},{"name":"AES3","variant":"declaration","kind":16,"type":{"type":"literal","value":"aes3"}},{"name":"ALAW","variant":"declaration","kind":16,"type":{"type":"literal","value":"alaw"}},{"name":"AMR","variant":"declaration","kind":16,"type":{"type":"literal","value":"samr"}},{"name":"AMR_WB","variant":"declaration","kind":16,"type":{"type":"literal","value":"sawb"}},{"name":"APPLEIMA4","variant":"declaration","kind":16,"type":{"type":"literal","value":"ima4"}},{"name":"APPLELOSSLESS","variant":"declaration","kind":16,"type":{"type":"literal","value":"alac"}},{"name":"AUDIBLE","variant":"declaration","kind":16,"type":{"type":"literal","value":"AUDB"}},{"name":"DVIINTELIMA","variant":"declaration","kind":16,"type":{"type":"literal","value":1836253201}},{"name":"ENHANCEDAC3","variant":"declaration","kind":16,"type":{"type":"literal","value":"ec-3"}},{"name":"ILBC","variant":"declaration","kind":16,"type":{"type":"literal","value":"ilbc"}},{"name":"LINEARPCM","variant":"declaration","kind":16,"type":{"type":"literal","value":"lpcm"}},{"name":"MACE3","variant":"declaration","kind":16,"type":{"type":"literal","value":"MAC3"}},{"name":"MACE6","variant":"declaration","kind":16,"type":{"type":"literal","value":"MAC6"}},{"name":"MICROSOFTGSM","variant":"declaration","kind":16,"type":{"type":"literal","value":1836253233}},{"name":"MPEG4AAC","variant":"declaration","kind":16,"type":{"type":"literal","value":"aac "}},{"name":"MPEG4AAC_ELD","variant":"declaration","kind":16,"type":{"type":"literal","value":"aace"}},{"name":"MPEG4AAC_ELD_SBR","variant":"declaration","kind":16,"type":{"type":"literal","value":"aacf"}},{"name":"MPEG4AAC_ELD_V2","variant":"declaration","kind":16,"type":{"type":"literal","value":"aacg"}},{"name":"MPEG4AAC_HE","variant":"declaration","kind":16,"type":{"type":"literal","value":"aach"}},{"name":"MPEG4AAC_HE_V2","variant":"declaration","kind":16,"type":{"type":"literal","value":"aacp"}},{"name":"MPEG4AAC_LD","variant":"declaration","kind":16,"type":{"type":"literal","value":"aacl"}},{"name":"MPEG4AAC_SPATIAL","variant":"declaration","kind":16,"type":{"type":"literal","value":"aacs"}},{"name":"MPEG4CELP","variant":"declaration","kind":16,"type":{"type":"literal","value":"celp"}},{"name":"MPEG4HVXC","variant":"declaration","kind":16,"type":{"type":"literal","value":"hvxc"}},{"name":"MPEG4TWINVQ","variant":"declaration","kind":16,"type":{"type":"literal","value":"twvq"}},{"name":"MPEGLAYER1","variant":"declaration","kind":16,"type":{"type":"literal","value":".mp1"}},{"name":"MPEGLAYER2","variant":"declaration","kind":16,"type":{"type":"literal","value":".mp2"}},{"name":"MPEGLAYER3","variant":"declaration","kind":16,"type":{"type":"literal","value":".mp3"}},{"name":"QDESIGN","variant":"declaration","kind":16,"type":{"type":"literal","value":"QDMC"}},{"name":"QDESIGN2","variant":"declaration","kind":16,"type":{"type":"literal","value":"QDM2"}},{"name":"QUALCOMM","variant":"declaration","kind":16,"type":{"type":"literal","value":"Qclp"}},{"name":"ULAW","variant":"declaration","kind":16,"type":{"type":"literal","value":"ulaw"}}]},{"name":"PermissionStatus","variant":"declaration","kind":8,"children":[{"name":"DENIED","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"User has denied the permission."}]},"type":{"type":"literal","value":"denied"}},{"name":"GRANTED","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"User has granted the permission."}]},"type":{"type":"literal","value":"granted"}},{"name":"UNDETERMINED","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"User hasn't granted or denied the permission yet."}]},"type":{"type":"literal","value":"undetermined"}}]},{"name":"AudioPlayer","variant":"declaration","kind":128,"children":[{"name":"currentTime","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The current position through the audio item in seconds."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"duration","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The total duration of the audio in seconds."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"id","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Unique identifier for the player object."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"isAudioSamplingSupported","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Boolean value indicating whether audio sampling is supported on the platform."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isBuffering","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Boolean value indicating whether the player is buffering."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isLoaded","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Boolean value indicating whether the player is finished loading."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"loop","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Boolean value indicating whether the player is currently looping."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"muted","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Boolean value indicating whether the player is currently muted."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"paused","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Boolean value indicating whether the player is currently paused."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"playbackRate","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The current playback rate of the audio."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"playing","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Boolean value indicating whether the player is currently playing."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"shouldCorrectPitch","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A boolean describing if we are correcting the pitch for a changed rate."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"volume","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The current volume of the audio."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"addListener","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"addListener","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Adds a listener for the given event name."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"listener","variant":"param","kind":32768,"type":{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"type":{"type":"reference","target":{"qualifiedName":"EventSubscription"},"name":"EventSubscription","package":"expo-modules-core"},"inheritedFrom":{"type":"reference","name":"SharedObject.addListener"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.addListener"}},{"name":"emit","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"emit","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Synchronously calls all the listeners attached to that specific event.\nThe event can include any number of arguments that will be passed to the listeners."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"args","variant":"param","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","target":{"qualifiedName":"Parameters"},"typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}],"name":"Parameters","package":"typescript"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.emit"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.emit"}},{"name":"listenerCount","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"listenerCount","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns a number of listeners added to the given event."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"SharedObject.listenerCount"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.listenerCount"}},{"name":"pause","variant":"declaration","kind":2048,"signatures":[{"name":"pause","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Pauses the player."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"play","variant":"declaration","kind":2048,"signatures":[{"name":"play","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Start playing audio."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"release","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"release","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"A function that detaches the JS and native objects to let the native object deallocate\nbefore the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native\nfunctions of the object will throw an error as it is no longer associated with its native counterpart.\n\nIn most cases, you should never need to use this function, except some specific performance-critical cases when\nmanual memory management makes sense and the native object is known to exclusively retain some native memory\n(such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use\nthis object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase,\nfor example: "},{"kind":"code","text":"`useVideoPlayer()`"},{"kind":"text","text":" from "},{"kind":"code","text":"`expo-video`"},{"kind":"text","text":" and "},{"kind":"code","text":"`useImage()`"},{"kind":"text","text":" from "},{"kind":"code","text":"`expo-image`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.release"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.release"}},{"name":"remove","variant":"declaration","kind":2048,"signatures":[{"name":"remove","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Remove the player from memory to free up resources."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"removeAllListeners","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"removeAllListeners","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Removes all listeners for the given event name."}]},"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.removeAllListeners"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.removeAllListeners"}},{"name":"removeListener","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"removeListener","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Removes a listener for the given event name."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"listener","variant":"param","kind":32768,"type":{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.removeListener"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.removeListener"}},{"name":"replace","variant":"declaration","kind":2048,"signatures":[{"name":"replace","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Replaces the current audio source with a new one."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"type":{"type":"reference","name":"AudioSource","package":"expo-audio"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"seekTo","variant":"declaration","kind":2048,"signatures":[{"name":"seekTo","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Seeks the playback by the given number of seconds."}]},"parameters":[{"name":"seconds","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The number of seconds to seek by."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"toleranceMillisBefore","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The tolerance allowed before the requested seek time, in milliseconds. iOS only."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"toleranceMillisAfter","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The tolerance allowed after the requested seek time, in milliseconds. iOS only."}]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"setPlaybackRate","variant":"declaration","kind":2048,"signatures":[{"name":"setPlaybackRate","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Sets the current playback rate of the audio."}]},"parameters":[{"name":"rate","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The playback rate of the audio."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"pitchCorrectionQuality","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The quality of the pitch correction."}]},"type":{"type":"reference","name":"PitchCorrectionQuality","package":"expo-audio"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"startObserving","variant":"declaration","kind":2048,"flags":{"isOptional":true,"isInherited":true},"signatures":[{"name":"startObserving","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Function that is automatically invoked when the first listener for an event with the given name is added.\nOverride it in a subclass to perform some additional setup once the event started being observed."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.startObserving"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.startObserving"}},{"name":"stopObserving","variant":"declaration","kind":2048,"flags":{"isOptional":true,"isInherited":true},"signatures":[{"name":"stopObserving","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Function that is automatically invoked when the last listener for an event with the given name is removed.\nOverride it in a subclass to perform some additional cleanup once the event is no longer observed."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{"type":"reference","name":"AudioEvents","package":"expo-audio"}}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.stopObserving"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.stopObserving"}}],"extendedTypes":[{"type":"reference","target":{"qualifiedName":"SharedObject"},"typeArguments":[{"type":"reference","name":"AudioEvents","package":"expo-audio"}],"name":"SharedObject","package":"expo-modules-core"}]},{"name":"AudioRecorder","variant":"declaration","kind":128,"children":[{"name":"currentTime","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The current length of the recording, in seconds."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"id","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Unique identifier for the recorder object."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"isRecording","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Boolean value indicating whether the recording is in progress."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"uri","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The uri of the recording."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"addListener","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"addListener","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Adds a listener for the given event name."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"literal","value":"recordingStatusUpdate"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"listener","variant":"param","kind":32768,"type":{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","name":"RecordingEvents","package":"expo-audio"}}}],"type":{"type":"reference","target":{"qualifiedName":"EventSubscription"},"name":"EventSubscription","package":"expo-modules-core"},"inheritedFrom":{"type":"reference","name":"SharedObject.addListener"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.addListener"}},{"name":"emit","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"emit","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Synchronously calls all the listeners attached to that specific event.\nThe event can include any number of arguments that will be passed to the listeners."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"literal","value":"recordingStatusUpdate"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"args","variant":"param","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","target":{"qualifiedName":"Parameters"},"typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","name":"RecordingEvents","package":"expo-audio"}}],"name":"Parameters","package":"typescript"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.emit"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.emit"}},{"name":"getAvailableInputs","variant":"declaration","kind":2048,"signatures":[{"name":"getAvailableInputs","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns a list of available recording inputs. This method can only be called if the "},{"kind":"code","text":"`Recording`"},{"kind":"text","text":" has been prepared."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that is fulfilled with an array of "},{"kind":"code","text":"`RecordingInput`"},{"kind":"text","text":" objects."}]}]},"type":{"type":"array","elementType":{"type":"reference","name":"RecordingInput","package":"expo-audio"}}}]},{"name":"getCurrentInput","variant":"declaration","kind":2048,"signatures":[{"name":"getCurrentInput","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the currently-selected recording input. This method can only be called if the "},{"kind":"code","text":"`Recording`"},{"kind":"text","text":" has been prepared."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that is fulfilled with a "},{"kind":"code","text":"`RecordingInput`"},{"kind":"text","text":" object."}]}]},"type":{"type":"reference","name":"RecordingInput","package":"expo-audio"}}]},{"name":"getStatus","variant":"declaration","kind":2048,"signatures":[{"name":"getStatus","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Status of the current recording."}]},"type":{"type":"reference","name":"RecorderState","package":"expo-audio"}}]},{"name":"listenerCount","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"listenerCount","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns a number of listeners added to the given event."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"literal","value":"recordingStatusUpdate"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"SharedObject.listenerCount"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.listenerCount"}},{"name":"pause","variant":"declaration","kind":2048,"signatures":[{"name":"pause","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Pause the recording."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"prepareToRecordAsync","variant":"declaration","kind":2048,"signatures":[{"name":"prepareToRecordAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Prepares the recording for recording."}]},"parameters":[{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","target":{"qualifiedName":"Partial"},"typeArguments":[{"type":"reference","name":"RecordingOptions","package":"expo-audio"}],"name":"Partial","package":"typescript"}}],"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"record","variant":"declaration","kind":2048,"signatures":[{"name":"record","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Starts the recording."}]},"parameters":[{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Optional recording configuration options."}]},"type":{"type":"reference","name":"RecordingStartOptions","package":"expo-audio"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"recordForDuration","variant":"declaration","kind":2048,"signatures":[{"name":"recordForDuration","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Stops the recording once the specified time has elapsed."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use "},{"kind":"code","text":"`record({ forDuration: seconds })`"},{"kind":"text","text":" instead."}]}]},"parameters":[{"name":"seconds","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The time in seconds to stop recording at."}]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"release","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"release","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"A function that detaches the JS and native objects to let the native object deallocate\nbefore the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native\nfunctions of the object will throw an error as it is no longer associated with its native counterpart.\n\nIn most cases, you should never need to use this function, except some specific performance-critical cases when\nmanual memory management makes sense and the native object is known to exclusively retain some native memory\n(such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use\nthis object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase,\nfor example: "},{"kind":"code","text":"`useVideoPlayer()`"},{"kind":"text","text":" from "},{"kind":"code","text":"`expo-video`"},{"kind":"text","text":" and "},{"kind":"code","text":"`useImage()`"},{"kind":"text","text":" from "},{"kind":"code","text":"`expo-image`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.release"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.release"}},{"name":"removeAllListeners","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"removeAllListeners","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Removes all listeners for the given event name."}]},"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"literal","value":"recordingStatusUpdate"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.removeAllListeners"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.removeAllListeners"}},{"name":"removeListener","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"removeListener","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Removes a listener for the given event name."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"literal","value":"recordingStatusUpdate"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"listener","variant":"param","kind":32768,"type":{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","name":"RecordingEvents","package":"expo-audio"}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.removeListener"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.removeListener"}},{"name":"setInput","variant":"declaration","kind":2048,"signatures":[{"name":"setInput","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Sets the current recording input."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that is resolved if successful or rejected if not."}]}]},"parameters":[{"name":"inputUid","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The uid of a "},{"kind":"code","text":"`RecordingInput`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"startObserving","variant":"declaration","kind":2048,"flags":{"isOptional":true,"isInherited":true},"signatures":[{"name":"startObserving","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Function that is automatically invoked when the first listener for an event with the given name is added.\nOverride it in a subclass to perform some additional setup once the event started being observed."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"literal","value":"recordingStatusUpdate"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.startObserving"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.startObserving"}},{"name":"startRecordingAtTime","variant":"declaration","kind":2048,"signatures":[{"name":"startRecordingAtTime","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Starts the recording at the given time."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use "},{"kind":"code","text":"`record({ atTime: seconds })`"},{"kind":"text","text":" instead."}]}]},"parameters":[{"name":"seconds","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The time in seconds to start recording at."}]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"stop","variant":"declaration","kind":2048,"signatures":[{"name":"stop","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Stop the recording."}]},"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"stopObserving","variant":"declaration","kind":2048,"flags":{"isOptional":true,"isInherited":true},"signatures":[{"name":"stopObserving","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Function that is automatically invoked when the last listener for an event with the given name is removed.\nOverride it in a subclass to perform some additional cleanup once the event is no longer observed."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"literal","value":"recordingStatusUpdate"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedObject.stopObserving"}}],"inheritedFrom":{"type":"reference","name":"SharedObject.stopObserving"}}],"extendedTypes":[{"type":"reference","target":{"qualifiedName":"SharedObject"},"typeArguments":[{"type":"reference","name":"RecordingEvents","package":"expo-audio"}],"name":"SharedObject","package":"expo-modules-core"}]},{"name":"AndroidAudioEncoder","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Audio encoder options for Android recording.\n\nSpecifies the audio codec used to encode recorded audio on Android.\nDifferent encoders offer different quality, compression, and compatibility trade-offs."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"amr_nb"},{"type":"literal","value":"amr_wb"},{"type":"literal","value":"aac"},{"type":"literal","value":"he_aac"},{"type":"literal","value":"aac_eld"}]}},{"name":"AndroidOutputFormat","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Audio output format options for Android recording.\n\nSpecifies the container format for recorded audio files on Android.\nDifferent formats have different compatibility and compression characteristics."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"3gp"},{"type":"literal","value":"mpeg4"},{"type":"literal","value":"amrnb"},{"type":"literal","value":"amrwb"},{"type":"literal","value":"aac_adts"},{"type":"literal","value":"mpeg2ts"},{"type":"literal","value":"webm"}]}},{"name":"AudioEvents","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Event types that an "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":" can emit.\n\nThese events allow you to listen for changes in playback state and receive real-time audio data.\nUse "},{"kind":"code","text":"`player.addListener()`"},{"kind":"text","text":" to subscribe to these events."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"audioSampleUpdate","variant":"declaration","kind":2048,"signatures":[{"name":"audioSampleUpdate","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fired when audio sampling is enabled and new sample data is available."}]},"parameters":[{"name":"data","variant":"param","kind":32768,"type":{"type":"reference","name":"AudioSample","package":"expo-audio"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"playbackStatusUpdate","variant":"declaration","kind":2048,"signatures":[{"name":"playbackStatusUpdate","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fired when the player's status changes (play/pause/seek/load and so on.)."}]},"parameters":[{"name":"status","variant":"param","kind":32768,"type":{"type":"reference","name":"AudioStatus","package":"expo-audio"}}],"type":{"type":"intrinsic","name":"void"}}]}]}}},{"name":"AudioLoadOptions","variant":"declaration","kind":2097152,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use "},{"kind":"code","text":"`AudioPlayerOptions`"},{"kind":"text","text":" instead.\nOptions for audio loading behavior."}]}]},"type":{"type":"reference","name":"AudioPlayerOptions","package":"expo-audio"}},{"name":"AudioMode","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"allowsRecording","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the audio session allows recording."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"interruptionMode","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines how the audio session interacts with other sessions."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reference","name":"InterruptionMode","package":"expo-audio"}},{"name":"interruptionModeAndroid","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines how the audio session interacts with other sessions on Android."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"reference","name":"InterruptionModeAndroid","package":"expo-audio"}},{"name":"playsInSilentMode","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines if audio playback is allowed when the device is in silent mode."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"shouldPlayInBackground","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the audio session stays active when the app moves to the background."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"shouldRouteThroughEarpiece","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the audio should route through the earpiece."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"AudioPlayerOptions","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Options for configuring audio player behavior."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"crossOrigin","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines the [cross origin policy](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Attributes/crossorigin) used by the underlying native view on web.\nIf "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" (default), does not use CORS at all. If set to "},{"kind":"code","text":"`'anonymous'`"},{"kind":"text","text":", the audio will be loaded with CORS enabled.\nNote that some audio may not play if CORS is enabled, depending on the CDN settings.\nIf you encounter issues, consider adjusting the "},{"kind":"code","text":"`crossOrigin`"},{"kind":"text","text":" property."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"web"}]},{"tag":"@default","content":[{"kind":"text","text":"undefined"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"anonymous"},{"type":"literal","value":"use-credentials"}]}},{"name":"downloadFirst","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If set to "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the system will attempt to download the resource to the device before loading.\nThis value defaults to "},{"kind":"code","text":"`false`"},{"kind":"text","text":".\n\nWorks with:\n- Local assets from "},{"kind":"code","text":"`require('path/to/file')`"},{"kind":"text","text":"\n- Remote HTTP/HTTPS URLs\n- Asset objects\n\nWhen enabled, this ensures the audio file is fully downloaded before playback begins.\nThis can improve playback performance and reduce buffering, especially for users\nmanaging multiple audio players simultaneously.\n\nOn Android and iOS, this will download the audio file to the device's tmp directory before playback begins.\nThe system will purge the file at its discretion.\n\nOn web, this will download the audio file to the user's device memory and make it available for the user to play.\nThe system will usually purge the file from memory after a reload or on memory pressure.\nOn web, CORS restrictions apply to the blob url, so you need to make sure the server returns the "},{"kind":"code","text":"`Access-Control-Allow-Origin`"},{"kind":"text","text":" header."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"updateInterval","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"How often (in milliseconds) to emit playback status updates."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"500"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"AudioSample","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Represents a single audio sample containing waveform data from all audio channels.\n\nAudio samples are provided in real-time when audio sampling is enabled on an "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":".\nEach sample contains the raw PCM audio data for all channels (mono has 1 channel, stereo has 2).\nThis data can be used for audio visualization, analysis, or processing."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"channels","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Array of audio channels, each containing PCM frame data. Stereo audio will have 2 channels (left/right)."}]},"type":{"type":"array","elementType":{"type":"reference","name":"AudioSampleChannel","package":"expo-audio"}}},{"name":"timestamp","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Timestamp of this sample relative to the audio track's timeline, in seconds."}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"AudioSampleChannel","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Represents audio data for a single channel (for example, left or right in stereo audio).\n\nContains the raw PCM (Pulse Code Modulation) audio frames for this channel.\nFrame values are normalized between -1.0 and 1.0, where 0 represents silence."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"frames","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Array of PCM audio frame values, each between -1.0 and 1.0."}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"number"}}}]}}},{"name":"AudioSource","variant":"declaration","kind":2097152,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"assetId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The asset ID of a local audio asset, acquired with the "},{"kind":"code","text":"`require`"},{"kind":"text","text":" function.\nThis property is exclusive with the "},{"kind":"code","text":"`uri`"},{"kind":"text","text":" property. When both are present, the "},{"kind":"code","text":"`assetId`"},{"kind":"text","text":" will be ignored."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"headers","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object representing the HTTP headers to send along with the request for a remote audio source.\nOn web requires the "},{"kind":"code","text":"`Access-Control-Allow-Origin`"},{"kind":"text","text":" header returned by the server to include the current domain."}]},"type":{"type":"reference","target":{"qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record","package":"typescript"}},{"name":"uri","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A string representing the resource identifier for the audio,\nwhich could be an HTTPS address, a local file path, or the name of a static audio file resource."}]},"type":{"type":"intrinsic","name":"string"}}]}}]}},{"name":"AudioStatus","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Comprehensive status information for an "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":".\n\nThis object contains all the current state information about audio playback,\nincluding playback position, duration, loading state, and playback settings.\nUsed by "},{"kind":"code","text":"`useAudioPlayerStatus()`"},{"kind":"text","text":" to provide real-time status updates."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"currentTime","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Current playback position in seconds."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"didJustFinish","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the audio just finished playing."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"duration","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Total duration of the audio in seconds, or 0 if not yet determined."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"id","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Unique identifier for the player instance."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"isBuffering","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the player is currently buffering data."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isLoaded","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the audio has finished loading and is ready to play."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"loop","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the audio is set to loop when it reaches the end."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"mute","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the player is currently muted."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"playbackRate","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Current playback rate (1.0 = normal speed)."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"playbackState","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"String representation of the player's internal playback state."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"playing","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the audio is currently playing."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"reasonForWaitingToPlay","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Reason why the player is waiting to play (if applicable)."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"shouldCorrectPitch","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether pitch correction is enabled for rate changes."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"timeControlStatus","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"String representation of the player's time control status (playing/paused/waiting)."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"BitRateStrategy","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Bit rate strategies for audio encoding.\n\nDetermines how the encoder manages bit rate during recording, affecting\nfile size consistency and quality characteristics."}]},"type":{"type":"union","types":[{"type":"literal","value":"constant"},{"type":"literal","value":"longTermAverage"},{"type":"literal","value":"variableConstrained"},{"type":"literal","value":"variable"}]}},{"name":"InterruptionMode","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Audio interruption behavior modes for iOS.\n\nControls how your app's audio interacts with other apps' audio when interruptions occur.\nThis affects what happens when phone calls, notifications, or other apps play audio."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"mixWithOthers"},{"type":"literal","value":"doNotMix"},{"type":"literal","value":"duckOthers"}]}},{"name":"InterruptionModeAndroid","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Audio interruption behavior modes for Android.\n\nControls how your app's audio interacts with other apps' audio on Android.\nNote that Android doesn't support 'mixWithOthers' mode; audio focus is more strictly managed."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"doNotMix"},{"type":"literal","value":"duckOthers"}]}},{"name":"PermissionExpiration","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Permission expiration time. Currently, all permissions are granted permanently."}]},"type":{"type":"union","types":[{"type":"literal","value":"never"},{"type":"intrinsic","name":"number"}]}},{"name":"PermissionResponse","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"An object obtained by permissions get and request functions."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"canAskAgain","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Indicates if user can be asked again for specific permission.\nIf not, one should be directed to the Settings app\nin order to enable/disable the permission."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"expires","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines time when the permission expires."}]},"type":{"type":"reference","name":"PermissionExpiration","package":"expo-modules-core"}},{"name":"granted","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A convenience boolean that indicates if the permission is granted."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"status","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines the status of the permission."}]},"type":{"type":"reference","name":"PermissionStatus","package":"expo-modules-core"}}]}}},{"name":"PitchCorrectionQuality","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Pitch correction quality settings for audio playback rate changes.\n\nWhen changing playback rate, pitch correction can be applied to maintain the original pitch.\nDifferent quality levels offer trade-offs between processing power and audio quality."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"low"},{"type":"literal","value":"medium"},{"type":"literal","value":"high"}]}},{"name":"RecorderState","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Current state information for an "},{"kind":"code","text":"`AudioRecorder`"},{"kind":"text","text":".\n\nThis object contains detailed information about the recorder's current state,\nincluding recording status, duration, and technical details. This is what you get\nwhen calling "},{"kind":"code","text":"`recorder.getStatus()`"},{"kind":"text","text":" or using "},{"kind":"code","text":"`useAudioRecorderState()`"},{"kind":"text","text":"."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"canRecord","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the recorder is ready and able to record."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"durationMillis","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Duration of the current recording in milliseconds."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"isRecording","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether recording is currently in progress."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"mediaServicesDidReset","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the media services have been reset (typically indicates a system interruption)."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"metering","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Current audio level/volume being recorded (if metering is enabled)."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"url","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"File URL where the recording will be saved, if available."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}}},{"name":"RecordingEvents","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Event types that an "},{"kind":"code","text":"`AudioRecorder`"},{"kind":"text","text":" can emit.\n\nThese events are used internally by "},{"kind":"code","text":"`expo-audio`"},{"kind":"text","text":" hooks to provide real-time status updates.\nUse "},{"kind":"code","text":"`useAudioRecorderState()`"},{"kind":"text","text":" or the "},{"kind":"code","text":"`statusListener`"},{"kind":"text","text":" parameter in "},{"kind":"code","text":"`useAudioRecorder()`"},{"kind":"text","text":" instead of subscribing directly."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"recordingStatusUpdate","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Fired when the recorder's status changes (start/stop/pause/error, and so on)."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"status","variant":"param","kind":32768,"type":{"type":"reference","name":"RecordingStatus","package":"expo-audio"}}],"type":{"type":"intrinsic","name":"void"}}]}}}]}}},{"name":"RecordingInput","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Represents an available audio input device for recording.\n\nThis type describes audio input sources like built-in microphones, external microphones,\nor other audio input devices that can be used for recording. Each input has an identifying\ninformation that can be used to select the preferred recording source."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"name","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Human-readable name of the audio input device."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"type","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Type or category of the input device (for example, 'Built-in Microphone', 'External Microphone')."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"uid","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Unique identifier for the input device, used to select the input ('Built-in Microphone', 'External Microphone') for recording."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"RecordingOptions","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"android","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Recording options for the Android platform."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"reference","name":"RecordingOptionsAndroid","package":"expo-audio"}},{"name":"bitRate","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The desired bit rate."}],"blockTags":[{"tag":"@example","name":"128000","content":[]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"extension","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The desired file extension."}],"blockTags":[{"tag":"@example","name":".caf","content":[]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"ios","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Recording options for the iOS platform."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reference","name":"RecordingOptionsIos","package":"expo-audio"}},{"name":"isMeteringEnabled","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A boolean that determines whether audio level information will be part of the status object under the \"metering\" key."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"numberOfChannels","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The desired number of channels."}],"blockTags":[{"tag":"@example","name":"2","content":[]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"sampleRate","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The desired sample rate."}],"blockTags":[{"tag":"@example","name":"44100","content":[]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"web","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Recording options for the Web platform."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"reference","name":"RecordingOptionsWeb","package":"expo-audio"}}]}}},{"name":"RecordingOptionsAndroid","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Recording configuration options specific to Android.\n\nAndroid recording uses "},{"kind":"code","text":"`MediaRecorder`"},{"kind":"text","text":" with options for format, encoder, and file constraints.\nThese settings control the output format and quality characteristics."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"audioEncoder","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The desired audio encoder. See the ["},{"kind":"code","text":"`AndroidAudioEncoder`"},{"kind":"text","text":"](#androidaudioencoder) enum for all valid values."}]},"type":{"type":"reference","name":"AndroidAudioEncoder","package":"expo-audio"}},{"name":"extension","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired file extension."}],"blockTags":[{"tag":"@example","name":".caf","content":[]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"maxFileSize","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired maximum file size in bytes, after which the recording will stop (but "},{"kind":"code","text":"`stopAndUnloadAsync()`"},{"kind":"text","text":" must still\nbe called after this point)."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"`65536`"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"outputFormat","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The desired file format. See the ["},{"kind":"code","text":"`AndroidOutputFormat`"},{"kind":"text","text":"](#androidoutputformat) enum for all valid values."}]},"type":{"type":"reference","name":"AndroidOutputFormat","package":"expo-audio"}},{"name":"sampleRate","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired sample rate."}],"blockTags":[{"tag":"@example","name":"44100","content":[]}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"RecordingOptionsIos","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Recording configuration options specific to iOS.\n\niOS recording uses "},{"kind":"code","text":"`AVAudioRecorder`"},{"kind":"text","text":" with extensive format and quality options.\nThese settings provide fine-grained control over the recording characteristics."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"audioQuality","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The desired audio quality. See the ["},{"kind":"code","text":"`AudioQuality`"},{"kind":"text","text":"](#audioquality) enum for all valid values."}]},"type":{"type":"union","types":[{"type":"reference","name":"AudioQuality","package":"expo-audio"},{"type":"intrinsic","name":"number"}]}},{"name":"bitDepthHint","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired bit depth hint."}],"blockTags":[{"tag":"@example","name":"16","content":[]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"bitRateStrategy","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired bit rate strategy. See the next section for an enumeration of all valid values of "},{"kind":"code","text":"`bitRateStrategy`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"extension","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired file extension."}],"blockTags":[{"tag":"@example","name":".caf","content":[]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"linearPCMBitDepth","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired PCM bit depth."}],"blockTags":[{"tag":"@example","name":"16","content":[]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"linearPCMIsBigEndian","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A boolean describing if the PCM data should be formatted in big endian."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"linearPCMIsFloat","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A boolean describing if the PCM data should be encoded in floating point or integral values."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"outputFormat","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired file format. See the ["},{"kind":"code","text":"`IOSOutputFormat`"},{"kind":"text","text":"](#iosoutputformat) enum for all valid values."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"IOSOutputFormat","package":"expo-audio"},{"type":"intrinsic","name":"number"}]}},{"name":"sampleRate","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The desired sample rate."}],"blockTags":[{"tag":"@example","name":"44100","content":[]}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"RecordingOptionsWeb","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Recording options for the web.\n\nWeb recording uses the "},{"kind":"code","text":"`MediaRecorder`"},{"kind":"text","text":" API, which has different capabilities\ncompared to native platforms. These options map directly to "},{"kind":"code","text":"`MediaRecorder`"},{"kind":"text","text":" settings."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"bitsPerSecond","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Target bits per second for the recording."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"mimeType","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"MIME type for the recording (for example, 'audio/webm', 'audio/mp4')."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"RecordingStartOptions","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Options for controlling how audio recording is started."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"atTime","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The time in seconds to wait before starting the recording.\nIf not provided, recording starts immediately.\n\n**Platform behavior:**\n- Android: Ignored, recording starts immediately\n- iOS: Uses native AVAudioRecorder.record(atTime:) for precise timing.\n- Web: Ignored, recording starts immediately\n\n> **warning** On iOS, the recording process starts immediately (you'll see status updates),\nbut actual audio capture begins after the specified delay. This is not a countdown, since\nthe recorder is active but silent during the delay period."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"forDuration","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The duration in seconds after which recording should automatically stop.\nIf not provided, recording continues until manually stopped."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"RecordingStatus","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Status information for recording operations from the event system.\n\nThis type represents the status data emitted by "},{"kind":"code","text":"`recordingStatusUpdate`"},{"kind":"text","text":" events.\nIt contains high-level information about the recording session and any errors.\nUsed internally by the event system. Most users should use "},{"kind":"code","text":"`useAudioRecorderState()`"},{"kind":"text","text":" instead."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"error","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Error message if an error occurred, "},{"kind":"code","text":"`null`"},{"kind":"text","text":" otherwise."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"hasError","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether an error occurred during recording."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"id","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Unique identifier for the recording session."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"isFinished","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the recording has finished (stopped)."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"url","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"File URL of the completed recording, if available."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}}},{"name":"RecordingPresets","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Constant which contains definitions of the two preset examples of "},{"kind":"code","text":"`RecordingOptions`"},{"kind":"text","text":", as implemented in the Audio SDK.\n\n# "},{"kind":"code","text":"`HIGH_QUALITY`"},{"kind":"text","text":"\n"},{"kind":"code","text":"```ts\nRecordingPresets.HIGH_QUALITY = {\n extension: '.m4a',\n  sampleRate: 44100,\n  numberOfChannels: 2,\n  bitRate: 128000,\n  android: {\n    outputFormat: 'mpeg4',\n    audioEncoder: 'aac',\n  },\n  ios: {\n    outputFormat: IOSOutputFormat.MPEG4AAC,\n    audioQuality: AudioQuality.MAX,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n  web: {\n    mimeType: 'audio/webm',\n    bitsPerSecond: 128000,\n  },\n};\n```"},{"kind":"text","text":"\n\n# "},{"kind":"code","text":"`LOW_QUALITY`"},{"kind":"text","text":"\n"},{"kind":"code","text":"```ts\nRecordingPresets.LOW_QUALITY = {\n  extension: '.m4a',\n  sampleRate: 44100,\n  numberOfChannels: 2,\n  bitRate: 64000,\n  android: {\n    extension: '.3gp',\n    outputFormat: '3gp',\n    audioEncoder: 'amr_nb',\n  },\n  ios: {\n    audioQuality: AudioQuality.MIN,\n    outputFormat: IOSOutputFormat.MPEG4AAC,\n    linearPCMBitDepth: 16,\n    linearPCMIsBigEndian: false,\n    linearPCMIsFloat: false,\n  },\n  web: {\n    mimeType: 'audio/webm',\n    bitsPerSecond: 128000,\n  },\n};\n```"}]},"type":{"type":"reference","target":{"qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"RecordingOptions","package":"expo-audio"}],"name":"Record","package":"typescript"},"defaultValue":"..."},{"name":"createAudioPlayer","variant":"declaration","kind":64,"signatures":[{"name":"createAudioPlayer","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Creates an instance of an "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":" that doesn't release automatically.\n\n> **info** For most use cases you should use the ["},{"kind":"code","text":"`useAudioPlayer`"},{"kind":"text","text":"](#useaudioplayer) hook instead.\n> See the [Using the "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":" directly](#using-the-audioplayer-directly) section for more details."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The audio source to load."}]},"type":{"type":"reference","name":"AudioSource","package":"expo-audio"},"defaultValue":"null"},{"name":"options","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Audio player configuration options."}]},"type":{"type":"reference","name":"AudioPlayerOptions","package":"expo-audio"},"defaultValue":"{}"}],"type":{"type":"reference","name":"AudioPlayer","package":"expo-audio"}}]},{"name":"getRecordingPermissionsAsync","variant":"declaration","kind":64,"signatures":[{"name":"getRecordingPermissionsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Checks the current status of recording permissions without requesting them.\n\nThis function returns the current permission status for microphone access\nwithout triggering a permission request dialog. Use this to check permissions\nbefore deciding whether to call "},{"kind":"code","text":"`requestRecordingPermissionsAsync()`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise that resolves to a "},{"kind":"code","text":"`PermissionResponse`"},{"kind":"text","text":" object containing the current permission status."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { getRecordingPermissionsAsync, requestRecordingPermissionsAsync } from 'expo-audio';\n\nconst ensureRecordingPermissions = async () => {\n  const { status } = await getRecordingPermissionsAsync();\n\n  if (status !== 'granted') {\n    // Permission not granted, request it\n    const { granted } = await requestRecordingPermissionsAsync();\n    return granted;\n  }\n\n  return true; // Already granted\n};\n```"}]}]},"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"reference","name":"PermissionResponse","package":"expo-modules-core"}],"name":"Promise","package":"typescript"}}]},{"name":"requestRecordingPermissionsAsync","variant":"declaration","kind":64,"signatures":[{"name":"requestRecordingPermissionsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Requests permission to record audio from the microphone.\n\nThis function prompts the user for microphone access permission, which is required\nfor audio recording functionality. On iOS, this will show the system permission dialog.\nOn Android, this requests the "},{"kind":"code","text":"`RECORD_AUDIO`"},{"kind":"text","text":" permission."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise that resolves to a "},{"kind":"code","text":"`PermissionResponse`"},{"kind":"text","text":" object containing the permission status."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { requestRecordingPermissionsAsync } from 'expo-audio';\n\nconst checkPermissions = async () => {\n  const { status, granted } = await requestRecordingPermissionsAsync();\n\n  if (granted) {\n    console.log('Recording permission granted');\n  } else {\n    console.log('Recording permission denied:', status);\n  }\n};\n```"}]}]},"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"reference","name":"PermissionResponse","package":"expo-modules-core"}],"name":"Promise","package":"typescript"}}]},{"name":"setAudioModeAsync","variant":"declaration","kind":64,"signatures":[{"name":"setAudioModeAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Configures the global audio behavior and session settings.\n\nThis function allows you to control how your app's audio interacts with other apps,\nbackground playback behavior, audio routing, and interruption handling."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise that resolves when the audio mode has been applied."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { setAudioModeAsync } from 'expo-audio';\n\n// Configure audio for background playback\nawait setAudioModeAsync({\n  playsInSilentMode: true,\n  shouldPlayInBackground: true,\n  interruptionModeAndroid: 'duckOthers',\n  interruptionMode: 'mixWithOthers'\n});\n\n// Configure audio for recording\nawait setAudioModeAsync({\n  allowsRecording: true,\n  playsInSilentMode: false\n});\n```"}]}]},"parameters":[{"name":"mode","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Partial audio mode configuration object. Only specified properties will be updated."}]},"type":{"type":"reference","target":{"qualifiedName":"Partial"},"typeArguments":[{"type":"reference","name":"AudioMode","package":"expo-audio"}],"name":"Partial","package":"typescript"}}],"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"setIsAudioActiveAsync","variant":"declaration","kind":64,"signatures":[{"name":"setIsAudioActiveAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Enables or disables the audio subsystem globally.\n\nWhen set to "},{"kind":"code","text":"`false`"},{"kind":"text","text":", this will pause all audio playback and prevent new audio from playing.\nThis is useful for implementing app-wide audio controls or responding to system events."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise that resolves when the audio state has been updated."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { setIsAudioActiveAsync } from 'expo-audio';\n\n// Disable all audio when app goes to background\nconst handleAppStateChange = async (nextAppState) => {\n  if (nextAppState === 'background') {\n    await setIsAudioActiveAsync(false);\n  } else if (nextAppState === 'active') {\n    await setIsAudioActiveAsync(true);\n  }\n};\n```"}]}]},"parameters":[{"name":"active","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Whether audio should be active ("},{"kind":"code","text":"`true`"},{"kind":"text","text":") or disabled ("},{"kind":"code","text":"`false`"},{"kind":"text","text":")."}]},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"useAudioPlayer","variant":"declaration","kind":64,"signatures":[{"name":"useAudioPlayer","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Creates an "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":" instance that automatically releases when the component unmounts.\n\nThis hook manages the player's lifecycle and ensures it's properly disposed when no longer needed.\nThe player will start loading the audio source immediately upon creation."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"An "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":" instance that's automatically managed by the component lifecycle."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useAudioPlayer } from 'expo-audio';\n\nfunction MyComponent() {\n  const player = useAudioPlayer(require('./sound.mp3'));\n\n  return (\n    <Button title=\"Play\" onPress={() => player.play()} />\n  );\n}\n```"}]},{"tag":"@example","name":"Using downloadFirst","content":[{"kind":"code","text":"```tsx\nimport { useAudioPlayer } from 'expo-audio';\n\nfunction MyComponent() {\n  const player = useAudioPlayer('https://example.com/audio.mp3', {\n    updateInterval: 1000,\n    downloadFirst: true,\n  });\n\n  return (\n    <Button title=\"Play\" onPress={() => player.play()} />\n  );\n}\n```"}]}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The audio source to load. Can be a local asset via "},{"kind":"code","text":"`require()`"},{"kind":"text","text":", a remote URL, or null for no initial source."}]},"type":{"type":"reference","name":"AudioSource","package":"expo-audio"},"defaultValue":"null"},{"name":"options","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Audio player configuration options."}]},"type":{"type":"reference","name":"AudioPlayerOptions","package":"expo-audio"},"defaultValue":"{}"}],"type":{"type":"reference","name":"AudioPlayer","package":"expo-audio"}}]},{"name":"useAudioPlayerStatus","variant":"declaration","kind":64,"signatures":[{"name":"useAudioPlayerStatus","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook that provides real-time playback status updates for an "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":".\n\nThis hook automatically subscribes to playback status changes and returns the current status.\nThe status includes information about playback state, current time, duration, loading state, and more."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The current "},{"kind":"code","text":"`AudioStatus`"},{"kind":"text","text":" object containing playback information."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useAudioPlayer, useAudioPlayerStatus } from 'expo-audio';\n\nfunction PlayerComponent() {\n  const player = useAudioPlayer(require('./sound.mp3'));\n  const status = useAudioPlayerStatus(player);\n\n  return (\n    <View>\n      <Text>Playing: {status.isPlaying ? 'Yes' : 'No'}</Text>\n      <Text>Current Time: {status.currentTime}s</Text>\n      <Text>Duration: {status.duration}s</Text>\n    </View>\n  );\n}\n```"}]}]},"parameters":[{"name":"player","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":" instance to monitor."}]},"type":{"type":"reference","name":"AudioPlayer","package":"expo-audio"}}],"type":{"type":"reference","name":"AudioStatus","package":"expo-audio"}}]},{"name":"useAudioRecorder","variant":"declaration","kind":64,"signatures":[{"name":"useAudioRecorder","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook that creates an "},{"kind":"code","text":"`AudioRecorder`"},{"kind":"text","text":" instance for recording audio.\n\nThis hook manages the recorder's lifecycle and ensures it's properly disposed when no longer needed.\nThe recorder is automatically prepared with the provided options and can be used to record audio."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"An "},{"kind":"code","text":"`AudioRecorder`"},{"kind":"text","text":" instance that's automatically managed by the component lifecycle."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useAudioRecorder, RecordingPresets } from 'expo-audio';\n\nfunction RecorderComponent() {\n  const recorder = useAudioRecorder(\n    RecordingPresets.HIGH_QUALITY,\n    (status) => console.log('Recording status:', status)\n  );\n\n  const startRecording = async () => {\n    await recorder.prepareToRecordAsync();\n    recorder.record();\n  };\n\n  return (\n    <Button title=\"Start Recording\" onPress={startRecording} />\n  );\n}\n```"}]}]},"parameters":[{"name":"options","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Recording configuration options including format, quality, sample rate, etc."}]},"type":{"type":"reference","name":"RecordingOptions","package":"expo-audio"}},{"name":"statusListener","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Optional callback function that receives recording status updates."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"status","variant":"param","kind":32768,"type":{"type":"reference","name":"RecordingStatus","package":"expo-audio"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"AudioRecorder","package":"expo-audio"}}]},{"name":"useAudioRecorderState","variant":"declaration","kind":64,"signatures":[{"name":"useAudioRecorderState","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook that provides real-time recording state updates for an "},{"kind":"code","text":"`AudioRecorder`"},{"kind":"text","text":".\n\nThis hook polls the recorder's status at regular intervals and returns the current recording state.\nUse this when you need to monitor the recording status without setting up a status listener."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The current "},{"kind":"code","text":"`RecorderState`"},{"kind":"text","text":" containing recording information."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useAudioRecorder, useAudioRecorderState, RecordingPresets } from 'expo-audio';\n\nfunction RecorderStatusComponent() {\n  const recorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);\n  const state = useAudioRecorderState(recorder);\n\n  return (\n    <View>\n      <Text>Recording: {state.isRecording ? 'Yes' : 'No'}</Text>\n      <Text>Duration: {state.currentTime}s</Text>\n      <Text>Can Record: {state.canRecord ? 'Yes' : 'No'}</Text>\n    </View>\n  );\n}\n```"}]}]},"parameters":[{"name":"recorder","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`AudioRecorder`"},{"kind":"text","text":" instance to monitor."}]},"type":{"type":"reference","name":"AudioRecorder","package":"expo-audio"}},{"name":"interval","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"How often (in milliseconds) to poll the recorder's status. Defaults to 500ms."}]},"type":{"type":"intrinsic","name":"number"},"defaultValue":"500"}],"type":{"type":"reference","name":"RecorderState","package":"expo-audio"}}]},{"name":"useAudioSampleListener","variant":"declaration","kind":64,"signatures":[{"name":"useAudioSampleListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook that sets up audio sampling for an "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":" and calls a listener with audio data.\n\nThis hook enables audio sampling on the player (if supported) and subscribes to audio sample updates.\nAudio sampling provides real-time access to audio waveform data for visualization or analysis.\n\n> **Note:** Audio sampling requires "},{"kind":"code","text":"`RECORD_AUDIO`"},{"kind":"text","text":" permission on Android and is not supported on all platforms."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useAudioPlayer, useAudioSampleListener } from 'expo-audio';\n\nfunction AudioVisualizerComponent() {\n  const player = useAudioPlayer(require('./music.mp3'));\n\n  useAudioSampleListener(player, (sample) => {\n    // Use sample.channels array for audio visualization\n    console.log('Audio sample:', sample.channels[0].frames);\n  });\n\n  return <AudioWaveform player={player} />;\n}\n```"}]}]},"parameters":[{"name":"player","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`AudioPlayer`"},{"kind":"text","text":" instance to sample audio from."}]},"type":{"type":"reference","name":"AudioPlayer","package":"expo-audio"}},{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Function called with each audio sample containing waveform data."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"data","variant":"param","kind":32768,"type":{"type":"reference","name":"AudioSample","package":"expo-audio"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]}],"packageName":"expo-audio"}