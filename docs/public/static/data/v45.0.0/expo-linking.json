{"name":"expo-linking","kind":1,"kindString":"Project","originalName":"","children":[{"name":"CreateURLOptions","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"isTripleSlashed","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Should the URI be triple slashed "},{"kind":"code","text":"`scheme:///path`"},{"kind":"text","text":" or double slashed "},{"kind":"code","text":"`scheme://path`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"queryParams","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object of parameters that will be converted into a query string."}]},"type":{"type":"reference","name":"QueryParams"}},{"name":"scheme","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"URI protocol "},{"kind":"code","text":"`<scheme>://`"},{"kind":"text","text":" that must be built into your native app."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"EventType","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"nativeEvent","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"MessageEvent","qualifiedName":"MessageEvent","package":"typescript"}},{"name":"url","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}}]}}},{"name":"NativeURLListener","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","parameters":[{"name":"nativeEvent","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"MessageEvent","qualifiedName":"MessageEvent","package":"typescript"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"ParsedURL","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"hostname","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"path","kind":1024,"kindString":"Property","comment":{"summary":[{"kind":"text","text":"The path into the app specified by the URL."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"queryParams","kind":1024,"kindString":"Property","comment":{"summary":[{"kind":"text","text":"The set of query parameters specified by the query string of the url used to open the app."}]},"type":{"type":"union","types":[{"type":"reference","name":"QueryParams"},{"type":"literal","value":null}]}},{"name":"scheme","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}}},{"name":"QueryParams","kind":4194304,"kindString":"Type alias","type":{"type":"reference","name":"ParsedQs","qualifiedName":"QueryString.ParsedQs","package":"@types/qs"}},{"name":"SendIntentExtras","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"key","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}},{"name":"value","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"boolean"}]}}]}}},{"name":"URLListener","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"EventType"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"addEventListener","kind":64,"kindString":"Function","signatures":[{"name":"addEventListener","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Add a handler to "},{"kind":"code","text":"`Linking`"},{"kind":"text","text":" changes by listening to the "},{"kind":"code","text":"`url`"},{"kind":"text","text":" event type and providing the handler.\nIt is recommended to use the ["},{"kind":"code","text":"`useURL()`"},{"kind":"text","text":"](#useurl) hook instead."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"An EmitterSubscription that has the remove method from EventSubscription"}]},{"tag":"@see","content":[{"kind":"text","text":"[React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener)."}]}]},"parameters":[{"name":"type","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The only valid type is "},{"kind":"code","text":"`'url'`"},{"kind":"text","text":"."}]},"type":{"type":"literal","value":"url"}},{"name":"handler","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"An ["},{"kind":"code","text":"`URLListener`"},{"kind":"text","text":"](#urllistener) function that takes an "},{"kind":"code","text":"`event`"},{"kind":"text","text":" object of the type\n["},{"kind":"code","text":"`EventType`"},{"kind":"text","text":"](#eventype)."}]},"type":{"type":"reference","name":"URLListener"}}],"type":{"type":"reference","name":"EmitterSubscription","qualifiedName":"EmitterSubscription","package":"@types/react-native"}}]},{"name":"canOpenURL","kind":64,"kindString":"Function","signatures":[{"name":"canOpenURL","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Determine whether or not an installed app can handle a given URL.\nOn web this always returns "},{"kind":"code","text":"`true`"},{"kind":"text","text":" because there is no API for detecting what URLs can be opened."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" object that is fulfilled with "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the URL can be handled, otherwise it\n"},{"kind":"code","text":"`false`"},{"kind":"text","text":" if not.\n\nThe "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" will reject on Android if it was impossible to check if the URL can be opened, and\non iOS if you didn't [add the specific scheme in the "},{"kind":"code","text":"`LSApplicationQueriesSchemes`"},{"kind":"text","text":" key inside **Info.plist**](/guides/linking#opening-links-to-other-apps)."}]}]},"parameters":[{"name":"url","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The URL that you want to test can be opened."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"collectManifestSchemes","kind":64,"kindString":"Function","signatures":[{"name":"collectManifestSchemes","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Collect a list of platform schemes from the manifest.\n\nThis method is based on the "},{"kind":"code","text":"`Scheme`"},{"kind":"text","text":" modules from "},{"kind":"code","text":"`@expo/config-plugins`"},{"kind":"text","text":"\nwhich are used for collecting the schemes before prebuilding a native app.\n\n- iOS: scheme -> ios.scheme -> ios.bundleIdentifier\n- Android: scheme -> android.scheme -> android.package"}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"name":"createURL","kind":64,"kindString":"Function","signatures":[{"name":"createURL","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Helper method for constructing a deep link into your app, given an optional path and set of query\nparameters. Creates a URI scheme with two slashes by default.\n\nThe scheme in bare and standalone must be defined in the Expo config ("},{"kind":"code","text":"`app.config.js`"},{"kind":"text","text":" or "},{"kind":"code","text":"`app.json`"},{"kind":"text","text":")\nunder "},{"kind":"code","text":"`expo.scheme`"},{"kind":"text","text":".\n\n# Examples\n- Bare: "},{"kind":"code","text":"`<scheme>://path`"},{"kind":"text","text":" - uses provided scheme or scheme from Expo config "},{"kind":"code","text":"`scheme`"},{"kind":"text","text":".\n- Standalone, Custom: "},{"kind":"code","text":"`yourscheme://path`"},{"kind":"text","text":"\n- Web (dev): "},{"kind":"code","text":"`https://localhost:19006/path`"},{"kind":"text","text":"\n- Web (prod): "},{"kind":"code","text":"`https://myapp.com/path`"},{"kind":"text","text":"\n- Expo Client (dev): "},{"kind":"code","text":"`exp://128.0.0.1:19000/--/path`"},{"kind":"text","text":"\n- Expo Client (prod): "},{"kind":"code","text":"`exp://exp.host/@yourname/your-app/--/path`"}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A URL string which points to your app with the given deep link information."}]}]},"parameters":[{"name":"path","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"Addition path components to append to the base URL."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"namedParameters","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"Additional options object."}]},"originalName":"__namedParameters","type":{"type":"reference","name":"CreateURLOptions"},"defaultValue":"{}"}],"type":{"type":"intrinsic","name":"string"}}]},{"name":"getInitialURL","kind":64,"kindString":"Function","signatures":[{"name":"getInitialURL","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Get the URL that was used to launch the app if it was launched by a link."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The URL string that launched your app, or "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"hasConstantsManifest","kind":64,"kindString":"Function","signatures":[{"name":"hasConstantsManifest","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Ensure the user has linked the expo-constants manifest in bare workflow."}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"hasCustomScheme","kind":64,"kindString":"Function","signatures":[{"name":"hasCustomScheme","kind":4096,"kindString":"Call signature","type":{"type":"intrinsic","name":"boolean"}}]},{"name":"makeUrl","kind":64,"kindString":"Function","signatures":[{"name":"makeUrl","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Create a URL that works for the environment the app is currently running in.\nThe scheme in bare and standalone must be defined in the app.json under "},{"kind":"code","text":"`expo.scheme`"},{"kind":"text","text":".\n\n# Examples\n- Bare: empty string\n- Standalone, Custom: "},{"kind":"code","text":"`yourscheme:///path`"},{"kind":"text","text":"\n- Web (dev): "},{"kind":"code","text":"`https://localhost:19006/path`"},{"kind":"text","text":"\n- Web (prod): "},{"kind":"code","text":"`https://myapp.com/path`"},{"kind":"text","text":"\n- Expo Client (dev): "},{"kind":"code","text":"`exp://128.0.0.1:19000/--/path`"},{"kind":"text","text":"\n- Expo Client (prod): "},{"kind":"code","text":"`exp://exp.host/@yourname/your-app/--/path`"}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A URL string which points to your app with the given deep link information."}]},{"tag":"@deprecated","content":[{"kind":"text","text":"An alias for ["},{"kind":"code","text":"`createURL()`"},{"kind":"text","text":"](#linkingcreateurlpath-namedparameters). This method is\ndeprecated and will be removed in a future SDK version."}]}]},"parameters":[{"name":"path","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"addition path components to append to the base URL."}]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"''"},{"name":"queryParams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object with a set of query parameters. These will be merged with any\nExpo-specific parameters that are needed (e.g. release channel) and then appended to the URL\nas a query string."}]},"type":{"type":"reference","name":"ParsedQs","qualifiedName":"QueryString.ParsedQs","package":"@types/qs"}},{"name":"scheme","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Optional URI protocol to use in the URL "},{"kind":"code","text":"`<scheme>:///`"},{"kind":"text","text":", when "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" the scheme\nwill be chosen from the Expo config ("},{"kind":"code","text":"`app.config.js`"},{"kind":"text","text":" or "},{"kind":"code","text":"`app.json`"},{"kind":"text","text":")."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}]},{"name":"openSettings","kind":64,"kindString":"Function","signatures":[{"name":"openSettings","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Open the operating system settings app and displays the app’s custom settings, if it has any."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"openURL","kind":64,"kindString":"Function","signatures":[{"name":"openURL","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\nfor more information."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that is fulfilled with "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the link is opened operating system\nautomatically or the user confirms the prompt to open the link. The "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" rejects if there\nare no applications registered for the URL or the user cancels the dialog."}]}]},"parameters":[{"name":"url","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"A URL for the operating system to open, eg: "},{"kind":"code","text":"`tel:5555555`"},{"kind":"text","text":", "},{"kind":"code","text":"`exp://`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"literal","value":true}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"parse","kind":64,"kindString":"Function","signatures":[{"name":"parse","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Helper method for parsing out deep link information from a URL."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`ParsedURL`"},{"kind":"text","text":" object."}]}]},"parameters":[{"name":"url","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"A URL that points to the currently running experience (e.g. an output of "},{"kind":"code","text":"`Linking.createURL()`"},{"kind":"text","text":")."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"ParsedURL"}}]},{"name":"parseInitialURLAsync","kind":64,"kindString":"Function","signatures":[{"name":"parseInitialURLAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Helper method which wraps React Native's "},{"kind":"code","text":"`Linking.getInitialURL()`"},{"kind":"text","text":" in "},{"kind":"code","text":"`Linking.parse()`"},{"kind":"text","text":".\nParses the deep link information out of the URL used to open the experience initially.\nIf no link opened the app, all the fields will be "},{"kind":"code","text":"`null`"},{"kind":"text","text":".\n> On the web it parses the current window URL."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that resolves with "},{"kind":"code","text":"`ParsedURL`"},{"kind":"text","text":" object."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ParsedURL"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"removeEventListener","kind":64,"kindString":"Function","signatures":[{"name":"removeEventListener","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Remove a handler by passing the "},{"kind":"code","text":"`url`"},{"kind":"text","text":" event type and the handler."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"[React Native Docs Linking page](https://reactnative.dev/docs/linking#removeeventlistener)."}]},{"tag":"@deprecated","content":[{"kind":"text","text":"Call "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" on the return value of "},{"kind":"code","text":"`addEventListener()`"},{"kind":"text","text":" instead."}]}]},"parameters":[{"name":"type","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The only valid type is "},{"kind":"code","text":"`'url'`"},{"kind":"text","text":"."}]},"type":{"type":"literal","value":"url"}},{"name":"handler","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"An ["},{"kind":"code","text":"`URLListener`"},{"kind":"text","text":"](#urllistener) function that takes an "},{"kind":"code","text":"`event`"},{"kind":"text","text":" object of the type\n["},{"kind":"code","text":"`EventType`"},{"kind":"text","text":"](#eventype)."}]},"type":{"type":"reference","name":"URLListener"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"resolveScheme","kind":64,"kindString":"Function","signatures":[{"name":"resolveScheme","kind":4096,"kindString":"Call signature","parameters":[{"name":"options","kind":32768,"kindString":"Parameter","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"isSilent","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}},{"name":"scheme","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}]}}}],"type":{"type":"intrinsic","name":"string"}}]},{"name":"sendIntent","kind":64,"kindString":"Function","signatures":[{"name":"sendIntent","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Launch an Android intent with extras.\n> Use [IntentLauncher](./intent-launcher) instead, "},{"kind":"code","text":"`sendIntent`"},{"kind":"text","text":" is only included in\n> "},{"kind":"code","text":"`Linking`"},{"kind":"text","text":" for API compatibility with React Native's Linking API."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"parameters":[{"name":"action","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"}},{"name":"extras","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"reference","name":"SendIntentExtras"}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"useURL","kind":64,"kindString":"Function","signatures":[{"name":"useURL","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Returns the initial URL followed by any subsequent changes to the URL."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns the initial URL or "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}]}