{"name":"expo-cellular","kind":1,"kindString":"Project","originalName":"","children":[{"name":"CellularGeneration","kind":8,"kindString":"Enumeration","comment":{"summary":[{"kind":"text","text":"Describes the current generation of the cellular connection. It is an enum with these possible\nvalues:"}]},"children":[{"name":"CELLULAR_2G","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"text","text":"Currently connected to a 2G cellular network. Includes CDMA, EDGE, GPRS, and IDEN type connections."}]},"type":{"type":"literal","value":1}},{"name":"CELLULAR_3G","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"text","text":"Currently connected to a 3G cellular network. Includes EHRPD, EVDO, HSPA, HSUPA, HSDPA, and UTMS type connections."}]},"type":{"type":"literal","value":2}},{"name":"CELLULAR_4G","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"text","text":"Currently connected to a 4G cellular network. Includes HSPAP and LTE type connections."}]},"type":{"type":"literal","value":3}},{"name":"CELLULAR_5G","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"text","text":"Currently connected to a 5G cellular network. Includes NR and NRNSA type connections."}]},"type":{"type":"literal","value":4}},{"name":"UNKNOWN","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"text","text":"Either we are not currently connected to a cellular network or type could not be determined."}]},"type":{"type":"literal","value":0}}]},{"name":"allowsVoip","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Indicates if the carrier allows making VoIP calls on its network. On Android, this checks whether\nthe system supports SIP-based VoIP API. See [here](https://developer.android.com/reference/android/net/sip/SipManager.html#isVoipSupported(android.content.Context))\nto view more information.\n\nOn iOS, if you configure a device for a carrier and then remove the SIM card, this property\nretains the "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":" value indicating the carrier’s policy regarding VoIP. If you then install\na new SIM card, its VoIP policy "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":" replaces the previous value of this property.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nCellular.allowsVoip; // true or false\n```"}]},{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`allowsVoipAsync()`"},{"kind":"text","text":"](#allowsvoipasync) instead."}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"carrier","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The name of the user’s home cellular service provider. If the device has dual SIM cards, only the\ncarrier for the currently active SIM card will be returned. On Android, this value is only\navailable when the SIM state is ["},{"kind":"code","text":"`SIM_STATE_READY`"},{"kind":"text","text":"](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY).\nOtherwise, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":".\n\nOn iOS, if you configure a device for a carrier and then remove the SIM card, this property\nretains the name of the carrier. If you then install a new SIM card, its carrier name replaces\nthe previous value of this property. The value for this property is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the user never\nconfigured a carrier for the device.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nCellular.carrier; // \"T-Mobile\" or \"Verizon\"\n```"}]},{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`getCarrierNameAsync()`"},{"kind":"text","text":"](#getcarriernameasync) instead."}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"isoCountryCode","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The ISO country code for the user’s cellular service provider. On iOS, the value is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if any\nof the following apply:\n- The device is in airplane mode.\n- There is no SIM card in the device.\n- The device is outside of cellular service range.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nCellular.isoCountryCode; // \"us\" or \"au\"\n```"}]},{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`getIsoCountryCodeAsync()`"},{"kind":"text","text":"](#getisocountrycodeAsync) instead."}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"mobileCountryCode","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The mobile country code (MCC) for the user’s current registered cellular service provider.\nOn Android, this value is only available when SIM state is ["},{"kind":"code","text":"`SIM_STATE_READY`"},{"kind":"text","text":"](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY). Otherwise, this\nreturns "},{"kind":"code","text":"`null`"},{"kind":"text","text":". On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode.\nFurthermore, the value for this property is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if any of the following apply:\n- There is no SIM card in the device.\n- The device is outside of cellular service range.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nCellular.mobileCountryCode; // \"310\"\n```"}]},{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`getMobileCountryCodeAsync()`"},{"kind":"text","text":"](#getmobilecountrycodeasync) instead."}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"mobileNetworkCode","kind":32,"kindString":"Variable","flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The ISO country code for the user’s cellular service provider. On iOS, the value is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if\nany of the following apply:\n- The device is in airplane mode.\n- There is no SIM card in the device.\n- The device is outside of cellular service range.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nCellular.mobileNetworkCode; // \"260\"\n```"}]},{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`getMobileNetworkCodeAsync()`"},{"kind":"text","text":"](#getmobilenetworkcodeasync) instead."}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"allowsVoipAsync","kind":64,"kindString":"Function","signatures":[{"name":"allowsVoipAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns if the carrier allows making VoIP calls on its network. On Android, this checks whether\nthe system supports SIP-based VoIP API. See [here](https://developer.android.com/reference/android/net/sip/SipManager.html#isVoipSupported(android.content.Context))\nto view more information.\n\nOn iOS, if you configure a device for a carrier and then remove the SIM card, this property\nretains the "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":" value indicating the carrier’s policy regarding VoIP. If you then install\na new SIM card, its VoIP policy "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":" replaces the previous value of this property.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Cellular.allowsVoipAsync(); // true or false\n```"}]}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"literal","value":null}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getCarrierNameAsync","kind":64,"kindString":"Function","signatures":[{"name":"getCarrierNameAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns name of the user’s home cellular service provider. If the device has dual SIM cards, only the\ncarrier for the currently active SIM card will be returned.\n\nOn Android, this value is only available when the SIM state is ["},{"kind":"code","text":"`SIM_STATE_READY`"},{"kind":"text","text":"](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY).\nOtherwise, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":".\n\nOn iOS, if you configure a device for a carrier and then remove the SIM card, this property\nretains the name of the carrier. If you then install a new SIM card, its carrier name replaces\nthe previous value of this property. The value for this property is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the user never\nconfigured a carrier for the device.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Cellular.getCarrierNameAsync(); // \"T-Mobile\" or \"Verizon\"\n```"}]}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getCellularGenerationAsync","kind":64,"kindString":"Function","signatures":[{"name":"getCellularGenerationAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a promise which fulfils with a ["},{"kind":"code","text":"`Cellular.CellularGeneration`"},{"kind":"text","text":"](#cellulargeneration)\nenum value that represents the current cellular-generation type.\n\nYou will need to check if the native permission has been accepted to obtain generation. \nIf the permission is denied "},{"kind":"code","text":"`getCellularGenerationAsync`"},{"kind":"text","text":" will resolve to "},{"kind":"code","text":"`Cellular.Cellular Generation.UNKNOWN`"},{"kind":"text","text":".\n\n\nOn web, this method uses ["},{"kind":"code","text":"`navigator.connection.effectiveType`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType)\nto detect the effective type of the connection using a combination of recently observed\nround-trip time and downlink values. See [here](https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API)\nto view browser compatibility."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Cellular.getCellularGenerationAsync();\n// CellularGeneration.CELLULAR_4G\n```"}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"CellularGeneration"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getIsoCountryCodeAsync","kind":64,"kindString":"Function","signatures":[{"name":"getIsoCountryCodeAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns the ISO country code for the user’s cellular service provider.\n\nOn iOS, the value is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if any of the following apply:\n- The device is in airplane mode.\n- There is no SIM card in the device.\n- The device is outside of cellular service range.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Cellular.getIsoCountryCodeAsync(); // \"us\" or \"au\"\n```"}]}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getMobileCountryCodeAsync","kind":64,"kindString":"Function","signatures":[{"name":"getMobileCountryCodeAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns mobile country code (MCC) for the user’s current registered cellular service provider.\n\nOn Android, this value is only available when SIM state is ["},{"kind":"code","text":"`SIM_STATE_READY`"},{"kind":"text","text":"](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY). Otherwise, this\nreturns "},{"kind":"code","text":"`null`"},{"kind":"text","text":". On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode.\nFurthermore, the value for this property is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if any of the following apply:\n- There is no SIM card in the device.\n- The device is outside of cellular service range.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Cellular.getMobileCountryCodeAsync(); // \"310\"\n```"}]}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getMobileNetworkCodeAsync","kind":64,"kindString":"Function","signatures":[{"name":"getMobileNetworkCodeAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns the mobile network code (MNC) for the user’s current registered cellular service provider.\n\nOn Android, this value is only available when SIM state is ["},{"kind":"code","text":"`SIM_STATE_READY`"},{"kind":"text","text":"](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY). Otherwise, this\nreturns "},{"kind":"code","text":"`null`"},{"kind":"text","text":". On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode.\nFurthermore, the value for this property is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if any of the following apply:\n- There is no SIM card in the device.\n- The device is outside of cellular service range.\n\nOn web, this returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Cellular.getMobileNetworkCodeAsync(); // \"310\"\n```"}]}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getPermissionsAsync","kind":64,"kindString":"Function","signatures":[{"name":"getPermissionsAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Checks user's permissions for accessing phone state."}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"PermissionResponse"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"requestPermissionsAsync","kind":64,"kindString":"Function","signatures":[{"name":"requestPermissionsAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Asks the user to grant permissions for accessing the phone state."}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"PermissionResponse"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"usePermissions","kind":64,"kindString":"Function","signatures":[{"name":"usePermissions","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Check or request permissions to access the phone state.\nThis uses both "},{"kind":"code","text":"`Cellular.requestPermissionsAsync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`Cellular.getPermissionsAsync`"},{"kind":"text","text":" to interact with the permissions."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst [status, requestPermission] = Cellular.usePermissions();\n```"}]}]},"parameters":[{"name":"options","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"object"}],"name":"PermissionHookOptions"}}],"type":{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"PermissionResponse"}]},{"type":"reference","typeArguments":[{"type":"reference","name":"PermissionResponse"}],"name":"RequestPermissionMethod"},{"type":"reference","typeArguments":[{"type":"reference","name":"PermissionResponse"}],"name":"GetPermissionMethod"}]}}]}]}