{"name":"expo-firebase-analytics","kind":1,"kindString":"Project","originalName":"","children":[{"name":"FirebaseAnalyticsJS","kind":128,"kindString":"Class","comment":{"summary":[{"kind":"text","text":"A pure JavaScript Google Firebase Analytics implementation that uses\nthe HTTPS Measurement API 2 to send events to Google Analytics.\n\nThis class provides an alternative for the Firebase Analytics module\nshipped with the Firebase JS SDK. That library uses the gtag.js dependency\nand requires certain browser features. This prevents the use\nanalytics on other platforms, such as Node-js and react-native.\n\nFirebaseAnalyticsJS provides a bare-bone implementation of the new\nHTTPS Measurement API 2 protocol (which is undocumented), with an API\nthat follows the Firebase Analytics JS SDK."}]},"children":[{"name":"constructor","kind":512,"kindString":"Constructor","signatures":[{"name":"new FirebaseAnalyticsJS","kind":16384,"kindString":"Constructor signature","parameters":[{"name":"config","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"FirebaseAnalyticsJSConfig"}},{"name":"options","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"FirebaseAnalyticsJSOptions"}}],"type":{"type":"reference","name":"FirebaseAnalyticsJS"}}]},{"name":"config","kind":1024,"kindString":"Property","flags":{"isPublic":true,"isReadonly":true},"type":{"type":"reference","name":"FirebaseAnalyticsJSConfig"}},{"name":"url","kind":1024,"kindString":"Property","flags":{"isPublic":true,"isReadonly":true},"type":{"type":"intrinsic","name":"string"}},{"name":"clearEvents","kind":2048,"kindString":"Method","signatures":[{"name":"clearEvents","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Clears any queued events and cancels the flush timer."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"logEvent","kind":2048,"kindString":"Method","signatures":[{"name":"logEvent","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#log-event"}]},"parameters":[{"name":"eventName","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"}},{"name":"eventParams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","indexSignature":{"name":"__index","kind":8192,"kindString":"Index signature","parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}}}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"resetAnalyticsData","kind":2048,"kindString":"Method","signatures":[{"name":"resetAnalyticsData","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Clears all analytics data for this instance."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setAnalyticsCollectionEnabled","kind":2048,"kindString":"Method","signatures":[{"name":"setAnalyticsCollectionEnabled","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-analytics-collection-enabled"}]},"parameters":[{"name":"isEnabled","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setClientId","kind":2048,"kindString":"Method","signatures":[{"name":"setClientId","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Sets a new value for the client ID."}]},"parameters":[{"name":"clientId","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"setDebugModeEnabled","kind":2048,"kindString":"Method","signatures":[{"name":"setDebugModeEnabled","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Enables or disabled debug mode."}]},"parameters":[{"name":"isEnabled","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setSessionTimeoutDuration","kind":2048,"kindString":"Method","signatures":[{"name":"setSessionTimeoutDuration","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Not supported, this method is a no-op"}]},"parameters":[{"name":"_sessionTimeoutInterval","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setUserId","kind":2048,"kindString":"Method","signatures":[{"name":"setUserId","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-user-id"}]},"parameters":[{"name":"userId","kind":32768,"kindString":"Parameter","type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setUserProperties","kind":2048,"kindString":"Method","signatures":[{"name":"setUserProperties","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"https://firebase.google.com/docs/reference/js/firebase.analytics.Analytics#set-user-properties"}]},"parameters":[{"name":"userProperties","kind":32768,"kindString":"Parameter","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","indexSignature":{"name":"__index","kind":8192,"kindString":"Index signature","parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}}}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"parseEvent","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"parseEvent","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Parses an event (as passed to logEvent) and throws an error when the\nevent-name or parameters are invalid.\n\nUpon success, returns the event in encoded format, ready to be send\nthrough the Google Measurement API v2."}]},"parameters":[{"name":"options","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"FirebaseAnalyticsJSOptions"}},{"name":"eventName","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"}},{"name":"eventParams","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","indexSignature":{"name":"__index","kind":8192,"kindString":"Index signature","parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}}}}}],"type":{"type":"reference","name":"FirebaseAnalyticsJSCodedEvent"}}]},{"name":"parseUserProperty","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"parseUserProperty","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Parses user-properties (as passed to setUserProperties) and throws an error when\none of the user properties is invalid.\n\nUpon success, returns the user-properties in encoded format, ready to be send\nthrough the Google Measurement API v2."}]},"parameters":[{"name":"options","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"FirebaseAnalyticsJSOptions"}},{"name":"userPropertyName","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"}},{"name":"userPropertyValue","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"string"}}]}]},{"name":"logEvent","kind":64,"kindString":"Function","signatures":[{"name":"logEvent","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Logs an app event. The event can have up to 25 parameters. Events with the same name must have\nthe same parameters. Up to 500 event names are supported. Using predefined events and/or\nparameters is recommended for optimal reporting. See [the Google Analytics event reference](https://developers.google.com/gtagjs/reference/event)\nfor a list of all predefined events.\n\n> The following event names are reserved for the native SDKs automatic collection and cannot be used: "},{"kind":"code","text":"`ad_activeview, ad_click, ad_exposure, ad_query, ad_reward, adunit_exposure, app_background, app_clear_data, app_exception, app_remove, app_store_refund, app_store_subscription_cancel, ad_activeview, ad_click, ad_exposure, ad_query, ad_reward, adunit_exposure, app_background, app_clear_data, app_exception, app_remove, app_store_refund, app_store_subscription_cancel, app_store_subscription_convert, app_store_subscription_renew, app_update, app_upgrade, dynamic_link_app_open, dynamic_link_app_update, dynamic_link_first_open, error, firebase_campaign, first_open, first_visit, in_app_purchase, notification_dismiss, notification_foreground, notification_open, notification_receive, os_update, session_start, session_start_with_rollout, user_engagement`"}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Analytics.logEvent('add_to_cart', {\n  currency: 'USD',\n  value: 29.98\n  items: [{\n    id: \"P12345\",\n    name: \"Expo Warhol T-Shirt\",\n    brand: \"Expo\",\n    category: \"Apparel/T-Shirts\",\n    coupon: \"SUMMER_DISCOUNT\",\n    list_name: \"Search Results\",\n    list_position: 1,\n    price: 14.99,\n    quantity: 2,\n    variant: \"Blue\"\n  }]\n});\n```"}]}]},"parameters":[{"name":"name","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The name of the event. Should contain 1 to 40 alphanumeric characters or underscores.\nThe name must start with an alphabetic character. Some event names are  reserved. The "},{"kind":"code","text":"`firebase_`"},{"kind":"text","text":",\n"},{"kind":"code","text":"`google_`"},{"kind":"text","text":", and "},{"kind":"code","text":"`ga_`"},{"kind":"text","text":" prefixes are reserved and should not be used. Note that event names are\ncase-sensitive and that logging two events whose names differ only in case will result in two\ndistinct events. To manually log screen view events, use the "},{"kind":"code","text":"`screen_view`"},{"kind":"text","text":" event name."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"properties","kind":32768,"kindString":"Parameter","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The dictionary of event parameters. Passing "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" indicates that the\nevent has no parameters. Parameter names can be up to 40 characters long and must start with an\nalphabetic character and contain only alphanumeric characters and underscores. Only "},{"kind":"code","text":"`String`"},{"kind":"text","text":" and\n"},{"kind":"code","text":"`Number`"},{"kind":"text","text":" parameter types are supported; and "},{"kind":"code","text":"`items`"},{"kind":"text","text":" arrays containing dictionaries.\n"},{"kind":"code","text":"`String`"},{"kind":"text","text":" parameter values can be up to 100 characters long. The "},{"kind":"code","text":"`firebase_`"},{"kind":"text","text":",  "},{"kind":"code","text":"`google_`"},{"kind":"text","text":", and\n"},{"kind":"code","text":"`ga_`"},{"kind":"text","text":" prefixes are reserved and should not be used for parameter names."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","qualifiedName":"Record","package":"typescript"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"resetAnalyticsData","kind":64,"kindString":"Function","signatures":[{"name":"resetAnalyticsData","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Clears all analytics data for this instance from the device and resets the app instance ID."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setAnalyticsCollectionEnabled","kind":64,"kindString":"Function","signatures":[{"name":"setAnalyticsCollectionEnabled","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Sets whether analytics collection is enabled for this app on this device. This setting is\npersisted across app sessions. __By default it is enabled__."}]},"parameters":[{"name":"isEnabled","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"A flag that enables or disables Analytics collection."}]},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setClientId","kind":64,"kindString":"Function","signatures":[{"name":"setClientId","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Sets the clientId to the given value. For best results, set this value before\ncalling any other functions on this module.\n\nBy default, the clientId is set to "},{"kind":"code","text":"`Constants.installationId`"},{"kind":"text","text":" in Expo Go, which is deprecated and\nwill be removed in SDK 44. At that time, this method will need to be used to set the "},{"kind":"code","text":"`clientId`"},{"kind":"text","text":"\nwhen using Expo Go."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"expo"}]}]},"parameters":[{"name":"clientId","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"UUIDv4 string value to set for the current session in Expo Go."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"setDebugModeEnabled","kind":64,"kindString":"Function","signatures":[{"name":"setDebugModeEnabled","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Enables or disabled debug mode on the Expo client, so events can\nbe tracked using the [DebugView in the Analytics dashboard](https://firebase.google.com/docs/analytics/debugview#reporting).\n\nThis option is only available in Expo Go. When using a custom development app, a standalone app,\nthe bare workflow or web, use the [natively available options](https://firebase.google.com/docs/analytics/debugview)."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"expo"}]}]},"parameters":[{"name":"isEnabled","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"A flag that enables or disables debug mode."}]},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setSessionTimeoutDuration","kind":64,"kindString":"Function","signatures":[{"name":"setSessionTimeoutDuration","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Sets the interval of inactivity in seconds that terminates the current session. The default\nvalue is 1800000 milliseconds (30 minutes).\n\n> Setting the session timeout only applies to the native iOS and Android SDKs. Calling this\n> method does nothing on Expo Go or web."}]},"parameters":[{"name":"sessionTimeoutInterval","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The custom time of inactivity in milliseconds before the current\nsession terminates."}]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setUnavailabilityLogging","kind":64,"kindString":"Function","signatures":[{"name":"setUnavailabilityLogging","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Enables or disables the warning and log messages when using Firebase Analytics on the Expo client.\n\nFirebase Analytics is not available on the Expo client and therefore logs the requests to the\nconsole for development purposes. To test Firebase Analytics, create a standalone build or custom\nclient. Use this function to suppress the warning and log messages."}]},"parameters":[{"name":"isEnabled","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"A flag that enables or disables unavailability logging."}]},"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"setUserId","kind":64,"kindString":"Function","signatures":[{"name":"setUserId","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Sets the user ID property. This feature must be used in accordance with [Google's Privacy Policy](https://www.google.com/policies/privacy)"}]},"parameters":[{"name":"userId","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The user ID to ascribe to the user of this app on this device, which must be\nnon-empty and no more than 256 characters long. Setting userID to null removes the user ID."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setUserProperties","kind":64,"kindString":"Function","signatures":[{"name":"setUserProperties","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Sets multiple user properties to the supplied values."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Analytics.setUserProperties({\n  loves_expo: 'a lot',\n});\n```"}]}]},"parameters":[{"name":"properties","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"Key/value set of user properties. Values can be up to 36 characters long.\nSetting the value to null removes the user property."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}],"name":"Record","qualifiedName":"Record","package":"typescript"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setUserProperty","kind":64,"kindString":"Function","signatures":[{"name":"setUserProperty","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Sets a user property to a given value. Up to 25 user property names are supported. Once set,\nuser property values persist throughout the app life-cycle and across sessions.\n\nThe following user property names are reserved and cannot be used:\n- "},{"kind":"code","text":"`first_open_time`"},{"kind":"text","text":"\n- "},{"kind":"code","text":"`last_deep_link_referrer`"},{"kind":"text","text":"\n- "},{"kind":"code","text":"`user_id`"}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Analytics.setUserProperty('favorite_batmobile', '1989 Burton-mobile');\n```"}]}]},"parameters":[{"name":"name","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The name of the user property to set. Should contain 1 to 24 alphanumeric characters\nor underscores and must start with an alphabetic character. The "},{"kind":"code","text":"`firebase_`"},{"kind":"text","text":", "},{"kind":"code","text":"`google_`"},{"kind":"text","text":", and\n"},{"kind":"code","text":"`ga_`"},{"kind":"text","text":" prefixes are reserved and should not be used for user property names."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"value","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The value of the user property. Values can be up to 36 characters long. Setting the\nvalue to null removes the user property."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]}]}