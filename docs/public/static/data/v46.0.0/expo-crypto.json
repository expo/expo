{"name":"expo-crypto","kind":1,"kindString":"Project","originalName":"","children":[{"name":"CryptoDigestAlgorithm","kind":8,"kindString":"Enumeration","comment":{"summary":[{"kind":"text","text":"["},{"kind":"code","text":"`Cryptographic hash function`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Glossary/Cryptographic_hash_function)"}]},"children":[{"name":"MD2","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"code","text":"`128`"},{"kind":"text","text":" bits."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"MD2"}},{"name":"MD4","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"code","text":"`128`"},{"kind":"text","text":" bits."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"MD4"}},{"name":"MD5","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"code","text":"`128`"},{"kind":"text","text":" bits."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"MD5"}},{"name":"SHA1","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"code","text":"`160`"},{"kind":"text","text":" bits."}]},"type":{"type":"literal","value":"SHA-1"}},{"name":"SHA256","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"code","text":"`256`"},{"kind":"text","text":" bits. Collision Resistant."}]},"type":{"type":"literal","value":"SHA-256"}},{"name":"SHA384","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"code","text":"`384`"},{"kind":"text","text":" bits. Collision Resistant."}]},"type":{"type":"literal","value":"SHA-384"}},{"name":"SHA512","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"code","text":"`512`"},{"kind":"text","text":" bits. Collision Resistant."}]},"type":{"type":"literal","value":"SHA-512"}}]},{"name":"CryptoEncoding","kind":8,"kindString":"Enumeration","children":[{"name":"BASE64","kind":16,"kindString":"Enumeration Member","comment":{"summary":[{"kind":"text","text":"Has trailing padding. Does not wrap lines. Does not have a trailing newline."}]},"type":{"type":"literal","value":"base64"}},{"name":"HEX","kind":16,"kindString":"Enumeration Member","type":{"type":"literal","value":"hex"}}]},{"name":"CryptoDigestOptions","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"encoding","kind":1024,"kindString":"Property","comment":{"summary":[{"kind":"text","text":"Format the digest is returned in."}]},"type":{"type":"reference","name":"CryptoEncoding"}}]}}},{"name":"Digest","kind":4194304,"kindString":"Type alias","type":{"type":"intrinsic","name":"string"}},{"name":"digestStringAsync","kind":64,"kindString":"Function","signatures":[{"name":"digestStringAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`digestStringAsync()`"},{"kind":"text","text":" method of "},{"kind":"code","text":"`Crypto`"},{"kind":"text","text":" generates a digest of the supplied "},{"kind":"code","text":"`data`"},{"kind":"text","text":" string with the provided digest "},{"kind":"code","text":"`algorithm`"},{"kind":"text","text":".\nA digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\nmeaning that it's very difficult to generate multiple inputs that have equal digest values.\nYou can specify the returned string format as one of "},{"kind":"code","text":"`CryptoEncoding`"},{"kind":"text","text":". By default, the resolved value will be formatted as a "},{"kind":"code","text":"`HEX`"},{"kind":"text","text":" string.\nOn web, this method can only be called from a secure origin (https) otherwise an error will be thrown."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Return a Promise which fulfills with a value representing the hashed input."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst digest = await Crypto.digestStringAsync(\n  Crypto.CryptoDigestAlgorithm.SHA512,\n  'ðŸ¥“ Easy to Digest! ðŸ’™'\n);\n```"}]}]},"parameters":[{"name":"algorithm","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The cryptographic hash function to use to transform a block of data into a fixed-size output."}]},"type":{"type":"reference","name":"CryptoDigestAlgorithm"}},{"name":"data","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The value that will be used to generate a digest."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"Format of the digest string. Defaults to: "},{"kind":"code","text":"`CryptoDigestOptions.HEX`"},{"kind":"text","text":"."}]},"type":{"type":"reference","name":"CryptoDigestOptions"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Digest"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]}]}