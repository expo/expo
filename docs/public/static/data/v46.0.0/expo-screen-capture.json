{"name":"expo-screen-capture","kind":1,"kindString":"Project","originalName":"","children":[{"name":"Subscription","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"remove","kind":1024,"kindString":"Property","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"A method to unsubscribe the listener."}]},"type":{"type":"intrinsic","name":"void"}}]}}}]}}},{"name":"addScreenshotListener","kind":64,"kindString":"Function","signatures":[{"name":"addScreenshotListener","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Adds a listener that will fire whenever the user takes a screenshot while the app is foregrounded.\nOn Android, this method requires the "},{"kind":"code","text":"`READ_EXTERNAL_STORAGE`"},{"kind":"text","text":" permission. You can request this\nwith ["},{"kind":"code","text":"`MediaLibrary.requestPermissionsAsync()`"},{"kind":"text","text":"](./media-library/#medialibraryrequestpermissionsasync)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":" object that you can use to unregister the listener, either by calling\n"},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" or passing it to "},{"kind":"code","text":"`removeScreenshotListener`"},{"kind":"text","text":"."}]}]},"parameters":[{"name":"listener","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"The function that will be executed when the user takes a screenshot.\nThis function accepts no arguments."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"Subscription"}}]},{"name":"allowScreenCaptureAsync","kind":64,"kindString":"Function","signatures":[{"name":"allowScreenCaptureAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Re-allows the user to screen record or screenshot your app. If you haven't called\n"},{"kind":"code","text":"`preventScreenCapture()`"},{"kind":"text","text":" yet, this method does nothing."}]},"parameters":[{"name":"key","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"This will prevent multiple instances of the "},{"kind":"code","text":"`preventScreenCaptureAsync`"},{"kind":"text","text":" and\n"},{"kind":"code","text":"`allowScreenCaptureAsync`"},{"kind":"text","text":" methods from conflicting with each other. If provided, the value must\nbe the same as the key passed to "},{"kind":"code","text":"`preventScreenCaptureAsync`"},{"kind":"text","text":" in order to re-enable screen\ncapturing. Defaults to 'default'."}]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"'default'"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"isAvailableAsync","kind":64,"kindString":"Function","signatures":[{"name":"isAvailableAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Returns whether the Screen Capture API is available on the current device."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that resolves to a "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":" indicating whether the Screen Capture API is available on the current\ndevice. Currently, this resolves to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" on Android and iOS only."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"preventScreenCaptureAsync","kind":64,"kindString":"Function","signatures":[{"name":"preventScreenCaptureAsync","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Prevents screenshots and screen recordings until "},{"kind":"code","text":"`allowScreenCaptureAsync`"},{"kind":"text","text":" is called or the app is restarted. If you are\nalready preventing screen capture, this method does nothing (unless you pass a new and unique "},{"kind":"code","text":"`key`"},{"kind":"text","text":").\n\n> Please note that on iOS, this will only prevent screen recordings, and is only available on\niOS 11 and newer. On older iOS versions, this method does nothing."}]},"parameters":[{"name":"key","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"Optional. If provided, this will help prevent multiple instances of the "},{"kind":"code","text":"`preventScreenCaptureAsync`"},{"kind":"text","text":"\nand "},{"kind":"code","text":"`allowScreenCaptureAsync`"},{"kind":"text","text":" methods (and "},{"kind":"code","text":"`usePreventScreenCapture`"},{"kind":"text","text":" hook) from conflicting with each other.\nWhen using multiple keys, you'll have to re-allow each one in order to re-enable screen capturing.\nDefaults to "},{"kind":"code","text":"`'default'`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"'default'"}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"removeScreenshotListener","kind":64,"kindString":"Function","signatures":[{"name":"removeScreenshotListener","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Removes the subscription you provide, so that you are no longer listening for screenshots.\n\nIf you prefer, you can also call "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" on that "},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":" object, for example:\n\n"},{"kind":"code","text":"```ts\nlet mySubscription = addScreenshotListener(() => {\n  console.log(\"You took a screenshot!\");\n});\n...\nmySubscription.remove();\n// OR\nremoveScreenshotListener(mySubscription);\n```"}]},"parameters":[{"name":"subscription","kind":32768,"kindString":"Parameter","comment":{"summary":[{"kind":"text","text":"Subscription returned by "},{"kind":"code","text":"`addScreenshotListener`"},{"kind":"text","text":"."}]},"type":{"type":"reference","name":"Subscription"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"usePreventScreenCapture","kind":64,"kindString":"Function","signatures":[{"name":"usePreventScreenCapture","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"A React hook to prevent screen capturing for as long as the owner component is mounted."}]},"parameters":[{"name":"key","kind":32768,"kindString":"Parameter","type":{"type":"intrinsic","name":"string"},"defaultValue":"'default'"}],"type":{"type":"intrinsic","name":"void"}}]}]}