{"name":"expo-task-manager","kind":1,"children":[{"name":"TaskManagerError","kind":256,"comment":{"summary":[{"kind":"text","text":"Error object that can be received through ["},{"kind":"code","text":"`TaskManagerTaskBody`"},{"kind":"text","text":"](#taskmanagertaskbody) when the\ntask fails."}]},"children":[{"name":"code","kind":1024,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},{"name":"message","kind":1024,"type":{"type":"intrinsic","name":"string"}}]},{"name":"TaskManagerTask","kind":256,"comment":{"summary":[{"kind":"text","text":"Represents an already registered task."}]},"children":[{"name":"options","kind":1024,"comment":{"summary":[{"kind":"text","text":"Provides "},{"kind":"code","text":"`options`"},{"kind":"text","text":" that the task was registered with."}]},"type":{"type":"intrinsic","name":"any"}},{"name":"taskName","kind":1024,"comment":{"summary":[{"kind":"text","text":"Name that the task is registered with."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"taskType","kind":1024,"comment":{"summary":[{"kind":"text","text":"Type of the task which depends on how the task was registered."}]},"type":{"type":"intrinsic","name":"string"}}]},{"name":"TaskManagerTaskBody","kind":256,"comment":{"summary":[{"kind":"text","text":"Represents the object that is passed to the task executor."}]},"children":[{"name":"data","kind":1024,"comment":{"summary":[{"kind":"text","text":"An object of data passed to the task executor. Its properties depends on the type of the task."}]},"type":{"type":"reference","name":"T"}},{"name":"error","kind":1024,"comment":{"summary":[{"kind":"text","text":"Error object if the task failed or "},{"kind":"code","text":"`null`"},{"kind":"text","text":" otherwise."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"TaskManagerError"}]}},{"name":"executionInfo","kind":1024,"comment":{"summary":[{"kind":"text","text":"Additional details containing unique ID of task event and name of the task."}]},"type":{"type":"reference","name":"TaskManagerTaskBodyExecutionInfo"}}],"typeParameters":[{"name":"T","kind":131072,"default":{"type":"intrinsic","name":"object"}}]},{"name":"TaskManagerTaskBodyExecutionInfo","kind":256,"comment":{"summary":[{"kind":"text","text":"Additional details about execution provided in "},{"kind":"code","text":"`TaskManagerTaskBody`"},{"kind":"text","text":"."}]},"children":[{"name":"appState","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"State of the application."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"active"},{"type":"literal","value":"background"},{"type":"literal","value":"inactive"}]}},{"name":"eventId","kind":1024,"comment":{"summary":[{"kind":"text","text":"Unique ID of task event."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"taskName","kind":1024,"comment":{"summary":[{"kind":"text","text":"Name of the task."}]},"type":{"type":"intrinsic","name":"string"}}]},{"name":"TaskManagerTaskExecutor","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"signatures":[{"name":"__type","kind":4096,"comment":{"summary":[{"kind":"text","text":"Type of task executor – a function that handles the task."}]},"parameters":[{"name":"body","kind":32768,"type":{"type":"reference","name":"TaskManagerTaskBody"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"defineTask","kind":64,"signatures":[{"name":"defineTask","kind":4096,"comment":{"summary":[{"kind":"text","text":"Defines task function. It must be called in the global scope of your JavaScript bundle.\nIn particular, it cannot be called in any of React lifecycle methods like "},{"kind":"code","text":"`componentDidMount`"},{"kind":"text","text":".\nThis limitation is due to the fact that when the application is launched in the background,\nwe need to spin up your JavaScript app, run your task and then shut down — no views are mounted\nin this scenario."}]},"parameters":[{"name":"taskName","kind":32768,"comment":{"summary":[{"kind":"text","text":"Name of the task. It must be the same as the name you provided when registering the task."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"taskExecutor","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function that will be invoked when the task with given "},{"kind":"code","text":"`taskName`"},{"kind":"text","text":" is executed."}]},"type":{"type":"reference","name":"TaskManagerTaskExecutor"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"getRegisteredTasksAsync","kind":64,"signatures":[{"name":"getRegisteredTasksAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Provides information about tasks registered in the app."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise which fulfills with an array of tasks registered in the app. Example:\n"},{"kind":"code","text":"```json\n[\n  {\n    taskName: 'location-updates-task-name',\n    taskType: 'location',\n    options: {\n      accuracy: Location.Accuracy.High,\n      showsBackgroundLocationIndicator: false,\n    },\n  },\n  {\n    taskName: 'geofencing-task-name',\n    taskType: 'geofencing',\n    options: {\n      regions: [...],\n    },\n  },\n]\n```"}]}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"TaskManagerTask"}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getTaskOptionsAsync","kind":64,"signatures":[{"name":"getTaskOptionsAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Retrieves "},{"kind":"code","text":"`options`"},{"kind":"text","text":" associated with the task, that were passed to the function registering the task\n(eg. "},{"kind":"code","text":"`Location.startLocationUpdatesAsync`"},{"kind":"text","text":")."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise which fulfills with the "},{"kind":"code","text":"`options`"},{"kind":"text","text":" object that was passed while registering task\nwith given name or "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if task couldn't be found."}]}]},"typeParameter":[{"name":"TaskOptions","kind":131072}],"parameters":[{"name":"taskName","kind":32768,"comment":{"summary":[{"kind":"text","text":"Name of the task."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TaskOptions"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"isAvailableAsync","kind":64,"signatures":[{"name":"isAvailableAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Determine if the "},{"kind":"code","text":"`TaskManager`"},{"kind":"text","text":" API can be used in this app."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise fulfills with "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the API can be used, and "},{"kind":"code","text":"`false`"},{"kind":"text","text":" otherwise.\nOn the web it always returns "},{"kind":"code","text":"`false`"},{"kind":"text","text":"."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"isTaskDefined","kind":64,"signatures":[{"name":"isTaskDefined","kind":4096,"comment":{"summary":[{"kind":"text","text":"Checks whether the task is already defined."}]},"parameters":[{"name":"taskName","kind":32768,"comment":{"summary":[{"kind":"text","text":"Name of the task."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"isTaskRegisteredAsync","kind":64,"signatures":[{"name":"isTaskRegisteredAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Determine whether the task is registered. Registered tasks are stored in a persistent storage and\npreserved between sessions."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise which fulfills with a "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":" value whether or not the task with given name\nis already registered."}]}]},"parameters":[{"name":"taskName","kind":32768,"comment":{"summary":[{"kind":"text","text":"Name of the task."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"unregisterAllTasksAsync","kind":64,"signatures":[{"name":"unregisterAllTasksAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Unregisters all tasks registered for the running app. You may want to call this when the user is\nsigning out and you no longer need to track his location or run any other background tasks."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise which fulfills as soon as all tasks are completely unregistered."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"unregisterTaskAsync","kind":64,"signatures":[{"name":"unregisterTaskAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Unregisters task from the app, so the app will not be receiving updates for that task anymore.\n_It is recommended to use methods specialized by modules that registered the task, eg.\n["},{"kind":"code","text":"`Location.stopLocationUpdatesAsync`"},{"kind":"text","text":"](./location/#expolocationstoplocationupdatesasynctaskname)._"}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise which fulfills as soon as the task is unregistered."}]}]},"parameters":[{"name":"taskName","kind":32768,"comment":{"summary":[{"kind":"text","text":"Name of the task to unregister."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]}]}