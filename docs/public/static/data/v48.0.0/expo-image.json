{"name":"expo-image","kind":1,"originalName":"","children":[{"name":"Image","kind":128,"kindString":"Class","children":[{"name":"constructor","kind":512,"kindString":"Constructor","flags":{"isExternal":true},"signatures":[{"name":"new Image","kind":16384,"kindString":"Constructor signature","flags":{"isExternal":true},"parameters":[{"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"reference","name":"ImageProps"},{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}]}}],"type":{"type":"reference","name":"Image"},"inheritedFrom":{"type":"reference","name":"React.PureComponent<ImageProps>.constructor"}},{"name":"new Image","kind":16384,"kindString":"Constructor signature","flags":{"isExternal":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[]},{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/legacy-context.html"}]}]},"parameters":[{"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"ImageProps"}},{"name":"context","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","name":"Image"},"inheritedFrom":{"type":"reference","name":"React.PureComponent<ImageProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent<ImageProps>.constructor"}},{"name":"context","kind":1024,"kindString":"Property","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"If using the new style context, re-declare this in your class to be the\n"},{"kind":"code","text":"`React.ContextType`"},{"kind":"text","text":" of your "},{"kind":"code","text":"`static contextType`"},{"kind":"text","text":".\nShould be used with type annotation or static contextType.\n\n"},{"kind":"code","text":"```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```"}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/context.html"}]}]},"type":{"type":"intrinsic","name":"unknown"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.context"}},{"name":"props","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isReadonly":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.props"}},{"name":"refs","kind":1024,"kindString":"Property","flags":{"isExternal":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"https://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"indexSignature":{"name":"__index","kind":8192,"kindString":"Index signature","flags":{"isExternal":true},"parameters":[{"name":"key","kind":32768,"flags":{"isExternal":true},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"ReactInstance","qualifiedName":"React.ReactInstance","package":"@types/react"}}}},"inheritedFrom":{"type":"reference","name":"React.PureComponent.refs"}},{"name":"state","kind":1024,"kindString":"Property","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.state"}},{"name":"contextType","kind":1024,"kindString":"Property","flags":{"isStatic":true,"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If set, "},{"kind":"code","text":"`this.context`"},{"kind":"text","text":" will be set at runtime to the current value of the given Context.\n\nUsage:\n\n"},{"kind":"code","text":"```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```"}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/context.html#classcontexttype"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Context","qualifiedName":"React.Context","package":"@types/react"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.contextType"}},{"name":"UNSAFE_componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before mounting occurs, and before "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":".\nAvoid introducing any side-effects or subscriptions in this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use componentDidMount or the constructor instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillMount"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillMount"}},{"name":"UNSAFE_componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use static getDerivedStateFromProps instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillReceiveProps"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillReceiveProps"}},{"name":"UNSAFE_componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"UNSAFE_componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use getSnapshotBeforeUpdate instead"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.UNSAFE_componentWillUpdate"}},{"name":"componentDidCatch","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidCatch","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."}]},"parameters":[{"name":"error","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"Error","qualifiedName":"Error","package":"typescript"}},{"name":"errorInfo","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"ErrorInfo","qualifiedName":"React.ErrorInfo","package":"@types/react"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidCatch"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidCatch"}},{"name":"componentDidMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately after a component is mounted. Setting state here will trigger re-rendering."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidMount"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidMount"}},{"name":"componentDidUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentDidUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately after updating occurs. Not called for the initial render.\n\nThe snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null."}]},"parameters":[{"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"snapshot","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentDidUpdate"}},{"name":"componentWillMount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillMount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before mounting occurs, and before "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":".\nAvoid introducing any side-effects or subscriptions in this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use componentDidMount or the constructor instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillMount"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillMount"}},{"name":"componentWillReceiveProps","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillReceiveProps","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.\n\nCalling "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use static getDerivedStateFromProps instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillReceiveProps"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillReceiveProps"}},{"name":"componentWillUnmount","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillUnmount","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in "},{"kind":"code","text":"`componentDidMount`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillUnmount"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillUnmount"}},{"name":"componentWillUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"componentWillUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called immediately before rendering when new props or state is received. Not called for the initial render.\n\nNote: You cannot call "},{"kind":"code","text":"`Component#setState`"},{"kind":"text","text":" here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked."}],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"}]},{"tag":"@see","content":[{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"},{"kind":"text","text":"\n"},{"kind":"text","text":" - "},{"kind":"text","text":"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path"},{"kind":"text","text":"\n"}]}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.componentWillUpdate"}},{"name":"forceUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true},"signatures":[{"name":"forceUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.forceUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.forceUpdate"}},{"name":"getSnapshotBeforeUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"getSnapshotBeforeUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Runs before React applies the result of "},{"kind":"code","text":"`render`"},{"kind":"text","text":" to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before "},{"kind":"code","text":"`render`"},{"kind":"text","text":" causes changes to it.\n\nNote: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running."}]},"parameters":[{"name":"prevProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}}],"type":{"type":"intrinsic","name":"any"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.getSnapshotBeforeUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.getSnapshotBeforeUpdate"}},{"name":"render","kind":2048,"kindString":"Method","signatures":[{"name":"render","kind":4096,"kindString":"Call signature","type":{"type":"reference","name":"Element","qualifiedName":"global.JSX.Element","package":"@types/react"},"overwrites":{"type":"reference","name":"React.PureComponent.render"}}],"overwrites":{"type":"reference","name":"React.PureComponent.render"}},{"name":"setState","kind":2048,"kindString":"Method","flags":{"isExternal":true},"signatures":[{"name":"setState","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"typeParameter":[{"name":"K","kind":131072,"kindString":"Type parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"state","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"prevState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"props","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","name":"K","qualifiedName":"K","package":"@types/react"}],"name":"Pick","qualifiedName":"Pick","package":"typescript"}]}}]}},{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}},{"type":"reference","name":"K","qualifiedName":"K","package":"@types/react"}],"name":"Pick","qualifiedName":"Pick","package":"typescript"}]}},{"name":"callback","kind":32768,"kindString":"Parameter","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.setState"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.setState"}},{"name":"shouldComponentUpdate","kind":2048,"kindString":"Method","flags":{"isExternal":true,"isOptional":true},"signatures":[{"name":"shouldComponentUpdate","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called to determine whether the change in props and state should trigger a re-render.\n\n"},{"kind":"code","text":"`Component`"},{"kind":"text","text":" always returns true.\n"},{"kind":"code","text":"`PureComponent`"},{"kind":"text","text":" implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, "},{"kind":"code","text":"`Component#render`"},{"kind":"text","text":", "},{"kind":"code","text":"`componentWillUpdate`"},{"kind":"text","text":"\nand "},{"kind":"code","text":"`componentDidUpdate`"},{"kind":"text","text":" will not be called."}]},"parameters":[{"name":"nextProps","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextState","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true}}}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}},{"name":"nextContext","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"React.PureComponent.shouldComponentUpdate"}}],"inheritedFrom":{"type":"reference","name":"React.PureComponent.shouldComponentUpdate"}},{"name":"clearDiskCache","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"clearDiskCache","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Asynchronously clears all images from the disk cache."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" when the operation succeeds.\nIt may resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" on Android when the activity is no longer available."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"clearMemoryCache","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"clearMemoryCache","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Asynchronously clears all images stored in memory."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" when the operation succeeds.\nIt may resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" on Android when the activity is no longer available."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"prefetch","kind":2048,"kindString":"Method","flags":{"isStatic":true},"signatures":[{"name":"prefetch","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Preloads images at the given urls that can be later used in the image view.\nPreloaded images are always cached on the disk, so make sure to use\n"},{"kind":"code","text":"`disk`"},{"kind":"text","text":" (default) or "},{"kind":"code","text":"`memory-disk`"},{"kind":"text","text":" cache policy."}]},"parameters":[{"name":"urls","kind":32768,"kindString":"Parameter","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"type":{"type":"intrinsic","name":"void"}}]}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps"}],"name":"PureComponent","qualifiedName":"React.PureComponent","package":"@types/react"}]},{"name":"ImageContentPosition","kind":4194304,"kindString":"Type alias","comment":{"summary":[{"kind":"text","text":"Specifies the position of the image inside its container. One value controls the x-axis and the second value controls the y-axis.\n\nAdditionally, it supports stringified shorthand form that specifies the edges to which to align the image content:\\\n"},{"kind":"code","text":"`'center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right top'`"},{"kind":"text","text":",\n"},{"kind":"code","text":"`'right bottom'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left top'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left bottom'`"},{"kind":"text","text":".\\\nIf only one keyword is provided, then the other dimension is set to "},{"kind":"code","text":"`'center'`"},{"kind":"text","text":" ("},{"kind":"code","text":"`'50%'`"},{"kind":"text","text":"), so the image is placed in the middle of the specified edge.\\\nAs an example, "},{"kind":"code","text":"`'top right'`"},{"kind":"text","text":" is the same as "},{"kind":"code","text":"`{ top: 0, right: 0 }`"},{"kind":"text","text":" and "},{"kind":"code","text":"`'bottom'`"},{"kind":"text","text":" is the same as "},{"kind":"code","text":"`{ bottom: 0, left: '50%' }`"},{"kind":"text","text":"."}]},"type":{"type":"union","types":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"right","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"top","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"left","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"top","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"bottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"right","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"bottom","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}},{"name":"left","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue"}}]}},{"type":"reference","name":"ImageContentPositionString"}]}},{"name":"ImageContentPositionValue","kind":4194304,"kindString":"Type alias","comment":{"summary":[{"kind":"text","text":"A value that represents the relative position of a single axis.\n\nIf "},{"kind":"code","text":"`number`"},{"kind":"text","text":", it is a distance in points (logical pixels) from the respective edge.\\\nIf "},{"kind":"code","text":"`string`"},{"kind":"text","text":", it must be a percentage value where "},{"kind":"code","text":"`'100%'`"},{"kind":"text","text":" is the difference in size between the container and the image along the respective axis,\nor "},{"kind":"code","text":"`'center'`"},{"kind":"text","text":" which is an alias for "},{"kind":"code","text":"`'50%'`"},{"kind":"text","text":" that is the default value. You can read more regarding percentages on the MDN docs for\n["},{"kind":"code","text":"`background-position`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position#regarding_percentages) that describes this concept well."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"template-literal","head":"","tail":[[{"type":"intrinsic","name":"number"},"%"]]},{"type":"template-literal","head":"","tail":[[{"type":"intrinsic","name":"number"},""]]},{"type":"literal","value":"center"}]}},{"name":"ImageErrorEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"error","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}}]}}},{"name":"ImageLoadEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"cacheType","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"}]}},{"name":"source","kind":1024,"kindString":"Property","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"height","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"mediaType","kind":1024,"kindString":"Property","type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"url","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"string"}},{"name":"width","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}}]}}},{"name":"ImageProgressEventData","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"loaded","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}},{"name":"total","kind":1024,"kindString":"Property","type":{"type":"intrinsic","name":"number"}}]}}},{"name":"ImageProps","kind":256,"kindString":"Interface","comment":{"summary":[{"kind":"text","text":"Some props are from React Native Image that Expo Image supports (more or less) for easier migration,\nbut all of them are deprecated and might be removed in the future."}]},"children":[{"name":"accessibilityActions","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Provides an array of custom actions available for accessibility."}]},"type":{"type":"typeOperator","operator":"readonly","target":{"elementType":{"typeArguments":{"0":{"declaration":{"children":{"0":{},"1":{}}}}}}}},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityActions"}},{"name":"accessibilityElementsHidden","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityElementsHidden"}},{"name":"accessibilityHint","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label."}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityHint"}},{"name":"accessibilityIgnoresInvertColors","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"https://reactnative.dev/docs/accessibility#accessibilityignoresinvertcolorsios"}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityIgnoresInvertColors"}},{"name":"accessibilityLabel","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The text that's read by the screen reader when the user interacts with the image."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"undefined"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","name":"ViewProps.accessibilityLabel"}},{"name":"accessibilityLabelledBy","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A reference to another element "},{"kind":"code","text":"`nativeID`"},{"kind":"text","text":" used to build complex forms. The value of "},{"kind":"code","text":"`accessibilityLabelledBy`"},{"kind":"text","text":" should match the "},{"kind":"code","text":"`nativeID`"},{"kind":"text","text":" of the related element."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityLabelledBy"}},{"name":"accessibilityLanguage","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"By using the accessibilityLanguage property, the screen reader will understand which language to use while reading the element's label, value and hint. The provided string value must follow the BCP 47 specification (https://www.rfc-editor.org/info/bcp47).\nhttps://reactnative.dev/docs/accessibility#accessibilitylanguage-ios"}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityLanguage"}},{"name":"accessibilityLiveRegion","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"none"},{"type":"literal","value":"polite"},{"type":"literal","value":"assertive"}]},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityLiveRegion"}},{"name":"accessibilityRole","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on."}]},"type":{"type":"reference","name":"AccessibilityRole","qualifiedName":"AccessibilityRole","package":"react-native"},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityRole"}},{"name":"accessibilityState","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on."}]},"type":{"type":"reference","name":"AccessibilityState","qualifiedName":"AccessibilityState","package":"react-native"},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityState"}},{"name":"accessibilityValue","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum)."}]},"type":{"type":"reference","name":"AccessibilityValue","qualifiedName":"AccessibilityValue","package":"react-native"},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityValue"}},{"name":"accessibilityViewIsModal","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.accessibilityViewIsModal"}},{"name":"accessible","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"When true, indicates that the view is an accessibility element.\nWhen a view is an accessibility element, it groups its children into a single selectable component.\n\nOn Android, the "},{"kind":"code","text":"`accessible`"},{"kind":"text","text":" property will be translated into the native "},{"kind":"code","text":"`isScreenReaderFocusable`"},{"kind":"text","text":",\nso it's only affecting the screen readers behaviour."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"ViewProps.accessible"}},{"name":"aria-busy","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"alias for accessibilityState\n\nsee https://reactnative.dev/docs/accessibility#accessibilitystate"}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-busy"}},{"name":"aria-checked","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"literal","value":"mixed"}]},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-checked"}},{"name":"aria-disabled","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-disabled"}},{"name":"aria-expanded","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-expanded"}},{"name":"aria-hidden","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A value indicating whether the accessibility elements contained within\nthis accessibility element are hidden."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-hidden"}},{"name":"aria-label","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Alias for accessibilityLabel  https://reactnative.dev/docs/view#accessibilitylabel\nhttps://github.com/facebook/react-native/issues/34424"}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-label"}},{"name":"aria-labelledby","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Represents the nativeID of the associated label text. When the assistive technology focuses on the component with this props, the text is read aloud."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-labelledby"}},{"name":"aria-live","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"union","types":[{"type":"literal","value":"polite"},{"type":"literal","value":"assertive"},{"type":"literal","value":"off"}]},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-live"}},{"name":"aria-modal","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-modal"}},{"name":"aria-selected","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-selected"}},{"name":"aria-valuemax","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-valuemax"}},{"name":"aria-valuemin","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-valuemin"}},{"name":"aria-valuenow","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-valuenow"}},{"name":"aria-valuetext","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ViewProps.aria-valuetext"}},{"name":"blurRadius","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The radius of the blur in points, "},{"kind":"code","text":"`0`"},{"kind":"text","text":" means no blur effect.\nThis effect is not applied to placeholders."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"cachePolicy","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines whether to cache the image and where: on the disk, in the memory or both.\n\n- "},{"kind":"code","text":"`'none'`"},{"kind":"text","text":" - Image is not cached at all.\n\n- "},{"kind":"code","text":"`'disk'`"},{"kind":"text","text":" - Image is queried from the disk cache if exists, otherwise it's downloaded and then stored on the disk.\n\n- "},{"kind":"code","text":"`'memory'`"},{"kind":"text","text":" - Image is cached in memory. Might be useful when you render a high-resolution picture many times.\nMemory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.\n\n- "},{"kind":"code","text":"`'memory-disk'`"},{"kind":"text","text":" - Image is cached in memory, but with a fallback to the disk cache."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'disk'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"},{"type":"literal","value":"memory-disk"}]}},{"name":"children","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reference","name":"ReactNode","qualifiedName":"React.ReactNode","package":"@types/react"},"inheritedFrom":{"type":"reference","name":"ViewProps.children"}},{"name":"collapsable","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.collapsable"}},{"name":"contentFit","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines how the image should be resized to fit its container. This property tells the image to fill the container\nin a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\".\nIt mirrors the CSS ["},{"kind":"code","text":"`object-fit`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property.\n\n- "},{"kind":"code","text":"`'cover'`"},{"kind":"text","text":" - The image is sized to maintain its aspect ratio while filling the container box.\nIf the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.\n\n- "},{"kind":"code","text":"`'contain'`"},{"kind":"text","text":" - The image is scaled down or up to maintain its aspect ratio while fitting within the container box.\n\n- "},{"kind":"code","text":"`'fill'`"},{"kind":"text","text":" - The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit.\n\n- "},{"kind":"code","text":"`'none'`"},{"kind":"text","text":" - The image is not resized and is centered by default.\nWhen specified, the exact position can be controlled with ["},{"kind":"code","text":"`contentPosition`"},{"kind":"text","text":"](#contentposition) prop.\n\n- "},{"kind":"code","text":"`'scale-down'`"},{"kind":"text","text":" - The image is sized as if "},{"kind":"code","text":"`none`"},{"kind":"text","text":" or "},{"kind":"code","text":"`contain`"},{"kind":"text","text":" were specified, whichever would result in a smaller concrete image size."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'cover'"}]}]},"type":{"type":"reference","name":"ImageContentFit"}},{"name":"contentPosition","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"It is used together with ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) to specify how the image should be positioned with x/y coordinates inside its own container.\nAn equivalent of the CSS ["},{"kind":"code","text":"`object-position`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) property."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'center'"}]}]},"type":{"type":"reference","name":"ImageContentPosition"}},{"name":"defaultSource","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`defaultSource`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#defaultsource).\nUse ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder) prop instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"ImageSource"}]}},{"name":"enableLiveTextInteraction","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Enables Live Text interaction with the image. Check official [Apple documentation](https://developer.apple.com/documentation/visionkit/enabling_live_text_interactions_with_images) for more details."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios 16.0+"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"fadeDuration","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`fadeDuration`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#fadeduration-android).\nInstead use ["},{"kind":"code","text":"`transition`"},{"kind":"text","text":"](#transition) with the provided duration."}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"focusable","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether this View should be focusable with a non-touch input device and receive focus with a hardware keyboard."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"ViewProps.focusable"}},{"name":"hasTVPreferredFocus","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.hasTVPreferredFocus"}},{"name":"hitSlop","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views."}]},"type":{"type":"reference","name":"Insets","qualifiedName":"Insets","package":"react-native"},"inheritedFrom":{"type":"reference","name":"ViewProps.hitSlop"}},{"name":"id","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Used to reference react managed views from native code."}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ViewProps.id"}},{"name":"importantForAccessibility","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"[Android] Controlling if a view fires accessibility events and if it is reported to accessibility services."}]},"type":{"type":"union","types":[{"type":"literal","value":"auto"},{"type":"literal","value":"yes"},{"type":"literal","value":"no"},{"type":"literal","value":"no-hide-descendants"}]},"inheritedFrom":{"type":"reference","name":"ViewProps.importantForAccessibility"}},{"name":"isTVSelectable","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.isTVSelectable"}},{"name":"loadingIndicatorSource","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`loadingIndicatorSource`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#loadingindicatorsource).\nUse ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder) prop instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"ImageSource"}]}},{"name":"nativeID","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Used to reference react managed views from native code."}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ViewProps.nativeID"}},{"name":"needsOffscreenAlphaCompositing","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).\n\nRendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.needsOffscreenAlphaCompositing"}},{"name":"onAccessibilityAction","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"When "},{"kind":"code","text":"`accessible`"},{"kind":"text","text":" is true, the system will try to invoke this function when the user performs an accessibility custom action."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"AccessibilityActionEvent","qualifiedName":"AccessibilityActionEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onAccessibilityAction"}},{"name":"onAccessibilityEscape","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers)."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onAccessibilityEscape"}},{"name":"onAccessibilityTap","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"When "},{"kind":"code","text":"`accessible`"},{"kind":"text","text":" is true, the system will try to invoke this function when the user performs accessibility tap gesture."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onAccessibilityTap"}},{"name":"onError","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called on an image fetching error."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageErrorEventData"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLayout","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Invoked on mount and layout changes with\n\n{nativeEvent: { layout: {x, y, width, height}}}."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"LayoutChangeEvent","qualifiedName":"LayoutChangeEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onLayout"}},{"name":"onLoad","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called when the image load completes successfully."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageLoadEventData"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLoadEnd","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called when the image load either succeeds or fails."}]},"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLoadStart","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called when the image starts to load."}]},"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onMagicTap","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"When accessible is true, the system will invoke this function when the user performs the magic tap gesture."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onMagicTap"}},{"name":"onMoveShouldSetResponder","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?"}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onMoveShouldSetResponder"}},{"name":"onMoveShouldSetResponderCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onMoveShouldSetResponderCapture"}},{"name":"onPointerCancel","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerCancel"}},{"name":"onPointerCancelCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerCancelCapture"}},{"name":"onPointerDown","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerDown"}},{"name":"onPointerDownCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerDownCapture"}},{"name":"onPointerEnter","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerEnter"}},{"name":"onPointerEnterCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerEnterCapture"}},{"name":"onPointerLeave","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerLeave"}},{"name":"onPointerLeaveCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerLeaveCapture"}},{"name":"onPointerMove","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerMove"}},{"name":"onPointerMoveCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerMoveCapture"}},{"name":"onPointerUp","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerUp"}},{"name":"onPointerUpCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"PointerEvent","qualifiedName":"PointerEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onPointerUpCapture"}},{"name":"onProgress","kind":1024,"kindString":"Property","flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","comment":{"summary":[{"kind":"text","text":"Called when the image is loading. Can be called multiple times before the image has finished loading.\nThe event object provides details on how many bytes were loaded so far and what's the expected total size."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","type":{"type":"reference","name":"ImageProgressEventData"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onResponderEnd","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"If the View returns true and attempts to become the responder, one of the following will happen:"}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onResponderEnd"}},{"name":"onResponderGrant","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening"}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onResponderGrant"}},{"name":"onResponderMove","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The user is moving their finger"}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onResponderMove"}},{"name":"onResponderReject","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Something else is the responder right now and will not release it"}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onResponderReject"}},{"name":"onResponderRelease","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Fired at the end of the touch, ie \"touchUp\""}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onResponderRelease"}},{"name":"onResponderStart","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onResponderStart"}},{"name":"onResponderTerminate","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)"}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onResponderTerminate"}},{"name":"onResponderTerminationRequest","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Something else wants to become responder.\n Should this view release the responder? Returning true allows release"}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onResponderTerminationRequest"}},{"name":"onStartShouldSetResponder","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"Does this view want to become responder on the start of a touch?"}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onStartShouldSetResponder"}},{"name":"onStartShouldSetResponderCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"comment":{"summary":[{"kind":"text","text":"onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.\n\nHowever, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true."}]},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"boolean"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onStartShouldSetResponderCapture"}},{"name":"onTouchCancel","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onTouchCancel"}},{"name":"onTouchEnd","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onTouchEnd"}},{"name":"onTouchEndCapture","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onTouchEndCapture"}},{"name":"onTouchMove","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onTouchMove"}},{"name":"onTouchStart","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","flags":{"isExternal":true},"signatures":[{"name":"__type","kind":4096,"kindString":"Call signature","flags":{"isExternal":true},"parameters":[{"name":"event","kind":32768,"kindString":"Parameter","flags":{"isExternal":true},"type":{"type":"reference","name":"GestureResponderEvent","qualifiedName":"GestureResponderEvent","package":"react-native"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ViewProps.onTouchStart"}},{"name":"placeholder","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An image to display while loading the proper image and no image has been displayed yet or the source is unset."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ImageSource"},{"type":"array","elementType":{"type":"reference","name":"ImageSource"}}]}},{"name":"pointerEvents","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:\n\n.box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform."}]},"type":{"type":"union","types":[{"type":"literal","value":"none"},{"type":"literal","value":"box-none"},{"type":"literal","value":"box-only"},{"type":"literal","value":"auto"}]},"inheritedFrom":{"type":"reference","name":"ViewProps.pointerEvents"}},{"name":"priority","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Priorities for completing loads. If more than one load is queued at a time,\nthe load with the higher priority will be started first.\nPriorities are considered best effort, there are no guarantees about the order in which loads will start or finish."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'normal'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"literal","value":"low"},{"type":"literal","value":"normal"},{"type":"literal","value":"high"}]}},{"name":"removeClippedSubviews","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews)."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.removeClippedSubviews"}},{"name":"renderToHardwareTextureAndroid","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.\n\nOn Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.renderToHardwareTextureAndroid"}},{"name":"resizeMode","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`resizeMode`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#resizemode).\nNote that "},{"kind":"code","text":"`\"repeat\"`"},{"kind":"text","text":" option is not supported at all.\nUse the more powerful ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) and ["},{"kind":"code","text":"`contentPosition`"},{"kind":"text","text":"](#contentposition) props instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":"cover"},{"type":"literal","value":"contain"},{"type":"literal","value":"center"},{"type":"literal","value":"stretch"},{"type":"literal","value":"repeat"}]}},{"name":"responsivePolicy","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines whether to choose image source based on container size only on mount or on every resize.\nUse "},{"kind":"code","text":"`initial`"},{"kind":"text","text":" to improve performance."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"\"live\""}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"live"},{"type":"literal","value":"initial"}]}},{"name":"role","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Indicates to accessibility services to treat UI component like a specific role."}]},"type":{"type":"reference","name":"Role","qualifiedName":"Role","package":"react-native"},"inheritedFrom":{"type":"reference","name":"ViewProps.role"}},{"name":"shouldRasterizeIOS","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether this view should be rendered as a bitmap before compositing.\n\nOn iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"ViewProps.shouldRasterizeIOS"}},{"name":"source","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The image source, either a remote URL, a local file resource or a number that is the result of the "},{"kind":"code","text":"`require()`"},{"kind":"text","text":" function.\nWhen provided as an array of sources, the source that fits best into the container size and is closest to the screen scale\nwill be chosen. In this case it is important to provide "},{"kind":"code","text":"`width`"},{"kind":"text","text":", "},{"kind":"code","text":"`height`"},{"kind":"text","text":" and "},{"kind":"code","text":"`scale`"},{"kind":"text","text":" properties."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}},{"type":"reference","name":"ImageSource"},{"type":"array","elementType":{"type":"reference","name":"ImageSource"}}]}},{"name":"testID","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Used to locate this view in end-to-end tests."}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"ViewProps.testID"}},{"name":"tintColor","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A color used to tint template images (a bitmap image where only the opacity matters).\nThe color is applied to every non-transparent pixel, causing the image’s shape to adopt that color.\nThis effect is not applied to placeholders."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"null"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"transition","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Describes how the image view should transition the contents when switching the image source.\\\nIf provided as a number, it is the duration in milliseconds of the "},{"kind":"code","text":"`'cross-dissolve'`"},{"kind":"text","text":" effect."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"},{"type":"reference","name":"ImageTransition"}]}},{"name":"tvParallaxMagnification","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ViewProps.tvParallaxMagnification"}},{"name":"tvParallaxProperties","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"*(Apple TV only)* Object with properties to control Apple TV parallax effects."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reference","name":"TVParallaxProperties","qualifiedName":"TVParallaxProperties","package":"react-native"},"inheritedFrom":{"type":"reference","name":"ViewProps.tvParallaxProperties"}},{"name":"tvParallaxShiftDistanceX","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ViewProps.tvParallaxShiftDistanceX"}},{"name":"tvParallaxShiftDistanceY","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ViewProps.tvParallaxShiftDistanceY"}},{"name":"tvParallaxTiltAngle","kind":1024,"kindString":"Property","flags":{"isExternal":true,"isOptional":true},"comment":{"summary":[{"kind":"text","text":"*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"ViewProps.tvParallaxTiltAngle"}}],"extendedTypes":[{"type":"reference","name":"ViewProps","qualifiedName":"ViewProps","package":"react-native"}]},{"name":"ImageSource","kind":4194304,"kindString":"Type alias","type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"blurhash","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The blurhash string to use to generate the image. You can read more about the blurhash\non ["},{"kind":"code","text":"`woltapp/blurhash`"},{"kind":"text","text":"](https://github.com/woltapp/blurhash) repo. Ignored when "},{"kind":"code","text":"`uri`"},{"kind":"text","text":" is provided.\nWhen using the blurhash, you should also provide "},{"kind":"code","text":"`width`"},{"kind":"text","text":" and "},{"kind":"code","text":"`height`"},{"kind":"text","text":" (higher values reduce performance),\notherwise their default value is "},{"kind":"code","text":"`16`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"cacheKey","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The cache key used to query and store this specific image.\nIf not provided, the "},{"kind":"code","text":"`uri`"},{"kind":"text","text":" is used also as the cache key."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"headers","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object representing the HTTP headers to send along with the request for a remote image."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record","qualifiedName":"Record","package":"typescript"}},{"name":"height","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Can be specified if known at build time, in which case the value\nwill be used to set the default "},{"kind":"code","text":"`<Image/>`"},{"kind":"text","text":" component dimension"}]},"type":{"type":"intrinsic","name":"number"}},{"name":"uri","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A string representing the resource identifier for the image,\nwhich could be an http address, a local file path, or the name of a static image resource."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"width","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Can be specified if known at build time, in which case the value\nwill be used to set the default "},{"kind":"code","text":"`<Image/>`"},{"kind":"text","text":" component dimension"}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"ImageTransition","kind":4194304,"kindString":"Type alias","comment":{"summary":[{"kind":"text","text":"An object that describes the smooth transition when switching the image source."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"kindString":"Type literal","children":[{"name":"duration","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The duration of the transition in milliseconds."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"effect","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An animation effect used for transition."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'cross-dissolve'\n\nOn Android, only "},{"kind":"code","text":"`'cross-dissolve'`"},{"kind":"text","text":" is supported.\nOn Web, "},{"kind":"code","text":"`'curl-up'`"},{"kind":"text","text":" and "},{"kind":"code","text":"`'curl-down'`"},{"kind":"text","text":" effects are not supported."}]}]},"type":{"type":"union","types":[{"type":"literal","value":"cross-dissolve"},{"type":"literal","value":"flip-from-top"},{"type":"literal","value":"flip-from-right"},{"type":"literal","value":"flip-from-bottom"},{"type":"literal","value":"flip-from-left"},{"type":"literal","value":"curl-up"},{"type":"literal","value":"curl-down"},{"type":"literal","value":null}]}},{"name":"timing","kind":1024,"kindString":"Property","flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies the speed curve of the transition effect and how intermediate values are calculated."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'ease-in-out'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"ease-in-out"},{"type":"literal","value":"ease-in"},{"type":"literal","value":"ease-out"},{"type":"literal","value":"linear"}]}}]}}}]}