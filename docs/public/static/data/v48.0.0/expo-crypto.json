{"name":"expo-crypto","kind":1,"children":[{"name":"CryptoDigestAlgorithm","kind":8,"comment":{"summary":[{"kind":"text","text":"["},{"kind":"code","text":"`Cryptographic hash function`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Glossary/Cryptographic_hash_function)"}]},"children":[{"name":"MD2","kind":16,"comment":{"summary":[{"kind":"code","text":"`128`"},{"kind":"text","text":" bits."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"MD2"}},{"name":"MD4","kind":16,"comment":{"summary":[{"kind":"code","text":"`128`"},{"kind":"text","text":" bits."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"MD4"}},{"name":"MD5","kind":16,"comment":{"summary":[{"kind":"code","text":"`128`"},{"kind":"text","text":" bits."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"MD5"}},{"name":"SHA1","kind":16,"comment":{"summary":[{"kind":"code","text":"`160`"},{"kind":"text","text":" bits."}]},"type":{"type":"literal","value":"SHA-1"}},{"name":"SHA256","kind":16,"comment":{"summary":[{"kind":"code","text":"`256`"},{"kind":"text","text":" bits. Collision Resistant."}]},"type":{"type":"literal","value":"SHA-256"}},{"name":"SHA384","kind":16,"comment":{"summary":[{"kind":"code","text":"`384`"},{"kind":"text","text":" bits. Collision Resistant."}]},"type":{"type":"literal","value":"SHA-384"}},{"name":"SHA512","kind":16,"comment":{"summary":[{"kind":"code","text":"`512`"},{"kind":"text","text":" bits. Collision Resistant."}]},"type":{"type":"literal","value":"SHA-512"}}]},{"name":"CryptoEncoding","kind":8,"children":[{"name":"BASE64","kind":16,"comment":{"summary":[{"kind":"text","text":"Has trailing padding. Does not wrap lines. Does not have a trailing newline."}]},"type":{"type":"literal","value":"base64"}},{"name":"HEX","kind":16,"type":{"type":"literal","value":"hex"}}]},{"name":"CryptoDigestOptions","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"encoding","kind":1024,"comment":{"summary":[{"kind":"text","text":"Format the digest is returned in."}]},"type":{"type":"reference","name":"CryptoEncoding"}}]}}},{"name":"Digest","kind":4194304,"type":{"type":"intrinsic","name":"string"}},{"name":"digest","kind":64,"signatures":[{"name":"digest","kind":4096,"comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`digest()`"},{"kind":"text","text":" method of "},{"kind":"code","text":"`Crypto`"},{"kind":"text","text":" generates a digest of the supplied "},{"kind":"code","text":"`TypedArray`"},{"kind":"text","text":" of bytes "},{"kind":"code","text":"`data`"},{"kind":"text","text":" with the provided digest "},{"kind":"code","text":"`algorithm`"},{"kind":"text","text":".\nA digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\nmeaning that it's very difficult to generate multiple inputs that have equal digest values.\nOn web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which fulfills with an ArrayBuffer representing the hashed input."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst array = new Uint8Array([1, 2, 3, 4, 5]);\nconst digest = await Crypto.digest(Crypto.CryptoDigestAlgorithm.SHA512, array);\nconsole.log('Your digest: ' + digest);\n```"}]}]},"parameters":[{"name":"algorithm","kind":32768,"comment":{"summary":[{"kind":"text","text":"The cryptographic hash function to use to transform a block of data into a fixed-size output."}]},"type":{"type":"reference","name":"CryptoDigestAlgorithm"}},{"name":"data","kind":32768,"comment":{"summary":[{"kind":"text","text":"The value that will be used to generate a digest."}]},"type":{"type":"reference","name":"BufferSource","qualifiedName":"BufferSource","package":"typescript"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ArrayBuffer","qualifiedName":"ArrayBuffer","package":"typescript"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"digestStringAsync","kind":64,"signatures":[{"name":"digestStringAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`digestStringAsync()`"},{"kind":"text","text":" method of "},{"kind":"code","text":"`Crypto`"},{"kind":"text","text":" generates a digest of the supplied "},{"kind":"code","text":"`data`"},{"kind":"text","text":" string with the provided digest "},{"kind":"code","text":"`algorithm`"},{"kind":"text","text":".\nA digest is a short fixed-length value derived from some variable-length input. **Cryptographic digests** should exhibit _collision-resistance_,\nmeaning that it's very difficult to generate multiple inputs that have equal digest values.\nYou can specify the returned string format as one of "},{"kind":"code","text":"`CryptoEncoding`"},{"kind":"text","text":". By default, the resolved value will be formatted as a "},{"kind":"code","text":"`HEX`"},{"kind":"text","text":" string.\nOn web, this method can only be called from a secure origin (HTTPS) otherwise, an error will be thrown."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Return a Promise which fulfills with a value representing the hashed input."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst digest = await Crypto.digestStringAsync(\n  Crypto.CryptoDigestAlgorithm.SHA512,\n  'ðŸ¥“ Easy to Digest! ðŸ’™'\n);\n```"}]}]},"parameters":[{"name":"algorithm","kind":32768,"comment":{"summary":[{"kind":"text","text":"The cryptographic hash function to use to transform a block of data into a fixed-size output."}]},"type":{"type":"reference","name":"CryptoDigestAlgorithm"}},{"name":"data","kind":32768,"comment":{"summary":[{"kind":"text","text":"The value that will be used to generate a digest."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","kind":32768,"comment":{"summary":[{"kind":"text","text":"Format of the digest string. Defaults to: "},{"kind":"code","text":"`CryptoDigestOptions.HEX`"},{"kind":"text","text":"."}]},"type":{"type":"reference","name":"CryptoDigestOptions"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Digest"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getRandomBytes","kind":64,"signatures":[{"name":"getRandomBytes","kind":4096,"comment":{"summary":[{"kind":"text","text":"Generates completely random bytes using native implementations. The "},{"kind":"code","text":"`byteCount`"},{"kind":"text","text":" property\nis a "},{"kind":"code","text":"`number`"},{"kind":"text","text":" indicating the number of bytes to generate in the form of a "},{"kind":"code","text":"`Uint8Array`"},{"kind":"text","text":".\nFalls back to "},{"kind":"code","text":"`Math.random`"},{"kind":"text","text":" during development to prevent issues with React Native Debugger."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"An array of random bytes with the same length as the "},{"kind":"code","text":"`byteCount`"},{"kind":"text","text":"."}]}]},"parameters":[{"name":"byteCount","kind":32768,"comment":{"summary":[{"kind":"text","text":"A number within the range from "},{"kind":"code","text":"`0`"},{"kind":"text","text":" to "},{"kind":"code","text":"`1024`"},{"kind":"text","text":". Anything else will throw a "},{"kind":"code","text":"`TypeError`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","name":"Uint8Array","qualifiedName":"Uint8Array","package":"typescript"}}]},{"name":"getRandomBytesAsync","kind":64,"signatures":[{"name":"getRandomBytesAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Generates completely random bytes using native implementations. The "},{"kind":"code","text":"`byteCount`"},{"kind":"text","text":" property\nis a "},{"kind":"code","text":"`number`"},{"kind":"text","text":" indicating the number of bytes to generate in the form of a "},{"kind":"code","text":"`Uint8Array`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills with an array of random bytes with the same length as the "},{"kind":"code","text":"`byteCount`"},{"kind":"text","text":"."}]}]},"parameters":[{"name":"byteCount","kind":32768,"comment":{"summary":[{"kind":"text","text":"A number within the range from "},{"kind":"code","text":"`0`"},{"kind":"text","text":" to "},{"kind":"code","text":"`1024`"},{"kind":"text","text":". Anything else will throw a "},{"kind":"code","text":"`TypeError`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Uint8Array","qualifiedName":"Uint8Array","package":"typescript"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getRandomValues","kind":64,"signatures":[{"name":"getRandomValues","kind":4096,"comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`getRandomValues()`"},{"kind":"text","text":" method of "},{"kind":"code","text":"`Crypto`"},{"kind":"text","text":" fills a provided "},{"kind":"code","text":"`TypedArray`"},{"kind":"text","text":" with cryptographically secure random values."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The input array filled with cryptographically secure random values."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst byteArray = new Uint8Array(16);\nCrypto.getRandomValues(byteArray);\nconsole.log('Your lucky bytes: ' + byteArray);\n```"}]}]},"typeParameter":[{"name":"T","kind":131072,"type":{"type":"union","types":[{"type":"reference","name":"IntBasedTypedArray"},{"type":"reference","name":"UintBasedTypedArray"}]}}],"parameters":[{"name":"typedArray","kind":32768,"comment":{"summary":[{"kind":"text","text":"An integer based ["},{"kind":"code","text":"`TypedArray`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) to fill with cryptographically secure random values. It modifies the input array in place."}]},"type":{"type":"reference","name":"T"}}],"type":{"type":"reference","name":"T"}}]},{"name":"randomUUID","kind":64,"signatures":[{"name":"randomUUID","kind":4096,"comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`randomUUID()`"},{"kind":"text","text":" method returns a unique identifier based on the V4 UUID spec (RFC4122).\nIt uses cryptographically secure random values to generate the UUID."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A string containing a newly generated UUIDv4 identifier"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst UUID = Crypto.randomUUID();\nconsole.log('Your UUID: ' + UUID);\n```"}]}]},"type":{"type":"intrinsic","name":"string"}}]}]}