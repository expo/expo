{"name":"expo-updates","variant":"project","kind":1,"children":[{"name":"UpdateCheckResultNotAvailableReason","variant":"declaration","kind":8,"children":[{"name":"NO_UPDATE_AVAILABLE_ON_SERVER","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"No update manifest or rollback directive received from the update server."}]},"type":{"type":"literal","value":"noUpdateAvailableOnServer"}},{"name":"ROLLBACK_NO_EMBEDDED","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"A rollback directive was received from the update server, but this app has no embedded update."}]},"type":{"type":"literal","value":"rollbackNoEmbeddedConfiguration"}},{"name":"ROLLBACK_REJECTED_BY_SELECTION_POLICY","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"A rollback directive was received from the update server, but the directive does not pass\nthe configured selection policy."}]},"type":{"type":"literal","value":"rollbackRejectedBySelectionPolicy"}},{"name":"UPDATE_PREVIOUSLY_FAILED","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"An update manifest was received from the update server, but the update has been previously\nlaunched on this device and never successfully launched."}]},"type":{"type":"literal","value":"updatePreviouslyFailed"}},{"name":"UPDATE_REJECTED_BY_SELECTION_POLICY","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"An update manifest was received from the update server, but the update is not launchable,\nor does not pass the configured selection policy."}]},"type":{"type":"literal","value":"updateRejectedBySelectionPolicy"}}]},{"name":"UpdateEventType","variant":"declaration","kind":8,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"The types of update-related events, used with "},{"kind":"code","text":"`addListener()`"},{"kind":"text","text":" and "},{"kind":"code","text":"`useUpdateEvents()`"},{"kind":"text","text":".\nThese APIs are deprecated and will be removed in a future release corresponding with SDK 51.\nUse ["},{"kind":"code","text":"`useUpdates()`"},{"kind":"text","text":"](#useupdates) instead."}]}]},"children":[{"name":"ERROR","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"An error occurred trying to fetch the latest update."}]},"type":{"type":"literal","value":"error"}},{"name":"NO_UPDATE_AVAILABLE","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"No updates are available, and the most up-to-date update is already running."}]},"type":{"type":"literal","value":"noUpdateAvailable"}},{"name":"UPDATE_AVAILABLE","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"A new update has finished downloading to local storage. If you would like to start using this\nupdate at any point before the user closes and restarts the app on their own, you can call\n["},{"kind":"code","text":"`Updates.reloadAsync()`"},{"kind":"text","text":"](#reloadasync) to launch this new update."}]},"type":{"type":"literal","value":"updateAvailable"}}]},{"name":"UpdateInfoType","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"The different possible types of updates.\nCurrently, the only supported type is "},{"kind":"code","text":"`UpdateInfoType.NEW`"},{"kind":"text","text":", indicating a new update that can be downloaded and launched\non the device.\nIn future, other types of updates may be added to this list."}]},"children":[{"name":"NEW","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"This is the type for new updates found on or downloaded from the update server, that are launchable on the device."}]},"type":{"type":"literal","value":"new"}},{"name":"ROLLBACK","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"This type is used when an update is a directive to roll back to the embedded bundle."}]},"type":{"type":"literal","value":"rollback"}}]},{"name":"UpdatesCheckAutomaticallyValue","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"The possible settings that determine if expo-updates will check for updates on app startup.\nBy default, Expo will check for updates every time the app is loaded. Set this to "},{"kind":"code","text":"`ON_ERROR_RECOVERY`"},{"kind":"text","text":" to disable automatic checking unless recovering from an error. Set this to "},{"kind":"code","text":"`NEVER`"},{"kind":"text","text":" to completely disable automatic checking. Must be one of "},{"kind":"code","text":"`ON_LOAD`"},{"kind":"text","text":" (default value), "},{"kind":"code","text":"`ON_ERROR_RECOVERY`"},{"kind":"text","text":", "},{"kind":"code","text":"`WIFI_ONLY`"},{"kind":"text","text":", or "},{"kind":"code","text":"`NEVER`"}]},"children":[{"name":"NEVER","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Automatic update checks are off, and update checks must be done through the JS API."}]},"type":{"type":"literal","value":"NEVER"}},{"name":"ON_ERROR_RECOVERY","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Only checks for updates when the app starts up after an error recovery."}]},"type":{"type":"literal","value":"ON_ERROR_RECOVERY"}},{"name":"ON_LOAD","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Checks for updates whenever the app is loaded. This is the default setting."}]},"type":{"type":"literal","value":"ON_LOAD"}},{"name":"WIFI_ONLY","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Only checks for updates when the app starts and has a WiFi connection."}]},"type":{"type":"literal","value":"WIFI_ONLY"}}]},{"name":"UpdatesLogEntryCode","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"The possible code values for expo-updates log entries"}]},"children":[{"name":"ASSETS_FAILED_TO_LOAD","variant":"declaration","kind":16,"type":{"type":"literal","value":"AssetsFailedToLoad"}},{"name":"JS_RUNTIME_ERROR","variant":"declaration","kind":16,"type":{"type":"literal","value":"JSRuntimeError"}},{"name":"NONE","variant":"declaration","kind":16,"type":{"type":"literal","value":"None"}},{"name":"NO_UPDATES_AVAILABLE","variant":"declaration","kind":16,"type":{"type":"literal","value":"NoUpdatesAvailable"}},{"name":"UNKNOWN","variant":"declaration","kind":16,"type":{"type":"literal","value":"Unknown"}},{"name":"UPDATE_ASSETS_NOT_AVAILABLE","variant":"declaration","kind":16,"type":{"type":"literal","value":"UpdateAssetsNotAvailable"}},{"name":"UPDATE_CODE_SIGNING_ERROR","variant":"declaration","kind":16,"type":{"type":"literal","value":"UpdateCodeSigningError"}},{"name":"UPDATE_FAILED_TO_LOAD","variant":"declaration","kind":16,"type":{"type":"literal","value":"UpdateFailedToLoad"}},{"name":"UPDATE_HAS_INVALID_SIGNATURE","variant":"declaration","kind":16,"type":{"type":"literal","value":"UpdateHasInvalidSignature"}},{"name":"UPDATE_SERVER_UNREACHABLE","variant":"declaration","kind":16,"type":{"type":"literal","value":"UpdateServerUnreachable"}}]},{"name":"UpdatesLogEntryLevel","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"The possible log levels for expo-updates log entries"}]},"children":[{"name":"DEBUG","variant":"declaration","kind":16,"type":{"type":"literal","value":"debug"}},{"name":"ERROR","variant":"declaration","kind":16,"type":{"type":"literal","value":"error"}},{"name":"FATAL","variant":"declaration","kind":16,"type":{"type":"literal","value":"fatal"}},{"name":"INFO","variant":"declaration","kind":16,"type":{"type":"literal","value":"info"}},{"name":"TRACE","variant":"declaration","kind":16,"type":{"type":"literal","value":"trace"}},{"name":"WARN","variant":"declaration","kind":16,"type":{"type":"literal","value":"warn"}}]},{"name":"CurrentlyRunningInfo","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"Structure encapsulating information on the currently running app\n(either the embedded bundle or a downloaded update)."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"channel","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The channel name of the current build, if configured for use with EAS Update; undefined otherwise."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"createdAt","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is enabled, this is a "},{"kind":"code","text":"`Date`"},{"kind":"text","text":" object representing the creation time of the update\nthat's currently running (whether it was embedded or downloaded at runtime).\n\nIn development mode, or any other environment in which "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled, this value is\nundefined."}]},"type":{"type":"reference","name":"Date","package":"typescript"}},{"name":"isEmbeddedLaunch","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"This will be true if the currently running update is the one embedded in the build,\nand not one downloaded from the updates server."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isEmergencyLaunch","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" does its very best to always launch monotonically newer versions of your app so\nyou don't need to worry about backwards compatibility when you put out an update. In very rare\ncases, it's possible that "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" may need to fall back to the update that's embedded in\nthe app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\nThis boolean will be "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the app is launching under this fallback mechanism and "},{"kind":"code","text":"`false`"},{"kind":"text","text":"\notherwise. If you are concerned about backwards compatibility of future updates to your app, you\ncan use this constant to provide special behavior for this rare case."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"manifest","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is enabled, this is the\n[manifest](https://docs.expo.dev/versions/latest/sdk/updates/#updatesmanifest) object for the update that's currently\nrunning.\n\nIn development mode, or any other environment in which "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled, this object is\nempty."}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Manifest","package":"expo-updates"}],"name":"Partial","package":"typescript"}},{"name":"runtimeVersion","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The runtime version of the current build."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"updateId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The UUID that uniquely identifies the currently running update if "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is enabled. The\nUUID is represented in its canonical string form ("},{"kind":"code","text":"`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`"},{"kind":"text","text":") and\nwill always use lowercase letters. In development mode, or any other environment in which\n"},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled, this value is undefined."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"Manifest","variant":"declaration","kind":4194304,"type":{"type":"union","types":[{"type":"reference","name":"NewManifest","package":"expo-manifests"},{"type":"reference","name":"BareManifest","package":"expo-manifests"}]}},{"name":"UpdateCheckResult","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The result of checking for a new update."}]},"type":{"type":"union","types":[{"type":"reference","name":"UpdateCheckResultRollBack","package":"expo-updates"},{"type":"reference","name":"UpdateCheckResultAvailable","package":"expo-updates"},{"type":"reference","name":"UpdateCheckResultNotAvailable","package":"expo-updates"}]}},{"name":"UpdateCheckResultAvailable","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The update check result when a new update is found on the server."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isAvailable","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether an update is available. This property is false for a roll back update."}]},"type":{"type":"literal","value":true}},{"name":"isRollBackToEmbedded","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether a roll back to embedded update is available."}]},"type":{"type":"literal","value":false}},{"name":"manifest","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The manifest of the update when available."}]},"type":{"type":"reference","name":"Manifest","package":"expo-updates"}},{"name":"reason","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If no new update is found, this contains one of several enum values indicating the reason."}]},"type":{"type":"intrinsic","name":"undefined"}}]}}},{"name":"UpdateCheckResultFailure","variant":"declaration","kind":4194304,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[]}]},"type":{"type":"reference","name":"UpdateCheckResultNotAvailable","package":"expo-updates"}},{"name":"UpdateCheckResultNotAvailable","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The update check result if no new update was found."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isAvailable","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether an update is available. This property is false for a roll back update."}]},"type":{"type":"literal","value":false}},{"name":"isRollBackToEmbedded","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether a roll back to embedded update is available."}]},"type":{"type":"literal","value":false}},{"name":"manifest","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The manifest of the update when available."}]},"type":{"type":"intrinsic","name":"undefined"}},{"name":"reason","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If no new update is found, this contains one of several enum values indicating the reason."}]},"type":{"type":"reference","name":"UpdateCheckResultNotAvailableReason","package":"expo-updates"}}]}}},{"name":"UpdateCheckResultRollBack","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The update check result when a rollback directive is received."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isAvailable","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether an update is available. This property is false for a roll back update."}]},"type":{"type":"literal","value":false}},{"name":"isRollBackToEmbedded","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether a roll back to embedded update is available."}]},"type":{"type":"literal","value":true}},{"name":"manifest","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The manifest of the update when available."}]},"type":{"type":"intrinsic","name":"undefined"}},{"name":"reason","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If no new update is found, this contains one of several enum values indicating the reason."}]},"type":{"type":"intrinsic","name":"undefined"}}]}}},{"name":"UpdateCheckResultSuccess","variant":"declaration","kind":4194304,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[]}]},"type":{"type":"reference","name":"UpdateCheckResultAvailable","package":"expo-updates"}},{"name":"UpdateEvent","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"An object that is passed into each event listener when an auto-update check occurs."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"manifest","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`type`"},{"kind":"text","text":" is "},{"kind":"code","text":"`Updates.UpdateEventType.UPDATE_AVAILABLE`"},{"kind":"text","text":", the manifest of the newly downloaded\nupdate, and "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" otherwise."}]},"type":{"type":"reference","name":"Manifest","package":"expo-updates"}},{"name":"message","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`type`"},{"kind":"text","text":" is "},{"kind":"code","text":"`Updates.UpdateEventType.ERROR`"},{"kind":"text","text":", the error message, and "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" otherwise."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"type","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Type of the event."}]},"type":{"type":"reference","name":"UpdateEventType","package":"expo-updates"}}]}}},{"name":"UpdateFetchResult","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The result of fetching a new update."}]},"type":{"type":"union","types":[{"type":"reference","name":"UpdateFetchResultSuccess","package":"expo-updates"},{"type":"reference","name":"UpdateFetchResultFailure","package":"expo-updates"},{"type":"reference","name":"UpdateFetchResultRollBackToEmbedded","package":"expo-updates"}]}},{"name":"UpdateFetchResultFailure","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The failed result of fetching a new update."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isNew","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the fetched update is new (that is, a different version than what's currently running).\nFalse when roll back to embedded is true."}]},"type":{"type":"literal","value":false}},{"name":"isRollBackToEmbedded","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the fetched update is a roll back to the embedded update."}]},"type":{"type":"literal","value":false}},{"name":"manifest","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The manifest of the fetched update."}]},"type":{"type":"intrinsic","name":"undefined"}}]}}},{"name":"UpdateFetchResultSuccess","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The successful result of fetching a new update."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isNew","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the fetched update is new (that is, a different version than what's currently running).\nFalse when roll back to embedded is true."}]},"type":{"type":"literal","value":true}},{"name":"isRollBackToEmbedded","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Whether the fetched update is a roll back to the embedded update."}]},"type":{"type":"literal","value":false}},{"name":"manifest","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The manifest of the fetched update."}]},"type":{"type":"reference","name":"Manifest","package":"expo-updates"}}]}}},{"name":"UpdateInfo","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"Combined structure representing any type of update."}]},"type":{"type":"union","types":[{"type":"reference","name":"UpdateInfoNew","package":"expo-updates"},{"type":"reference","name":"UpdateInfoRollback","package":"expo-updates"}]}},{"name":"UpdatesLogEntry","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"An object representing a single log entry from expo-updates logging on the client."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"assetId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If present, the unique ID or hash of an asset associated with this log entry."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"code","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"One of the defined code values for expo-updates log entries."}]},"type":{"type":"reference","name":"UpdatesLogEntryCode","package":"expo-updates"}},{"name":"level","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"One of the defined log level or severity values."}]},"type":{"type":"reference","name":"UpdatesLogEntryLevel","package":"expo-updates"}},{"name":"message","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The log entry message."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"stacktrace","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If present, an iOS or Android native stack trace associated with this log entry."}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"name":"timestamp","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The time the log was written, in milliseconds since Jan 1 1970 UTC."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"updateId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If present, the unique ID of an update associated with this log entry."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"UseUpdatesReturnType","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The structures and methods returned by "},{"kind":"code","text":"`useUpdates()`"},{"kind":"text","text":"."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"availableUpdate","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If a new available update has been found, either by using checkForUpdate(),\nor by the "},{"kind":"code","text":"`UpdateEvent`"},{"kind":"text","text":" listener in "},{"kind":"code","text":"`useUpdates()`"},{"kind":"text","text":",\nthis will contain the information for that update."}]},"type":{"type":"reference","name":"UpdateInfo","package":"expo-updates"}},{"name":"checkError","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If an error is returned from either the startup check for updates, or a call to "},{"kind":"code","text":"`checkForUpdateAsync()`"},{"kind":"text","text":",\nthe error description will appear here."}]},"type":{"type":"reference","name":"Error","package":"typescript"}},{"name":"currentlyRunning","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Information on the currently running app"}]},"type":{"type":"reference","name":"CurrentlyRunningInfo","package":"expo-updates"}},{"name":"downloadError","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If an error is returned from either a startup update download, or a call to "},{"kind":"code","text":"`fetchUpdateAsync()`"},{"kind":"text","text":",\nthe error description will appear here."}]},"type":{"type":"reference","name":"Error","package":"typescript"}},{"name":"downloadedUpdate","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If an available update has been downloaded, this will contain the information\nfor that update."}]},"type":{"type":"reference","name":"UpdateInfo","package":"expo-updates"}},{"name":"initializationError","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If an error occurs during initialization of "},{"kind":"code","text":"`useUpdates()`"},{"kind":"text","text":", the error description will appear here."}]},"type":{"type":"reference","name":"Error","package":"typescript"}},{"name":"isChecking","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"True if the app is currently checking for a new available update from the server."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isDownloading","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"True if the app is currently downloading an update from the server."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isUpdateAvailable","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"True if a new available update has been found, false otherwise."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isUpdatePending","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"True if a new available update is available and has been downloaded."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"lastCheckForUpdateTimeSinceRestart","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A "},{"kind":"code","text":"`Date`"},{"kind":"text","text":" object representing the last time this client checked for an available update,\nor "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" if no check has yet occurred since the app started. Does not persist across\napp reloads or restarts."}]},"type":{"type":"reference","name":"Date","package":"typescript"}}]}}},{"name":"channel","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The channel name of the current build, if configured for use with EAS Update. "},{"kind":"code","text":"`null`"},{"kind":"text","text":" otherwise.\n\nExpo Go and development builds are not set to a specific channel and can run any updates compatible with their native runtime. Therefore, this value will always be "},{"kind":"code","text":"`null`"},{"kind":"text","text":" when running an update on Expo Go or a development build."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"checkAutomatically","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Determines if and when expo-updates checks for and downloads updates automatically on startup."}]},"type":{"type":"union","types":[{"type":"reference","name":"UpdatesCheckAutomaticallyValue","package":"expo-updates"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"createdAt","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is enabled, this is a "},{"kind":"code","text":"`Date`"},{"kind":"text","text":" object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).\n\nIn development mode, or any other environment in which "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled, this value is\nnull."}]},"type":{"type":"union","types":[{"type":"reference","name":"Date","package":"typescript"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"isEmbeddedLaunch","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"This will be true if the currently running update is the one embedded in the build,\nand not one downloaded from the updates server."}]},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"..."},{"name":"isEmergencyLaunch","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" does its very best to always launch monotonically newer versions of your app so\nyou don't need to worry about backwards compatibility when you put out an update. In very rare\ncases, it's possible that "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" may need to fall back to the update that's embedded in\nthe app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\nThis boolean will be "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the app is launching under this fallback mechanism and "},{"kind":"code","text":"`false`"},{"kind":"text","text":"\notherwise. If you are concerned about backwards compatibility of future updates to your app, you\ncan use this constant to provide special behavior for this rare case."}]},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"..."},{"name":"isEnabled","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Whether expo-updates is enabled. This may be false in a variety of cases including:\n- enabled set to false in configuration\n- missing or invalid URL in configuration\n- missing runtime version or SDK version in configuration\n- error accessing storage on device during initialization\n\nWhen false, the embedded update is loaded."}]},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"!!ExpoUpdates.isEnabled"},{"name":"manifest","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is enabled, this is the\n[manifest](/versions/latest/sdk/constants/#manifest) (or\n[classic manifest](/versions/latest/sdk/constants/#appmanifest))\nobject for the update that's currently running.\n\nIn development mode, or any other environment in which "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled, this object is\nempty."}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Manifest","package":"expo-updates"}],"name":"Partial","package":"typescript"},"defaultValue":"..."},{"name":"releaseChannel","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The name of the release channel currently configured in this standalone or bare app when using\nclassic updates. When using Expo Updates, the value of this field is always "},{"kind":"code","text":"`\"default\"`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"name":"runtimeVersion","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The runtime version of the current build."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"updateId","variant":"declaration","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The UUID that uniquely identifies the currently running update. The\nUUID is represented in its canonical string form ("},{"kind":"code","text":"`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`"},{"kind":"text","text":") and\nwill always use lowercase letters. This value is "},{"kind":"code","text":"`null`"},{"kind":"text","text":" when running in a local development environment or any other environment where "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"addListener","variant":"declaration","kind":64,"signatures":[{"name":"addListener","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Adds a callback to be invoked when updates-related events occur (such as upon the initial app\nload) due to auto-update settings chosen at build-time. See also the\n["},{"kind":"code","text":"`useUpdateEvents`"},{"kind":"text","text":"](#useupdateeventslistener) React hook.\nThis API is deprecated and will be removed in a future release corresponding with SDK 51.\nUse ["},{"kind":"code","text":"`useUpdates()`"},{"kind":"text","text":"](#useupdates) instead."}]},{"tag":"@returns","content":[{"kind":"text","text":"An "},{"kind":"code","text":"`EventSubscription`"},{"kind":"text","text":" object on which you can call "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" to unsubscribe the\nlistener."}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function that will be invoked with an ["},{"kind":"code","text":"`UpdateEvent`"},{"kind":"text","text":"](#updateevent) instance\nand should not return any value."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"UpdateEvent","package":"expo-updates"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"EventSubscription","package":"@types/fbemitter"}}]},{"name":"checkForUpdateAsync","variant":"declaration","kind":64,"signatures":[{"name":"checkForUpdateAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Checks the server to see if a newly deployed update to your project is available. Does not\nactually download the update. This method cannot be used in development mode, and the returned\npromise will be rejected if you try to do so.\n\nChecking for an update uses a device's bandwidth and battery life like any network call.\nAdditionally, updates served by Expo may be rate limited. A good rule of thumb to check for\nupdates judiciously is to check when the user launches or foregrounds the app. Avoid polling for\nupdates in a frequent loop."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills with an ["},{"kind":"code","text":"`UpdateCheckResult`"},{"kind":"text","text":"](#updatecheckresult) object.\n\nThe promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or\ntimeout communicating with the server. It also rejects when expo-updates is not enabled."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"UpdateCheckResult","package":"expo-updates"}],"name":"Promise","package":"typescript"}}]},{"name":"clearLogEntriesAsync","variant":"declaration","kind":64,"signatures":[{"name":"clearLogEntriesAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Clears existing expo-updates log entries.\n\n> For now, this operation does nothing on the client.  Once log persistence has been\n> implemented, this operation will actually remove existing logs."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills if the clear operation was successful.\n\nThe promise rejects if there is an unexpected error in clearing the logs."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"fetchUpdateAsync","variant":"declaration","kind":64,"signatures":[{"name":"fetchUpdateAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Downloads the most recently deployed update to your project from server to the device's local\nstorage. This method cannot be used in development mode, and the returned promise will be\nrejected if you try to do so.\n\n> **Note:** ["},{"kind":"code","text":"`reloadAsync()`"},{"kind":"text","text":"](#updatesreloadasync) can be called after promise resolution to\nreload the app using the most recently downloaded version. Otherwise, the update will be applied\non the next app cold start."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills with an ["},{"kind":"code","text":"`UpdateFetchResult`"},{"kind":"text","text":"](#updatefetchresult) object.\n\nThe promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or\ntimeout communicating with the server. It also rejects when expo-updates is not enabled."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"UpdateFetchResult","package":"expo-updates"}],"name":"Promise","package":"typescript"}}]},{"name":"getExtraParamsAsync","variant":"declaration","kind":64,"signatures":[{"name":"getExtraParamsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Retrieves the current extra params.\n\nThis method cannot be used in Expo Go or development mode. It also rejects when expo-updates is not enabled."}]},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"indexSignature":{"name":"__index","variant":"signature","kind":8192,"parameters":[{"name":"key","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}}}],"name":"Promise","package":"typescript"}}]},{"name":"readLogEntriesAsync","variant":"declaration","kind":64,"signatures":[{"name":"readLogEntriesAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Retrieves the most recent expo-updates log entries."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills with an array of ["},{"kind":"code","text":"`UpdatesLogEntry`"},{"kind":"text","text":"](#updateslogentry) objects;\n\nThe promise rejects if there is an unexpected error in retrieving the logs."}]}]},"parameters":[{"name":"maxAge","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour)."}]},"type":{"type":"intrinsic","name":"number"},"defaultValue":"3600000"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"UpdatesLogEntry","package":"expo-updates"}}],"name":"Promise","package":"typescript"}}]},{"name":"reloadAsync","variant":"declaration","kind":64,"signatures":[{"name":"reloadAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Instructs the app to reload using the most recently downloaded version. This is useful for\ntriggering a newly downloaded update to launch without the user needing to manually restart the\napp.\n\nIt is not recommended to place any meaningful logic after a call to "},{"kind":"code","text":"`await\nUpdates.reloadAsync()`"},{"kind":"text","text":". This is because the promise is resolved after verifying that the app can\nbe reloaded, and immediately before posting an asynchronous task to the main thread to actually\nreload the app. It is unsafe to make any assumptions about whether any more JS code will be\nexecuted after the "},{"kind":"code","text":"`Updates.reloadAsync`"},{"kind":"text","text":" method call resolves, since that depends on the OS and\nthe state of the native module and main threads.\n\nThis method cannot be used in Expo Go or development mode, and the returned promise will be rejected if you\ntry to do so. It also rejects when expo-updates is not enabled."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills right before the reload instruction is sent to the JS runtime, or\nrejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\nmode, it most likely means you have installed the module incorrectly. Double check you've\nfollowed the installation instructions. In particular, on iOS ensure that you set the "},{"kind":"code","text":"`bridge`"},{"kind":"text","text":"\nproperty on "},{"kind":"code","text":"`EXUpdatesAppController`"},{"kind":"text","text":" with a pointer to the "},{"kind":"code","text":"`RCTBridge`"},{"kind":"text","text":" you want to reload, and on\nAndroid ensure you either call "},{"kind":"code","text":"`UpdatesController.initialize`"},{"kind":"text","text":" with the instance of\n"},{"kind":"code","text":"`ReactApplication`"},{"kind":"text","text":" you want to reload, or call "},{"kind":"code","text":"`UpdatesController.setReactNativeHost`"},{"kind":"text","text":" with the\nproper instance of "},{"kind":"code","text":"`ReactNativeHost`"},{"kind":"text","text":"."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"setExtraParamAsync","variant":"declaration","kind":64,"signatures":[{"name":"setExtraParamAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Sets an extra param if value is non-null, otherwise unsets the param.\nExtra params are sent as an [Expo Structured Field Value Dictionary](https://docs.expo.dev/technical-specs/expo-sfv-0/)\nin the "},{"kind":"code","text":"`Expo-Extra-Params`"},{"kind":"text","text":" header of update requests. A compliant update server may use these params when selecting an update to serve.\n\nThis method cannot be used in Expo Go or development mode. It also rejects when expo-updates is not enabled."}]},"parameters":[{"name":"key","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"value","variant":"param","kind":32768,"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"useUpdateEvents","variant":"declaration","kind":64,"signatures":[{"name":"useUpdateEvents","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"React hook to create an ["},{"kind":"code","text":"`UpdateEvent`"},{"kind":"text","text":"](#updateevent) listener subscription on mount, using\n["},{"kind":"code","text":"`addListener`"},{"kind":"text","text":"](#updatesaddlistenerlistener). It calls "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" on the subscription during unmount.\nThis API is deprecated and will be removed in a future release corresponding with SDK 51.\nUse ["},{"kind":"code","text":"`useUpdates()`"},{"kind":"text","text":"](#useupdates) instead."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nfunction App() {\n  const eventListener = (event) => {\n    if (event.type === Updates.UpdateEventType.ERROR) {\n      // Handle error\n    } else if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n      // Handle no update available\n    } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n      // Handle update available\n    }\n  };\n  Updates.useUpdateEvents(eventListener);\n  // React Component...\n}\n```"}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function that will be invoked with an ["},{"kind":"code","text":"`UpdateEvent`"},{"kind":"text","text":"](#updateevent) instance\nand should not return any value."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"UpdateEvent","package":"expo-updates"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"useUpdates","variant":"declaration","kind":64,"signatures":[{"name":"useUpdates","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook that obtains information on available updates and on the currently running update."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"the structures with information on currently running and available updates."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx UpdatesDemo.tsx\nimport { StatusBar } from 'expo-status-bar';\nimport * as Updates from 'expo-updates';\nimport React from 'react';\nimport { Pressable, Text, View } from 'react-native';\n\nexport default function UpdatesDemo() {\n  const {\n    currentlyRunning,\n    availableUpdate,\n    isUpdateAvailable,\n    isUpdatePending\n  } = Updates.useUpdates();\n\n  React.useEffect(() => {\n    if (isUpdatePending) {\n      // Update has successfully downloaded\n      runUpdate();\n    }\n  }, [isUpdatePending]);\n\n  // If true, we show the button to download and run the update\n  const showDownloadButton = isUpdateAvailable;\n\n  // Show whether or not we are running embedded code or an update\n  const runTypeMessage = currentlyRunning.isEmbeddedLaunch\n    ? 'This app is running from built-in code'\n    : 'This app is running an update';\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.headerText}>Updates Demo</Text>\n      <Text>{runTypeMessage}</Text>\n      <Button pressHandler={() => Updates.checkForUpdateAsync()} text=\"Check manually for updates\" />\n      {showDownloadButton ? (\n        <Button pressHandler={() => Updates.fetchUpdateAsync()} text=\"Download and run update\" />\n      ) : null}\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n```"}]}]},"type":{"type":"reference","name":"UseUpdatesReturnType","package":"expo-updates"}}]}],"packageName":"expo-updates"}