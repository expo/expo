{"name":"expo-linking","variant":"project","kind":1,"children":[{"name":"CreateURLOptions","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isTripleSlashed","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Should the URI be triple slashed "},{"kind":"code","text":"`scheme:///path`"},{"kind":"text","text":" or double slashed "},{"kind":"code","text":"`scheme://path`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"queryParams","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object of parameters that will be converted into a query string."}]},"type":{"type":"reference","name":"QueryParams","package":"expo-linking"}},{"name":"scheme","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"URI protocol "},{"kind":"code","text":"`<scheme>://`"},{"kind":"text","text":" that must be built into your native app."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"EventType","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"nativeEvent","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"MessageEvent","package":"typescript"}},{"name":"url","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"NativeURLListener","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"nativeEvent","variant":"param","kind":32768,"type":{"type":"reference","name":"MessageEvent","package":"typescript"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"ParsedURL","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"hostname","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"path","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The path into the app specified by the URL."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"queryParams","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The set of query parameters specified by the query string of the url used to open the app."}]},"type":{"type":"union","types":[{"type":"reference","name":"QueryParams","package":"expo-linking"},{"type":"literal","value":null}]}},{"name":"scheme","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}}},{"name":"QueryParams","variant":"declaration","kind":4194304,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}],"name":"Record","package":"typescript"}},{"name":"SendIntentExtras","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"key","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"value","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"boolean"}]}}]}}},{"name":"URLListener","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"EventType","package":"expo-linking"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"addEventListener","variant":"declaration","kind":64,"signatures":[{"name":"addEventListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Add a handler to "},{"kind":"code","text":"`Linking`"},{"kind":"text","text":" changes by listening to the "},{"kind":"code","text":"`url`"},{"kind":"text","text":" event type and providing the handler.\nIt is recommended to use the ["},{"kind":"code","text":"`useURL()`"},{"kind":"text","text":"](#useurl) hook instead."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"An EmitterSubscription that has the remove method from EventSubscription"}]},{"tag":"@see","content":[{"kind":"text","text":"[React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener)."}]}]},"parameters":[{"name":"type","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The only valid type is "},{"kind":"code","text":"`'url'`"},{"kind":"text","text":"."}]},"type":{"type":"literal","value":"url"}},{"name":"handler","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An ["},{"kind":"code","text":"`URLListener`"},{"kind":"text","text":"](#urllistener) function that takes an "},{"kind":"code","text":"`event`"},{"kind":"text","text":" object of the type\n["},{"kind":"code","text":"`EventType`"},{"kind":"text","text":"](#eventype)."}]},"type":{"type":"reference","name":"URLListener","package":"expo-linking"}}],"type":{"type":"reference","name":"EmitterSubscription","package":"react-native"}}]},{"name":"canOpenURL","variant":"declaration","kind":64,"signatures":[{"name":"canOpenURL","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Determine whether or not an installed app can handle a given URL.\nOn web this always returns "},{"kind":"code","text":"`true`"},{"kind":"text","text":" because there is no API for detecting what URLs can be opened."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" object that is fulfilled with "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the URL can be handled, otherwise it\n"},{"kind":"code","text":"`false`"},{"kind":"text","text":" if not.\n\nThe "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" will reject on Android if it was impossible to check if the URL can be opened, and\non iOS if you didn't [add the specific scheme in the "},{"kind":"code","text":"`LSApplicationQueriesSchemes`"},{"kind":"text","text":" key inside **Info.plist**](/guides/linking#linking-from-your-app)."}]}]},"parameters":[{"name":"url","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The URL that you want to test can be opened."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]},{"name":"collectManifestSchemes","variant":"declaration","kind":64,"signatures":[{"name":"collectManifestSchemes","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Collect a list of platform schemes from the manifest.\n\nThis method is based on the "},{"kind":"code","text":"`Scheme`"},{"kind":"text","text":" modules from "},{"kind":"code","text":"`@expo/config-plugins`"},{"kind":"text","text":"\nwhich are used for collecting the schemes before prebuilding a native app.\n\n- iOS: scheme -> ios.scheme -> ios.bundleIdentifier\n- Android: scheme -> android.scheme -> android.package"}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"name":"createURL","variant":"declaration","kind":64,"signatures":[{"name":"createURL","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Helper method for constructing a deep link into your app, given an optional path and set of query\nparameters. Creates a URI scheme with two slashes by default.\n\nThe scheme must be defined in the Expo config ("},{"kind":"code","text":"`app.config.js`"},{"kind":"text","text":" or "},{"kind":"code","text":"`app.json`"},{"kind":"text","text":") under "},{"kind":"code","text":"`expo.scheme`"},{"kind":"text","text":"\nor "},{"kind":"code","text":"`expo.{android,ios}.scheme`"},{"kind":"text","text":". Platform-specific schemes defined under "},{"kind":"code","text":"`expo.{android,ios}.scheme`"},{"kind":"text","text":"\ntake precedence over universal schemes defined under "},{"kind":"code","text":"`expo.scheme`"},{"kind":"text","text":".\n\n# Examples\n- Development and production builds: "},{"kind":"code","text":"`<scheme>://path`"},{"kind":"text","text":" - uses the optional "},{"kind":"code","text":"`scheme`"},{"kind":"text","text":" property if provided, and otherwise uses the first scheme defined by your Expo config\n- Web (dev): "},{"kind":"code","text":"`https://localhost:19006/path`"},{"kind":"text","text":"\n- Web (prod): "},{"kind":"code","text":"`https://myapp.com/path`"},{"kind":"text","text":"\n- Expo Go (dev): "},{"kind":"code","text":"`exp://128.0.0.1:8081/--/path`"},{"kind":"text","text":"\n\nThe behavior of this method in Expo Go for published updates is undefined and should not be relied upon.\nThe created URL in this case is neither stable nor predictable during the lifetime of the app.\nIf a stable URL is needed, for example in authorization callbacks, a build (or development build)\nof your application should be used and the scheme provided."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A URL string which points to your app with the given deep link information."}]}]},"parameters":[{"name":"path","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Addition path components to append to the base URL."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"namedParameters","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Additional options object."}]},"type":{"type":"reference","name":"CreateURLOptions","package":"expo-linking"},"defaultValue":"{}"}],"type":{"type":"intrinsic","name":"string"}}]},{"name":"getInitialURL","variant":"declaration","kind":64,"signatures":[{"name":"getInitialURL","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the URL that was used to launch the app if it was launched by a link."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The URL string that launched your app, or "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}],"name":"Promise","package":"typescript"}}]},{"name":"hasConstantsManifest","variant":"declaration","kind":64,"signatures":[{"name":"hasConstantsManifest","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Ensure the user has linked the expo-constants manifest in bare workflow."}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"hasCustomScheme","variant":"declaration","kind":64,"signatures":[{"name":"hasCustomScheme","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"openSettings","variant":"declaration","kind":64,"signatures":[{"name":"openSettings","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Open the operating system settings app and displays the app’s custom settings, if it has any."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"openURL","variant":"declaration","kind":64,"signatures":[{"name":"openURL","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\nfor more information."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that is fulfilled with "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the link is opened operating system\nautomatically or the user confirms the prompt to open the link. The "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" rejects if there\nare no applications registered for the URL or the user cancels the dialog."}]}]},"parameters":[{"name":"url","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A URL for the operating system to open, eg: "},{"kind":"code","text":"`tel:5555555`"},{"kind":"text","text":", "},{"kind":"code","text":"`exp://`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"literal","value":true}],"name":"Promise","package":"typescript"}}]},{"name":"parse","variant":"declaration","kind":64,"signatures":[{"name":"parse","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Helper method for parsing out deep link information from a URL."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`ParsedURL`"},{"kind":"text","text":" object."}]}]},"parameters":[{"name":"url","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A URL that points to the currently running experience (e.g. an output of "},{"kind":"code","text":"`Linking.createURL()`"},{"kind":"text","text":")."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"ParsedURL","package":"expo-linking"}}]},{"name":"parseInitialURLAsync","variant":"declaration","kind":64,"signatures":[{"name":"parseInitialURLAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Helper method which wraps React Native's "},{"kind":"code","text":"`Linking.getInitialURL()`"},{"kind":"text","text":" in "},{"kind":"code","text":"`Linking.parse()`"},{"kind":"text","text":".\nParses the deep link information out of the URL used to open the experience initially.\nIf no link opened the app, all the fields will be "},{"kind":"code","text":"`null`"},{"kind":"text","text":".\n> On the web it parses the current window URL."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that resolves with "},{"kind":"code","text":"`ParsedURL`"},{"kind":"text","text":" object."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ParsedURL","package":"expo-linking"}],"name":"Promise","package":"typescript"}}]},{"name":"resolveScheme","variant":"declaration","kind":64,"signatures":[{"name":"resolveScheme","variant":"signature","kind":4096,"parameters":[{"name":"options","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isSilent","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}},{"name":"scheme","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}]}}}],"type":{"type":"intrinsic","name":"string"}}]},{"name":"sendIntent","variant":"declaration","kind":64,"signatures":[{"name":"sendIntent","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Launch an Android intent with extras.\n> Use [IntentLauncher](./intent-launcher) instead, "},{"kind":"code","text":"`sendIntent`"},{"kind":"text","text":" is only included in\n> "},{"kind":"code","text":"`Linking`"},{"kind":"text","text":" for API compatibility with React Native's Linking API."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"parameters":[{"name":"action","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"extras","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"reference","name":"SendIntentExtras","package":"expo-linking"}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"useURL","variant":"declaration","kind":64,"signatures":[{"name":"useURL","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the initial URL followed by any subsequent changes to the URL."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns the initial URL or "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}],"packageName":"expo-linking"}