{"name":"expo-server","variant":"project","kind":1,"children":[{"name":"StatusError","variant":"declaration","kind":128,"comment":{"summary":[{"kind":"text","text":"An error response representation which can be thrown anywhere in server-side code.\n\nA "},{"kind":"code","text":"`StatusError`"},{"kind":"text","text":" can be thrown by a request handler and will be caught by the "},{"kind":"code","text":"`expo-server`"},{"kind":"text","text":"\nruntime and replaced by a "},{"kind":"code","text":"`Response`"},{"kind":"text","text":" with the "},{"kind":"code","text":"`status`"},{"kind":"text","text":" and "},{"kind":"code","text":"`body`"},{"kind":"text","text":" that's been passed to\nthe "},{"kind":"code","text":"`StatusError`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nimport { StatusError } from 'expo-server';\n\nexport function GET(request, { postId }) {\n  if (!postId) {\n    throw new StatusError(400, 'postId parameter is required');\n  }\n}\n```"}]}]},"children":[{"name":"constructor","variant":"declaration","kind":512,"signatures":[{"name":"StatusError","variant":"signature","kind":16384,"parameters":[{"name":"status","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"body","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":{"qualifiedName":"Error"},"name":"Error","package":"typescript"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"error","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"indexSignatures":[{"name":"__index","variant":"signature","kind":8192,"parameters":[{"name":"key","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}}]}}]}}],"type":{"type":"reference","name":"StatusError","package":"expo-server"},"overwrites":{"type":"reference","name":"Error.constructor"}},{"name":"StatusError","variant":"signature","kind":16384,"parameters":[{"name":"status","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"errorOptions","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"cause","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"unknown"}},{"name":"error","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}]}}}],"type":{"type":"reference","name":"StatusError","package":"expo-server"},"overwrites":{"type":"reference","name":"Error.constructor"}},{"name":"StatusError","variant":"signature","kind":16384,"parameters":[{"name":"status","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"body","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":{"qualifiedName":"Error"},"name":"Error","package":"typescript"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"error","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}],"indexSignatures":[{"name":"__index","variant":"signature","kind":8192,"parameters":[{"name":"key","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"any"}}]}}]}},{"name":"errorOptions","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"cause","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"unknown"}}]}}}],"type":{"type":"reference","name":"StatusError","package":"expo-server"},"overwrites":{"type":"reference","name":"Error.constructor"}}],"overwrites":{"type":"reference","name":"Error.constructor"}},{"name":"body","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"status","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}],"extendedTypes":[{"type":"reference","target":{"qualifiedName":"Error"},"name":"Error","package":"typescript"}]},{"name":"ImmutableRequest","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An immutable version of the Fetch API's "},{"kind":"code","text":"`Request`"},{"kind":"text","text":" as received by middleware functions.\nIt cannot be mutated or modified, its headers are immutable, and you won't have access to the request body."}]},"children":[{"name":"duplex","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"type":{"type":"literal","value":"half"},"inheritedFrom":{"type":"reference","name":"_ImmutableRequest.duplex"}},{"name":"headers","variant":"declaration","kind":1024,"flags":{"isInherited":true},"type":{"type":"reference","target":{"qualifiedName":"ImmutableHeaders"},"name":"ImmutableHeaders","package":"expo-server"},"inheritedFrom":{"type":"reference","name":"_ImmutableRequest.headers"}},{"name":"method","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"The **"},{"kind":"code","text":"`method`"},{"kind":"text","text":"** read-only property of the "},{"kind":"code","text":"`POST`"},{"kind":"text","text":", etc.) A String indicating the method of the request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)"}]},"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","name":"_ImmutableRequest.method"}},{"name":"url","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"The **"},{"kind":"code","text":"`url`"},{"kind":"text","text":"** read-only property of the Request interface contains the URL of the request.\n\n[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)"}]},"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","name":"_ImmutableRequest.url"}}],"extendedTypes":[{"type":"reference","target":{"qualifiedName":"_ImmutableRequest"},"name":"_ImmutableRequest","package":"expo-server"}]},{"name":"MiddlewareMatcher","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Middleware matcher settings that restricts the middleware to run conditionally."}]},"children":[{"name":"methods","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Set this to a list of HTTP methods to conditionally run middleware on. By default, middleware will\nmatch all HTTP methods."}],"blockTags":[{"tag":"@example","name":"['POST', 'PUT', 'DELETE']","content":[]}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"name":"patterns","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Set this to a list of path patterns to conditionally run middleware on. This may be exact paths,\npaths containing parameter or catch-all segments ("},{"kind":"code","text":"`'/posts/[postId]'`"},{"kind":"text","text":" or "},{"kind":"code","text":"`'/blog/[...slug]'`"},{"kind":"text","text":"), or\nregular expressions matching paths."}],"blockTags":[{"tag":"@example","name":"['/api', '/posts/[id]', '/blog/[...slug]']","content":[]}]},"type":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":{"qualifiedName":"RegExp"},"name":"RegExp","package":"typescript"}]}}}]},{"name":"MiddlewareSettings","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Exported from a "},{"kind":"code","text":"`+middleware.ts`"},{"kind":"text","text":" file to configure the server-side middleware function."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nimport type { MiddlewareSettings } from 'expo-server';\n\nexport const unstable_settings: MiddlewareSettings = {\n  matcher: {\n    methods: ['GET'],\n    patterns: ['/api', '/admin/[...path]'],\n  },\n};\n```"}]},{"tag":"@see","content":[{"kind":"text","text":"https://docs.expo.dev/router/reference/middleware/"}]}]},"children":[{"name":"matcher","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Matcher definition that restricts the middleware to run conditionally."}]},"type":{"type":"reference","name":"MiddlewareMatcher","package":"expo-server"}}]},{"name":"MiddlewareFunction","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Middleware function type. Middleware run for every request in your app, or on\nspecified conditonally matched methods and path patterns, as per "},{"kind":"inline-tag","tag":"@link","text":"MiddlewareMatcher"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nimport type { MiddlewareFunction } from 'expo-server';\n\nconst middleware: MiddlewareFunction = async (request) => {\n  console.log(`Middleware executed for: ${request.url}`);\n};\n\nexport default middleware;\n```"}]},{"tag":"@see","content":[{"kind":"text","text":"https://docs.expo.dev/router/reference/middleware/"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"request","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An "},{"kind":"code","text":"`ImmutableRequest`"},{"kind":"text","text":" with read-only headers and no body access"}]},"type":{"type":"reference","name":"ImmutableRequest","package":"expo-server"}}],"type":{"type":"union","types":[{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"union","types":[{"type":"reference","target":{"qualifiedName":"Response"},"name":"Response","package":"typescript"},{"type":"intrinsic","name":"void"}]}],"name":"Promise","package":"typescript"},{"type":"reference","target":{"qualifiedName":"Response"},"name":"Response","package":"typescript"},{"type":"intrinsic","name":"void"}]}}]}}},{"name":"deferTask","variant":"declaration","kind":64,"signatures":[{"name":"deferTask","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Defers a task until after a response has been sent.\n\nThis only calls the task function once the request handler has finished resolving a "},{"kind":"code","text":"`Response`"},{"kind":"text","text":"\nand keeps the request handler alive until the task is completed. This is useful to run non-critical\ntasks after the request handler, for example to log analytics datapoints. If the request handler\nrejects with an error, deferred tasks won't be executed."}]},"parameters":[{"name":"fn","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A task function to execute after the request handler has finished."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise","package":"typescript"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"environment","variant":"declaration","kind":64,"signatures":[{"name":"environment","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the request's environment, if the server runtime supports this.\n\nIn EAS Hosting, the returned environment name is the\n[alias or deployment identifier](https://docs.expo.dev/eas/hosting/deployments-and-aliases/),\nbut the value may differ for other providers."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A request environment name, or "},{"kind":"code","text":"`null`"},{"kind":"text","text":" for production."}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]},{"name":"origin","variant":"declaration","kind":64,"signatures":[{"name":"origin","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the current request's origin URL.\n\nThis typically returns the request's "},{"kind":"code","text":"`Origin`"},{"kind":"text","text":" header, which contains the\nrequest origin URL or defaults to "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A request origin"}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]},{"name":"runTask","variant":"declaration","kind":64,"signatures":[{"name":"runTask","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Runs a task immediately and instructs the runtime to complete the task.\n\nA request handler may be terminated as soon as the client has finished the full "},{"kind":"code","text":"`Response`"},{"kind":"text","text":"\nand unhandled promise rejections may not be logged properly. To run tasks concurrently to\na request handler and keep the request alive until the task is completed, pass a task\nfunction to "},{"kind":"code","text":"`runTask`"},{"kind":"text","text":" instead. The request handler will be kept alive until the task\ncompletes."}]},"parameters":[{"name":"fn","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A task function to execute. The request handler will be kept alive until this task finishes."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"Promise","package":"typescript"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]}],"packageName":"expo-server"}