{"name":"expo-notifications","variant":"project","kind":1,"children":[{"name":"AndroidAudioContentType","variant":"declaration","kind":8,"children":[{"name":"MOVIE","variant":"declaration","kind":16,"type":{"type":"literal","value":3}},{"name":"MUSIC","variant":"declaration","kind":16,"type":{"type":"literal","value":2}},{"name":"SONIFICATION","variant":"declaration","kind":16,"type":{"type":"literal","value":4}},{"name":"SPEECH","variant":"declaration","kind":16,"type":{"type":"literal","value":1}},{"name":"UNKNOWN","variant":"declaration","kind":16,"type":{"type":"literal","value":0}}]},{"name":"AndroidAudioUsage","variant":"declaration","kind":8,"children":[{"name":"ALARM","variant":"declaration","kind":16,"type":{"type":"literal","value":4}},{"name":"ASSISTANCE_ACCESSIBILITY","variant":"declaration","kind":16,"type":{"type":"literal","value":11}},{"name":"ASSISTANCE_NAVIGATION_GUIDANCE","variant":"declaration","kind":16,"type":{"type":"literal","value":12}},{"name":"ASSISTANCE_SONIFICATION","variant":"declaration","kind":16,"type":{"type":"literal","value":13}},{"name":"GAME","variant":"declaration","kind":16,"type":{"type":"literal","value":14}},{"name":"MEDIA","variant":"declaration","kind":16,"type":{"type":"literal","value":1}},{"name":"NOTIFICATION","variant":"declaration","kind":16,"type":{"type":"literal","value":5}},{"name":"NOTIFICATION_COMMUNICATION_DELAYED","variant":"declaration","kind":16,"type":{"type":"literal","value":9}},{"name":"NOTIFICATION_COMMUNICATION_INSTANT","variant":"declaration","kind":16,"type":{"type":"literal","value":8}},{"name":"NOTIFICATION_COMMUNICATION_REQUEST","variant":"declaration","kind":16,"type":{"type":"literal","value":7}},{"name":"NOTIFICATION_EVENT","variant":"declaration","kind":16,"type":{"type":"literal","value":10}},{"name":"NOTIFICATION_RINGTONE","variant":"declaration","kind":16,"type":{"type":"literal","value":6}},{"name":"UNKNOWN","variant":"declaration","kind":16,"type":{"type":"literal","value":0}},{"name":"VOICE_COMMUNICATION","variant":"declaration","kind":16,"type":{"type":"literal","value":2}},{"name":"VOICE_COMMUNICATION_SIGNALLING","variant":"declaration","kind":16,"type":{"type":"literal","value":3}}]},{"name":"AndroidImportance","variant":"declaration","kind":8,"children":[{"name":"DEEFAULT","variant":"declaration","kind":16,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use "},{"kind":"code","text":"`DEFAULT`"},{"kind":"text","text":" instead."}]}]},"type":{"type":"literal","value":5}},{"name":"DEFAULT","variant":"declaration","kind":16,"type":{"type":"literal","value":5}},{"name":"HIGH","variant":"declaration","kind":16,"type":{"type":"literal","value":6}},{"name":"LOW","variant":"declaration","kind":16,"type":{"type":"literal","value":4}},{"name":"MAX","variant":"declaration","kind":16,"type":{"type":"literal","value":7}},{"name":"MIN","variant":"declaration","kind":16,"type":{"type":"literal","value":3}},{"name":"NONE","variant":"declaration","kind":16,"type":{"type":"literal","value":2}},{"name":"UNKNOWN","variant":"declaration","kind":16,"type":{"type":"literal","value":0}},{"name":"UNSPECIFIED","variant":"declaration","kind":16,"type":{"type":"literal","value":1}}]},{"name":"AndroidNotificationPriority","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"An enum corresponding to values appropriate for Android's ["},{"kind":"code","text":"`Notification#priority`"},{"kind":"text","text":"](https://developer.android.com/reference/android/app/Notification#priority) field."}]},"children":[{"name":"DEFAULT","variant":"declaration","kind":16,"type":{"type":"literal","value":"default"}},{"name":"HIGH","variant":"declaration","kind":16,"type":{"type":"literal","value":"high"}},{"name":"LOW","variant":"declaration","kind":16,"type":{"type":"literal","value":"low"}},{"name":"MAX","variant":"declaration","kind":16,"type":{"type":"literal","value":"max"}},{"name":"MIN","variant":"declaration","kind":16,"type":{"type":"literal","value":"min"}}]},{"name":"AndroidNotificationVisibility","variant":"declaration","kind":8,"children":[{"name":"PRIVATE","variant":"declaration","kind":16,"type":{"type":"literal","value":2}},{"name":"PUBLIC","variant":"declaration","kind":16,"type":{"type":"literal","value":1}},{"name":"SECRET","variant":"declaration","kind":16,"type":{"type":"literal","value":3}},{"name":"UNKNOWN","variant":"declaration","kind":16,"type":{"type":"literal","value":0}}]},{"name":"IosAlertStyle","variant":"declaration","kind":8,"children":[{"name":"ALERT","variant":"declaration","kind":16,"type":{"type":"literal","value":2}},{"name":"BANNER","variant":"declaration","kind":16,"type":{"type":"literal","value":1}},{"name":"NONE","variant":"declaration","kind":16,"type":{"type":"literal","value":0}}]},{"name":"IosAllowsPreviews","variant":"declaration","kind":8,"children":[{"name":"ALWAYS","variant":"declaration","kind":16,"type":{"type":"literal","value":1}},{"name":"NEVER","variant":"declaration","kind":16,"type":{"type":"literal","value":0}},{"name":"WHEN_AUTHENTICATED","variant":"declaration","kind":16,"type":{"type":"literal","value":2}}]},{"name":"IosAuthorizationStatus","variant":"declaration","kind":8,"children":[{"name":"AUTHORIZED","variant":"declaration","kind":16,"type":{"type":"literal","value":2}},{"name":"DENIED","variant":"declaration","kind":16,"type":{"type":"literal","value":1}},{"name":"EPHEMERAL","variant":"declaration","kind":16,"type":{"type":"literal","value":4}},{"name":"NOT_DETERMINED","variant":"declaration","kind":16,"type":{"type":"literal","value":0}},{"name":"PROVISIONAL","variant":"declaration","kind":16,"type":{"type":"literal","value":3}}]},{"name":"PermissionStatus","variant":"declaration","kind":8,"children":[{"name":"DENIED","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"User has denied the permission."}]},"type":{"type":"literal","value":"denied"}},{"name":"GRANTED","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"User has granted the permission."}]},"type":{"type":"literal","value":"granted"}},{"name":"UNDETERMINED","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"User hasn't granted or denied the permission yet."}]},"type":{"type":"literal","value":"undetermined"}}]},{"name":"AudioAttributes","variant":"declaration","kind":256,"children":[{"name":"contentType","variant":"declaration","kind":1024,"type":{"type":"reference","name":"AndroidAudioContentType","package":"expo-notifications"}},{"name":"flags","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"enforceAudibility","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"requestHardwareAudioVideoSynchronization","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"usage","variant":"declaration","kind":1024,"type":{"type":"reference","name":"AndroidAudioUsage","package":"expo-notifications"}}]},{"name":"BeaconRegion","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A region used to detect the presence of iBeacon devices. Based on Core Location ["},{"kind":"code","text":"`CLBeaconRegion`"},{"kind":"text","text":"](https://developer.apple.com/documentation/corelocation/clbeaconregion) class."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"children":[{"name":"beaconIdentityConstraint","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The beacon identity constraint that defines the beacon region."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"major","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"name":"minor","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"name":"uuid","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"identifier","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The identifier for the region object."}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Region.identifier"}},{"name":"major","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The major value from the beacon identity constraint that defines the beacon region."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"name":"minor","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The minor value from the beacon identity constraint that defines the beacon region."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"name":"notifyEntryStateOnDisplay","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A Boolean value that indicates whether Core Location sends beacon notifications when the deviceâ€™s display is on."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"notifyOnEntry","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A Boolean indicating that notifications are generated upon entry into the region."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Region.notifyOnEntry"}},{"name":"notifyOnExit","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A Boolean indicating that notifications are generated upon exit from the region."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Region.notifyOnExit"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"beacon"},"overwrites":{"type":"reference","name":"Region.type"}},{"name":"uuid","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The UUID value from the beacon identity constraint that defines the beacon region."}]},"type":{"type":"intrinsic","name":"string"}}],"extendedTypes":[{"type":"reference","name":"Region","package":"expo-notifications"}]},{"name":"CalendarNotificationTrigger","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger related to a ["},{"kind":"code","text":"`UNCalendarNotificationTrigger`"},{"kind":"text","text":"](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc)."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"children":[{"name":"dateComponents","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"calendar","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"day","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"era","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"hour","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"isLeapMonth","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"minute","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"month","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"nanosecond","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"quarter","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"second","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"timeZone","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"weekOfMonth","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"weekOfYear","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"weekday","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"weekdayOrdinal","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"year","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"yearForWeekOfYear","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"repeats","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"calendar"}}]},{"name":"CircularRegion","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A circular geographic region, specified as a center point and radius. Based on Core Location ["},{"kind":"code","text":"`CLCircularRegion`"},{"kind":"text","text":"](https://developer.apple.com/documentation/corelocation/clcircularregion) class."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"children":[{"name":"center","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The center point of the geographic area."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"latitude","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"longitude","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"identifier","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The identifier for the region object."}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Region.identifier"}},{"name":"notifyOnEntry","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A Boolean indicating that notifications are generated upon entry into the region."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Region.notifyOnEntry"}},{"name":"notifyOnExit","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A Boolean indicating that notifications are generated upon exit from the region."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Region.notifyOnExit"}},{"name":"radius","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The radius (measured in meters) that defines the geographic areaâ€™s outer boundary."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"circular"},"overwrites":{"type":"reference","name":"Region.type"}}],"extendedTypes":[{"type":"reference","name":"Region","package":"expo-notifications"}]},{"name":"DailyNotificationTrigger","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger related to a daily notification.\n> The same functionality will be achieved on iOS with a "},{"kind":"code","text":"`CalendarNotificationTrigger`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"children":[{"name":"hour","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"minute","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"daily"}}]},{"name":"DailyTriggerInput","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger that will cause the notification to be delivered once per day."}]},"children":[{"name":"channelId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"hour","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"minute","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"repeats","variant":"declaration","kind":1024,"type":{"type":"literal","value":true}}]},{"name":"ExpoPushToken","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Borrowing structure from "},{"kind":"code","text":"`DevicePushToken`"},{"kind":"text","text":" a little. You can use the "},{"kind":"code","text":"`data`"},{"kind":"text","text":" value to send notifications via Expo Notifications service."}]},"children":[{"name":"data","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The acquired push token."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"type","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Always set to "},{"kind":"code","text":"`\"expo\"`"},{"kind":"text","text":"."}]},"type":{"type":"literal","value":"expo"}}]},{"name":"ExpoPushTokenOptions","variant":"declaration","kind":256,"children":[{"name":"applicationId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ID of the application to which the token should be attributed.\nDefaults to ["},{"kind":"code","text":"`Application.applicationId`"},{"kind":"text","text":"](./application/#applicationapplicationid) exposed by "},{"kind":"code","text":"`expo-application`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"baseUrl","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Endpoint URL override."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"development","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Makes sense only on iOS, where there are two push notification services: \"sandbox\" and \"production\".\nThis defines whether the push token is supposed to be used with the sandbox platform notification service.\nDefaults to ["},{"kind":"code","text":"`Application.getIosPushNotificationServiceEnvironmentAsync()`"},{"kind":"text","text":"](./application/#applicationgetiospushnotificationserviceenvironmentasync)\nexposed by "},{"kind":"code","text":"`expo-application`"},{"kind":"text","text":" or "},{"kind":"code","text":"`false`"},{"kind":"text","text":". Most probably you won't need to customize that.\nYou may want to customize that if you don't want to install "},{"kind":"code","text":"`expo-application`"},{"kind":"text","text":" and still use the sandbox APNs."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"deviceId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"devicePushToken","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The device push token with which to register at the backend.\nDefaults to a token fetched with ["},{"kind":"code","text":"`getDevicePushTokenAsync()`"},{"kind":"text","text":"](#getdevicepushtokenasync)."}]},"type":{"type":"reference","name":"DevicePushToken","package":"expo-notifications"}},{"name":"projectId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ID of the project to which the token should be attributed.\nDefaults to ["},{"kind":"code","text":"`Constants.expoConfig.extra.eas.projectId`"},{"kind":"text","text":"](./constants/#easconfig) exposed by "},{"kind":"code","text":"`expo-constants`"},{"kind":"text","text":".\n\nWhen using EAS Build, this value is automatically set. However, it is\n**recommended** to set it manually. Once you have EAS Build configured, you can find\nthe value in **app.json** under "},{"kind":"code","text":"`extra.eas.projectId`"},{"kind":"text","text":". You can copy and paste it into your code.\nIf you are not using EAS Build, it will fallback to ["},{"kind":"code","text":"`Constants.expoConfig?.extra?.eas?.projectId`"},{"kind":"text","text":"](./constants/#manifest)."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"type","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Request body override."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"url","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Request URL override."}]},"type":{"type":"intrinsic","name":"string"}}]},{"name":"FirebaseRemoteMessage","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A Firebase "},{"kind":"code","text":"`RemoteMessage`"},{"kind":"text","text":" that caused the notification to be delivered to the app."}]},"children":[{"name":"collapseKey","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"data","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"indexSignature":{"name":"__index","variant":"signature","kind":8192,"parameters":[{"name":"key","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}}}},{"name":"from","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"messageId","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"messageType","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"notification","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"FirebaseRemoteMessageNotification","package":"expo-notifications"}]}},{"name":"originalPriority","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"priority","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"sentTime","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"to","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"ttl","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]},{"name":"FirebaseRemoteMessageNotification","variant":"declaration","kind":256,"children":[{"name":"body","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"bodyLocalizationArgs","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"name":"bodyLocalizationKey","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"channelId","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"clickAction","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"color","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"eventTime","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"name":"icon","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"imageUrl","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"lightSettings","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"intrinsic","name":"number"}}]}},{"name":"link","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"localOnly","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"notificationCount","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"name":"notificationPriority","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}},{"name":"sound","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"sticky","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"tag","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"ticker","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"title","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"titleLocalizationArgs","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"name":"titleLocalizationKey","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"usesDefaultLightSettings","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"usesDefaultSound","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"usesDefaultVibrateSettings","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"vibrateTimings","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"intrinsic","name":"number"}}]}},{"name":"visibility","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]}}]},{"name":"IosNotificationPermissionsRequest","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Available configuration for permission request on iOS platform.\nSee Apple documentation for ["},{"kind":"code","text":"`UNAuthorizationOptions`"},{"kind":"text","text":"](https://developer.apple.com/documentation/usernotifications/unauthorizationoptions) to learn more."}]},"children":[{"name":"allowAlert","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ability to display alerts."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"allowAnnouncements","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ability for Siri to automatically read out messages over AirPods."}],"blockTags":[{"tag":"@deprecated","content":[]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"allowBadge","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ability to update the appâ€™s badge."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"allowCriticalAlerts","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ability to play sounds for critical alerts."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"allowDisplayInCarPlay","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ability to display notifications in a CarPlay environment."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"allowProvisional","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ability to post noninterrupting notifications provisionally to the Notification Center."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"allowSound","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The ability to play sounds."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"provideAppNotificationSettings","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An option indicating the system should display a button for in-app notification settings."}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"LocationNotificationTrigger","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger related to a ["},{"kind":"code","text":"`UNLocationNotificationTrigger`"},{"kind":"text","text":"](https://developer.apple.com/documentation/usernotifications/unlocationnotificationtrigger?language=objc)."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"children":[{"name":"region","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"reference","name":"CircularRegion","package":"expo-notifications"},{"type":"reference","name":"BeaconRegion","package":"expo-notifications"}]}},{"name":"repeats","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"location"}}]},{"name":"NativeDevicePushToken","variant":"declaration","kind":256,"children":[{"name":"data","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":"ios"},{"type":"literal","value":"android"}]}}]},{"name":"Notification","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object represents a single notification that has been triggered by some request (["},{"kind":"code","text":"`NotificationRequest`"},{"kind":"text","text":"](#notificationrequest)) at some point in time."}]},"children":[{"name":"date","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"request","variant":"declaration","kind":1024,"type":{"type":"reference","name":"NotificationRequest","package":"expo-notifications"}}]},{"name":"NotificationAction","variant":"declaration","kind":256,"children":[{"name":"buttonTitle","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The title of the button triggering this action."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"identifier","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A unique string that identifies this action. If a user takes this action (for example, selects this button in the system's Notification UI),\nyour app will receive this "},{"kind":"code","text":"`actionIdentifier`"},{"kind":"text","text":" via the ["},{"kind":"code","text":"`NotificationResponseReceivedListener`"},{"kind":"text","text":"](#addnotificationresponsereceivedlistenerlistener)."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Object representing the additional configuration options."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isAuthenticationRequired","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Boolean indicating whether triggering the action will require authentication from the user."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isDestructive","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Boolean indicating whether the button title will be highlighted a different color (usually red).\nThis usually signifies a destructive action such as deleting data."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"opensAppToForeground","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Boolean indicating whether triggering this action foregrounds the app.\nIf "},{"kind":"code","text":"`false`"},{"kind":"text","text":" and your app is killed (not just backgrounded), ["},{"kind":"code","text":"`NotificationResponseReceived`"},{"kind":"text","text":" listeners](#addnotificationresponsereceivedlistenerlistener)\nwill not be triggered when a user selects this action."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"true"}]}]},"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"textInput","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Object which, if provided, will result in a button that prompts the user for a text response."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"placeholder","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A string that serves as a placeholder until the user begins typing. Defaults to no placeholder string."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"submitButtonTitle","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A string which will be used as the title for the button used for submitting the text response."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"string"}}]}}}]},{"name":"NotificationBehavior","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object represents behavior that should be applied to the incoming notification.\n> On Android, setting "},{"kind":"code","text":"`shouldPlaySound: false`"},{"kind":"text","text":" will result in the drop-down notification alert **not** showing, no matter what the priority is.\n> This setting will also override any channel-specific sounds you may have configured."}]},"children":[{"name":"priority","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"AndroidNotificationPriority","package":"expo-notifications"}},{"name":"shouldPlaySound","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"shouldSetBadge","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"shouldShowAlert","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"NotificationCategory","variant":"declaration","kind":256,"children":[{"name":"actions","variant":"declaration","kind":1024,"type":{"type":"array","elementType":{"type":"reference","name":"NotificationAction","package":"expo-notifications"}}},{"name":"identifier","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"NotificationCategoryOptions","package":"expo-notifications"}}]},{"name":"NotificationChannel","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object represents a notification channel."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"children":[{"name":"audioAttributes","variant":"declaration","kind":1024,"type":{"type":"reference","name":"AudioAttributes","package":"expo-notifications"}},{"name":"bypassDnd","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"description","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"enableLights","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"enableVibrate","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"groupId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"id","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"importance","variant":"declaration","kind":1024,"type":{"type":"reference","name":"AndroidImportance","package":"expo-notifications"}},{"name":"lightColor","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"lockscreenVisibility","variant":"declaration","kind":1024,"type":{"type":"reference","name":"AndroidNotificationVisibility","package":"expo-notifications"}},{"name":"name","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"showBadge","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"sound","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"literal","value":"default"},{"type":"literal","value":"custom"}]}},{"name":"vibrationPattern","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"intrinsic","name":"number"}}]}}]},{"name":"NotificationChannelGroup","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object represents a notification channel group."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"children":[{"name":"channels","variant":"declaration","kind":1024,"type":{"type":"array","elementType":{"type":"reference","name":"NotificationChannel","package":"expo-notifications"}}},{"name":"description","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"id","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"isBlocked","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}},{"name":"name","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}]},{"name":"NotificationChannelGroupInput","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object represents a notification channel group to be set."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"children":[{"name":"description","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"name","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}]},{"name":"NotificationChannelGroupManager","variant":"declaration","kind":256,"children":[{"name":"addListener","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ProxyNativeModule.addListener"}},{"name":"deleteNotificationChannelGroupAsync","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"groupId","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}},{"name":"getNotificationChannelGroupAsync","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"groupId","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"NotificationChannelGroup","package":"expo-notifications"}]}],"name":"Promise","package":"typescript"}}]}}},{"name":"getNotificationChannelGroupsAsync","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"NotificationChannelGroup","package":"expo-notifications"}}],"name":"Promise","package":"typescript"}}]}}},{"name":"removeListeners","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"count","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ProxyNativeModule.removeListeners"}},{"name":"setNotificationChannelGroupAsync","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"groupId","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"group","variant":"param","kind":32768,"type":{"type":"reference","name":"NotificationChannelGroupInput","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"NotificationChannelGroup","package":"expo-notifications"}]}],"name":"Promise","package":"typescript"}}]}}}],"extendedTypes":[{"type":"reference","name":"ProxyNativeModule","package":"expo-modules-core"}]},{"name":"NotificationChannelManager","variant":"declaration","kind":256,"children":[{"name":"addListener","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ProxyNativeModule.addListener"}},{"name":"deleteNotificationChannelAsync","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"channelId","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}},{"name":"getNotificationChannelAsync","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"channelId","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"NotificationChannel","package":"expo-notifications"}]}],"name":"Promise","package":"typescript"}}]}}},{"name":"getNotificationChannelsAsync","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"array","elementType":{"type":"reference","name":"NotificationChannel","package":"expo-notifications"}}]}],"name":"Promise","package":"typescript"}}]}}},{"name":"removeListeners","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"count","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"ProxyNativeModule.removeListeners"}},{"name":"setNotificationChannelAsync","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"channelId","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"channelConfiguration","variant":"param","kind":32768,"type":{"type":"reference","name":"NotificationChannelInput","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"NotificationChannel","package":"expo-notifications"}]}],"name":"Promise","package":"typescript"}}]}}}],"extendedTypes":[{"type":"reference","name":"ProxyNativeModule","package":"expo-modules-core"}]},{"name":"NotificationHandler","variant":"declaration","kind":256,"children":[{"name":"handleError","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A function called whenever handling of an incoming notification fails."}]},"parameters":[{"name":"notificationId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Identifier of the notification."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"error","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An error which occurred in form of "},{"kind":"code","text":"`NotificationHandlingError`"},{"kind":"text","text":" object."}]},"type":{"type":"reference","name":"NotificationHandlingError","package":"expo-notifications"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"handleNotification","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A function accepting an incoming notification returning a "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" resolving to a behavior (["},{"kind":"code","text":"`NotificationBehavior`"},{"kind":"text","text":"](#notificationbehavior))\napplicable to the notification"}]},"parameters":[{"name":"notification","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An object representing the notification."}]},"type":{"type":"reference","name":"Notification","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"NotificationBehavior","package":"expo-notifications"}],"name":"Promise","package":"typescript"}}]}}},{"name":"handleSuccess","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A function called whenever an incoming notification is handled successfully."}]},"parameters":[{"name":"notificationId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Identifier of the notification."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}}}]},{"name":"NotificationPermissionsRequest","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An interface representing the permissions request scope configuration.\nEach option corresponds to a different native platform authorization option."}]},"children":[{"name":"android","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"On Android, all available permissions are granted by default, and if a user declines any permission, an app cannot prompt the user to change."}]},"type":{"type":"intrinsic","name":"object"}},{"name":"ios","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Available configuration for permission request on iOS platform."}]},"type":{"type":"reference","name":"IosNotificationPermissionsRequest","package":"expo-notifications"}}]},{"name":"NotificationPermissionsStatus","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object obtained by permissions get and request functions."}]},"children":[{"name":"android","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"importance","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"interruptionFilter","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"canAskAgain","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Indicates if user can be asked again for specific permission.\nIf not, one should be directed to the Settings app\nin order to enable/disable the permission."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"PermissionResponse.canAskAgain"}},{"name":"expires","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines time when the permission expires."}]},"type":{"type":"reference","name":"PermissionExpiration","package":"expo-modules-core"},"inheritedFrom":{"type":"reference","name":"PermissionResponse.expires"}},{"name":"granted","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A convenience boolean that indicates if the permission is granted."}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"PermissionResponse.granted"}},{"name":"ios","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"alertStyle","variant":"declaration","kind":1024,"type":{"type":"reference","name":"IosAlertStyle","package":"expo-notifications"}},{"name":"allowsAlert","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"allowsAnnouncements","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"allowsBadge","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"allowsCriticalAlerts","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"allowsDisplayInCarPlay","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"allowsDisplayInNotificationCenter","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"allowsDisplayOnLockScreen","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"allowsPreviews","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"IosAllowsPreviews","package":"expo-notifications"}},{"name":"allowsSound","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"providesAppNotificationSettings","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}},{"name":"status","variant":"declaration","kind":1024,"type":{"type":"reference","name":"IosAuthorizationStatus","package":"expo-notifications"}}]}}},{"name":"status","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines the status of the permission."}]},"type":{"type":"reference","name":"PermissionStatus","package":"expo-modules-core"},"inheritedFrom":{"type":"reference","name":"PermissionResponse.status"}}],"extendedTypes":[{"type":"reference","name":"PermissionResponse","package":"expo-modules-core"}]},{"name":"NotificationRequest","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object represents a request to present a notification. It has content â€” how it's being represented, and a trigger â€” what triggers the notification.\nMany notifications (["},{"kind":"code","text":"`Notification`"},{"kind":"text","text":"](#notification)) may be triggered with the same request (for example, a repeating notification)."}]},"children":[{"name":"content","variant":"declaration","kind":1024,"type":{"type":"reference","name":"NotificationContent","package":"expo-notifications"}},{"name":"identifier","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"trigger","variant":"declaration","kind":1024,"type":{"type":"reference","name":"NotificationTrigger","package":"expo-notifications"}}]},{"name":"NotificationRequestInput","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object represents a notification request you can pass into "},{"kind":"code","text":"`scheduleNotificationAsync`"},{"kind":"text","text":"."}]},"children":[{"name":"content","variant":"declaration","kind":1024,"type":{"type":"reference","name":"NotificationContentInput","package":"expo-notifications"}},{"name":"identifier","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"trigger","variant":"declaration","kind":1024,"type":{"type":"reference","name":"NotificationTriggerInput","package":"expo-notifications"}}]},{"name":"NotificationResponse","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object represents user's interaction with the notification.\n> **Note:** If the user taps on a notification "},{"kind":"code","text":"`actionIdentifier`"},{"kind":"text","text":" will be equal to ["},{"kind":"code","text":"`Notifications.DEFAULT_ACTION_IDENTIFIER`"},{"kind":"text","text":"](#notificationsdefault_action_identifier)."}]},"children":[{"name":"actionIdentifier","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"notification","variant":"declaration","kind":1024,"type":{"type":"reference","name":"Notification","package":"expo-notifications"}},{"name":"userText","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}]},{"name":"PermissionResponse","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"An object obtained by permissions get and request functions."}]},"children":[{"name":"canAskAgain","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Indicates if user can be asked again for specific permission.\nIf not, one should be directed to the Settings app\nin order to enable/disable the permission."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"expires","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines time when the permission expires."}]},"type":{"type":"reference","name":"PermissionExpiration","package":"expo-modules-core"}},{"name":"granted","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A convenience boolean that indicates if the permission is granted."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"status","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Determines the status of the permission."}]},"type":{"type":"reference","name":"PermissionStatus","package":"expo-modules-core"}}],"extendedBy":[{"type":"reference","name":"NotificationPermissionsStatus"}]},{"name":"TimeIntervalNotificationTrigger","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger related to an elapsed time interval. May be repeating (see "},{"kind":"code","text":"`repeats`"},{"kind":"text","text":" field)."}]},"children":[{"name":"repeats","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"seconds","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"timeInterval"}}]},{"name":"TimeIntervalTriggerInput","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger that will cause the notification to be delivered once or many times (depends on the "},{"kind":"code","text":"`repeats`"},{"kind":"text","text":" field) after "},{"kind":"code","text":"`seconds`"},{"kind":"text","text":" time elapse.\n> **On iOS**, when "},{"kind":"code","text":"`repeats`"},{"kind":"text","text":" is "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the time interval must be 60 seconds or greater. Otherwise, the notification won't be triggered."}]},"children":[{"name":"channelId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"repeats","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}},{"name":"seconds","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]},{"name":"UnknownNotificationTrigger","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Represents a notification trigger that is unknown to "},{"kind":"code","text":"`expo-notifications`"},{"kind":"text","text":" and that it didn't know how to serialize for JS."}]},"children":[{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"unknown"}}]},{"name":"WebDevicePushToken","variant":"declaration","kind":256,"children":[{"name":"data","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"endpoint","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"keys","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"auth","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"p256dh","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}}]}}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"web"}}]},{"name":"WeeklyNotificationTrigger","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger related to a weekly notification.\n> The same functionality will be achieved on iOS with a "},{"kind":"code","text":"`CalendarNotificationTrigger`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"children":[{"name":"hour","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"minute","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"weekly"}},{"name":"weekday","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]},{"name":"WeeklyTriggerInput","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger that will cause the notification to be delivered once every week.\n> **Note:** Weekdays are specified with a number from "},{"kind":"code","text":"`1`"},{"kind":"text","text":" through "},{"kind":"code","text":"`7`"},{"kind":"text","text":", with "},{"kind":"code","text":"`1`"},{"kind":"text","text":" indicating Sunday."}]},"children":[{"name":"channelId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"hour","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"minute","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"repeats","variant":"declaration","kind":1024,"type":{"type":"literal","value":true}},{"name":"weekday","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]},{"name":"YearlyNotificationTrigger","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger related to a yearly notification.\n> The same functionality will be achieved on iOS with a "},{"kind":"code","text":"`CalendarNotificationTrigger`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"children":[{"name":"day","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"hour","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"minute","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"month","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"yearly"}}]},{"name":"YearlyTriggerInput","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A trigger that will cause the notification to be delivered once every year.\n> **Note:** all properties are specified in JavaScript Date's ranges."}]},"children":[{"name":"channelId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"day","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"hour","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"minute","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"month","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"repeats","variant":"declaration","kind":1024,"type":{"type":"literal","value":true}}]},{"name":"AudioAttributesInput","variant":"declaration","kind":4194304,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"AudioAttributes","package":"expo-notifications"}],"name":"Partial","package":"typescript"}},{"name":"CalendarTriggerInput","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"A trigger that will cause the notification to be delivered once or many times when the date components match the specified values.\nCorresponds to native ["},{"kind":"code","text":"`UNCalendarNotificationTrigger`"},{"kind":"text","text":"](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc)."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intersection","types":[{"type":"indexedAccess","indexType":{"type":"literal","value":"value"},"objectType":{"type":"reference","name":"NativeCalendarTriggerInput","package":"expo-notifications","qualifiedName":"CalendarTriggerInput"}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"channelId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"repeats","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}}]}}]}},{"name":"ChannelAwareTriggerInput","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"A trigger that will cause the notification to be delivered immediately."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"channelId","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"DateTriggerInput","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"A trigger that will cause the notification to be delivered once at the specified "},{"kind":"code","text":"`Date`"},{"kind":"text","text":".\nIf you pass in a "},{"kind":"code","text":"`number`"},{"kind":"text","text":" it will be interpreted as a Unix timestamp."}]},"type":{"type":"union","types":[{"type":"reference","name":"Date","package":"typescript"},{"type":"intrinsic","name":"number"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"channelId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"date","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"reference","name":"Date","package":"typescript"},{"type":"intrinsic","name":"number"}]}}]}}]}},{"name":"DevicePushToken","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"In simple terms, an object of "},{"kind":"code","text":"`type: Platform.OS`"},{"kind":"text","text":" and "},{"kind":"code","text":"`data: any`"},{"kind":"text","text":". The "},{"kind":"code","text":"`data`"},{"kind":"text","text":" type depends on the environment - on a native device it will be a string,\nwhich you can then use to send notifications via Firebase Cloud Messaging (Android) or APNs (iOS); on web it will be a registration object (VAPID)."}]},"type":{"type":"union","types":[{"type":"reference","name":"ExplicitlySupportedDevicePushToken","package":"expo-notifications"},{"type":"reference","name":"ImplicitlySupportedDevicePushToken","package":"expo-notifications"}]}},{"name":"NativeNotificationPermissionsRequest","variant":"declaration","kind":4194304,"type":{"type":"union","types":[{"type":"reference","name":"IosNotificationPermissionsRequest","package":"expo-notifications"},{"type":"intrinsic","name":"object"}]}},{"name":"NotificationCategoryOptions","variant":"declaration","kind":4194304,"comment":{"summary":[],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"allowAnnouncement","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A boolean indicating whether to allow notifications to be automatically read by Siri when the user is using AirPods."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"allowInCarPlay","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A boolean indicating whether to allow CarPlay to display notifications of this type. **Apps must be approved for CarPlay to make use of this feature.**"}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"categorySummaryFormat","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A format string for the summary description used when the system groups the categoryâ€™s notifications."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"customDismissAction","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A boolean indicating whether to send actions for handling when the notification is dismissed (the user must explicitly dismiss\nthe notification interface - ignoring a notification or flicking away a notification banner does not trigger this action)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"intentIdentifiers","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Array of [Intent Class Identifiers](https://developer.apple.com/documentation/sirikit/intent_class_identifiers). When a notification is delivered,\nthe presence of an intent identifier lets the system know that the notification is potentially related to the handling of a request made through Siri."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"[]"}]}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"name":"previewPlaceholder","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Customizable placeholder for the notification preview text. This is shown if the user has disabled notification previews for the app.\nDefaults to the localized iOS system default placeholder ("},{"kind":"code","text":"`Notification`"},{"kind":"text","text":")."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"showSubtitle","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A boolean indicating whether to show the notification's subtitle, even if the user has disabled notification previews for the app."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"showTitle","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A boolean indicating whether to show the notification's title, even if the user has disabled notification previews for the app."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"NotificationChannelInput","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"An object represents a notification channel to be set."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"NotificationChannel","package":"expo-notifications"},{"type":"union","types":[{"type":"literal","value":"id"},{"type":"literal","value":"audioAttributes"},{"type":"literal","value":"sound"}]}],"name":"Omit","package":"typescript"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"audioAttributes","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"AudioAttributesInput","package":"expo-notifications"}},{"name":"sound","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}}]},{"type":"union","types":[{"type":"literal","value":"name"},{"type":"literal","value":"importance"}]}],"name":"RequiredBy","package":"expo-notifications"}},{"name":"NotificationContent","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"An object represents notification's content."}]},"type":{"type":"intersection","types":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"body","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Notification body - the main content of the notification."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"data","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Data associated with the notification, not displayed"}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript"}},{"name":"sound","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"defaultCritical"},{"type":"literal","value":"custom"},{"type":"literal","value":null}]}},{"name":"subtitle","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"On Android: "},{"kind":"code","text":"`subText`"},{"kind":"text","text":" - the display depends on the device.\n\nOn iOS: "},{"kind":"code","text":"`subtitle`"},{"kind":"text","text":" - the bold text displayed between title and the rest of the content."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"title","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Notification title - the bold text displayed above the rest of the content."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}},{"type":"union","types":[{"type":"reference","name":"NotificationContentIos","package":"expo-notifications"},{"type":"reference","name":"NotificationContentAndroid","package":"expo-notifications"}]}]}},{"name":"NotificationContentAndroid","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"See [Android developer documentation](https://developer.android.com/reference/android/app/Notification#fields) for more information on specific fields."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"badge","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Application badge number associated with the notification."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"color","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Accent color (in "},{"kind":"code","text":"`#AARRGGBB`"},{"kind":"text","text":" or "},{"kind":"code","text":"`#RRGGBB`"},{"kind":"text","text":" format) to be applied by the standard Style templates when presenting this notification."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"priority","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification.\nLow-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification.\nThe system will make a determination about how to interpret this priority when presenting the notification."}]},"type":{"type":"reference","name":"AndroidNotificationPriority","package":"expo-notifications"}},{"name":"vibrationPattern","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The pattern with which to vibrate."}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"number"}}}]}}},{"name":"NotificationContentAttachmentIos","variant":"declaration","kind":4194304,"comment":{"summary":[],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"hideThumbnail","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}},{"name":"identifier","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"thumbnailClipArea","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"height","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"width","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"x","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"y","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"thumbnailTime","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"typeHint","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"url","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}}},{"name":"NotificationContentInput","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"An object represents notification content that you pass in to "},{"kind":"code","text":"`presentNotificationAsync`"},{"kind":"text","text":" or as a part of "},{"kind":"code","text":"`NotificationRequestInput`"},{"kind":"text","text":"."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"attachments","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The visual and audio attachments to display alongside the notificationâ€™s main content."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"array","elementType":{"type":"reference","name":"NotificationContentAttachmentIos","package":"expo-notifications"}}},{"name":"autoDismiss","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If set to "},{"kind":"code","text":"`true`"},{"kind":"text","text":", the notification cannot be dismissed by swipe. This setting defaults\nto "},{"kind":"code","text":"`false`"},{"kind":"text","text":" if not provided or is invalid. Corresponds directly do Android's "},{"kind":"code","text":"`isOngoing`"},{"kind":"text","text":" behavior.\nSee [Android developer documentation](https://developer.android.com/reference/android/app/Notification.Builder#setOngoing(boolean))\nfor more details."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"badge","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Application badge number associated with the notification."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"body","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The main content of the notification."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"categoryIdentifier","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The identifier of the notificationâ€™s category."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"color","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Accent color (in "},{"kind":"code","text":"`#AARRGGBB`"},{"kind":"text","text":" or "},{"kind":"code","text":"`#RRGGBB`"},{"kind":"text","text":" format) to be applied by the standard Style templates when presenting this notification."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"data","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Data associated with the notification, not displayed."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript"}},{"name":"launchImageName","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The name of the image or storyboard to use when your app launches because of the notification."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"priority","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Relative priority for this notification. Priority is an indication of how much of the user's valuable attention should be consumed by this notification.\nLow-priority notifications may be hidden from the user in certain situations, while the user might be interrupted for a higher-priority notification.\nThe system will make a determination about how to interpret this priority when presenting the notification."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"sound","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"boolean"},{"type":"intrinsic","name":"string"}]}},{"name":"sticky","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If set to "},{"kind":"code","text":"`false`"},{"kind":"text","text":", the notification will not be automatically dismissed when clicked.\nthe setting used when the value is not provided or is invalid is "},{"kind":"code","text":"`true`"},{"kind":"text","text":" (the notification\nwill be dismissed automatically). Corresponds directly to Android's "},{"kind":"code","text":"`setAutoCancel`"},{"kind":"text","text":"\nbehavior. In Firebase terms this property of a notification is called "},{"kind":"code","text":"`sticky`"},{"kind":"text","text":".\n\nSee [Android developer documentation](https://developer.android.com/reference/android/app/Notification.Builder#setAutoCancel(boolean))\nand [Firebase documentation](https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#AndroidNotification.FIELDS.sticky)\nfor more details."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"subtitle","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"On Android: "},{"kind":"code","text":"`subText`"},{"kind":"text","text":" - the display depends on the device.\n\nOn iOS: "},{"kind":"code","text":"`subtitle`"},{"kind":"text","text":" - the bold text displayed between title and the rest of the content."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"title","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Notification title - the bold text displayed above the rest of the content."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"vibrate","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The pattern with which to vibrate."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"number"}}}]}}},{"name":"NotificationContentIos","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"See [Apple documentation](https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc) for more information on specific fields."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"attachments","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The visual and audio attachments to display alongside the notificationâ€™s main content."}]},"type":{"type":"array","elementType":{"type":"reference","name":"NotificationContentAttachmentIos","package":"expo-notifications"}}},{"name":"badge","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The number that your appâ€™s icon displays."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"name":"categoryIdentifier","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The identifier of the notificationâ€™s category."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"launchImageName","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The name of the image or storyboard to use when your app launches because of the notification."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"summaryArgument","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The text the system adds to the notification summary to provide additional context."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"summaryArgumentCount","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The number the system adds to the notification summary when the notification represents multiple items."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"targetContentIdentifier","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The value your app uses to determine which scene to display to handle the notification."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"threadIdentifier","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The identifier that groups related notifications."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]}}},{"name":"NotificationHandlingError","variant":"declaration","kind":4194304,"type":{"type":"union","types":[{"type":"reference","name":"NotificationTimeoutError","package":"expo-notifications"},{"type":"reference","name":"Error","package":"typescript"}]}},{"name":"NotificationTrigger","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"A union type containing different triggers which may cause the notification to be delivered to the application."}]},"type":{"type":"union","types":[{"type":"reference","name":"PushNotificationTrigger","package":"expo-notifications"},{"type":"reference","name":"CalendarNotificationTrigger","package":"expo-notifications"},{"type":"reference","name":"LocationNotificationTrigger","package":"expo-notifications"},{"type":"reference","name":"TimeIntervalNotificationTrigger","package":"expo-notifications"},{"type":"reference","name":"DailyNotificationTrigger","package":"expo-notifications"},{"type":"reference","name":"WeeklyNotificationTrigger","package":"expo-notifications"},{"type":"reference","name":"YearlyNotificationTrigger","package":"expo-notifications"},{"type":"reference","name":"UnknownNotificationTrigger","package":"expo-notifications"}]}},{"name":"NotificationTriggerInput","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"A type represents possible triggers with which you can schedule notifications.\nA "},{"kind":"code","text":"`null`"},{"kind":"text","text":" trigger means that the notification should be scheduled for delivery immediately."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"ChannelAwareTriggerInput","package":"expo-notifications"},{"type":"reference","name":"SchedulableNotificationTriggerInput","package":"expo-notifications"}]}},{"name":"PermissionExpiration","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"Permission expiration time. Currently, all permissions are granted permanently."}]},"type":{"type":"union","types":[{"type":"literal","value":"never"},{"type":"intrinsic","name":"number"}]}},{"name":"PermissionHookOptions","variant":"declaration","kind":4194304,"typeParameters":[{"name":"Options","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"object"}}],"type":{"type":"intersection","types":[{"type":"reference","name":"PermissionHookBehavior","package":"expo-modules-core"},{"type":"reference","name":"Options","refersToTypeParameter":true}]}},{"name":"PushNotificationTrigger","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"An object represents a notification delivered by a push notification system.\n\nOn Android under "},{"kind":"code","text":"`remoteMessage`"},{"kind":"text","text":" field a JS version of the Firebase "},{"kind":"code","text":"`RemoteMessage`"},{"kind":"text","text":" may be accessed.\nOn iOS under "},{"kind":"code","text":"`payload`"},{"kind":"text","text":" you may find full contents of ["},{"kind":"code","text":"`UNNotificationContent`"},{"kind":"text","text":"'s](https://developer.apple.com/documentation/usernotifications/unnotificationcontent?language=objc) ["},{"kind":"code","text":"`userInfo`"},{"kind":"text","text":"](https://developer.apple.com/documentation/usernotifications/unnotificationcontent/1649869-userinfo?language=objc), for example [remote notification payload](https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html)\nOn web there is no extra data."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"payload","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"unknown"}],"name":"Record","package":"typescript"}},{"name":"remoteMessage","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"reference","name":"FirebaseRemoteMessage","package":"expo-notifications"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"literal","value":"push"}}]}}},{"name":"PushTokenListener","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A function accepting a device push token (["},{"kind":"code","text":"`DevicePushToken`"},{"kind":"text","text":"](#devicepushtoken)) as an argument.\n> **Note:** You should not call "},{"kind":"code","text":"`getDevicePushTokenAsync`"},{"kind":"text","text":" inside this function, as it triggers the listener and may lead to an infinite loop."}],"blockTags":[{"tag":"@header","content":[{"kind":"text","text":"fetch"}]}]},"parameters":[{"name":"token","variant":"param","kind":32768,"type":{"type":"reference","name":"DevicePushToken","package":"expo-notifications"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"SchedulableNotificationTriggerInput","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"A type represents time-based, schedulable triggers. For these triggers you can check the next trigger date\nwith ["},{"kind":"code","text":"`getNextTriggerDateAsync`"},{"kind":"text","text":"](#notificationsgetnexttriggerdateasynctrigger)."}]},"type":{"type":"union","types":[{"type":"reference","name":"DateTriggerInput","package":"expo-notifications"},{"type":"reference","name":"TimeIntervalTriggerInput","package":"expo-notifications"},{"type":"reference","name":"DailyTriggerInput","package":"expo-notifications"},{"type":"reference","name":"WeeklyTriggerInput","package":"expo-notifications"},{"type":"reference","name":"YearlyTriggerInput","package":"expo-notifications"},{"type":"reference","name":"CalendarTriggerInput","package":"expo-notifications"}]}},{"name":"Subscription","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"remove","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A method to unsubscribe the listener."}]},"type":{"type":"intrinsic","name":"void"}}]}}}]}}},{"name":"DEFAULT_ACTION_IDENTIFIER","variant":"declaration","kind":32,"flags":{"isConst":true},"type":{"type":"literal","value":"expo.modules.notifications.actions.DEFAULT"},"defaultValue":"'expo.modules.notifications.actions.DEFAULT'"},{"name":"addNotificationReceivedListener","variant":"declaration","kind":64,"signatures":[{"name":"addNotificationReceivedListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Listeners registered by this method will be called whenever a notification is received while the app is running."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A ["},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":"](#subscription) object represents the subscription of the provided listener."}]},{"tag":"@example","content":[{"kind":"text","text":"Registering a notification listener using a React hook:\n"},{"kind":"code","text":"```jsx\nimport React from 'react';\nimport * as Notifications from 'expo-notifications';\n\nexport default function App() {\n  React.useEffect(() => {\n    const subscription = Notifications.addNotificationReceivedListener(notification => {\n      console.log(notification);\n    });\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"listen"}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function accepting a notification (["},{"kind":"code","text":"`Notification`"},{"kind":"text","text":"](#notification)) as an argument."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"Notification","package":"expo-notifications"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"Subscription","package":"expo-modules-core"}}]},{"name":"addNotificationResponseReceivedListener","variant":"declaration","kind":64,"signatures":[{"name":"addNotificationResponseReceivedListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A ["},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":"](#subscription) object represents the subscription of the provided listener."}]},{"tag":"@example","content":[{"kind":"text","text":"Register a notification responder listener:\n"},{"kind":"code","text":"```jsx\nimport React from 'react';\nimport { Linking } from 'react-native';\nimport * as Notifications from 'expo-notifications';\n\nexport default function Container() {\n  React.useEffect(() => {\n    const subscription = Notifications.addNotificationResponseReceivedListener(response => {\n      const url = response.notification.request.content.data.url;\n      Linking.openURL(url);\n    });\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"listen"}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function accepting notification response (["},{"kind":"code","text":"`NotificationResponse`"},{"kind":"text","text":"](#notificationresponse)) as an argument."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"NotificationResponse","package":"expo-notifications"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"Subscription","package":"expo-modules-core"}}]},{"name":"addNotificationsDroppedListener","variant":"declaration","kind":64,"signatures":[{"name":"addNotificationsDroppedListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Listeners registered by this method will be called whenever some notifications have been dropped by the server.\nApplicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to "},{"kind":"code","text":"`onDeletedMessages()`"},{"kind":"text","text":" callback.\nMore information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A ["},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":"](#subscription) object represents the subscription of the provided listener."}]},{"tag":"@header","content":[{"kind":"text","text":"listen"}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A callback function."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"Subscription","package":"expo-modules-core"}}]},{"name":"addPushTokenListener","variant":"declaration","kind":64,"signatures":[{"name":"addPushTokenListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"In rare situations, a push token may be changed by the push notification service while the app is running.\nWhen a token is rolled, the old one becomes invalid and sending notifications to it will fail.\nA push token listener will let you handle this situation gracefully by registering the new token with your backend right away."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A ["},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":"](#subscription) object represents the subscription of the provided listener."}]},{"tag":"@header","content":[{"kind":"text","text":"fetch"}]},{"tag":"@example","content":[{"kind":"text","text":"Registering a push token listener using a React hook.\n"},{"kind":"code","text":"```jsx\nimport React from 'react';\nimport * as Notifications from 'expo-notifications';\n\nimport { registerDevicePushTokenAsync } from '../api';\n\nexport default function App() {\n  React.useEffect(() => {\n    const subscription = Notifications.addPushTokenListener(registerDevicePushTokenAsync);\n    return () => subscription.remove();\n  }, []);\n\n  return (\n    // Your app content\n  );\n}\n```"}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function accepting a push token as an argument, it will be called whenever the push token changes."}]},"type":{"type":"reference","name":"PushTokenListener","package":"expo-notifications"}}],"type":{"type":"reference","name":"Subscription","package":"expo-modules-core"}}]},{"name":"cancelAllScheduledNotificationsAsync","variant":"declaration","kind":64,"signatures":[{"name":"cancelAllScheduledNotificationsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Cancels all scheduled notifications."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise that resolves once all the scheduled notifications are successfully canceled, or if there are no scheduled notifications."}]},{"tag":"@header","content":[{"kind":"text","text":"schedule"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"cancelScheduledNotificationAsync","variant":"declaration","kind":64,"signatures":[{"name":"cancelScheduledNotificationAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Cancels a single scheduled notification. The scheduled notification of given ID will not trigger."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise resolves once the scheduled notification is successfully canceled or if there is no scheduled notification for a given identifier."}]},{"tag":"@example","content":[{"kind":"text","text":"Schedule and then cancel the notification:\n"},{"kind":"code","text":"```ts\nimport * as Notifications from 'expo-notifications';\n\nasync function scheduleAndCancel() {\n  const identifier = await Notifications.scheduleNotificationAsync({\n    content: {\n      title: 'Hey!',\n    },\n    trigger: { seconds: 60, repeats: true },\n  });\n  await Notifications.cancelScheduledNotificationAsync(identifier);\n}\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"schedule"}]}]},"parameters":[{"name":"identifier","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The notification identifier with which "},{"kind":"code","text":"`scheduleNotificationAsync`"},{"kind":"text","text":" method resolved when the notification has been scheduled."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"deleteNotificationCategoryAsync","variant":"declaration","kind":64,"signatures":[{"name":"deleteNotificationCategoryAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Deletes the category associated with the provided identifier."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the category was successfully deleted, or "},{"kind":"code","text":"`false`"},{"kind":"text","text":" if it was not.\nAn example of when this method would return "},{"kind":"code","text":"`false`"},{"kind":"text","text":" is if you try to delete a category that doesn't exist."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@header","content":[{"kind":"text","text":"categories"}]}]},"parameters":[{"name":"identifier","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Identifier initially provided to "},{"kind":"code","text":"`setNotificationCategoryAsync`"},{"kind":"text","text":" when creating the category."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]},{"name":"deleteNotificationChannelAsync","variant":"declaration","kind":64,"signatures":[{"name":"deleteNotificationChannelAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Removes the notification channel."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolving once the channel is removed (or if there was no channel for given identifier)."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@header","content":[{"kind":"text","text":"channels"}]}]},"parameters":[{"name":"channelId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The channel identifier."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"deleteNotificationChannelGroupAsync","variant":"declaration","kind":64,"signatures":[{"name":"deleteNotificationChannelGroupAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Removes the notification channel group and all notification channels that belong to it."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves once the channel group is removed (or if there was no channel group for given identifier)."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@header","content":[{"kind":"text","text":"channels"}]}]},"parameters":[{"name":"groupId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The channel group identifier."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"dismissAllNotificationsAsync","variant":"declaration","kind":64,"signatures":[{"name":"dismissAllNotificationsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Removes all application's notifications displayed in the notification tray (Notification Center)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves once the request to dismiss the notifications is successfully dispatched to the notifications manager."}]},{"tag":"@header","content":[{"kind":"text","text":"dismiss"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"dismissNotificationAsync","variant":"declaration","kind":64,"signatures":[{"name":"dismissNotificationAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Removes notification displayed in the notification tray (Notification Center)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves once the request to dismiss the notification is successfully dispatched to the notifications manager."}]},{"tag":"@header","content":[{"kind":"text","text":"dismiss"}]}]},"parameters":[{"name":"notificationIdentifier","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The notification identifier, obtained either via "},{"kind":"code","text":"`setNotificationHandler`"},{"kind":"text","text":" method or in the listener added with "},{"kind":"code","text":"`addNotificationReceivedListener`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"getAllScheduledNotificationsAsync","variant":"declaration","kind":64,"signatures":[{"name":"getAllScheduledNotificationsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetches information about all scheduled notifications."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a Promise resolving to an array of objects conforming to the ["},{"kind":"code","text":"`Notification`"},{"kind":"text","text":"](#notification) interface."}]},{"tag":"@header","content":[{"kind":"text","text":"schedule"}]}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"NotificationRequest","package":"expo-notifications"}}],"name":"Promise","package":"typescript"}}]},{"name":"getBadgeCountAsync","variant":"declaration","kind":64,"signatures":[{"name":"getBadgeCountAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetches the number currently set as the badge of the app icon on device's home screen. A "},{"kind":"code","text":"`0`"},{"kind":"text","text":" value means that the badge is not displayed.\n> **Note:** Not all Android launchers support application badges. If the launcher does not support icon badges, the method will always resolve to "},{"kind":"code","text":"`0`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a Promise resolving to a number that represents the current badge of the app icon."}]},{"tag":"@header","content":[{"kind":"text","text":"badge"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"number"}],"name":"Promise","package":"typescript"}}]},{"name":"getDevicePushTokenAsync","variant":"declaration","kind":64,"signatures":[{"name":"getDevicePushTokenAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns a native FCM, APNs token or a ["},{"kind":"code","text":"`PushSubscription`"},{"kind":"text","text":" data](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)\nthat can be used with another push notification service."}],"blockTags":[{"tag":"@header","content":[{"kind":"text","text":"fetch"}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"DevicePushToken","package":"expo-notifications"}],"name":"Promise","package":"typescript"}}]},{"name":"getExpoPushTokenAsync","variant":"declaration","kind":64,"signatures":[{"name":"getExpoPushTokenAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns an Expo token that can be used to send a push notification to the device using Expo's push notifications service.\n\nThis method makes requests to the Expo's servers. It can get rejected in cases where the request itself fails\n(for example, due to the device being offline, experiencing a network timeout, or other HTTPS request failures).\nTo provide offline support to your users, you should "},{"kind":"code","text":"`try/catch`"},{"kind":"text","text":" this method and implement retry logic to attempt\nto get the push token later, once the device is back online.\n\n> For Expo's backend to be able to send notifications to your app, you will need to provide it with push notification keys.\nFor more information, see [credentials](/push-notifications/push-notifications-setup/#get-credentials-for-development-builds) in the push notifications setup."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that resolves to an object representing acquired push token."}]},{"tag":"@header","content":[{"kind":"text","text":"fetch"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nimport * as Notifications from 'expo-notifications';\n\nexport async function registerForPushNotificationsAsync(userId: string) {\n  const expoPushToken = await Notifications.getExpoPushTokenAsync({\n   projectId: 'your-project-id',\n  });\n\n  await fetch('https://example.com/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      userId,\n      expoPushToken,\n    }),\n  });\n}\n```"}]}]},"parameters":[{"name":"options","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Object allowing you to pass in push notification configuration."}]},"type":{"type":"reference","name":"ExpoPushTokenOptions","package":"expo-notifications"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ExpoPushToken","package":"expo-notifications"}],"name":"Promise","package":"typescript"}}]},{"name":"getLastNotificationResponseAsync","variant":"declaration","kind":64,"signatures":[{"name":"getLastNotificationResponseAsync","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@header","content":[{"kind":"text","text":"listen"}]}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"NotificationResponse","package":"expo-notifications"},{"type":"literal","value":null}]}],"name":"Promise","package":"typescript"}}]},{"name":"getNextTriggerDateAsync","variant":"declaration","kind":64,"signatures":[{"name":"getNextTriggerDateAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Allows you to check what will be the next trigger date for given notification trigger input."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"If the return value is "},{"kind":"code","text":"`null`"},{"kind":"text","text":", the notification won't be triggered. Otherwise, the return value is the Unix timestamp in milliseconds\nat which the notification will be triggered."}]},{"tag":"@example","content":[{"kind":"text","text":"Calculate next trigger date for a notification trigger:\n"},{"kind":"code","text":"```ts\nimport * as Notifications from 'expo-notifications';\n\nasync function logNextTriggerDate() {\n  try {\n    const nextTriggerDate = await Notifications.getNextTriggerDateAsync({\n      hour: 9,\n      minute: 0,\n    });\n    console.log(nextTriggerDate === null ? 'No next trigger date' : new Date(nextTriggerDate));\n  } catch (e) {\n    console.warn(`Couldn't have calculated next trigger date: ${e}`);\n  }\n}\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"schedule"}]}]},"parameters":[{"name":"trigger","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The schedulable notification trigger you would like to check next trigger date for (of type ["},{"kind":"code","text":"`SchedulableNotificationTriggerInput`"},{"kind":"text","text":"](#schedulablenotificationtriggerinput))."}]},"type":{"type":"reference","name":"SchedulableNotificationTriggerInput","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}],"name":"Promise","package":"typescript"}}]},{"name":"getNotificationCategoriesAsync","variant":"declaration","kind":64,"signatures":[{"name":"getNotificationCategoriesAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetches information about all known notification categories."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves to an array of "},{"kind":"code","text":"`NotificationCategory`"},{"kind":"text","text":"s. On platforms that do not support notification channels,\nit will always resolve to an empty array."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@header","content":[{"kind":"text","text":"categories"}]}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"NotificationCategory","package":"expo-notifications"}}],"name":"Promise","package":"typescript"}}]},{"name":"getNotificationChannelAsync","variant":"declaration","kind":64,"signatures":[{"name":"getNotificationChannelAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetches information about a single notification channel."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves to the channel object (of type ["},{"kind":"code","text":"`NotificationChannel`"},{"kind":"text","text":"](#notificationchannel)) or to "},{"kind":"code","text":"`null`"},{"kind":"text","text":"\nif there was no channel found for this identifier. On platforms that do not support notification channels, it will always resolve to "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@header","content":[{"kind":"text","text":"channels"}]}]},"parameters":[{"name":"channelId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The channel's identifier."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"NotificationChannel","package":"expo-notifications"},{"type":"literal","value":null}]}],"name":"Promise","package":"typescript"}}]},{"name":"getNotificationChannelGroupAsync","variant":"declaration","kind":64,"signatures":[{"name":"getNotificationChannelGroupAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetches information about a single notification channel group."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves to the channel group object (of type ["},{"kind":"code","text":"`NotificationChannelGroup`"},{"kind":"text","text":"](#notificationchannelgroup))\nor to "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if there was no channel group found for this identifier. On platforms that do not support notification channels,\nit will always resolve to "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@header","content":[{"kind":"text","text":"channels"}]}]},"parameters":[{"name":"groupId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The channel group's identifier."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"NotificationChannelGroup","package":"expo-notifications"},{"type":"literal","value":null}]}],"name":"Promise","package":"typescript"}}]},{"name":"getNotificationChannelGroupsAsync","variant":"declaration","kind":64,"signatures":[{"name":"getNotificationChannelGroupsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetches information about all known notification channel groups."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resoles to an array of channel groups. On platforms that do not support notification channel groups,\nit will always resolve to an empty array."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@header","content":[{"kind":"text","text":"channels"}]}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"NotificationChannelGroup","package":"expo-notifications"}}],"name":"Promise","package":"typescript"}}]},{"name":"getNotificationChannelsAsync","variant":"declaration","kind":64,"signatures":[{"name":"getNotificationChannelsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetches information about all known notification channels."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves to an array of channels. On platforms that do not support notification channels,\nit will always resolve to an empty array."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@header","content":[{"kind":"text","text":"channels"}]}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"NotificationChannel","package":"expo-notifications"}}],"name":"Promise","package":"typescript"}}]},{"name":"getPermissionsAsync","variant":"declaration","kind":64,"signatures":[{"name":"getPermissionsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Calling this function checks current permissions settings related to notifications.\nIt lets you verify whether the app is currently allowed to display alerts, play sounds, etc.\nThere is no user-facing effect of calling this."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"It returns a "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" resolving to an object represents permission settings (["},{"kind":"code","text":"`NotificationPermissionsStatus`"},{"kind":"text","text":"](#notificationpermissionsstatus)).\nOn iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response)."}]},{"tag":"@example","content":[{"kind":"text","text":"Check if the app is allowed to send any type of notifications (interrupting and non-interruptingâ€“provisional on iOS).\n"},{"kind":"code","text":"```ts\nimport * as Notifications from 'expo-notifications';\n\nexport async function allowsNotificationsAsync() {\n  const settings = await Notifications.getPermissionsAsync();\n  return (\n    settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL\n  );\n}\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"permissions"}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"NotificationPermissionsStatus","package":"expo-notifications"}],"name":"Promise","package":"typescript"}}]},{"name":"getPresentedNotificationsAsync","variant":"declaration","kind":64,"signatures":[{"name":"getPresentedNotificationsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Fetches information about all notifications present in the notification tray (Notification Center).\n> This method is not supported on Android below 6.0 (API level 23) â€“ on these devices it will resolve to an empty array."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves with a list of notifications (["},{"kind":"code","text":"`Notification`"},{"kind":"text","text":"](#notification)) currently present in the notification tray (Notification Center)."}]},{"tag":"@header","content":[{"kind":"text","text":"dismiss"}]}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"Notification","package":"expo-notifications"}}],"name":"Promise","package":"typescript"}}]},{"name":"presentNotificationAsync","variant":"declaration","kind":64,"signatures":[{"name":"presentNotificationAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Schedules a notification for immediate trigger."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"It returns a Promise resolving with the notification's identifier once the notification is successfully scheduled for immediate display."}]},{"tag":"@header","content":[{"kind":"text","text":"schedule"}]},{"tag":"@deprecated","content":[{"kind":"text","text":"This method has been deprecated in favor of using an explicit "},{"kind":"code","text":"`NotificationHandler`"},{"kind":"text","text":" and the ["},{"kind":"code","text":"`scheduleNotificationAsync`"},{"kind":"text","text":"](#notificationsschedulenotificationasyncrequest) method. More information can be found in our [FYI document](https://expo.fyi/presenting-notifications-deprecated)."}]}]},"parameters":[{"name":"content","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An object representing the notification content."}]},"type":{"type":"reference","name":"NotificationContentInput","package":"expo-notifications"}},{"name":"identifier","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","package":"typescript"}}]},{"name":"registerTaskAsync","variant":"declaration","kind":64,"signatures":[{"name":"registerTaskAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"When a notification is received while the app is backgrounded, using this function you can set a callback that will be run in response to that notification.\nUnder the hood, this function is run using "},{"kind":"code","text":"`expo-task-manager`"},{"kind":"text","text":". You **must** define the task first, with ["},{"kind":"code","text":"`TaskManager.defineTask`"},{"kind":"text","text":"](./task-manager#taskmanagerdefinetasktaskname-taskexecutor).\nMake sure you define it in the global scope.\n\nThe callback function you define with "},{"kind":"code","text":"`TaskManager.defineTask`"},{"kind":"text","text":" will receive an object with the following fields:\n- "},{"kind":"code","text":"`data`"},{"kind":"text","text":": The remote payload delivered by either FCM (Android) or APNs (iOS). See ["},{"kind":"code","text":"`PushNotificationTrigger`"},{"kind":"text","text":"](#pushnotificationtrigger) for details.\n- "},{"kind":"code","text":"`error`"},{"kind":"text","text":": The error (if any) that occurred during execution of the task.\n- "},{"kind":"code","text":"`executionInfo`"},{"kind":"text","text":": JSON object of additional info related to the task, including the "},{"kind":"code","text":"`taskName`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nimport * as TaskManager from 'expo-task-manager';\nimport * as Notifications from 'expo-notifications';\n\nconst BACKGROUND_NOTIFICATION_TASK = 'BACKGROUND-NOTIFICATION-TASK';\n\nTaskManager.defineTask(BACKGROUND_NOTIFICATION_TASK, ({ data, error, executionInfo }) => {\n  console.log('Received a notification in the background!');\n  // Do something with the notification data\n});\n\nNotifications.registerTaskAsync(BACKGROUND_NOTIFICATION_TASK);\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"inBackground"}]}]},"parameters":[{"name":"taskName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The string you passed to "},{"kind":"code","text":"`TaskManager.defineTask`"},{"kind":"text","text":" as the "},{"kind":"code","text":"`taskName`"},{"kind":"text","text":" parameter."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"literal","value":null}],"name":"Promise","package":"typescript"}}]},{"name":"removeNotificationSubscription","variant":"declaration","kind":64,"signatures":[{"name":"removeNotificationSubscription","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Removes a notification subscription returned by an "},{"kind":"code","text":"`addNotificationListener`"},{"kind":"text","text":" call."}],"blockTags":[{"tag":"@header","content":[{"kind":"text","text":"listen"}]}]},"parameters":[{"name":"subscription","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A subscription returned by "},{"kind":"code","text":"`addNotificationListener`"},{"kind":"text","text":" method."}]},"type":{"type":"reference","name":"Subscription","package":"expo-modules-core"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"removePushTokenSubscription","variant":"declaration","kind":64,"signatures":[{"name":"removePushTokenSubscription","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Removes a push token subscription returned by an "},{"kind":"code","text":"`addPushTokenListener`"},{"kind":"text","text":" call."}],"blockTags":[{"tag":"@header","content":[{"kind":"text","text":"fetch"}]}]},"parameters":[{"name":"subscription","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A subscription returned by "},{"kind":"code","text":"`addPushTokenListener`"},{"kind":"text","text":" method."}]},"type":{"type":"reference","name":"Subscription","package":"expo-modules-core"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"requestPermissionsAsync","variant":"declaration","kind":64,"signatures":[{"name":"requestPermissionsAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Prompts the user for notification permissions according to request. **Request defaults to asking the user to allow displaying alerts,\nsetting badge count and playing sounds**."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"It returns a Promise resolving to an object represents permission settings (["},{"kind":"code","text":"`NotificationPermissionsStatus`"},{"kind":"text","text":"](#notificationpermissionsstatus)).\nOn iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response)."}]},{"tag":"@example","content":[{"kind":"text","text":"Prompts the user to allow the app to show alerts, play sounds, set badge count and let Siri read out messages through AirPods.\n"},{"kind":"code","text":"```ts\nimport * as Notifications from 'expo-notifications';\n\nexport function requestPermissionsAsync() {\n  return await Notifications.requestPermissionsAsync({\n    ios: {\n      allowAlert: true,\n      allowBadge: true,\n      allowSound: true,\n      allowAnnouncements: true,\n    },\n  });\n}\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"permissions"}]}]},"parameters":[{"name":"permissions","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object representing configuration for the request scope."}]},"type":{"type":"reference","name":"NotificationPermissionsRequest","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"NotificationPermissionsStatus","package":"expo-notifications"}],"name":"Promise","package":"typescript"}}]},{"name":"scheduleNotificationAsync","variant":"declaration","kind":64,"signatures":[{"name":"scheduleNotificationAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Schedules a notification to be triggered in the future.\n> **Note:** Please note that this does not mean that the notification will be presented when it is triggered.\nFor the notification to be presented you have to set a notification handler with ["},{"kind":"code","text":"`setNotificationHandler`"},{"kind":"text","text":"](#notificationssetnotificationhandlerhandler)\nthat will return an appropriate notification behavior. For more information see the example below."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a Promise resolving to a string which is a notification identifier you can later use to cancel the notification or to identify an incoming notification."}]},{"tag":"@example","content":[{"kind":"text","text":"# Schedule the notification that will trigger once, in one minute from now\n"},{"kind":"code","text":"```ts\nimport * as Notifications from 'expo-notifications';\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: \"Time's up!\",\n    body: 'Change sides!',\n  },\n  trigger: {\n    seconds: 60,\n  },\n});\n```"},{"kind":"text","text":"\n\n# Schedule the notification that will trigger repeatedly, every 20 minutes\n"},{"kind":"code","text":"```ts\nimport * as Notifications from 'expo-notifications';\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Remember to drink water!',\n  },\n  trigger: {\n    seconds: 60 * 20,\n    repeats: true,\n  },\n});\n```"},{"kind":"text","text":"\n\n# Schedule the notification that will trigger once, at the beginning of next hour\n"},{"kind":"code","text":"```ts\nimport * as Notifications from 'expo-notifications';\n\nconst trigger = new Date(Date.now() + 60 * 60 * 1000);\ntrigger.setMinutes(0);\ntrigger.setSeconds(0);\n\nNotifications.scheduleNotificationAsync({\n  content: {\n    title: 'Happy new hour!',\n  },\n  trigger,\n});\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"schedule"}]}]},"parameters":[{"name":"request","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An object describing the notification to be triggered."}]},"type":{"type":"reference","name":"NotificationRequestInput","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","package":"typescript"}}]},{"name":"setAutoServerRegistrationEnabledAsync","variant":"declaration","kind":64,"signatures":[{"name":"setAutoServerRegistrationEnabledAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Sets the registration information so that the device push token gets pushed\nto the given registration endpoint"}]},"parameters":[{"name":"enabled","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"boolean"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"setBadgeCountAsync","variant":"declaration","kind":64,"signatures":[{"name":"setBadgeCountAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Sets the badge of the app's icon to the specified number. Setting it to "},{"kind":"code","text":"`0`"},{"kind":"text","text":" clears the badge. On iOS, this method requires that you have requested\nthe user's permission for "},{"kind":"code","text":"`allowBadge`"},{"kind":"text","text":" via ["},{"kind":"code","text":"`requestPermissionsAsync`"},{"kind":"text","text":"](#notificationsrequestpermissionsasyncpermissions),\notherwise it will automatically return "},{"kind":"code","text":"`false`"},{"kind":"text","text":".\n> **Note:** Not all Android launchers support application badges. If the launcher does not support icon badges, the method will resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"It returns a Promise resolving to a boolean representing whether the setting of the badge succeeded."}]},{"tag":"@header","content":[{"kind":"text","text":"badge"}]}]},"parameters":[{"name":"badgeCount","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The count which should appear on the badge. A value of "},{"kind":"code","text":"`0`"},{"kind":"text","text":" will clear the badge."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object of options configuring behavior applied in Web environment."}]},"type":{"type":"reference","name":"SetBadgeCountOptions","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]},{"name":"setNotificationCategoryAsync","variant":"declaration","kind":64,"signatures":[{"name":"setNotificationCategoryAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Sets the new notification category."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolves to the category you just have created."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@header","content":[{"kind":"text","text":"categories"}]}]},"parameters":[{"name":"identifier","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string to associate as the ID of this category. You will pass this string in as the "},{"kind":"code","text":"`categoryIdentifier`"},{"kind":"text","text":"\nin your ["},{"kind":"code","text":"`NotificationContent`"},{"kind":"text","text":"](#notificationcontent) to associate a notification with this category.\n> Don't use the characters "},{"kind":"code","text":"`:`"},{"kind":"text","text":" or "},{"kind":"code","text":"`-`"},{"kind":"text","text":" in your category identifier. If you do, categories might not work as expected."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"actions","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An array of ["},{"kind":"code","text":"`NotificationAction`"},{"kind":"text","text":"s](#notificationaction), which describe the actions associated with this category."}]},"type":{"type":"array","elementType":{"type":"reference","name":"NotificationAction","package":"expo-notifications"}}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An optional object of additional configuration options for your category."}]},"type":{"type":"reference","name":"NotificationCategoryOptions","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"NotificationCategory","package":"expo-notifications"}],"name":"Promise","package":"typescript"}}]},{"name":"setNotificationChannelAsync","variant":"declaration","kind":64,"signatures":[{"name":"setNotificationChannelAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Assigns the channel configuration to a channel of a specified name (creating it if need be).\nThis method lets you assign given notification channel to a notification channel group.\n\n> **Note:** For some settings to be applied on all Android versions, it may be necessary to duplicate the configuration across both\n> a single notification and its respective notification channel.\n\nFor example, for a notification to play a custom sound on Android versions **below** 8.0,\nthe custom notification sound has to be set on the notification (through the ["},{"kind":"code","text":"`NotificationContentInput`"},{"kind":"text","text":"](#notificationcontentinput)),\nand for the custom sound to play on Android versions **above** 8.0, the relevant notification channel must have the custom sound configured\n(through the ["},{"kind":"code","text":"`NotificationChannelInput`"},{"kind":"text","text":"](#notificationchannelinput)). For more information,\nsee [Set custom notification sounds on Android](#set-custom-notification-sounds)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A Promise which resolving to the object (of type ["},{"kind":"code","text":"`NotificationChannel`"},{"kind":"text","text":"](#notificationchannel)) describing the modified channel\nor to "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the platform does not support notification channels."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@header","content":[{"kind":"text","text":"channels"}]}]},"parameters":[{"name":"channelId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The channel identifier."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"channel","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Object representing the channel's configuration."}]},"type":{"type":"reference","name":"NotificationChannelInput","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"NotificationChannel","package":"expo-notifications"},{"type":"literal","value":null}]}],"name":"Promise","package":"typescript"}}]},{"name":"setNotificationChannelGroupAsync","variant":"declaration","kind":64,"signatures":[{"name":"setNotificationChannelGroupAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Assigns the channel group configuration to a channel group of a specified name (creating it if need be)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" resolving to the object (of type ["},{"kind":"code","text":"`NotificationChannelGroup`"},{"kind":"text","text":"](#notificationchannelgroup))\ndescribing the modified channel group or to "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the platform does not support notification channels."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@header","content":[{"kind":"text","text":"channels"}]}]},"parameters":[{"name":"groupId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The channel group's identifier."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"group","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Object representing the channel group configuration."}]},"type":{"type":"reference","name":"NotificationChannelGroupInput","package":"expo-notifications"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"reference","name":"NotificationChannelGroup","package":"expo-notifications"},{"type":"literal","value":null}]}],"name":"Promise","package":"typescript"}}]},{"name":"setNotificationHandler","variant":"declaration","kind":64,"signatures":[{"name":"setNotificationHandler","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"When a notification is received while the app is running, using this function you can set a callback that will decide\nwhether the notification should be shown to the user or not.\n\nWhen a notification is received, "},{"kind":"code","text":"`handleNotification`"},{"kind":"text","text":" is called with the incoming notification as an argument.\nThe function should respond with a behavior object within 3 seconds, otherwise, the notification will be discarded.\nIf the notification is handled successfully, "},{"kind":"code","text":"`handleSuccess`"},{"kind":"text","text":" is called with the identifier of the notification,\notherwise (or on timeout) "},{"kind":"code","text":"`handleError`"},{"kind":"text","text":" will be called.\n\nThe default behavior when the handler is not set or does not respond in time is not to show the notification."}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"Implementing a notification handler that always shows the notification when it is received.\n"},{"kind":"code","text":"```jsx\nimport * as Notifications from 'expo-notifications';\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"inForeground"}]}]},"parameters":[{"name":"handler","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A single parameter which should be either "},{"kind":"code","text":"`null`"},{"kind":"text","text":" (if you want to clear the handler) or a ["},{"kind":"code","text":"`NotificationHandler`"},{"kind":"text","text":"](#notificationhandler) object."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"NotificationHandler","package":"expo-notifications"}]}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"unregisterForNotificationsAsync","variant":"declaration","kind":64,"signatures":[{"name":"unregisterForNotificationsAsync","variant":"signature","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"unregisterTaskAsync","variant":"declaration","kind":64,"signatures":[{"name":"unregisterTaskAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Used to unregister tasks registered with "},{"kind":"code","text":"`registerTaskAsync`"},{"kind":"text","text":" method."}],"blockTags":[{"tag":"@header","content":[{"kind":"text","text":"inBackground"}]}]},"parameters":[{"name":"taskName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The string you passed to "},{"kind":"code","text":"`registerTaskAsync`"},{"kind":"text","text":" as the "},{"kind":"code","text":"`taskName`"},{"kind":"text","text":" parameter."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"literal","value":null}],"name":"Promise","package":"typescript"}}]},{"name":"useLastNotificationResponse","variant":"declaration","kind":64,"signatures":[{"name":"useLastNotificationResponse","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A React hook always returns the notification response that was received most recently\n(a notification response designates an interaction with a notification, such as tapping on it).\n\n> If you don't want to use a hook, you can use "},{"kind":"code","text":"`Notifications.getLastNotificationResponseAsync()`"},{"kind":"text","text":" instead."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The hook may return one of these three types/values:\n- "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" - until we're sure of what to return,\n- "},{"kind":"code","text":"`null`"},{"kind":"text","text":" - if no notification response has been received yet,\n- a ["},{"kind":"code","text":"`NotificationResponse`"},{"kind":"text","text":"](#notificationresponse) object - if a notification response was received."}]},{"tag":"@example","content":[{"kind":"text","text":"Responding to a notification tap by opening a URL that could be put into the notification's "},{"kind":"code","text":"`data`"},{"kind":"text","text":"\n(opening the URL is your responsibility and is not a part of the "},{"kind":"code","text":"`expo-notifications`"},{"kind":"text","text":" API):\n"},{"kind":"code","text":"```jsx\nimport * as Notifications from 'expo-notifications';\nimport { Linking } from 'react-native';\n\nexport default function App() {\n  const lastNotificationResponse = Notifications.useLastNotificationResponse();\n  React.useEffect(() => {\n    if (\n      lastNotificationResponse &&\n      lastNotificationResponse.notification.request.content.data.url &&\n      lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER\n    ) {\n      Linking.openURL(lastNotificationResponse.notification.request.content.data.url);\n    }\n  }, [lastNotificationResponse]);\n  return (\n    // Your app content\n  );\n}\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"listen"}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"reference","name":"NotificationResponse","package":"expo-notifications"}]}}]},{"name":"usePermissions","variant":"declaration","kind":64,"signatures":[{"name":"usePermissions","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Check or request permissions to send and receive push notifications.\nThis uses both "},{"kind":"code","text":"`requestPermissionsAsync`"},{"kind":"text","text":" and "},{"kind":"code","text":"`getPermissionsAsync`"},{"kind":"text","text":" to interact with the permissions."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst [permissionResponse, requestPermission] = Notifications.usePermissions();\n```"}]},{"tag":"@header","content":[{"kind":"text","text":"permission"}]}]},"parameters":[{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"NotificationPermissionsRequest","package":"expo-notifications"}],"name":"PermissionHookOptions","package":"expo-modules-core"}}],"type":{"type":"tuple","elements":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"NotificationPermissionsStatus","package":"expo-notifications"}]},{"type":"reference","typeArguments":[{"type":"reference","name":"NotificationPermissionsStatus","package":"expo-notifications"}],"name":"RequestPermissionMethod","package":"expo-modules-core"},{"type":"reference","typeArguments":[{"type":"reference","name":"NotificationPermissionsStatus","package":"expo-notifications"}],"name":"GetPermissionMethod","package":"expo-modules-core"}]}}]}],"packageName":"expo-notifications"}