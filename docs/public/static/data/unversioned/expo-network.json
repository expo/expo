{"name":"expo-network","variant":"project","kind":1,"children":[{"name":"NetworkStateType","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"An enum of the different types of devices supported by Expo."}]},"children":[{"name":"BLUETOOTH","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Active network connection over Bluetooth."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"literal","value":"BLUETOOTH"}},{"name":"CELLULAR","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Active network connection over mobile data or ["},{"kind":"code","text":"`DUN-specific`"},{"kind":"text","text":"](https://developer.android.com/reference/android/net/ConnectivityManager#TYPE_MOBILE_DUN)\nmobile connection when setting an upstream connection for tethering."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"CELLULAR"}},{"name":"ETHERNET","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Active network connection over Ethernet."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"ETHERNET"}},{"name":"NONE","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"No active network connection detected."}]},"type":{"type":"literal","value":"NONE"}},{"name":"OTHER","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Active network connection over other network connection types."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"literal","value":"OTHER"}},{"name":"UNKNOWN","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"The connection type could not be determined."}]},"type":{"type":"literal","value":"UNKNOWN"}},{"name":"VPN","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Active network connection over VPN."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"literal","value":"VPN"}},{"name":"WIFI","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Active network connection over Wi-Fi."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"literal","value":"WIFI"}},{"name":"WIMAX","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Active network connection over WiMAX."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"literal","value":"WIMAX"}}]},{"name":"NetworkState","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"isConnected","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If there is an active network connection. Note that this does not mean that internet is reachable.\nThis field is "},{"kind":"code","text":"`false`"},{"kind":"text","text":" if the type is either "},{"kind":"code","text":"`Network.NetworkStateType.NONE`"},{"kind":"text","text":" or "},{"kind":"code","text":"`Network.NetworkStateType.UNKNOWN`"},{"kind":"text","text":",\n"},{"kind":"code","text":"`true`"},{"kind":"text","text":" otherwise."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"isInternetReachable","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If the internet is reachable with the currently active network connection. On Android, this\ndepends on "},{"kind":"code","text":"`NetInfo.isConnected()`"},{"kind":"text","text":" (API level < 29) or "},{"kind":"code","text":"`ConnectivityManager.getActiveNetwork()`"},{"kind":"text","text":"\n(API level >= 29). On iOS, this value will always be the same as "},{"kind":"code","text":"`isConnected`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"type","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A ["},{"kind":"code","text":"`NetworkStateType`"},{"kind":"text","text":"](#networkstatetype) enum value that represents the current network\nconnection type."}]},"type":{"type":"reference","target":4092,"name":"NetworkStateType","package":"expo-network"}}]}}},{"name":"NetworkStateEvent","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Represents an event that provides the updated network state when there is a change in the network status.\nThis is passed as the argument to listeners registered with ["},{"kind":"code","text":"`addNetworkStateListener()`"},{"kind":"text","text":"](#networkaddnetworkstatelistenerlistener)."}]},"type":{"type":"reference","target":4086,"name":"NetworkState","package":"expo-network"}},{"name":"addNetworkStateListener","variant":"declaration","kind":64,"signatures":[{"name":"addNetworkStateListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Adds a listener that will fire whenever the network state changes."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst subscription = addNetworkStateListener(({ type, isConnected, isInternetReachable }) => {\n  console.log(`Network type: ${type}, Connected: ${isConnected}, Internet Reachable: ${isInternetReachable}`);\n});\n```"}]},{"tag":"@returns","content":[{"kind":"text","text":"A subscription object with a remove function to unregister the listener."}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Callback to execute when the network state changes. The callback is provided with\na single argument that is an object containing information about the network state."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","target":4086,"name":"NetworkState","package":"expo-network"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","target":{"sourceFileName":"packages/expo-modules-core/src/ts-declarations/EventEmitter.ts","qualifiedName":"EventSubscription"},"name":"EventSubscription","package":"expo-modules-core"}}]},{"name":"getIpAddressAsync","variant":"declaration","kind":64,"signatures":[{"name":"getIpAddressAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Gets the device's current IPv4 address. Returns "},{"kind":"code","text":"`0.0.0.0`"},{"kind":"text","text":" if the IP address could not be retrieved.\n\nOn web, this method uses the third-party ["},{"kind":"code","text":"`ipify service`"},{"kind":"text","text":"](https://www.ipify.org/) to get the\npublic IP address of the current device."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that fulfils with a "},{"kind":"code","text":"`string`"},{"kind":"text","text":" of the current IP address of the device's main\nnetwork interface. Can only be IPv4 address."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Network.getIpAddressAsync();\n// \"92.168.32.44\"\n```"}]}]},"type":{"type":"reference","target":{"sourceFileName":"tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","package":"typescript"}}]},{"name":"getNetworkStateAsync","variant":"declaration","kind":64,"signatures":[{"name":"getNetworkStateAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Gets the device's current network connection state.\n\nOn web, "},{"kind":"code","text":"`navigator.connection.type`"},{"kind":"text","text":" is not available on browsers. So if there is an active\nnetwork connection, the field "},{"kind":"code","text":"`type`"},{"kind":"text","text":" returns "},{"kind":"code","text":"`NetworkStateType.UNKNOWN`"},{"kind":"text","text":". Otherwise, it returns\n"},{"kind":"code","text":"`NetworkStateType.NONE`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that fulfils with a "},{"kind":"code","text":"`NetworkState`"},{"kind":"text","text":" object."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Network.getNetworkStateAsync();\n// {\n//   type: NetworkStateType.CELLULAR,\n//   isConnected: true,\n//   isInternetReachable: true,\n// }\n```"}]}]},"type":{"type":"reference","target":{"sourceFileName":"tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"reference","target":4086,"name":"NetworkState","package":"expo-network"}],"name":"Promise","package":"typescript"}}]},{"name":"isAirplaneModeEnabledAsync","variant":"declaration","kind":64,"signatures":[{"name":"isAirplaneModeEnabledAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Tells if the device is in airplane mode."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a "},{"kind":"code","text":"`Promise`"},{"kind":"text","text":" that fulfils with a "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":" value for whether the device is in\nairplane mode or not."}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nawait Network.isAirplaneModeEnabledAsync();\n// false\n```"}]}]},"type":{"type":"reference","target":{"sourceFileName":"tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]},{"name":"useNetworkState","variant":"declaration","kind":64,"signatures":[{"name":"useNetworkState","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the current network state of the device. This method\ninitiates a listener for network state changes and cleans up before unmounting."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst networkState = useNetworkState();\nconsole.log(`Current network type: ${networkState.type}`);\n```"}]},{"tag":"@returns","content":[{"kind":"text","text":"The current network state of the device, including connectivity and type."}]}]},"type":{"type":"reference","target":4086,"name":"NetworkState","package":"expo-network"}}]}],"packageName":"expo-network"}