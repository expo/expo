{"name":"expo-sqlite-next","variant":"project","kind":1,"children":[{"name":"SQLiteDatabase","variant":"declaration","kind":128,"comment":{"summary":[{"kind":"text","text":"A SQLite database."}]},"children":[{"name":"constructor","variant":"declaration","kind":512,"signatures":[{"name":"new SQLiteDatabase","variant":"signature","kind":16384,"parameters":[{"name":"databaseName","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"param","kind":32768,"type":{"type":"reference","name":"SQLiteOpenOptions","package":"expo-sqlite"}},{"name":"nativeDatabase","variant":"param","kind":32768,"type":{"type":"reference","name":"NativeDatabase","package":"expo-sqlite"}}],"type":{"type":"reference","name":"SQLiteDatabase","package":"expo-sqlite"}}]},{"name":"databaseName","variant":"declaration","kind":1024,"flags":{"isPublic":true,"isReadonly":true},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"declaration","kind":1024,"flags":{"isPublic":true,"isReadonly":true},"type":{"type":"reference","name":"SQLiteOpenOptions","package":"expo-sqlite"}},{"name":"closeAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"closeAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Close the database."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"closeSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"closeSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Close the database."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"execAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"execAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute all SQL queries in the supplied string.\n> Note: The queries are not escaped for you! Be careful when constructing your queries."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing all the SQL queries."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"execSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"execSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute all SQL queries in the supplied string.\n\n> **Note:** The queries are not escaped for you! Be careful when constructing your queries.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing all the SQL queries."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"getAllAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getAllAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A convenience wrapper around ["},{"kind":"code","text":"`SQLiteDatabase.prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource), ["},{"kind":"code","text":"`SQLiteStatement.executeAsync()`"},{"kind":"text","text":"](#executeasyncparams), ["},{"kind":"code","text":"`SQLiteExecuteAsyncResult.getAllAsync()`"},{"kind":"text","text":"](#getallasync), and ["},{"kind":"code","text":"`SQLiteStatement.finalizeAsync()`"},{"kind":"text","text":"](#finalizeasync)."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\n// For unnamed parameters, you pass values in an array.\ndb.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', [1, 'Hello']);\n\n// For unnamed parameters, you pass values in variadic arguments.\ndb.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', 1, 'Hello');\n\n// For named parameters, you should pass values in object.\ndb.getAllAsync('SELECT * FROM test WHERE intValue = $intValue AND name = $name', { $intValue: 1, $name: 'Hello' });\n```"}]}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T","package":"expo-sqlite","refersToTypeParameter":true}}],"name":"Promise","package":"typescript"}}]},{"name":"getAllSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getAllSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A convenience wrapper around ["},{"kind":"code","text":"`SQLiteDatabase.prepareSync()`"},{"kind":"text","text":"](#preparesyncsource), ["},{"kind":"code","text":"`SQLiteStatement.executeSync()`"},{"kind":"text","text":"](#executesyncparams), ["},{"kind":"code","text":"`SQLiteExecuteSyncResult.getAllSync()`"},{"kind":"text","text":"](#getallsync), and ["},{"kind":"code","text":"`SQLiteStatement.finalizeSync()`"},{"kind":"text","text":"](#finalizesync).\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"array","elementType":{"type":"reference","name":"T","package":"expo-sqlite","refersToTypeParameter":true}}}]},{"name":"getEachAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getEachAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A convenience wrapper around ["},{"kind":"code","text":"`SQLiteDatabase.prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource), ["},{"kind":"code","text":"`SQLiteStatement.executeAsync()`"},{"kind":"text","text":"](#executeasyncparams), ["},{"kind":"code","text":"`SQLiteExecuteAsyncResult`"},{"kind":"text","text":"](#sqliteexecuteasyncresult) "},{"kind":"code","text":"`AsyncIterator`"},{"kind":"text","text":", and ["},{"kind":"code","text":"`SQLiteStatement.finalizeAsync()`"},{"kind":"text","text":"](#finalizeasync)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Rather than returning Promise, this function returns an ["},{"kind":"code","text":"`AsyncIterableIterator`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator). You can use "},{"kind":"code","text":"`for await...of`"},{"kind":"text","text":" to iterate over the rows from the SQLite query result."}]}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-sqlite","refersToTypeParameter":true}],"name":"AsyncIterableIterator","package":"typescript"}}]},{"name":"getEachSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getEachSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A convenience wrapper around ["},{"kind":"code","text":"`SQLiteDatabase.prepareSync()`"},{"kind":"text","text":"](#preparesyncsource), ["},{"kind":"code","text":"`SQLiteStatement.executeSync()`"},{"kind":"text","text":"](#executesyncparams), ["},{"kind":"code","text":"`SQLiteExecuteSyncResult`"},{"kind":"text","text":"](#sqliteexecutesyncresult) "},{"kind":"code","text":"`Iterator`"},{"kind":"text","text":", and ["},{"kind":"code","text":"`SQLiteStatement.finalizeSync()`"},{"kind":"text","text":"](#finalizesync).\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"This function returns an ["},{"kind":"code","text":"`IterableIterator`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator). You can use "},{"kind":"code","text":"`for...of`"},{"kind":"text","text":" to iterate over the rows from the SQLite query result."}]}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-sqlite","refersToTypeParameter":true}],"name":"IterableIterator","package":"typescript"}}]},{"name":"getFirstAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getFirstAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A convenience wrapper around ["},{"kind":"code","text":"`SQLiteDatabase.prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource), ["},{"kind":"code","text":"`SQLiteStatement.executeAsync()`"},{"kind":"text","text":"](#executeasyncparams), ["},{"kind":"code","text":"`SQLiteExecuteAsyncResult.getFirstAsync()`"},{"kind":"text","text":"](#getfirstasync), and ["},{"kind":"code","text":"`SQLiteStatement.finalizeAsync()`"},{"kind":"text","text":"](#finalizeasync)."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T","package":"expo-sqlite","refersToTypeParameter":true}]}],"name":"Promise","package":"typescript"}}]},{"name":"getFirstSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getFirstSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A convenience wrapper around ["},{"kind":"code","text":"`SQLiteDatabase.prepareSync()`"},{"kind":"text","text":"](#preparesyncsource), ["},{"kind":"code","text":"`SQLiteStatement.executeSync()`"},{"kind":"text","text":"](#executesyncparams), ["},{"kind":"code","text":"`SQLiteExecuteSyncResult.getFirstSync()`"},{"kind":"text","text":"](#getfirstsync), and ["},{"kind":"code","text":"`SQLiteStatement.finalizeSync()`"},{"kind":"text","text":"](#finalizesync).\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T","package":"expo-sqlite","refersToTypeParameter":true}]}}]},{"name":"isInTransactionAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"isInTransactionAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronous call to return whether the database is currently in a transaction."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]},{"name":"isInTransactionSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"isInTransactionSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Synchronous call to return whether the database is currently in a transaction."}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"prepareAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"prepareAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Create a [prepared SQLite statement](https://www.sqlite.org/c3ref/prepare.html)."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"SQLiteStatement","package":"expo-sqlite"}],"name":"Promise","package":"typescript"}}]},{"name":"prepareSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"prepareSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Create a [prepared SQLite statement](https://www.sqlite.org/c3ref/prepare.html).\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"SQLiteStatement","package":"expo-sqlite"}}]},{"name":"runAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A convenience wrapper around ["},{"kind":"code","text":"`SQLiteDatabase.prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource), ["},{"kind":"code","text":"`SQLiteStatement.executeAsync()`"},{"kind":"text","text":"](#executeasyncparams), and ["},{"kind":"code","text":"`SQLiteStatement.finalizeAsync()`"},{"kind":"text","text":"](#finalizeasync)."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"SQLiteRunResult","package":"expo-sqlite"}],"name":"Promise","package":"typescript"}}]},{"name":"runSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A convenience wrapper around ["},{"kind":"code","text":"`SQLiteDatabase.prepareSync()`"},{"kind":"text","text":"](#preparesyncsource), ["},{"kind":"code","text":"`SQLiteStatement.executeSync()`"},{"kind":"text","text":"](#executesyncparams), and ["},{"kind":"code","text":"`SQLiteStatement.finalizeSync()`"},{"kind":"text","text":"](#finalizesync).\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"reference","name":"SQLiteRunResult","package":"expo-sqlite"}}]},{"name":"withExclusiveTransactionAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"withExclusiveTransactionAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\nThe transaction may be exclusive.\nAs long as the transaction is converted into a write transaction,\nthe other async write queries will abort with "},{"kind":"code","text":"`database is locked`"},{"kind":"text","text":" error."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\ndb.withExclusiveTransactionAsync(async (txn) => {\n  await txn.execAsync('UPDATE test SET name = \"aaa\"');\n});\n```"}]}]},"parameters":[{"name":"task","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction. Any queries inside the transaction must be executed on the "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" object.\nThe "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" object has the same interfaces as the ["},{"kind":"code","text":"`SQLiteDatabase`"},{"kind":"text","text":"](#sqlitedatabase) object. You can use "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" like a ["},{"kind":"code","text":"`SQLiteDatabase`"},{"kind":"text","text":"](#sqlitedatabase) object."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"txn","variant":"param","kind":32768,"type":{"type":"reference","name":"Transaction","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"withTransactionAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"withTransactionAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\n> **Note:** This transaction is not exclusive and can be interrupted by other async queries."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\ndb.withTransactionAsync(async () => {\n  await db.execAsync('UPDATE test SET name = \"aaa\"');\n\n  //\n  // We cannot control the order of async/await order, so order of execution is not guaranteed.\n  // The following UPDATE query out of transaction may be executed here and break the expectation.\n  //\n\n  const result = await db.getAsync<{ name: string }>('SELECT name FROM Users');\n  expect(result?.name).toBe('aaa');\n});\ndb.execAsync('UPDATE test SET name = \"bbb\"');\n```"},{"kind":"text","text":"\nIf you worry about the order of execution, use "},{"kind":"code","text":"`withExclusiveTransactionAsync`"},{"kind":"text","text":" instead."}]}]},"parameters":[{"name":"task","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"withTransactionSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"withTransactionSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"task","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]}]},{"name":"SQLiteStatement","variant":"declaration","kind":128,"comment":{"summary":[{"kind":"text","text":"A prepared statement returned by ["},{"kind":"code","text":"`SQLiteDatabase.prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) or ["},{"kind":"code","text":"`SQLiteDatabase.prepareSync()`"},{"kind":"text","text":"](#preparesyncsource) that can be binded with parameters and executed."}]},"children":[{"name":"constructor","variant":"declaration","kind":512,"signatures":[{"name":"new SQLiteStatement","variant":"signature","kind":16384,"parameters":[{"name":"nativeDatabase","variant":"param","kind":32768,"type":{"type":"reference","name":"NativeDatabase","package":"expo-sqlite"}},{"name":"nativeStatement","variant":"param","kind":32768,"type":{"type":"reference","name":"NativeStatement","package":"expo-sqlite"}}],"type":{"type":"reference","name":"SQLiteStatement","package":"expo-sqlite"}}]},{"name":"executeAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"executeAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Run the prepared statement and return the ["},{"kind":"code","text":"`SQLiteExecuteAsyncResult`"},{"kind":"text","text":"](#sqliteexecuteasyncresult) instance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-sqlite","refersToTypeParameter":true}],"name":"SQLiteExecuteAsyncResult","package":"expo-sqlite"}],"name":"Promise","package":"typescript"}}]},{"name":"executeSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"executeSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Run the prepared statement and return the ["},{"kind":"code","text":"`SQLiteExecuteSyncResult`"},{"kind":"text","text":"](#sqliteexecutesyncresult) instance.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`SQLiteBindValue`"},{"kind":"text","text":"](#sqlitebindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"SQLiteBindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-sqlite","refersToTypeParameter":true}],"name":"SQLiteExecuteSyncResult","package":"expo-sqlite"}}]},{"name":"finalizeAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"finalizeAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Finalize the prepared statement. This will call the ["},{"kind":"code","text":"`sqlite3_finalize()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/finalize.html) C function under the hood.\n\nAttempting to access a finalized statement will result in an error.\n> **Note:** While expo-sqlite will automatically finalize any orphaned prepared statements upon closing the database, it is considered best practice to manually finalize prepared statements as soon as they are no longer needed. This helps to prevent resource leaks. You can use the "},{"kind":"code","text":"`try...finally`"},{"kind":"text","text":" statement to ensure that prepared statements are finalized even if an error occurs."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"finalizeSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"finalizeSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Finalize the prepared statement. This will call the ["},{"kind":"code","text":"`sqlite3_finalize()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/finalize.html) C function under the hood.\n\nAttempting to access a finalized statement will result in an error.\n> **Note:** While expo-sqlite will automatically finalize any orphaned prepared statements upon closing the database, it is considered best practice to manually finalize prepared statements as soon as they are no longer needed. This helps to prevent resource leaks. You can use the "},{"kind":"code","text":"`try...finally`"},{"kind":"text","text":" statement to ensure that prepared statements are finalized even if an error occurs."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"getColumnNamesAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getColumnNamesAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the column names of the prepared statement."}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"Promise","package":"typescript"}}]},{"name":"getColumnNamesSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getColumnNamesSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the column names of the prepared statement."}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]}]},{"name":"SQLiteExecuteAsyncResult","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A result returned by ["},{"kind":"code","text":"`SQLiteStatement.executeAsync()`"},{"kind":"text","text":"](#executeasyncparams)."}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"The result includes the ["},{"kind":"code","text":"`lastInsertRowId`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/last_insert_rowid.html) and ["},{"kind":"code","text":"`changes`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/changes.html) properties. You can get the information from the write operations.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('INSERT INTO test (value) VALUES (?)');\ntry {\n  const result = await statement.executeAsync(101);\n  console.log('lastInsertRowId:', result.lastInsertRowId);\n  console.log('changes:', result.changes);\n} finally {\n  await statement.finalizeAsync();\n}\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"The result implements the ["},{"kind":"code","text":"`AsyncIterator`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator) interface, so you can use it in "},{"kind":"code","text":"`for await...of`"},{"kind":"text","text":" loops.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT value FROM test WHERE value > ?');\ntry {\n  const result = await statement.executeAsync<{ value: number }>(100);\n  for await (const row of result) {\n    console.log('row value:', row.value);\n  }\n} finally {\n  await statement.finalizeAsync();\n}\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"If your write operations also return values, you can mix all of them together.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('INSERT INTO test (name, value) VALUES (?, ?) RETURNING name');\ntry {\n  const result = await statement.executeAsync<{ name: string }>('John Doe', 101);\n  console.log('lastInsertRowId:', result.lastInsertRowId);\n  console.log('changes:', result.changes);\n  for await (const row of result) {\n    console.log('name:', row.name);\n  }\n} finally {\n  await statement.finalizeAsync();\n}\n```"}]}]},"children":[{"name":"changes","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"The number of rows affected. Returned from the ["},{"kind":"code","text":"`sqlite3_changes()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/changes.html) function."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"lastInsertRowId","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"The last inserted row ID. Returned from the ["},{"kind":"code","text":"`sqlite3_last_insert_rowid()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/last_insert_rowid.html) function."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"getAllAsync","variant":"declaration","kind":2048,"signatures":[{"name":"getAllAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get all rows of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling ["},{"kind":"code","text":"`resetAsync()`"},{"kind":"text","text":"](#resetasync). Otherwise, an error will be thrown."}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T","package":"expo-sqlite","qualifiedName":"SQLiteExecuteAsyncResult.T","refersToTypeParameter":true}}],"name":"Promise","package":"typescript"}}]},{"name":"getFirstAsync","variant":"declaration","kind":2048,"signatures":[{"name":"getFirstAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the first row of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling ["},{"kind":"code","text":"`resetAsync()`"},{"kind":"text","text":"](#resetasync). Otherwise, an error will be thrown."}]},"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T","package":"expo-sqlite","qualifiedName":"SQLiteExecuteAsyncResult.T","refersToTypeParameter":true}]}],"name":"Promise","package":"typescript"}}]},{"name":"resetAsync","variant":"declaration","kind":2048,"signatures":[{"name":"resetAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Reset the prepared statement cursor. This will call the ["},{"kind":"code","text":"`sqlite3_reset()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/reset.html) C function under the hood."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}],"typeParameters":[{"name":"T","variant":"typeParam","kind":131072}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-sqlite","qualifiedName":"SQLiteExecuteAsyncResult.T","refersToTypeParameter":true}],"name":"AsyncIterableIterator","package":"typescript"}]},{"name":"SQLiteExecuteSyncResult","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A result returned by ["},{"kind":"code","text":"`SQLiteStatement.executeSync()`"},{"kind":"text","text":"](#executesyncparams).\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"The result includes the ["},{"kind":"code","text":"`lastInsertRowId`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/last_insert_rowid.html) and ["},{"kind":"code","text":"`changes`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/changes.html) properties. You can get the information from the write operations.\n"},{"kind":"code","text":"```ts\nconst statement = db.prepareSync('INSERT INTO test (value) VALUES (?)');\ntry {\n  const result = statement.executeSync(101);\n  console.log('lastInsertRowId:', result.lastInsertRowId);\n  console.log('changes:', result.changes);\n} finally {\n  statement.finalizeSync();\n}\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"The result implements the ["},{"kind":"code","text":"`Iterator`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) interface, so you can use it in "},{"kind":"code","text":"`for...of`"},{"kind":"text","text":" loops.\n"},{"kind":"code","text":"```ts\nconst statement = db.prepareSync('SELECT value FROM test WHERE value > ?');\ntry {\n  const result = statement.executeSync<{ value: number }>(100);\n  for (const row of result) {\n    console.log('row value:', row.value);\n  }\n} finally {\n  statement.finalizeSync();\n}\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"If your write operations also return values, you can mix all of them together.\n"},{"kind":"code","text":"```ts\nconst statement = db.prepareSync('INSERT INTO test (name, value) VALUES (?, ?) RETURNING name');\ntry {\n  const result = statement.executeSync<{ name: string }>('John Doe', 101);\n  console.log('lastInsertRowId:', result.lastInsertRowId);\n  console.log('changes:', result.changes);\n  for (const row of result) {\n    console.log('name:', row.name);\n  }\n} finally {\n  statement.finalizeSync();\n}\n```"}]}]},"children":[{"name":"changes","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"The number of rows affected. Returned from the ["},{"kind":"code","text":"`sqlite3_changes()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/changes.html) function."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"lastInsertRowId","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"The last inserted row ID. Returned from the ["},{"kind":"code","text":"`sqlite3_last_insert_rowid()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/last_insert_rowid.html) function."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"getAllSync","variant":"declaration","kind":2048,"signatures":[{"name":"getAllSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get all rows of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling ["},{"kind":"code","text":"`resetSync()`"},{"kind":"text","text":"](#resetsync). Otherwise, an error will be thrown."}]},"type":{"type":"array","elementType":{"type":"reference","name":"T","package":"expo-sqlite","qualifiedName":"SQLiteExecuteSyncResult.T","refersToTypeParameter":true}}}]},{"name":"getFirstSync","variant":"declaration","kind":2048,"signatures":[{"name":"getFirstSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the first row of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling ["},{"kind":"code","text":"`resetSync()`"},{"kind":"text","text":"](#resetsync). Otherwise, an error will be thrown."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T","package":"expo-sqlite","qualifiedName":"SQLiteExecuteSyncResult.T","refersToTypeParameter":true}]}}]},{"name":"resetSync","variant":"declaration","kind":2048,"signatures":[{"name":"resetSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Reset the prepared statement cursor. This will call the ["},{"kind":"code","text":"`sqlite3_reset()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/reset.html) C function under the hood."}]},"type":{"type":"intrinsic","name":"void"}}]}],"typeParameters":[{"name":"T","variant":"typeParam","kind":131072}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-sqlite","qualifiedName":"SQLiteExecuteSyncResult.T","refersToTypeParameter":true}],"name":"IterableIterator","package":"typescript"}]},{"name":"SQLiteOpenOptions","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Options for opening a database."}]},"children":[{"name":"enableCRSQLite","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to enable the CR-SQLite extension."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"enableChangeListener","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to call the ["},{"kind":"code","text":"`sqlite3_update_hook()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/update_hook.html) function and enable the "},{"kind":"code","text":"`onDatabaseChange`"},{"kind":"text","text":" events. You can later subscribe to the change events by ["},{"kind":"code","text":"`addDatabaseChangeListener`"},{"kind":"text","text":"](#sqliteadddatabasechangelistenerlistener)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"useNewConnection","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to create new connection even if connection with the same database name exists in cache."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"SQLiteProviderProps","variant":"declaration","kind":256,"children":[{"name":"children","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The children to render."}]},"type":{"type":"reference","name":"ReactNode","package":"@types/react","qualifiedName":"React.ReactNode"}},{"name":"databaseName","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The name of the database file to open."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"onError","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Handle errors from SQLiteProvider."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"rethrow the error"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Handle errors from SQLiteProvider."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"rethrow the error"}]}]},"parameters":[{"name":"error","variant":"param","kind":32768,"type":{"type":"reference","name":"Error","package":"typescript"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onInit","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A custom initialization handler to run before rendering the children.\nYou can use this to run database migrations or other setup tasks."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A custom initialization handler to run before rendering the children.\nYou can use this to run database migrations or other setup tasks."}]},"parameters":[{"name":"db","variant":"param","kind":32768,"type":{"type":"reference","name":"SQLiteDatabase","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}},{"name":"options","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Open options."}]},"type":{"type":"reference","name":"SQLiteOpenOptions","package":"expo-sqlite"}},{"name":"useSuspense","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Enable ["},{"kind":"code","text":"`React.Suspense`"},{"kind":"text","text":"](https://react.dev/reference/react/Suspense) integration."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nexport default function App() {\n  return (\n    <Suspense fallback={<Text>Loading...</Text>}>\n      <SQLiteProvider databaseName=\"test.db\" useSuspense={true}>\n        <Main />\n      </SQLiteProvider>\n    </Suspense>\n  );\n}\n```"}]}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"SQLiteRunResult","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"A result returned by ["},{"kind":"code","text":"`SQLiteDatabase.runAsync`"},{"kind":"text","text":"](#runasyncsource-params) or ["},{"kind":"code","text":"`SQLiteDatabase.runSync`"},{"kind":"text","text":"](#runsyncsource-params)."}]},"children":[{"name":"changes","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The number of rows affected. Returned from the ["},{"kind":"code","text":"`sqlite3_changes()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/changes.html) function."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"lastInsertRowId","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The last inserted row ID. Returned from the ["},{"kind":"code","text":"`sqlite3_last_insert_rowid()`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/last_insert_rowid.html) function."}]},"type":{"type":"intrinsic","name":"number"}}]},{"name":"DatabaseChangeEvent","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"The event payload for the listener of ["},{"kind":"code","text":"`addDatabaseChangeListener`"},{"kind":"text","text":"](#sqliteadddatabasechangelistenerlistener)"}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"databaseFilePath","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The absolute file path to the database."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"databaseName","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The database name. The value would be "},{"kind":"code","text":"`main`"},{"kind":"text","text":" by default and other database names if you use "},{"kind":"code","text":"`ATTACH DATABASE`"},{"kind":"text","text":" statement."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"rowId","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The changed row ID."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"tableName","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The table name."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"SQLiteBindParams","variant":"declaration","kind":2097152,"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"SQLiteBindValue","package":"expo-sqlite"}],"name":"Record","package":"typescript"},{"type":"array","elementType":{"type":"reference","name":"SQLiteBindValue","package":"expo-sqlite"}}]}},{"name":"SQLiteBindValue","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Bind parameters to the prepared statement.\nYou can either pass the parameters in the following forms:"}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"A single array for unnamed parameters.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\nconst result = await statement.executeAsync(['test1', 789]);\nconst firstRow = await result.getFirstAsync();\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"Variadic arguments for unnamed parameters.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\nconst result = await statement.executeAsync('test1', 789);\nconst firstRow = await result.getFirstAsync();\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"A single object for [named parameters](https://www.sqlite.org/lang_expr.html)\n\nWe support multiple named parameter forms such as "},{"kind":"code","text":"`:VVV`"},{"kind":"text","text":", "},{"kind":"code","text":"`@VVV`"},{"kind":"text","text":", and "},{"kind":"code","text":"`$VVV`"},{"kind":"text","text":". We recommend using "},{"kind":"code","text":"`$VVV`"},{"kind":"text","text":" because JavaScript allows using "},{"kind":"code","text":"`$`"},{"kind":"text","text":" in identifiers without escaping.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = $value AND intValue = $intValue');\nconst result = await statement.executeAsync({ $value: 'test1', $intValue: 789 });\nconst firstRow = await result.getFirstAsync();\n```"}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"},{"type":"reference","name":"Uint8Array","package":"typescript"}]}},{"name":"SQLiteVariadicBindParams","variant":"declaration","kind":2097152,"type":{"type":"array","elementType":{"type":"reference","name":"SQLiteBindValue","package":"expo-sqlite"}}},{"name":"SQLiteProvider","variant":"declaration","kind":64,"signatures":[{"name":"SQLiteProvider","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Context.Provider component that provides a SQLite database to all children.\nAll descendants of this component will be able to access the database using the ["},{"kind":"code","text":"`useSQLiteContext`"},{"kind":"text","text":"](#usesqlitecontext) hook."}]},"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"SQLiteProviderProps","package":"expo-sqlite"}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}}]},{"name":"addDatabaseChangeListener","variant":"declaration","kind":64,"signatures":[{"name":"addDatabaseChangeListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Add a listener for database changes.\n> Note: to enable this feature, you must set ["},{"kind":"code","text":"`enableChangeListener`"},{"kind":"text","text":" to "},{"kind":"code","text":"`true`"},{"kind":"text","text":"](#sqliteopenoptions) when opening the database."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":" object that you can call "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" on when you would like to unsubscribe the listener."}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function that receives the "},{"kind":"code","text":"`databaseName`"},{"kind":"text","text":", "},{"kind":"code","text":"`databaseFilePath`"},{"kind":"text","text":", "},{"kind":"code","text":"`tableName`"},{"kind":"text","text":" and "},{"kind":"code","text":"`rowId`"},{"kind":"text","text":" of the modified data."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"DatabaseChangeEvent","package":"expo-sqlite"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"Subscription","package":"expo-modules-core"}}]},{"name":"deleteDatabaseAsync","variant":"declaration","kind":64,"signatures":[{"name":"deleteDatabaseAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Delete a database file."}]},"parameters":[{"name":"databaseName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to delete."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"deleteDatabaseSync","variant":"declaration","kind":64,"signatures":[{"name":"deleteDatabaseSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Delete a database file.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"databaseName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to delete."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"openDatabaseAsync","variant":"declaration","kind":64,"signatures":[{"name":"openDatabaseAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Open a database."}]},"parameters":[{"name":"databaseName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to open."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Open options."}]},"type":{"type":"reference","name":"SQLiteOpenOptions","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"SQLiteDatabase","package":"expo-sqlite"}],"name":"Promise","package":"typescript"}}]},{"name":"openDatabaseSync","variant":"declaration","kind":64,"signatures":[{"name":"openDatabaseSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Open a database.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"databaseName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to open."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Open options."}]},"type":{"type":"reference","name":"SQLiteOpenOptions","package":"expo-sqlite"}}],"type":{"type":"reference","name":"SQLiteDatabase","package":"expo-sqlite"}}]},{"name":"useSQLiteContext","variant":"declaration","kind":64,"signatures":[{"name":"useSQLiteContext","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A global hook for accessing the SQLite database across components.\nThis hook should only be used within a ["},{"kind":"code","text":"`<SQLiteProvider>`"},{"kind":"text","text":"](#sqliteprovider) component."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nexport default function App() {\n  return (\n    <SQLiteProvider databaseName=\"test.db\">\n      <Main />\n    </SQLiteProvider>\n  );\n}\n\nexport function Main() {\n  const db = useSQLiteContext();\n  console.log('sqlite version', db.getSync('SELECT sqlite_version()'));\n  return <View />\n}\n```"}]}]},"type":{"type":"reference","name":"SQLiteDatabase","package":"expo-sqlite"}}]}],"packageName":"expo-sqlite"}