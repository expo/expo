{"name":"expo-sqlite-next","variant":"project","kind":1,"children":[{"name":"Database","variant":"declaration","kind":128,"comment":{"summary":[{"kind":"text","text":"A SQLite database."}]},"children":[{"name":"constructor","variant":"declaration","kind":512,"signatures":[{"name":"new Database","variant":"signature","kind":16384,"parameters":[{"name":"dbName","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"param","kind":32768,"type":{"type":"reference","name":"OpenOptions","package":"expo-sqlite"}},{"name":"nativeDatabase","variant":"param","kind":32768,"type":{"type":"reference","name":"NativeDatabase","package":"expo-sqlite"}}],"type":{"type":"reference","name":"Database","package":"expo-sqlite"}}]},{"name":"dbName","variant":"declaration","kind":1024,"flags":{"isPublic":true,"isReadonly":true},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"declaration","kind":1024,"flags":{"isPublic":true,"isReadonly":true},"type":{"type":"reference","name":"OpenOptions","package":"expo-sqlite"}},{"name":"allAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"allAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for ["},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) and ["},{"kind":"code","text":"`Statement.allAsync()`"},{"kind":"text","text":"](#allasyncparams).\nUnlike ["},{"kind":"code","text":"`Statement.allAsync()`"},{"kind":"text","text":"](#allasyncparams), this method finalizes the statement after execution."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\n// For unnamed parameters, you pass values in an array.\ndb.allAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', [1, 'Hello']);\n\n// For unnamed parameters, you pass values in variadic arguments.\ndb.allAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', 1, 'Hello');\n\n// For named parameters, you should pass values in object.\ndb.allAsync('SELECT * FROM test WHERE intValue = $intValue AND name = $name', { $intValue: 1, $name: 'Hello' });\n```"}]}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T","refersToTypeParameter":true}}],"name":"Promise","package":"typescript"}}]},{"name":"allSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"allSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for ["},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) and ["},{"kind":"code","text":"`Statement.allSync()`"},{"kind":"text","text":"](#allsyncparams).\nUnlike ["},{"kind":"code","text":"`Statement.allSync()`"},{"kind":"text","text":"](#allsyncparams), this method finalizes the statement after execution.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"array","elementType":{"type":"reference","name":"T","refersToTypeParameter":true}}}]},{"name":"closeAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"closeAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Close the database."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"closeSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"closeSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Close the database."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"eachAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"eachAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for ["},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) and ["},{"kind":"code","text":"`Statement.eachAsync()`"},{"kind":"text","text":"](#eachasyncparams).\nUnlike ["},{"kind":"code","text":"`Statement.eachAsync()`"},{"kind":"text","text":"](#eachasyncparams), this method finalizes the statement after execution."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","refersToTypeParameter":true}],"name":"AsyncIterableIterator","package":"typescript"}}]},{"name":"eachSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"eachSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for ["},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) and ["},{"kind":"code","text":"`Statement.eachSync()`"},{"kind":"text","text":"](#eachsyncparams).\nUnlike ["},{"kind":"code","text":"`Statement.eachSync()`"},{"kind":"text","text":"](#eachsyncparams), this method finalizes the statement after execution.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","refersToTypeParameter":true}],"name":"IterableIterator","package":"typescript"}}]},{"name":"execAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"execAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute all SQL queries in the supplied string.\n> Note: The queries are not escaped for you! Be careful when constructing your queries."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing all the SQL queries."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"execSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"execSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute all SQL queries in the supplied string.\n\n> **Note:** The queries are not escaped for you! Be careful when constructing your queries.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing all the SQL queries."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"getAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for ["},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) and ["},{"kind":"code","text":"`Statement.getAsync()`"},{"kind":"text","text":"](#getasyncparams).\nUnlike ["},{"kind":"code","text":"`Statement.getAsync()`"},{"kind":"text","text":"](#getasyncparams), this method finalizes the statement after execution."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T","refersToTypeParameter":true}]}],"name":"Promise","package":"typescript"}}]},{"name":"getSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for ["},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) and ["},{"kind":"code","text":"`Statement.getSync()`"},{"kind":"text","text":"](#getsyncparams).\nUnlike ["},{"kind":"code","text":"`Statement.getSync()`"},{"kind":"text","text":"](#getsyncparams), this method finalizes the statement after execution.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T","refersToTypeParameter":true}]}}]},{"name":"isInTransactionAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"isInTransactionAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronous call to return whether the database is currently in a transaction."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript"}}]},{"name":"isInTransactionSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"isInTransactionSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Synchronous call to return whether the database is currently in a transaction."}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"prepareAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"prepareAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Prepare a SQL statement."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Statement","package":"expo-sqlite"}],"name":"Promise","package":"typescript"}}]},{"name":"prepareSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"prepareSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Prepare a SQL statement.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"Statement","package":"expo-sqlite"}}]},{"name":"runAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for ["},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) and ["},{"kind":"code","text":"`Statement.runAsync()`"},{"kind":"text","text":"](#runasyncparams).\nUnlike ["},{"kind":"code","text":"`Statement.runAsync()`"},{"kind":"text","text":"](#runasyncparams), this method finalizes the statement after execution."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RunResult","package":"expo-sqlite"}],"name":"Promise","package":"typescript"}}]},{"name":"runSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Shorthand for ["},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) and ["},{"kind":"code","text":"`Statement.runSync()`"},{"kind":"text","text":"](#runsyncparams).\nUnlike ["},{"kind":"code","text":"`Statement.runSync()`"},{"kind":"text","text":"](#runsyncparams), this method finalizes the statement after execution.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"source","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A string containing the SQL query."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","name":"RunResult","package":"expo-sqlite"}}]},{"name":"transactionAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"transactionAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\n> **Note:** This transaction is not exclusive and can be interrupted by other async queries."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\ndb.transactionAsync(async () => {\n  await db.execAsync('UPDATE test SET name = \"aaa\"');\n\n  //\n  // We cannot control the order of async/await order, so order of execution is not guaranteed.\n  // The following UPDATE query out of transaction may be executed here and break the expectation.\n  //\n\n  const result = await db.getAsync<{ name: string }>('SELECT name FROM Users');\n  expect(result?.name).toBe('aaa');\n});\ndb.execAsync('UPDATE test SET name = \"bbb\"');\n```"},{"kind":"text","text":"\nIf you worry about the order of execution, use "},{"kind":"code","text":"`transactionExclusiveAsync`"},{"kind":"text","text":" instead."}]}]},"parameters":[{"name":"task","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"transactionExclusiveAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"transactionExclusiveAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\nThe transaction may be exclusive.\nAs long as the transaction is converted into a write transaction,\nthe other async write queries will abort with "},{"kind":"code","text":"`database is locked`"},{"kind":"text","text":" error."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\ndb.transactionExclusiveAsync(async (txn) => {\n  await txn.execAsync('UPDATE test SET name = \"aaa\"');\n});\n```"}]}]},"parameters":[{"name":"task","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction. Any queries inside the transaction must be executed on the "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" object.\nThe "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" object has the same interfaces as the "},{"kind":"code","text":"`Database`"},{"kind":"text","text":" object. You can use "},{"kind":"code","text":"`txn`"},{"kind":"text","text":" like a "},{"kind":"code","text":"`Database`"},{"kind":"text","text":" object."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"txn","variant":"param","kind":32768,"type":{"type":"reference","name":"Transaction","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"transactionSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"transactionSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Execute a transaction and automatically commit/rollback based on the "},{"kind":"code","text":"`task`"},{"kind":"text","text":" result.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"task","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An async function to execute within a transaction."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]}]},{"name":"Statement","variant":"declaration","kind":128,"comment":{"summary":[{"kind":"text","text":"A prepared statement returned by ["},{"kind":"code","text":"`Database.prepareAsync()`"},{"kind":"text","text":"](#prepareasyncsource) or ["},{"kind":"code","text":"`Database.prepareSync()`"},{"kind":"text","text":"](#preparesyncsource) that can be binded with parameters and executed."}]},"children":[{"name":"constructor","variant":"declaration","kind":512,"signatures":[{"name":"new Statement","variant":"signature","kind":16384,"parameters":[{"name":"nativeDatabase","variant":"param","kind":32768,"type":{"type":"reference","name":"NativeDatabase","package":"expo-sqlite"}},{"name":"nativeStatement","variant":"param","kind":32768,"type":{"type":"reference","name":"NativeStatement","package":"expo-sqlite"}}],"type":{"type":"reference","name":"Statement","package":"expo-sqlite"}}]},{"name":"allAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"allAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get all rows from the prepared statement."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"T","refersToTypeParameter":true}}],"name":"Promise","package":"typescript"}}]},{"name":"allSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"allSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get all rows from the prepared statement.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"array","elementType":{"type":"reference","name":"T","refersToTypeParameter":true}}}]},{"name":"eachAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"eachAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Iterate the prepared statement and return results as an async iterable."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test');\nfor await (const row of statement.eachAsync<any>()) {\n  console.log(row);\n}\nawait statement.finalizeAsync();\n```"}]}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","refersToTypeParameter":true}],"name":"AsyncIterableIterator","package":"typescript"}}]},{"name":"eachSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"eachSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Iterate the prepared statement and return results as an iterable.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","refersToTypeParameter":true}],"name":"IterableIterator","package":"typescript"}}]},{"name":"finalizeAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"finalizeAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Finalize the prepared statement.\n> **Note:** Remember to finalize the prepared statement whenever you call "},{"kind":"code","text":"`prepareAsync()`"},{"kind":"text","text":" to avoid resource leaks."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"finalizeSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"finalizeSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Finalize the prepared statement.\n\n> **Note:** Remember to finalize the prepared statement whenever you call "},{"kind":"code","text":"`prepareSync()`"},{"kind":"text","text":" to avoid resource leaks."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"getAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get one row from the prepared statement."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T","refersToTypeParameter":true}]}],"name":"Promise","package":"typescript"}}]},{"name":"getColumnNamesAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getColumnNamesAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the column names of the prepared statement."}]},"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"intrinsic","name":"string"}}],"name":"Promise","package":"typescript"}}]},{"name":"getColumnNamesSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getColumnNamesSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the column names of the prepared statement."}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"name":"getSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"getSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get one row from the prepared statement.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"typeParameter":[{"name":"T","variant":"typeParam","kind":131072}],"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"T","refersToTypeParameter":true}]}}]},{"name":"resetAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"resetAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Reset the prepared statement cursor."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"resetSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"resetSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Reset the prepared statement cursor."}]},"type":{"type":"intrinsic","name":"void"}}]},{"name":"runAsync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Run the prepared statement and return the result."}]},"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RunResult","package":"expo-sqlite"}],"name":"Promise","package":"typescript"}}]},{"name":"runSync","variant":"declaration","kind":2048,"flags":{"isPublic":true},"signatures":[{"name":"runSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Run the prepared statement and return the result.\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"params","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The parameters to bind to the prepared statement. You can pass values in array, object, or variadic arguments. See ["},{"kind":"code","text":"`BindValue`"},{"kind":"text","text":"](#bindvalue) for more information about binding values."}]},"type":{"type":"reference","name":"BindParams","package":"expo-sqlite"}}],"type":{"type":"reference","name":"RunResult","package":"expo-sqlite"}}]}]},{"name":"OpenOptions","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Options for opening a database."}]},"children":[{"name":"enableCRSQLite","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to enable the CR-SQLite extension."}],"blockTags":[{"tag":"@default","content":[{"kind":"code","text":"```ts\nfalse\n```"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"enableChangeListener","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to call the ["},{"kind":"code","text":"`sqlite3_update_hook`"},{"kind":"text","text":"](https://www.sqlite.org/c3ref/update_hook.html) function and enable the "},{"kind":"code","text":"`onDatabaseChange`"},{"kind":"text","text":" events. You can later subscribe to the change events by ["},{"kind":"code","text":"`addDatabaseChangeListener`"},{"kind":"text","text":"](#sqliteadddatabasechangelistenerlistener)."}],"blockTags":[{"tag":"@default","content":[{"kind":"code","text":"```ts\nfalse\n```"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"useNewConnection","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to create new connection even if connection with the same database name exists in cache."}],"blockTags":[{"tag":"@default","content":[{"kind":"code","text":"```ts\nfalse\n```"}]}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"RunResult","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Result of a "},{"kind":"code","text":"`runAsync`"},{"kind":"text","text":" call."}]},"children":[{"name":"changes","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The number of rows affected."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"lastInsertRowid","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The last inserted row ID."}]},"type":{"type":"intrinsic","name":"number"}}]},{"name":"SQLiteProviderProps","variant":"declaration","kind":256,"children":[{"name":"children","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The children to render."}]},"type":{"type":"reference","name":"ReactNode","package":"@types/react","qualifiedName":"React.ReactNode"}},{"name":"dbName","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The name of the database file to open."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"errorHandler","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Handle errors from SQLiteProvider."}],"blockTags":[{"tag":"@default","content":[{"kind":"code","text":"```ts\nrethrow the error\n```"}]}]},"parameters":[{"name":"error","variant":"param","kind":32768,"type":{"type":"reference","name":"Error","package":"typescript"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"initHandler","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A custom initialization handler to run before rendering the children.\nYou can use this to run database migrations or other setup tasks."}]},"parameters":[{"name":"db","variant":"param","kind":32768,"type":{"type":"reference","name":"Database","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}},{"name":"loadingFallback","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A custom loading fallback to render before the database is ready."}],"blockTags":[{"tag":"@default","content":[{"kind":"code","text":"```ts\nnull\n```"}]}]},"type":{"type":"reference","name":"ReactNode","package":"@types/react","qualifiedName":"React.ReactNode"}},{"name":"options","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Open options."}]},"type":{"type":"reference","name":"OpenOptions","package":"expo-sqlite"}}]},{"name":"BindParams","variant":"declaration","kind":4194304,"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"BindValue","package":"expo-sqlite"}],"name":"Record","package":"typescript"},{"type":"array","elementType":{"type":"reference","name":"BindValue","package":"expo-sqlite"}}]}},{"name":"BindValue","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"Bind parameters to the prepared statement.\nYou can either pass the parameters in the following forms:"}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"- A single array for unnamed parameters.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\nawait statement.getAsync(['test1', 789]);\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"- Variadic arguments for unnamed parameters.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');\nawait statement.getAsync('test1', 789);\n```"}]},{"tag":"@example","content":[{"kind":"text","text":"- A single object for [named parameters](https://www.sqlite.org/lang_expr.html)\n\nWe support multiple named parameter forms such as "},{"kind":"code","text":"`:VVV`"},{"kind":"text","text":", "},{"kind":"code","text":"`@VVV`"},{"kind":"text","text":", and "},{"kind":"code","text":"`$VVV`"},{"kind":"text","text":". We recommend using "},{"kind":"code","text":"`$VVV`"},{"kind":"text","text":" because JavaScript allows using "},{"kind":"code","text":"`$`"},{"kind":"text","text":" in identifiers without escaping.\n"},{"kind":"code","text":"```ts\nconst statement = await db.prepareAsync('SELECT * FROM test WHERE value = $value AND intValue = $intValue');\nawait statement.getAsync({ $value: 'test1', $intValue: 789 });\n```"}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"literal","value":null},{"type":"intrinsic","name":"boolean"}]}},{"name":"DatabaseChangeEvent","variant":"declaration","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The event payload for the listener of ["},{"kind":"code","text":"`addDatabaseChangeListener`"},{"kind":"text","text":"](#sqliteadddatabasechangelistenerlistener)"}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"dbFilePath","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The absolute file path to the database."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"dbName","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The database name. The value would be "},{"kind":"code","text":"`main`"},{"kind":"text","text":" by default and other database names if you use "},{"kind":"code","text":"`ATTACH DATABASE`"},{"kind":"text","text":" statement."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"rowId","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The changed row ID."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"tableName","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The table name."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"VariadicBindParams","variant":"declaration","kind":4194304,"type":{"type":"array","elementType":{"type":"reference","name":"BindValue","package":"expo-sqlite"}}},{"name":"SQLiteProvider","variant":"declaration","kind":64,"signatures":[{"name":"SQLiteProvider","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Context.Provider component that provides a SQLite database to all children.\nAll descendants of this component will be able to access the database using the ["},{"kind":"code","text":"`useSQLiteContext`"},{"kind":"text","text":"](#usesqlitecontext) hook."}]},"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"SQLiteProviderProps","package":"expo-sqlite"}}],"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element"}]}}]},{"name":"addDatabaseChangeListener","variant":"declaration","kind":64,"signatures":[{"name":"addDatabaseChangeListener","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Add a listener for database changes.\n> Note: to enable this feature, you must set ["},{"kind":"code","text":"`enableChangeListener`"},{"kind":"text","text":" to "},{"kind":"code","text":"`true`"},{"kind":"text","text":"](#openoptions) when opening the database."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A "},{"kind":"code","text":"`Subscription`"},{"kind":"text","text":" object that you can call "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" on when you would like to unsubscribe the listener."}]}]},"parameters":[{"name":"listener","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function that receives the "},{"kind":"code","text":"`dbFilePath`"},{"kind":"text","text":", "},{"kind":"code","text":"`dbName`"},{"kind":"text","text":", "},{"kind":"code","text":"`tableName`"},{"kind":"text","text":" and "},{"kind":"code","text":"`rowId`"},{"kind":"text","text":" of the modified data."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"DatabaseChangeEvent","package":"expo-sqlite"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"Subscription","package":"expo-modules-core"}}]},{"name":"deleteDatabaseAsync","variant":"declaration","kind":64,"signatures":[{"name":"deleteDatabaseAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Delete a database file."}]},"parameters":[{"name":"dbName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to delete."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"deleteDatabaseSync","variant":"declaration","kind":64,"signatures":[{"name":"deleteDatabaseSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Delete a database file.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"dbName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to delete."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"openDatabaseAsync","variant":"declaration","kind":64,"signatures":[{"name":"openDatabaseAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Open a database."}]},"parameters":[{"name":"dbName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to open."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Open options."}]},"type":{"type":"reference","name":"OpenOptions","package":"expo-sqlite"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Database","package":"expo-sqlite"}],"name":"Promise","package":"typescript"}}]},{"name":"openDatabaseSync","variant":"declaration","kind":64,"signatures":[{"name":"openDatabaseSync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Open a database.\n\n> **Note:** Running heavy tasks with this function can block the JavaScript thread and affect performance."}]},"parameters":[{"name":"dbName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name of the database file to open."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Open options."}]},"type":{"type":"reference","name":"OpenOptions","package":"expo-sqlite"}}],"type":{"type":"reference","name":"Database","package":"expo-sqlite"}}]},{"name":"useSQLiteContext","variant":"declaration","kind":64,"signatures":[{"name":"useSQLiteContext","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A global hook for accessing the SQLite database across components.\nThis hook should only be used within a ["},{"kind":"code","text":"`<SQLiteProvider>`"},{"kind":"text","text":"](#sqliteprovider) component."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nexport default function App() {\n  return (\n    <SQLiteProvider dbName=\"test.db\">\n      <Main />\n    </SQLiteProvider>\n  );\n}\n\nexport function Main() {\n  const db = useSQLiteContext();\n  console.log('sqlite version', db.getSync('SELECT sqlite_version()'));\n  return <View />\n}\n```"}]}]},"type":{"type":"reference","name":"Database","package":"expo-sqlite"}}]}],"packageName":"expo-sqlite"}