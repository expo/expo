{"name":"expo-asset","variant":"project","kind":1,"children":[{"name":"Asset","variant":"declaration","kind":128,"comment":{"summary":[{"kind":"text","text":"The "},{"kind":"code","text":"`Asset`"},{"kind":"text","text":" class represents an asset in your app. It gives metadata about the asset (such as its\nname and type) and provides facilities to load the asset data."}]},"children":[{"name":"constructor","variant":"declaration","kind":512,"signatures":[{"name":"new Asset","variant":"signature","kind":16384,"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"AssetDescriptor","package":"expo-asset"}}],"type":{"type":"reference","name":"Asset","package":"expo-asset"}}]},{"name":"downloaded","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"name":"downloading","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"name":"hash","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The MD5 hash of the asset's data."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]},"defaultValue":"null"},{"name":"height","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after "},{"kind":"code","text":"`@`"},{"kind":"text","text":" in the filename, or "},{"kind":"code","text":"`1`"},{"kind":"text","text":" if not present."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]},"defaultValue":"null"},{"name":"localUri","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If the asset has been downloaded (by calling ["},{"kind":"code","text":"`downloadAsync()`"},{"kind":"text","text":"](#downloadasync)), the\n"},{"kind":"code","text":"`file://`"},{"kind":"text","text":" URI pointing to the local file on the device that contains the asset data."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]},"defaultValue":"null"},{"name":"name","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The name of the asset file without the extension. Also without the part from "},{"kind":"code","text":"`@`"},{"kind":"text","text":" onward in the\nfilename (used to specify scale factor for images)."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"type","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The extension of the asset filename."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"uri","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A URI that points to the asset's data on the remote server. When running the published version\nof your app, this refers to the location on Expo's asset server where Expo has stored your\nasset. When running the app from Expo CLI during development, this URI points to Expo CLI's\nserver running on your computer and the asset is served directly from your computer. If you\nare not using Classic Updates (legacy), this field should be ignored as we ensure your assets\nare on device before before running your application logic."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"width","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If the asset is an image, the width of the image data divided by the scale factor. The scale\nfactor is the number after "},{"kind":"code","text":"`@`"},{"kind":"text","text":" in the filename, or "},{"kind":"code","text":"`1`"},{"kind":"text","text":" if not present."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"}]},"defaultValue":"null"},{"name":"downloadAsync","variant":"declaration","kind":2048,"signatures":[{"name":"downloadAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Downloads the asset data to a local file in the device's cache directory. Once the returned\npromise is fulfilled without error, the ["},{"kind":"code","text":"`localUri`"},{"kind":"text","text":"](#assetlocaluri) field of this asset points\nto a local file containing the asset data. The asset is only downloaded if an up-to-date local\nfile for the asset isn't already present due to an earlier download. The downloaded "},{"kind":"code","text":"`Asset`"},{"kind":"text","text":"\nwill be returned when the promise is resolved."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a Promise which fulfills with an "},{"kind":"code","text":"`Asset`"},{"kind":"text","text":" instance."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Asset","package":"expo-asset"}],"name":"Promise","package":"typescript"}}]},{"name":"fromMetadata","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"fromMetadata","variant":"signature","kind":4096,"parameters":[{"name":"meta","variant":"param","kind":32768,"type":{"type":"reference","name":"AssetMetadata","package":"expo-asset"}}],"type":{"type":"reference","name":"Asset","package":"expo-asset"}}]},{"name":"fromModule","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"fromModule","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the ["},{"kind":"code","text":"`Asset`"},{"kind":"text","text":"](#asset) instance representing an asset given its module or URL."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The ["},{"kind":"code","text":"`Asset`"},{"kind":"text","text":"](#asset) instance for the asset."}]}]},"parameters":[{"name":"virtualAssetModule","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The value of "},{"kind":"code","text":"`require('path/to/file')`"},{"kind":"text","text":" for the asset or external\nnetwork URL"}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}}],"type":{"type":"reference","name":"Asset","package":"expo-asset"}}]},{"name":"fromURI","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"fromURI","variant":"signature","kind":4096,"parameters":[{"name":"uri","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"Asset","package":"expo-asset"}}]},{"name":"loadAsync","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"loadAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A helper that wraps "},{"kind":"code","text":"`Asset.fromModule(module).downloadAsync`"},{"kind":"text","text":" for convenience."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a Promise that fulfills with an array of "},{"kind":"code","text":"`Asset`"},{"kind":"text","text":"s when the asset(s) has been\nsaved to disk."}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nconst [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n```"}]}]},"parameters":[{"name":"moduleId","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"An array of "},{"kind":"code","text":"`require('path/to/file')`"},{"kind":"text","text":" or external network URLs. Can also be\njust one module or URL without an Array."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"array","elementType":{"type":"intrinsic","name":"number"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"Asset","package":"expo-asset"}}],"name":"Promise","package":"typescript"}}]}]},{"name":"AssetDescriptor","variant":"declaration","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"hash","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"height","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}},{"name":"name","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"type","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"uri","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"width","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"literal","value":null}]}}]}}},{"name":"AssetMetadata","variant":"declaration","kind":4194304,"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"PackagerAsset","qualifiedName":"unknown"},{"type":"union","types":[{"type":"literal","value":"httpServerLocation"},{"type":"literal","value":"name"},{"type":"literal","value":"hash"},{"type":"literal","value":"type"},{"type":"literal","value":"scales"},{"type":"literal","value":"width"},{"type":"literal","value":"height"}]}],"name":"Pick","package":"typescript"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"fileHashes","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"name":"fileUris","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"name":"uri","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}}]}}]}},{"name":"useAssets","variant":"declaration","kind":64,"signatures":[{"name":"useAssets","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Downloads and stores one or more assets locally.\nAfter the assets are loaded, this hook returns a list of asset instances.\nIf something went wrong when loading the assets, an error is returned.\n\n> Note, the assets are not \"reloaded\" when you dynamically change the asset list."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns an array containing:\n- on the first position, a list of all loaded assets. If they aren't loaded yet, this value is\n  "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":".\n- on the second position, an error which encountered when loading the assets. If there was no\n  error, this value is "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nconst [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);\n\nreturn assets ? <Image source={assets[0]} /> : null;\n```"}]}]},"parameters":[{"name":"moduleIds","variant":"param","kind":32768,"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"array","elementType":{"type":"intrinsic","name":"number"}}]}}],"type":{"type":"tuple","elements":[{"type":"union","types":[{"type":"array","elementType":{"type":"reference","name":"Asset","package":"expo-asset"}},{"type":"intrinsic","name":"undefined"}]},{"type":"union","types":[{"type":"reference","name":"Error","package":"typescript"},{"type":"intrinsic","name":"undefined"}]}]}}]}],"packageName":"expo-asset"}