{"name":"expo-font","variant":"project","kind":1,"children":[{"name":"FontDisplay","variant":"declaration","kind":8,"comment":{"summary":[{"kind":"text","text":"Sets the [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display)\nfor a given typeface. The default font value on web is "},{"kind":"code","text":"`FontDisplay.AUTO`"},{"kind":"text","text":".\nEven though setting the "},{"kind":"code","text":"`fontDisplay`"},{"kind":"text","text":" does nothing on native platforms, the default behavior\nemulates "},{"kind":"code","text":"`FontDisplay.SWAP`"},{"kind":"text","text":" on flagship devices like iOS, Samsung, Pixel, etc. Default\nfunctionality varies on One Plus devices. In the browser this value is set in the generated\n"},{"kind":"code","text":"`@font-face`"},{"kind":"text","text":" CSS block and not as a style property meaning you cannot dynamically change this\nvalue based on the element it's used in."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"children":[{"name":"AUTO","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"__(Default)__ The font display strategy is defined by the user agent or platform.\nThis generally defaults to the text being invisible until the font is loaded.\nGood for buttons or banners that require a specific treatment."}]},"type":{"type":"literal","value":"auto"}},{"name":"BLOCK","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"The text will be invisible until the font has loaded. If the font fails to load then nothing\nwill appear - it's best to turn this off when debugging missing text."}]},"type":{"type":"literal","value":"block"}},{"name":"FALLBACK","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Splits the behavior between "},{"kind":"code","text":"`SWAP`"},{"kind":"text","text":" and "},{"kind":"code","text":"`BLOCK`"},{"kind":"text","text":".\nThere will be a [100ms timeout](https://developers.google.com/web/updates/2016/02/font-display?hl=en)\nwhere the text with a custom font is invisible, after that the text will either swap to the\nstyled text or it'll show the unstyled text and continue to load the custom font. This is good\nfor buttons that need a custom font but should also be quickly available to screen-readers."}]},"type":{"type":"literal","value":"fallback"}},{"name":"OPTIONAL","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"This works almost identically to "},{"kind":"code","text":"`FALLBACK`"},{"kind":"text","text":", the only difference is that the browser will\ndecide to load the font based on slow connection speed or critical resource demand."}]},"type":{"type":"literal","value":"optional"}},{"name":"SWAP","variant":"declaration","kind":16,"comment":{"summary":[{"kind":"text","text":"Fallback text is rendered immediately with a default font while the desired font is loaded.\nThis is good for making the content appear to load instantly and is usually preferred."}]},"type":{"type":"literal","value":"swap"}}]},{"name":"FontResource","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"An object used to dictate the resource that is loaded into the provided font namespace when used\nwith ["},{"kind":"code","text":"`loadAsync`"},{"kind":"text","text":"](#loadasyncfontfamilyorfontmap-source)."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"default","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"string"}},{"name":"display","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Sets the ["},{"kind":"code","text":"`font-display`"},{"kind":"text","text":"](#fontdisplay) property for a given typeface in the browser."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"reference","target":6019,"name":"FontDisplay","package":"expo-font"}},{"name":"uri","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}}]}}},{"name":"FontSource","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"The different types of assets you can provide to the ["},{"kind":"code","text":"`loadAsync()`"},{"kind":"text","text":"](#loadasyncfontfamilyorfontmap-source) function.\nA font source can be a URI, a module ID, or an Expo Asset."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"reference","target":{"sourceFileName":"packages/expo-asset/src/Asset.ts","qualifiedName":"Asset"},"name":"Asset","package":"expo-asset"},{"type":"reference","target":6026,"name":"FontResource","package":"expo-font"}]}},{"name":"getLoadedFonts","variant":"declaration","kind":64,"signatures":[{"name":"getLoadedFonts","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Synchronously get all the fonts that have been loaded.\nThis includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using "},{"kind":"code","text":"`loadAsync`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns array of font family names that have been loaded."}]}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}}]},{"name":"isLoaded","variant":"declaration","kind":64,"signatures":[{"name":"isLoaded","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Synchronously detect if the font for "},{"kind":"code","text":"`fontFamily`"},{"kind":"text","text":" has finished loading."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the font has fully loaded."}]}]},"parameters":[{"name":"fontFamily","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name used to load the "},{"kind":"code","text":"`FontResource`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"isLoading","variant":"declaration","kind":64,"signatures":[{"name":"isLoading","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Synchronously detect if the font for "},{"kind":"code","text":"`fontFamily`"},{"kind":"text","text":" is still being loaded."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the font is still loading."}]}]},"parameters":[{"name":"fontFamily","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The name used to load the "},{"kind":"code","text":"`FontResource`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"loadAsync","variant":"declaration","kind":64,"signatures":[{"name":"loadAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Highly efficient method for loading fonts from static or remote resources which can then be used\nwith the platform's native text elements. In the browser this generates a "},{"kind":"code","text":"`@font-face`"},{"kind":"text","text":" block in\na shared style sheet for fonts. No CSS is needed to use this method."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\nmethod in a "},{"kind":"code","text":"`try/catch/finally`"},{"kind":"text","text":" to ensure the app continues if the font fails to load."}]}]},"parameters":[{"name":"fontFamilyOrFontMap","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"String or map of values that can be used as the "},{"kind":"code","text":"`fontFamily`"},{"kind":"text","text":" [style prop](https://reactnative.dev/docs/text#style)\nwith React Native "},{"kind":"code","text":"`Text`"},{"kind":"text","text":" elements."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":{"sourceFileName":"tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","target":6025,"name":"FontSource","package":"expo-font"}],"name":"Record","package":"typescript"}]}},{"name":"source","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The font asset that should be loaded into the "},{"kind":"code","text":"`fontFamily`"},{"kind":"text","text":" namespace."}]},"type":{"type":"reference","target":6025,"name":"FontSource","package":"expo-font"}}],"type":{"type":"reference","target":{"sourceFileName":"tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"processFontFamily","variant":"declaration","kind":64,"signatures":[{"name":"processFontFamily","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Used to transform font family names to the scoped name. This does not need to\nbe called in standalone or bare apps, but it will return unscoped font family\nnames if it is called in those contexts."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/)."}]},{"tag":"@deprecated","content":[{"kind":"text","text":"This method is not needed anymore and will be removed in the future."}]}]},"parameters":[{"name":"fontFamily","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Name of font to process."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}}]},{"name":"useFonts","variant":"declaration","kind":64,"signatures":[{"name":"useFonts","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Load a map of fonts with ["},{"kind":"code","text":"`loadAsync`"},{"kind":"text","text":"](#loadasyncfontfamilyorfontmap-source). This returns a "},{"kind":"code","text":"`boolean`"},{"kind":"text","text":" if the fonts are\nloaded and ready to use. It also returns an error if something went wrong, to use in development.\n\n> Note, the fonts are not \"reloaded\" when you dynamically change the font map."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"- __loaded__ ("},{"kind":"code","text":"`boolean`"},{"kind":"text","text":") - A boolean to detect if the font for "},{"kind":"code","text":"`fontFamily`"},{"kind":"text","text":" has finished\nloading.\n- __error__ ("},{"kind":"code","text":"`Error | null`"},{"kind":"text","text":") - An error encountered when loading the fonts."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx\nconst [loaded, error] = useFonts({ ... });\n```"}]}]},"parameters":[{"name":"map","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A map of "},{"kind":"code","text":"`fontFamily`"},{"kind":"text","text":"s to ["},{"kind":"code","text":"`FontSource`"},{"kind":"text","text":"](#fontsource)s. After loading the font you can\nuse the key in the "},{"kind":"code","text":"`fontFamily`"},{"kind":"text","text":" style prop of a "},{"kind":"code","text":"`Text`"},{"kind":"text","text":" element."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","target":{"sourceFileName":"tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Record"},"typeArguments":[{"type":"intrinsic","name":"string"},{"type":"reference","target":6025,"name":"FontSource","package":"expo-font"}],"name":"Record","package":"typescript"}]}}],"type":{"type":"tuple","elements":[{"type":"intrinsic","name":"boolean"},{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","target":{"sourceFileName":"tools/node_modules/typescript/lib/lib.es5.d.ts","qualifiedName":"Error"},"name":"Error","package":"typescript"}]}]}}]}],"packageName":"expo-font"}