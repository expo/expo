{"name":"expo-image","variant":"project","kind":1,"children":[{"name":"Image","variant":"declaration","kind":128,"children":[{"name":"constructor","variant":"declaration","kind":512,"signatures":[{"name":"new Image","variant":"signature","kind":16384,"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","name":"Image","package":"expo-image"},"overwrites":{"type":"reference","name":"React.PureComponent<ImageProps>.constructor"}}],"overwrites":{"type":"reference","name":"React.PureComponent<ImageProps>.constructor"}},{"name":"containerViewRef","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}},{"name":"nativeViewRef","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}},{"name":"getAnimatableRef","variant":"declaration","kind":2048,"signatures":[{"name":"getAnimatableRef","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Reanimated support on web"}]},"type":{"type":"intrinsic","name":"any"}}]},{"name":"render","variant":"declaration","kind":2048,"signatures":[{"name":"render","variant":"signature","kind":4096,"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element","target":{}},"overwrites":{"type":"reference","name":"React.PureComponent.render"}}],"overwrites":{"type":"reference","name":"React.PureComponent.render"}},{"name":"startAnimating","variant":"declaration","kind":2048,"signatures":[{"name":"startAnimating","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronously starts playback of the view's image if it is animated."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript","target":{}}}]},{"name":"stopAnimating","variant":"declaration","kind":2048,"signatures":[{"name":"stopAnimating","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronously stops the playback of the view's image if it is animated."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript","target":{}}}]},{"name":"clearDiskCache","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"clearDiskCache","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronously clears all images from the disk cache."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" when the operation succeeds.\nIt may resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" on Android when the activity is no longer available.\nResolves to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" on Web."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript","target":{}}}]},{"name":"clearMemoryCache","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"clearMemoryCache","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronously clears all images stored in memory."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" when the operation succeeds.\nIt may resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" on Android when the activity is no longer available.\nResolves to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" on Web."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript","target":{}}}]},{"name":"generateBlurhashAsync","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"generateBlurhashAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronously generates a [Blurhash](https://blurha.sh) from an image."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to the blurhash string."}]}]},"parameters":[{"name":"url","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The URL of the image to generate a blurhash from."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"numberOfComponents","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The number of components to encode the blurhash with.\nMust be between 1 and 9. Defaults to "},{"kind":"code","text":"`[4, 3]`"},{"kind":"text","text":"."}]},"type":{"type":"union","types":[{"type":"tuple","elements":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"number"}]},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"height","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"width","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]}}]}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}],"name":"Promise","package":"typescript","target":{}}}]},{"name":"getCachePathAsync","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"getCachePathAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Asynchronously checks if an image exists in the disk cache and resolves to\nthe path of the cached image if it does."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to the path of the cached image. It will resolve\nto "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the image does not exist in the cache."}]}]},"parameters":[{"name":"cacheKey","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The cache key for the requested image. Unless you have set\na custom cache key, this will be the source URL of the image."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}],"name":"Promise","package":"typescript","target":{}}}]},{"name":"loadAsync","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"loadAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Loads an image from the given source to memory and resolves to\nan object that references the native image instance."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"parameters":[{"name":"source","variant":"param","kind":32768,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"ImageSource","package":"expo-image"}]}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageLoadOptions","package":"expo-image"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageRef","package":"expo-image"}],"name":"Promise","package":"typescript","target":{}}}]},{"name":"prefetch","variant":"declaration","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"prefetch","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Preloads images at the given URLs that can be later used in the image view.\nPreloaded images are cached to the memory and disk by default, so make sure\nto use "},{"kind":"code","text":"`disk`"},{"kind":"text","text":" (default) or "},{"kind":"code","text":"`memory-disk`"},{"kind":"text","text":" [cache policy](#cachepolicy)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" as soon as all images have been\nsuccessfully prefetched. If an image fails to be prefetched, the promise\nwill immediately resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" regardless of whether other images have\nfinished prefetching."}]}]},"parameters":[{"name":"urls","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A URL string or an array of URLs of images to prefetch."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"name":"cachePolicy","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The cache policy for prefetched images."}]},"type":{"type":"union","types":[{"type":"literal","value":"disk"},{"type":"literal","value":"memory"},{"type":"literal","value":"memory-disk"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript","target":{}}},{"name":"prefetch","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Preloads images at the given URLs that can be later used in the image view.\nPreloaded images are cached to the memory and disk by default, so make sure\nto use "},{"kind":"code","text":"`disk`"},{"kind":"text","text":" (default) or "},{"kind":"code","text":"`memory-disk`"},{"kind":"text","text":" [cache policy](#cachepolicy)."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise resolving to "},{"kind":"code","text":"`true`"},{"kind":"text","text":" as soon as all images have been\nsuccessfully prefetched. If an image fails to be prefetched, the promise\nwill immediately resolve to "},{"kind":"code","text":"`false`"},{"kind":"text","text":" regardless of whether other images have\nfinished prefetching."}]}]},"parameters":[{"name":"urls","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"A URL string or an array of URLs of images to prefetch."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Options for prefetching images."}]},"type":{"type":"reference","name":"ImagePrefetchOptions","package":"expo-image"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","package":"typescript","target":{}}}]}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps","package":"expo-image"}],"name":"PureComponent","package":"@types/react","qualifiedName":"React.PureComponent","target":{}}]},{"name":"ImageRef","variant":"declaration","kind":128,"comment":{"summary":[{"kind":"text","text":"An object that is a reference to a native image instance – [Drawable](https://developer.android.com/reference/android/graphics/drawable/Drawable)\non Android and [UIImage](https://developer.apple.com/documentation/uikit/uiimage) on iOS.\nInstances of this class can be passed as a source to the [Image](#image) component in which case the image is rendered immediately\nsince its native representation is already available in the memory."}]},"children":[{"name":"constructor","variant":"declaration","kind":512,"signatures":[{"name":"new ImageRef","variant":"signature","kind":16384,"comment":{"summary":[{"kind":"text","text":"Creates a new event emitter instance."}]},"type":{"type":"reference","name":"ImageRef","package":"expo-image"},"inheritedFrom":{"type":"reference","name":"SharedRef<'image'>.constructor"}}],"inheritedFrom":{"type":"reference","name":"SharedRef<'image'>.constructor"}},{"name":"height","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"Logical height of the image. Multiply it by the value in the "},{"kind":"code","text":"`scale`"},{"kind":"text","text":" property to get the height in pixels."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"isAnimated","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"Whether the referenced image is an animated image."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"mediaType","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"Media type (also known as MIME type) of the image, based on its format.\nReturns "},{"kind":"code","text":"`null`"},{"kind":"text","text":" when the format is unknown or not supported."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"nativeRefType","variant":"declaration","kind":1024,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"The type of the native reference."}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"SharedRef.nativeRefType"}},{"name":"scale","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"On iOS, if you load an image from a file whose name includes the "},{"kind":"code","text":"`@2x`"},{"kind":"text","text":" modifier, the scale is set to **2.0**. All other images are assumed to have a scale factor of **1.0**.\nOn Android, it calculates the scale based on the bitmap density divided by screen density.\n\nOn all platforms, if you multiply the logical size of the image by this value, you get the dimensions of the image in pixels."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"width","variant":"declaration","kind":1024,"flags":{"isReadonly":true},"comment":{"summary":[{"kind":"text","text":"Logical width of the image. Multiply it by the value in the "},{"kind":"code","text":"`scale`"},{"kind":"text","text":" property to get the width in pixels."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"addListener","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"addListener","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Adds a listener for the given event name."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"listener","variant":"param","kind":32768,"type":{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"never"},{"type":"intrinsic","name":"never"}],"name":"Record","package":"typescript","target":{}}}}],"type":{"type":"reference","name":"EventSubscription","package":"expo-modules-core","target":{}},"inheritedFrom":{"type":"reference","name":"SharedRef.addListener"}}],"inheritedFrom":{"type":"reference","name":"SharedRef.addListener"}},{"name":"emit","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"emit","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Synchronously calls all of the listeners attached to that specific event.\nThe event can include any number of arguments that will be passed to the listeners."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"args","variant":"param","kind":32768,"flags":{"isRest":true},"type":{"type":"reference","typeArguments":[{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"never"},{"type":"intrinsic","name":"never"}],"name":"Record","package":"typescript","target":{}}}],"name":"Parameters","package":"typescript","target":{}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedRef.emit"}}],"inheritedFrom":{"type":"reference","name":"SharedRef.emit"}},{"name":"listenerCount","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"listenerCount","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Returns a number of listeners added to the given event."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"SharedRef.listenerCount"}}],"inheritedFrom":{"type":"reference","name":"SharedRef.listenerCount"}},{"name":"release","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"release","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"A function that detaches the JS and native objects to let the native object deallocate\nbefore the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native\nfunctions of the object will throw an error as it is no longer associated with its native counterpart.\n\nIn most cases, you should never need to use this function, except some specific performance-critical cases when\nmanual memory management makes sense and the native object is known to exclusively retain some native memory\n(such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use\nthis object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase,\nfor example: "},{"kind":"code","text":"`useVideoPlayer()`"},{"kind":"text","text":" from "},{"kind":"code","text":"`expo-video`"},{"kind":"text","text":" and "},{"kind":"code","text":"`useImage()`"},{"kind":"text","text":" from "},{"kind":"code","text":"`expo-image`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedRef.release"}}],"inheritedFrom":{"type":"reference","name":"SharedRef.release"}},{"name":"removeAllListeners","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"removeAllListeners","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Removes all listeners for the given event name."}]},"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"never"}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedRef.removeAllListeners"}}],"inheritedFrom":{"type":"reference","name":"SharedRef.removeAllListeners"}},{"name":"removeListener","variant":"declaration","kind":2048,"flags":{"isInherited":true},"signatures":[{"name":"removeListener","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Removes a listener for the given event name."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}},{"name":"listener","variant":"param","kind":32768,"type":{"type":"indexedAccess","indexType":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true},"objectType":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"never"},{"type":"intrinsic","name":"never"}],"name":"Record","package":"typescript","target":{}}}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedRef.removeListener"}}],"inheritedFrom":{"type":"reference","name":"SharedRef.removeListener"}},{"name":"startObserving","variant":"declaration","kind":2048,"flags":{"isOptional":true,"isInherited":true},"signatures":[{"name":"startObserving","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Function that is automatically invoked when the first listener for an event with the given name is added.\nOverride it in a subclass to perform some additional setup once the event started being observed."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedRef.startObserving"}}],"inheritedFrom":{"type":"reference","name":"SharedRef.startObserving"}},{"name":"stopObserving","variant":"declaration","kind":2048,"flags":{"isOptional":true,"isInherited":true},"signatures":[{"name":"stopObserving","variant":"signature","kind":4096,"flags":{"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Function that is automatically invoked when the last listener for an event with the given name is removed.\nOverride it in a subclass to perform some additional cleanup once the event is no longer observed."}]},"typeParameters":[{"name":"EventName","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"never"}}],"parameters":[{"name":"eventName","variant":"param","kind":32768,"type":{"type":"reference","name":"EventName","package":"expo-modules-core","refersToTypeParameter":true}}],"type":{"type":"intrinsic","name":"void"},"inheritedFrom":{"type":"reference","name":"SharedRef.stopObserving"}}],"inheritedFrom":{"type":"reference","name":"SharedRef.stopObserving"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"literal","value":"image"}],"name":"SharedRef","package":"expo-modules-core","target":{}}]},{"name":"ImageBackgroundProps","variant":"declaration","kind":256,"children":[{"name":"accessibilityLabel","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"The text that's read by the screen reader when the user interacts with the image. Sets the the "},{"kind":"code","text":"`alt`"},{"kind":"text","text":" tag on web which is used for web crawlers and link traversal."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"undefined"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.accessibilityLabel"}},{"name":"accessible","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"When true, indicates that the view is an accessibility element.\nWhen a view is an accessibility element, it groups its children into a single selectable component.\n\nOn Android, the "},{"kind":"code","text":"`accessible`"},{"kind":"text","text":" property will be translated into the native "},{"kind":"code","text":"`isScreenReaderFocusable`"},{"kind":"text","text":",\nso it's only affecting the screen readers behaviour."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.accessible"}},{"name":"allowDownscaling","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Whether the image should be downscaled to match the size of the view container.\nTurning off this functionality could negatively impact the application's performance, particularly when working with large assets.\nHowever, it would result in smoother image resizing, and end-users would always have access to the highest possible asset quality.\n\nDownscaling is never used when the "},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":" prop is set to "},{"kind":"code","text":"`none`"},{"kind":"text","text":" or "},{"kind":"code","text":"`fill`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"true"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.allowDownscaling"}},{"name":"alt","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"The text that's read by the screen reader when the user interacts with the image. Sets the the "},{"kind":"code","text":"`alt`"},{"kind":"text","text":" tag on web which is used for web crawlers and link traversal. Is an alias for "},{"kind":"code","text":"`accessibilityLabel`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@alias","content":[{"kind":"text","text":"accessibilityLabel"}]},{"tag":"@default","content":[{"kind":"text","text":"undefined"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"Omit.alt"}},{"name":"autoplay","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Determines if an image should automatically begin playing if it is an\nanimated image."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"true"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.autoplay"}},{"name":"blurRadius","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"The radius of the blur in points, "},{"kind":"code","text":"`0`"},{"kind":"text","text":" means no blur effect.\nThis effect is not applied to placeholders."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"Omit.blurRadius"}},{"name":"cachePolicy","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Determines whether to cache the image and where: on the disk, in the memory or both.\n\n- "},{"kind":"code","text":"`'none'`"},{"kind":"text","text":" - Image is not cached at all.\n\n- "},{"kind":"code","text":"`'disk'`"},{"kind":"text","text":" - Image is queried from the disk cache if exists, otherwise it's downloaded and then stored on the disk.\n\n- "},{"kind":"code","text":"`'memory'`"},{"kind":"text","text":" - Image is cached in memory. Might be useful when you render a high-resolution picture many times.\nMemory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.\n\n- "},{"kind":"code","text":"`'memory-disk'`"},{"kind":"text","text":" - Image is cached in memory, but with a fallback to the disk cache."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'disk'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"},{"type":"literal","value":"memory-disk"}]},"inheritedFrom":{"type":"reference","name":"Omit.cachePolicy"}},{"name":"contentFit","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Determines how the image should be resized to fit its container. This property tells the image to fill the container\nin a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\".\nIt mirrors the CSS ["},{"kind":"code","text":"`object-fit`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property.\n\n- "},{"kind":"code","text":"`'cover'`"},{"kind":"text","text":" - The image is sized to maintain its aspect ratio while filling the container box.\nIf the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.\n\n- "},{"kind":"code","text":"`'contain'`"},{"kind":"text","text":" - The image is scaled down or up to maintain its aspect ratio while fitting within the container box.\n\n- "},{"kind":"code","text":"`'fill'`"},{"kind":"text","text":" - The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit.\n\n- "},{"kind":"code","text":"`'none'`"},{"kind":"text","text":" - The image is not resized and is centered by default.\nWhen specified, the exact position can be controlled with ["},{"kind":"code","text":"`contentPosition`"},{"kind":"text","text":"](#contentposition) prop.\n\n- "},{"kind":"code","text":"`'scale-down'`"},{"kind":"text","text":" - The image is sized as if "},{"kind":"code","text":"`none`"},{"kind":"text","text":" or "},{"kind":"code","text":"`contain`"},{"kind":"text","text":" were specified, whichever would result in a smaller concrete image size."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'cover'"}]}]},"type":{"type":"reference","name":"ImageContentFit","package":"expo-image","target":{}},"inheritedFrom":{"type":"reference","name":"Omit.contentFit"}},{"name":"contentPosition","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"It is used together with ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) to specify how the image should be positioned with x/y coordinates inside its own container.\nAn equivalent of the CSS ["},{"kind":"code","text":"`object-position`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) property."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'center'"}]}]},"type":{"type":"reference","name":"ImageContentPosition","package":"expo-image"},"inheritedFrom":{"type":"reference","name":"Omit.contentPosition"}},{"name":"decodeFormat","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"The format in which the image data should be decoded.\nIt's not guaranteed that the platform will use the specified format.\n\n- "},{"kind":"code","text":"`'argb'`"},{"kind":"text","text":" - The image is decoded into a 32-bit color space with alpha channel (https://developer.android.com/reference/android/graphics/Bitmap.Config#ARGB_8888).\n\n- "},{"kind":"code","text":"`'rgb'`"},{"kind":"text","text":" - The image is decoded into a 16-bit color space without alpha channel (https://developer.android.com/reference/android/graphics/Bitmap.Config#RGB_565)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'argb'"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"reference","name":"ImageDecodeFormat","package":"expo-image","target":{}},"inheritedFrom":{"type":"reference","name":"Omit.decodeFormat"}},{"name":"defaultSource","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`defaultSource`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#defaultsource).\nUse ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder) prop instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"ImageSource","package":"expo-image"}]},"inheritedFrom":{"type":"reference","name":"Omit.defaultSource"}},{"name":"enableLiveTextInteraction","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Enables Live Text interaction with the image. Check official [Apple documentation](https://developer.apple.com/documentation/visionkit/enabling_live_text_interactions_with_images) for more details."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios 16.0+"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.enableLiveTextInteraction"}},{"name":"fadeDuration","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`fadeDuration`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#fadeduration-android).\nInstead use ["},{"kind":"code","text":"`transition`"},{"kind":"text","text":"](#transition) with the provided duration."}]}]},"type":{"type":"intrinsic","name":"number"},"inheritedFrom":{"type":"reference","name":"Omit.fadeDuration"}},{"name":"focusable","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Whether this View should be focusable with a non-touch input device and receive focus with a hardware keyboard."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"boolean"},"inheritedFrom":{"type":"reference","name":"Omit.focusable"}},{"name":"imageStyle","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Style object for the image"}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ImageStyle","package":"react-native","target":{}}],"name":"StyleProp","package":"react-native","target":{}}},{"name":"loadingIndicatorSource","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`loadingIndicatorSource`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#loadingindicatorsource).\nUse ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder) prop instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"ImageSource","package":"expo-image"}]},"inheritedFrom":{"type":"reference","name":"Omit.loadingIndicatorSource"}},{"name":"onDisplay","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called when the image view successfully rendered the source image."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"Omit.onDisplay"}},{"name":"onError","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called on an image fetching error."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"ImageErrorEventData","package":"expo-image"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"Omit.onError"}},{"name":"onLoad","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called when the image load completes successfully."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"ImageLoadEventData","package":"expo-image"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"Omit.onLoad"}},{"name":"onLoadEnd","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called when the image load either succeeds or fails."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"Omit.onLoadEnd"}},{"name":"onLoadStart","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called when the image starts to load."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"Omit.onLoadStart"}},{"name":"onProgress","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Called when the image is loading. Can be called multiple times before the image has finished loading.\nThe event object provides details on how many bytes were loaded so far and what's the expected total size."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"ImageProgressEventData","package":"expo-image"}}],"type":{"type":"intrinsic","name":"void"}}]}},"inheritedFrom":{"type":"reference","name":"Omit.onProgress"}},{"name":"placeholder","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"An image to display while loading the proper image and no image has been displayed yet or the source is unset."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"reference","name":"ImageSource","package":"expo-image"},{"type":"reference","typeArguments":[{"type":"literal","value":"image"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"never"},{"type":"intrinsic","name":"never"}],"name":"Record","package":"typescript","target":{}}],"name":"SharedRef","package":"expo-modules-core","target":{}},{"type":"array","elementType":{"type":"reference","name":"ImageSource","package":"expo-image"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Omit.placeholder"}},{"name":"placeholderContentFit","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Determines how the placeholder should be resized to fit its container. Available resize modes are the same as for the ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) prop."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'scale-down'"}]}]},"type":{"type":"reference","name":"ImageContentFit","package":"expo-image","target":{}},"inheritedFrom":{"type":"reference","name":"Omit.placeholderContentFit"}},{"name":"priority","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Priorities for completing loads. If more than one load is queued at a time,\nthe load with the higher priority will be started first.\nPriorities are considered best effort, there are no guarantees about the order in which loads will start or finish."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'normal'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"literal","value":"low"},{"type":"literal","value":"normal"},{"type":"literal","value":"high"}]},"inheritedFrom":{"type":"reference","name":"Omit.priority"}},{"name":"recyclingKey","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Changing this prop resets the image view content to blank or a placeholder before loading and rendering the final image.\nThis is especially useful for any kinds of recycling views like [FlashList](https://github.com/shopify/flash-list)\nto prevent showing the previous source before the new one fully loads."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"null"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"Omit.recyclingKey"}},{"name":"resizeMode","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`resizeMode`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#resizemode).\nNote that "},{"kind":"code","text":"`\"repeat\"`"},{"kind":"text","text":" option is not supported at all.\nUse the more powerful ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) and ["},{"kind":"code","text":"`contentPosition`"},{"kind":"text","text":"](#contentposition) props instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":"cover"},{"type":"literal","value":"contain"},{"type":"literal","value":"center"},{"type":"literal","value":"stretch"},{"type":"literal","value":"repeat"}]},"inheritedFrom":{"type":"reference","name":"Omit.resizeMode"}},{"name":"responsivePolicy","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Controls the selection of the image source based on the container or viewport size on the web.\n\nIf set to "},{"kind":"code","text":"`'static'`"},{"kind":"text","text":", the browser selects the correct source based on user's viewport width. Works with static rendering.\nMake sure to set the "},{"kind":"code","text":"`'webMaxViewportWidth'`"},{"kind":"text","text":" property on each source for best results.\nFor example, if an image occupies 1/3 of the screen width, set the "},{"kind":"code","text":"`'webMaxViewportWidth'`"},{"kind":"text","text":" to 3x the image width.\nThe source with the largest "},{"kind":"code","text":"`'webMaxViewportWidth'`"},{"kind":"text","text":" is used even for larger viewports.\n\nIf set to "},{"kind":"code","text":"`'initial'`"},{"kind":"text","text":", the component will select the correct source during mount based on container size. Does not work with static rendering.\n\nIf set to "},{"kind":"code","text":"`'live'`"},{"kind":"text","text":", the component will select the correct source on every resize based on container size. Does not work with static rendering."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'static'"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"live"},{"type":"literal","value":"initial"},{"type":"literal","value":"static"}]},"inheritedFrom":{"type":"reference","name":"Omit.responsivePolicy"}},{"name":"source","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"The image source, either a remote URL, a local file resource or a number that is the result of the "},{"kind":"code","text":"`require()`"},{"kind":"text","text":" function.\nWhen provided as an array of sources, the source that fits best into the container size and is closest to the screen scale\nwill be chosen. In this case it is important to provide "},{"kind":"code","text":"`width`"},{"kind":"text","text":", "},{"kind":"code","text":"`height`"},{"kind":"text","text":" and "},{"kind":"code","text":"`scale`"},{"kind":"text","text":" properties."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"reference","name":"ImageSource","package":"expo-image"},{"type":"reference","typeArguments":[{"type":"literal","value":"image"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"never"},{"type":"intrinsic","name":"never"}],"name":"Record","package":"typescript","target":{}}],"name":"SharedRef","package":"expo-modules-core","target":{}},{"type":"array","elementType":{"type":"reference","name":"ImageSource","package":"expo-image"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"inheritedFrom":{"type":"reference","name":"Omit.source"}},{"name":"style","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The style of the image container"}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ViewStyle","package":"react-native","target":{}}],"name":"StyleProp","package":"react-native","target":{}}},{"name":"tintColor","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"A color used to tint template images (a bitmap image where only the opacity matters).\nThe color is applied to every non-transparent pixel, causing the image’s shape to adopt that color.\nThis effect is not applied to placeholders."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"null"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]},"inheritedFrom":{"type":"reference","name":"Omit.tintColor"}},{"name":"transition","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Describes how the image view should transition the contents when switching the image source.\\\nIf provided as a number, it is the duration in milliseconds of the "},{"kind":"code","text":"`'cross-dissolve'`"},{"kind":"text","text":" effect."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"},{"type":"reference","name":"ImageTransition","package":"expo-image"}]},"inheritedFrom":{"type":"reference","name":"Omit.transition"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"ImageProps","package":"expo-image"},{"type":"literal","value":"style"}],"name":"Omit","package":"typescript","target":{}}]},{"name":"ImageProps","variant":"declaration","kind":256,"comment":{"summary":[{"kind":"text","text":"Some props are from React Native Image that Expo Image supports (more or less) for easier migration,\nbut all of them are deprecated and might be removed in the future."}]},"children":[{"name":"accessibilityLabel","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The text that's read by the screen reader when the user interacts with the image. Sets the the "},{"kind":"code","text":"`alt`"},{"kind":"text","text":" tag on web which is used for web crawlers and link traversal."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"undefined"}]}]},"type":{"type":"intrinsic","name":"string"},"overwrites":{"type":"reference","name":"Omit.accessibilityLabel"}},{"name":"accessible","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"When true, indicates that the view is an accessibility element.\nWhen a view is an accessibility element, it groups its children into a single selectable component.\n\nOn Android, the "},{"kind":"code","text":"`accessible`"},{"kind":"text","text":" property will be translated into the native "},{"kind":"code","text":"`isScreenReaderFocusable`"},{"kind":"text","text":",\nso it's only affecting the screen readers behaviour."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.accessible"}},{"name":"allowDownscaling","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether the image should be downscaled to match the size of the view container.\nTurning off this functionality could negatively impact the application's performance, particularly when working with large assets.\nHowever, it would result in smoother image resizing, and end-users would always have access to the highest possible asset quality.\n\nDownscaling is never used when the "},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":" prop is set to "},{"kind":"code","text":"`none`"},{"kind":"text","text":" or "},{"kind":"code","text":"`fill`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"true"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"alt","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The text that's read by the screen reader when the user interacts with the image. Sets the the "},{"kind":"code","text":"`alt`"},{"kind":"text","text":" tag on web which is used for web crawlers and link traversal. Is an alias for "},{"kind":"code","text":"`accessibilityLabel`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@alias","content":[{"kind":"text","text":"accessibilityLabel"}]},{"tag":"@default","content":[{"kind":"text","text":"undefined"}]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"autoplay","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines if an image should automatically begin playing if it is an\nanimated image."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"true"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"blurRadius","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The radius of the blur in points, "},{"kind":"code","text":"`0`"},{"kind":"text","text":" means no blur effect.\nThis effect is not applied to placeholders."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"cachePolicy","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines whether to cache the image and where: on the disk, in the memory or both.\n\n- "},{"kind":"code","text":"`'none'`"},{"kind":"text","text":" - Image is not cached at all.\n\n- "},{"kind":"code","text":"`'disk'`"},{"kind":"text","text":" - Image is queried from the disk cache if exists, otherwise it's downloaded and then stored on the disk.\n\n- "},{"kind":"code","text":"`'memory'`"},{"kind":"text","text":" - Image is cached in memory. Might be useful when you render a high-resolution picture many times.\nMemory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.\n\n- "},{"kind":"code","text":"`'memory-disk'`"},{"kind":"text","text":" - Image is cached in memory, but with a fallback to the disk cache."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'disk'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"},{"type":"literal","value":"memory-disk"}]}},{"name":"contentFit","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines how the image should be resized to fit its container. This property tells the image to fill the container\nin a variety of ways; such as \"preserve that aspect ratio\" or \"stretch up and take up as much space as possible\".\nIt mirrors the CSS ["},{"kind":"code","text":"`object-fit`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property.\n\n- "},{"kind":"code","text":"`'cover'`"},{"kind":"text","text":" - The image is sized to maintain its aspect ratio while filling the container box.\nIf the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.\n\n- "},{"kind":"code","text":"`'contain'`"},{"kind":"text","text":" - The image is scaled down or up to maintain its aspect ratio while fitting within the container box.\n\n- "},{"kind":"code","text":"`'fill'`"},{"kind":"text","text":" - The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit.\n\n- "},{"kind":"code","text":"`'none'`"},{"kind":"text","text":" - The image is not resized and is centered by default.\nWhen specified, the exact position can be controlled with ["},{"kind":"code","text":"`contentPosition`"},{"kind":"text","text":"](#contentposition) prop.\n\n- "},{"kind":"code","text":"`'scale-down'`"},{"kind":"text","text":" - The image is sized as if "},{"kind":"code","text":"`none`"},{"kind":"text","text":" or "},{"kind":"code","text":"`contain`"},{"kind":"text","text":" were specified, whichever would result in a smaller concrete image size."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'cover'"}]}]},"type":{"type":"reference","name":"ImageContentFit","package":"expo-image","target":{}}},{"name":"contentPosition","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"It is used together with ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) to specify how the image should be positioned with x/y coordinates inside its own container.\nAn equivalent of the CSS ["},{"kind":"code","text":"`object-position`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) property."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'center'"}]}]},"type":{"type":"reference","name":"ImageContentPosition","package":"expo-image"}},{"name":"decodeFormat","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The format in which the image data should be decoded.\nIt's not guaranteed that the platform will use the specified format.\n\n- "},{"kind":"code","text":"`'argb'`"},{"kind":"text","text":" - The image is decoded into a 32-bit color space with alpha channel (https://developer.android.com/reference/android/graphics/Bitmap.Config#ARGB_8888).\n\n- "},{"kind":"code","text":"`'rgb'`"},{"kind":"text","text":" - The image is decoded into a 16-bit color space without alpha channel (https://developer.android.com/reference/android/graphics/Bitmap.Config#RGB_565)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'argb'"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"reference","name":"ImageDecodeFormat","package":"expo-image","target":{}}},{"name":"defaultSource","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`defaultSource`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#defaultsource).\nUse ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder) prop instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"ImageSource","package":"expo-image"}]}},{"name":"enableLiveTextInteraction","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Enables Live Text interaction with the image. Check official [Apple documentation](https://developer.apple.com/documentation/visionkit/enabling_live_text_interactions_with_images) for more details."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios 16.0+"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"fadeDuration","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`fadeDuration`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#fadeduration-android).\nInstead use ["},{"kind":"code","text":"`transition`"},{"kind":"text","text":"](#transition) with the provided duration."}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"focusable","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether this View should be focusable with a non-touch input device and receive focus with a hardware keyboard."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"intrinsic","name":"boolean"},"overwrites":{"type":"reference","name":"Omit.focusable"}},{"name":"loadingIndicatorSource","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`loadingIndicatorSource`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#loadingindicatorsource).\nUse ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder) prop instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","name":"ImageSource","package":"expo-image"}]}},{"name":"onDisplay","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Called when the image view successfully rendered the source image."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onError","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Called on an image fetching error."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"ImageErrorEventData","package":"expo-image"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLoad","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Called when the image load completes successfully."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"ImageLoadEventData","package":"expo-image"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLoadEnd","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Called when the image load either succeeds or fails."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onLoadStart","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Called when the image starts to load."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"onProgress","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Called when the image is loading. Can be called multiple times before the image has finished loading.\nThe event object provides details on how many bytes were loaded so far and what's the expected total size."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reference","name":"ImageProgressEventData","package":"expo-image"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"placeholder","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An image to display while loading the proper image and no image has been displayed yet or the source is unset."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"reference","name":"ImageSource","package":"expo-image"},{"type":"reference","typeArguments":[{"type":"literal","value":"image"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"never"},{"type":"intrinsic","name":"never"}],"name":"Record","package":"typescript","target":{}}],"name":"SharedRef","package":"expo-modules-core","target":{}},{"type":"array","elementType":{"type":"reference","name":"ImageSource","package":"expo-image"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"name":"placeholderContentFit","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines how the placeholder should be resized to fit its container. Available resize modes are the same as for the ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) prop."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'scale-down'"}]}]},"type":{"type":"reference","name":"ImageContentFit","package":"expo-image","target":{}}},{"name":"priority","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Priorities for completing loads. If more than one load is queued at a time,\nthe load with the higher priority will be started first.\nPriorities are considered best effort, there are no guarantees about the order in which loads will start or finish."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'normal'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"literal","value":"low"},{"type":"literal","value":"normal"},{"type":"literal","value":"high"}]}},{"name":"recyclingKey","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Changing this prop resets the image view content to blank or a placeholder before loading and rendering the final image.\nThis is especially useful for any kinds of recycling views like [FlashList](https://github.com/shopify/flash-list)\nto prevent showing the previous source before the new one fully loads."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"null"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"resizeMode","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Provides compatibility for ["},{"kind":"code","text":"`resizeMode`"},{"kind":"text","text":" from React Native Image](https://reactnative.dev/docs/image#resizemode).\nNote that "},{"kind":"code","text":"`\"repeat\"`"},{"kind":"text","text":" option is not supported at all.\nUse the more powerful ["},{"kind":"code","text":"`contentFit`"},{"kind":"text","text":"](#contentfit) and ["},{"kind":"code","text":"`contentPosition`"},{"kind":"text","text":"](#contentposition) props instead."}]}]},"type":{"type":"union","types":[{"type":"literal","value":"cover"},{"type":"literal","value":"contain"},{"type":"literal","value":"center"},{"type":"literal","value":"stretch"},{"type":"literal","value":"repeat"}]}},{"name":"responsivePolicy","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Controls the selection of the image source based on the container or viewport size on the web.\n\nIf set to "},{"kind":"code","text":"`'static'`"},{"kind":"text","text":", the browser selects the correct source based on user's viewport width. Works with static rendering.\nMake sure to set the "},{"kind":"code","text":"`'webMaxViewportWidth'`"},{"kind":"text","text":" property on each source for best results.\nFor example, if an image occupies 1/3 of the screen width, set the "},{"kind":"code","text":"`'webMaxViewportWidth'`"},{"kind":"text","text":" to 3x the image width.\nThe source with the largest "},{"kind":"code","text":"`'webMaxViewportWidth'`"},{"kind":"text","text":" is used even for larger viewports.\n\nIf set to "},{"kind":"code","text":"`'initial'`"},{"kind":"text","text":", the component will select the correct source during mount based on container size. Does not work with static rendering.\n\nIf set to "},{"kind":"code","text":"`'live'`"},{"kind":"text","text":", the component will select the correct source on every resize based on container size. Does not work with static rendering."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'static'"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"live"},{"type":"literal","value":"initial"},{"type":"literal","value":"static"}]}},{"name":"source","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The image source, either a remote URL, a local file resource or a number that is the result of the "},{"kind":"code","text":"`require()`"},{"kind":"text","text":" function.\nWhen provided as an array of sources, the source that fits best into the container size and is closest to the screen scale\nwill be chosen. In this case it is important to provide "},{"kind":"code","text":"`width`"},{"kind":"text","text":", "},{"kind":"code","text":"`height`"},{"kind":"text","text":" and "},{"kind":"code","text":"`scale`"},{"kind":"text","text":" properties."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"},{"type":"reference","name":"ImageSource","package":"expo-image"},{"type":"reference","typeArguments":[{"type":"literal","value":"image"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"never"},{"type":"intrinsic","name":"never"}],"name":"Record","package":"typescript","target":{}}],"name":"SharedRef","package":"expo-modules-core","target":{}},{"type":"array","elementType":{"type":"reference","name":"ImageSource","package":"expo-image"}},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]}},{"name":"tintColor","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A color used to tint template images (a bitmap image where only the opacity matters).\nThe color is applied to every non-transparent pixel, causing the image’s shape to adopt that color.\nThis effect is not applied to placeholders."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"null"}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}},{"name":"transition","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Describes how the image view should transition the contents when switching the image source.\\\nIf provided as a number, it is the duration in milliseconds of the "},{"kind":"code","text":"`'cross-dissolve'`"},{"kind":"text","text":" effect."}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"},{"type":"reference","name":"ImageTransition","package":"expo-image"}]}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"ViewProps","package":"react-native","target":{}},{"type":"literal","value":"style"}],"name":"Omit","package":"typescript","target":{}}]},{"name":"ImageContentPosition","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Specifies the position of the image inside its container. One value controls the x-axis and the second value controls the y-axis.\n\nAdditionally, it supports stringified shorthand form that specifies the edges to which to align the image content:\\\n"},{"kind":"code","text":"`'center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'top left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'right top'`"},{"kind":"text","text":",\n"},{"kind":"code","text":"`'right bottom'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom right'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'bottom left'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left center'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left top'`"},{"kind":"text","text":", "},{"kind":"code","text":"`'left bottom'`"},{"kind":"text","text":".\\\nIf only one keyword is provided, then the other dimension is set to "},{"kind":"code","text":"`'center'`"},{"kind":"text","text":" ("},{"kind":"code","text":"`'50%'`"},{"kind":"text","text":"), so the image is placed in the middle of the specified edge.\\\nAs an example, "},{"kind":"code","text":"`'top right'`"},{"kind":"text","text":" is the same as "},{"kind":"code","text":"`{ top: 0, right: 0 }`"},{"kind":"text","text":" and "},{"kind":"code","text":"`'bottom'`"},{"kind":"text","text":" is the same as "},{"kind":"code","text":"`{ bottom: 0, left: '50%' }`"},{"kind":"text","text":"."}]},"type":{"type":"union","types":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"right","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue","package":"expo-image"}},{"name":"top","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue","package":"expo-image"}}]}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"left","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue","package":"expo-image"}},{"name":"top","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue","package":"expo-image"}}]}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"bottom","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue","package":"expo-image"}},{"name":"right","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue","package":"expo-image"}}]}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"bottom","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue","package":"expo-image"}},{"name":"left","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ImageContentPositionValue","package":"expo-image"}}]}},{"type":"reference","name":"ImageContentPositionString","package":"expo-image","target":{}}],"elementSummaries":[[{"kind":"text","text":"An object that positions the image relatively to the top-right corner."}],[{"kind":"text","text":"An object that positions the image relatively to the top-left corner."}],[{"kind":"text","text":"An object that positions the image relatively to the bottom-right corner."}],[{"kind":"text","text":"An object that positions the image relatively to the bottom-left corner."}],[]]}},{"name":"ImageContentPositionValue","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"A value that represents the relative position of a single axis.\n\nIf "},{"kind":"code","text":"`number`"},{"kind":"text","text":", it is a distance in points (logical pixels) from the respective edge.\\\nIf "},{"kind":"code","text":"`string`"},{"kind":"text","text":", it must be a percentage value where "},{"kind":"code","text":"`'100%'`"},{"kind":"text","text":" is the difference in size between the container and the image along the respective axis,\nor "},{"kind":"code","text":"`'center'`"},{"kind":"text","text":" which is an alias for "},{"kind":"code","text":"`'50%'`"},{"kind":"text","text":" that is the default value. You can read more regarding percentages on the MDN docs for\n["},{"kind":"code","text":"`background-position`"},{"kind":"text","text":"](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position#regarding_percentages) that describes this concept well."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"intrinsic","name":"string"},{"type":"templateLiteral","head":"","tail":[[{"type":"intrinsic","name":"number"},"%"]]},{"type":"templateLiteral","head":"","tail":[[{"type":"intrinsic","name":"number"},""]]},{"type":"literal","value":"center"}]}},{"name":"ImageErrorEventData","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"error","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"ImageLoadEventData","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"cacheType","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"literal","value":"none"},{"type":"literal","value":"disk"},{"type":"literal","value":"memory"}]}},{"name":"source","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"height","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"isAnimated","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"boolean"}},{"name":"mediaType","variant":"declaration","kind":1024,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]}},{"name":"url","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}},{"name":"width","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]}}}]}}},{"name":"ImageLoadOptions","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"An object with options for the ["},{"kind":"code","text":"`useImage`"},{"kind":"text","text":"](#useimage) hook."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"maxHeight","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If provided, the image will be automatically resized to not exceed this height in pixels, preserving its aspect ratio."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"maxWidth","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If provided, the image will be automatically resized to not exceed this width in pixels, preserving its aspect ratio."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"onError","variant":"declaration","kind":2048,"flags":{"isOptional":true},"signatures":[{"name":"onError","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Function to call when the image has failed to load. In addition to the error, it also provides a function that retries loading the image."}]},"parameters":[{"name":"error","variant":"param","kind":32768,"type":{"type":"reference","name":"Error","package":"typescript","target":{}}},{"name":"retry","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]}]}}},{"name":"ImagePrefetchOptions","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"cachePolicy","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The cache policy for prefetched images."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'memory-disk'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"disk"},{"type":"literal","value":"memory-disk"},{"type":"literal","value":"memory"}]}},{"name":"headers","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A map of headers to use when prefetching the images."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record","package":"typescript","target":{}}}]}}},{"name":"ImageProgressEventData","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"loaded","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"total","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"ImageSource","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"blurhash","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A string used to generate the image ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder). For example,\n"},{"kind":"code","text":"`placeholder={blurhash}`"},{"kind":"text","text":".  If "},{"kind":"code","text":"`uri`"},{"kind":"text","text":" is provided as the value of the "},{"kind":"code","text":"`source`"},{"kind":"text","text":" prop,\nthis is ignored since the "},{"kind":"code","text":"`source`"},{"kind":"text","text":" can only have "},{"kind":"code","text":"`blurhash`"},{"kind":"text","text":" or "},{"kind":"code","text":"`uri`"},{"kind":"text","text":".\n\nWhen using the blurhash, you should also provide "},{"kind":"code","text":"`width`"},{"kind":"text","text":" and "},{"kind":"code","text":"`height`"},{"kind":"text","text":" (higher values reduce performance),\notherwise their default value is "},{"kind":"code","text":"`16`"},{"kind":"text","text":".\nFor more information, see ["},{"kind":"code","text":"`woltapp/blurhash`"},{"kind":"text","text":"](https://github.com/woltapp/blurhash) repository."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"cacheKey","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The cache key used to query and store this specific image.\nIf not provided, the "},{"kind":"code","text":"`uri`"},{"kind":"text","text":" is used also as the cache key."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"headers","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An object representing the HTTP headers to send along with the request for a remote image.\nOn web requires the "},{"kind":"code","text":"`Access-Control-Allow-Origin`"},{"kind":"text","text":" header returned by the server to include the current domain."}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"string"}],"name":"Record","package":"typescript","target":{}}},{"name":"height","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Can be specified if known at build time, in which case the value\nwill be used to set the default "},{"kind":"code","text":"`<Image/>`"},{"kind":"text","text":" component dimension."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"isAnimated","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether the image is animated (an animated GIF or WebP for example)."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"thumbhash","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A string used to generate the image ["},{"kind":"code","text":"`placeholder`"},{"kind":"text","text":"](#placeholder). For example,\n"},{"kind":"code","text":"`placeholder={thumbhash}`"},{"kind":"text","text":".  If "},{"kind":"code","text":"`uri`"},{"kind":"text","text":" is provided as the value of the "},{"kind":"code","text":"`source`"},{"kind":"text","text":" prop,\nthis is ignored since the "},{"kind":"code","text":"`source`"},{"kind":"text","text":" can only have "},{"kind":"code","text":"`thumbhash`"},{"kind":"text","text":" or "},{"kind":"code","text":"`uri`"},{"kind":"text","text":".\n\nFor more information, see ["},{"kind":"code","text":"`thumbhash website`"},{"kind":"text","text":"](https://evanw.github.io/thumbhash/)."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"uri","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A string representing the resource identifier for the image,\nwhich could be an HTTPS address, a local file path, or the name of a static image resource."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"webMaxViewportWidth","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The max width of the viewport for which this source should be selected.\nHas no effect if "},{"kind":"code","text":"`source`"},{"kind":"text","text":" prop is not an array or has only 1 element.\nHas no effect if "},{"kind":"code","text":"`responsivePolicy`"},{"kind":"text","text":" is not set to "},{"kind":"code","text":"`static`"},{"kind":"text","text":".\nIgnored if "},{"kind":"code","text":"`blurhash`"},{"kind":"text","text":" or "},{"kind":"code","text":"`thumbhash`"},{"kind":"text","text":" is provided (image hashes are never selected if passed in an array)."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"width","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Can be specified if known at build time, in which case the value\nwill be used to set the default "},{"kind":"code","text":"`<Image/>`"},{"kind":"text","text":" component dimension."}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"ImageTransition","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"An object that describes the smooth transition when switching the image source."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"duration","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The duration of the transition in milliseconds."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"0"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"effect","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"An animation effect used for transition."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'cross-dissolve'\n\nOn Android, only "},{"kind":"code","text":"`'cross-dissolve'`"},{"kind":"text","text":" is supported.\nOn Web, "},{"kind":"code","text":"`'curl-up'`"},{"kind":"text","text":" and "},{"kind":"code","text":"`'curl-down'`"},{"kind":"text","text":" effects are not supported."}]}]},"type":{"type":"union","types":[{"type":"literal","value":"cross-dissolve"},{"type":"literal","value":"flip-from-top"},{"type":"literal","value":"flip-from-right"},{"type":"literal","value":"flip-from-bottom"},{"type":"literal","value":"flip-from-left"},{"type":"literal","value":"curl-up"},{"type":"literal","value":"curl-down"},{"type":"literal","value":null}]}},{"name":"timing","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies the speed curve of the transition effect and how intermediate values are calculated."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'ease-in-out'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"ease-in-out"},{"type":"literal","value":"ease-in"},{"type":"literal","value":"ease-out"},{"type":"literal","value":"linear"}]}}]}}},{"name":"ImageBackground","variant":"declaration","kind":64,"signatures":[{"name":"ImageBackground","variant":"signature","kind":4096,"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"ImageBackgroundProps","package":"expo-image"}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element","target":{}}}]},{"name":"useImage","variant":"declaration","kind":64,"signatures":[{"name":"useImage","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"A hook that loads an image from the given source and returns a reference\nto the native image instance, or "},{"kind":"code","text":"`null`"},{"kind":"text","text":" until the first image is successfully loaded.\n\nIt loads a new image every time the "},{"kind":"code","text":"`uri`"},{"kind":"text","text":" of the provided source changes.\nTo trigger reloads in some other scenarios, you can provide an additional dependency list."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"android"}]},{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@platform","content":[{"kind":"text","text":"web"}]},{"tag":"@example","content":[{"kind":"code","text":"```ts\nimport { useImage, Image } from 'expo-image';\nimport { Text } from 'react-native';\n\nexport default function MyImage() {\n  const image = useImage('https://picsum.photos/1000/800', {\n    maxWidth: 800,\n    onError(error, retry) {\n      console.error('Loading failed:', error.message);\n    }\n  });\n\n  if (!image) {\n    return <Text>Image is loading...</Text>;\n  }\n\n  return <Image source={image} style={{ width: image.width / 2, height: image.height / 2 }} />;\n}\n```"}]}]},"parameters":[{"name":"source","variant":"param","kind":32768,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"ImageSource","package":"expo-image"}]}},{"name":"options","variant":"param","kind":32768,"type":{"type":"reference","name":"ImageLoadOptions","package":"expo-image"},"defaultValue":"{}"},{"name":"dependencies","variant":"param","kind":32768,"type":{"type":"reference","name":"DependencyList","package":"@types/react","qualifiedName":"React.DependencyList","target":{}},"defaultValue":"[]"}],"type":{"type":"union","types":[{"type":"reference","name":"ImageRef","package":"expo-image"},{"type":"literal","value":null}]}}]}],"packageName":"expo-image"}