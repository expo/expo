{"name":"expo-updates","kind":1,"children":[{"name":"UpdateEventType","kind":8,"comment":{"summary":[{"kind":"text","text":"The types of update-related events."}]},"children":[{"name":"ERROR","kind":16,"comment":{"summary":[{"kind":"text","text":"An error occurred trying to fetch the latest update."}]},"type":{"type":"literal","value":"error"}},{"name":"NO_UPDATE_AVAILABLE","kind":16,"comment":{"summary":[{"kind":"text","text":"No updates are available, and the most up-to-date update is already running."}]},"type":{"type":"literal","value":"noUpdateAvailable"}},{"name":"UPDATE_AVAILABLE","kind":16,"comment":{"summary":[{"kind":"text","text":"A new update has finished downloading to local storage. If you would like to start using this\nupdate at any point before the user closes and restarts the app on their own, you can call\n["},{"kind":"code","text":"`Updates.reloadAsync()`"},{"kind":"text","text":"](#reloadasync) to launch this new update."}]},"type":{"type":"literal","value":"updateAvailable"}}]},{"name":"UpdatesCheckAutomaticallyValue","kind":8,"comment":{"summary":[{"kind":"text","text":"The possible settings that determine if expo-updates will check for updates on app startup.\nBy default, Expo will check for updates every time the app is loaded. Set this to "},{"kind":"code","text":"`ON_ERROR_RECOVERY`"},{"kind":"text","text":" to disable automatic checking unless recovering from an error. Set this to "},{"kind":"code","text":"`NEVER`"},{"kind":"text","text":" to completely disable automatic checking. Must be one of "},{"kind":"code","text":"`ON_LOAD`"},{"kind":"text","text":" (default value), "},{"kind":"code","text":"`ON_ERROR_RECOVERY`"},{"kind":"text","text":", "},{"kind":"code","text":"`WIFI_ONLY`"},{"kind":"text","text":", or "},{"kind":"code","text":"`NEVER`"}]},"children":[{"name":"NEVER","kind":16,"comment":{"summary":[{"kind":"text","text":"Automatic update checks are off, and update checks must be done through the JS API."}]},"type":{"type":"literal","value":"NEVER"}},{"name":"ON_ERROR_RECOVERY","kind":16,"comment":{"summary":[{"kind":"text","text":"Only checks for updates when the app starts up after an error recovery."}]},"type":{"type":"literal","value":"ON_ERROR_RECOVERY"}},{"name":"ON_LOAD","kind":16,"comment":{"summary":[{"kind":"text","text":"Checks for updates whenever the app is loaded. This is the default setting."}]},"type":{"type":"literal","value":"ON_LOAD"}},{"name":"WIFI_ONLY","kind":16,"comment":{"summary":[{"kind":"text","text":"Only checks for updates when the app starts and has a WiFi connection."}]},"type":{"type":"literal","value":"WIFI_ONLY"}}]},{"name":"UpdatesLogEntryCode","kind":8,"comment":{"summary":[{"kind":"text","text":"The possible code values for expo-updates log entries"}]},"children":[{"name":"ASSETS_FAILED_TO_LOAD","kind":16,"type":{"type":"literal","value":"AssetsFailedToLoad"}},{"name":"JS_RUNTIME_ERROR","kind":16,"type":{"type":"literal","value":"JSRuntimeError"}},{"name":"NONE","kind":16,"type":{"type":"literal","value":"None"}},{"name":"NO_UPDATES_AVAILABLE","kind":16,"type":{"type":"literal","value":"NoUpdatesAvailable"}},{"name":"UNKNOWN","kind":16,"type":{"type":"literal","value":"Unknown"}},{"name":"UPDATE_ASSETS_NOT_AVAILABLE","kind":16,"type":{"type":"literal","value":"UpdateAssetsNotAvailable"}},{"name":"UPDATE_CODE_SIGNING_ERROR","kind":16,"type":{"type":"literal","value":"UpdateCodeSigningError"}},{"name":"UPDATE_FAILED_TO_LOAD","kind":16,"type":{"type":"literal","value":"UpdateFailedToLoad"}},{"name":"UPDATE_HAS_INVALID_SIGNATURE","kind":16,"type":{"type":"literal","value":"UpdateHasInvalidSignature"}},{"name":"UPDATE_SERVER_UNREACHABLE","kind":16,"type":{"type":"literal","value":"UpdateServerUnreachable"}}]},{"name":"UpdatesLogEntryLevel","kind":8,"comment":{"summary":[{"kind":"text","text":"The possible log levels for expo-updates log entries"}]},"children":[{"name":"DEBUG","kind":16,"type":{"type":"literal","value":"debug"}},{"name":"ERROR","kind":16,"type":{"type":"literal","value":"error"}},{"name":"FATAL","kind":16,"type":{"type":"literal","value":"fatal"}},{"name":"INFO","kind":16,"type":{"type":"literal","value":"info"}},{"name":"TRACE","kind":16,"type":{"type":"literal","value":"trace"}},{"name":"WARN","kind":16,"type":{"type":"literal","value":"warn"}}]},{"name":"UpdateCheckResult","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The result of checking for a new update."}]},"type":{"type":"union","types":[{"type":"reference","name":"UpdateCheckResultRollBackToEmbedded"},{"type":"reference","name":"UpdateCheckResultSuccess"},{"type":"reference","name":"UpdateCheckResultFailure"}]}},{"name":"UpdateCheckResultFailure","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The failed result of checking for a new update."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"isAvailable","kind":1024,"comment":{"summary":[{"kind":"text","text":"Signifies that the app is already running the latest available update."}]},"type":{"type":"literal","value":false}},{"name":"isRollBackToEmbedded","kind":1024,"comment":{"summary":[{"kind":"text","text":"Signifies that no roll back update is available."}]},"type":{"type":"literal","value":false}},{"name":"manifest","kind":1024,"comment":{"summary":[{"kind":"text","text":"No manifest, since the app is already running the latest available version."}]},"type":{"type":"intrinsic","name":"undefined"}}]}}},{"name":"UpdateCheckResultSuccess","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The successful result of checking for a new update."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"isAvailable","kind":1024,"comment":{"summary":[{"kind":"text","text":"Signifies that an update is available."}]},"type":{"type":"literal","value":true}},{"name":"isRollBackToEmbedded","kind":1024,"comment":{"summary":[{"kind":"text","text":"This property is false for a new update."}]},"type":{"type":"literal","value":false}},{"name":"manifest","kind":1024,"comment":{"summary":[{"kind":"text","text":"The manifest of the available update."}]},"type":{"type":"reference","name":"Manifest"}}]}}},{"name":"UpdateEvent","kind":4194304,"comment":{"summary":[{"kind":"text","text":"An object that is passed into each event listener when an auto-update check occurs."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"manifest","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`type`"},{"kind":"text","text":" is "},{"kind":"code","text":"`Updates.UpdateEventType.UPDATE_AVAILABLE`"},{"kind":"text","text":", the manifest of the newly downloaded\nupdate, and "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" otherwise."}]},"type":{"type":"reference","name":"Manifest"}},{"name":"message","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`type`"},{"kind":"text","text":" is "},{"kind":"code","text":"`Updates.UpdateEventType.ERROR`"},{"kind":"text","text":", the error message, and "},{"kind":"code","text":"`undefined`"},{"kind":"text","text":" otherwise."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"type","kind":1024,"comment":{"summary":[{"kind":"text","text":"Type of the event."}]},"type":{"type":"reference","name":"UpdateEventType"}}]}}},{"name":"UpdateFetchResult","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The result of fetching a new update."}]},"type":{"type":"union","types":[{"type":"reference","name":"UpdateFetchResultSuccess"},{"type":"reference","name":"UpdateFetchResultFailure"},{"type":"reference","name":"UpdateFetchResultRollbackToEmbedded"}]}},{"name":"UpdateFetchResultFailure","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The failed result of fetching a new update."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"isNew","kind":1024,"comment":{"summary":[{"kind":"text","text":"Signifies that the fetched bundle is the same as version which is currently running."}]},"type":{"type":"literal","value":false}},{"name":"manifest","kind":1024,"comment":{"summary":[{"kind":"text","text":"No manifest, since there is no update."}]},"type":{"type":"intrinsic","name":"undefined"}}]}}},{"name":"UpdateFetchResultSuccess","kind":4194304,"comment":{"summary":[{"kind":"text","text":"The successful result of fetching a new update."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"isNew","kind":1024,"comment":{"summary":[{"kind":"text","text":"Signifies that the fetched bundle is new (that is, a different version than what's currently\nrunning)."}]},"type":{"type":"literal","value":true}},{"name":"manifest","kind":1024,"comment":{"summary":[{"kind":"text","text":"The manifest of the newly downloaded update."}]},"type":{"type":"reference","name":"Manifest"}}]}}},{"name":"UpdatesLogEntry","kind":4194304,"comment":{"summary":[{"kind":"text","text":"An object representing a single log entry from expo-updates logging on the client."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"assetId","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If present, the unique ID or hash of an asset associated with this log entry."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"code","kind":1024,"comment":{"summary":[{"kind":"text","text":"One of the defined code values for expo-updates log entries."}]},"type":{"type":"reference","name":"UpdatesLogEntryCode"}},{"name":"level","kind":1024,"comment":{"summary":[{"kind":"text","text":"One of the defined log level or severity values."}]},"type":{"type":"reference","name":"UpdatesLogEntryLevel"}},{"name":"message","kind":1024,"comment":{"summary":[{"kind":"text","text":"The log entry message."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"stacktrace","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If present, an iOS or Android native stack trace associated with this log entry."}]},"type":{"type":"array","elementType":{"type":"intrinsic","name":"string"}}},{"name":"timestamp","kind":1024,"comment":{"summary":[{"kind":"text","text":"The time the log was written, in milliseconds since Jan 1 1970 UTC."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"updateId","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If present, the unique ID of an update associated with this log entry."}]},"type":{"type":"intrinsic","name":"string"}}]}}},{"name":"channel","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The channel name of the current build, if configured for use with EAS Update. Null otherwise."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"checkAutomatically","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"Determines if and when expo-updates checks for and downloads updates automatically on startup."}]},"type":{"type":"union","types":[{"type":"reference","name":"UpdatesCheckAutomaticallyValue"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"createdAt","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is enabled, this is a "},{"kind":"code","text":"`Date`"},{"kind":"text","text":" object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).\n\nIn development mode, or any other environment in which "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled, this value is\nnull."}]},"type":{"type":"union","types":[{"type":"reference","name":"Date","qualifiedName":"Date","package":"typescript"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"isEmbeddedLaunch","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"This will be true if the currently running update is the one embedded in the build,\nand not one downloaded from the updates server."}]},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"..."},{"name":"isEmergencyLaunch","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" does its very best to always launch monotonically newer versions of your app so\nyou don't need to worry about backwards compatibility when you put out an update. In very rare\ncases, it's possible that "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" may need to fall back to the update that's embedded in\nthe app binary, even after newer updates have been downloaded and run (an \"emergency launch\").\nThis boolean will be "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the app is launching under this fallback mechanism and "},{"kind":"code","text":"`false`"},{"kind":"text","text":"\notherwise. If you are concerned about backwards compatibility of future updates to your app, you\ncan use this constant to provide special behavior for this rare case."}]},"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"..."},{"name":"manifest","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"If "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is enabled, this is the\n[manifest](/versions/latest/sdk/constants/#manifest) (or\n[classic manifest](/versions/latest/sdk/constants/#appmanifest))\nobject for the update that's currently running.\n\nIn development mode, or any other environment in which "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled, this object is\nempty."}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"Manifest"}],"name":"Partial","qualifiedName":"Partial","package":"typescript"},"defaultValue":"..."},{"name":"releaseChannel","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The name of the release channel currently configured in this standalone or bare app when using\nclassic updates. When using Expo Updates, the value of this field is always "},{"kind":"code","text":"`\"default\"`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"},"defaultValue":"..."},{"name":"runtimeVersion","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The runtime version of the current build."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"updateId","kind":32,"flags":{"isConst":true},"comment":{"summary":[{"kind":"text","text":"The UUID that uniquely identifies the currently running update if "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is enabled. The\nUUID is represented in its canonical string form ("},{"kind":"code","text":"`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`"},{"kind":"text","text":") and\nwill always use lowercase letters. In development mode, or any other environment in which\n"},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" is disabled, this value is "},{"kind":"code","text":"`null`"},{"kind":"text","text":"."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"literal","value":null}]},"defaultValue":"..."},{"name":"addListener","kind":64,"signatures":[{"name":"addListener","kind":4096,"comment":{"summary":[{"kind":"text","text":"Adds a callback to be invoked when updates-related events occur (such as upon the initial app\nload) due to auto-update settings chosen at build-time. See also the\n["},{"kind":"code","text":"`useUpdateEvents`"},{"kind":"text","text":"](#useupdateeventslistener) React hook."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"An "},{"kind":"code","text":"`EventSubscription`"},{"kind":"text","text":" object on which you can call "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" to unsubscribe the\nlistener."}]}]},"parameters":[{"name":"listener","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function that will be invoked with an ["},{"kind":"code","text":"`UpdateEvent`"},{"kind":"text","text":"](#updateevent) instance\nand should not return any value."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"signatures":[{"name":"__type","kind":4096,"parameters":[{"name":"event","kind":32768,"type":{"type":"reference","name":"UpdateEvent"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"reference","name":"EventSubscription","qualifiedName":"EventSubscription","package":"@types/fbemitter"}}]},{"name":"checkForUpdateAsync","kind":64,"signatures":[{"name":"checkForUpdateAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Checks the server to see if a newly deployed update to your project is available. Does not\nactually download the update. This method cannot be used in development mode, and the returned\npromise will be rejected if you try to do so.\n\nChecking for an update uses a device's bandwidth and battery life like any network call.\nAdditionally, updates served by Expo may be rate limited. A good rule of thumb to check for\nupdates judiciously is to check when the user launches or foregrounds the app. Avoid polling for\nupdates in a frequent loop."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills with an ["},{"kind":"code","text":"`UpdateCheckResult`"},{"kind":"text","text":"](#updatecheckresult) object.\n\nThe promise rejects if the app is in development mode, or if there is an unexpected error or\ntimeout communicating with the server."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"UpdateCheckResult"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"clearLogEntriesAsync","kind":64,"signatures":[{"name":"clearLogEntriesAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Clears existing expo-updates log entries.\n\n> For now, this operation does nothing on the client.  Once log persistence has been\n> implemented, this operation will actually remove existing logs."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills if the clear operation was successful.\n\nThe promise rejects if there is an unexpected error in clearing the logs."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"fetchUpdateAsync","kind":64,"signatures":[{"name":"fetchUpdateAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Downloads the most recently deployed update to your project from server to the device's local\nstorage. This method cannot be used in development mode, and the returned promise will be\nrejected if you try to do so."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills with an ["},{"kind":"code","text":"`UpdateFetchResult`"},{"kind":"text","text":"](#updatefetchresult) object.\n\nThe promise rejects if the app is in development mode, or if there is an unexpected error or\ntimeout communicating with the server."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"UpdateFetchResult"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"getExtraParamsAsync","kind":64,"signatures":[{"name":"getExtraParamsAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Retrieves the current extra params."}]},"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"indexSignature":{"name":"__index","kind":8192,"parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"string"}}}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"readLogEntriesAsync","kind":64,"signatures":[{"name":"readLogEntriesAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Retrieves the most recent expo-updates log entries."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills with an array of ["},{"kind":"code","text":"`UpdatesLogEntry`"},{"kind":"text","text":"](#updateslogentry) objects;\n\nThe promise rejects if there is an unexpected error in retrieving the logs."}]}]},"parameters":[{"name":"maxAge","kind":32768,"comment":{"summary":[{"kind":"text","text":"Sets the max age of retrieved log entries in milliseconds. Default to 3600000 ms (1 hour)."}]},"type":{"type":"intrinsic","name":"number"},"defaultValue":"3600000"}],"type":{"type":"reference","typeArguments":[{"type":"array","elementType":{"type":"reference","name":"UpdatesLogEntry"}}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"reloadAsync","kind":64,"signatures":[{"name":"reloadAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Instructs the app to reload using the most recently downloaded version. This is useful for\ntriggering a newly downloaded update to launch without the user needing to manually restart the\napp.\n\nIt is not recommended to place any meaningful logic after a call to "},{"kind":"code","text":"`await\nUpdates.reloadAsync()`"},{"kind":"text","text":". This is because the promise is resolved after verifying that the app can\nbe reloaded, and immediately before posting an asynchronous task to the main thread to actually\nreload the app. It is unsafe to make any assumptions about whether any more JS code will be\nexecuted after the "},{"kind":"code","text":"`Updates.reloadAsync`"},{"kind":"text","text":" method call resolves, since that depends on the OS and\nthe state of the native module and main threads.\n\nThis method cannot be used in development mode, and the returned promise will be rejected if you\ntry to do so."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that fulfills right before the reload instruction is sent to the JS runtime, or\nrejects if it cannot find a reference to the JS runtime. If the promise is rejected in production\nmode, it most likely means you have installed the module incorrectly. Double check you've\nfollowed the installation instructions. In particular, on iOS ensure that you set the "},{"kind":"code","text":"`bridge`"},{"kind":"text","text":"\nproperty on "},{"kind":"code","text":"`EXUpdatesAppController`"},{"kind":"text","text":" with a pointer to the "},{"kind":"code","text":"`RCTBridge`"},{"kind":"text","text":" you want to reload, and on\nAndroid ensure you either call "},{"kind":"code","text":"`UpdatesController.initialize`"},{"kind":"text","text":" with the instance of\n"},{"kind":"code","text":"`ReactApplication`"},{"kind":"text","text":" you want to reload, or call "},{"kind":"code","text":"`UpdatesController.setReactNativeHost`"},{"kind":"text","text":" with the\nproper instance of "},{"kind":"code","text":"`ReactNativeHost`"},{"kind":"text","text":"."}]}]},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"setExtraParamAsync","kind":64,"signatures":[{"name":"setExtraParamAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Sets an extra param if value is non-null, otherwise unsets the param.\nExtra params are sent in a header of update requests.\nThe update server may use these params when evaluating logic to determine which update to serve.\nEAS Update merges these params into the fields used to evaluate channel–branch mapping logic."}],"blockTags":[{"tag":"@example","content":[{"kind":"text","text":"An app may want to add a feature where users can opt-in to beta updates. In this instance,\nextra params could be set to "},{"kind":"code","text":"`{userType: 'beta'}`"},{"kind":"text","text":", and then the server can use this information\nwhen deciding which update to serve. If using EAS Update, the channel-branch mapping can be set to\ndiscriminate branches based on the "},{"kind":"code","text":"`userType`"},{"kind":"text","text":"."}]}]},"parameters":[{"name":"key","kind":32768,"type":{"type":"intrinsic","name":"string"}},{"name":"value","kind":32768,"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"literal","value":null},{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"useUpdateEvents","kind":64,"signatures":[{"name":"useUpdateEvents","kind":4096,"comment":{"summary":[{"kind":"text","text":"React hook to create an ["},{"kind":"code","text":"`UpdateEvent`"},{"kind":"text","text":"](#updateevent) listener subscription on mount, using\n["},{"kind":"code","text":"`addListener`"},{"kind":"text","text":"](#updatesaddlistenerlistener). It calls "},{"kind":"code","text":"`remove()`"},{"kind":"text","text":" on the subscription during unmount."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```ts\nfunction App() {\n  const eventListener = (event) => {\n    if (event.type === Updates.UpdateEventType.ERROR) {\n      // Handle error\n    } else if (event.type === Updates.UpdateEventType.NO_UPDATE_AVAILABLE) {\n      // Handle no update available\n    } else if (event.type === Updates.UpdateEventType.UPDATE_AVAILABLE) {\n      // Handle update available\n    }\n  };\n  Updates.useUpdateEvents(eventListener);\n  // React Component...\n}\n```"}]}]},"parameters":[{"name":"listener","kind":32768,"comment":{"summary":[{"kind":"text","text":"A function that will be invoked with an ["},{"kind":"code","text":"`UpdateEvent`"},{"kind":"text","text":"](#updateevent) instance\nand should not return any value."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"signatures":[{"name":"__type","kind":4096,"parameters":[{"name":"event","kind":32768,"type":{"type":"reference","name":"UpdateEvent"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"intrinsic","name":"void"}}]}]}