{"name":"expo","variant":"project","kind":1,"children":[{"name":"isRunningInExpoGo","variant":"declaration","kind":64,"signatures":[{"name":"isRunningInExpoGo","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns a boolean value whether the app is running in Expo Go."}]},"type":{"type":"intrinsic","name":"boolean"}}]},{"name":"registerRootComponent","variant":"declaration","kind":64,"signatures":[{"name":"registerRootComponent","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Sets the initial React component to render natively in the app's root React Native view on Android, iOS, tvOS and the web.\n\nThis method does the following:\n- Invokes React Native's "},{"kind":"code","text":"`AppRegistry.registerComponent`"},{"kind":"text","text":".\n- Invokes React Native web's "},{"kind":"code","text":"`AppRegistry.runApplication`"},{"kind":"text","text":" on web to render to the root "},{"kind":"code","text":"`index.html`"},{"kind":"text","text":" file.\n- Polyfills the "},{"kind":"code","text":"`process.nextTick`"},{"kind":"text","text":" function globally.\n- Adds support for using the "},{"kind":"code","text":"`fontFamily`"},{"kind":"text","text":" React Native style with the "},{"kind":"code","text":"`expo-font`"},{"kind":"text","text":" package.\n\nThis method also adds the following dev-only features that are removed in production bundles.\n- Adds the Fast Refresh and bundle splitting indicator to the app.\n- Asserts if the "},{"kind":"code","text":"`expo-updates`"},{"kind":"text","text":" package is misconfigured.\n- Asserts if "},{"kind":"code","text":"`react-native`"},{"kind":"text","text":" is not aliased to "},{"kind":"code","text":"`react-native-web`"},{"kind":"text","text":" when running in the browser."}]},"typeParameter":[{"name":"P","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"InitialProps","package":"expo"}}],"parameters":[{"name":"component","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"The React component class that renders the rest of your app."}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"P","package":"expo","refersToTypeParameter":true}],"name":"ComponentType","package":"@types/react","qualifiedName":"React.ComponentType"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"reloadAppAsync","variant":"declaration","kind":64,"signatures":[{"name":"reloadAppAsync","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Reloads the app. This method works for both release and debug builds.\n\nUnlike ["},{"kind":"code","text":"`Updates.reloadAsync()`"},{"kind":"text","text":"](/versions/latest/sdk/updates/#updatesreloadasync),\nthis function does not use a new update even if one is available. It only reloads the app using the same JavaScript bundle that is currently running."}]},"parameters":[{"name":"reason","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The reason for reloading the app. This is used only for some platforms."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]},{"name":"requireNativeModule","variant":"declaration","kind":64,"signatures":[{"name":"requireNativeModule","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Imports the native module registered with given name. In the first place it tries to load\nthe module installed through the JSI host object and then falls back to the bridge proxy module.\nNotice that the modules loaded from the proxy may not support some features like synchronous functions."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Object representing the native module."}]},{"tag":"@throws","content":[{"kind":"text","text":"Error when there is no native module with given name."}]}]},"typeParameter":[{"name":"ModuleType","variant":"typeParam","kind":131072,"default":{"type":"intrinsic","name":"any"}}],"parameters":[{"name":"moduleName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Name of the requested native module."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"ModuleType","package":"expo-modules-core","refersToTypeParameter":true}}]},{"name":"requireOptionalNativeModule","variant":"declaration","kind":64,"signatures":[{"name":"requireOptionalNativeModule","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Imports the native module registered with the given name. The same as "},{"kind":"code","text":"`requireNativeModule`"},{"kind":"text","text":",\nbut returns "},{"kind":"code","text":"`null`"},{"kind":"text","text":" when the module cannot be found instead of throwing an error."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"Object representing the native module or "},{"kind":"code","text":"`null`"},{"kind":"text","text":" when it cannot be found."}]}]},"typeParameter":[{"name":"ModuleType","variant":"typeParam","kind":131072,"default":{"type":"intrinsic","name":"any"}}],"parameters":[{"name":"moduleName","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Name of the requested native module."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"union","types":[{"type":"reference","name":"ModuleType","package":"expo-modules-core","refersToTypeParameter":true},{"type":"literal","value":null}]}}]}],"packageName":"expo"}
