{"name":"expo-gl","kind":1,"children":[{"name":"GLLoggingOption","kind":8,"children":[{"name":"ALL","kind":16,"comment":{"summary":[{"kind":"text","text":"Enables all other options. It implies "},{"kind":"code","text":"`GET_ERRORS`"},{"kind":"text","text":" so be aware of the slowdown."}]},"type":{"type":"literal","value":15}},{"name":"DISABLED","kind":16,"comment":{"summary":[{"kind":"text","text":"Disables logging entirely."}]},"type":{"type":"literal","value":0}},{"name":"GET_ERRORS","kind":16,"comment":{"summary":[{"kind":"text","text":"Calls "},{"kind":"code","text":"`gl.getError()`"},{"kind":"text","text":" after each other method call and prints an error if any is returned.\nThis option has a significant impact on the performance as this method is blocking."}]},"type":{"type":"literal","value":2}},{"name":"METHOD_CALLS","kind":16,"comment":{"summary":[{"kind":"text","text":"Logs method calls, their parameters and results."}]},"type":{"type":"literal","value":1}},{"name":"RESOLVE_CONSTANTS","kind":16,"comment":{"summary":[{"kind":"text","text":"Resolves parameters of type "},{"kind":"code","text":"`number`"},{"kind":"text","text":" to their constant names."}]},"type":{"type":"literal","value":4}},{"name":"TRUNCATE_STRINGS","kind":16,"comment":{"summary":[{"kind":"text","text":"When this option is enabled, long strings will be truncated.\nIt's useful if your shaders are really big and logging them significantly reduces performance."}]},"type":{"type":"literal","value":8}}]},{"name":"GLView","kind":128,"comment":{"summary":[{"kind":"text","text":"A View that acts as an OpenGL ES render target. On mounting, an OpenGL ES context is created.\nIts drawing buffer is presented as the contents of the View every frame."}]},"children":[{"name":"constructor","kind":512,"flags":{"isExternal":true},"signatures":[{"name":"new GLView","kind":16384,"flags":{"isExternal":true},"parameters":[{"name":"props","kind":32768,"flags":{"isExternal":true},"type":{"type":"union","types":[{"type":"reference","name":"GLViewProps"},{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"name":"Readonly","qualifiedName":"Readonly","package":"typescript"}]}}],"type":{"type":"reference","name":"GLView"},"inheritedFrom":{"type":"reference","name":"React.Component<GLViewProps>.constructor"}},{"name":"new GLView","kind":16384,"flags":{"isExternal":true},"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[]},{"tag":"@see","content":[{"kind":"text","text":"https://reactjs.org/docs/legacy-context.html"}]}]},"parameters":[{"name":"props","kind":32768,"flags":{"isExternal":true},"type":{"type":"reference","name":"GLViewProps"}},{"name":"context","kind":32768,"flags":{"isExternal":true},"type":{"type":"intrinsic","name":"any"}}],"type":{"type":"reference","name":"GLView"},"inheritedFrom":{"type":"reference","name":"React.Component<GLViewProps>.constructor"}}],"inheritedFrom":{"type":"reference","name":"React.Component<GLViewProps>.constructor"}},{"name":"exglCtxId","kind":1024,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}},{"name":"nativeRef","kind":1024,"type":{"type":"reference","name":"ComponentOrHandle"},"defaultValue":"null"},{"name":"NativeView","kind":1024,"flags":{"isStatic":true},"type":{"type":"intrinsic","name":"any"}},{"name":"defaultProps","kind":1024,"flags":{"isStatic":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"enableExperimentalWorkletSupport","kind":1024,"type":{"type":"intrinsic","name":"boolean"},"defaultValue":"false"},{"name":"msaaSamples","kind":1024,"type":{"type":"intrinsic","name":"number"},"defaultValue":"4"}]}},"defaultValue":"..."},{"name":"getWorkletContext","kind":1024,"flags":{"isStatic":true},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"signatures":[{"name":"__type","kind":4096,"parameters":[{"name":"contextId","kind":32768,"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"reference","name":"ExpoWebGLRenderingContext"}]}}]}},"defaultValue":"workletContextManager.getContext"},{"name":"_onSurfaceCreate","kind":2048,"signatures":[{"name":"_onSurfaceCreate","kind":4096,"parameters":[{"name":"__namedParameters","kind":32768,"type":{"type":"reference","name":"SurfaceCreateEvent"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"_setNativeRef","kind":2048,"signatures":[{"name":"_setNativeRef","kind":4096,"parameters":[{"name":"nativeRef","kind":32768,"type":{"type":"reference","name":"ComponentOrHandle"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"componentDidUpdate","kind":2048,"signatures":[{"name":"componentDidUpdate","kind":4096,"parameters":[{"name":"prevProps","kind":32768,"type":{"type":"reference","name":"GLViewProps"}}],"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","name":"React.Component.componentDidUpdate"}}],"overwrites":{"type":"reference","name":"React.Component.componentDidUpdate"}},{"name":"componentWillUnmount","kind":2048,"signatures":[{"name":"componentWillUnmount","kind":4096,"type":{"type":"intrinsic","name":"void"},"overwrites":{"type":"reference","name":"React.Component.componentWillUnmount"}}],"overwrites":{"type":"reference","name":"React.Component.componentWillUnmount"}},{"name":"createCameraTextureAsync","kind":2048,"signatures":[{"name":"createCameraTextureAsync","kind":4096,"parameters":[{"name":"cameraRefOrHandle","kind":32768,"type":{"type":"reference","name":"ComponentOrHandle"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"WebGLTexture","qualifiedName":"WebGLTexture","package":"typescript"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"destroyObjectAsync","kind":2048,"signatures":[{"name":"destroyObjectAsync","kind":4096,"parameters":[{"name":"glObject","kind":32768,"type":{"type":"reference","name":"WebGLObject"}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"render","kind":2048,"signatures":[{"name":"render","kind":4096,"type":{"type":"reference","name":"Element","qualifiedName":"global.JSX.Element","package":"@types/react"},"overwrites":{"type":"reference","name":"React.Component.render"}}],"overwrites":{"type":"reference","name":"React.Component.render"}},{"name":"startARSessionAsync","kind":2048,"signatures":[{"name":"startARSessionAsync","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"takeSnapshotAsync","kind":2048,"signatures":[{"name":"takeSnapshotAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Same as static ["},{"kind":"code","text":"`takeSnapshotAsync()`"},{"kind":"text","text":"](#glviewtakesnapshotasyncgl-options),\nbut uses WebGL context that is associated with the view on which the method is called."}]},"parameters":[{"name":"options","kind":32768,"type":{"type":"reference","name":"SnapshotOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLSnapshot"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"createContextAsync","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"createContextAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Imperative API that creates headless context which is devoid of underlying view.\nIt's useful for headless rendering or in case you want to keep just one context per application and share it between multiple components.\nIt is slightly faster than usual context as it doesn't swap framebuffers and doesn't present them on the canvas,\nhowever it may require you to take a snapshot in order to present its results.\nAlso, keep in mind that you need to set up a viewport and create your own framebuffer and texture that you will be drawing to, before you take a snapshot."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that resolves to WebGL context object. See [WebGL API](#webgl-api) for more details."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ExpoWebGLRenderingContext"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"destroyContextAsync","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"destroyContextAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Destroys given context."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that resolves to boolean value that is "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if given context existed and has been destroyed successfully."}]}]},"parameters":[{"name":"exgl","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"WebGL context to destroy."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"ExpoWebGLRenderingContext"}]}}],"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"boolean"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]},{"name":"takeSnapshotAsync","kind":2048,"flags":{"isStatic":true},"signatures":[{"name":"takeSnapshotAsync","kind":4096,"comment":{"summary":[{"kind":"text","text":"Takes a snapshot of the framebuffer and saves it as a file to app's cache directory."}],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"A promise that resolves to "},{"kind":"code","text":"`GLSnapshot`"},{"kind":"text","text":" object."}]}]},"parameters":[{"name":"exgl","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"WebGL context to take a snapshot from."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"number"},{"type":"reference","name":"ExpoWebGLRenderingContext"}]}},{"name":"options","kind":32768,"type":{"type":"reference","name":"SnapshotOptions"},"defaultValue":"{}"}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"GLSnapshot"}],"name":"Promise","qualifiedName":"Promise","package":"typescript"}}]}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"GLViewProps"}],"name":"Component","qualifiedName":"React.Component","package":"@types/react"}]},{"name":"ExpoWebGLRenderingContext","kind":256,"children":[{"name":"contextId","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"__expoSetLogging","kind":2048,"signatures":[{"name":"__expoSetLogging","kind":4096,"parameters":[{"name":"option","kind":32768,"type":{"type":"reference","name":"GLLoggingOption"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"endFrameEXP","kind":2048,"signatures":[{"name":"endFrameEXP","kind":4096,"type":{"type":"intrinsic","name":"void"}}]},{"name":"flushEXP","kind":2048,"signatures":[{"name":"flushEXP","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}],"extendedTypes":[{"type":"reference","name":"WebGL2RenderingContext","qualifiedName":"WebGL2RenderingContext","package":"typescript"}]},{"name":"ComponentOrHandle","kind":4194304,"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"intrinsic","name":"number"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"},{"type":"intrinsic","name":"any"}],"name":"Component","qualifiedName":"React.Component","package":"@types/react"},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ComponentClass","qualifiedName":"React.ComponentClass","package":"@types/react"}]}},{"name":"GLSnapshot","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"height","kind":1024,"comment":{"summary":[{"kind":"text","text":"Height of the snapshot."}]},"type":{"type":"intrinsic","name":"number"}},{"name":"localUri","kind":1024,"comment":{"summary":[{"kind":"text","text":"Synonym for "},{"kind":"code","text":"`uri`"},{"kind":"text","text":". Makes snapshot object compatible with "},{"kind":"code","text":"`texImage2D`"},{"kind":"text","text":"."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"uri","kind":1024,"comment":{"summary":[{"kind":"text","text":"URI to the snapshot."}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reference","name":"Blob","qualifiedName":"Blob","package":"typescript"},{"type":"literal","value":null}]}},{"name":"width","kind":1024,"comment":{"summary":[{"kind":"text","text":"Width of the snapshot."}]},"type":{"type":"intrinsic","name":"number"}}]}}},{"name":"GLViewProps","kind":4194304,"type":{"type":"intersection","types":[{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"enableExperimentalWorkletSupport","kind":1024,"comment":{"summary":[{"kind":"text","text":"Enables support for interacting with a "},{"kind":"code","text":"`gl`"},{"kind":"text","text":" object from code running on the Reanimated worklet thread."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"msaaSamples","kind":1024,"comment":{"summary":[{"kind":"code","text":"`GLView`"},{"kind":"text","text":" can enable iOS's built-in [multisampling](https://www.khronos.org/registry/OpenGL/extensions/APPLE/APPLE_framebuffer_multisample.txt).\nThis prop specifies the number of samples to use. Setting this to "},{"kind":"code","text":"`0`"},{"kind":"text","text":" turns off multisampling."}],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"ios"}]},{"tag":"@default","content":[{"kind":"text","text":"4"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"onContextCreate","kind":2048,"signatures":[{"name":"onContextCreate","kind":4096,"comment":{"summary":[{"kind":"text","text":"A function that will be called when the OpenGL ES context is created.\nThe function is passed a single argument "},{"kind":"code","text":"`gl`"},{"kind":"text","text":" that extends a [WebGLRenderingContext](https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14) interface."}]},"parameters":[{"name":"gl","kind":32768,"type":{"type":"reference","name":"ExpoWebGLRenderingContext"}}],"type":{"type":"intrinsic","name":"void"}}]}]}},{"type":"reference","name":"ViewProps","qualifiedName":"ViewProps","package":"react-native"}]}},{"name":"SnapshotOptions","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"compress","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A value in range "},{"kind":"code","text":"`0`"},{"kind":"text","text":" to "},{"kind":"code","text":"`1.0`"},{"kind":"text","text":" specifying compression level of the result image.\n"},{"kind":"code","text":"`1.0`"},{"kind":"text","text":" means no compression and "},{"kind":"code","text":"`0`"},{"kind":"text","text":" the highest compression."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"1.0"}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"flip","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Whether to flip the snapshot vertically."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"false"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"format","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies what type of compression should be used and what is the result file extension.\nPNG compression is lossless but slower, JPEG is faster but the image has visible artifacts.\n> **Note:** When using WebP format, the iOS version will print a warning, and generate a "},{"kind":"code","text":"`'png'`"},{"kind":"text","text":" file instead.\n> It is recommendable to use platform dependant code in this case. You can refer to the [documentation on platform specific code](/versions/latest/react-native/platform-specific-code)."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'jpeg'"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"jpeg"},{"type":"literal","value":"png"},{"type":"literal","value":"webp"}]}},{"name":"framebuffer","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specify the framebuffer that we will be reading from.\nDefaults to underlying framebuffer that is presented in the view or the current framebuffer if context is headless."}]},"type":{"type":"reference","name":"WebGLFramebuffer","qualifiedName":"WebGLFramebuffer","package":"typescript"}},{"name":"rect","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Rect to crop the snapshot. It's passed directly to "},{"kind":"code","text":"`glReadPixels`"},{"kind":"text","text":"."}]},"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"height","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"width","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"x","kind":1024,"type":{"type":"intrinsic","name":"number"}},{"name":"y","kind":1024,"type":{"type":"intrinsic","name":"number"}}]}}}]}}},{"name":"SurfaceCreateEvent","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"nativeEvent","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"exglCtxId","kind":1024,"type":{"type":"intrinsic","name":"number"}}]}}}]}}},{"name":"WebGLObject","kind":4194304,"type":{"type":"reflection","declaration":{"name":"__type","kind":65536,"children":[{"name":"id","kind":1024,"type":{"type":"intrinsic","name":"number"}}]}}}]}