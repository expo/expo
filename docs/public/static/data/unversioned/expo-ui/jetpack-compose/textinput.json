{"name":"expo-ui/jetpack-compose/textinput","variant":"project","kind":1,"children":[{"name":"NativeTextInputProps","variant":"declaration","kind":2097152,"type":{"type":"intersection","types":[{"type":"reference","target":{"qualifiedName":"Omit"},"typeArguments":[{"type":"reference","name":"TextInputProps","package":"@expo/ui"},{"type":"literal","value":"onChangeText"}],"name":"Omit","package":"typescript"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}},{"type":"reference","target":{"qualifiedName":"ViewEvent"},"typeArguments":[{"type":"literal","value":"onValueChanged"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"value","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}],"name":"ViewEvent","package":"@expo/ui"}]}},{"name":"TextInputProps","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"autoCapitalize","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Options to request software keyboard to capitalize the text. Applies to languages which has upper-case and lower-case letters.\n\nAvailable options:\n- "},{"kind":"code","text":"`characters`"},{"kind":"text","text":": Capitalize all characters.\n- "},{"kind":"code","text":"`none`"},{"kind":"text","text":": Do not auto-capitalize text.\n- "},{"kind":"code","text":"`sentences`"},{"kind":"text","text":": Capitalize the first character of each sentence.\n- "},{"kind":"code","text":"`unspecified`"},{"kind":"text","text":": Capitalization behavior is not specified.\n- "},{"kind":"code","text":"`words`"},{"kind":"text","text":": Capitalize the first character of every word."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"none"}]},{"tag":"@platform","content":[{"kind":"text","text":"android"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"characters"},{"type":"literal","value":"none"},{"type":"literal","value":"sentences"},{"type":"literal","value":"unspecified"},{"type":"literal","value":"words"}]}},{"name":"autocorrection","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If true, autocorrection is enabled."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"true"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"defaultValue","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Initial value that the TextInput displays when being mounted. As the TextInput is an uncontrolled component, change the key prop if you need to change the text value."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"keyboardType","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Determines which keyboard to open. For example, "},{"kind":"code","text":"`'numeric'`"},{"kind":"text","text":".\n\nAvailable options:\n- default\n- numeric\n- email-address\n- phone-pad\n- decimal-pad\n- ascii-capable\n- url\n- password\n- password-numeric"}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"default"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"default"},{"type":"literal","value":"email-address"},{"type":"literal","value":"numeric"},{"type":"literal","value":"phone-pad"},{"type":"literal","value":"ascii-capable"},{"type":"literal","value":"url"},{"type":"literal","value":"decimal-pad"}]}},{"name":"modifiers","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Modifiers for the component"}]},"type":{"type":"array","elementType":{"type":"reference","target":{"qualifiedName":"ExpoModifier"},"name":"ExpoModifier","package":"@expo/ui"}}},{"name":"multiline","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"If true, the text input can be multiple lines.\nWhile the content will wrap, there's no keyboard button to insert a new line."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"numberOfLines","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"The number of lines to display when "},{"kind":"code","text":"`multiline`"},{"kind":"text","text":" is set to true.\nIf the number of lines in the view is above this number, the view scrolls."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"undefined, which means unlimited lines."}]}]},"type":{"type":"intrinsic","name":"number"}},{"name":"onChangeText","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A callback triggered when user types in text into the TextInput."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"value","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"ref","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Can be used for imperatively setting text on the TextInput component."}]},"type":{"type":"reference","target":{"qualifiedName":"React.Ref"},"typeArguments":[{"type":"reference","name":"TextInputRef","package":"@expo/ui"}],"name":"Ref","package":"@types/react","qualifiedName":"React.Ref"}},{"name":"style","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Additional styles to apply to the TextInput."}]},"type":{"type":"reference","target":{"qualifiedName":"StyleProp"},"typeArguments":[{"type":"reference","target":{"qualifiedName":"ViewStyle"},"name":"ViewStyle","package":"react-native"}],"name":"StyleProp","package":"react-native"}}]}}},{"name":"TextInputRef","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"setText","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"newText","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","target":{"qualifiedName":"Promise"},"typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript"}}]}}}]}}},{"name":"TextInput","variant":"declaration","kind":64,"signatures":[{"name":"TextInput","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Renders a "},{"kind":"code","text":"`TextInput`"},{"kind":"text","text":" component."}]},"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","name":"TextInputProps","package":"@expo/ui"}}],"type":{"type":"reference","target":{"qualifiedName":"React.JSX.Element"},"name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element"}}]}],"packageName":"@expo/ui"}