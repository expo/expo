{"name":"expo-router","variant":"project","kind":1,"children":[{"name":"LinkProps","variant":"declaration","kind":256,"children":[{"name":"asChild","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Forward props to child component. Useful for custom buttons."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"className","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"On web, this sets the HTML "},{"kind":"code","text":"`class`"},{"kind":"text","text":" directly. On native, this can be used with CSS interop tools like Nativewind."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"download","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Specifies that the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" should be downloaded when the user clicks on the link,\ninstead of navigating to it. It is typically used for links that point to files that the user should download,\nsuch as PDFs, images, documents, etc.\n\nThe value of the "},{"kind":"code","text":"`download`"},{"kind":"text","text":" property, which represents the filename for the downloaded file.\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"/image.jpg\" download=\"my-image.jpg\">Download image</Link>\n```"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WebAnchorProps.download"}},{"name":"href","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Path to route to."}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","qualifiedName":"LinkProps.T","refersToTypeParameter":true}],"name":"Href","package":"expo-router"}},{"name":"onPress","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting)."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"e","variant":"param","kind":32768,"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLAnchorElement","package":"typescript","target":{}},{"type":"reference","name":"MouseEvent","package":"typescript","target":{}}],"name":"MouseEvent","package":"@types/react","qualifiedName":"React.MouseEvent","target":{}},{"type":"reference","name":"GestureResponderEvent","package":"react-native","target":{}}]}}],"type":{"type":"intrinsic","name":"void"}}]}},"overwrites":{"type":"reference","name":"Omit.onPress"}},{"name":"push","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Should push the current route"}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"rel","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Specifies the relationship between the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" and the current route.\n\nCommon values:\n- **nofollow**: Indicates to search engines that they should not follow the "},{"kind":"code","text":"`href`"},{"kind":"text","text":". This is often used for user-generated content or links that should not influence search engine rankings.\n- **noopener**: Suggests that the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" should not have access to the opening window's "},{"kind":"code","text":"`window.opener`"},{"kind":"text","text":" object, which is a security measure to prevent potentially harmful behavior in cases of links that open new tabs or windows.\n- **noreferrer**: Requests that the browser not send the "},{"kind":"code","text":"`Referer`"},{"kind":"text","text":" HTTP header when navigating to the "},{"kind":"code","text":"`href`"},{"kind":"text","text":". This can enhance user privacy.\n\nThe "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" property is primarily used for informational and instructive purposes, helping browsers and web\ncrawlers make better decisions about how to handle and interpret the links on a web page. It is important\nto use appropriate "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" values to ensure that links behave as intended and adhere to best practices for web\ndevelopment and SEO (Search Engine Optimization).\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"https://expo.dev\" rel=\"nofollow\">Go to Expo</Link>`\n```"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WebAnchorProps.rel"}},{"name":"relativeToDirectory","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Relative URL references are either relative to the directory or the document. By default, relative paths are relative to the document."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"[Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references)"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"replace","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Should replace the current route without adding to the history."}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"target","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Specifies where to open the "},{"kind":"code","text":"`href`"},{"kind":"text","text":".\n\n- **_self**: the current tab.\n- **_blank**: opens in a new tab or window.\n- **_parent**: opens in the parent browsing context. If no parent, defaults to **_self**.\n- **_top**: opens in the highest browsing context ancestor. If no ancestors, defaults to **_self**.\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'_self'"}]},{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"https://expo.dev\" target=\"_blank\">Go to Expo in new tab</Link>\n```"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"_self"},{"type":"literal","value":"_blank"},{"type":"literal","value":"_parent"},{"type":"literal","value":"_top"}]},"inheritedFrom":{"type":"reference","name":"WebAnchorProps.target"}},{"name":"withAnchor","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Should this route replace the initial screen"}]},"type":{"type":"intrinsic","name":"boolean"}}],"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"TextProps","package":"react-native","target":{}},{"type":"literal","value":"href"}],"name":"Omit","package":"typescript","target":{}},{"type":"reference","name":"WebAnchorProps","package":"expo-router"}]},{"name":"EffectCallback","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Memoized callback containing the effect, should optionally return a cleanup function."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}]}}]}}},{"name":"ErrorBoundaryProps","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Props passed to a page's "},{"kind":"code","text":"`ErrorBoundary`"},{"kind":"text","text":" export."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"error","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The error that was thrown."}]},"type":{"type":"reference","name":"Error","package":"typescript","target":{}}},{"name":"retry","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Retry rendering the component by clearing the "},{"kind":"code","text":"`error`"},{"kind":"text","text":" state."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript","target":{}}}]}}}]}}},{"name":"Href","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"The main routing type for Expo Router. Includes all available routes with strongly typed parameters.\n\nA Href can either be a string or an object.\n\nHref accepts an optional T parameter to correctly type dynamic routes string.\n\nFor example: Without the generic the route "},{"kind":"code","text":"`/folder/[slug]`"},{"kind":"text","text":" will be typed as "},{"kind":"code","text":"`/folder/${string}`"},{"kind":"text","text":",\nwhich is incorrect as "},{"kind":"code","text":"`/folder/apple/orange`"},{"kind":"text","text":" would be valid. But by passing desired route as a generic "},{"kind":"code","text":"`Href<'/folder/apple'>`"},{"kind":"text","text":",\nit will validate against this edge case."}]},"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]},"default":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"__branded__","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"GeneratedHref","package":"expo-router","target":{}}},{"name":"NativeIntent","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"legacy_subscribe","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"listener","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"url","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}]}}]}}},{"name":"redirectSystemPath","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"initial","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"path","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","package":"typescript","target":{}},{"type":"intrinsic","name":"string"}]}}]}}}]}}},{"name":"PickPartial","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"The list of input keys will become optional, everything else will remain the same."}]},"typeParameters":[{"name":"T","variant":"typeParam","kind":131072},{"name":"K","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{}}}],"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"K","package":"expo-router","refersToTypeParameter":true}],"name":"Omit","package":"typescript","target":{}},{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"K","package":"expo-router","refersToTypeParameter":true}],"name":"Pick","package":"typescript","target":{}}],"name":"Partial","package":"typescript","target":{}}]}},{"name":"ResultState","variant":"declaration","kind":2097152,"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"NavigationState","package":"@react-navigation/routers","target":{}}],"name":"PartialState","package":"@react-navigation/routers","target":{}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"state","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ResultState","package":"expo-router"}}]}}]}},{"name":"Router","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"back","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Go back in the history."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"canDismiss","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If there's history that supports invoking the "},{"kind":"code","text":"`dismiss`"},{"kind":"text","text":" and "},{"kind":"code","text":"`dismissAll`"},{"kind":"text","text":" function."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"canGoBack","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"If there's history that supports invoking the "},{"kind":"code","text":"`back`"},{"kind":"text","text":" function."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"dismiss","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to a screen with a stack lower than the current screen. Using the provided count if possible, otherwise 1."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"count","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"dismissAll","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to first screen within the lowest stack."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"navigate","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to the provided href."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","name":"NavigationOptions","package":"expo-router","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"push","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to the provided href using a push operation if possible."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","name":"NavigationOptions","package":"expo-router","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"replace","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigate to route without appending to the history."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","name":"NavigationOptions","package":"expo-router","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"setParams","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Update the current route query params."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"Routes","package":"expo-router","target":{}}}],"parameters":[{"name":"params","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParamInput","package":"expo-router","target":{}}],"name":"Partial","package":"typescript","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}}]}}},{"name":"ScreenProps","variant":"declaration","kind":2097152,"typeParameters":[{"name":"TOptions","variant":"typeParam","kind":131072,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}},"default":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}}},{"name":"TState","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"NavigationState","package":"@react-navigation/routers","target":{}},"default":{"type":"reference","name":"NavigationState","package":"@react-navigation/routers","target":{}}},{"name":"TEventMap","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"EventMapBase","package":"@react-navigation/core","target":{}},"default":{"type":"reference","name":"EventMapBase","package":"@react-navigation/core","target":{}}}],"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"getId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"{ params }","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"params","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}}}]}}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"}]}}]}}},{"name":"initialParams","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}}},{"name":"listeners","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenListeners","package":"@react-navigation/core","target":{}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"prop","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"navigation","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}},{"name":"route","variant":"declaration","kind":1024,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers","target":{}},{"type":"intrinsic","name":"string"}],"name":"RouteProp","package":"@react-navigation/core","target":{}}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenListeners","package":"@react-navigation/core","target":{}}}]}}]}},{"name":"name","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Name is required when used inside a Layout component."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"prop","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"navigation","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}},{"name":"route","variant":"declaration","kind":1024,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers","target":{}},{"type":"intrinsic","name":"string"}],"name":"RouteProp","package":"@react-navigation/core","target":{}}}]}}}],"type":{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true}}]}}]}},{"name":"redirect","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Redirect to the nearest sibling route.\nIf all children are "},{"kind":"code","text":"`redirect={true}`"},{"kind":"text","text":", the layout will render "},{"kind":"code","text":"`null`"},{"kind":"text","text":" as there are no children to render."}]},"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"StrictRouteParamsInputs","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Returns a Record of the routes parameters as strings and CatchAll parameters\n\nThere are two versions, input and output, as you can input 'string | number' but\n the output will always be 'string'"}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```\n/[id]/[...rest] -> { id: string, rest: string[] }\n/no-params      -> {}\n```"}]}]},"typeParameters":[{"name":"Path","variant":"typeParam","kind":131072}],"type":{"type":"mapped","parameter":"Key","parameterType":{"type":"reference","typeArguments":[{"type":"reference","name":"Path","package":"expo-router","refersToTypeParameter":true}],"name":"ParameterNames","package":"expo-router","target":{}},"templateType":{"type":"conditional","checkType":{"type":"reference","name":"Key","package":"expo-router","refersToTypeParameter":true,"target":{}},"extendsType":{"type":"templateLiteral","head":"...","tail":[[{"type":"intrinsic","name":"string"},""]]},"trueType":{"type":"array","elementType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},"falseType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"number"}]}},"nameType":{"type":"conditional","checkType":{"type":"reference","name":"Key","package":"expo-router","refersToTypeParameter":true,"target":{}},"extendsType":{"type":"templateLiteral","head":"...","tail":[[{"type":"inferred","name":"Name"},""]]},"trueType":{"type":"reference","name":"Name","package":"expo-router","refersToTypeParameter":true,"target":{}},"falseType":{"type":"reference","name":"Key","package":"expo-router","refersToTypeParameter":true,"target":{}}}}},{"name":"StrictRouteParamsOutput","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Returns a Record of the routes parameters as strings and CatchAll parameters\n\nThere are two versions, input and output, as you can input 'string | number' but\n the output will always be 'string'"}],"blockTags":[{"tag":"@see","content":[{"kind":"inline-tag","tag":"@link","text":"StrictRouteParamsInputs","tsLinkText":""},{"kind":"text","text":" for the input version"}]},{"tag":"@example","content":[{"kind":"code","text":"```\n/[id]/[...rest] -> { id: string, rest: string[] }\n/no-params      -> {}\n```"}]}]},"typeParameters":[{"name":"Path","variant":"typeParam","kind":131072}],"type":{"type":"mapped","parameter":"Key","parameterType":{"type":"reference","typeArguments":[{"type":"reference","name":"Path","package":"expo-router","refersToTypeParameter":true}],"name":"ParameterNames","package":"expo-router","target":{}},"templateType":{"type":"conditional","checkType":{"type":"reference","name":"Key","package":"expo-router","refersToTypeParameter":true,"target":{}},"extendsType":{"type":"templateLiteral","head":"...","tail":[[{"type":"intrinsic","name":"string"},""]]},"trueType":{"type":"array","elementType":{"type":"intrinsic","name":"string"}},"falseType":{"type":"intrinsic","name":"string"}},"nameType":{"type":"conditional","checkType":{"type":"reference","name":"Key","package":"expo-router","refersToTypeParameter":true,"target":{}},"extendsType":{"type":"templateLiteral","head":"...","tail":[[{"type":"inferred","name":"Name"},""]]},"trueType":{"type":"reference","name":"Name","package":"expo-router","refersToTypeParameter":true,"target":{}},"falseType":{"type":"reference","name":"Key","package":"expo-router","refersToTypeParameter":true,"target":{}}}}},{"name":"WebAnchorProps","variant":"declaration","kind":2097152,"comment":{"summary":[],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"download","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies that the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" should be downloaded when the user clicks on the link,\ninstead of navigating to it. It is typically used for links that point to files that the user should download,\nsuch as PDFs, images, documents, etc.\n\nThe value of the "},{"kind":"code","text":"`download`"},{"kind":"text","text":" property, which represents the filename for the downloaded file.\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"/image.jpg\" download=\"my-image.jpg\">Download image</Link>\n```"}]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"rel","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies the relationship between the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" and the current route.\n\nCommon values:\n- **nofollow**: Indicates to search engines that they should not follow the "},{"kind":"code","text":"`href`"},{"kind":"text","text":". This is often used for user-generated content or links that should not influence search engine rankings.\n- **noopener**: Suggests that the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" should not have access to the opening window's "},{"kind":"code","text":"`window.opener`"},{"kind":"text","text":" object, which is a security measure to prevent potentially harmful behavior in cases of links that open new tabs or windows.\n- **noreferrer**: Requests that the browser not send the "},{"kind":"code","text":"`Referer`"},{"kind":"text","text":" HTTP header when navigating to the "},{"kind":"code","text":"`href`"},{"kind":"text","text":". This can enhance user privacy.\n\nThe "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" property is primarily used for informational and instructive purposes, helping browsers and web\ncrawlers make better decisions about how to handle and interpret the links on a web page. It is important\nto use appropriate "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" values to ensure that links behave as intended and adhere to best practices for web\ndevelopment and SEO (Search Engine Optimization).\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"https://expo.dev\" rel=\"nofollow\">Go to Expo</Link>`\n```"}]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"target","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies where to open the "},{"kind":"code","text":"`href`"},{"kind":"text","text":".\n\n- **_self**: the current tab.\n- **_blank**: opens in a new tab or window.\n- **_parent**: opens in the parent browsing context. If no parent, defaults to **_self**.\n- **_top**: opens in the highest browsing context ancestor. If no ancestors, defaults to **_self**.\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'_self'"}]},{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"https://expo.dev\" target=\"_blank\">Go to Expo in new tab</Link>\n```"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"_self"},{"type":"literal","value":"_blank"},{"type":"literal","value":"_parent"},{"type":"literal","value":"_top"},{"type":"intersection","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}]}}]}},"extendedBy":[{"type":"reference","name":"LinkProps"}]},{"name":"ErrorBoundary","variant":"declaration","kind":64,"signatures":[{"name":"ErrorBoundary","variant":"signature","kind":4096,"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"ErrorBoundaryProps","package":"expo-router"}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element","target":{}}}]},{"name":"Link","variant":"declaration","kind":64,"comment":{"summary":[{"kind":"text","text":"Component to render link to another route using a path.\nUses an anchor tag on the web."}]},"children":[{"name":"resolveHref","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Helper method to resolve a Href object into a string."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","name":"Href","package":"expo-router"}}],"type":{"type":"intrinsic","name":"string"}}]}}}],"signatures":[{"name":"Link","variant":"signature","kind":4096,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}}],"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"LinkProps","package":"expo-router"}],"name":"PropsWithChildren","package":"@types/react","qualifiedName":"React.PropsWithChildren","target":{}}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element","target":{}}}]},{"name":"Redirect","variant":"declaration","kind":64,"signatures":[{"name":"Redirect","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Redirects to the href as soon as the component is mounted."}]},"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"href","variant":"declaration","kind":1024,"type":{"type":"reference","name":"Href","package":"expo-router"}}]}}}],"type":{"type":"literal","value":null}}]},{"name":"Slot","variant":"declaration","kind":64,"signatures":[{"name":"Slot","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Renders the currently selected content.\n\nThere are actually two different implementations of Slot:\n - Used inside a _layout as the Navigator\n - Used inside a Navigator as the content\n\nAs a custom <Navigator /> will set the NavigatorContext.contextKey to be the current _layout,\nwe can use this to determine if we are inside a custom navigator or not."}]},"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"NavigatorProps","package":"expo-router","target":{}},{"type":"literal","value":"children"}],"name":"Omit","package":"typescript","target":{}}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element","target":{}}}]},{"name":"useFocusEffect","variant":"declaration","kind":64,"signatures":[{"name":"useFocusEffect","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook to run an effect whenever a route is \"focused\" Similar to "},{"kind":"code","text":"`React.useEffect`"},{"kind":"text","text":".\nThis can be used to perform side-effects such as fetching data or subscribing to events.\nThe passed callback should be wrapped in "},{"kind":"code","text":"`React.useCallback`"},{"kind":"text","text":" to avoid running the effect too often."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useFocusEffect } from 'expo-router';\nimport { useCallback } from 'react';\n\nexport default function Route() {\n  useFocusEffect(\n    // Callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n    useCallback(() => {\n      // Invoked whenever the route is focused.\n      console.log('Hello')\n      }, []);\n    );\n  return </>;\n}\n```"}]}]},"parameters":[{"name":"effect","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Memoized callback containing the effect, should optionally return a cleanup function."}]},"type":{"type":"reference","name":"EffectCallback","package":"expo-router"}},{"name":"do_not_pass_a_second_prop","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"undefined"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"useGlobalSearchParams","variant":"declaration","kind":64,"signatures":[{"name":"useGlobalSearchParams","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get the globally selected query parameters, including dynamic path segments. This function will update even when the route is not focused.\nUseful for analytics or other background operations that don't draw to the screen.\n\nWhen querying search params in a stack, opt-towards using ["},{"kind":"code","text":"`useLocalSearchParams`"},{"kind":"text","text":"](#uselocalsearchparams) as these will only update when the route is focused.\n\nRoute URL example: "},{"kind":"code","text":"`acme://profile/baconbrix?extra=info`"},{"kind":"text","text":".\n\n> **Note:** See [local versus global search parameters](/router/reference/search-parameters/#local-versus-global-search-parameters) for usage\n> information."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useGlobalSearchParams } from 'expo-router';\n\nexport default function Route() {\n  // user=baconbrix & extra=info\n  const { user, extra } = useGlobalSearchParams();\n  return <Text>User: {user}</Text>;\n}\n```"}]}]},"typeParameters":[{"name":"TRoute","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}},{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"SearchParams","package":"expo-router","target":{}},"default":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TRoute","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TParams","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router","target":{}}}]},{"name":"useLocalSearchParams","variant":"declaration","kind":64,"signatures":[{"name":"useLocalSearchParams","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the URL parameters for the contextually focused route. e.g. "},{"kind":"code","text":"`/acme?foo=bar`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`{ foo: \"bar\" }`"},{"kind":"text","text":".\nThis is useful for stacks where you may push a new screen that changes the query parameters.\nFor dynamic routes, both the route parameters and the search parameters are returned.\n\nTo observe updates even when the invoking route is not focused, use "},{"kind":"code","text":"`useGlobalSearchParams()`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"["},{"kind":"code","text":"`useGlobalSearchParams`"},{"kind":"text","text":"](#useglobalsearchparams)"}]}]},"typeParameters":[{"name":"TRoute","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}},{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"SearchParams","package":"expo-router","target":{}},"default":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TRoute","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TParams","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router","target":{}}}]},{"name":"useNavigation","variant":"declaration","kind":64,"signatures":[{"name":"useNavigation","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Access the underlying React Navigation ["},{"kind":"code","text":"`navigation`"},{"kind":"text","text":" prop](https://reactnavigation.org/docs/navigation-prop) to imperatively access layout-specific functionality like "},{"kind":"code","text":"`navigation.openDrawer()`"},{"kind":"text","text":" in a Drawer layout."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useNavigation } from 'expo-router';\n\nexport default function Route() {\n  // Access the current navigation object for the current route.\n  const navigation = useNavigation();\n\n  return (\n    <View>\n      <Text onPress={() => {\n        // Open the drawer view.\n        navigation.openDrawer();\n      }}>\n        Open Drawer\n      </Text>\n    </View>\n  );\n}\n```"},{"kind":"text","text":"\n\nWhen using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route. For example, "},{"kind":"code","text":"`/menu/_layout.tsx`"},{"kind":"text","text":" is nested inside "},{"kind":"code","text":"`/app/orders/`"},{"kind":"text","text":", you can use "},{"kind":"code","text":"`useNavigation('/orders/menu/')`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx app/orders/menu/index.tsx\nimport { useNavigation } from 'expo-router';\n\nexport default function MenuRoute() {\n  const rootLayout = useNavigation('/');\n  const ordersLayout = useNavigation('/orders');\n\n  // Same as the default results of `useNavigation()` when invoked in this route.\n  const parentLayout = useNavigation('/orders/menu');\n}\n```"},{"kind":"text","text":"\n\nIf you attempt to access a layout that doesn't exist, an error such as "},{"kind":"code","text":"`Could not find parent navigation with route \"/non-existent\"`"},{"kind":"text","text":" is thrown.\n\nSee React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-prop/#navigator-dependent-functions) for more information."}]},{"tag":"@returns","content":[{"kind":"text","text":"The navigation object for the current route."}]}]},"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"default":{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList","target":{}}],"name":"NavigationProp","package":"@react-navigation/core","target":{}}}],"parameters":[{"name":"parent","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Provide an absolute path such as "},{"kind":"code","text":"`/(root)`"},{"kind":"text","text":" to the parent route or a relative path like "},{"kind":"code","text":"`../../`"},{"kind":"text","text":" to the parent route."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}}]},{"name":"useNavigationContainerRef","variant":"declaration","kind":64,"signatures":[{"name":"useNavigationContainerRef","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The root "},{"kind":"code","text":"`<NavigationContainer />`"},{"kind":"text","text":" ref for the app. The "},{"kind":"code","text":"`ref.current`"},{"kind":"text","text":" may be "},{"kind":"code","text":"`null`"},{"kind":"text","text":" if the "},{"kind":"code","text":"`<NavigationContainer />`"},{"kind":"text","text":" hasn't mounted yet."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList","target":{}}],"name":"NavigationContainerRefWithCurrent","package":"@react-navigation/core","target":{}}}]},{"name":"usePathname","variant":"declaration","kind":64,"signatures":[{"name":"usePathname","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Global selected route location without search parameters. For example, "},{"kind":"code","text":"`/acme?foo=bar`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`/acme`"},{"kind":"text","text":". Segments will be normalized: "},{"kind":"code","text":"`/[id]?id=normal`"},{"kind":"text","text":" -> "},{"kind":"code","text":"`/normal`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  // segments = [\"profile\", \"[user]\"]</b>\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n}\n```"}]}]},"type":{"type":"intrinsic","name":"string"}}]},{"name":"useRootNavigation","variant":"declaration","kind":64,"signatures":[{"name":"useRootNavigation","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`useNavigationContainerRef`"},{"kind":"text","text":"](#usenavigationcontainerref) instead, which returns a React "},{"kind":"code","text":"`ref`"},{"kind":"text","text":"."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList","target":{}}],"name":"NavigationContainerRef","package":"@react-navigation/core","target":{}}]}}]},{"name":"useRootNavigationState","variant":"declaration","kind":64,"signatures":[{"name":"useRootNavigationState","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"any"}}]},{"name":"useRouter","variant":"declaration","kind":64,"signatures":[{"name":"useRouter","variant":"signature","kind":4096,"type":{"type":"reference","name":"Router","package":"expo-router"}}]},{"name":"useSegments","variant":"declaration","kind":64,"signatures":[{"name":"useSegments","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Get a list of selected file segments for the currently selected route. Segments are not normalized, so they will be the same as the file path. For example: "},{"kind":"code","text":"`/[id]?id=normal -> [\"[id]\"]`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  // segments = [\"profile\", \"[user]\"]\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n}\n```"},{"kind":"text","text":"\n\n\n"},{"kind":"code","text":"`useSegments`"},{"kind":"text","text":" can be typed using an abstract. Consider the following file structure, and strictly typed "},{"kind":"code","text":"`useSegments`"},{"kind":"text","text":" function:\n\n"},{"kind":"code","text":"```md\n- app\n  - [user]\n    - index.js\n    - followers.js\n  - settings.js\n```"},{"kind":"text","text":"\n\n\nThis can be strictly typed using the following abstract:\n\n"},{"kind":"code","text":"```ts\nconst [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n```"}]}]},"typeParameters":[{"name":"TSegments","variant":"typeParam","kind":131072,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"array","elementType":{"type":"intrinsic","name":"string"}}]},"default":{"type":"intrinsic","name":"string"}}],"type":{"type":"conditional","checkType":{"type":"reference","name":"TSegments","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"intrinsic","name":"string"},"trueType":{"type":"reference","typeArguments":[{"type":"reference","name":"TSegments","package":"expo-router","refersToTypeParameter":true}],"name":"RouteSegments","package":"expo-router","target":{}},"falseType":{"type":"reference","name":"TSegments","package":"expo-router","refersToTypeParameter":true}}}]},{"name":"withLayoutContext","variant":"declaration","kind":64,"signatures":[{"name":"withLayoutContext","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Return a navigator that automatically injects matched routes and renders nothing when there are no children. Return type with children prop optional"}]},"typeParameters":[{"name":"TOptions","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"object"}},{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ComponentType","package":"@types/react","qualifiedName":"React.ComponentType","target":{}}},{"name":"TState","variant":"typeParam","kind":131072,"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript","target":{}}},{"name":"TEventMap","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"EventMapBase","package":"@react-navigation/core","target":{}}}],"parameters":[{"name":"Nav","variant":"param","kind":32768,"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}},{"name":"processor","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"options","variant":"param","kind":32768,"type":{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}}],"type":{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}}]}}}],"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"ComponentProps","package":"@types/react","qualifiedName":"React.ComponentProps","target":{}},{"type":"literal","value":"children"}],"name":"PickPartial","package":"expo-router"}],"name":"PropsWithoutRef","package":"@types/react","qualifiedName":"React.PropsWithoutRef","target":{}},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"RefAttributes","package":"@types/react","qualifiedName":"React.RefAttributes","target":{}}]}],"name":"ForwardRefExoticComponent","package":"@types/react","qualifiedName":"React.ForwardRefExoticComponent","target":{}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"Screen","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]}}}]}}]}}]}],"packageName":"expo-router"}