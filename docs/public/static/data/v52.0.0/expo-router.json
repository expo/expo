{"name":"expo-router","variant":"project","kind":1,"children":[{"name":"LinkProps","variant":"declaration","kind":256,"comment":{"summary":[],"blockTags":[{"tag":"@docsMissing","content":[]}]},"children":[{"name":"asChild","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Used to customize the "},{"kind":"code","text":"`Link`"},{"kind":"text","text":" component. It will forward all props to the\nfirst child of the "},{"kind":"code","text":"`Link`"},{"kind":"text","text":". Note that the child component must accept\n"},{"kind":"code","text":"`onPress`"},{"kind":"text","text":" or "},{"kind":"code","text":"`onClick`"},{"kind":"text","text":" props. The "},{"kind":"code","text":"`href`"},{"kind":"text","text":" and "},{"kind":"code","text":"`role`"},{"kind":"text","text":" are also\npassed to the child."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { Link } from 'expo-router';\nimport { Pressable, Text } from 'react-native';\n\nexport default function Route() {\n return (\n  <View>\n   <Link href=\"/home\" asChild>\n     <Pressable>\n      <Text>Home</Text>\n     </Pressable>\n   </Link>\n  </View>\n );\n}\n```"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"className","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"On native, this can be used with CSS interop tools like Nativewind.\nOn web, this sets the HTML "},{"kind":"code","text":"`class`"},{"kind":"text","text":" directly."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"dismissTo","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"While in a stack, this will dismiss screens until the provided href is reached. If the href is not found,\nit will instead replace the current screen with the provided href."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { Link } from 'expo-router';\nimport { View } from 'react-native';\n\nexport default function Route() {\n return (\n  <View>\n    <Link dismissTo href=\"/feed\">Close modal</Link>\n  </View>\n );\n}\n```"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"download","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Specifies that the ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href) should be downloaded when the user clicks on the\nlink, instead of navigating to it. It is typically used for links that point to\nfiles that the user should download, such as PDFs, images, documents, and more.\n\nThe value of the "},{"kind":"code","text":"`download`"},{"kind":"text","text":" property, which represents the filename for the\ndownloaded file. This property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"/image.jpg\" download=\"my-image.jpg\">Download image</Link>\n```"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WebAnchorProps.download"}},{"name":"href","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The path of the route to navigate to. It can either be:\n- **string**: A full path like "},{"kind":"code","text":"`/profile/settings`"},{"kind":"text","text":" or a relative path like "},{"kind":"code","text":"`../settings`"},{"kind":"text","text":".\n- **object**: An object with a "},{"kind":"code","text":"`pathname`"},{"kind":"text","text":" and optional "},{"kind":"code","text":"`params`"},{"kind":"text","text":". The "},{"kind":"code","text":"`pathname`"},{"kind":"text","text":" can be\na full path like "},{"kind":"code","text":"`/profile/settings`"},{"kind":"text","text":" or a relative path like "},{"kind":"code","text":"`../settings`"},{"kind":"text","text":". The\nparams can be an object of key-value pairs."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx Dynamic\nimport { Link } from 'expo-router';\nimport { View } from 'react-native';\n\nexport default function Route() {\n return (\n  <View>\n   <Link href=\"/about\">About</Link>\n   <Link\n    href={{\n      pathname: '/user/[id]',\n      params: { id: 'bacon' }\n    }}>\n      View user\n   </Link>\n  </View>\n );\n}\n```"}]}]},"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"params","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"UnknownInputParams","package":"expo-router","target":{}}},{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}]}},{"name":"onPress","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"This function is called on press.\nText intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting)."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"e","variant":"param","kind":32768,"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"HTMLAnchorElement","package":"typescript","target":{}},{"type":"reference","name":"MouseEvent","package":"typescript","target":{}}],"name":"MouseEvent","package":"@types/react","qualifiedName":"React.MouseEvent","target":{}},{"type":"reference","name":"GestureResponderEvent","package":"react-native","target":{}}]}}],"type":{"type":"intrinsic","name":"void"}}]}},"overwrites":{"type":"reference","name":"Omit.onPress"}},{"name":"push","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Always pushes a new route, and never pops or replaces to existing route.\nYou can push the current route multiple times or with new parameters."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { Link } from 'expo-router';\nimport { View } from 'react-native';\n\nexport default function Route() {\n return (\n  <View>\n    <Link push href=\"/feed\">Login</Link>\n  </View>\n );\n}\n```"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"rel","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Specifies the relationship between the ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href) and the current route.\n\nCommon values:\n- **nofollow**: Indicates to search engines that they should not follow the "},{"kind":"code","text":"`href`"},{"kind":"text","text":".\nThis is often used for user-generated content or links that should not influence\nsearch engine rankings.\n- **noopener**: Suggests that the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" should not have access to the opening\nwindow's "},{"kind":"code","text":"`window.opener`"},{"kind":"text","text":" object, which is a security measure to prevent potentially\nharmful behavior in cases of links that open new tabs or windows.\n- **noreferrer**: Requests that the browser does not send the "},{"kind":"code","text":"`Referer`"},{"kind":"text","text":" HTTP header\nwhen navigating to the "},{"kind":"code","text":"`href`"},{"kind":"text","text":". This can enhance user privacy.\n\nThe "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" property is primarily used for informational and instructive purposes, helping browsers and web\ncrawlers make better decisions about how to handle and interpret the links on a web\npage. It is important to use appropriate "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" values to ensure that links behave as intended and adhere\nto best practices for web development and SEO (Search Engine Optimization).\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"https://expo.dev\" rel=\"nofollow\">Go to Expo</Link>`\n```"}]}]},"type":{"type":"intrinsic","name":"string"},"inheritedFrom":{"type":"reference","name":"WebAnchorProps.rel"}},{"name":"relativeToDirectory","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Relative URL references are either relative to the directory or the document.\nBy default, relative paths are relative to the document."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"[Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references)."}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"replace","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Removes the current route from the history and replace it with the\nspecified URL. This is useful for [redirects](/router/reference/redirects/)."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { Link } from 'expo-router';\nimport { View } from 'react-native';\n\nexport default function Route() {\n return (\n  <View>\n    <Link replace href=\"/feed\">Login</Link>\n  </View>\n );\n}\n```"}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"target","variant":"declaration","kind":1024,"flags":{"isOptional":true,"isInherited":true},"comment":{"summary":[{"kind":"text","text":"Specifies where to open the ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href).\n\n- **_self**: the current tab.\n- **_blank**: opens in a new tab or window.\n- **_parent**: opens in the parent browsing context. If no parent, defaults to **_self**.\n- **_top**: opens in the highest browsing context ancestor. If no ancestors,\ndefaults to **_self**.\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'_self'"}]},{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"https://expo.dev\" target=\"_blank\">Go to Expo in new tab</Link>\n```"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"_self"},{"type":"literal","value":"_blank"},{"type":"literal","value":"_parent"},{"type":"literal","value":"_top"}]},"inheritedFrom":{"type":"reference","name":"WebAnchorProps.target"}},{"name":"withAnchor","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Replaces the initial screen with the current route."}]},"type":{"type":"intrinsic","name":"boolean"}}],"extendedTypes":[{"type":"reference","typeArguments":[{"type":"reference","name":"TextProps","package":"react-native","target":{}},{"type":"literal","value":"href"}],"name":"Omit","package":"typescript","target":{}},{"type":"reference","name":"WebAnchorProps","package":"expo-router"}]},{"name":"EffectCallback","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Memoized callback containing the effect, should optionally return a cleanup function."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}]}}]}}},{"name":"ErrorBoundaryProps","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Props passed to a page's "},{"kind":"code","text":"`ErrorBoundary`"},{"kind":"text","text":" export."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"error","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The error that was thrown."}]},"type":{"type":"reference","name":"Error","package":"typescript","target":{}}},{"name":"retry","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"A function that will re-render the route component by clearing the "},{"kind":"code","text":"`error`"},{"kind":"text","text":" state."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"void"}],"name":"Promise","package":"typescript","target":{}}}]}}}]}}},{"name":"ExternalPathString","variant":"declaration","kind":2097152,"type":{"type":"union","types":[{"type":"templateLiteral","head":"","tail":[[{"type":"intrinsic","name":"string"},":"],[{"type":"intrinsic","name":"string"},""]]},{"type":"templateLiteral","head":"//","tail":[[{"type":"intrinsic","name":"string"},""]]}]}},{"name":"Href","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"The main routing type for Expo Router. It includes all available routes with strongly\ntyped parameters. It can either be:\n- **string**: A full path like "},{"kind":"code","text":"`/profile/settings`"},{"kind":"text","text":" or a relative path like "},{"kind":"code","text":"`../settings`"},{"kind":"text","text":".\n- **object**: An object with a "},{"kind":"code","text":"`pathname`"},{"kind":"text","text":" and optional "},{"kind":"code","text":"`params`"},{"kind":"text","text":". The "},{"kind":"code","text":"`pathname`"},{"kind":"text","text":" can be\na full path like "},{"kind":"code","text":"`/profile/settings`"},{"kind":"text","text":" or a relative path like "},{"kind":"code","text":"`../settings`"},{"kind":"text","text":".\nThe params can be an object of key-value pairs.\n\nA Href can either be a string or an object."}]},"type":{"type":"conditional","checkType":{"type":"reference","name":"ExpoRouter.__routes","package":"expo-router","target":{}},"extendsType":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"href","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}}]}},"trueType":{"type":"indexedAccess","indexType":{"type":"literal","value":"href"},"objectType":{"type":"reference","name":"ExpoRouter.__routes","package":"expo-router","target":{}}},"falseType":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"params","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"UnknownInputParams","package":"expo-router","target":{}}},{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}]}}},{"name":"HrefInputParams","variant":"declaration","kind":2097152,"type":{"type":"conditional","checkType":{"type":"reference","name":"ExpoRouter.__routes","package":"expo-router","target":{}},"extendsType":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"hrefInputParams","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}}]}},"trueType":{"type":"indexedAccess","indexType":{"type":"literal","value":"hrefInputParams"},"objectType":{"type":"reference","name":"ExpoRouter.__routes","package":"expo-router","target":{}}},"falseType":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"params","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"UnknownInputParams","package":"expo-router","target":{}}},{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}}},{"name":"HrefOutputParams","variant":"declaration","kind":2097152,"type":{"type":"conditional","checkType":{"type":"reference","name":"ExpoRouter.__routes","package":"expo-router","target":{}},"extendsType":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"hrefOutputParams","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}}]}},"trueType":{"type":"indexedAccess","indexType":{"type":"literal","value":"hrefOutputParams"},"objectType":{"type":"reference","name":"ExpoRouter.__routes","package":"expo-router","target":{}}},"falseType":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"params","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}}},{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}}},{"name":"NativeIntent","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Created by using a special file called "},{"kind":"code","text":"`+native-intent.tsx`"},{"kind":"text","text":" at the top-level of your\nproject's **app** directory. It exports "},{"kind":"code","text":"`redirectSystemPath`"},{"kind":"text","text":" or "},{"kind":"code","text":"`legacy_subscribe`"},{"kind":"text","text":" functions,\nboth methods designed to handle URL/path processing.\n\nUseful for re-writing URLs to correctly target a route when unique/referred URLs\nare incoming from third-party providers or stale URLs from previous versions."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"For more information on how to use "},{"kind":"code","text":"`NativeIntent`"},{"kind":"text","text":", see [Customizing links](/router/advanced/native-intent/)."}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"legacy_subscribe","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"> **warning** Experimentally available in SDK 52.\n\nUseful as an alternative API when a third-party provider doesn't support Expo Router\nbut has support for React Navigation via "},{"kind":"code","text":"`Linking.subscribe()`"},{"kind":"text","text":" for existing projects.\n\nUsing this API is not recommended for newer projects or integrations since it is\nincompatible with Server Side Routing and\n[Static Rendering](/router/reference/static-rendering/), and can become challenging to manage while offline or in a low network environment."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"listener","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"url","variant":"param","kind":32768,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"intrinsic","name":"void"}}]}}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"undefined"},{"type":"intrinsic","name":"void"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}]}}]}}},{"name":"redirectSystemPath","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"A special method used to process URLs in native apps. When invoked, it receives an\n"},{"kind":"code","text":"`options`"},{"kind":"text","text":" object with the following properties:\n- **path**: represents the URL or path undergoing processing.\n- **initial**: a boolean indicating whether the path is the app's initial URL.\n\nIt's return value should either be a "},{"kind":"code","text":"`string`"},{"kind":"text","text":" or a "},{"kind":"code","text":"`Promise<string>`"},{"kind":"text","text":".\nNote that throwing errors within this method may result in app crashes. It's recommended to\nwrap your code inside a "},{"kind":"code","text":"`try/catch`"},{"kind":"text","text":" block and utilize "},{"kind":"code","text":"`.catch()`"},{"kind":"text","text":" when appropriate."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"For usage information, see [Redirecting system paths](/router/advanced/native-intent/#redirectsystempath)."}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"event","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"initial","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"boolean"}},{"name":"path","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}}],"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"}],"name":"Promise","package":"typescript","target":{}},{"type":"intrinsic","name":"string"}]}}]}}}]}}},{"name":"PickPartial","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"The list of input keys will become optional, everything else will remain the same."}]},"typeParameters":[{"name":"T","variant":"typeParam","kind":131072},{"name":"K","variant":"typeParam","kind":131072,"type":{"type":"typeOperator","operator":"keyof","target":{}}}],"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"K","package":"expo-router","refersToTypeParameter":true}],"name":"Omit","package":"typescript","target":{}},{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"K","package":"expo-router","refersToTypeParameter":true}],"name":"Pick","package":"typescript","target":{}}],"name":"Partial","package":"typescript","target":{}}]}},{"name":"RedirectProps","variant":"declaration","kind":2097152,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"href","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"The path of the route to navigate to. It can either be:\n- **string**: A full path like "},{"kind":"code","text":"`/profile/settings`"},{"kind":"text","text":" or a relative path like "},{"kind":"code","text":"`../settings`"},{"kind":"text","text":".\n- **object**: An object with a "},{"kind":"code","text":"`pathname`"},{"kind":"text","text":" and optional "},{"kind":"code","text":"`params`"},{"kind":"text","text":". The "},{"kind":"code","text":"`pathname`"},{"kind":"text","text":" can be\na full path like "},{"kind":"code","text":"`/profile/settings`"},{"kind":"text","text":" or a relative path like "},{"kind":"code","text":"`../settings`"},{"kind":"text","text":". The\nparams can be an object of key-value pairs."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx Dynamic\nimport { Redirect } from 'expo-router';\n\nexport default function RedirectToAbout() {\n return (\n   <Redirect href=\"/about\">About</Link>\n );\n}\n```"}]}]},"type":{"type":"reference","name":"Href","package":"expo-router"}},{"name":"relativeToDirectory","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Relative URL references are either relative to the directory or the document.\nBy default, relative paths are relative to the document."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"[Resolving relative references in Mozilla's documentation](https://developer.mozilla.org/en-US/docs/Web/API/URL_API/Resolving_relative_references)."}]}]},"type":{"type":"intrinsic","name":"boolean"}},{"name":"withAnchor","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Replaces the initial screen with the current route."}]},"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"RelativePathString","variant":"declaration","kind":2097152,"type":{"type":"union","types":[{"type":"templateLiteral","head":"./","tail":[[{"type":"intrinsic","name":"string"},""]]},{"type":"templateLiteral","head":"../","tail":[[{"type":"intrinsic","name":"string"},""]]},{"type":"literal","value":".."}]}},{"name":"ResultState","variant":"declaration","kind":2097152,"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"NavigationState","package":"@react-navigation/routers","target":{}}],"name":"PartialState","package":"@react-navigation/routers","target":{}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"state","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"ResultState","package":"expo-router"}}]}}]}},{"name":"Route","variant":"declaration","kind":2097152,"type":{"type":"reference","typeArguments":[{"type":"indexedAccess","indexType":{"type":"literal","value":"pathname"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","name":"Href","package":"expo-router"},{"type":"intrinsic","name":"object"}],"name":"Extract","package":"typescript","target":{}}},{"type":"union","types":[{"type":"reference","name":"RelativePathString","package":"expo-router"},{"type":"reference","name":"ExternalPathString","package":"expo-router"}]}],"name":"Exclude","package":"typescript","target":{}}},{"name":"RouteInputParams","variant":"declaration","kind":2097152,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"Route","package":"expo-router"}}],"type":{"type":"conditional","checkType":{"type":"reference","typeArguments":[{"type":"reference","name":"Href","package":"expo-router"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}}]}}],"name":"Extract","package":"typescript","target":{}},"extendsType":{"type":"intrinsic","name":"never"},"trueType":{"type":"conditional","checkType":{"type":"reference","name":"HrefInputParams","package":"expo-router"},"extendsType":{"type":"inferred","name":"H"},"trueType":{"type":"conditional","checkType":{"type":"reference","name":"H","package":"expo-router","refersToTypeParameter":true,"target":{}},"extendsType":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"pathname"},{"type":"literal","value":"params"}]},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}},"trueType":{"type":"conditional","checkType":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"indexedAccess","indexType":{"type":"literal","value":"pathname"},"objectType":{"type":"reference","name":"H","package":"expo-router","refersToTypeParameter":true,"target":{}}},"trueType":{"type":"indexedAccess","indexType":{"type":"literal","value":"params"},"objectType":{"type":"reference","name":"H","package":"expo-router","refersToTypeParameter":true,"target":{}}},"falseType":{"type":"intrinsic","name":"never"}},"falseType":{"type":"intrinsic","name":"never"}},"falseType":{"type":"intrinsic","name":"never"}},"falseType":{"type":"indexedAccess","indexType":{"type":"literal","value":"params"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","name":"HrefInputParams","package":"expo-router"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}}]}}],"name":"Extract","package":"typescript","target":{}}}}},{"name":"RouteOutputParams","variant":"declaration","kind":2097152,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"Route","package":"expo-router"}}],"type":{"type":"conditional","checkType":{"type":"reference","typeArguments":[{"type":"reference","name":"HrefOutputParams","package":"expo-router"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}}]}}],"name":"Extract","package":"typescript","target":{}},"extendsType":{"type":"intrinsic","name":"never"},"trueType":{"type":"conditional","checkType":{"type":"reference","name":"HrefOutputParams","package":"expo-router"},"extendsType":{"type":"inferred","name":"H"},"trueType":{"type":"conditional","checkType":{"type":"reference","name":"H","package":"expo-router","refersToTypeParameter":true,"target":{}},"extendsType":{"type":"reference","typeArguments":[{"type":"union","types":[{"type":"literal","value":"pathname"},{"type":"literal","value":"params"}]},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}},"trueType":{"type":"conditional","checkType":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true},"extendsType":{"type":"indexedAccess","indexType":{"type":"literal","value":"pathname"},"objectType":{"type":"reference","name":"H","package":"expo-router","refersToTypeParameter":true,"target":{}}},"trueType":{"type":"indexedAccess","indexType":{"type":"literal","value":"params"},"objectType":{"type":"reference","name":"H","package":"expo-router","refersToTypeParameter":true,"target":{}}},"falseType":{"type":"intrinsic","name":"never"}},"falseType":{"type":"intrinsic","name":"never"}},"falseType":{"type":"intrinsic","name":"never"}},"falseType":{"type":"indexedAccess","indexType":{"type":"literal","value":"params"},"objectType":{"type":"reference","typeArguments":[{"type":"reference","name":"HrefOutputParams","package":"expo-router"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}}]}}],"name":"Extract","package":"typescript","target":{}}}}},{"name":"RouteParams","variant":"declaration","kind":2097152,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"Route","package":"expo-router"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"RouteOutputParams","package":"expo-router"}},{"name":"Router","variant":"declaration","kind":2097152,"comment":{"summary":[{"kind":"text","text":"Returns "},{"kind":"code","text":"`router`"},{"kind":"text","text":" object for imperative navigation API."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { router } from 'expo-router';\nimport { Text } from 'react-native';\n\nexport default function Route() {\n\n return (\n  <Text onPress={() => router.push('/home')}>Go Home</Text>\n );\n}\n```"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"back","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Goes back in the navigation history."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"canDismiss","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Checks if it is possible to dismiss the current screen. Returns "},{"kind":"code","text":"`true`"},{"kind":"text","text":" if the\nrouter is within the stack with more than one screen in stack's history."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"canGoBack","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigates to a route in the navigator's history if it supports invoking the "},{"kind":"code","text":"`back`"},{"kind":"text","text":" function."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"dismiss","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigates to the a stack lower than the current screen using the provided count if possible, otherwise 1.\n\nIf the current screen is the only route, it will dismiss the entire stack."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"count","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"number"}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"dismissAll","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Returns to the first screen in the closest stack. This is similar to\n[popToTop](https://reactnavigation.org/docs/stack-actions/#poptotop) stack action."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"dismissTo","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Dismisses screens until the provided href is reached. If the href is not found, it will instead replace the current screen with the provided href."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","name":"NavigationOptions","package":"expo-router","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"navigate","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigates to the provided ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href)."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","name":"NavigationOptions","package":"expo-router","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"push","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigates to the provided ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href) using a push operation if possible."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","name":"NavigationOptions","package":"expo-router","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"replace","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Navigates to route without appending to the history. Can be used with\n["},{"kind":"code","text":"`useFocusEffect`"},{"kind":"text","text":"](#usefocuseffecteffect-do_not_pass_a_second_prop)\nto redirect imperatively to a new screen."}],"blockTags":[{"tag":"@see","content":[{"kind":"text","text":"[Using "},{"kind":"code","text":"`useRouter()`"},{"kind":"text","text":" hook](/router/reference/redirects/) to redirect."}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"reference","name":"Href","package":"expo-router"}},{"name":"options","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reference","name":"NavigationOptions","package":"expo-router","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}},{"name":"setParams","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Updates the current route's query params."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"Route","package":"expo-router"}}],"parameters":[{"name":"params","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"RouteInputParams","package":"expo-router"}],"name":"Partial","package":"typescript","target":{}}}],"type":{"type":"intrinsic","name":"void"}}]}}}]}}},{"name":"ScreenProps","variant":"declaration","kind":2097152,"typeParameters":[{"name":"TOptions","variant":"typeParam","kind":131072,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}},"default":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}}},{"name":"TState","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"NavigationState","package":"@react-navigation/routers","target":{}},"default":{"type":"reference","name":"NavigationState","package":"@react-navigation/routers","target":{}}},{"name":"TEventMap","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"EventMapBase","package":"@react-navigation/core","target":{}},"default":{"type":"reference","name":"EventMapBase","package":"@react-navigation/core","target":{}}}],"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"getId","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"{ params }","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"params","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}}}]}}}],"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"undefined"}]}}]}}},{"name":"initialParams","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"any"}],"name":"Record","package":"typescript","target":{}}},{"name":"listeners","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenListeners","package":"@react-navigation/core","target":{}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"prop","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"navigation","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}},{"name":"route","variant":"declaration","kind":1024,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers","target":{}},{"type":"intrinsic","name":"string"}],"name":"RouteProp","package":"@react-navigation/core","target":{}}}]}}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenListeners","package":"@react-navigation/core","target":{}}}]}}]}},{"name":"name","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Name is required when used inside a Layout component."}]},"type":{"type":"intrinsic","name":"string"}},{"name":"options","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"union","types":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"prop","variant":"param","kind":32768,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"navigation","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"any"}},{"name":"route","variant":"declaration","kind":1024,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"ParamListBase","package":"@react-navigation/routers","target":{}},{"type":"intrinsic","name":"string"}],"name":"RouteProp","package":"@react-navigation/core","target":{}}}]}}}],"type":{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true}}]}}]}},{"name":"redirect","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Redirect to the nearest sibling route.\nIf all children are "},{"kind":"code","text":"`redirect={true}`"},{"kind":"text","text":", the layout will render "},{"kind":"code","text":"`null`"},{"kind":"text","text":" as there are no children to render."}]},"type":{"type":"intrinsic","name":"boolean"}}]}}},{"name":"SearchOrHash","variant":"declaration","kind":2097152,"type":{"type":"union","types":[{"type":"templateLiteral","head":"?","tail":[[{"type":"intrinsic","name":"string"},""]]},{"type":"templateLiteral","head":"#","tail":[[{"type":"intrinsic","name":"string"},""]]}]}},{"name":"WebAnchorProps","variant":"declaration","kind":2097152,"comment":{"summary":[],"blockTags":[{"tag":"@platform","content":[{"kind":"text","text":"web"}]}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"download","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies that the ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href) should be downloaded when the user clicks on the\nlink, instead of navigating to it. It is typically used for links that point to\nfiles that the user should download, such as PDFs, images, documents, and more.\n\nThe value of the "},{"kind":"code","text":"`download`"},{"kind":"text","text":" property, which represents the filename for the\ndownloaded file. This property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"/image.jpg\" download=\"my-image.jpg\">Download image</Link>\n```"}]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"rel","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies the relationship between the ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href) and the current route.\n\nCommon values:\n- **nofollow**: Indicates to search engines that they should not follow the "},{"kind":"code","text":"`href`"},{"kind":"text","text":".\nThis is often used for user-generated content or links that should not influence\nsearch engine rankings.\n- **noopener**: Suggests that the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" should not have access to the opening\nwindow's "},{"kind":"code","text":"`window.opener`"},{"kind":"text","text":" object, which is a security measure to prevent potentially\nharmful behavior in cases of links that open new tabs or windows.\n- **noreferrer**: Requests that the browser does not send the "},{"kind":"code","text":"`Referer`"},{"kind":"text","text":" HTTP header\nwhen navigating to the "},{"kind":"code","text":"`href`"},{"kind":"text","text":". This can enhance user privacy.\n\nThe "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" property is primarily used for informational and instructive purposes, helping browsers and web\ncrawlers make better decisions about how to handle and interpret the links on a web\npage. It is important to use appropriate "},{"kind":"code","text":"`rel`"},{"kind":"text","text":" values to ensure that links behave as intended and adhere\nto best practices for web development and SEO (Search Engine Optimization).\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"https://expo.dev\" rel=\"nofollow\">Go to Expo</Link>`\n```"}]}]},"type":{"type":"intrinsic","name":"string"}},{"name":"target","variant":"declaration","kind":1024,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Specifies where to open the ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href).\n\n- **_self**: the current tab.\n- **_blank**: opens in a new tab or window.\n- **_parent**: opens in the parent browsing context. If no parent, defaults to **_self**.\n- **_top**: opens in the highest browsing context ancestor. If no ancestors,\ndefaults to **_self**.\n\nThis property is passed to the underlying anchor ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") tag."}],"blockTags":[{"tag":"@default","content":[{"kind":"text","text":"'_self'"}]},{"tag":"@example","content":[{"kind":"code","text":"```jsx\n<Link href=\"https://expo.dev\" target=\"_blank\">Go to Expo in new tab</Link>\n```"}]}]},"type":{"type":"union","types":[{"type":"literal","value":"_self"},{"type":"literal","value":"_blank"},{"type":"literal","value":"_parent"},{"type":"literal","value":"_top"},{"type":"intersection","types":[{"type":"intrinsic","name":"string"},{"type":"intrinsic","name":"object"}]}]}}]}},"extendedBy":[{"type":"reference","name":"LinkProps"}]},{"name":"ErrorBoundary","variant":"declaration","kind":64,"signatures":[{"name":"ErrorBoundary","variant":"signature","kind":4096,"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"ErrorBoundaryProps","package":"expo-router"}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element","target":{}}}]},{"name":"Link","variant":"declaration","kind":64,"comment":{"summary":[{"kind":"text","text":"Component that renders a link using ["},{"kind":"code","text":"`href`"},{"kind":"text","text":"](#href) to another route.\nBy default, it accepts children and wraps them in a "},{"kind":"code","text":"`<Text>`"},{"kind":"text","text":" component.\n\nUses an anchor tag ("},{"kind":"code","text":"`<a>`"},{"kind":"text","text":") on web and performs a client-side navigation to preserve\nthe state of the website and navigate faster. The web-only attributes such as "},{"kind":"code","text":"`target`"},{"kind":"text","text":",\n"},{"kind":"code","text":"`rel`"},{"kind":"text","text":", and "},{"kind":"code","text":"`download`"},{"kind":"text","text":" are supported and passed to the anchor tag on web. See\n["},{"kind":"code","text":"`WebAnchorProps`"},{"kind":"text","text":"](#webanchorprops) for more details.\n\n> **Note**: Client-side navigation works with both single-page apps,\nand [static-rendering](/router/reference/static-rendering/)."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { Link } from 'expo-router';\nimport { View } from 'react-native';\n\nexport default function Route() {\n return (\n  <View>\n   <Link href=\"/about\">About</Link>\n  </View>\n );\n}\n```"}]}]},"children":[{"name":"resolveHref","variant":"declaration","kind":1024,"comment":{"summary":[{"kind":"text","text":"Helper method to resolve a Href object into a string."}]},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"href","variant":"param","kind":32768,"type":{"type":"union","types":[{"type":"intrinsic","name":"string"},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"params","variant":"declaration","kind":1024,"flags":{"isOptional":true},"type":{"type":"reference","name":"UnknownInputParams","package":"expo-router","target":{}}},{"name":"pathname","variant":"declaration","kind":1024,"type":{"type":"intrinsic","name":"string"}}]}}]}}],"type":{"type":"intrinsic","name":"string"}}]}}}],"signatures":[{"name":"Link","variant":"signature","kind":4096,"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"LinkProps","package":"expo-router"}],"name":"PropsWithChildren","package":"@types/react","qualifiedName":"React.PropsWithChildren","target":{}}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"__global.JSX.Element","target":{}}}]},{"name":"Redirect","variant":"declaration","kind":64,"signatures":[{"name":"Redirect","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Redirects to the "},{"kind":"code","text":"`href`"},{"kind":"text","text":" as soon as the component is mounted."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { View, Text } from 'react-native';\nimport { Redirect } from 'expo-router';\n\nexport default function Page() {\n const { user } = useAuth();\n\n if (!user) {\n   return <Redirect href=\"/login\" />;\n }\n\n return (\n   <View>\n     <Text>Welcome Back!</Text>\n   </View>\n );\n}\n```"}]}]},"parameters":[{"name":"__namedParameters","variant":"param","kind":32768,"type":{"type":"reference","name":"RedirectProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]},{"name":"Slot","variant":"declaration","kind":64,"signatures":[{"name":"Slot","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Renders the currently selected content.\n\nThere are actually two different implementations of "},{"kind":"code","text":"`<Slot/>`"},{"kind":"text","text":":\n - Used inside a "},{"kind":"code","text":"`_layout`"},{"kind":"text","text":" as the "},{"kind":"code","text":"`Navigator`"},{"kind":"text","text":"\n - Used inside a "},{"kind":"code","text":"`Navigator`"},{"kind":"text","text":" as the content\n\nSince a custom "},{"kind":"code","text":"`Navigator`"},{"kind":"text","text":" will set the "},{"kind":"code","text":"`NavigatorContext.contextKey`"},{"kind":"text","text":" to\nthe current "},{"kind":"code","text":"`_layout`"},{"kind":"text","text":", you can use this to determine if you are inside\na custom navigator or not."}]},"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"NavigatorProps","package":"expo-router","target":{}},{"type":"literal","value":"children"}],"name":"Omit","package":"typescript","target":{}}}],"type":{"type":"reference","name":"Element","package":"@types/react","qualifiedName":"React.JSX.Element","target":{}}}]},{"name":"useFocusEffect","variant":"declaration","kind":64,"signatures":[{"name":"useFocusEffect","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Hook to run an effect whenever a route is **focused**. Similar to\n["},{"kind":"code","text":"`React.useEffect`"},{"kind":"text","text":"](https://react.dev/reference/react/useEffect).\n\nThis can be used to perform side-effects such as fetching data or subscribing to events.\nThe passed callback should be wrapped in ["},{"kind":"code","text":"`React.useCallback`"},{"kind":"text","text":"](https://react.dev/reference/react/useCallback)\nto avoid running the effect too often."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useFocusEffect } from 'expo-router';\nimport { useCallback } from 'react';\n\nexport default function Route() {\n  useFocusEffect(\n    // Callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n    useCallback(() => {\n      // Invoked whenever the route is focused.\n      console.log('Hello, I'm focused!');\n\n      // Return function is invoked whenever the route gets out of focus.\n      return () => {\n        console.log('This route is now unfocused.');\n      };\n    }, []);\n   );\n\n return </>;\n}\n```"}]}]},"parameters":[{"name":"effect","variant":"param","kind":32768,"comment":{"summary":[{"kind":"text","text":"Memoized callback containing the effect, should optionally return a cleanup function."}]},"type":{"type":"reference","name":"EffectCallback","package":"expo-router"}},{"name":"do_not_pass_a_second_prop","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"intrinsic","name":"undefined"}}],"type":{"type":"intrinsic","name":"void"}}]},{"name":"useGlobalSearchParams","variant":"declaration","kind":64,"signatures":[{"name":"useGlobalSearchParams","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns URL parameters for globally selected route, including dynamic path segments.\nThis function updates even when the route is not focused. Useful for analytics or\nother background operations that don't draw to the screen.\n\nRoute URL example: "},{"kind":"code","text":"`acme://profile/baconbrix?extra=info`"},{"kind":"text","text":".\n\nWhen querying search params in a stack, opt-towards using\n["},{"kind":"code","text":"`useLocalSearchParams`"},{"kind":"text","text":"](#uselocalsearchparams) because it will only update when the route is focused.\n\n> **Note:** For usage information, see\n[Local versus global search parameters](/router/reference/url-parameters/#local-versus-global-url-parameters)."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useGlobalSearchParams } from 'expo-router';\n\nexport default function Route() {\n  // user=baconbrix & extra=info\n  const { user, extra } = useGlobalSearchParams();\n\n  return <Text>User: {user}</Text>;\n}\n```"}]}]},"typeParameters":[{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}},"default":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}}}],"type":{"type":"reference","name":"TParams","package":"expo-router","refersToTypeParameter":true}},{"name":"useGlobalSearchParams","variant":"signature","kind":4096,"typeParameters":[{"name":"TRoute","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TRoute","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"}},{"name":"useGlobalSearchParams","variant":"signature","kind":4096,"typeParameters":[{"name":"TRoute","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}},{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}},"default":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}}}],"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"TRoute","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"},{"type":"reference","name":"TParams","package":"expo-router","refersToTypeParameter":true}]}}]},{"name":"useLocalSearchParams","variant":"declaration","kind":64,"signatures":[{"name":"useLocalSearchParams","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the URL parameters for the contextually focused route. Useful for stacks where you may push a new screen\nthat changes the query parameters.  For dynamic routes, both the route parameters and the search parameters are returned.\n\nRoute URL example: "},{"kind":"code","text":"`acme://profile/baconbrix?extra=info`"},{"kind":"text","text":".\n\nTo observe updates even when the invoking route is not focused, use ["},{"kind":"code","text":"`useGlobalSearchParams`"},{"kind":"text","text":"](#useglobalsearchparams).\n\n> **Note:** For usage information, see\n[Local versus global search parameters](/router/reference/url-parameters/#local-versus-global-url-parameters)."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useLocalSearchParams } from 'expo-router';\n\nexport default function Route() {\n // user=baconbrix & extra=info\n const { user, extra } = useLocalSearchParams();\n\n return <Text>User: {user}</Text>;\n}"}]}]},"typeParameters":[{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}},"default":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}}}],"type":{"type":"reference","name":"TParams","package":"expo-router","refersToTypeParameter":true}},{"name":"useLocalSearchParams","variant":"signature","kind":4096,"typeParameters":[{"name":"TRoute","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TRoute","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"}},{"name":"useLocalSearchParams","variant":"signature","kind":4096,"typeParameters":[{"name":"TRoute","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"}},{"name":"TParams","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}},"default":{"type":"reference","name":"UnknownOutputParams","package":"expo-router","target":{}}}],"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","name":"TRoute","package":"expo-router","refersToTypeParameter":true}],"name":"RouteParams","package":"expo-router"},{"type":"reference","name":"TParams","package":"expo-router","refersToTypeParameter":true}]}}]},{"name":"useNavigation","variant":"declaration","kind":64,"signatures":[{"name":"useNavigation","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the underlying React Navigation ["},{"kind":"code","text":"`navigation`"},{"kind":"text","text":" prop](https://reactnavigation.org/docs/navigation-prop)\nto imperatively access layout-specific functionality like "},{"kind":"code","text":"`navigation.openDrawer()`"},{"kind":"text","text":" in a\n[Drawer](/router/advanced/drawer/) layout."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/index.tsx\nimport { useNavigation } from 'expo-router';\n\nexport default function Route() {\n  // Access the current navigation object for the current route.\n  const navigation = useNavigation();\n\n  return (\n    <View>\n      <Text onPress={() => {\n        // Open the drawer view.\n        navigation.openDrawer();\n      }}>\n        Open Drawer\n      </Text>\n    </View>\n  );\n}\n```"},{"kind":"text","text":"\n\nWhen using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route.\nFor example, "},{"kind":"code","text":"`/menu/_layout.tsx`"},{"kind":"text","text":" is nested inside "},{"kind":"code","text":"`/app/orders/`"},{"kind":"text","text":", you can use "},{"kind":"code","text":"`useNavigation('/orders/menu/')`"},{"kind":"text","text":"."}]},{"tag":"@example","content":[{"kind":"code","text":"```tsx app/orders/menu/index.tsx\nimport { useNavigation } from 'expo-router';\n\nexport default function MenuRoute() {\n  const rootLayout = useNavigation('/');\n  const ordersLayout = useNavigation('/orders');\n\n  // Same as the default results of `useNavigation()` when invoked in this route.\n  const parentLayout = useNavigation('/orders/menu');\n}\n```"},{"kind":"text","text":"\n\nIf you attempt to access a layout that doesn't exist, an error such as\n"},{"kind":"code","text":"`Could not find parent navigation with route \"/non-existent\"`"},{"kind":"text","text":" is thrown."}]},{"tag":"@returns","content":[{"kind":"text","text":"The navigation object for the current route."}]},{"tag":"@see","content":[{"kind":"text","text":"React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-prop/#navigator-dependent-functions)\nfor more information."}]}]},"typeParameters":[{"name":"T","variant":"typeParam","kind":131072,"default":{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList","target":{}}],"name":"NavigationProp","package":"@react-navigation/core","target":{}}}],"parameters":[{"name":"parent","variant":"param","kind":32768,"flags":{"isOptional":true},"comment":{"summary":[{"kind":"text","text":"Provide an absolute path such as "},{"kind":"code","text":"`/(root)`"},{"kind":"text","text":" to the parent route or a relative path like "},{"kind":"code","text":"`../../`"},{"kind":"text","text":" to the parent route."}]},"type":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}}]},{"name":"useNavigationContainerRef","variant":"declaration","kind":64,"signatures":[{"name":"useNavigationContainerRef","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@returns","content":[{"kind":"text","text":"The root "},{"kind":"code","text":"`<NavigationContainer />`"},{"kind":"text","text":" ref for the app. The "},{"kind":"code","text":"`ref.current`"},{"kind":"text","text":" may be "},{"kind":"code","text":"`null`"},{"kind":"text","text":"\nif the "},{"kind":"code","text":"`<NavigationContainer />`"},{"kind":"text","text":" hasn't mounted yet."}]}]},"type":{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList","target":{}}],"name":"NavigationContainerRefWithCurrent","package":"@react-navigation/core","target":{}}}]},{"name":"usePathname","variant":"declaration","kind":64,"signatures":[{"name":"usePathname","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the currently selected route location without search parameters. For example, "},{"kind":"code","text":"`/acme?foo=bar`"},{"kind":"text","text":" returns "},{"kind":"code","text":"`/acme`"},{"kind":"text","text":".\nSegments will be normalized. For example, "},{"kind":"code","text":"`/[id]?id=normal`"},{"kind":"text","text":" becomes "},{"kind":"code","text":"`/normal`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  // segments = [\"profile\", \"[user]\"]\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n}\n```"}]}]},"type":{"type":"intrinsic","name":"string"}}]},{"name":"useRootNavigation","variant":"declaration","kind":64,"signatures":[{"name":"useRootNavigation","variant":"signature","kind":4096,"comment":{"summary":[],"blockTags":[{"tag":"@deprecated","content":[{"kind":"text","text":"Use ["},{"kind":"code","text":"`useNavigationContainerRef`"},{"kind":"text","text":"](#usenavigationcontainerref) instead,\nwhich returns a React "},{"kind":"code","text":"`ref`"},{"kind":"text","text":"."}]}]},"type":{"type":"union","types":[{"type":"literal","value":null},{"type":"reference","typeArguments":[{"type":"reference","name":"RootParamList","package":"@react-navigation/core","qualifiedName":"__global.ReactNavigation.RootParamList","target":{}}],"name":"NavigationContainerRef","package":"@react-navigation/core","target":{}}]}}]},{"name":"useRootNavigationState","variant":"declaration","kind":64,"signatures":[{"name":"useRootNavigationState","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the [navigation state](https://reactnavigation.org/docs/navigation-state/)\nof the navigator which contains the current screen."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useRootNavigationState } from 'expo-router';\n\nexport default function Route() {\n const { routes } = useRootNavigationState();\n\n return <Text>{routes[0].name}</Text>;\n}\n```"}]}]},"type":{"type":"intrinsic","name":"any"}}]},{"name":"useRouter","variant":"declaration","kind":64,"signatures":[{"name":"useRouter","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns the [Router](#router) object for imperative navigation."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx\nimport { useRouter } from 'expo-router';\nimport { Text } from 'react-native';\n\nexport default function Route() {\n const router = useRouter();\n\n return (\n  <Text onPress={() => router.push('/home')}>Go Home</Text>\n );\n}\n```"}]}]},"type":{"type":"reference","name":"Router","package":"expo-router"}}]},{"name":"useSegments","variant":"declaration","kind":64,"signatures":[{"name":"useSegments","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns a list of selected file segments for the currently selected route. Segments are not normalized,\nso they will be the same as the file path. For example, "},{"kind":"code","text":"`/[id]?id=normal`"},{"kind":"text","text":" becomes "},{"kind":"code","text":"`[\"[id]\"]`"},{"kind":"text","text":"."}],"blockTags":[{"tag":"@example","content":[{"kind":"code","text":"```tsx app/profile/[user].tsx\nimport { Text } from 'react-native';\nimport { useSegments } from 'expo-router';\n\nexport default function Route() {\n  // segments = [\"profile\", \"[user]\"]\n  const segments = useSegments();\n\n  return <Text>Hello</Text>;\n}\n```"},{"kind":"text","text":"\n\n\n"},{"kind":"code","text":"`useSegments`"},{"kind":"text","text":" can be typed using an abstract. Consider the following file structure:\n\n"},{"kind":"code","text":"```md\n- app\n  - [user]\n    - index.tsx\n    - followers.tsx\n  - settings.tsx\n```"},{"kind":"text","text":"\n\n\nThis can be strictly typed using the following abstract with "},{"kind":"code","text":"`useSegments`"},{"kind":"text","text":" hook:\n\n"},{"kind":"code","text":"```tsx\nconst [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()\n```"}]}]},"typeParameters":[{"name":"TSegments","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"string"},"default":{"type":"intrinsic","name":"string"}}],"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TSegments","package":"expo-router","refersToTypeParameter":true}],"name":"RouteSegments","package":"expo-router","target":{}}},{"name":"useSegments","variant":"signature","kind":4096,"typeParameters":[{"name":"TSegments","variant":"typeParam","kind":131072,"type":{"type":"tuple","elements":[{"type":"intrinsic","name":"string"}]}}],"type":{"type":"reference","name":"TSegments","package":"expo-router","refersToTypeParameter":true}}]},{"name":"withLayoutContext","variant":"declaration","kind":64,"signatures":[{"name":"withLayoutContext","variant":"signature","kind":4096,"comment":{"summary":[{"kind":"text","text":"Returns a navigator that automatically injects matched routes and renders nothing when there are no children.\nReturn type with "},{"kind":"code","text":"`children`"},{"kind":"text","text":" prop optional."}]},"typeParameters":[{"name":"TOptions","variant":"typeParam","kind":131072,"type":{"type":"intrinsic","name":"object"}},{"name":"T","variant":"typeParam","kind":131072,"type":{"type":"reference","typeArguments":[{"type":"intrinsic","name":"any"}],"name":"ComponentType","package":"@types/react","qualifiedName":"React.ComponentType","target":{}}},{"name":"TState","variant":"typeParam","kind":131072,"type":{"type":"reference","typeArguments":[{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536}}],"name":"Readonly","package":"typescript","target":{}}},{"name":"TEventMap","variant":"typeParam","kind":131072,"type":{"type":"reference","name":"EventMapBase","package":"@react-navigation/core","target":{}}}],"parameters":[{"name":"Nav","variant":"param","kind":32768,"type":{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}},{"name":"processor","variant":"param","kind":32768,"flags":{"isOptional":true},"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"options","variant":"param","kind":32768,"type":{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}}],"type":{"type":"array","elementType":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}}]}}}],"type":{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"intersection","types":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","typeArguments":[{"type":"reference","name":"T","package":"expo-router","refersToTypeParameter":true}],"name":"ComponentProps","package":"@types/react","qualifiedName":"React.ComponentProps","target":{}},{"type":"literal","value":"children"}],"name":"PickPartial","package":"expo-router"}],"name":"PropsWithoutRef","package":"@types/react","qualifiedName":"React.PropsWithoutRef","target":{}},{"type":"reference","typeArguments":[{"type":"intrinsic","name":"unknown"}],"name":"RefAttributes","package":"@types/react","qualifiedName":"React.RefAttributes","target":{}}]}],"name":"ForwardRefExoticComponent","package":"@types/react","qualifiedName":"React.ForwardRefExoticComponent","target":{}},{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"children":[{"name":"Screen","variant":"declaration","kind":1024,"type":{"type":"reflection","declaration":{"name":"__type","variant":"declaration","kind":65536,"signatures":[{"name":"__type","variant":"signature","kind":4096,"parameters":[{"name":"props","variant":"param","kind":32768,"type":{"type":"reference","typeArguments":[{"type":"reference","name":"TOptions","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TState","package":"expo-router","refersToTypeParameter":true},{"type":"reference","name":"TEventMap","package":"expo-router","refersToTypeParameter":true}],"name":"ScreenProps","package":"expo-router"}}],"type":{"type":"literal","value":null}}]}}}]}}]}}]}],"packageName":"expo-router"}