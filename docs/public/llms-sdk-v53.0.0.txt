# Expo SDK Documentation

Documentation for Expo SDK libraries, app configuration files, Expo CLI, create-expo-app, and more.

# create-expo

A command-line tool to create a new Expo and React Native project.

[](https://github.com/expo/expo/edit/main/docs/pages/more/create-expo.mdx)

`create-expo-app` is a command-line tool to create and set up a new Expo and React Native project. This tool simplifies the initialization process by providing various templates to get started quickly without the need for manual configuration.

## Create a new project

To create a new project, run the following command:

`npx create-expo-app@latest`

Running the above command will prompt you to enter the app name of your project. This app name is also used in the app config's [`name`](https://docs.expo.dev/versions/latest/config/app#name) property.

`What is your app named? my-app`

## Options

Uses the following options to customize the command behavior.

### `--yes`

Uses the default options to create a new project.

### `--no-install`

Skips installing npm dependencies or CocoaPods.

### `--template`

Running `create-expo-app` with a [Node Package Manager](https://docs.expo.dev/more/create-expo#node-package-managers-support) initializes and sets up a new Expo project using the default template.

You can use the `--template` option to select one of the following templates or pass it as an argument to the option. For example, `--template default`.

### `--example`

Use this option to initialize a project using an example from [expo/examples](https://github.com/expo/examples).

For example, running `npx create-expo-app --example with-router` will set up a project with Expo Router library.

### `--version`

Prints the version number and exits.

### `--help`

Prints the list of available options and exits.

## Node Package Managers support

Creating a new project with `create-expo-app` also handles setting up additional configuration needed for a specific Node Package Manager.

If you are migrating from one package manager to another, you've to manually carry out the additional configuration in your project. If you are using [EAS](https://docs.expo.dev/eas), you also have to configure your project for any additional required steps manually.

All the additional steps for each package manager are listed below.

### npm

#### Local installation

npm is installed as part of Node.js installation. See [Node.js documentation](https://nodejs.org/en/download/package-manager) for installation instructions.

#### EAS installation

Supported by default if the project directory contains package-lock.json.

### Yarn 1 (Classic)

#### Local installation

Yarn 1 (Classic) is usually installed as a global dependency of npm. See [Yarn 1 documentation](https://classic.yarnpkg.com/en/docs/getting-started) for installation instructions.

#### EAS installation

Supported by default if the project directory contains yarn.lock.

### Yarn 2+ (Modern)

#### Local installation

See [Yarn documentation](https://yarnpkg.com/getting-started/install) for installation instructions.

Yarn 2+ handles package management differently than Yarn 1. One of the core changes in Yarn 2+ is the [Plug'n'Play (PnP)](https://yarnpkg.com/features/pnp) node linking model that does not work with React Native.

By default, a project created with `create-expo-app` and Yarn 2+ uses [`nodeLinker`](https://yarnpkg.com/features/linkers#nodelinker-node-modules) with its value set to `node-modules` to install dependencies.

#### EAS installation

Yarn Modern on EAS requires adding [`eas-build-pre-install` hook](https://docs.expo.dev/build-reference/npm-hooks). In your project's package.json, add the following configuration:

```
{
  "scripts": {
    "eas-build-pre-install": "corepack enable && yarn set version 4"
  }
}
```

### pnpm

#### Local installation

Requires installing Node.js. See [pnpm documentation](https://pnpm.io/installation) for installation instructions.

By default, a project created with `create-expo-app` and pnpm uses [`node-linker`](https://pnpm.io/npmrc#node-linker) with its value set to `hoisted` to install dependencies.

#### EAS installation

Supported by default if the project directory contains pnpm-lock.yaml.

### Bun

See [Bun](https://docs.expo.dev/guides/using-bun) guide for details on creating a new Expo project with `bun`, migration from another package manager, and usage with EAS.

---

# expo-cli

The Expo CLI is a command-line tool that is the primary interface between a developer and other Expo tools.

[](https://github.com/expo/expo/edit/main/docs/pages/more/expo-cli.mdx)

The `expo` package provides a small and powerful CLI tool `npx expo` which is designed to keep you moving fast during app development.

## Highlights

*   [Start a server](https://docs.expo.dev/more/expo-cli#develop) for developing your app: `npx expo start`.
*   [Generate the native Android and iOS directories](https://docs.expo.dev/more/expo-cli#prebuild) for your project: `npx expo prebuild`.
*   [Build and run](https://docs.expo.dev/more/expo-cli#compiling) the native apps locally: `npx expo run:ios` and `npx expo run:android`.
*   [Install and update packages](https://docs.expo.dev/more/expo-cli#install) that work with the version of `react-native` in your project: `npx expo install package-name`.
*   `npx expo` can be used with `npx react-native` simultaneously.

To view a list of available commands in Expo CLI, run the following in your project:

> You can also run `yarn expo -h` if you prefer to use yarn as the package manager.

The output should look something like below:

```
Usage
  $ npx expo <command>

Commands
  start, export
  run:ios, run:android, prebuild
  install, customize, config
  login, logout, whoami, register

Options
  --version, -v   Version number
  --help, -h      Usage info
```

You can run any command with the `--help` or `-h` flag to learn more about it:

## Installation

Expo CLI is included in the `expo` package. You can install it with npm or yarn:

> Projects that are not using [Expo Prebuild](https://docs.expo.dev/more/expo-cli#prebuild) (also referred to as _Bare projects_) will need to perform additional setup to ensure all custom Expo bundling features work: [Metro: Bare workflow setup](https://docs.expo.dev/versions/latest/config/metro#bare-workflow-setup).

## Develop

Start a development server to work on your project by running:

> You can also run `npx expo` as an alias to `npx expo start`.

This command starts a server on `http://localhost:8081` that a client can use to interact with the bundler. The default bundler is [Metro](https://metrobundler.dev/).

The UI that shows up in the process is referred to as the Terminal UI. It contains a QR code (for the dev server URL) and a list of keyboard shortcuts you can press:

### Launch target

The `npx expo start` command automatically launches the app in a development build if `expo-dev-client` is installed in the project. Otherwise, it launches the app in Expo Go.

Alternatively, you can force the launch target by passing the following flags to the command:

*   `--dev-client`: Always launch the app in a development build.
*   `--go`: Always launch the app in Expo Go.

You can also switch the launch target during runtime by pressing S in the Terminal UI. The `run` commands also use `--dev-client` after compiling the development build, by default.

### Server URL

By default, the project is served over a LAN connection. You can change this behavior to localhost-only by using the flag `npx expo start --localhost`.

Other available options are:

*   `--port`: Port to start the dev server on (does not apply to webpack or [tunnel URLs](https://docs.expo.dev/more/expo-cli#tunneling)). Use `--port 0` to automatically use the first available port. Default: 8081.
*   `--https`: (Deprecated in favor of `--tunnel`) Start the dev server using a secure origin. This is currently only supported on web.

You can force the URL to be any value with the `EXPO_PACKAGER_PROXY_URL` environment variable. For example:

Terminal

`-`Â `export EXPO_PACKAGER_PROXY_URL=http://expo.dev`

`npx expo start`

Will open apps to: `exp://expo.dev:80` (the `:80` is a temporary workaround for Android WebSockets).

#### Tunneling

Restrictive network conditions (common for public Wi-Fi), firewalls (common for Windows users), or Emulator misconfiguration can make it difficult to connect a remote device to your dev server over lan/localhost.

Sometimes it's easier to connect to a dev server over a proxy URL that's accessible from any device with internet access, this is referred to as tunneling. `npx expo start` provides built-in support for tunneling via [ngrok](https://ngrok.com/).

To enable tunneling, first install `@expo/ngrok`:

Then run the following to start your dev server from a _tunnel_ URL:

`npx expo start --tunnel`

This will serve your app from a public URL like: `https://xxxxxxx.bacon.19000.exp.direct:80`.

Use the `EXPO_TUNNEL_SUBDOMAIN` environment variable to experimentally set the subdomain for the tunnel URL. This is useful for testing universal links on iOS. This may cause unexpected issues with `expo-linking` and Expo Go. Select the exact subdomain to use by passing a `string` value that is not one of: `true`, `false`, `1`, `0`.

Drawbacks

*   Tunneling is slower than local connections because requests must be forwarded to a public URL.
*   Tunnel URLs are public and can be accessed by any device with a network connection. Expo CLI mitigates the risk of exposure by adding entropy to the beginning of the URL. Entropy can be reset by clearing the .expo directory in your project.
*   Tunnels require a network connection on both devices, meaning this feature cannot be used with the `--offline` flag.

Tunneling requires a third-party hosting service, this means it may sometimes experience intermittent issues like `ngrok tunnel took too long to connect` or `Tunnel connection has been closed. This is often related to intermittent connection problems with the Ngrok servers...`. Be sure to check for [Ngrok outages](https://status.ngrok.com/) before reporting an issue. Some Windows users have also reported needing to modify their antivirus settings to allow Ngrok to work correctly.

#### Offline

You can develop without a network connection by using the `--offline` flag:

`npx expo start --offline`

Offline will prevent the CLI from making network requests. If you don't use the flag and your computer has no internet connection, then offline support will automatically be enabled, it will just take a bit longer to verify the reachability.

Expo CLI makes network requests to sign manifests with your user credentials to ensure sensitive information is sandboxed in reusable runtimes like Expo Go.

### .expo directory

When you start the development server in a project for the first time, a .expo directory is created at the root of that project. It contains two files:

*   devices.json: Contains information about devices that have opened this project recently.
*   settings.json: Contains information about server configuration that is used to serve the project's manifest.

Both of these files have information that is specific to your local computer. This is the reason why .expo directory is included in the .gitignore file, by default, when a new project is created. It is not meant to be shared with other developers.

## Building

A React Native app consists of two parts: a native runtime ([compiling](https://docs.expo.dev/more/expo-cli#compiling)), and static files like JavaScript bundles and assets ([exporting](https://docs.expo.dev/more/expo-cli#exporting)). Expo CLI provides commands for performing both tasks.

### Compiling

You can compile your app locally with the `run` commands:

Terminal

`# Build for iOS`

`npx expo run:ios`

`# Build for Android`

`npx expo run:android`

Highlights

*   Build directly on connected devices with no global side effects using the `--device` flag. Supports locked devices, letting you retry instantly instead of needing to rebuild.
*   Automatically codesign iOS apps for development from the CLI without having to open Xcode.
*   Smart log parsing shows warnings and errors from your project source code, unlike Xcode which surfaces hundreds of benign warnings from your node modules.
*   Fatal errors causing your app to crash will be surfaced in the terminal preventing the need to reproduce in Xcode.

`npx expo run:ios` can only be run on a Mac, and Xcode must be installed. You can build the app in the cloud from any computer using `eas build -p ios`. Similarly, `npx expo run:android` requires Android Studio and Java to be installed and configured on your computer.

Building locally is useful for developing native modules and [debugging complex native issues](https://docs.expo.dev/debugging/runtime-issues#native-debugging). Building remotely with `eas build` is a much more resilient option due to the pre-configured cloud environment.

If your project does not have the corresponding native directories, the `npx expo prebuild` command will run once to generate the respective directory before building.

For example, if your project does not have an ios directory in the root of your project, then `npx expo run:ios` will first run `npx expo prebuild -p ios` before compiling your app. For more information on this process, see [Expo Prebuild](https://docs.expo.dev/workflow/prebuild).

Cross-Platform Arguments

*   `--no-build-cache`: Clear the native cache before building. On iOS, this is the derived data directory. Cache clearing is useful for profiling your build times.
*   `--no-install`: Skip installing dependencies. On iOS, this will also skip running `npx pod-install` if the `dependencies` field in the project's `package.json` has changed.
*   `--no-bundler`: Skip starting the dev server. Enabled automatically if the dev server is already serving the app from a different process.
*   `-d, --device [device]`: Device name or ID to build the app on. You can pass `--device` without arguments to select a device from a list of available options. This supports connected devices as well as virtual devices.
*   `-p, --port <port>`: Port to start the development server. Default: 8081. This is only relevant for development builds. Production builds will [export](https://docs.expo.dev/more/expo-cli#exporting) the project and embed the files in the native binary before installing them on a device.
*   `--binary <path>`: File path to the binary to install on the device. When this is provided, the build process will be skipped and the binary will attempt to be installed directly. If the binary was not built for the correct device, for example, it is built for the simulator or installed on the device, then the command will fail.

#### Compiling Android

Android apps can have multiple different variants which are defined in the project's `build.gradle` file. Variants can be selected with the `--variant` flag:

`npx expo run:android --variant debug`

You can compile the Android app for production by running:

`npx expo run:android --variant release`

This build is not automatically code-signed for submission to the Google Play Store. This command should be used to test bugs that may only show up in production builds. To generate a production build that is code signed for the Play Store, we recommend using [EAS Build](https://docs.expo.dev/build/introduction).

You can debug the native Android project using native debugging tools by opening the android directory in Android Studio:

`-`Â `open -a /Applications/Android Studio.app android`

If you have a customized Android project using different product flavors, you can configure both the flavor and application ID using the `--variant` and `--app-id` flags:

`npx expo run:android --variant freeDebug --app-id dev.expo.myapp.free`

For more information, see the [Local builds using Android product flavors](https://docs.expo.dev/guides/local-app-development#local-builds-using-android-product-flavors) guide.

#### Compiling iOS

An iOS app can have multiple schemes for representing different sub-apps like App Clips, watchOS apps, Safari Extensions, and so on. By default, `npx expo run:ios` will choose the scheme for your iOS app. You can pick a custom scheme with the `--scheme <my-scheme>` argument. If you pass in the `--scheme` argument alone, then Expo CLI will prompt you to choose a scheme from the list of available options in your Xcode project.

The scheme you select will filter out which `--device` options show up in the selection prompt, for example, selecting an Apple TV scheme will only show available Apple TV devices.

You can compile an iOS app for production by running:

`npx expo run:ios --configuration Release`

This build is not automatically code signed for submission to the Apple App Store. `npx expo run:ios` should mostly be used to test bugs that only show up in production builds. Native code signing requires several network requests and is prone to many different types of errors from the Apple servers. To generate a production build that is code signed for the App Store, we recommend using [EAS Build](https://docs.expo.dev/build/introduction).

When you compile your app onto a Simulator, the Simulator's native error logs will be piped to the Expo CLI process in the terminal. This is useful for quickly seeing bugs that may cause a fatal error. For example, missing permission messages. Error piping is not available for physical iOS devices.

You can debug using `lldb` and all of the native Apple debugging tools by opening the project in Xcode and rebuilding from Xcode:

Building from Xcode is useful because you can set native breakpoints and profile any part of the application. Be sure to track changes in source control (git) in case you need to regenerate the native app with `npx expo prebuild -p ios --clean`.

iOS development signing

If you want to see how your app will run on your device, all you have to do is connect it, run `npx expo run:ios --device`, and select your connected device.

Expo CLI will automatically sign the device for development, install the app, and launch it.

If you don't have any developer profiles setup on your computer then you'll need to set them up manually outside of Expo CLI by following this guide: [Setup Xcode signing](https://expo.fyi/setup-xcode-signing).

### Exporting

You can export the JavaScript and assets for your app using Metro bundler by running:

This is done automatically when using `eas update` or when compiling the native runtime. The `export` command works similar to most web frameworks:

*   A bundler transpiles and bundles your application code for production environments, stripping all code guarded by the `__DEV__` boolean.
*   All static files are copied into a static dist directory which can be served from a static host.
*   Contents of the public directory are copied into the dist directory as-is.

The following options are provided:

*   `--platform <platform>`: Choose the platform to compile for: 'ios', 'android', 'all'. Default: all. 'web' is also available if configured in the app config. For more information, see [Customizing Metro](https://docs.expo.dev/guides/customizing-metro).
*   `--dev`: Bundle for development environments without minifying code or stripping the `__DEV__` boolean.
*   `--output-dir <dir>`: The directory to export the static files to. Default: dist
*   `--max-workers <number>`: Maximum number of tasks to allow the bundler to spawn. Setting this to `0` will run all transpilation on the same process, meaning you can easily debug Babel transpilation.
*   `-c, --clear`: Clear the bundler cache before exporting.
*   `--no-minify`: Skip minifying JavaScript and CSS assets.
*   `--no-bytecode`: Skip generating Hermes bytecode for native platforms. Only use this for analyzing bundle sizes and never ship UTF-8 bundles to native platforms as this will lead to drastically longer startup times.

#### Hosting with sub-paths

> Experimental functionality.

You can configure the prefix for static assets by setting the `experiments.baseUrl` field in your [app config](https://docs.expo.dev/workflow/configuration):

```
{
  "expo": {
    "experiments": {
      "baseUrl": "/my-root"
    }
  }
}
```

This will export the website with all resources prefixed with `/my-root`. For example, an image at `assets/image.png` will be expected to be hosted at /my-root/assets/image.png. The actual file will be located in the same file system location as the entire directory is expected to be hosted at `/my-root` on the server.

Expo Router has built-in support for `baseUrl`. When using the `Link` and `router` APIs, the `baseUrl` will be automatically prepended to the URL.

```
import { Link } from 'expo-router';

export default function Blog() {
  return <Link href="/blog/123">Go to blog post</Link>;
}
```

This will export to the following:

```
<a href="/my-root/blog/123">Go to blog post</a>
```

If you use `<a>`, React Navigation, or the `Linking` API directly, you'll need to manually prepend the `baseUrl`.

The `baseUrl` functionality is production-only and must be set before exporting the website. If you change the value, you must re-export the website.

Images and other assets will work automatically if you `require` or `import` them. If you directly reference a resource URL then you will need to append the baseUrl manually.

```
import { Image } from 'expo-image';

export default function Blog() {
  return <Image source={require('@/assets/image.png')} />;
}
```

This will export to the following:

```
<img src="/my-root/assets/assets/image.png" />
```

Manually passing a URL will need to be manually prefixed:

```
export default function Blog() {
  return <img src="/my-root/assets/image.png" />;
}
```

### Exporting with webpack

> Deprecated: In SDK 50 and above, Expo Webpack has been deprecated in favor of universal Metro (`npx expo export`). Learn more in [migrating from Webpack to Expo Router](https://docs.expo.dev/router/migrate/from-expo-webpack).

You can export the JavaScript and assets for your web app using webpack by running the following:

*   `--dev`: Bundle in 'development' mode without minifying code or stripping the `__DEV__` boolean.
*   `-c, --clear`: Clear the bundler cache before exporting.

This command will be disabled if your project is configured to use `metro` for bundling web projects in the `app.json` via the `expo.web.bundler: 'metro'` field.

## Prebuild

Native source code must be generated before a native app can compile. Expo CLI provides a unique and powerful system called _prebuild_, that generates the native code for your project. To learn more, read the [Expo Prebuild docs](https://docs.expo.dev/workflow/prebuild).

## Lint

Linting helps enforce best practices and ensure your code is consistent. The `npx expo lint` command will set up ESLint with Expo-specific settings and run the `npx eslint` command with options that are optimized for the Expo framework. By running `npx expo lint --fix`, linting issues can be fixed automatically.

Running `npx expo lint` targets all files in the src, app, and components directories by default. You can also pass custom files or directories to the lint command as arguments. For example:

`npx expo lint ./utils constants.ts`

All files matching `.js, .jsx, .ts, .tsx, .mjs, .cjs` extensions will be linted by default. You can customize the extensions by passing the `--ext` flag. For example, to lint only `.ts` and `.tsx` files, you can use the `--ext` option: `npx expo lint --ext .ts,.tsx` or `npx expo lint --ext .js --tsx .tsx`.

If you need additional customization, you can pass extra arguments using the `--` operator. For example, to pass the `--no-error-on-unmatched-pattern` flag to ESLint, you can run:

`npx expo lint -- --no-error-on-unmatched-pattern`

If you need more customization, you can use `npx eslint` directly.

[

Using ESLint

Learn more about ensuring best practices with ESLint in an Expo project.

](https://docs.expo.dev/guides/using-eslint)

## Config

Evaluate the app config (app.json, or app.config.js) by running:

*   `--full`: Include all project config data.
*   `--json`: Output in JSON format, useful for converting an app.config.js to an app.config.json.
*   `-t, --type`: [Type of config](https://docs.expo.dev/more/expo-cli#config-type) to show.

### Config type

There are three different config types that are generated from the app config:

*   `public`: The manifest file to use with OTA updates. Think of this like an `index.html` file's `<head />` element but for native apps.
*   `prebuild`: The config that is used for [Expo Prebuild](https://docs.expo.dev/workflow/prebuild) including async modifiers. This is the only time the config is not serializable.
*   `introspect`: A subset of the `prebuild` config that only shows in-memory modifications like `Info.plist` or AndroidManifest.xml changes. Learn more about [introspection](https://docs.expo.dev/config-plugins/development-and-debugging#introspection).

## Install

Unlike the web, React Native is not backwards compatible. This means that npm packages often need to be the exact right version for the currently installed copy of `react-native` in your project. Expo CLI provides a best-effort tool for doing this using a list of popular packages and the known working version combinations. Simply use the `install` command as a drop-in replacement for `npm install`:

`npx expo install expo-camera`

Running a single instance of this command, you can also install multiple packages:

`npx expo install typescript expo-sms`

You can directly pass arguments to the underlying package manager by using the `--` operator:

`-`Â `yarn expo install typescript -- -D`

`# yarn add typescript -D`

### Version validation

You can perform validation and correction with the `--check` and `--fix` flags:

*   `--check`: Check which installed packages need to be updated.
*   `--fix`: Automatically update any invalid package versions.

Example:

`# Check all packages for incorrect versions, prompt to fix locally`

`npx expo install --check`

`npx expo install --check` prompts you about packages that are installed incorrectly. It also prompts about installing these packages to their compatible versions locally. It exits with non-zero in Continuous Integration (CI). This means you can use this to do continuous immutable validation. In contrast, `npx expo install --fix` will always fix packages if needed, regardless of the environment.

You can validate specific packages by passing them:

`# Check only react-native and expo-sms`

`npx expo install react-native expo-sms --check`

The command `npx expo install expo-camera` and `npx expo install expo-camera --fix` serve the same purpose, the `--fix` command is useful for upgrading all packages in your project like:

### Configuring dependency validation

There may be circumstances where you want to use a version of a package that is different from the version recommended by `npx expo install`. In this case, you can exclude specific packages from version checking by using the [`expo.install.exclude`](https://docs.expo.dev/versions/latest/config/package-json#exclude) property in your project's package.json.

### Install package managers

`npx expo install` has support for `bun`, `npm`, `pnpm`, and `yarn`.

You can force the package manager using a named argument:

*   `--bun`: Use `bun` to install dependencies. Default when bun.lockb or bun.lock exists.
*   `--npm`: Use `npm` to install dependencies. Default when package-lock.json exists.
*   `--pnpm`: Use `pnpm` to install dependencies. Default when pnpm-lock.yaml exists.
*   `--yarn`: Use `yarn` to install dependencies. Default when yarn.lock exists.

## Authentication

Expo CLI provides authentication methods to use with the `npx expo start` command. Authentication is used to "code sign" manifests for secure OTA usage. Think of this like HTTPS on the web.

1.  Register an account with `npx expo register`.
2.  Login to your account with `npx expo login`.
3.  Check which account is currently authenticated with `npx expo whoami`.
4.  Logout with `npx expo logout`.

These credentials are shared across Expo CLI and EAS CLI.

## Customizing

Sometimes you may want to customize a project file that would otherwise be generated in memory by Expo CLI. When utilizing tools other than Expo CLI, you'll need to have the default config files present, otherwise your app may not work as expected. You can generate files by running:

From here, you can choose to generate basic project files like:

*   babel.config.js -- The Babel configuration. This is required to be present if you plan to use tooling other than Expo CLI to bundle your project.
*   webpack.config.js -- The default webpack config for web development.
*   metro.config.js -- The default Metro config for universal development. This is required for usage with `npx react-native`.
*   tsconfig.json -- Create a TypeScript config file and install the required dependencies.

## Environment Variables

## Telemetry

Expo dev tools collect anonymous data about general usage. This helps us know when a feature is not working as expected. Telemetry is completely optional, you can opt out by using the `EXPO_NO_TELEMETRY=1` environment variable.

---

# glossary-of-terms

List of non-obvious terms used within the documentation, related to Expo or cross-platform development in general.

[](https://github.com/expo/expo/edit/main/docs/pages/more/glossary-of-terms.mdx)

### Android

The mobile operating system that is sponsored by Google for use with Android devices.

### App config

A file named app.json, app.config.json, app.config.js, or app.config.ts in the root project directory. For more information, see [app config configuration](https://docs.expo.dev/workflow/configuration).

This file is used for the following purposes:

*   To configure how [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli) works.
*   Generate a project's public [manifest](https://docs.expo.dev/more/glossary-of-terms#manifest) in EAS Update (think index.html but for native apps).
*   List Expo [config plugins](https://docs.expo.dev/more/glossary-of-terms#config-plugin) which influence how `npx expo prebuild` generates native code.

### app.json

An [app config](https://docs.expo.dev/more/glossary-of-terms#app-config) file.

### Apple capabilities

Cloud services that are provided by Apple. These services must be enabled for an application in the [Apple Developer Portal](https://docs.expo.dev/more/glossary-of-terms#apple-developer-portal).

### Apple Developer Portal

Apple's [official website](https://developer.apple.com/) for managing application code signing. EAS Credentials automate most of the common reasons a developer might visit this website when developing an app.

### Auto capability signing

A feature of EAS Build that automatically enables or disables [Apple capabilities](https://docs.expo.dev/more/glossary-of-terms#apple-capabilities) based on the project's entitlements file. [Learn more](https://docs.expo.dev/build-reference/ios-capabilities).

### Autolinking

A cross-platform tool for automatically linking native modules to native apps via native package managers.

*   On Android the tool is used in the android/app/build.gradle and invoked during the [Gradle](https://docs.expo.dev/more/glossary-of-terms#gradle) sync process.
*   On iOS the tool is used in [CocoaPods](https://docs.expo.dev/more/glossary-of-terms#cocoapods) ios/Podfile and invoked during `pod install`.

There are two versions of Autolinking: [Expo Autolinking](https://docs.expo.dev/more/glossary-of-terms#expo-autolinking), and [Community Autolinking](https://docs.expo.dev/more/glossary-of-terms#community-autolinking).

The default [Prebuild template](https://docs.expo.dev/more/glossary-of-terms#prebuild-template) includes support for [Expo Autolinking](https://docs.expo.dev/more/glossary-of-terms#expo-autolinking), and the [Community Autolinking](https://docs.expo.dev/more/glossary-of-terms#community-autolinking) fork.

### Babel

Transpiler used for removing language features that aren't available in the runtime's [JavaScript engine](https://docs.expo.dev/more/glossary-of-terms#javascript-engine). [Metro](https://docs.expo.dev/more/glossary-of-terms#metro-bundler) uses Babel internally.

Projects can configure how Babel is used by modifying the [babel.config.js](https://docs.expo.dev/versions/latest/config/babel) file in the project directory. This file is optional when using [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli). Expo projects should extend the default Babel preset [`babel-preset-expo`](https://github.com/expo/expo/tree/main/packages/babel-preset-expo).

### Bare workflow

Describes the approach when the native projects (in the android and ios directories) are versioned in Git and maintained manually. It's typical for existing "bare" React Native apps where you manually make changes to the native projects. There is freedom to customize them but also high maintenance overhead.

This is in contrast to using [app config and prebuild](https://docs.expo.dev/workflow/prebuild), where the native projects are not versioned. Instead, they are generated on demand using the `npx expo prebuild`, which is the [recommended approach](https://docs.expo.dev/workflow/prebuild#pitch).

### Bun

A JavaScript runtime and a drop-in alternative for Node.js. For more information about usage with Expo and EAS, see [using Bun](https://docs.expo.dev/guides/using-bun) guide.

### CocoaPods

The iOS package manager that is used to link native modules to the native iOS project. This package manager is configured using the ios/Podfile file and updated when a user runs `pod install` in the ios directory.

### Community Autolinking

This refers to the React Native community [fork](https://github.com/react-native-community/cli/issues/248#issue-422591744) of the [Expo Autolinking](https://docs.expo.dev/more/glossary-of-terms#expo-autolinking). The requirements for linking a module are different from [Expo Autolinking](https://docs.expo.dev/more/glossary-of-terms#expo-autolinking), however, the implementation is the same.

### Config introspection

A process for evaluating the results of [`npx expo prebuild`](https://docs.expo.dev/more/glossary-of-terms#prebuild) in-memory without persisting any code changes. This is used in [Auto Capability Signing](https://docs.expo.dev/more/glossary-of-terms#auto-capability-signing) to determine what the entitlements file will look like without generating any native code. This process is also used in the [VS Code Expo](https://docs.expo.dev/more/glossary-of-terms#vs-code-expo) extension to debug [Config Mods](https://docs.expo.dev/more/glossary-of-terms#config-mods).

### Config Mods

Async functions that are appended to the [app config](https://docs.expo.dev/more/glossary-of-terms#app-config) for use in [Prebuild](https://docs.expo.dev/more/glossary-of-terms#prebuild). These functions are given a single native file to modify such as AndroidManifest.xml or Info.plist. Config mods are chained together and come from the package `@expo/config-plugins`. For more information, see [Config plugins](https://docs.expo.dev/config-plugins/introduction).

### Config Plugin

A JavaScript function that is used to append [config mods](https://docs.expo.dev/more/glossary-of-terms#config-mods) to the [app Config](https://docs.expo.dev/more/glossary-of-terms#app-config) for use in [Prebuild](https://docs.expo.dev/more/glossary-of-terms#prebuild). For more information, see [Config Plugins](https://docs.expo.dev/config-plugins/introduction).

### Continuous Native Generation (CNG)

An abstract concept that describes the process of generating native projects from a set of inputs. In the context of Expo, CNG is implemented via the [`prebuild`](https://docs.expo.dev/more/glossary-of-terms#prebuild) command. See [CNG](https://docs.expo.dev/workflow/continuous-native-generation) and [Expo Prebuild](https://docs.expo.dev/workflow/prebuild) for more information.

### create-expo-app

A standalone command line tool (CLI) for bootstrapping new React Native apps with the `expo` package installed. See [`create-expo-app` reference](https://docs.expo.dev/more/create-expo) for more information.

### create-react-native-app

A standalone command line tool (CLI) for bootstrapping new React Native apps with the `expo` package installed and the native code generated. This CLI also enables the use of bootstrapping from an example project in [expo/examples](https://github.com/expo/examples).

This package can be used by running any of the following commands:

*   `npx create-expo-app`
*   `yarn create expo-app`
*   `npm create expo-app`

### Dangerous mods

Config [modifiers](https://docs.expo.dev/more/glossary-of-terms#config-mods) that apply unstable changes to a native project during [prebuild](https://docs.expo.dev/more/glossary-of-terms#prebuild). Using these modifiers is unpredictable and prone to breaking changes between major version bumps in [Expo SDK](https://docs.expo.dev/more/glossary-of-terms#expo-sdk). For more information, see [Using a dangerous mod](https://docs.expo.dev/config-plugins/dangerous-mods).

### Development build

A development build is a debug build of your app that contains the `expo-dev-client` package. It's like an evolution of [Expo Go](https://docs.expo.dev/more/glossary-of-terms#expo-go) which doesn't have Expo Go's limitations and can be customized to your application's needs.

This is the recommended approach for building production-grade apps with Expo. For more information, see [Development builds](https://docs.expo.dev/get-started/set-up-your-environment?mode=development-build).

### Dev clients

`expo-dev-client` is a library that allows you to create a development build and includes useful development tools. You might also come across "custom dev client", a synonym for [Development builds](https://docs.expo.dev/more/glossary-of-terms#development-build).

### Development server

A development server (or dev server) is a server that is started locally, usually by running `npx expo start` from [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli).

The development server is typically hosted on `http://localhost:8081`. It hosts a [manifest](https://docs.expo.dev/more/glossary-of-terms#manifest) from `/` which the client uses to request the JavaScript bundle from the bundler.

### EAS

[Expo Application Services (EAS)](https://docs.expo.dev/eas) are deeply integrated cloud services for Expo and React Native apps, such as [EAS Build](https://docs.expo.dev/build/introduction), [EAS Submit](https://docs.expo.dev/submit/introduction) and [EAS Update](https://docs.expo.dev/eas-update/introduction).

### EAS CLI

The command-line tool for working with EAS.

### EAS Config

The eas.json file used to configure [EAS CLI](https://docs.expo.dev/more/glossary-of-terms#eas-cli). For more information, see [Configuring EAS Build with eas.json](https://docs.expo.dev/build/eas-json).

### EAS Metadata

A command-line tool for uploading and downloading Apple App Store metadata as JSON. This tool is available in the [EAS CLI](https://docs.expo.dev/more/glossary-of-terms#eas-cli) package and should be used to improve the iOS submission process. For more information, see [EAS Metadata](https://docs.expo.dev/eas/metadata).

### EAS Update

1.  The cloud hosting service [EAS Update](https://docs.expo.dev/eas-update/introduction) that is used for OTA Updates.
2.  The CLI command `eas update` from [EAS CLI](https://docs.expo.dev/more/glossary-of-terms#eas-cli) used to publish static files to the cloud hosting service.

### Emulator

Emulator is used to describe software emulators of Android devices on your computers. Typically, iOS emulators are referred to as [Simulators](https://docs.expo.dev/more/glossary-of-terms#simulator).

### Entry point

The entry point usually refers to the initial JavaScript file used to load an application. In apps using [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli), the default entry point is ./node\_modules/expo/AppEntry.js which simply imports the App.js file from the root project directory and registers it as the initial component in the native app.

### Experience

A synonym for an app that usually implies something more single-use and smaller in scope, sometimes artistic and whimsical.

### Expo Autolinking

The original [Autolinking](https://docs.expo.dev/more/glossary-of-terms#autolinking) system is designed for projects using `expo-modules-core`. This system links modules based on the existence of an expo-module.config.json in the library's root directory.

### Expo CLI

The command-line tool for working with Expo. This term now refers to the [Local Expo CLI](https://docs.expo.dev/more/glossary-of-terms#local-expo-cli), but historically referred to the [Global Expo CLI](https://docs.expo.dev/more/glossary-of-terms#global-expo-cli). For more information, see [Expo CLI](https://docs.expo.dev/more/expo-cli).

### Expo client

The former name for the [Expo Go](https://docs.expo.dev/more/glossary-of-terms#expo-go) app.

### Expo export

Refers to the command `npx expo export` from [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli). This command is used to bundle the app's JavaScript and assets, and then export them into a static directory that can be uploaded to a hosting service like [EAS Update](https://docs.expo.dev/more/glossary-of-terms#eas-update), and embedded in a [native runtime](https://docs.expo.dev/more/glossary-of-terms#native-runtime) for offline use.

### Expo Go

The Android and iOS app that serves as a sandbox for learning and experimenting with React Native.

Due to its limitations (such as the inability to include custom native code), it's not recommended for building and distributing production apps. Instead, use a [development build](https://docs.expo.dev/more/glossary-of-terms#development-build).

### Expo install

Refers to the command `npx expo install` from [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli). This command is used to install npm packages containing [native modules](https://docs.expo.dev/more/glossary-of-terms#native-module) that work with the currently installed version of `expo` in the project. Not all packages are supported. This command wraps the globally installed [package managers](https://docs.expo.dev/more/glossary-of-terms#package-manager).

### Expo Module Config

A file named expo-module.config.json that lives in the root directory of a [native module](https://docs.expo.dev/more/glossary-of-terms#native-module). For more information, see [Module Config](https://docs.expo.dev/modules/module-config).

### Expo SDK

A collection of [npm](https://docs.expo.dev/more/glossary-of-terms#npm) packages containing [native modules](https://docs.expo.dev/more/glossary-of-terms#native-module) that provides access to device/system functionality such as camera, push notification, contacts, file system, and more.

*   Each package supports Android, iOS, and web whenever possible.
*   The interface is completely written in [TypeScript](https://docs.expo.dev/more/glossary-of-terms#typescript).
*   All packages in the Expo SDK work with each other and can safely be compiled together.
*   Any package in the SDK can be used in any [React Native](https://docs.expo.dev/more/glossary-of-terms#react-native) app, with minimal, shared setup. [Learn more](https://docs.expo.dev/bare/installing-expo-modules).
*   All packages are [open source](https://github.com/expo/expo/tree/main/packages) and can be freely customized.

### Expo start

Refers to the command `npx expo start` from [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli). This command is used to start a local [development server](https://docs.expo.dev/more/glossary-of-terms#development-server) that a [client](https://docs.expo.dev/more/glossary-of-terms#expo-client) connects to interact with the [Metro bundler](https://docs.expo.dev/more/glossary-of-terms#metro-bundler).

### Fabric

The React Native rendering system which is used to create and manage native views. For more information, see [Fabric Renderer](https://reactnative.dev/architecture/fabric-renderer).

### Flipper

A mobile app debugger used internally at Meta. It was previously recommended for use with React Native, but the integration is now deprecated and no longer supported by the React Native team [(RFC-0641)](https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0641-decoupling-flipper-from-react-native-core.md).

### FYI

Sometimes referred to as Expo FYI, is a collection of tailored solutions to complex issues that live at [expo.fyi](https://expo.fyi/). FYI links are utilized throughout Expo's developer tooling to help provide a better developer experience to users.

### Global Expo CLI

The package `expo-cli` was installed globally on the user's machine and used across all projects. This CLI was introduced in SDK 30 (2018), and deprecated in favor of the [Local Expo CLI](https://docs.expo.dev/more/glossary-of-terms#local-expo-cli) in SDK 46 (2022).

### Gradle

Gradle is a build automation tool for multi-language software development. It's used to build Android apps. It controls the development process in the tasks of compilation and packaging to testing, deployment, and publishing.

### Hermes engine

A [JavaScript engine](https://docs.expo.dev/more/glossary-of-terms#javascript-engine) developed by [Meta](https://docs.expo.dev/more/glossary-of-terms#meta) specifically for use with [React Native](https://docs.expo.dev/more/glossary-of-terms#react-native). Hermes features ahead-of-time static optimization and compact bytecode to improve performance with focus on mobile devices, and is the default JS engine.

### iOS

The operating system used on iPhone, iPad, and Apple TV. [Expo Go](https://docs.expo.dev/more/glossary-of-terms#expo-go) currently runs on iOS for iPhone and iPad.

### JavaScript engine

A native package that can evaluate JavaScript on-device. In React Native, we predominantly use [Hermes](https://docs.expo.dev/more/glossary-of-terms#hermes-engine) by [Meta](https://docs.expo.dev/more/glossary-of-terms#meta). Other options include [JavaScriptCore](https://docs.expo.dev/more/glossary-of-terms#javascriptcore-engine) by Apple, and V8 by Google.

### JavaScriptCore engine

A [JavaScript engine](https://docs.expo.dev/more/glossary-of-terms#javascript-engine) developed by Apple and built-in to [iOS](https://docs.expo.dev/more/glossary-of-terms#ios). React Native for [Android](https://docs.expo.dev/more/glossary-of-terms#android) also can use a version of JavaScriptCore for parity. Debugging with JavaScriptCore is less sophisticated than V8 or [Hermes](https://docs.expo.dev/more/glossary-of-terms#hermes-engine) which implement the [Chrome DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/).

### Linking

Linking can mean [deep linking into apps similar to how you link to websites on the web](https://docs.expo.dev/linking/overview) or [autolinking](https://docs.expo.dev/more/glossary-of-terms#autolinking).

### Local Expo CLI

The package `@expo/cli` is installed with the `expo` package. This is sometimes referred to as the "Versioned Expo CLI" because it is installed inside the user's project as opposed to the now deprecated `expo-cli` which was installed globally.

### Manifest

An Expo app manifest is similar to a [web app manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest). It provides information that Expo Go needs to know how to run the app and other relevant data.

### Meta

Formerly Facebook, Meta is the group that develops [React Native](https://docs.expo.dev/more/glossary-of-terms#react-native), [Metro Bundler](https://docs.expo.dev/more/glossary-of-terms#metro-bundler), [Hermes Engine](https://docs.expo.dev/more/glossary-of-terms#hermes-engine), [Yoga](https://docs.expo.dev/more/glossary-of-terms#yoga) and more. The Expo team collaborates with Meta to deliver the best possible developer experience.

### Metro bundler

The bundler used for converting JavaScript files and assets into a format that runs on a [native runtime](https://docs.expo.dev/more/glossary-of-terms#native-runtime). This bundler is maintained by [Meta](https://docs.expo.dev/more/glossary-of-terms#meta) and used for React Native (including web) apps. For more information, see [Metro documentation](https://metrobundler.dev/).

### Metro Config

The metro.config.js file used to configure [Metro bundler](https://docs.expo.dev/more/glossary-of-terms#metro-bundler). This should extend the package `@expo/metro-config` when using [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli). For more information, see [Customizing Metro](https://docs.expo.dev/guides/customizing-metro).

### Monorepo

A project that has multiple sub-projects which are all linked together via the package manager. A monorepo is a great way to maintain codebase for a cross-platform app.

### Native directory

The React Native ecosystem has thousands of libraries. Without a purpose-built tool, it's hard to know what the libraries are, to search through them, to determine the quality, try them out, and filter out the libraries that won't work for your project (some don't work with Expo, some don't work with Android or iOS). [React Native Directory](https://reactnative.directory/) is a website that aims to solve this problem, we recommend you use it to find packages to use in your projects.

### Native module

A module written in native code that exposes native platform functionality to the JavaScript engine via the JS global. This functionality is usually accessed via `import { NativeModules } from 'react-native';`.

### Native runtime

A native application containing a [JavaScript engine](https://docs.expo.dev/more/glossary-of-terms#javascript-engine), and is capable of running a React application. This includes [Expo Go](https://docs.expo.dev/more/glossary-of-terms#expo-go), [development build](https://docs.expo.dev/more/glossary-of-terms#development-build), [standalone apps](https://docs.expo.dev/more/glossary-of-terms#standalone-app), and even web browsers like Chrome.

### npm

[npm](https://www.npmjs.com/) is a package manager for JavaScript and the registry where the packages are stored. An alternative package manager, which we use internally at Expo, is [Yarn](https://docs.expo.dev/more/glossary-of-terms#yarn).

### Package manager

Automates the process of installing, upgrading, configuring, and removing libraries, also known as dependencies, from your project. See [npm](https://docs.expo.dev/more/glossary-of-terms#npm) and [Yarn](https://docs.expo.dev/more/glossary-of-terms#yarn).

### Platform extensions

Platform extensions are a feature of the [Metro bundler](https://docs.expo.dev/more/glossary-of-terms#metro-bundler) which enables users to substitute files on a per-platform basis given a specific filename. For example, if a project has a .index.js file and a .index.ios.js file, then the index.ios.js will be used when bundling for iOS, and the index.js file will be used when bundling for all other platforms.

By default, platform extensions are resolved in `@expo/metro-config` using the following formula:

*   Android: \*.android.js, \*.native.js, \*.js
*   iOS: \*.ios.js, \*.native.js, \*.js
*   Web: \*.web.js, \*.js

### Prebuild

The process of generating the temporary native android and ios directories for a React Native project based on the [app config](https://docs.expo.dev/more/glossary-of-terms#app-config). This process is performed by running the command `npx expo prebuild` from [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli) in a project directory.

See [Prebuild template](https://docs.expo.dev/more/glossary-of-terms#prebuild-template) and [Autolinking](https://docs.expo.dev/more/glossary-of-terms#autolinking) for further information.

### Prebuild template

The React Native project template is used as the first step of [Prebuilding](https://docs.expo.dev/more/glossary-of-terms#prebuild). This template is versioned with the [Expo SDK](https://docs.expo.dev/more/glossary-of-terms#expo-sdk), and the template is chosen based on the installed version of `expo` in a project. After the template is cloned, `npx expo prebuild` evaluates the [app config](https://docs.expo.dev/more/glossary-of-terms#app-config) and runs the [Config mods](https://docs.expo.dev/more/glossary-of-terms#config-mods) which modify various files in the template.

Although the template can be changed by using the `npx expo prebuild --template /path/to/template` flag, the default prebuild template contains important initial defaults that the `npx expo prebuild` command makes assumptions about.

The default template currently lives at [`expo-template-bare-minimum`](https://github.com/expo/expo/tree/main/templates/expo-template-bare-minimum).

### Publish

We use the word "publish" as a synonym for "deploy". When you publish an app, it becomes available at a persistent URL from Expo Go, or in the case of [Standalone apps](https://docs.expo.dev/more/glossary-of-terms#standalone-app), it updates the app.

### React Native

[React Native](https://reactnative.dev/) lets you build mobile apps using only JavaScript. It uses the same design as React, letting you compose a rich mobile UI from declarative components.

### React Native Web

A high-performing abstraction on top of `react-dom` that enables core primitives from [React Native](https://docs.expo.dev/more/glossary-of-terms#react-native) to run in the browser. React Native for web (RNW) was developed at X and is currently used for their [main website](https://x.com/). [Expo SDK](https://docs.expo.dev/more/glossary-of-terms#expo-sdk) and [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli) have first-class support for RNW.

### React Navigation

The preferred navigation library for React Native apps, developed and sponsored by the Expo team.

### Remote Debugging

Remote Debugging is a deprecated way of debugging React Native apps. A better alternative today is to use [Hermes](https://docs.expo.dev/more/glossary-of-terms#hermes-engine), as you can connect React Native DevTools to it.

Also known as Async Chrome Debugging, it was an experimental system for debugging React Native apps. The system works by executing the application JavaScript in a Chrome tab's web worker, then sending native commands over a websocket to the native device.

### Simulator

An emulator for iOS devices that you can run on macOS (or in [Snack](https://docs.expo.dev/more/glossary-of-terms#snack)) to work on your app without having to have a physical device handy.

### Slug

`slug` in the \[app config\]((#appjson) is a URL-friendly name for your project. It is unique across your Expo account.

### Snack

[Snack](https://snack.expo.dev/) is an in-browser development environment where you can build Expo [experiences](https://docs.expo.dev/more/glossary-of-terms#experience) without installing any tools on your phone or computer.

### Software Mansion

A development agency in KrakÃ³w, Poland. Maintainers of `react-native-gesture-handler`, `react-native-screens`, and `react-native-reanimated`. The platform team at Expo is composed of a number of contractors from Software Mansion. All of Software Mansion's core React Native libraries are supported in [Expo Go](https://docs.expo.dev/more/glossary-of-terms#expo-go).

### Standalone app

Synonymous with "Production build". An application binary that can be submitted to the Google Play Store or Apple App Store. For more information, see [Build your project for app stores](https://docs.expo.dev/deploy/build-project) or [Run builds locally or on your own infrastructure](https://docs.expo.dev/build-reference/local-builds).

### Store Config

The store.config.json file used to configure [EAS Metadata](https://docs.expo.dev/more/glossary-of-terms#eas-metadata). This file can be generated from an existing App Store entry using `eas metadata:pull`.

### Sweet API

The Swift and Kotlin API for writing React Native modules. This API is provided by the library `expo-modules-core` which is shipped with the `expo` package. For more information, see [Module API](https://docs.expo.dev/modules/module-api).

### TypeScript

TypeScript is a strongly typed programming language that builds on JavaScript, giving you better tooling at any scale. The Expo SDK is written in TypeScript, and we highly recommend using it. For more information, see our [TypeScript guide](https://docs.expo.dev/guides/typescript).

### Updates

Traditionally, apps for Android and iOS are updated by submitting an updated binary to the App and Play stores. Updates allow you to push an update to your app without the overhead of submitting a new release to the stores. For more information, see [Publishing](https://docs.expo.dev/eas-update/introduction) documentation.

### VS Code Expo Tools

The VS Code extension for improving the developer experience of working with app config files. This extension provides autocomplete and intellisense for the [app config](https://docs.expo.dev/more/glossary-of-terms#app-config), [Store Config](https://docs.expo.dev/more/glossary-of-terms#store-config), [Expo Module Config](https://docs.expo.dev/more/glossary-of-terms#expo-module-config), and [EAS Config](https://docs.expo.dev/more/glossary-of-terms#eas-config). For more information, see the [VS Code Expo Tools extension](https://marketplace.visualstudio.com/items?itemName=expo.vscode-expo-tools).

### Watchman

The file watcher used by [Metro](https://docs.expo.dev/more/glossary-of-terms#metro-bundler) to perform hot reloads during development. Watchman contains native code and may cause issues when installed globally. Watchman is maintained by [Meta](https://docs.expo.dev/more/glossary-of-terms#meta).

### webpack

The deprecated bundler used by [Expo CLI](https://docs.expo.dev/more/glossary-of-terms#expo-cli) for developing [`react-native-web`](https://docs.expo.dev/more/glossary-of-terms#react-native-web) apps.

### Yarn

A package manager for JavaScript. For more information, see [Yarn](https://yarnpkg.com/) documentation.

### Yarn workspaces

The [monorepo](https://docs.expo.dev/more/glossary-of-terms#monorepo) solution we recommend for Expo users. See [Working with Monorepos](https://docs.expo.dev/guides/monorepos) for more information on how to configure Yarn workspaces.

### Yoga

A native cross-platform library used by React Native internally to provide [CSS FlexBox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox) support to native views. React Native styles are passed to Yoga to lay out and style elements on the screen. For more information, see [Yoga](https://github.com/facebook/yoga) documentation.

---

# qr-codes

Reference for the QR code generator at qr.expo.dev.

[](https://github.com/expo/expo/edit/main/docs/pages/more/qr-codes.mdx)

qr.expo.dev is a cloud function that generates Expo-branded QR codes. This function creates QR codes for [EAS Update](https://docs.expo.dev/eas-update/introduction), which are used to preview updates in [development builds](https://docs.expo.dev/develop/development-builds/introduction) and Expo Go.

For example, if you and your team have a development build, and you'd like to load the latest update on a specific build's channel, you could go to the following endpoint to generate a QR code:

```
https://qr.expo.dev/eas-update?projectId=your-project-id&runtimeVersion=your-runtime-version&channel=your-channel
```

Which would produce the following QR code SVG:

This QR code represents the following URL:

```
exp+your-slug://expo-development-client/?url=https://u.expo.dev/your-project-id?runtime-version=your-runtime-version&channel-name=your-channel
```

This URL will deep link into a development build and instruct it to fetch the latest update on the specified channel.

> If sharing the URL is more convenient, you can request the URL directly by adding `format=url` to the query parameters.

## General

The following parameters apply to the `/eas-update` endpoint.

### Base query parameters

The following base query parameters can be included with any request to `/eas-update`.

### Update by device traits

Preview and production builds make requests to the EAS Update service with `runtimeVersion` and `channel` properties. You can emulate this behavior with the following query parameters:

#### Example

```
https://qr.expo.dev/eas-update?projectId=your-project-id&runtimeVersion=your-runtime-version&channel=your-channel
```

### Update by ID

You can create a QR code for a specific update given its platform-specific ID.

#### Example

```
https://qr.expo.dev/eas-update?updateId=your-update-id
```

### Update by group ID

You can create a QR code for an update group given the update's group ID.

#### Example

```
https://qr.expo.dev/eas-update?projectId=your-project-id&groupId=your-update-id
```

### Update by branch ID

You can create a QR code with a branch's ID, which will return the latest update available on that branch.

#### Example

```
https://qr.expo.dev/eas-update?projectId=your-project-id&branchId=your-branch-id
```

### Update by channel ID

You can create a QR code with a channel's ID, which will return the latest update available on the branch or branches that are mapped to that channel.

#### Example

```
https://qr.expo.dev/eas-update?projectId=your-project-id&channelId=your-channel-id
```


---

# expo-sfv-0

[](https://github.com/expo/expo/edit/main/docs/pages/technical-specs/expo-sfv-0.mdx)

[

Edit this page

](https://github.com/expo/expo/edit/main/docs/pages/technical-specs/expo-sfv-0.mdx)

Version 0

[

Edit this page

](https://github.com/expo/expo/edit/main/docs/pages/technical-specs/expo-sfv-0.mdx)

Structured Field Values for HTTP, [IETF RFC 8941](https://tools.ietf.org/html/rfc8941), is a proposal to formalize header syntax and facilitate nested data.

Since it is still a work in progress, Expo maintains a custom version that only implements the following subset of the protocol defined in [IETF RFC 8941](https://tools.ietf.org/html/rfc8941):

*   All key values
*   String, integer, and decimal items
*   Dictionaries

---

# expo-updates-1

Version 1

[](https://github.com/expo/expo/edit/main/docs/pages/technical-specs/expo-updates-1.mdx)

## Introduction

This is the specification for Expo Updates, a protocol for delivering updates to Expo apps running on multiple platforms.

### Conformance

Conforming servers and client libraries must fulfill all normative requirements. Conformance requirements are described in this document by both descriptive assertions and key words with clearly defined meanings.

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in the normative portions of this document are to be interpreted as described in [IETF RFC 2119](https://tools.ietf.org/html/rfc2119). These key words may appear in lowercase and still retain their meaning unless explicitly declared as non-normative.

A conforming implementation of this protocol MAY provide additional functionality, but MUST NOT where explicitly disallowed or would otherwise result in non-conformance. Where relevant, unknown fields should be allowed and ignored by conforming clients.

### Overview

Conforming servers and client libraries MUST follow the HTTP spec as described in [RFC 7231](https://tools.ietf.org/html/rfc7231) as well as the more precise guidance described in this spec.

*   An _update_ is defined as a [_manifest_](https://docs.expo.dev/technical-specs/expo-updates-1#manifest-body) together with the assets referenced inside the manifest.
*   A [_directive_](https://docs.expo.dev/technical-specs/expo-updates-1#directive-body) is defined as a message from the server that instructs clients to perform an action.

Expo Updates is a protocol for assembling and delivering updates and directives to clients.

The primary audiences of this spec are Expo Application Services and organizations that wish to manage their own update server to satisfy internal requirements.

## Client

An app running a conformant Expo Updates client library MUST load the most recent _update_ saved in the client library's update database, possibly after filtering by the contents of the update's manifest [_metadata_](https://docs.expo.dev/technical-specs/expo-updates-1#manifest-body).

The following describes how a conformant Expo Updates client library MUST retrieve a new update from a conformant server:

1.  The client library MUST make a [request](https://docs.expo.dev/technical-specs/expo-updates-1#request) for the most recent update and directive, with constraints specified in the headers.
2.  If a [response](https://docs.expo.dev/technical-specs/expo-updates-1#response) is received, the client library MUST process its contents:
```
*   For a response containing an _update_, the client library SHALL proceed to make additional requests to download and store any new assets specified in the manifest. The manifest and assets together are considered a new _update_. The client library will edit its local state to reflect that a new update has been added to the local storage. It will also update the local state with the new `expo-manifest-filters` and `expo-server-defined-headers` found in the response [headers](https://docs.expo.dev/technical-specs/expo-updates-1#manifest-response-headers).
*   For a response containing a _directive_, the client library will consume the directive depending on the directive type and edit its local state accordingly.
```

## Request

A conformant client library MUST make a GET request with the headers:

1.  `expo-protocol-version: 1`, to specify version 1 of this Expo Updates specification.
2.  `expo-platform`, to specify the platform type the client is running on.
```
*   iOS MUST be `expo-platform: ios`.
*   Android MUST be `expo-platform: android`.
*   If it is not one of these platforms, the server SHOULD return a 400 or a 404
```
3.  `expo-runtime-version` MUST be a runtime version compatible with the client. A runtime version stipulates the native code setup a client is running. It should be set when the client is built. For example, in an iOS client, the value may be set in a plist file.
4.  Any headers stipulated by a previous responses' [server defined headers](https://docs.expo.dev/technical-specs/expo-updates-1#response).

A conformant client library MAY send one of `accept: application/expo+json`, `accept: application/json`, or `accept: multipart/mixed` based on the [supported response structures](https://docs.expo.dev/technical-specs/expo-updates-1#response), though it SHOULD send `accept: application/expo+json, application/json, multipart/mixed`. A conformant client library MAY express preference using "q" parameters as specified in [RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.1), which default to `1`.

A conformant client library configured to perform [code signing](https://docs.expo.dev/technical-specs/expo-updates-1#code-signing) verification MUST send a `expo-expect-signature` header to indicate that it expects the conformant server to include the `expo-signature` header in the manifest response. `expo-expect-signature` is an [Expo SFV](https://docs.expo.dev/technical-specs/expo-sfv-0) dictionary which MAY contain any of the following key value pairs:

*   `sig` SHOULD contain the boolean `true` to indicate that it requires a conformant server to respond with the signature in the `sig` key.
*   `keyid` SHOULD contain the keyId of the public key the client will use to verify the signature
*   `alg` SHOULD contain the algorithm the client will use to verify the signature

Example:

```
expo-protocol-version: 1
accept: application/expo+json;q=0.9, application/json;q=0.8, multipart/mixed
expo-platform: *
expo-runtime-version: *
expo-expect-signature: sig, keyid="root", alg="rsa-v1_5-sha256"
```

## Response

A conformant server MUST return a response structured in at least one of the two following response structures, MAY support either or both response structures, and when an unsupported response structure is requested the server SHOULD respond with an HTTP `406` error status. A server that wishes to respond with an incompatible response for the requested protocol version SHOULD also respond with an HTTP `406` error status instead.

*   For a response with `content-type: application/json` or `content-type: application/expo+json`, the [common response headers](https://docs.expo.dev/technical-specs/expo-updates-1#common-response-headers) and [other response headers](https://docs.expo.dev/technical-specs/expo-updates-1#other-response-headers) MUST be sent in the response headers and the [manifest body](https://docs.expo.dev/technical-specs/expo-updates-1#manifest-body) MUST be sent in the response body. This format of response does not support multiple response parts and therefore does not support _directives_, and SHOULD respond with an HTTP `406` error status when the most recent response to be served is not an _update_.
*   For a response with `content-type: multipart/mixed`, the response MUST be structured as specified in the [multipart response](https://docs.expo.dev/technical-specs/expo-updates-1#multipart-response) section.
*   A [multipart response](https://docs.expo.dev/technical-specs/expo-updates-1#multipart-response) with no parts MAY respond with an HTTP `204` status and no content, and thus no `content-type` response header.

The choice of update and headers are dependent on the values of the request headers. A conformant server MUST respond with the most recent update, ordered by creation time, satisfying all parameters and constraints imposed by the [request headers](https://docs.expo.dev/technical-specs/expo-updates-1#request). The server MAY use any properties of the request like its headers and source IP address to choose amongst several updates that all satisfy the request's constraints.

### Common response headers

```
expo-protocol-version: 1
expo-sfv-version: 0
expo-manifest-filters: &lt;expo-sfv&gt;
expo-server-defined-headers: &lt;expo-sfv&gt;
cache-control: *
content-type: *
```

*   `expo-protocol-version` describes the version of the protocol defined in this spec and MUST be `1`.
*   `expo-sfv-version` MUST be `0`.
*   `expo-manifest-filters` is an [Expo SFV](https://docs.expo.dev/technical-specs/expo-sfv-0) dictionary. It is used to filter updates stored by the client library by the `metadata` attribute found in the [manifest](https://docs.expo.dev/technical-specs/expo-updates-1#manifest-body). If a field is mentioned in the filter, the corresponding field in the metadata must either be missing or equal for the update to be included. The client library MUST store the manifest filters until it is overwritten by a newer response.
*   `expo-server-defined-headers` is an [Expo SFV](https://docs.expo.dev/technical-specs/expo-sfv-0) dictionary. It defines headers that a client library MUST store until overwritten by a newer dictionary, and they MUST be included in every subsequent [update request](https://docs.expo.dev/technical-specs/expo-updates-1#request).
*   `cache-control` MUST be set to an appropriately short period of time. A value of `cache-control: private, max-age=0` is recommended to ensure the newest manifest is returned. Setting longer cache ages could result in stale updates.
*   `content-type` MUST be determined by _proactive negotiation_ as defined in [RFC 7231](https://tools.ietf.org/html/rfc7231#section-3.4.1). Since the client library is [required](https://docs.expo.dev/technical-specs/expo-updates-1#request) to send an `accept` header with each manifest request, this will always be either `application/expo+json`, `application/json`; otherwise the request would return a `406` error.

### Other response headers

```
expo-signature: *
```

*   `expo-signature` SHOULD contain the signature of the manifest to be used during the validation step of [code signing](https://docs.expo.dev/technical-specs/expo-updates-1#code-signing) if the request for the manifest contained the `expo-expect-signature` header. This is an [Expo SFV](https://docs.expo.dev/technical-specs/expo-sfv-0) dictionary which MAY contain any of the following key value pairs:
```
*   `sig` MUST contain the signature of the manifest. The name of this field matches that of `expo-expect-signature`.
*   `keyid` MAY contain the keyId of the key the server used to sign the response. The client SHOULD use the certificate that matches this `keyid` to verify the signature.
*   `alg` MAY contain the algorithm the server used to sign the response. The client SHOULD use this field only if it matches the algorithm defined for the certificate matching `keyid`.
```

### Multipart response

An update response of this format is defined by the `multipart/mixed` MIME type as defined by [RFC 2046](https://tools.ietf.org/html/rfc2046#section-5.1).

Headers for this response format are the [common response headers](https://docs.expo.dev/technical-specs/expo-updates-1#common-response-headers), with the following exceptions:

*   `content-type` SHOULD have a `multipart/mixed` value as defined by [RFC 2046](https://tools.ietf.org/html/rfc2046#section-5.1)

Part order is not strict. A multipart response with no parts (zero-length body) should be considered a no-op (no updates or directives available), though headers for the response SHOULD be sent nevertheless and processed by the client.

Each part is defined as follows:

1.  OPTIONAL `"manifest"` part:
```
*   MUST have part header `content-disposition: form-data; name="manifest"`. The first parameter (`form-data`) does not need to be `form-data`, but the `name` parameter must have `manifest` as a value.
*   MUST have part header `content-type: application/json` or `application/expo+json`.
*   SHOULD have part header `expo-signature` as defined in [other response headers](https://docs.expo.dev/technical-specs/expo-updates-1#other-response-headers) if code signing is being used.
*   The [manifest body](https://docs.expo.dev/technical-specs/expo-updates-1#manifest-body) MUST be sent in the part body.
```
2.  OPTIONAL `"extensions"` part:
```
*   MUST have part header `content-disposition: form-data; name="extensions"`. The first parameter (`form-data`) does not need to be `form-data`, but the `name` parameter must have `extensions` as a value.
*   MUST have part header `content-type: application/json`.
*   The [extensions-body](https://docs.expo.dev/technical-specs/expo-updates-1#extensions-body) MUST be sent in the part body.
```
3.  OPTIONAL `"directive"` part:
```
*   MUST have part header `content-disposition: form-data; name="directive"`. The first parameter (`form-data`) does not need to be `form-data`, but the `name` parameter must have `directive` as a value.
*   MUST have part header `content-type: application/json` or `application/expo+json`.
*   SHOULD have part header `expo-signature` as defined in [other response headers](https://docs.expo.dev/technical-specs/expo-updates-1#other-response-headers) if code signing is being used.
*   The [directive body](https://docs.expo.dev/technical-specs/expo-updates-1#directive-body) MUST be sent in the part body.
```

### Manifest body

Defined as JSON conforming to both the following `Manifest` definition expressed in [TypeScript](https://www.typescriptlang.org/) and the detailed descriptions for each field:

```
type Manifest = {
  id: string;
  createdAt: string;
  runtimeVersion: string;
  launchAsset: Asset;
  assets: Asset[];
  metadata: { [key: string]: string };
  extra: { [key: string]: any };
};

type Asset = {
  hash?: string;
  key: string;
  contentType: string;
  fileExtension?: string;
  url: string;
};
```

*   `id`: The ID MUST uniquely specify the manifest and MUST be a UUID.
```

```
*   `createdAt`: The date and time at which the update was created is essential as the client library selects the most recent update (subject to any constraints supplied by the `expo-manifest-filters` header). The datetime should be formatted according to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
```

```
*   `runtimeVersion`: Can be any string defined by the developer. It stipulates what native code setup is required to run the associated update.
```

```
*   `launchAsset`: A special asset that is the entry point of the application code. The `fileExtension` field will be ignored for this asset and SHOULD be omitted.
```

```
*   `assets`: An array of assets used by the update bundle, such as JavaScript, pictures, and fonts. All assets (including the `launchAsset`) should be downloaded to disk before executing the update, and a mapping of asset `key`s to locations on disk should be provided to application code.
```

```
*   Properties of each asset object:
```
*   `hash`: Base64URL-encoded SHA-256 hash of the file to guarantee integrity. Base64URL encoding is defined by [IETF RFC 4648](https://datatracker.ietf.org/doc/html/rfc4648#section-5).
*   `key`: Key used to reference this asset from the update's application code. This key, for example, may be generated by a separate build step that processes the application code, such as a bundler.
*   `contentType`: The MIME type of the file as defined by [RFC 2045](https://tools.ietf.org/html/rfc2045). For example, `application/javascript`, `image/jpeg`.
*   `fileExtension`: The suggested extension to use when a file is saved on a client. Some platforms, such as iOS, require certain file types to be saved with an extension. The extension MUST be prefixed with a `.`. For example, .jpeg. In some cases, such as the launchAsset, this field will be ignored in favor of a locally determined extension. If the field is omitted and there is no locally stipulated extension, the asset will be saved without an extension. For example, `./filename` with no `.` at the end. A conforming client SHOULD prefix a file extension with a `.` if a file extension is not empty and missing the `.` prefix.
*   `url`: Location at which the file may be fetched.
```
*   `metadata`: The metadata associated with an update. It is a string-valued dictionary. The server MAY send back anything it wishes to be used for filtering the updates. The metadata MUST pass the filter defined in the accompanying `expo-manifest-filters` header.
```

```
*   `extra`: For storage of optional "extra" information such as third-party configuration. For example, if the update is hosted on Expo Application Services (EAS), the EAS project ID may be included:
```
"extra": {
      "eas": {
        "projectId": "00000000-0000-0000-0000-000000000000"
      }
    }
```

### Extensions body

Defined as JSON conforming to both the following `Extensions` definition expressed in [TypeScript](https://www.typescriptlang.org/) and the detailed descriptions for each field:

```
type Extensions = {
  assetRequestHeaders: ExpoAssetHeaderDictionary;
  ...
}

type ExpoAssetHeaderDictionary = {
  [assetKey: string]: {
    [headerName: string]: string,
  };
}
```

*   `assetRequestHeaders`: MAY contain a dictionary of header (key, value) pairs to include with asset requests. Key and value MUST both be strings.

### Directive body

Defined as JSON conforming to both the following `Directive` definition expressed in [TypeScript](https://www.typescriptlang.org/) and the detailed descriptions for each field:

```
type Directive = {
  type: string;
  parameters?: { [key: string]: any };
  extra?: { [key: string]: any };
};
```

*   `type`: The type of directive.
*   `parameters`: MAY contain any extra information specific to the `type`.
*   `extra`: For storage of optional "extra" information such as third-party information. For example, if the update is hosted on Expo Application Services (EAS), the EAS project ID may be included.

A conformant client library and server MAY specify and implement directive types specific to the needs of the application. For example, Expo Application Services makes use of one type thus far, `rollBackToEmbedded`, which directs the expo-updates library to use the update embedded in the host application instead of any other downloaded updates.

## Asset request

A conformant client library MUST make a GET request to the asset URLs specified by the manifest. The client library SHOULD include a header accepting the asset's content type as specified in the manifest. Additionally, the client library SHOULD specify the compression encoding the client library is capable of handling.

Example headers:

```
accept: image/jpeg, */*
accept-encoding: br, gzip
```

A conformant client library MUST also include any header (key, value) pairs included in [`assetRequestHeaders`](https://docs.expo.dev/technical-specs/expo-updates-1#manifest-extensions) for this asset key.

## Asset response

An asset located at a particular URL MUST NOT be changed or removed since client libraries may fetch assets for any update at any time. A conformant client MUST verify that the base64url-encoded SHA-256 hash of the asset matches the `hash` field for the asset from the manifest.

### Asset response headers

The asset MUST be encoded using a compression format that the client supports according to the request's `accept-encoding` header. The server MAY serve uncompressed assets. The response MUST include a `content-type` header with the MIME type of the asset. For example:

```
content-encoding: br
content-type: application/javascript
```

An asset is RECOMMENDED to be served with a `cache-control` header set to a long duration as an asset located at a given URL must not change. For example:

```
cache-control: public, max-age=31536000, immutable
```

### Compression

Assets SHOULD be capable of being served with [Gzip](https://www.gnu.org/software/gzip/) and [Brotli](https://github.com/google/brotli) compression.

## Code signing

Expo Updates supports code signing the manifest and directive bodies. Code signing the manifest also transitively signs the assets since their hashes are present in the manifest and verified by a conformant client. A conformant client MAY request the manifest or directive be signed using a private key, and then MUST verify the signature of the manifest or directive using the corresponding code signing certificate before it is used or any corresponding manifest assets are downloaded. The client MUST verify that the signing certificate is either a self-signed, trusted root certificate or is in a certificate chain signed by a trusted root certificate. In either case, the root certificate MUST be embedded in the application or device's operating system.

---

# app

A reference of available properties in Expo app config.

The following is a list of properties that are available for you under the `"expo"` key in app.json or app.config.json. These properties can be passed to the top level object of app.config.js or app.config.ts.

`name`

Type: `string`

The name of your app as it appears both within Expo Go and on your home screen as a standalone app.

Bare Workflow

`description`

Type: `string`

A short description of what your app is and why it is great.

`slug`

Type: `string`

A URL-friendly name for your project that is unique across your account.

`owner`

Type: `string`

The name of the Expo account that owns the project. This is useful for teams collaborating on a project. If not provided, the owner defaults to the username of the current user.

`currentFullName`

Type: `string`

The auto generated Expo account name and slug used for display purposes. It is not meant to be set directly. Formatted like `@username/slug`. When unauthenticated, the username is `@anonymous`. For published projects, this value may change when a project is transferred between accounts or renamed.

`originalFullName`

Type: `string`

The auto generated Expo account name and slug used for services like Notifications and AuthSession proxy. It is not meant to be set directly. Formatted like `@username/slug`. When unauthenticated, the username is `@anonymous`. For published projects, this value will not change when a project is transferred between accounts or renamed.

`sdkVersion`

Type: `string`

The Expo sdkVersion to run the project on. This should line up with the version specified in your package.json.

`runtimeVersion`

One of types:

*   `string` matching the following pattern: `^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$`
*   `string` matching the following pattern: `^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$`
*   An `object` with the following properties:
```
`policy`

Type: `enum`âPath: `runtimeVersion.policy`

Valid values: `nativeVersion`, `sdkVersion`, `appVersion`, `fingerprint`.
```

Property indicating compatibility between a build's native code and an OTA update.

`version`

Type: `string`

Your app version. In addition to this field, you'll also use `ios.buildNumber` and `android.versionCode` â read more about how to version your app [here](https://docs.expo.dev/distribution/app-stores/#versioning-your-app). On iOS this corresponds to `CFBundleShortVersionString`, and on Android, this corresponds to `versionName`. The required format can be found [here](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring).

Bare Workflow

`platforms`

Type: `array`

Platforms that your project explicitly supports. If not specified, it defaults to `["ios", "android"]`.

Example

`[ "ios", "android", "web" ]`

`githubUrl`

Type: `string`

If you would like to share the source code of your app on Github, enter the URL for the repository here and it will be linked to from your Expo project page.

Example

`"https://github.com/expo/expo"`

`orientation`

Type: `enum`

Locks your app to a specific orientation with portrait or landscape. Defaults to no lock. Valid values: `default`, `portrait`, `landscape`

`userInterfaceStyle`

Type: `enum`

Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to `light`. Requires `expo-system-ui` be installed in your project to work on Android.

`backgroundColor`

Type: `string`

The background color for your app, behind any of your React views. This is also known as the root view background color. Requires `expo-system-ui` be installed in your project to work on iOS.

6 character long hex color string, for example, `'#000000'`. Default is white: `'#ffffff'`

`primaryColor`

Type: `string`

On Android, this will determine the color of your app in the multitasker. Currently this is not used on iOS, but it may be used for other purposes in the future.

6 character long hex color string, for example, `'#000000'`

`icon`

Type: `string`

Local path or remote URL to an image to use for your app's icon. We recommend that you use a 1024x1024 png file. This icon will appear on the home screen and within the Expo Go app.

Bare Workflow

`notification`

Type: `object`

Configuration for remote (push) notifications.

`icon`

Type: `string`âPath: `notification.icon`

(Android only) Local path or remote URL to an image to use as the icon for push notifications. 96x96 png grayscale with transparency. We recommend following [Google's design guidelines](https://material.io/design/iconography/product-icons.html#design-principles). If not provided, defaults to your app icon.

`color`

Type: `string`âPath: `notification.color`

(Android only) Tint color for the push notification image when it appears in the notification tray. Defaults to `#ffffff`

6 character long hex color string, for example, `'#000000'`

`iosDisplayInForeground`

Type: `boolean`âPath: `notification.iosDisplayInForeground`

Whether or not to display notifications when the app is in the foreground on iOS. `_displayInForeground` option in the individual push notification message overrides this option. [Learn more.](https://docs.expo.dev/push-notifications/receiving-notifications/#foreground-notification-behavior) Defaults to `false`.

`androidMode`

Type: `enum`âPath: `notification.androidMode`

Show each push notification individually (`default`) or collapse into one (`collapse`).

`androidCollapsedTitle`

Type: `string`âPath: `notification.androidCollapsedTitle`

If `androidMode` is set to `collapse`, this title is used for the collapsed notification message. For example, `'#{unread_notifications} new interactions'`.

`androidStatusBar`

Type: `object`

Configuration for the status bar on Android. For more details please navigate to [Configuring StatusBar](https://docs.expo.dev/guides/configuring-statusbar/).

`barStyle`

Type: `enum`âPath: `androidStatusBar.barStyle`

Configures the status bar icons to have a light or dark color. Valid values: `light-content`, `dark-content`. Defaults to `dark-content`

`backgroundColor`

Type: `string`âPath: `androidStatusBar.backgroundColor`

Specifies the background color of the status bar. Defaults to `#00000000` (transparent) for `dark-content` bar style and `#00000088` (semi-transparent black) for `light-content` bar style

6 character long hex color string `'#RRGGBB'`, for example, `'#000000'` for black. Or 8 character long hex color string `'#RRGGBBAA'`, for example, `'#00000088'` for semi-transparent black.

`hidden`

Type: `boolean`âPath: `androidStatusBar.hidden`

Instructs the system whether the status bar should be visible or not. Defaults to `false`

`translucent`

Type: `boolean`âPath: `androidStatusBar.translucent`

When false, the system status bar pushes the content of your app down (similar to `position: relative`). When true, the status bar floats above the content in your app (similar to `position: absolute`). Defaults to `true` to match the iOS status bar behavior (which can only float above content). Explicitly setting this property to `true` will add `android:windowTranslucentStatus` to `styles.xml` and may cause unexpected keyboard behavior on Android when using the `softwareKeyboardLayoutMode` set to `resize`. In this case you will have to use `KeyboardAvoidingView` to manage the keyboard layout.

`androidNavigationBar`

Type: `object`

Configuration for the bottom navigation bar on Android. Can be used to configure the `expo-navigation-bar` module in EAS Build.

`visible`

Type: `enum`âPath: `androidNavigationBar.visible`

Determines how and when the navigation bar is shown. [Learn more](https://developer.android.com/training/system-ui/immersive). Requires `expo-navigation-bar` be installed in your project. Valid values: `leanback`, `immersive`, `sticky-immersive`

`leanback` results in the navigation bar being hidden until the first touch gesture is registered.

`immersive` results in the navigation bar being hidden until the user swipes up from the edge where the navigation bar is hidden.

`sticky-immersive` is identical to `'immersive'` except that the navigation bar will be semi-transparent and will be hidden again after a short period of time.

`barStyle`

Type: `enum`âPath: `androidNavigationBar.barStyle`

Configure the navigation bar icons to have a light or dark color. Supported on Android Oreo and newer. Valid values: `'light-content'`, `'dark-content'`

`backgroundColor`

Type: `string`âPath: `androidNavigationBar.backgroundColor`

Specifies the background color of the navigation bar.

6 character long hex color string, for example, `'#000000'`

`developmentClient`

Type: `object`

Settings that apply specifically to running this app in a development client

`silentLaunch`

Type: `boolean`âPath: `developmentClient.silentLaunch`

If true, the app will launch in a development client with no additional dialogs or progress indicators, just like in a standalone app.

`scheme`

One of types:

*   `string` matching the following pattern: `^[a-z][a-z0-9+.-]*$`
`{ "type": "array", "items": { "type": "string", "pattern": "^[a-z][a-z0-9+.-]*$" } }`

URL scheme(s) to link into your app. For example, if we set this to `'demo'`, then demo:// URLs would open your app when tapped. This is a build-time configuration, it has no effect in Expo Go.

String beginning with a lowercase letter followed by any combination of lowercase letters, digits, "+", "." or "-"

Bare Workflow

`extra`

Type: `object`

Any extra fields you want to pass to your experience. Values are accessible via `Constants.expoConfig.extra` ([Learn more](https://docs.expo.dev/versions/latest/sdk/constants/#constantsmanifest))

`updates`

Type: `object`

Configuration for the expo-updates library

`enabled`

Type: `boolean`âPath: `updates.enabled`

Whether the updates system will run. Defaults to true. If set to false, builds will only use code and assets bundled at time of build.

`checkAutomatically`

Type: `enum`âPath: `updates.checkAutomatically`

By default, expo-updates will check for updates every time the app is loaded. Set this to `ON_ERROR_RECOVERY` to disable automatic checking unless recovering from an error. Set this to `NEVER` to disable automatic checking. Valid values: `ON_LOAD` (default value), `ON_ERROR_RECOVERY`, `WIFI_ONLY`, `NEVER`

`useEmbeddedUpdate`

Type: `boolean`âPath: `updates.useEmbeddedUpdate`

Whether to load the embedded update. Defaults to true. If set to false, an update will be fetched at launch. When set to false, ensure that `checkAutomatically` is set to `ON_LOAD` and `fallbackToCacheTimeout` is large enough for the initial remote update to download. This should not be used in production.

`fallbackToCacheTimeout`

Type: `number`âPath: `updates.fallbackToCacheTimeout`

How long (in ms) to wait for the app to check for and fetch a new update upon launch before falling back to the most recent update already present on the device. Defaults to 0. Must be between 0 and 300000 (5 minutes). If the startup update check takes longer than this value, any update downloaded during the check will be applied upon the next app launch.

`url`

Type: `string`âPath: `updates.url`

URL from which expo-updates will fetch update manifests

`codeSigningCertificate`

Type: `string`âPath: `updates.codeSigningCertificate`

Local path of a PEM-formatted X.509 certificate used for verifying codesigned updates. When provided, all updates downloaded by expo-updates must be signed.

`codeSigningMetadata`

Type: `object`âPath: `updates.codeSigningMetadata`

Metadata for `codeSigningCertificate`

`alg`

Type: `enum`âPath: `updates.codeSigningMetadata.alg`

Algorithm used to generate manifest code signing signature. Valid values: `rsa-v1_5-sha256`

`keyid`

Type: `string`âPath: `updates.codeSigningMetadata.keyid`

Identifier for the key in the certificate. Used to instruct signing mechanisms when signing or verifying signatures.

`requestHeaders`

Type: `object`âPath: `updates.requestHeaders`

Extra HTTP headers to include in HTTP requests made by `expo-updates` when fetching manifests or assets. These may override preset headers.

`assetPatternsToBeBundled`

Type: `array`âPath: `updates.assetPatternsToBeBundled`

Array of glob patterns specifying which files should be included in updates. Glob patterns are relative to the project root. A value of `['**']` will match all asset files within the project root. When not supplied all asset files will be included. Example: Given a value of `['app/images/**/*.png', 'app/fonts/**/*.woff']` all `.png` files in all subdirectories of `app/images` and all `.woff` files in all subdirectories of `app/fonts` will be included in updates.

`disableAntiBrickingMeasures`

Type: `boolean`âPath: `updates.disableAntiBrickingMeasures`

Whether to disable the built-in expo-updates anti-bricking measures. Defaults to false. If set to true, this will allow overriding certain configuration options from the JS API, which is liable to leave an app in a bricked state if not done carefully. This should not be used in production.

`useNativeDebug`

Type: `boolean`âPath: `updates.useNativeDebug`

Enable debugging of native code with updates enabled. Defaults to false. If set to true, the EX\_UPDATES\_NATIVE\_DEBUG environment variable will be set in Podfile.properties.json and gradle.properties. This causes Xcode and Android Studio debug builds to be built with expo-updates enabled, and JS debugging (with dev client or packager) disabled. This should not be used in production.

`locales`

Type: `object`

Provide overrides by locale for System Dialog prompts like Permissions Boxes

Bare Workflow

`plugins`

Type: `array`

Config plugins for adding extra functionality to your project. [Learn more](https://docs.expo.dev/guides/config-plugins/).

Bare Workflow

`splash`

Type: `object`

Configuration for loading and splash screen for standalone apps.

Bare Workflow

`backgroundColor`

Type: `string`âPath: `splash.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

Bare Workflow

`resizeMode`

Type: `enum`âPath: `splash.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover` or `contain`, defaults to `contain`.

`image`

Type: `string`âPath: `splash.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`jsEngine`

Type: `enum`

@deprecated This field will be removed in a future release. When it is removed, you can continue using JavaScriptCore instead of Hermes by following the instructions in [@react-native-community/javascriptcore](https://github.com/react-native-community/javascriptcore). Specifies the JavaScript engine for Android apps. Defaults to `hermes`. Valid values: `hermes`, `jsc`.

Bare Workflow

`newArchEnabled`

Type: `boolean`

A Boolean value that indicates whether the app should use the new architecture. Defaults to true.

`ios`

Type: `object`

Configuration that is specific to the iOS platform.

`appleTeamId`

Type: `string`âPath: `ios.appleTeamId`

The Apple development team ID to use for all native targets. You can find your team ID in [the Apple Developer Portal](https://developer.apple.com/help/account/manage-your-team/locate-your-team-id/).

`publishManifestPath`

Type: `string`âPath: `ios.publishManifestPath`

The manifest for the iOS version of your app will be written to this path during publish.

`publishBundlePath`

Type: `string`âPath: `ios.publishBundlePath`

The bundle for the iOS version of your app will be written to this path during publish.

`bundleIdentifier`

Type: `string`âPath: `ios.bundleIdentifier`

The bundle identifier for your iOS standalone app. You make it up, but it needs to be unique on the App Store. See [this StackOverflow question](http://stackoverflow.com/questions/11347470/what-does-bundle-identifier-mean-in-the-ios-project).

iOS bundle identifier notation unique name for your app. For example, `host.exp.expo`, where `exp.host` is our domain and `expo` is our app name.

Bare Workflow

`buildNumber`

Type: `string`âPath: `ios.buildNumber`

Build number for your iOS standalone app. Corresponds to `CFBundleVersion` and must match Apple's [specified format](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion). (Note: Transporter will pull the value for `Version Number` from `expo.version` and NOT from `expo.ios.buildNumber`.)

Bare Workflow

`backgroundColor`

Type: `string`âPath: `ios.backgroundColor`

The background color for your iOS app, behind any of your React views. Overrides the top-level `backgroundColor` key if it is present. Requires `expo-system-ui` be installed in your project to work on iOS.

6 character long hex color string, for example, `'#000000'`

`scheme`

One of types:

*   `string` matching the following pattern: `^[a-z][a-z0-9+.-]*$`
`{ "type": "array", "items": { "type": "string", "pattern": "^[a-z][a-z0-9+.-]*$" } }`

URL scheme(s) to link into your iOS app. Schemes added to this field will be merged with the schemes in the `scheme` key at the top level of the config.

String beginning with a lowercase letter followed by any combination of lowercase letters, digits, "+", "." or "-"

Bare Workflow

`icon`

One of types:

*   `string`
*   An `object` with the following properties:
```
`light`

Type: `string`âPath: `ios.icon.light`

The light icon. It will appear when neither dark nor tinted icons are used, or if they are not provided.

`dark`

Type: `string`âPath: `ios.icon.dark`

The dark icon. It will appear for the app when the user's system appearance is dark. See Apple's [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/app-icons#iOS-iPadOS) for more information.

`tinted`

Type: `string`âPath: `ios.icon.tinted`

The tinted icon. It will appear for the app when the user's system appearance is tinted. See Apple's [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/app-icons#iOS-iPadOS) for more information.
```

Local path or remote URL to an image to use for your app's icon on iOS. Alternatively, an object specifying different icons for various system appearances (e.g., dark, tinted) can be provided. If specified, this overrides the top-level `icon` key. Use a 1024x1024 icon which follows Apple's interface guidelines for icons, including color profile and transparency.

Expo will generate the other required sizes. This icon will appear on the home screen and within the Expo Go app.

`appStoreUrl`

Type: `string`âPath: `ios.appStoreUrl`

URL to your app on the Apple App Store, if you have deployed it there. This is used to link to your store page from your Expo project page if your app is public.

Example

`"https://apps.apple.com/us/app/expo-client/id982107779"`

`bitcode`

Type: `undefined`âPath: `ios.bitcode`

Enable iOS Bitcode optimizations in the native build. Accepts the name of an iOS build configuration to enable for a single configuration and disable for all others, e.g. Debug, Release. Not available in Expo Go. Defaults to `undefined` which uses the template's predefined settings.

`config`

Type: `object`âPath: `ios.config`

Note: This property key is not included in the production manifest and will evaluate to `undefined`. It is used internally only in the build process, because it contains API keys that some may want to keep private.

`branch`

Type: `object`âPath: `ios.config.branch`

[Branch](https://branch.io/) key to hook up Branch linking services.

`apiKey`

Type: `string`âPath: `ios.config.branch.apiKey`

Your Branch API key

`usesNonExemptEncryption`

Type: `boolean`âPath: `ios.config.usesNonExemptEncryption`

Sets `ITSAppUsesNonExemptEncryption` in the standalone ipa's Info.plist to the given boolean value.

`googleMapsApiKey`

Type: `string`âPath: `ios.config.googleMapsApiKey`

[Google Maps iOS SDK](https://developers.google.com/maps/documentation/ios-sdk/start) key for your standalone app.

`googleServicesFile`

Type: `string`âPath: `ios.googleServicesFile`

[Firebase Configuration File](https://support.google.com/firebase/answer/7015592) Location of the `GoogleService-Info.plist` file for configuring Firebase.

`supportsTablet`

Type: `boolean`âPath: `ios.supportsTablet`

Whether your standalone iOS app supports tablet screen sizes. Defaults to `false`.

Bare Workflow

`isTabletOnly`

Type: `boolean`âPath: `ios.isTabletOnly`

If true, indicates that your standalone iOS app does not support handsets, and only supports tablets.

Bare Workflow

`requireFullScreen`

Type: `boolean`âPath: `ios.requireFullScreen`

If true, indicates that your standalone iOS app does not support Slide Over and Split View on iPad. Defaults to `false`

Bare Workflow

`userInterfaceStyle`

Type: `enum`âPath: `ios.userInterfaceStyle`

Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to `light`.

`infoPlist`

Type: `object`âPath: `ios.infoPlist`

Dictionary of arbitrary configuration to add to your standalone app's native Info.plist. Applied prior to all other Expo-specific configuration. No other validation is performed, so use this at your own risk of rejection from the App Store.

`entitlements`

Type: `object`âPath: `ios.entitlements`

Dictionary of arbitrary configuration to add to your standalone app's native \*.entitlements (plist). Applied prior to all other Expo-specific configuration. No other validation is performed, so use this at your own risk of rejection from the App Store.

`privacyManifests`

Type: `object`âPath: `ios.privacyManifests`

Dictionary of privacy manifest definitions to add to your app's native PrivacyInfo.xcprivacy file. [Learn more](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files)

`NSPrivacyAccessedAPITypes`

Type: `array`âPath: `ios.privacyManifests.NSPrivacyAccessedAPITypes`

A list of required reasons of why your app uses restricted API categories. [Learn more](https://developer.apple.com/documentation/bundleresources/privacy_manifest_files/describing_use_of_required_reason_api)

`NSPrivacyAccessedAPIType`

Type: `string`âPath: `ios.privacyManifests.NSPrivacyAccessedAPITypes.NSPrivacyAccessedAPIType`

A string that identifies the category of required reason APIs your app uses

`NSPrivacyAccessedAPITypeReasons`

Type: `array`âPath: `ios.privacyManifests.NSPrivacyAccessedAPITypes.NSPrivacyAccessedAPITypeReasons`

A list of reasons for a specific category.

`NSPrivacyTrackingDomains`

Type: `array`âPath: `ios.privacyManifests.NSPrivacyTrackingDomains`

A list of domains that your app uses for tracking.

`NSPrivacyTracking`

Type: `boolean`âPath: `ios.privacyManifests.NSPrivacyTracking`

A Boolean that indicates whether your app or third-party SDK uses data for tracking.

`NSPrivacyCollectedDataTypes`

Type: `array`âPath: `ios.privacyManifests.NSPrivacyCollectedDataTypes`

A list of collected data types that your app uses.

`NSPrivacyCollectedDataType`

Type: `string`âPath: `ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataType`

`NSPrivacyCollectedDataTypeLinked`

Type: `boolean`âPath: `ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypeLinked`

`NSPrivacyCollectedDataTypeTracking`

Type: `boolean`âPath: `ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypeTracking`

`NSPrivacyCollectedDataTypePurposes`

Type: `array`âPath: `ios.privacyManifests.NSPrivacyCollectedDataTypes.NSPrivacyCollectedDataTypePurposes`

`associatedDomains`

Type: `array`âPath: `ios.associatedDomains`

An array that contains Associated Domains for the standalone app. [Learn more](https://developer.apple.com/documentation/safariservices/supporting_associated_domains).

Entries must follow the format `applinks:<fully qualified domain>[:port number]`. [Learn more](https://developer.apple.com/documentation/safariservices/supporting_associated_domains).

Bare Workflow

`usesIcloudStorage`

Type: `boolean`âPath: `ios.usesIcloudStorage`

A boolean indicating if the app uses iCloud Storage for `DocumentPicker`. See `DocumentPicker` docs for details.

Bare Workflow

`usesAppleSignIn`

Type: `boolean`âPath: `ios.usesAppleSignIn`

A boolean indicating if the app uses Apple Sign-In. See `AppleAuthentication` docs for details.

`usesBroadcastPushNotifications`

Type: `boolean`âPath: `ios.usesBroadcastPushNotifications`

A boolean indicating if the app uses Push Notifications Broadcast option for Push Notifications capability. If true, EAS CLI will use the value during capability syncing. If EAS CLI is not used, this configuration will not have any effect unless another tool is used to operate on it, so enable the capability manually on the Apple Developer Portal in that case.

`accessesContactNotes`

Type: `boolean`âPath: `ios.accessesContactNotes`

A Boolean value that indicates whether the app may access the notes stored in contacts. You must [receive permission from Apple](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_contacts_notes) before you can submit your app for review with this capability.

`splash`

Type: `object`âPath: `ios.splash`

Configuration for loading and splash screen for standalone iOS apps.

`backgroundColor`

Type: `string`âPath: `ios.splash.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum`âPath: `ios.splash.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover` or `contain`, defaults to `contain`.

`image`

Type: `string`âPath: `ios.splash.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`tabletImage`

Type: `string`âPath: `ios.splash.tabletImage`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`dark`

Type: `object`âPath: `ios.splash.dark`

Configuration for loading and splash screen for standalone iOS apps in dark mode.

`backgroundColor`

Type: `string`âPath: `ios.splash.dark.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum`âPath: `ios.splash.dark.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover` or `contain`, defaults to `contain`.

`image`

Type: `string`âPath: `ios.splash.dark.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`tabletImage`

Type: `string`âPath: `ios.splash.dark.tabletImage`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`jsEngine`

Type: `enum`âPath: `ios.jsEngine`

@deprecated This field will be removed in a future release. When it is removed, you can continue using JavaScriptCore instead of Hermes by following the instructions in [@react-native-community/javascriptcore](https://github.com/react-native-community/javascriptcore). Specifies the JavaScript engine for iOS apps. Not supported in Expo Go. Defaults to `hermes`. Valid values: `hermes`, `jsc`.

Bare Workflow

`newArchEnabled`

Type: `boolean`âPath: `ios.newArchEnabled`

A Boolean value that indicates whether the iOS app should use the new architecture.

`runtimeVersion`

One of types:

*   `string` matching the following pattern: `^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$`
*   `string` matching the following pattern: `^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$`
*   An `object` with the following properties:
```
`policy`

Type: `enum`âPath: `ios.runtimeVersion.policy`

Valid values: `nativeVersion`, `sdkVersion`, `appVersion`, `fingerprint`.
```

Property indicating compatibility between an iOS build's native code and an OTA update for the iOS platform. If provided, this will override the value of the top level `runtimeVersion` key on iOS.

`version`

Type: `string`âPath: `ios.version`

Your iOS app version. Takes precedence over the root `version` field. In addition to this field, you'll also use `ios.buildNumber` â read more about how to version your app [here](https://docs.expo.dev/distribution/app-stores/#versioning-your-app). This corresponds to `CFBundleShortVersionString`. The required format can be found [here](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring).

Bare Workflow

`android`

Type: `object`

Configuration that is specific to the Android platform.

`publishManifestPath`

Type: `string`âPath: `android.publishManifestPath`

The manifest for the Android version of your app will be written to this path during publish.

`publishBundlePath`

Type: `string`âPath: `android.publishBundlePath`

The bundle for the Android version of your app will be written to this path during publish.

`package`

Type: `string`âPath: `android.package`

The package name for your Android standalone app. You make it up, but it needs to be unique on the Play Store. See [this StackOverflow question](http://stackoverflow.com/questions/6273892/android-package-name-convention).

Reverse DNS notation unique name for your app. Valid Android Application ID. For example, `com.example.app`, where `com.example` is our domain and `app` is our app. The name may only contain lowercase and uppercase letters (a-z, A-Z), numbers (0-9) and underscores (\_), separated by periods (.). Each component of the name should start with a lowercase letter.

Bare Workflow

`versionCode`

Type: `integer`âPath: `android.versionCode`

Version number required by Google Play. Increment by one for each release. Must be a positive integer. [Learn more](https://developer.android.com/studio/publish/versioning.html)

Bare Workflow

`backgroundColor`

Type: `string`âPath: `android.backgroundColor`

The background color for your Android app, behind any of your React views. Overrides the top-level `backgroundColor` key if it is present.

6 character long hex color string, for example, `'#000000'`

Bare Workflow

`userInterfaceStyle`

Type: `enum`âPath: `android.userInterfaceStyle`

Configuration to force the app to always use the light or dark user-interface appearance, such as "dark mode", or make it automatically adapt to the system preferences. If not provided, defaults to `light`. Requires `expo-system-ui` be installed in your project to work on Android.

`scheme`

One of types:

*   `string` matching the following pattern: `^[a-z][a-z0-9+.-]*$`
`{ "type": "array", "items": { "type": "string", "pattern": "^[a-z][a-z0-9+.-]*$" } }`

URL scheme(s) to link into your Android app. Schemes added to this field will be merged with the schemes in the `scheme` key at the top level of the config.

String beginning with a lowercase letter followed by any combination of lowercase letters, digits, "+", "." or "-"

Bare Workflow

`icon`

Type: `string`âPath: `android.icon`

Local path or remote URL to an image to use for your app's icon on Android. If specified, this overrides the top-level `icon` key. We recommend that you use a 1024x1024 png file (transparency is recommended for the Google Play Store). This icon will appear on the home screen and within the Expo Go app.

`adaptiveIcon`

Type: `object`âPath: `android.adaptiveIcon`

Settings for an Adaptive Launcher Icon on Android. [Learn more](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive)

`foregroundImage`

Type: `string`âPath: `android.adaptiveIcon.foregroundImage`

Local path or remote URL to an image to use for your app's icon on Android. If specified, this overrides the top-level `icon` and the `android.icon` keys. Should follow the [specified guidelines](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive). This icon will appear on the home screen.

`monochromeImage`

Type: `string`âPath: `android.adaptiveIcon.monochromeImage`

Local path or remote URL to an image representing the Android 13+ monochromatic icon. Should follow the [specified guidelines](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive). This icon will appear on the home screen when the user enables 'Themed icons' in system settings on a device running Android 13+.

`backgroundImage`

Type: `string`âPath: `android.adaptiveIcon.backgroundImage`

Local path or remote URL to a background image for your app's Adaptive Icon on Android. If specified, this overrides the `backgroundColor` key. Must have the same dimensions as `foregroundImage`, and has no effect if `foregroundImage` is not specified. Should follow the [specified guidelines](https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive).

`backgroundColor`

Type: `string`âPath: `android.adaptiveIcon.backgroundColor`

Color to use as the background for your app's Adaptive Icon on Android. Defaults to white, `#FFFFFF`. Has no effect if `foregroundImage` is not specified.

6 character long hex color string, for example, `'#000000'`

`playStoreUrl`

Type: `string`âPath: `android.playStoreUrl`

URL to your app on the Google Play Store, if you have deployed it there. This is used to link to your store page from your Expo project page if your app is public.

Example

`"https://play.google.com/store/apps/details?id=host.exp.exponent"`

`permissions`

Type: `array`âPath: `android.permissions`

A list of permissions to add to the app `AndroidManifest.xml` during prebuild. For example: `['android.permission.SCHEDULE_EXACT_ALARM']`

Bare Workflow

`blockedPermissions`

Type: `array`âPath: `android.blockedPermissions`

List of permissions to block in the final `AndroidManifest.xml`. This is useful for removing permissions that are added by native package `AndroidManifest.xml` files which are merged into the final manifest. Internally this feature uses the `tools:node="remove"` XML attribute to remove permissions. Not available in Expo Go.

`googleServicesFile`

Type: `string`âPath: `android.googleServicesFile`

[Firebase Configuration File](https://support.google.com/firebase/answer/7015592) Location of the `google-services.json` file for configuring Firebase. Including this key automatically enables FCM in your standalone app.

Bare Workflow

`config`

Type: `object`âPath: `android.config`

Note: This property key is not included in the production manifest and will evaluate to `undefined`. It is used internally only in the build process, because it contains API keys that some may want to keep private.

`branch`

Type: `object`âPath: `android.config.branch`

[Branch](https://branch.io/) key to hook up Branch linking services.

`apiKey`

Type: `string`âPath: `android.config.branch.apiKey`

Your Branch API key

`googleMaps`

Type: `object`âPath: `android.config.googleMaps`

[Google Maps Android SDK](https://developers.google.com/maps/documentation/android-api/signup) configuration for your standalone app.

`apiKey`

Type: `string`âPath: `android.config.googleMaps.apiKey`

Your Google Maps Android SDK API key

`googleMobileAdsAppId`

Type: `string`âPath: `android.config.googleMobileAdsAppId`

[Google Mobile Ads App ID](https://support.google.com/admob/answer/6232340) Google AdMob App ID.

`googleMobileAdsAutoInit`

Type: `boolean`âPath: `android.config.googleMobileAdsAutoInit`

A boolean indicating whether to initialize Google App Measurement and begin sending user-level event data to Google immediately when the app starts. The default in Expo (Client and in standalone apps) is `false`. [Sets the opposite of the given value to the following key in `Info.plist`](https://developers.google.com/admob/ios/eu-consent#delay_app_measurement_optional)

`splash`

Type: `object`âPath: `android.splash`

Configuration for loading and splash screen for managed and standalone Android apps.

`backgroundColor`

Type: `string`âPath: `android.splash.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum`âPath: `android.splash.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover`, `contain` or `native`, defaults to `contain`.

`image`

Type: `string`âPath: `android.splash.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`mdpi`

Type: `string`âPath: `android.splash.mdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Natural sized image (baseline)`

`hdpi`

Type: `string`âPath: `android.splash.hdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Scale 1.5x`

`xhdpi`

Type: `string`âPath: `android.splash.xhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Scale 2x`

`xxhdpi`

Type: `string`âPath: `android.splash.xxhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Scale 3x`

`xxxhdpi`

Type: `string`âPath: `android.splash.xxxhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Scale 4x`

`dark`

Type: `object`âPath: `android.splash.dark`

Configuration for loading and splash screen for managed and standalone Android apps in dark mode.

`backgroundColor`

Type: `string`âPath: `android.splash.dark.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum`âPath: `android.splash.dark.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover`, `contain` or `native`, defaults to `contain`.

`image`

Type: `string`âPath: `android.splash.dark.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`mdpi`

Type: `string`âPath: `android.splash.dark.mdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Natural sized image (baseline)`

`hdpi`

Type: `string`âPath: `android.splash.dark.hdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Scale 1.5x`

`xhdpi`

Type: `string`âPath: `android.splash.dark.xhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Scale 2x`

`xxhdpi`

Type: `string`âPath: `android.splash.dark.xxhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Scale 3x`

`xxxhdpi`

Type: `string`âPath: `android.splash.dark.xxxhdpi`

Local path or remote URL to an image to fill the background of the loading screen in "native" mode. Image size and aspect ratio are up to you. [Learn more](https://developer.android.com/training/multiscreen/screendensities)

`Scale 4x`

`intentFilters`

Type: `array`âPath: `android.intentFilters`

Configuration for setting an array of custom intent filters in Android manifest. [Learn more](https://developer.android.com/guide/components/intents-filters)

Bare Workflow

Example

`[ { "autoVerify": true, "action": "VIEW", "data": { "scheme": "https", "host": "*.example.com" }, "category": [ "BROWSABLE", "DEFAULT" ] } ]`

`autoVerify`

Type: `boolean`âPath: `android.intentFilters.autoVerify`

You may also use an intent filter to set your app as the default handler for links (without showing the user a dialog with options). To do so use `true` and then configure your server to serve a JSON file verifying that you own the domain. [Learn more](https://developer.android.com/training/app-links)

`action`

Type: `string`âPath: `android.intentFilters.action`

`data`

Type: `undefined`âPath: `android.intentFilters.data`

`category`

Type: `undefined`âPath: `android.intentFilters.category`

`allowBackup`

Type: `boolean`âPath: `android.allowBackup`

Allows your user's app data to be automatically backed up to their Google Drive. If this is set to false, no backup or restore of the application will ever be performed (this is useful if your app deals with sensitive information). Defaults to the Android default, which is `true`.

`softwareKeyboardLayoutMode`

Type: `enum`âPath: `android.softwareKeyboardLayoutMode`

Determines how the software keyboard will impact the layout of your application. This maps to the `android:windowSoftInputMode` property. Defaults to `resize`. Valid values: `resize`, `pan`.

`jsEngine`

Type: `enum`âPath: `android.jsEngine`

@deprecated This field will be removed in a future release. When it is removed, you can continue using JavaScriptCore instead of Hermes by following the instructions in [@react-native-community/javascriptcore](https://github.com/react-native-community/javascriptcore). Specifies the JavaScript engine for Android apps. Defaults to `hermes`. Valid values: `hermes`, `jsc`.

Bare Workflow

`newArchEnabled`

Type: `boolean`âPath: `android.newArchEnabled`

A Boolean value that indicates whether the Android app should use the new architecture.

`runtimeVersion`

One of types:

*   `string` matching the following pattern: `^[a-zA-Z\d][a-zA-Z\d._+()-]{0,254}$`
*   `string` matching the following pattern: `^exposdk:((\d+\.\d+\.\d+)|(UNVERSIONED))$`
*   An `object` with the following properties:
```
`policy`

Type: `enum`âPath: `android.runtimeVersion.policy`

Valid values: `nativeVersion`, `sdkVersion`, `appVersion`, `fingerprint`.
```

Property indicating compatibility between a Android build's native code and an OTA update for the Android platform. If provided, this will override the value of top level `runtimeVersion` key on Android.

`version`

Type: `string`âPath: `android.version`

Your android app version. Takes precedence over the root `version` field. In addition to this field, you'll also use `android.versionCode` â read more about how to version your app [here](https://docs.expo.dev/distribution/app-stores/#versioning-your-app). This corresponds to `versionName`. The required format can be found [here](https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring).

Bare Workflow

`edgeToEdgeEnabled`

Type: `boolean`âPath: `android.edgeToEdgeEnabled`

Enable your app to run in [edge-to-edge](https://developer.android.com/develop/ui/views/layout/edge-to-edge) mode. Default to false.

Bare Workflow

`web`

Type: `object`

Configuration that is specific to the web platform.

`output`

Type: `enum`âPath: `web.output`

Sets the export method for the web app for both `expo start` and `expo export`. `static` statically renders HTML files for every route in the `app/` directory, which is available only in Expo Router apps. `single` outputs a Single Page Application (SPA), with a single `index.html` in the output folder, and has no statically indexable HTML. `server` outputs static HTML, and API Routes for hosting with a custom Node.js server. Defaults to `single`.

`favicon`

Type: `string`âPath: `web.favicon`

Relative path of an image to use for your app's favicon.

`name`

Type: `string`âPath: `web.name`

Defines the title of the document, defaults to the outer level name

`shortName`

Type: `string`âPath: `web.shortName`

A short version of the app's name, 12 characters or fewer. Used in app launcher and new tab pages. Maps to `short_name` in the PWA manifest.json. Defaults to the `name` property.

Maximum 12 characters long

`lang`

Type: `string`âPath: `web.lang`

Specifies the primary language for the values in the name and short\_name members. This value is a string containing a single language tag.

`scope`

Type: `string`âPath: `web.scope`

Defines the navigation scope of this website's context. This restricts what web pages can be viewed while the manifest is applied. If the user navigates outside the scope, it returns to a normal web page inside a browser tab/window. If the scope is a relative URL, the base URL will be the URL of the manifest.

`themeColor`

Type: `string`âPath: `web.themeColor`

Defines the color of the Android tool bar, and may be reflected in the app's preview in task switchers.

6 character long hex color string, for example, `'#000000'`

`description`

Type: `string`âPath: `web.description`

Provides a general description of what the pinned website does.

`dir`

Type: `enum`âPath: `web.dir`

Specifies the primary text direction for the name, short\_name, and description members. Together with the lang member, it helps the correct display of right-to-left languages.

`display`

Type: `enum`âPath: `web.display`

Defines the developersâ preferred display mode for the website.

`startUrl`

Type: `string`âPath: `web.startUrl`

The URL that loads when a user launches the application (e.g., when added to home screen), typically the index. Note: This has to be a relative URL, relative to the manifest URL.

`orientation`

Type: `enum`âPath: `web.orientation`

Defines the default orientation for all the website's top level browsing contexts.

`backgroundColor`

Type: `string`âPath: `web.backgroundColor`

Defines the expected âbackground colorâ for the website. This value repeats what is already available in the siteâs CSS, but can be used by browsers to draw the background color of a shortcut when the manifest is available before the stylesheet has loaded. This creates a smooth transition between launching the web application and loading the site's content.

6 character long hex color string, for example, `'#000000'`

`barStyle`

Type: `enum`âPath: `web.barStyle`

If content is set to default, the status bar appears normal. If set to black, the status bar has a black background. If set to black-translucent, the status bar is black and translucent. If set to default or black, the web content is displayed below the status bar. If set to black-translucent, the web content is displayed on the entire screen, partially obscured by the status bar.

`preferRelatedApplications`

Type: `boolean`âPath: `web.preferRelatedApplications`

Hints for the user agent to indicate to the user that the specified native applications (defined in expo.ios and expo.android) are recommended over the website.

`dangerous`

Type: `object`âPath: `web.dangerous`

Experimental features. These will break without deprecation notice.

`splash`

Type: `object`âPath: `web.splash`

Configuration for PWA splash screens.

Bare Workflow

`backgroundColor`

Type: `string`âPath: `web.splash.backgroundColor`

Color to fill the loading screen background

6 character long hex color string, for example, `'#000000'`

`resizeMode`

Type: `enum`âPath: `web.splash.resizeMode`

Determines how the `image` will be displayed in the splash loading screen. Must be one of `cover` or `contain`, defaults to `contain`.

`image`

Type: `string`âPath: `web.splash.image`

Local path or remote URL to an image to fill the background of the loading screen. Image size and aspect ratio are up to you. Must be a .png.

`config`

Type: `object`âPath: `web.config`

Firebase web configuration. Used by the expo-firebase packages on both web and native. [Learn more](https://firebase.google.com/docs/reference/js/firebase.html#initializeapp)

`firebase`

Type: `object`âPath: `web.config.firebase`

`apiKey`

Type: `string`âPath: `web.config.firebase.apiKey`

`authDomain`

Type: `string`âPath: `web.config.firebase.authDomain`

`databaseURL`

Type: `string`âPath: `web.config.firebase.databaseURL`

`projectId`

Type: `string`âPath: `web.config.firebase.projectId`

`storageBucket`

Type: `string`âPath: `web.config.firebase.storageBucket`

`messagingSenderId`

Type: `string`âPath: `web.config.firebase.messagingSenderId`

`appId`

Type: `string`âPath: `web.config.firebase.appId`

`measurementId`

Type: `string`âPath: `web.config.firebase.measurementId`

`bundler`

Type: `enum`âPath: `web.bundler`

Sets the bundler to use for the web platform. Only supported in the local CLI `npx expo`. Defaults to `webpack` if the `@expo/webpack-config` package is installed, if not, it defaults to `metro`.

`experiments`

Type: `object`

Enable experimental features that may be unstable, unsupported, or removed without deprecation notices.

`baseUrl`

Type: `string`âPath: `experiments.baseUrl`

Export a website relative to a subpath of a domain. The path will be prepended as-is to links to all bundled resources. Prefix the path with a `/` (recommended) to load all resources relative to the server root. If the path does not start with a `/` then resources will be loaded relative to the code that requests them, this could lead to unexpected behavior. Example '/subpath'. Defaults to '' (empty string).

`supportsTVOnly`

Type: `boolean`âPath: `experiments.supportsTVOnly`

If true, indicates that this project does not support tablets or handsets, and only supports Apple TV and Android TV

`tsconfigPaths`

Type: `boolean`âPath: `experiments.tsconfigPaths`

Enable tsconfig/jsconfig `compilerOptions.paths` and `compilerOptions.baseUrl` support for import aliases in Metro.

`typedRoutes`

Type: `boolean`âPath: `experiments.typedRoutes`

Enable support for statically typed links in Expo Router. This feature requires TypeScript be set up in your Expo Router v2 project.

`turboModules`

Type: `boolean`âPath: `experiments.turboModules`

Enables Turbo Modules, which are a type of native modules that use a different way of communicating between JS and platform code. When installing a Turbo Module you will need to enable this experimental option (the library still needs to be a part of Expo SDK already, like react-native-reanimated v2). Turbo Modules do not support remote debugging and enabling this option will disable remote debugging.

`reactCanary`

Type: `boolean`âPath: `experiments.reactCanary`

Experimentally use a vendored canary build of React for testing upcoming features.

`reactCompiler`

Type: `boolean`âPath: `experiments.reactCompiler`

Experimentally enable React Compiler.

`reactServerComponentRoutes`

Type: `boolean`âPath: `experiments.reactServerComponentRoutes`

Experimentally enable React Server Components by default in Expo Router and concurrent routing for transitions.

`reactServerFunctions`

Type: `boolean`âPath: `experiments.reactServerFunctions`

Experimentally enable React Server Functions support in Expo CLI and Expo Router.

`remoteBuildCache`

Type: `object`âPath: `experiments.remoteBuildCache`

Experimentally enable downloading cached builds from remote.

`provider`

Type: `undefined`âPath: `experiments.remoteBuildCache.provider`

Service provider for remote builds.

`_internal`

Type: `object`

Internal properties for developer tools

`pluginHistory`

Type: `object`âPath: `_internal.pluginHistory`

List of plugins already run on the config

---

# babel

A reference for Babel configuration file.

[](https://github.com/expo/expo/edit/main/docs/pages/versions/unversioned/config/babel.mdx)

Babel is used as the JavaScript compiler to transform modern JavaScript (ES6+) into a version compatible with the JavaScript engine on mobile devices.

Each new Expo project created using `npx create-expo-app` configures Babel automatically and uses [`babel-preset-expo`](https://github.com/expo/expo/tree/main/packages/babel-preset-expo) as the default preset. There is no need to create a babel.config.js file unless you need to customize the Babel configuration.

## Create babel.config.js

If your project requires a custom Babel configuration, you need to create the babel.config.js file in your project by following the steps below:

1.  Navigate to the root of your project and run the following command inside a terminal. This will generate a babel.config.js file in the root of your project.

`npx expo customize babel.config.js`

2.  The babel.config.js file contains the following default configuration:

```
module.exports = function (api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};
```

3.  If you make a change to the babel.config.js file, you need to restart the Metro bundler to apply the changes and use `--clear` option from Expo CLI to clear the Metro bundler cache:

## babel-preset-expo

[`babel-preset-expo`](https://github.com/expo/expo/tree/main/packages/babel-preset-expo) is the default preset used in Expo projects. It extends the default React Native preset (`@react-native/babel-preset`) and adds support for decorators, tree-shaking web libraries, and loading font icons.

---

# metro

A reference of available configurations in Metro.

[](https://github.com/expo/expo/edit/main/docs/pages/versions/unversioned/config/metro.mdx)

See more information about metro.config.js in the [customizing Metro guide](https://docs.expo.dev/guides/customizing-metro).

## Environment variables

Expo CLI can load environment variables from .env files. Learn more about how to use environment variables in Expo CLI in the [environment variables guide](https://docs.expo.dev/guides/environment-variables).

EAS CLI uses a different mechanism for environment variables, except when it invokes Expo CLI for compiling and bundling. Learn more about [environment variables in EAS](https://docs.expo.dev/build-reference/variables).

If you are migrating an older project, then you should ignore local env files by adding the following to your .gitignore:

```
# local env files
.env*.local
```

### Disabling dotenv files

Dotenv file loading can be fully disabled in Expo CLI by enabling the `EXPO_NO_DOTENV` environment variable, before invoking any Expo CLI command.

Terminal

`# All users can run cross-env, followed by the Expo CLI command`

`npx cross-env EXPO_NO_DOTENV=1 expo start`

`# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command`

`-`Â `EXPO_NO_DOTENV=1 npx expo start`

### Disabling `EXPO_PUBLIC_`\-prefixed client environment variables

Environment variables prefixed with `EXPO_PUBLIC_` will be exposed to the app at build-time. For example, `EXPO_PUBLIC_API_KEY` will be available as `process.env.EXPO_PUBLIC_API_KEY`.

Client environment variable inlining can be disabled with the environment variable `EXPO_NO_CLIENT_ENV_VARS=1`, this must be defined before any bundling is performed.

Terminal

`# All users can run cross-env, followed by the Expo CLI command`

`npx cross-env EXPO_NO_CLIENT_ENV_VARS=1 expo start`

`# Alternatively, macOS and Linux users can define the environment variable, then run npx, followed by the Expo CLI command`

`-`Â `EXPO_NO_CLIENT_ENV_VARS=1 npx expo start`

## CSS

> CSS support is under development and currently only works on web.

Expo supports CSS in your project. You can import CSS files from any component. CSS Modules are also supported.

CSS support is enabled by default. You can disable the feature by setting `isCSSEnabled` in the Metro config.

```
/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname, {
  // Disable CSS support.
  isCSSEnabled: false,
});
```

### Global CSS

> Global styles are web-only, usage will cause your application to diverge visually on native.

You can import a CSS file from any component. The CSS will be applied to the entire page.

Here, we'll define a global style for the class name `.container`:

```
.container {
  background-color: red;
}
```

We can then use the class name in our component by importing the stylesheet and using `.container`:

```
import './styles.css';
import { View } from 'react-native';

export default function App() {
  return (
    <>
      {/* Use `className` to assign the style with React DOM components. */}
      <div className="container">Hello World</div>

      {/* Use `style` with the following syntax to append class names in React Native for web. */}
      <View
        style={{
          $$css: true,
          _: 'container',
        }}>
        Hello World
      </View>
    </>
  );
}
```

You can also import stylesheets that are vendored in libraries, just like you would any node module:

```
// Applies the styles app-wide.
import 'emoji-mart/css/emoji-mart.css';
```

*   On native, all global stylesheets are automatically ignored.
*   Hot reloading is supported for global stylesheets, simply save the file and the changes will be applied.

### CSS Modules

> CSS Modules for native are under development and currently only work on web.

CSS Modules are a way to scope CSS to a specific component. This is useful for avoiding naming collisions and for ensuring that styles are only applied to the intended component.

In Expo, CSS Modules are defined by creating a file with the `.module.css` extension. The file can be imported from any component. The exported value is an object with the class names as keys and the web-only scoped names as the values. The import `unstable_styles` can be used to access `react-native-web`\-safe styles.

CSS Modules support platform extensions to allow you to define different styles for different platforms. For example, you can define a `module.ios.css` and `module.android.css` file to define styles for Android and iOS respectively. You'll need to import without the extension, for example:

```
// Importing `./App.module.ios.css`:
- import styles from './App.module.css';
+ import styles from './App.module';
```

Flipping the extension, for example, `App.ios.module.css` will not work and result in a universal module named `App.ios.module`.

> You cannot pass styles to the `className` prop of a React Native or React Native for web component. Instead, you must use the `style` prop.

```
import styles, { unstable_styles } from './App.module.css';

export default function Page() {
  return (
    <>
      <Text
        style={{
          // This is how react-native-web class names are applied
          $$css: true,
          _: styles.text,
        }}>
        Hello World
      </Text>
      <Text style={unstable_styles.text}>Hello World</Text>
      {/* Web-only usage: */}
      <p className={styles.text}>Hello World</p>
    </>
  );
}
```

*   On web, all CSS values are available. CSS is not processed or auto-prefixed like it is with the React Native Web `StyleSheet` API. You can use `postcss.config.js` to autoprefix your CSS.
*   CSS Modules use [lightningcss](https://github.com/parcel-bundler/lightningcss) under the hood, check [the issues](https://github.com/parcel-bundler/lightningcss/issues) for unsupported features.

### PostCSS

[PostCSS](https://github.com/postcss/postcss) can be customized by adding a `postcss.config.json` file to the root of your project. This file should export a function that returns a PostCSS configuration object. For example:

```
{
  "plugins": {
    "autoprefixer": {}
  }
}
```

Both `postcss.config.json` and `postcss.config.js` are supported, but `postcss.config.json` enables better caching.

#### Resetting cache after updates

Changing the Post CSS or `browserslist` config will require you to clear the Metro cache:

`npx expo start --clear`

`npx expo export --clear`

### SASS

Expo Metro has _partial_ support for SCSS/SASS.

To setup, install the `sass` package in your project:

Then, ensure [CSS is setup](https://docs.expo.dev/versions/latest/config/metro#css) in the metro.config.js file.

*   When `sass` is installed, then modules without extensions will be resolved in the following order: `scss`, `sass`, `css`.
*   Only use the intended syntax with `sass` files.
*   Importing other files from inside a scss/sass file is not currently supported.

### Tailwind

> Standard Tailwind CSS supports only web platform. For universal support, use a library such as [NativeWind](https://www.nativewind.dev/), which allows creating styled React Native components with Tailwind CSS.

[

Tailwind CSS

Learn how to configure and use Tailwind CSS in your Expo project.

](https://docs.expo.dev/guides/tailwind)

## Extending the Babel transformer

Expo's Metro config uses a custom `transformer.babelTransformerPath` value to ensure `expo-babel-preset` is always used and web/Node.js environments are supported.

If you want to extend the Babel transformer, import the upstream transformer from `@expo/metro-config/babel-transformer` instead of `metro-react-native-babel-transformer`. For example:

```
const upstreamTransformer = require('@expo/metro-config/babel-transformer');

module.exports.transform = async ({ src, filename, options }) => {
  // Do something custom for SVG files...
  if (filename.endsWith('.svg')) {
    src = '...';
  }
  // Pass the source through the upstream Expo transformer.
  return upstreamTransformer.transform({ src, filename, options });
};
```

## Custom resolving

Expo CLI extends the default Metro resolver to add features like Web, Server, and tsconfig aliases support. You can similarly customize the default resolution behavior of Metro by chaining the `config.resolver.resolveRequest` function.

```
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName.startsWith('my-custom-resolver:')) {
    // Logic to resolve the module name to a file path...
    // NOTE: Throw an error if there is no resolution.
    return {
      filePath: 'path/to/file',
      type: 'sourceFile',
    };
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
```

Unlike traditional bundlers, Metro shared the same resolver function across all platforms. As a result, you can mutate the resolution settings dynamically on each request with the `context` object.

### Mocking modules

If you want a module to be empty for a given platform, you can return a `type: 'empty'` object from the resolver. The following example will cause `lodash` to be empty on web:

```
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (platform === 'web' && moduleName === 'lodash') {
    return {
      type: 'empty',
    };
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
```

This technique is equivalent to using empty externals in Webpack or Vite, but with the added benefit of being able to target specific platforms.

### Virtual modules

Metro doesn't support virtual modules at the moment. One technique you can use to obtain similar behavior is to create a module in the `node_modules/.cache/...` directory and redirect the resolution to that file.

The following example will create a module at `node_modules/.cache/virtual/virtual-module.js` and redirect the resolution of `virtual:my-module` to that file:

```
const path = require('path');
const fs = require('fs');

const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

const virtualPath = path.resolve(__dirname, 'node_modules/.cache/virtual/virtual-module.js');

// Create the virtual module in a generated directory...
fs.mkdirSync(path.dirname(virtualPath), { recursive: true });
fs.writeFileSync(virtualPath, 'export default "Hello World";');

config.resolver.resolveRequest = (context, moduleName, platform) => {
  if (moduleName === 'virtual:my-module') {
    return {
      filePath: virtualPath,
      type: 'sourceFile',
    };
  }

  // Ensure you call the default resolver.
  return context.resolveRequest(context, moduleName, platform);
};

module.exports = config;
```

This can be used to emulate `externals` with custom imports. For example, if you want to redirect `require('expo')` to something custom like `SystemJS.require('expo')`, you can create a virtual module that exports `SystemJS.require('expo')` and redirect the resolution of `expo` to that file.

## Custom transforming

> Transformations are heavily cached in Metro. If you update something, use the `--clear` flag to see updates. For example, `npx expo start --clear`.

Metro doesn't have a very expressive plugin system for transforming files, instead opt to use the [babel.config.js](https://docs.expo.dev/versions/latest/config/babel) and caller object to customize the transformation.

```
module.exports = function (api) {
  // Get the platform that Expo CLI is transforming for.
  const platform = api.caller(caller => (caller ? caller.platform : 'ios'));

  // Detect if the bundling operation is for Hermes engine or not, e.g. `'hermes'` | `undefined`.
  const engine = api.caller(caller => (caller ? caller.engine : null));

  // Is bundling for a server environment, e.g. API Routes.
  const isServer = api.caller(caller => (caller ? caller.isServer : false));

  // Is bundling for development or production.
  const isDev = api.caller(caller =>
    caller
      ? caller.isDev
      : process.env.BABEL_ENV === 'development' || process.env.NODE_ENV === 'development'
  );

  // Ensure the config is not cached otherwise the platform will not be updated.
  api.cache(false);
  // You can alternatively provide a more robust CONFIG cache invalidation:
  // api.cache.invalidate(() => platform);

  return {
    presets: ['babel-preset-expo'],
    plugins: [
      // Add a plugin based on the platform...
      platform === 'web' && 'my-plugin',

      // Ensure you filter out falsy values.
    ].filter(Boolean),
  };
};
```

If the caller doesn't have `engine`, `platform`, `bundler`, and so on, then ensure you are using `@expo/metro-config/babel-transformer` for the transformer. If you're using a custom transformer then it may need to extend the Expo transformer.

Always try to implement custom logic in the resolver if possible, caching is much simpler and easier to reason about. For example, if you need to remap an import, it's simpler and faster to resolve to a static file with the resolver than to parse all possible import methods and remap them with the transformer.

Always use `babel-preset-expo` as the default Babel preset, this ensures the transformation is always compatible with Expo runtimes. `babel-preset-expo` uses all of the caller inputs internally to optimize for a given platform, engine, and environment.

## Node.js built-ins

When bundling for a server environment, Expo's Metro config automatically supports externalizing Node.js built-in modules (`fs`, `path`, `node:crypto`, and more) based on the current Node.js version. If the CLI is bundling for a browser environment, then built-ins will first check if the module is installed locally, then fallback on an empty shim. For example, if you install `path` for use in the browser, this can be used, otherwise, the module will automatically be skipped.

## Environment settings

> These environment variables will not be defined in test environments.

Expo's Metro config injects build settings that can be used in the client bundle via environment variables. All variables will be inlined and cannot be used dynamically. For example, `process.env["EXPO_BASE_URL"]` won't work.

*   `process.env.EXPO_BASE_URL` exposes the base URL defined in `experiments.baseUrl`. This is used in Expo Router to respect the production base URL for deployment.

## Bundle splitting

Expo CLI automatically splits web bundles into multiple chunks based on async imports in production. This feature requires `@expo/metro-runtime` to be installed and imported somewhere in the entry bundle (available by default in Expo Router).

Shared dependencies of async bundles are merged into a single chunk to reduce the number of requests. For example, if you have two async bundles that import `lodash`, then the library is merged into a single initial chunk.

The chunk splitting heuristic cannot be customized. For example:

```
export function add(a, b) {
  return a + b;
}
```

```
import '@expo/metro-runtime';

// This will be split into a separate chunk.
import('./math').then(math => {
  console.log(math.add(1, 2));
});
```

When you run `npx expo export -p web`, the bundles are split into multiple files, and the entry bundle is added to the main HTML file. `@expo/metro-runtime` adds the runtime code that loads and evaluates the async bundles.

## Source map debug ID

If a bundle is exported with an external source map, a [Debug ID](https://sentry.engineering/blog/the-case-for-debug-ids) annotation will be added to the end of the file, along with a matching `debugId` in the source map for corresponding the files together. If no source maps are exported, or inline source maps are used then this annotation will not be added.

```
// <all source code>

//# debugId=<deterministic chunk hash>
```

The associated `*.js.map` or `*.hbc.map` source map will be a JSON file containing an equivalent `debugId` property. The `debugId` will be injected before hermes bytecode generation to ensure matching in all cases.

The `debugId` is a deterministic hash of the bundle's contents without the external bundle splitting references. This is the same value used to create a chunks filename but formatted as a UUID. For example, `431b98e2-c997-4975-a3d9-2987710abd44`.

`@expo/metro-config` injects `debugId` during `npx expo export` and `npx expo export:embed`. Any additional optimization steps in `npx expo export:embed` like Hermes bytecode generation will need to have the `debugId` injected manually.

## Metro require runtime

You can optionally enable a custom Metro `require` implementation with the environment variable `EXPO_USE_METRO_REQUIRE=1`. This runtime has the following features:

*   String module IDs that are human-readable and make missing module errors easier to follow.
*   Deterministic IDs that are the same between runs and across modules (required for React Server Components in development).
*   Removed support for legacy RAM bundles.

## Magic import comments

> Available from SDK 52 on all platforms.

Server environments such as Workers, and Node.js support import arbitrary files at runtime, so you may want to keep `import` syntax in-tact instead of using Metro's require system. You can opt-out dynamic imports with the `/* @metro-ignore */` comment in `import()` statements.

```
// Manually ensure `./my-module.js` is included in the correct spot relative to the module.
const myModule = await import(/* @metro-ignore */ './my-module.js');
```

Expo CLI will skip the `./my-module.js` dependency and assume that the developer has manually added it to the output bundle. Internally, this is used for exporting custom server code that dynamically switches between files based on the request. Avoid using this syntax for native bundles since `import()` is generally not available in React Native with Hermes enabled.

Many React libraries shipped the Webpack `/* webpackIgnore: true */` comment to achieve similar behavior. To bridge the gap, we've also added support for Webpack's comment but recommend using the Metro equivalent in your app.

## ES Module resolution

> This sections applies from SDK 53 on all platforms.

Metro resolves ES Module `import` and CommonJS `require` with separate resolution strategies.

Previously, Metro applied the classic Node.js module resolution strategy (which matches Node.js versions before v12), with some additions to support ES Modules. In this resolution strategy, Metro resolves modules from `node_modules`, JS files, optionally while omitting extensions, such as `.js`, and uses `package.json` fields such as `main`, `module`, and `react-native`.

Now, with the modern ES Modules resolution strategy, Metro instead resolves modules from `node_modules`, then matches different `package.json` fields, such as `exports`, [a nested map of sub-paths a package exposes](https://nodejs.org/api/packages.html#conditional-exports), and `main`.

Depending on how a package is imported, one of these two resolution strategies will be used. Typically, a file that is imported with `import` from a Node module (rather than `require`), will use the ES Modules resolution strategy, and fall back on regular classic Node.js resolution. A file that wasn't resolved with ES Modules resolution or has been imported with CommonJS `require` will use the classic resolution strategy.

### `package.json:exports`

When performing ES Modules resolution, Metro will look at the `package.json:exports` conditions map. This is a mapping of import subpaths and conditions to files in the Node module package.

For example, a package that always exposes an index.js file, and matches Metro's classic CommonJS module resolution, may specify a map with the `default` condition.

```
{
  "exports": {
    "default": "./index.js"
  }
}
```

However, a package providing both a CommonJS and ES Modules entrypoint may provide a mapping with the `import` and `require` conditions.

```
{
  "exports": {
    "import": "./index.mjs",
    "require": "./index.cjs"
  }
}
```

By default, Metro will match different conditions depending on the platform and whether the resolution has started from a CommonJS `require` call, or an ES Modules `import` statement and will change the condition accordingly.

For native platforms, the condition `react-native` is added, for web exports, the `browser` condition is added, and for server exports (such as API routes or React Server functions), the `node`, `react-server`, and `workerd` conditions are added. These conditions aren't matched in the order they're defined in. Instead, they're matched against the order of properties in the `package.json:exports` map.

TypeScript performs ES Module resolution separately from Metro and will also respect `package.json:exports` maps, when its `compilerOptions.moduleResolution` configuration option has either been set to `"bundler"` (which matches Metro's behaviour more closely) or to `"node16"` / `"nodenext"`. TypeScript will however also match the `types` condition. As such, types may not resolve properly when a package doesn't put the `types` condition first in its exports map.

Since an exports map may contain subpaths, a package import may not have to match a file in the package's modules folder any longer, but may be a "redirected" import. Importing `'package/submodule'` may match a different file than node\_modules/package/submodule.js if it's specified in `package.json:exports`.

```
{
  "exports": {
    ".": "./index.js",
    "./submodule": "./submodule/submodule.js"
  }
}
```

If you're encountering packages that are incompatible or unprepared for the new ES Modules resolution strategy, you may be able to resolve problems by patching its `package.json` file and add or correct its `package.json:exports` conditions map. However, it's also possible to prevent Metro from using `package.json:exports` maps in its resolution by disabling the `unstable_enablePackageExports` option.

```
const { getDefaultConfig } = require('expo/metro-config');

/** @type {import('expo/metro-config').MetroConfig} */
const config = getDefaultConfig(__dirname);

config.resolver.unstable_enablePackageExports = false;

module.exports = config;
```

## Asset imports

When assets are imported, a virtual module is created to represent the data required for importing the asset.

On native platforms, an asset will be a numeric ID: `1`, `2`, `3`, and so on, which can be looked up using `require("@react-native/assets-registry/registry").getAssetByID(<NUMBER>)`. On web and server platforms, the asset will change depending on the file type. If the file is an image, then the asset will be `{ uri: string, width?: number, height?: number }`, otherwise the asset will be a `string` representing the remote URL for the asset.

The assets can be used as follows:

```
import { Image } from 'react-native';

import asset from './img.png';

function Demo() {
  return <Image source={asset} />;
}
```

In API routes, you can always assume the type of the asset will not be a number:

```
import asset from './img.png';

export async function GET(req: Request) {
  const ImageData = await fetch(
    new URL(
      // Access the asset URI.
      asset.uri,
      // Append to the current request URL origin.
      req.url
    )
  ).then(res => res.arrayBuffer());

  return new Response(ImageData, {
    headers: {
      'Content-Type': 'image/png',
    },
  });
}
```

## Web workers

> This feature is experimental and subject to breaking changes.

```
new Worker(new URL('./worker', window.location.href));
```

Expo Metro has experimental web worker support in SDK 53 and above. This feature is currently web-only and does not work on native, usage on native will trigger an error "Property 'Worker' doesn't exist".

Web workers can be used to offload work to a separate thread on web, allowing the main thread to remain responsive. This is useful for computationally expensive tasks, such as image processing, cryptography, or other tasks that would otherwise block the main thread.

Workers can be generated inline using `Blob`, but sometimes you may want to leverage modern features like TypeScript or importing other modules.

Web workers depend on Expo bundle splitting support, which means you need to either use Expo Router or install and import `@expo/metro-runtime`. You also cannot use the environment `EXPO_NO_METRO_LAZY=1` with web workers.

Consider the following example of a worker that doubles a number:

```
self.onmessage = ({ data }) => {
  const result = data * 2; // Example: double the number
  self.postMessage(result);
};
```

This worker file can be imported as a `Worker` in the main app:

```
// worker is of type `Worker`
const worker = new Worker(new URL('./worker', window.location.href));

worker.onmessage = ({ data }) => {
  console.log(`Worker responded: ${data}`);
};

worker.postMessage(5);
```

Behind the scenes, Expo CLI is generating code like this:

```
const worker = new Worker(
  new URL('/worker.bundle?platform=web&dev=true&etc', window.location.href)
);
```

The generated bundle URL changes based on development/production to ensure the worker is loaded and bundled correctly. Unlike traditional bundle splitting, a worker file needs to contain its own copy of all modules and cannot depend on common modules in the main bundle.

The native API `Worker` is traditionally unavailable in React Native and not provided by the Expo SDK, so even though this bundling feature technically works for all platforms, it's only useful on web. You could theoretically write a native Expo module that polyfills the `Worker` API if you want to support native platforms too. Alternatively, you can use the "worklet" API in React Native Reanimated to offload work to a separate thread on native.

Alternatively, you can import Workers using the public path by first putting a transformed JS file in the public directory, then referencing it in the worker import with a variable:

```
// Will avoid the transform and use the public path directly.
const worker = new Worker('/worker.js');

// The variable breaks the transform causing the literal path to be used instead of the transformed path.
const path = '/worker.js';

const anotherWorker = new Worker(new URL(path, window.location.href));
```

Using a variable in the `Worker` constructor is not supported for bundling. To inspect the internal URL, you may use the internal syntax `require.unstable_resolveWorker('./path/to/worker.js')` to get the URL fragment.

## Bare workflow setup

> This guide is versioned and will need to be revisited when upgrading/downgrading Expo. Alternatively, use [Expo Prebuild](https://docs.expo.dev/workflow/prebuild) for fully automated setup.

Projects that don't use [Expo Prebuild](https://docs.expo.dev/workflow/prebuild) must configure native files to ensure the Expo Metro config is always used to bundle the project.

These modifications are meant to replace `npx react-native bundle` and `npx react-native start` with `npx expo export:embed` and `npx expo start` respectively.

### metro.config.js

Ensure the metro.config.js extends `expo/metro-config`:

```
const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

module.exports = config;
```

### `android/app/build.gradle`

The Android app/build.gradle must be configured to use Expo CLI for production bundling. Modify the `react` config object:

```
react {
  ...
+     // Use Expo CLI to bundle the app, this ensures the Metro config
+     // works correctly with Expo projects.
+     cliFile = new File(["node", "--print", "require.resolve('@expo/cli')"].execute(null, rootDir).text.trim())
+     bundleCommand = "export:embed"
}
```

### `ios/<Project>.xcodeproj/project.pbxproj`

In your ios/<Project>.xcodeproj/project.pbxproj file, replace the following scripts:

#### "Start Packager" script

Remove the "Start Packager" script. The dev server must be started with `npx expo` before/after running the app.

```
-    FD10A7F022414F080027D42C /* Start Packager */ = {
-			isa = PBXShellScriptBuildPhase;
-			alwaysOutOfDate = 1;
-			buildActionMask = 2147483647;
-			files = (
-			);
-			inputFileListPaths = (
-			);
-			inputPaths = (
-			);
-			name = "Start Packager";
-			outputFileListPaths = (
-			);
-			outputPaths = (
-			);
-			runOnlyForDeploymentPostprocessing = 0;
-			shellPath = /bin/sh;
-			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.updates\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.updates\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\nexport RCT_METRO_PORT=\"${RCT_METRO_PORT:=8081}\"\necho \"export RCT_METRO_PORT=${RCT_METRO_PORT}\" > `$NODE_BINARY --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/.packager.env'\"`\nif [ -z \"${RCT_NO_LAUNCH_PACKAGER+xxx}\" ] ; then\n  if nc -w 5 -z localhost ${RCT_METRO_PORT} ; then\n    if ! curl -s \"http://localhost:${RCT_METRO_PORT}/status\" | grep -q \"packager-status:running\" ; then\n      echo \"Port ${RCT_METRO_PORT} already in use, packager is either not running or not running correctly\"\n      exit 2\n    fi\n  else\n    open `$NODE_BINARY --print \"require('path').dirname(require.resolve('expo/package.json')) + '/scripts/launchPackager.command'\"` || echo \"Can't start packager automatically\"\n  fi\nfi\n";
-			showEnvVarsInLog = 0;
-		};
```

#### "Bundle React Native code and images" script

```
+			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n";
```

Alternatively, in the Xcode project, select the "Bundle React Native code and images" build phase and add the following modifications:

```
if [[ -f "$PODS_ROOT/../.xcode.env" ]]; then
  source "$PODS_ROOT/../.xcode.env"
fi
if [[ -f "$PODS_ROOT/../.xcode.env.local" ]]; then
  source "$PODS_ROOT/../.xcode.env.local"
fi

# The project root by default is one level up from the ios directory
export PROJECT_ROOT="$PROJECT_DIR"/..

if [[ "$CONFIGURATION" = *Debug* ]]; then
  export SKIP_BUNDLING=1
fi
+ if [[ -z "$ENTRY_FILE" ]]; then
+   # Set the entry JS file using the bundler's entry resolution.
+   export ENTRY_FILE="$("$NODE_BINARY" -e "require('expo/scripts/resolveAppEntry')" "$PROJECT_ROOT" ios absolute | tail -n 1)"
+ fi

+ if [[ -z "$CLI_PATH" ]]; then
+   # Use Expo CLI
+   export CLI_PATH="$("$NODE_BINARY" --print "require.resolve('@expo/cli')")"
+ fi
+ if [[ -z "$BUNDLE_COMMAND" ]]; then
+   # Default Expo CLI command for bundling
+   export BUNDLE_COMMAND="export:embed"
+ fi

`"$NODE_BINARY" --print "require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'"`
```

> You can set `CLI_PATH`, `BUNDLE_COMMAND`, and `ENTRY_FILE` environment variables to overwrite these defaults.

### Custom entry file

By default, React Native only supports using a root `index.js` file as the entry file (or platform-specific variation like `index.ios.js`). Expo projects allow using any entry file, but this requires addition bare setup.

#### Development

Development mode entry files can be enabled by using the [`expo-dev-client`](https://docs.expo.dev/versions/latest/sdk/dev-client) package. Alternatively you can add the following configuration:

```
- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge
{
#if DEBUG
-  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index"];
+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@".expo/.virtual-metro-entry"];
#else
  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
#endif
}
```

```
@Override
protected String getJSMainModuleName() {
-  return "index";
+  return ".expo/.virtual-metro-entry";
}
```

#### Production

In your ios/<Project>.xcodeproj/project.pbxproj file, replace the "Bundle React Native code and images" script to set `$ENTRY_FILE` according using Metro:

```
+			shellScript = "if [[ -f \"$PODS_ROOT/../.xcode.env\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env\"\nfi\nif [[ -f \"$PODS_ROOT/../.xcode.env.local\" ]]; then\n  source \"$PODS_ROOT/../.xcode.env.local\"\nfi\n\n# The project root by default is one level up from the ios directory\nexport PROJECT_ROOT=\"$PROJECT_DIR\"/..\n\nif [[ \"$CONFIGURATION\" = *Debug* ]]; then\n  export SKIP_BUNDLING=1\nfi\nif [[ -z \"$ENTRY_FILE\" ]]; then\n  # Set the entry JS file using the bundler's entry resolution.\n  export ENTRY_FILE=\"$(\"$NODE_BINARY\" -e \"require('expo/scripts/resolveAppEntry')\" \"$PROJECT_ROOT\" ios absolute | tail -n 1)\"\nfi\n\nif [[ -z \"$CLI_PATH\" ]]; then\n  # Use Expo CLI\n  export CLI_PATH=\"$(\"$NODE_BINARY\" --print \"require.resolve('@expo/cli')\")\"\nfi\nif [[ -z \"$BUNDLE_COMMAND\" ]]; then\n  # Default Expo CLI command for bundling\n  export BUNDLE_COMMAND=\"export:embed\"\nfi\n\n`\"$NODE_BINARY\" --print \"require('path').dirname(require.resolve('react-native/package.json')) + '/scripts/react-native-xcode.sh'\"`\n\n";
```

The Android app/build.gradle must be configured to use Metro module resolution to find the root entry file. Modify the `react` config object:

```
+ def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
+    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
}
```


---

# package-json

A reference for Expo-specific properties that can be used in the package.json file.

[](https://github.com/expo/expo/edit/main/docs/pages/versions/unversioned/config/package-json.mdx)

package.json is a JSON file that contains the metadata for a JavaScript project. This is a reference to Expo-specific properties that can be used in the package.json file.

## `install.exclude`

The following commands perform a version check for the libraries installed in a project and give a warning when a library's version is different from the version recommended by Expo:

*   `npx expo start` and `npx expo-doctor`
*   `npx expo install` (when installing a new version of that library or using `--check` or `--fix` options)

By specifying the library under the `install.exclude` array in the package.json file, you can exclude it from the version checks:

```
{
  "expo": {
    "install": {
      "exclude": ["expo-updates", "expo-splash-screen"]
    }
  }
}
```

## `autolinking`

Allows configuring module resolution behavior by using `autolinking` property in package.json.

For complete reference, see [Autolinking configuration](https://docs.expo.dev/modules/autolinking#configuration).

## `doctor`

Allows configuring the behavior of the [`npx expo-doctor`](https://docs.expo.dev/develop/tools#expo-doctor) command.

### `reactNativeDirectoryCheck`

By default, Expo Doctor validates your project's packages against the [React Native directory](https://reactnative.directory/). This check throws a warning with a list of packages that are not included in the React Native Directory.

You can customize this check by adding the following configuration in your project's package.json file:

```
{
  "expo": {
    "doctor": {
      "reactNativeDirectoryCheck": {
        "enabled": true,
        "exclude": ["/foo/", "bar"],
        "listUnknownPackages": true
      }
    }
  }
}
```

By default, the check is enabled and unknown packages are listed.

### `appConfigFieldsNotSyncedCheck`

Expo Doctor checks if your project includes native project directories such as android or ios. If these directories exist but are not listed in your .gitignore or [.easignore](https://docs.expo.dev/build-reference/easignore) files, Expo Doctor verifies the presence of an app config file. If this file exists, it means your project is configured to use [Prebuild](https://docs.expo.dev/workflow/prebuild).

When the android or ios directories are present, EAS Build does not sync app config properties to the native projects. Expo Doctor throws a warning if these conditions are true.

You can disable or enable this check by adding the following configuration to your project's package.json file:

```
{
  "expo": {
    "doctor": {
      "appConfigFieldsNotSyncedCheck": {
        "enabled": false
      }
    }
  }
}
```


---

# accelerometer

A library that provides access to the device's accelerometer sensor.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors/CHANGELOG.md)[](https://www.npmjs.com/package/expo-sensors)

`Accelerometer` from `expo-sensors` provides access to the device accelerometer sensor(s) and associated listeners to respond to changes in acceleration in three-dimensional space, meaning any movement or vibration.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Accelerometer } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Accelerometer.setUpdateInterval(1000);
  const _fast = () => Accelerometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(Accelerometer.addListener(setData));
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Accelerometer: (in gs where 1g = 9.81 m/s^2)</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});
```

## API

```
import { Accelerometer } from 'expo-sensors';
```

## Classes

### `Accelerometer`

Type: Class extends `[DeviceSensor](https://docs.expo.dev/versions/latest/sdk/sensors)<[AccelerometerMeasurement](#accelerometermeasurement)>`

A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type `Measurement`.

Accelerometer Methods

### `addListener(listener)`

  

Subscribe for updates to the accelerometer.

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Returns whether the accelerometer is enabled on the device.

On mobile web, you must first invoke `Accelerometer.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module. If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.

On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as `DeviceMotion` is now considered a secure API. There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.

A promise that resolves to a `boolean` denoting the availability of the accelerometer.

### `removeAllListeners()`

Removes all registered listeners.

### `removeSubscription(subscription)`

  

Removes the given subscription.

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

### `setUpdateInterval(intervalMs)`

  

Set the sensor update interval.

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `AccelerometerMeasurement`

Each of these keys represents the acceleration along that particular axis in g-force (measured in `g`s).

A `g` is a unit of gravitational force equal to that exerted by the earthâs gravitational field (`9.81 m/s^2`).

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionResponse`

An object obtained by permissions get and request functions.

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

---

# apple-authentication

A library that provides Sign-in with Apple capability for iOS.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-apple-authentication)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-apple-authentication/CHANGELOG.md)[](https://www.npmjs.com/package/expo-apple-authentication)

`expo-apple-authentication` provides Apple authentication for iOS. It does not yet support Android or web.

Any app that includes third-party authentication options must provide Apple authentication as an option to comply with App Store Review guidelines. For more information, see Apple authentication on the [Sign In with Apple](https://developer.apple.com/sign-in-with-apple/) website.

## Installation

`npx expo install expo-apple-authentication`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-apple-authentication` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.

### Setup iOS project

To enable the Sign In with Apple capability in your app, set the [`ios.usesAppleSignIn`](https://docs.expo.dev/versions/latest/config/app#usesapplesignin) property to `true` in your project's app config:

```
{
  "expo": {
    "ios": {
      "usesAppleSignIn": true
    }
  }
}
```

### Example app.json with config plugin

Running [EAS Build](https://docs.expo.dev/build/introduction) locally will use [iOS capabilities signing](https://docs.expo.dev/build-reference/ios-capabilities) to enable the required capabilities before building.

```
{
  "expo": {
    "plugins": ["expo-apple-authentication"]
  }
}
```

Are you using this library in an existing React Native app?

## Usage

```
import * as AppleAuthentication from 'expo-apple-authentication';
import { View, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <AppleAuthentication.AppleAuthenticationButton
        buttonType={AppleAuthentication.AppleAuthenticationButtonType.SIGN_IN}
        buttonStyle={AppleAuthentication.AppleAuthenticationButtonStyle.BLACK}
        cornerRadius={5}
        style={styles.button}
        onPress={async () => {
          try {
            const credential = await AppleAuthentication.signInAsync({
              requestedScopes: [
                AppleAuthentication.AppleAuthenticationScope.FULL_NAME,
                AppleAuthentication.AppleAuthenticationScope.EMAIL,
              ],
            });
            // signed in
          } catch (e) {
            if (e.code === 'ERR_REQUEST_CANCELED') {
              // handle that the user canceled the sign-in flow
            } else {
              // handle other errors
            }
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  button: {
    width: 200,
    height: 44,
  },
});
```

## Development and testing

You can test this library in Expo Go on iOS without following any of the instructions above. However, you'll need to add the config plugin to use this library if you are using EAS Build. When you sign into Expo Go, the identifiers and values you receive will likely be different than what you'll receive in standalone apps.

You can do limited testing of this library on the iOS Simulator. However, not all methods will behave the same as on a device, so we highly recommend testing on a real device when possible while developing.

## Verifying the Response from Apple

Apple's response includes a signed JWT with information about the user. To ensure that the response came from Apple, you can cryptographically verify the signature with Apple's public key, which is published at [https://appleid.apple.com/auth/keys](https://appleid.apple.com/auth/keys). This process is not specific to Expo.

## API

```
import * as AppleAuthentication from 'expo-apple-authentication';
```

## Component

### `AppleAuthenticationButton`

Type: `React.Element<[AppleAuthenticationButtonProps](#appleauthenticationbuttonprops)>`

This component displays the proprietary "Sign In with Apple" / "Continue with Apple" button on your screen. The App Store Guidelines require you to use this component to start the authentication process instead of a custom button. Limited customization of the button is available via the provided properties.

You should only attempt to render this if [`AppleAuthentication.isAvailableAsync()`](#appleauthenticationisavailableasync) resolves to `true`. This component will render nothing if it is not available, and you will get a warning in development mode (`__DEV__ === true`).

The properties of this component extend from `View`; however, you should not attempt to set `backgroundColor` or `borderRadius` with the `style` property. This will not work and is against the App Store Guidelines. Instead, you should use the `buttonStyle` property to choose one of the predefined color styles and the `cornerRadius` property to change the border radius of the button.

Make sure to attach height and width via the style props as without these styles, the button will not appear on the screen.

> See: [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidbutton) for more details.

AppleAuthenticationButtonProps

### `buttonStyle`

Type:

`[AppleAuthenticationButtonStyle](#appleauthenticationbuttonstyle)`

The Apple-defined color scheme to use to display the button.

### `buttonType`

Type:

`[AppleAuthenticationButtonType](#appleauthenticationbuttontype)`

The type of button text to display ("Sign In with Apple" vs. "Continue with Apple").

### `cornerRadius`

The border radius to use when rendering the button. This works similarly to `style.borderRadius` in other Views.

### `onPress`

The method to call when the user presses the button. You should call [`AppleAuthentication.signInAsync`](#appleauthenticationisavailableasync) in here.

### `style`

OptionalâType:

`StyleProp<[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[ViewStyle](https://reactnative.dev/docs/view-style-props), 'backgroundColor' | 'borderRadius'>>`

The custom style to apply to the button. Should not include `backgroundColor` or `borderRadius` properties.

#### Inherited Props

## Methods

### `AppleAuthentication.formatFullName(fullName, formatStyle)`

  

Creates a locale-aware string representation of a person's name from an object representing the tokenized portions of a user's full name

A locale-aware string representation of a person's name

### `AppleAuthentication.getCredentialStateAsync(user)`

  

Queries the current state of a user credential, to determine if it is still valid or if it has been revoked.

> Note: This method must be tested on a real device. On the iOS simulator it always throws an error.

A promise that fulfills with an [`AppleAuthenticationCredentialState`](#appleauthenticationcredentialstate) value depending on the state of the credential.

### `AppleAuthentication.isAvailableAsync()`

Determine if the current device's operating system supports Apple authentication.

A promise that fulfills with `true` if the system supports Apple authentication, and `false` otherwise.

### `AppleAuthentication.refreshAsync(options)`

  

An operation that refreshes the logged-in userâs credentials. Calling this method will show the sign in modal before actually refreshing the user credentials.

A promise that fulfills with an [`AppleAuthenticationCredential`](#appleauthenticationcredential) object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the refresh operation.

### `AppleAuthentication.signInAsync(options)`

  

Sends a request to the operating system to initiate the Apple authentication flow, which will present a modal to the user over your app and allow them to sign in.

You can request access to the user's full name and email address in this method, which allows you to personalize your UI for signed in users. However, users can deny access to either or both of these options at runtime.

Additionally, you will only receive Apple Authentication Credentials the first time users sign into your app, so you must store it for later use. It's best to store this information either server-side, or using [SecureStore](https://docs.expo.dev/versions/latest/sdk/securestore), so that the data persists across app installs. You can use [`AppleAuthenticationCredential.user`](#appleauthenticationcredential) to identify the user, since this remains the same for apps released by the same developer.

A promise that fulfills with an [`AppleAuthenticationCredential`](#appleauthenticationcredential) object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the sign-in operation.

### `AppleAuthentication.signOutAsync(options)`

  

An operation that ends the authenticated session. Calling this method will show the sign in modal before actually signing the user out.

It is not recommended to use this method to sign out the user as it works counterintuitively. Instead of using this method it is recommended to simply clear all the user's data collected from using [`signInAsync`](#appleauthenticationsigninasyncoptions) or [`refreshAsync`](#appleauthenticationrefreshasyncoptions) methods.

A promise that fulfills with an [`AppleAuthenticationCredential`](#appleauthenticationcredential) object after a successful authentication, and rejects with `ERR_REQUEST_CANCELED` if the user cancels the sign-out operation.

## Event Subscriptions

### `AppleAuthentication.addRevokeListener(listener)`

  

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `AppleAuthenticationCredential`

The object type returned from a successful call to [`AppleAuthentication.signInAsync()`](#appleauthenticationsigninasyncoptions), [`AppleAuthentication.refreshAsync()`](#appleauthenticationrefreshasyncoptions), or [`AppleAuthentication.signOutAsync()`](#appleauthenticationsignoutasyncoptions) which contains all of the pertinent user and credential information.

> See: [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationappleidcredential) for more details.

### `AppleAuthenticationFullName`

An object representing the tokenized portions of the user's full name. Any of all of the fields may be `null`. Only applicable fields that the user has allowed your app to access will be nonnull.

### `AppleAuthenticationFullNameFormatStyle`

Literal Type: `string`

Acceptable values are: `'default'` | `'short'` | `'medium'` | `'long'` | `'abbreviated'`

### `AppleAuthenticationRefreshOptions`

The options you can supply when making a call to [`AppleAuthentication.refreshAsync()`](#appleauthenticationrefreshasyncoptions). You must include the ID string of the user whose credentials you'd like to refresh.

> See: [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest) for more details.

### `AppleAuthenticationSignInOptions`

The options you can supply when making a call to [`AppleAuthentication.signInAsync()`](#appleauthenticationsigninasyncoptions). None of these options are required.

> See: [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest) for more details.

### `AppleAuthenticationSignOutOptions`

The options you can supply when making a call to [`AppleAuthentication.signOutAsync()`](#appleauthenticationsignoutasyncoptions). You must include the ID string of the user to sign out.

> See: [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationopenidrequest) for more details.

## Enums

### `AppleAuthenticationButtonStyle`

An enum whose values control which pre-defined color scheme to use when rendering an [`AppleAuthenticationButton`](#appleauthenticationbutton).

#### `WHITE`

`AppleAuthenticationButtonStyle.WHITE ï¼ 0`

White button with black text.

#### `WHITE_OUTLINE`

`AppleAuthenticationButtonStyle.WHITE_OUTLINE ï¼ 1`

White button with a black outline and black text.

#### `BLACK`

`AppleAuthenticationButtonStyle.BLACK ï¼ 2`

Black button with white text.

### `AppleAuthenticationButtonType`

An enum whose values control which pre-defined text to use when rendering an [`AppleAuthenticationButton`](#appleauthenticationbutton).

#### `SIGN_IN`

`AppleAuthenticationButtonType.SIGN_IN ï¼ 0`

"Sign in with Apple"

#### `CONTINUE`

`AppleAuthenticationButtonType.CONTINUE ï¼ 1`

"Continue with Apple"

#### `SIGN_UP`

`AppleAuthenticationButtonType.SIGN_UP ï¼ 2`

"Sign up with Apple"

### `AppleAuthenticationCredentialState`

#### `REVOKED`

`AppleAuthenticationCredentialState.REVOKED ï¼ 0`

#### `AUTHORIZED`

`AppleAuthenticationCredentialState.AUTHORIZED ï¼ 1`

#### `NOT_FOUND`

`AppleAuthenticationCredentialState.NOT_FOUND ï¼ 2`

#### `TRANSFERRED`

`AppleAuthenticationCredentialState.TRANSFERRED ï¼ 3`

### `AppleAuthenticationOperation`

#### `IMPLICIT`

`AppleAuthenticationOperation.IMPLICIT ï¼ 0`

An operation that depends on the particular kind of credential provider.

#### `LOGIN`

`AppleAuthenticationOperation.LOGIN ï¼ 1`

#### `REFRESH`

`AppleAuthenticationOperation.REFRESH ï¼ 2`

#### `LOGOUT`

`AppleAuthenticationOperation.LOGOUT ï¼ 3`

### `AppleAuthenticationScope`

An enum whose values specify scopes you can request when calling [`AppleAuthentication.signInAsync()`](#appleauthenticationsigninasyncoptions).

> Note that it is possible that you will not be granted all of the scopes which you request. You will still need to handle null values for any fields you request.

> See: [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asauthorizationscope) for more details.

#### `FULL_NAME`

`AppleAuthenticationScope.FULL_NAME ï¼ 0`

#### `EMAIL`

`AppleAuthenticationScope.EMAIL ï¼ 1`

### `AppleAuthenticationUserDetectionStatus`

An enum whose values specify the system's best guess for how likely the current user is a real person.

> See: [Apple Documentation](https://developer.apple.com/documentation/authenticationservices/asuserdetectionstatus) for more details.

#### `UNSUPPORTED`

`AppleAuthenticationUserDetectionStatus.UNSUPPORTED ï¼ 0`

The system does not support this determination and there is no data.

#### `UNKNOWN`

`AppleAuthenticationUserDetectionStatus.UNKNOWN ï¼ 1`

The system has not determined whether the user might be a real person.

#### `LIKELY_REAL`

`AppleAuthenticationUserDetectionStatus.LIKELY_REAL ï¼ 2`

The user appears to be a real person.

## Error codes

Most of the error codes match the official [Apple Authorization errors](https://developer.apple.com/documentation/authenticationservices/asauthorizationerror/code).

---

# application

## Expo Application

A universal library that provides information about the native application's ID, app name, and build version at runtime.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-application)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-application/CHANGELOG.md)[](https://www.npmjs.com/package/expo-application)

`expo-application` provides useful information about the native application's ID, app name, and build version at runtime.

## Installation

`npx expo install expo-application`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import * as Application from 'expo-application';
```

## Constants

### `Application.applicationId`

Type: `string | null`

The ID of the application. On Android, this is the application ID. On iOS, this is the bundle ID. On web, this is `null`.

Example

`"com.cocoacasts.scribbles"`, `"com.apple.Pages"`

### `Application.applicationName`

Type: `string | null`

The human-readable name of the application that is displayed with the app's icon on the device's home screen or desktop. On Android and iOS, this value is a `string` unless the name could not be retrieved, in which case this value will be `null`. On web this value is `null`.

Example

`"Expo"`, `"Yelp"`, `"Instagram"`

### `Application.nativeApplicationVersion`

Type: `string | null`

The human-readable version of the native application that may be displayed in the app store. At time when native app is built, on Android, this is the version name set by `version` in app config, and on iOS, the `Info.plist` value for `CFBundleShortVersionString`. On web, this value is `null`.

### `Application.nativeBuildVersion`

Type: `string | null`

The internal build version of the native application that the app stores may use to distinguish between different binaries. At the time when native app is built, On Android, this is the version code set by `android.versionCode` in app config, and on iOS, the `Info.plist` value for `CFBundleVersion` (set with `ios.buildNumber` value in app config in a standalone app). On web, this value is `null`. The return type on Android and iOS is `string`.

Example

Android: `"114"`, iOS: `"2.11.0"`

## Methods

### `Application.getAndroidId()`

Gets the value of [`Settings.Secure.ANDROID_ID`](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID). This is a hexadecimal `string` unique to each combination of app-signing key, user, and device. The value may change if a factory reset is performed on the device or if an APK signing key changes. For more information about how the platform handles `ANDROID_ID` in Android 8.0 (API level 26) and higher, see [Android 8.0 Behavior Changes](https://developer.android.com/about/versions/oreo/android-8.0-changes.html#privacy-all). On iOS and web, this function is unavailable.

> In versions of the platform lower than Android 8.0 (API level 26), this value remains constant for the lifetime of the user's device. See the [ANDROID\_ID](https://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID) official docs for more information.

Example

`"dd96dec43fb81c97"`

### `Application.getInstallationTimeAsync()`

Gets the time the app was installed onto the device, not counting subsequent updates. If the app is uninstalled and reinstalled, this method returns the time the app was reinstalled.

*   On Android, this method uses [`PackageInfo.firstInstallTime`](https://developer.android.com/reference/android/content/pm/PackageInfo.html#firstInstallTime).
*   On iOS, this method uses the [`NSFileCreationDate`](https://developer.apple.com/documentation/foundation/nsfilecreationdate?language=objc) of the app's document root directory.
*   On web, this method returns `null`.

A `Promise` that fulfills with a `Date` object that specifies the time the app was installed on the device.

Example

```
await Application.getInstallationTimeAsync();
// 2019-07-18T18:08:26.121Z
```

### `Application.getInstallReferrerAsync()`

Gets the referrer URL of the installed app with the [`Install Referrer API`](https://developer.android.com/google/play/installreferrer) from the Google Play Store. In practice, the referrer URL may not be a complete, absolute URL.

A `Promise` that fulfills with a `string` of the referrer URL of the installed app.

Example

```
await Application.getInstallReferrerAsync();
// "utm_source=google-play&utm_medium=organic"
```

### `Application.getIosApplicationReleaseTypeAsync()`

Gets the iOS application release type.

A `Promise` which fulfills with an [`ApplicationReleaseType`](#applicationreleasetype).

### `Application.getIosIdForVendorAsync()`

Gets the iOS "identifier for vendor" ([IDFV](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor)) value, a string ID that uniquely identifies a device to the appâs vendor. This method may sometimes return `nil`, in which case wait and call the method again later. This might happen when the device has been restarted before the user has unlocked the device.

The OS will change the vendor identifier if all apps from the current app's vendor have been uninstalled.

A `Promise` that fulfills with a `string` specifying the app's vendor ID. Apps from the same vendor will return the same ID. See Apple's documentation for more information about the vendor ID's semantics.

Example

```
await Application.getIosIdForVendorAsync();
// "68753A44-4D6F-1226-9C60-0050E4C00067"
```

### `Application.getIosPushNotificationServiceEnvironmentAsync()`

Gets the current [Apple Push Notification (APN)](https://developer.apple.com/documentation/bundleresources/entitlements/aps-environment?language=objc) service environment.

A `Promise` that fulfills with the string, either `'development'` or `'production'`, based on the current APN environment, or `null` on the simulator as it does not support registering with APNs.

### `Application.getLastUpdateTimeAsync()`

Gets the last time the app was updated from the Google Play Store.

A `Promise` that fulfills with a `Date` object that specifies the last time the app was updated via the Google Play Store.

Example

```
await Application.getLastUpdateTimeAsync();
// 2019-07-18T21:20:16.887Z
```

## Types

### `PushNotificationServiceEnvironment`

Literal Type: `union`

Maps to the [`aps-environment`](https://developer.apple.com/documentation/bundleresources/entitlements/aps-environment) key in the native target's registered entitlements.

Acceptable values are: `'development'` | `'production'` | `null`

## Enums

### `ApplicationReleaseType`

#### `UNKNOWN`

`ApplicationReleaseType.UNKNOWN ï¼ 0`

#### `SIMULATOR`

`ApplicationReleaseType.SIMULATOR ï¼ 1`

#### `ENTERPRISE`

`ApplicationReleaseType.ENTERPRISE ï¼ 2`

#### `DEVELOPMENT`

`ApplicationReleaseType.DEVELOPMENT ï¼ 3`

#### `AD_HOC`

`ApplicationReleaseType.AD_HOC ï¼ 4`

#### `APP_STORE`

`ApplicationReleaseType.APP_STORE ï¼ 5`

Error codes
---------------------------

---

# asset

## Expo Asset

A universal library that allows downloading assets and using them with other libraries.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-asset)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-asset/CHANGELOG.md)[](https://www.npmjs.com/package/expo-asset)

`expo-asset` provides an interface to Expo's asset system. An asset is any file that lives alongside the source code of your app that the app needs at runtime. Examples include images, fonts, and sounds. Expo's asset system integrates with React Native's, so that you can refer to files with `require('path/to/file')`. This is how you refer to static image files in React Native for use in an `Image` component, for example. Check out React Native's [documentation on static image resources](https://reactnative.dev/docs/images#static-image-resources) for more information. This method of referring to static image resources works out of the box with Expo.

## Installation

`npx expo install expo-asset`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-asset` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-asset",
        {
          "assets": ["path/to/file.png", "path/to/directory"]
        }
      ]
    ]
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `assets` | `[]` | 
An array of asset files or directories to link to the native project. The paths should be relative to the project root so that the file names, whether specified directly or using a directory, will become the resource names.

Supported file types:

*   Images: `.png`, `.jpg`, `.gif`
*   Media: `.mp4`, `.mp3`, `.lottie`, `.riv`
*   SQLite database files: `.db`

> Note: To import an existing database file (`.db`), see instructions in [SQLite API reference](https://docs.expo.dev/versions/latest/sdk/sqlite#import-an-existing-database). For other file types (such as `.lottie` or `.riv`), see [how to add a file extension to `assetExts` in metro config](https://docs.expo.dev/guides/customizing-metro#adding-more-file-extensions-to-assetexts).

 |

### Usage

Learn more about how to use the `expo-asset` config plugin to embed an asset file in your project in [Load an asset at build time](https://docs.expo.dev/develop/user-interface/assets#load-an-asset-at-build-time).

## API

```
import { Asset } from 'expo-asset';
```

## Hooks

### `useAssets(moduleIds)`

| Parameter | Type |
| --- | --- |
| moduleIds | `number | number[]` |

  

Downloads and stores one or more assets locally. After the assets are loaded, this hook returns a list of asset instances. If something went wrong when loading the assets, an error is returned.

> Note, the assets are not "reloaded" when you dynamically change the asset list.

Returns an array containing:

*   on the first position, a list of all loaded assets. If they aren't loaded yet, this value is `undefined`.
*   on the second position, an error which encountered when loading the assets. If there was no error, this value is `undefined`.

Example

```
const [assets, error] = useAssets([require('path/to/asset.jpg'), require('path/to/other.png')]);

return assets ? <Image source={assets[0]} /> : null;
```

## Classes

### `Asset`

The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its name and type) and provides facilities to load the asset data.

Asset Properties

### `downloaded`

Type:

`boolean`âDefault: `false`

Whether the asset has finished downloading from a call to [`downloadAsync()`](#downloadasync).

### `hash`

Read OnlyâLiteral type: `union`âDefault: `null`

The MD5 hash of the asset's data.

Acceptable values are: `null` | `string`

### `height`

Literal type: `union`âDefault: `null`

If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.

Acceptable values are: `null` | `number`

### `localUri`

Literal type: `union`âDefault: `null`

If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the `file://` URI pointing to the local file on the device that contains the asset data.

Acceptable values are: `null` | `string`

### `name`

The name of the asset file without the extension. Also without the part from `@` onward in the filename (used to specify scale factor for images).

### `type`

The extension of the asset filename.

### `uri`

A URI that points to the asset's data on the remote server. When running the published version of your app, this refers to the location on Expo's asset server where Expo has stored your asset. When running the app from Expo CLI during development, this URI points to Expo CLI's server running on your computer and the asset is served directly from your computer. If you are not using Classic Updates (legacy), this field should be ignored as we ensure your assets are on device before running your application logic.

### `width`

Literal type: `union`âDefault: `null`

If the asset is an image, the width of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.

Acceptable values are: `null` | `number`

Asset Methods

### `downloadAsync()`

Downloads the asset data to a local file in the device's cache directory. Once the returned promise is fulfilled without error, the [`localUri`](#localuri) field of this asset points to a local file containing the asset data. The asset is only downloaded if an up-to-date local file for the asset isn't already present due to an earlier download. The downloaded `Asset` will be returned when the promise is resolved.

Returns a Promise which fulfills with an `Asset` instance.

### `fromMetadata(meta)`

| Parameter | Type |
| --- | --- |
| meta | `[AssetMetadata](#assetmetadata)` |

  

### `fromModule(virtualAssetModule)`

| Parameter | Type | Description |
| --- | --- | --- |
| virtualAssetModule | `string | number | { height: number, uri: string, width: number }` | 
The value of `require('path/to/file')` for the asset or external network URL

 |

  

Returns the [`Asset`](#asset) instance representing an asset given its module or URL.

The [`Asset`](#asset) instance for the asset.

### `fromURI(uri)`

  

### `loadAsync(moduleId)`

| Parameter | Type | Description |
| --- | --- | --- |
| moduleId | `string | number | number[] | string[]` | 
An array of `require('path/to/file')` or external network URLs. Can also be just one module or URL without an Array.

 |

  

A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.

Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been saved to disk.

Example

```
const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));
```

## Types

### `AssetDescriptor`

| Property | Type | Description |
| --- | --- | --- |
| hash(optional) | `string | null` | 
\-

 |
| height(optional) | `number | null` | 

\-

 |
| name | `string` | 

\-

 |
| type | `string` | 

\-

 |
| uri | `string` | 

\-

 |
| width(optional) | `number | null` | 

\-

 |

### `AssetMetadata`

Type: `[Pick](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)<[PackagerAsset](https://github.com/facebook/react-native/blob/main/packages/assets/registry.js), 'httpServerLocation' | 'name' | 'hash' | 'type' | 'scales' | 'width' | 'height'>` extended by:

| Property | Type | Description |
| --- | --- | --- |
| fileHashes(optional) | `string[]` | 
\-

 |
| fileUris(optional) | `string[]` | 

\-

 |
| uri(optional) | `string` | 

\-

 |

---

# async-storage

[](https://github.com/react-native-async-storage/async-storage)

[

GitHub

](https://github.com/react-native-async-storage/async-storage)

[

npm

](https://www.npmjs.com/package/@react-native-async-storage/async-storage)

A library that provides an asynchronous, unencrypted, persistent, key-value storage API.

[

GitHub

](https://github.com/react-native-async-storage/async-storage)[

npm

](https://www.npmjs.com/package/@react-native-async-storage/async-storage)

Android

iOS

macOS

tvOS

Web

Bundled version:

2.1.2

Async Storage is asynchronous, unencrypted, persistent, key-value storage solution.

## Installation

Terminal

`npx expo install @react-native-async-storage/async-storage`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://react-native-async-storage.github.io/async-storage/docs/install#android--ios) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://react-native-async-storage.github.io/async-storage/docs/usage)

---

# audio

A library that provides an API to implement audio playback and recording in apps.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-audio)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-audio/CHANGELOG.md)[](https://www.npmjs.com/package/expo-audio)

`expo-audio` is a cross-platform audio library for accessing the native audio capabilities of the device.

Note that audio automatically stops if headphones/bluetooth audio devices are disconnected.

## Installation

`npx expo install expo-audio`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-audio` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-audio",
        {
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone."
        }
      ]
    ]
  }
}
```

### Configurable properties

## Usage

### Playing sounds

```
import { View, StyleSheet, Button } from 'react-native';
import { useAudioPlayer } from 'expo-audio';

const audioSource = require('./assets/Hello.mp3');

export default function App() {
  const player = useAudioPlayer(audioSource);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={() => player.play()} />
      <Button
        title="Replay Sound"
        onPress={() => {
          player.seekTo(0);
          player.play();
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
```

> Note: If you're migrating from [`expo-av`](https://docs.expo.dev/versions/latest/sdk/av), you'll notice that `expo-audio` doesn't automatically reset the playback position when audio finishes. After [`play()`](https://docs.expo.dev/versions/latest/sdk/audio#play), the player stays paused at the end of the sound. To play it again, call [`seekTo(seconds)`](https://docs.expo.dev/versions/latest/sdk/audio#seektoseconds) to reset the position â as shown in the example above.

### Recording sounds

```
import { useState, useEffect } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import {
  useAudioRecorder,
  AudioModule,
  RecordingPresets,
  setAudioModeAsync,
  useAudioRecorderState,
} from 'expo-audio';

export default function App() {
  const audioRecorder = useAudioRecorder(RecordingPresets.HIGH_QUALITY);
  const recorderState = useAudioRecorderState(audioRecorder);

  const record = async () => {
    await audioRecorder.prepareToRecordAsync();
    audioRecorder.record();
  };

  const stopRecording = async () => {
    // The recording will be available on `audioRecorder.uri`.
    await audioRecorder.stop();
  };

  useEffect(() => {
    (async () => {
      const status = await AudioModule.requestRecordingPermissionsAsync();
      if (!status.granted) {
        Alert.alert('Permission to access microphone was denied');
      }

      setAudioModeAsync({
        playsInSilentMode: true,
        allowsRecording: true,
      });
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Button
        title={recorderState.isRecording ? 'Stop Recording' : 'Start Recording'}
        onPress={recorderState.isRecording ? stopRecording : record}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
```

### Playing or recording audio in backgroundâ

On iOS, audio playback and recording in background is only available in standalone apps, and it requires some extra configuration. On iOS, each background feature requires a special key in `UIBackgroundModes` array in your Info.plist file. In standalone apps this array is empty by default, so to use background features you will need to add appropriate keys to your app.json configuration.

See an example of app.json that enables audio playback in background:

```
{
  "expo": {
    ...
    "ios": {
      ...
      "infoPlist": {
        ...
        "UIBackgroundModes": [
          "audio"
        ]
      }
    }
  }
}
```

### Using the AudioPlayer directly

In most cases, the [`useAudioPlayer`](https://docs.expo.dev/versions/latest/sdk/audio#useaudioplayersource-updateinterval) hook should be used to create a `AudioPlayer` instance. It manages the player's lifecycle and ensures that it is properly disposed of when the component is unmounted. However, in some advanced use cases, it might be necessary to create a `AudioPlayer` that does not get automatically destroyed when the component is unmounted. In those cases, the `AudioPlayer` can be created using the [`createAudioPlayer`](https://docs.expo.dev/versions/latest/sdk/audio#audiocreateaudioplayersource-updateinterval) function. You need be aware of the risks that come with this approach, as it is your responsibility to call the [`release()`](https://docs.expo.dev/versions/latest/sdk/expo#release) method when the player is no longer needed. If not handled properly, this approach may lead to memory leaks.

```
import { createAudioPlayer } from 'expo-audio';
const player = createAudioPlayer(audioSource);
```

### Notes on web usage

*   A MediaRecorder issue on Chrome produces WebM files missing the duration metadata. [See the open Chromium issue](https://bugs.chromium.org/p/chromium/issues/detail?id=642012).
*   MediaRecorder encoding options and other configurations are inconsistent across browsers, utilizing a Polyfill such as [kbumsik/opus-media-recorder](https://github.com/kbumsik/opus-media-recorder) or [ai/audio-recorder-polyfill](https://github.com/ai/audio-recorder-polyfill) in your application will improve your experience. Any options passed to `prepareToRecordAsync` will be passed directly to the MediaRecorder API and as such the polyfill.
*   Web browsers require sites to be served securely for them to listen to a mic. See [MediaDevices `getUserMedia()` security](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#security) for more details.

## API

```
import { useAudioPlayer, useAudioRecorder } from 'expo-audio';
```

## Constants

### `Audio.AUDIO_SAMPLE_UPDATE`

Type: `'audioSampleUpdate'`

### `Audio.PLAYBACK_STATUS_UPDATE`

Type: `'playbackStatusUpdate'`

### `Audio.RECORDING_STATUS_UPDATE`

Type: `'recordingStatusUpdate'`

### `Audio.RecordingPresets`

Type: `Record<string, [RecordingOptions](#recordingoptions)>`

Constant which contains definitions of the two preset examples of `RecordingOptions`, as implemented in the Audio SDK.

#### `HIGH_QUALITY`

```
RecordingPresets.HIGH_QUALITY = {
 extension: '.m4a',
  sampleRate: 44100,
  numberOfChannels: 2,
  bitRate: 128000,
  android: {
    outputFormat: 'mpeg4',
    audioEncoder: 'aac',
  },
  ios: {
    outputFormat: IOSOutputFormat.MPEG4AAC,
    audioQuality: AudioQuality.MAX,
    linearPCMBitDepth: 16,
    linearPCMIsBigEndian: false,
    linearPCMIsFloat: false,
  },
  web: {
    mimeType: 'audio/webm',
    bitsPerSecond: 128000,
  },
};
```

#### `LOW_QUALITY`

```
RecordingPresets.LOW_QUALITY = {
  extension: '.m4a',
  sampleRate: 44100,
  numberOfChannels: 2,
  bitRate: 64000,
  android: {
    extension: '.3gp',
    outputFormat: '3gp',
    audioEncoder: 'amr_nb',
  },
  ios: {
    audioQuality: AudioQuality.MIN,
    outputFormat: IOSOutputFormat.MPEG4AAC,
    linearPCMBitDepth: 16,
    linearPCMIsBigEndian: false,
    linearPCMIsFloat: false,
  },
  web: {
    mimeType: 'audio/webm',
    bitsPerSecond: 128000,
  },
};
```

## Hooks

### `useAudioPlayer(source, updateInterval)`

  

### `useAudioPlayerStatus(player)`

  

### `useAudioRecorder(options, statusListener)`

  

### `useAudioRecorderState(recorder, interval)`

  

### `useAudioSampleListener(player, listener)`

  

## Classes

### `AudioPlayer`

Type: Class extends `[SharedObject](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedobject)<[AudioEvents](#audioevents)>`

AudioPlayer Properties

### `currentTime`

The current position through the audio item in seconds.

### `duration`

The total duration of the audio in seconds.

### `id`

Unique identifier for the player object.

### `isAudioSamplingSupported`

Boolean value indicating whether audio sampling is supported on the platform.

### `isBuffering`

Boolean value indicating whether the player is buffering.

### `isLoaded`

Boolean value indicating whether the player is finished loading.

### `loop`

Boolean value indicating whether the player is currently looping.

### `muted`

Boolean value indicating whether the player is currently muted.

### `paused`

Boolean value indicating whether the player is currently paused.

### `playbackRate`

The current playback rate of the audio.

### `playing`

Boolean value indicating whether the player is currently playing.

### `shouldCorrectPitch`

A boolean describing if we are correcting the pitch for a changed rate.

### `volume`

The current volume of the audio.

AudioPlayer Methods

### `pause()`

### `play()`

### `remove()`

Remove the player from memory to free up resources.

### `replace(source)`

  

Replaces the current audio source with a new one.

### `seekTo(seconds)`

  

Seeks the playback by the given number of seconds.

### `setPlaybackRate(rate, pitchCorrectionQuality)`

  

Sets the current playback rate of the audio.

### `AudioRecorder`

Type: Class extends `[SharedObject](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedobject)<[RecordingEvents](#recordingevents)>`

AudioRecorder Properties

### `currentTime`

The current length of the recording, in seconds.

### `id`

Unique identifier for the recorder object.

### `isRecording`

Boolean value indicating whether the recording is in progress.

### `uri`

Literal type: `union`

The uri of the recording.

Acceptable values are: `null` | `string`

AudioRecorder Methods

### `getAvailableInputs()`

Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.

A `Promise` that is fulfilled with an array of `RecordingInput` objects.

### `getCurrentInput()`

Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.

A `Promise` that is fulfilled with a `RecordingInput` object.

### `getStatus()`

Status of the current recording.

### `pause()`

### `prepareToRecordAsync(options)`

  

Prepares the recording for recording.

### `record()`

### `recordForDuration(seconds)`

  

Stops the recording once the specified time has elapsed.

### `setInput(inputUid)`

  

Sets the current recording input.

A `Promise` that is resolved if successful or rejected if not.

### `startRecordingAtTime(seconds)`

  

Starts the recording at the given time.

### `stop()`

## Methods

### `Audio.createAudioPlayer(source, updateInterval)`

  

Creates an instance of an `AudioPlayer` that doesn't release automatically.

> For most use cases you should use the [`useAudioPlayer`](#useaudioplayersource-updateinterval) hook instead. See the [Using the `AudioPlayer` directly](#using-the-audioplayer-directly) section for more details.

### `Audio.getRecordingPermissionsAsync()`

### `Audio.requestRecordingPermissionsAsync()`

### `Audio.setAudioModeAsync(mode)`

  

### `Audio.setIsAudioActiveAsync(active)`

  

## Event Subscriptions

### `Audio.useAudioSampleListener(player, listener)`

  

## Types

### `AndroidAudioEncoder`

Literal Type: `string`

Acceptable values are: `'default'` | `'amr_nb'` | `'amr_wb'` | `'aac'` | `'he_aac'` | `'aac_eld'`

### `AndroidOutputFormat`

Literal Type: `string`

Acceptable values are: `'default'` | `'3gp'` | `'mpeg4'` | `'amrnb'` | `'amrwb'` | `'aac_adts'` | `'mpeg2ts'` | `'webm'`

### `AudioEvents`

### `AudioMode`

### `AudioSample`

### `AudioSampleChannel`

### `AudioSource`

Type: `string` or `number` or `null` or `object` shaped as below:

### `AudioStatus`

### `BitRateStrategy`

Literal Type: `string`

Acceptable values are: `'constant'` | `'longTermAverage'` | `'variableConstrained'` | `'variable'`

### `InterruptionMode`

Literal Type: `string`

Acceptable values are: `'mixWithOthers'` | `'doNotMix'` | `'duckOthers'`

### `InterruptionModeAndroid`

Literal Type: `string`

Acceptable values are: `'doNotMix'` | `'duckOthers'`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionResponse`

An object obtained by permissions get and request functions.

### `PitchCorrectionQuality`

Literal Type: `string`

Acceptable values are: `'low'` | `'medium'` | `'high'`

### `RecorderState`

### `RecordingEvents`

### `RecordingInput`

### `RecordingOptions`

### `RecordingOptionsAndroid`

### `RecordingOptionsIos`

### `RecordingOptionsWeb`

### `RecordingStatus`

## Enums

### `AudioQuality`

#### `MEDIUM`

`AudioQuality.MEDIUM ï¼ 64`

#### `HIGH`

`AudioQuality.HIGH ï¼ 96`

#### `MAX`

`AudioQuality.MAX ï¼ 127`

### `IOSOutputFormat`

#### `MPEGLAYER1`

`IOSOutputFormat.MPEGLAYER1 ï¼ ".mp1"`

#### `MPEGLAYER2`

`IOSOutputFormat.MPEGLAYER2 ï¼ ".mp2"`

#### `MPEGLAYER3`

`IOSOutputFormat.MPEGLAYER3 ï¼ ".mp3"`

#### `MPEG4AAC`

`IOSOutputFormat.MPEG4AAC ï¼ "aac "`

#### `MPEG4AAC_ELD`

`IOSOutputFormat.MPEG4AAC_ELD ï¼ "aace"`

#### `MPEG4AAC_ELD_SBR`

`IOSOutputFormat.MPEG4AAC_ELD_SBR ï¼ "aacf"`

#### `MPEG4AAC_ELD_V2`

`IOSOutputFormat.MPEG4AAC_ELD_V2 ï¼ "aacg"`

#### `MPEG4AAC_HE`

`IOSOutputFormat.MPEG4AAC_HE ï¼ "aach"`

#### `MPEG4AAC_LD`

`IOSOutputFormat.MPEG4AAC_LD ï¼ "aacl"`

#### `MPEG4AAC_HE_V2`

`IOSOutputFormat.MPEG4AAC_HE_V2 ï¼ "aacp"`

#### `MPEG4AAC_SPATIAL`

`IOSOutputFormat.MPEG4AAC_SPATIAL ï¼ "aacs"`

#### `AC3`

`IOSOutputFormat.AC3 ï¼ "ac-3"`

#### `AES3`

`IOSOutputFormat.AES3 ï¼ "aes3"`

#### `APPLELOSSLESS`

`IOSOutputFormat.APPLELOSSLESS ï¼ "alac"`

#### `ALAW`

`IOSOutputFormat.ALAW ï¼ "alaw"`

#### `AUDIBLE`

`IOSOutputFormat.AUDIBLE ï¼ "AUDB"`

#### `60958AC3`

`IOSOutputFormat.60958AC3 ï¼ "cac3"`

#### `MPEG4CELP`

`IOSOutputFormat.MPEG4CELP ï¼ "celp"`

#### `ENHANCEDAC3`

`IOSOutputFormat.ENHANCEDAC3 ï¼ "ec-3"`

#### `MPEG4HVXC`

`IOSOutputFormat.MPEG4HVXC ï¼ "hvxc"`

#### `ILBC`

`IOSOutputFormat.ILBC ï¼ "ilbc"`

#### `APPLEIMA4`

`IOSOutputFormat.APPLEIMA4 ï¼ "ima4"`

#### `LINEARPCM`

`IOSOutputFormat.LINEARPCM ï¼ "lpcm"`

#### `MACE3`

`IOSOutputFormat.MACE3 ï¼ "MAC3"`

#### `MACE6`

`IOSOutputFormat.MACE6 ï¼ "MAC6"`

#### `AMR`

`IOSOutputFormat.AMR ï¼ "samr"`

#### `AMR_WB`

`IOSOutputFormat.AMR_WB ï¼ "sawb"`

#### `DVIINTELIMA`

`IOSOutputFormat.DVIINTELIMA ï¼ 1836253201`

#### `MICROSOFTGSM`

`IOSOutputFormat.MICROSOFTGSM ï¼ 1836253233`

#### `QUALCOMM`

`IOSOutputFormat.QUALCOMM ï¼ "Qclp"`

#### `QDESIGN2`

`IOSOutputFormat.QDESIGN2 ï¼ "QDM2"`

#### `QDESIGN`

`IOSOutputFormat.QDESIGN ï¼ "QDMC"`

#### `MPEG4TWINVQ`

`IOSOutputFormat.MPEG4TWINVQ ï¼ "twvq"`

#### `ULAW`

`IOSOutputFormat.ULAW ï¼ "ulaw"`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

---

# audio-av

A library that provides an API to implement audio playback and recording in apps.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-av)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-av/CHANGELOG.md)[](https://www.npmjs.com/package/expo-av)

> Deprecated: The `Audio` component from `expo-av`, which is documented on this page, has now been deprecated and replaced by an improved version in `expo-audio`. [Learn about `expo-audio`](https://docs.expo.dev/versions/latest/sdk/audio).

`Audio` from `expo-av` allows you to implement audio playback and recording in your app.

Note that audio automatically stops if headphones/bluetooth audio devices are disconnected.

See the [playlist example app](https://github.com/expo/playlist-example) for an example on the media playback API, and the [recording example app](https://github.com/expo/audio-recording-example) for an example of the recording API.

## Installation

`npx expo install expo-av`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

### Playing sounds

```
import { useEffect, useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [sound, setSound] = useState();

  async function playSound() {
    console.log('Loading Sound');
    const { sound } = await Audio.Sound.createAsync( require('./assets/Hello.mp3')
    );
    setSound(sound);

    console.log('Playing Sound');
    await sound.playAsync();
  }

  useEffect(() => {
    return sound
      ? () => {
          console.log('Unloading Sound');
          sound.unloadAsync();
        }
      : undefined;
  }, [sound]);

  return (
    <View style={styles.container}>
      <Button title="Play Sound" onPress={playSound} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
```

### Recording sounds

```
import { useState } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Audio } from 'expo-av';

export default function App() {
  const [recording, setRecording] = useState();
  const [permissionResponse, requestPermission] = Audio.usePermissions();

  async function startRecording() {
    try {
      if (permissionResponse.status !== 'granted') {
        console.log('Requesting permission..');
        await requestPermission();
      }
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      console.log('Starting recording..');
      const { recording } = await Audio.Recording.createAsync( Audio.RecordingOptionsPresets.HIGH_QUALITY
      );
      setRecording(recording);
      console.log('Recording started');
    } catch (err) {
      console.error('Failed to start recording', err);
    }
  }

  async function stopRecording() {
    console.log('Stopping recording..');
    setRecording(undefined);
    await recording.stopAndUnloadAsync();
    await Audio.setAudioModeAsync(
      {
        allowsRecordingIOS: false,
      }
    );
    const uri = recording.getURI();
    console.log('Recording stopped and stored at', uri);
  }

  return (
    <View style={styles.container}>
      <Button
        title={recording ? 'Stop Recording' : 'Start Recording'}
        onPress={recording ? stopRecording : startRecording}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 10,
  },
});
```

### Playing or recording audio in backgroundâ

On iOS, audio playback and recording in background is only available in standalone apps, and it requires some extra configuration. On iOS, each background feature requires a special key in `UIBackgroundModes` array in your Info.plist file. In standalone apps this array is empty by default, so to use background features you will need to add appropriate keys to your app.json configuration.

See an example of app.json that enables audio playback in background:

```
{
  "expo": {
    ...
    "ios": {
      ...
      "infoPlist": {
        ...
        "UIBackgroundModes": [
          "audio"
        ]
      }
    }
  }
}
```

### Notes on web usage

*   A MediaRecorder issue on Chrome produces WebM files missing the duration metadata. [See the open Chromium issue](https://bugs.chromium.org/p/chromium/issues/detail?id=642012).
*   MediaRecorder encoding options and other configurations are inconsistent across browsers, utilizing a Polyfill such as [kbumsik/opus-media-recorder](https://github.com/kbumsik/opus-media-recorder) or [ai/audio-recorder-polyfill](https://github.com/ai/audio-recorder-polyfill) in your application will improve your experience. Any options passed to `prepareToRecordAsync` will be passed directly to the MediaRecorder API and as such the polyfill.
*   Web browsers require sites to be served securely for them to listen to a mic. See [MediaDevices `getUserMedia()` security](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#security) for more details.

## API

```
import { Audio } from 'expo-av';
```

## Constants

### `Audio.RecordingOptionsPresets`

Type: `Record<string, [RecordingOptions](#recordingoptions)>`

Constant which contains definitions of the two preset examples of `RecordingOptions`, as implemented in the Audio SDK.

#### `HIGH_QUALITY`

```
RecordingOptionsPresets.HIGH_QUALITY = {
  isMeteringEnabled: true,
  android: {
    extension: '.m4a',
    outputFormat: AndroidOutputFormat.MPEG_4,
    audioEncoder: AndroidAudioEncoder.AAC,
    sampleRate: 44100,
    numberOfChannels: 2,
    bitRate: 128000,
  },
  ios: {
    extension: '.m4a',
    outputFormat: IOSOutputFormat.MPEG4AAC,
    audioQuality: IOSAudioQuality.MAX,
    sampleRate: 44100,
    numberOfChannels: 2,
    bitRate: 128000,
    linearPCMBitDepth: 16,
    linearPCMIsBigEndian: false,
    linearPCMIsFloat: false,
  },
  web: {
    mimeType: 'audio/webm',
    bitsPerSecond: 128000,
  },
};
```

#### `LOW_QUALITY`

```
RecordingOptionsPresets.LOW_QUALITY = {
  isMeteringEnabled: true,
  android: {
    extension: '.3gp',
    outputFormat: AndroidOutputFormat.THREE_GPP,
    audioEncoder: AndroidAudioEncoder.AMR_NB,
    sampleRate: 44100,
    numberOfChannels: 2,
    bitRate: 128000,
  },
  ios: {
    extension: '.caf',
    audioQuality: IOSAudioQuality.MIN,
    sampleRate: 44100,
    numberOfChannels: 2,
    bitRate: 128000,
    linearPCMBitDepth: 16,
    linearPCMIsBigEndian: false,
    linearPCMIsFloat: false,
  },
  web: {
    mimeType: 'audio/webm',
    bitsPerSecond: 128000,
  },
};
```

## Hooks

### `usePermissions(options)`

  

Check or request permissions to record audio. This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [permissionResponse, requestPermission] = Audio.usePermissions();
```

## Classes

### `Recording`

> Warning: Experimental for web.

This class represents an audio recording. After creating an instance of this class, `prepareToRecordAsync` must be called in order to record audio. Once recording is finished, call `stopAndUnloadAsync`. Note that only one recorder is allowed to exist in the state between `prepareToRecordAsync` and `stopAndUnloadAsync` at any given time.

Note that your experience must request audio recording permissions in order for recording to function. See the [`Permissions` module](https://docs.expo.dev/guides/permissions) for more details.

Additionally, audio recording is [not supported in the iOS Simulator](https://docs.expo.dev/workflow/ios-simulator#limitations).

A newly constructed instance of `Audio.Recording`.

Example

```
const recording = new Audio.Recording();
try {
  await recording.prepareToRecordAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY);
  await recording.startAsync();
  // You are now recording!
} catch (error) {
  // An error occurred!
}
```

Recording Methods

### `createAsync(options, onRecordingStatusUpdate, progressUpdateIntervalMillis)`

  

Creates and starts a recording using the given options, with optional `onRecordingStatusUpdate` and `progressUpdateIntervalMillis`.

```
const { recording, status } = await Audio.Recording.createAsync(
  options,
  onRecordingStatusUpdate,
  progressUpdateIntervalMillis
);

// Which is equivalent to the following:
const recording = new Audio.Recording();
await recording.prepareToRecordAsync(options);
recording.setOnRecordingStatusUpdate(onRecordingStatusUpdate);
await recording.startAsync();
```

A `Promise` that is rejected if creation failed, or fulfilled with the following dictionary if creation succeeded.

Example

```
try {
  const { recording: recordingObject, status } = await Audio.Recording.createAsync(
    Audio.RecordingOptionsPresets.HIGH_QUALITY
  );
  // You are now recording!
} catch (error) {
  // An error occurred!
}
```

> Deprecated Use `createNewLoadedSoundAsync()` instead.

### `createNewLoadedSound(initialStatus, onPlaybackStatusUpdate)`

  

### `createNewLoadedSoundAsync(initialStatus, onPlaybackStatusUpdate)`

  

Creates and loads a new `Sound` object to play back the `Recording`. Note that this will only succeed once the `Recording` is done recording and `stopAndUnloadAsync()` has been called.

A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject`.

### `getAvailableInputs()`

Returns a list of available recording inputs. This method can only be called if the `Recording` has been prepared.

A `Promise` that is fulfilled with an array of `RecordingInput` objects.

### `getCurrentInput()`

Returns the currently-selected recording input. This method can only be called if the `Recording` has been prepared.

A `Promise` that is fulfilled with a `RecordingInput` object.

### `getStatusAsync()`

Gets the `status` of the `Recording`.

A `Promise` that is resolved with the `RecordingStatus` object.

### `getURI()`

Gets the local URI of the `Recording`. Note that this will only succeed once the `Recording` is prepared to record. On web, this will not return the URI until the recording is finished.

A `string` with the local URI of the `Recording`, or `null` if the `Recording` is not prepared to record (or, on Web, if the recording has not finished).

### `pauseAsync()`

Pauses recording. This method can only be called if the `Recording` has been prepared.

> This is only available on Android API version 24 and later.

A `Promise` that is fulfilled when recording has paused, or rejects if recording could not be paused. If the Android API version is less than 24, the `Promise` will reject. The promise is resolved with the `RecordingStatus` of the recording.

### `prepareToRecordAsync(options)`

  

Loads the recorder into memory and prepares it for recording. This must be called before calling `startAsync()`. This method can only be called if the `Recording` instance has never yet been prepared.

A `Promise` that is fulfilled when the recorder is loaded and prepared, or rejects if this failed. If another `Recording` exists in your experience that is currently prepared to record, the `Promise` will reject. If the `RecordingOptions` provided are invalid, the `Promise` will also reject. The promise is resolved with the `RecordingStatus` of the recording.

### `setInput(inputUid)`

  

Sets the current recording input.

A `Promise` that is resolved if successful or rejected if not.

### `setOnRecordingStatusUpdate(onRecordingStatusUpdate)`

  

Sets a function to be called regularly with the `RecordingStatus` of the `Recording`.

`onRecordingStatusUpdate` will be called when another call to the API for this recording completes (such as `prepareToRecordAsync()`, `startAsync()`, `getStatusAsync()`, or `stopAndUnloadAsync()`), and will also be called at regular intervals while the recording can record. Call `setProgressUpdateInterval()` to modify the interval with which `onRecordingStatusUpdate` is called while the recording can record.

### `setProgressUpdateInterval(progressUpdateIntervalMillis)`

  

Sets the interval with which `onRecordingStatusUpdate` is called while the recording can record. See `setOnRecordingStatusUpdate` for details. This value defaults to 500 milliseconds.

### `startAsync()`

Begins recording. This method can only be called if the `Recording` has been prepared.

A `Promise` that is fulfilled when recording has begun, or rejects if recording could not be started. The promise is resolved with the `RecordingStatus` of the recording.

### `stopAndUnloadAsync()`

Stops the recording and deallocates the recorder from memory. This reverts the `Recording` instance to an unprepared state, and another `Recording` instance must be created in order to record again. This method can only be called if the `Recording` has been prepared.

> On Android this method may fail with `E_AUDIO_NODATA` when called too soon after `startAsync` and no audio data has been recorded yet. In that case the recorded file will be invalid and should be discarded.

A `Promise` that is fulfilled when recording has stopped, or rejects if recording could not be stopped. The promise is resolved with the `RecordingStatus` of the recording.

### `Sound`

Type: Class implements `[Playback](https://docs.expo.dev/versions/latest/sdk/av#playback)`

This class represents a sound corresponding to an Asset or URL.

A newly constructed instance of `Audio.Sound`.

Example

```
const sound = new Audio.Sound();
try {
  await sound.loadAsync(require('./assets/sounds/hello.mp3'));
  await sound.playAsync();
  // Your sound is playing!

  // Don't forget to unload the sound from memory
  // when you are done using the Sound object
  await sound.unloadAsync();
} catch (error) {
  // An error occurred!
}
```

> Method not described below and the rest of the API for `Audio.Sound` is the same as the imperative playback API for `Video`. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for further information.

Sound Methods

> Deprecated Use `Sound.createAsync()` instead

### `create(source, initialStatus, onPlaybackStatusUpdate, downloadFirst)`

  

### `createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst)`

  

Creates and loads a sound from source.

```
const { sound } = await Audio.Sound.createAsync(
  source,
  initialStatus,
  onPlaybackStatusUpdate,
  downloadFirst
);

// Which is equivalent to the following:
const sound = new Audio.Sound();
sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);
await sound.loadAsync(source, initialStatus, downloadFirst);
```

A `Promise` that is rejected if creation failed, or fulfilled with the `SoundObject` if creation succeeded.

Example

```
try {
  const { sound: soundObject, status } = await Audio.Sound.createAsync(
    require('./assets/sounds/hello.mp3'),
    { shouldPlay: true }
  );
  // Your sound is playing!
} catch (error) {
  // An error occurred!
}
```

### `setOnAudioSampleReceived(callback)`

  

Sets a function to be called during playback, receiving the audio sample as parameter.

### `setOnMetadataUpdate(onMetadataUpdate)`

  

Sets a function to be called whenever the metadata of the sound object changes, if one is set.

### `setOnPlaybackStatusUpdate(onPlaybackStatusUpdate)`

  

Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.

`onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals while the media is in the loaded state.

Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify the interval with which `onPlaybackStatusUpdate` is called while loaded.

## Methods

### `Audio.getPermissionsAsync()`

Checks user's permissions for audio recording.

A promise that resolves to an object of type `PermissionResponse`.

### `Audio.requestPermissionsAsync()`

Asks the user to grant permissions for audio recording.

A promise that resolves to an object of type `PermissionResponse`.

### `Audio.setAudioModeAsync(partialMode)`

  

We provide this API to customize the audio experience on iOS and Android.

A `Promise` that will reject if the audio mode could not be enabled for the device.

### `Audio.setIsEnabledAsync(value)`

  

Audio is enabled by default, but if you want to write your own Audio API in a bare workflow app, you might want to disable the Audio API.

A `Promise` that will reject if audio playback could not be enabled for the device.

## Types

### `AudioChannel`

### `AudioMode`

### `AudioSample`

Object passed to the `onAudioSampleReceived` function. Represents a single sample from an audio source. The sample contains all frames (PCM Buffer values) for each channel of the audio, so if the audio is _stereo_ (interleaved), there will be two channels, one for left and one for right audio.

### `AudioSampleCallback`

Type: `null` or `object` shaped as below:

#### `` (sample) => `void` ``

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

An object obtained by permissions get and request functions.

### `RecordingInput`

### `RecordingObject`

### `RecordingOptions`

The recording extension, sample rate, bitrate, channels, format, encoder, etc. which can be customized by passing options to `prepareToRecordAsync()`.

We provide the following preset options for convenience, as used in the example above. See below for the definitions of these presets.

*   `Audio.RecordingOptionsPresets.HIGH_QUALITY`
*   `Audio.RecordingOptionsPresets.LOW_QUALITY`

We also provide the ability to define your own custom recording options, but we recommend you use the presets, as not all combinations of options will allow you to successfully `prepareToRecordAsync()`. You will have to test your custom options on iOS and Android to make sure it's working. In the future, we will enumerate all possible valid combinations, but at this time, our goal is to make the basic use-case easy (with presets) and the advanced use-case possible (by exposing all the functionality available on all supported platforms).

### `RecordingOptionsAndroid`

### `RecordingOptionsIOS`

### `RecordingOptionsWeb`

### `RecordingStatus`

### `SoundObject`

## Enums

### `AndroidAudioEncoder`

Defines the audio encoding.

#### `DEFAULT`

`AndroidAudioEncoder.DEFAULT ï¼ 0`

#### `AMR_NB`

`AndroidAudioEncoder.AMR_NB ï¼ 1`

AMR (Narrowband) audio codec.

#### `AMR_WB`

`AndroidAudioEncoder.AMR_WB ï¼ 2`

AMR (Wideband) audio codec.

#### `AAC`

`AndroidAudioEncoder.AAC ï¼ 3`

AAC Low Complexity (AAC-LC) audio codec.

#### `HE_AAC`

`AndroidAudioEncoder.HE_AAC ï¼ 4`

High Efficiency AAC (HE-AAC) audio codec.

#### `AAC_ELD`

`AndroidAudioEncoder.AAC_ELD ï¼ 5`

Enhanced Low Delay AAC (AAC-ELD) audio codec.

### `AndroidOutputFormat`

Defines the output format.

#### `DEFAULT`

`AndroidOutputFormat.DEFAULT ï¼ 0`

#### `THREE_GPP`

`AndroidOutputFormat.THREE_GPP ï¼ 1`

3GPP media file format.

#### `MPEG_4`

`AndroidOutputFormat.MPEG_4 ï¼ 2`

MPEG4 media file format.

#### `AMR_NB`

`AndroidOutputFormat.AMR_NB ï¼ 3`

AMR NB file format.

#### `AMR_WB`

`AndroidOutputFormat.AMR_WB ï¼ 4`

AMR WB file format.

#### `AAC_ADIF`

`AndroidOutputFormat.AAC_ADIF ï¼ 5`

#### `AAC_ADTS`

`AndroidOutputFormat.AAC_ADTS ï¼ 6`

AAC ADTS file format.

#### `RTP_AVP`

`AndroidOutputFormat.RTP_AVP ï¼ 7`

#### `MPEG2TS`

`AndroidOutputFormat.MPEG2TS ï¼ 8`

H.264/AAC data encapsulated in MPEG2/TS.

#### `WEBM`

`AndroidOutputFormat.WEBM ï¼ 9`

VP8/VORBIS data in a WEBM container.

### `InterruptionModeAndroid`

#### `DoNotMix`

`InterruptionModeAndroid.DoNotMix ï¼ 1`

If this option is set, your experience's audio interrupts audio from other apps.

#### `DuckOthers`

`InterruptionModeAndroid.DuckOthers ï¼ 2`

This is the default option. If this option is set, your experience's audio lowers the volume ("ducks") of audio from other apps while your audio plays.

### `InterruptionModeIOS`

#### `MixWithOthers`

`InterruptionModeIOS.MixWithOthers ï¼ 0`

This is the default option. If this option is set, your experience's audio is mixed with audio playing in background apps.

#### `DoNotMix`

`InterruptionModeIOS.DoNotMix ï¼ 1`

If this option is set, your experience's audio interrupts audio from other apps.

#### `DuckOthers`

`InterruptionModeIOS.DuckOthers ï¼ 2`

If this option is set, your experience's audio lowers the volume ("ducks") of audio from other apps while your audio plays.

### `IOSAudioQuality`

#### `MIN`

`IOSAudioQuality.MIN ï¼ 0`

#### `LOW`

`IOSAudioQuality.LOW ï¼ 32`

#### `MEDIUM`

`IOSAudioQuality.MEDIUM ï¼ 64`

#### `HIGH`

`IOSAudioQuality.HIGH ï¼ 96`

#### `MAX`

`IOSAudioQuality.MAX ï¼ 127`

### `IOSBitRateStrategy`

#### `CONSTANT`

`IOSBitRateStrategy.CONSTANT ï¼ 0`

#### `LONG_TERM_AVERAGE`

`IOSBitRateStrategy.LONG_TERM_AVERAGE ï¼ 1`

#### `VARIABLE_CONSTRAINED`

`IOSBitRateStrategy.VARIABLE_CONSTRAINED ï¼ 2`

#### `VARIABLE`

`IOSBitRateStrategy.VARIABLE ï¼ 3`

### `IOSOutputFormat`

> Note: Not all of the iOS formats included in this list of constants are currently supported by iOS, in spite of appearing in the Apple source code. For an accurate list of formats supported by iOS, see [Core Audio Codecs](https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html) and [iPhone Audio File Formats](https://developer.apple.com/library/content/documentation/MusicAudio/Conceptual/CoreAudioOverview/CoreAudioEssentials/CoreAudioEssentials.html).

#### `MPEGLAYER1`

`IOSOutputFormat.MPEGLAYER1 ï¼ ".mp1"`

#### `MPEGLAYER2`

`IOSOutputFormat.MPEGLAYER2 ï¼ ".mp2"`

#### `MPEGLAYER3`

`IOSOutputFormat.MPEGLAYER3 ï¼ ".mp3"`

#### `MPEG4AAC`

`IOSOutputFormat.MPEG4AAC ï¼ "aac "`

#### `MPEG4AAC_ELD`

`IOSOutputFormat.MPEG4AAC_ELD ï¼ "aace"`

#### `MPEG4AAC_ELD_SBR`

`IOSOutputFormat.MPEG4AAC_ELD_SBR ï¼ "aacf"`

#### `MPEG4AAC_ELD_V2`

`IOSOutputFormat.MPEG4AAC_ELD_V2 ï¼ "aacg"`

#### `MPEG4AAC_HE`

`IOSOutputFormat.MPEG4AAC_HE ï¼ "aach"`

#### `MPEG4AAC_LD`

`IOSOutputFormat.MPEG4AAC_LD ï¼ "aacl"`

#### `MPEG4AAC_HE_V2`

`IOSOutputFormat.MPEG4AAC_HE_V2 ï¼ "aacp"`

#### `MPEG4AAC_SPATIAL`

`IOSOutputFormat.MPEG4AAC_SPATIAL ï¼ "aacs"`

#### `AC3`

`IOSOutputFormat.AC3 ï¼ "ac-3"`

#### `AES3`

`IOSOutputFormat.AES3 ï¼ "aes3"`

#### `APPLELOSSLESS`

`IOSOutputFormat.APPLELOSSLESS ï¼ "alac"`

#### `ALAW`

`IOSOutputFormat.ALAW ï¼ "alaw"`

#### `AUDIBLE`

`IOSOutputFormat.AUDIBLE ï¼ "AUDB"`

#### `60958AC3`

`IOSOutputFormat.60958AC3 ï¼ "cac3"`

#### `MPEG4CELP`

`IOSOutputFormat.MPEG4CELP ï¼ "celp"`

#### `ENHANCEDAC3`

`IOSOutputFormat.ENHANCEDAC3 ï¼ "ec-3"`

#### `MPEG4HVXC`

`IOSOutputFormat.MPEG4HVXC ï¼ "hvxc"`

#### `ILBC`

`IOSOutputFormat.ILBC ï¼ "ilbc"`

#### `APPLEIMA4`

`IOSOutputFormat.APPLEIMA4 ï¼ "ima4"`

#### `LINEARPCM`

`IOSOutputFormat.LINEARPCM ï¼ "lpcm"`

#### `MACE3`

`IOSOutputFormat.MACE3 ï¼ "MAC3"`

#### `MACE6`

`IOSOutputFormat.MACE6 ï¼ "MAC6"`

#### `AMR`

`IOSOutputFormat.AMR ï¼ "samr"`

#### `AMR_WB`

`IOSOutputFormat.AMR_WB ï¼ "sawb"`

#### `DVIINTELIMA`

`IOSOutputFormat.DVIINTELIMA ï¼ 1836253201`

#### `MICROSOFTGSM`

`IOSOutputFormat.MICROSOFTGSM ï¼ 1836253233`

#### `QUALCOMM`

`IOSOutputFormat.QUALCOMM ï¼ "Qclp"`

#### `QDESIGN2`

`IOSOutputFormat.QDESIGN2 ï¼ "QDM2"`

#### `QDESIGN`

`IOSOutputFormat.QDESIGN ï¼ "QDMC"`

#### `MPEG4TWINVQ`

`IOSOutputFormat.MPEG4TWINVQ ï¼ "twvq"`

#### `ULAW`

`IOSOutputFormat.ULAW ï¼ "ulaw"`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

### `PitchCorrectionQuality`

#### `High`

`PitchCorrectionQuality.High ï¼ number`

Equivalent to `AVAudioTimePitchAlgorithmSpectral`.

#### `Low`

`PitchCorrectionQuality.Low ï¼ number`

Equivalent to `AVAudioTimePitchAlgorithmLowQualityZeroLatency`.

#### `Medium`

`PitchCorrectionQuality.Medium ï¼ number`

Equivalent to `AVAudioTimePitchAlgorithmTimeDomain`.

## Unified API

The rest of the API on the `Sound.Audio` is the same as the API for `Video` component `ref`. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av#playback) for more information.

---

# auth-session

## Expo AuthSession

A universal library that provides an API to handle browser-based authentication.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-auth-session)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-auth-session/CHANGELOG.md)[](https://www.npmjs.com/package/expo-auth-session)

`AuthSession` enables web browser-based authentication (for example, browser-based OAuth flows) in your app by utilizing [WebBrowser](https://docs.expo.dev/versions/latest/sdk/webbrowser) and [Crypto](https://docs.expo.dev/versions/latest/sdk/crypto). For implementation details, refer to this reference, and for usage, see the [Authentication](https://docs.expo.dev/guides/authentication) guide.

> Note: `AuthSession` enables general-purpose OAuth and OpenID Connect browser-based auth workflows. Where available, we recommend using a library supplied by your identity provider, as it will handle implementation details specific to that provider. For example, use [`@react-native-google-signin/google-signin`](https://docs.expo.dev/guides/google-authentication) for Google authentication and [`react-native-fbsdk-next`](https://docs.expo.dev/guides/facebook-authentication) for Facebook. For more information, see [Authentication](https://docs.expo.dev/develop/authentication) overview.

## Installation

> `expo-crypto` is a peer dependency and must be installed alongside `expo-auth-session`.

`npx expo install expo-auth-session expo-crypto`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration

Are you using this library in an existing React Native app?

### Usage in standalone apps

```
{
  "expo": {
    "scheme": "mycoolredirect"
  }
}
```

To be able to deep link back into your app, you will need to set a `scheme` in your project's app config, and then build your standalone app (it can't be updated with an update). If you do not include a scheme, the authentication flow will complete, but it will be unable to pass the information back into your application and the user will have to manually exit the authentication modal (resulting in a canceled event).

## Guides

> The guides have moved: [Authentication Guide](https://docs.expo.dev/guides/authentication).

## How web browser based authentication flows work

The typical flow for browser-based authentication in mobile apps is as follows:

*   Initiation: the user presses a sign in button
*   Open web browser: the app opens up a web browser to the authentication provider sign in page. The url that is opened for the sign in page usually includes information to identify the app, and a URL to redirect to on success. _Note: the web browser should share cookies with your system web browser so that users do not need to sign in again if they are already authenticated on the system browser -- Expo's [WebBrowser](https://docs.expo.dev/versions/latest/sdk/webbrowser) API takes care of this._
*   Authentication provider redirects: upon successful authentication, the authentication provider should redirect back to the application by redirecting to URL provided by the app in the query parameters on the sign in page ([read more about how linking works in mobile apps](https://docs.expo.dev/linking/overview)), _provided that the URL is in the allowlist of allowed redirect URLs_. Allowlisting redirect URLs is important to prevent malicious actors from pretending to be your application. The redirect includes data in the URL (such as user id and token), either in the location hash, query parameters, or both.
*   App handles redirect: the redirect is handled by the app and data is parsed from the redirect URL.

## Security considerations

*   Never put any secret keys inside your application code, there is no secure way to do this! Instead, you should store your secret key(s) on a server and expose an endpoint that makes API calls for your client and passes the data back.

## API

```
import * as AuthSession from 'expo-auth-session';
```

## Hooks

### `useAuthRequest(config, discovery)`

  

Load an authorization request for a code. When the prompt method completes then the response will be fulfilled.

> In order to close the popup window on web, you need to invoke `WebBrowser.maybeCompleteAuthSession()`. See the [GitHub example](https://docs.expo.dev/guides/authentication#github) for more info.

If an Implicit grant flow was used, you can pass the `response.params` to `TokenResponse.fromQueryParams()` to get a `TokenResponse` instance which you can use to easily refresh the token.

Returns a loaded request, a response, and a prompt method in a single array in the following order:

*   `request` - An instance of [`AuthRequest`](#authrequest) that can be used to prompt the user for authorization. This will be `null` until the auth request has finished loading.
*   `response` - This is `null` until `promptAsync` has been invoked. Once fulfilled it will return information about the authorization.
*   `promptAsync` - When invoked, a web browser will open up and prompt the user for authentication. Accepts an [`AuthRequestPromptOptions`](#authrequestpromptoptions) object with options about how the prompt will execute.

Example

```
const [request, response, promptAsync] = useAuthRequest({ ... }, { ... });
```

### `useAuthRequestResult(request, discovery, customOptions)`

  

### `useAutoDiscovery(issuerOrDiscovery)`

  

Given an OpenID Connect issuer URL, this will fetch and return the [`DiscoveryDocument`](#discoverydocument) (a collection of URLs) from the resource provider.

Returns `null` until the [`DiscoveryDocument`](#discoverydocument) has been fetched from the provided issuer URL.

Example

```
const discovery = useAutoDiscovery('https://example.com/auth');
```

### `useLoadedAuthRequest(config, discovery, AuthRequestInstance)`

  

## Classes

### `AccessTokenRequest`

Type: Class extends `[TokenRequest](#tokenrequest)<[AccessTokenRequestConfig](#accesstokenrequestconfig)>` implements `[AccessTokenRequestConfig](#accesstokenrequestconfig)`

Access token request. Exchange an authorization code for a user access token.

[Section 4.1.3](https://tools.ietf.org/html/rfc6749#section-4.1.3)

AccessTokenRequest Properties

### `grantType`

AccessTokenRequest Methods

### `getHeaders()`

### `getQueryBody()`

### `getRequestConfig()`

`{ clientId: string, clientSecret: undefined | string, code: string, extraParams: undefined | Record<string, string>, grantType: [GrantType](#granttype), redirectUri: string, scopes: undefined | string[] }`

### `performAsync(discovery)`

  

### `AuthError`

Type: Class extends `[ResponseError](#responseerror)`

Represents an authorization response error: [Section 5.2](https://tools.ietf.org/html/rfc6749#section-5.2). Often times providers will fail to return the proper error message for a given error code. This error method will add the missing description for more context on what went wrong.

AuthError Properties

### `code`

### `description`

Used to assist the client developer in understanding the error that occurred.

### `info`

### `params`

Type:

`Record<string, string>`

Raw results of the error.

### `state`

Required only if state is used in the initial request

### `uri`

A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.

### `AuthRequest`

Type: Class implements `[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[AuthRequestConfig](#authrequestconfig), 'state'>`

Used to manage an authorization request according to the OAuth spec: [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1). You can use this class directly for more info around the authorization.

Common use-cases:

*   Parse a URL returned from the authorization server with `parseReturnUrlAsync()`.
*   Get the built authorization URL with `makeAuthUrlAsync()`.
*   Get a loaded JSON representation of the auth request with crypto state loaded with `getAuthRequestConfigAsync()`.

Example

```
// Create a request.
const request = new AuthRequest({ ... });

// Prompt for an auth code
const result = await request.promptAsync(discovery);

// Get the URL to invoke
const url = await request.makeAuthUrlAsync(discovery);

// Get the URL to invoke
const parsed = await request.parseReturnUrlAsync("<URL From Server>");
```

AuthRequest Properties

### `codeVerifier`

### `state`

### `url`

Literal type: `union`âDefault: `null`

Acceptable values are: `null` | `string`

AuthRequest Methods

### `getAuthRequestConfigAsync()`

Load and return a valid auth request based on the input config.

### `makeAuthUrlAsync(discovery)`

  

Create the URL for authorization.

### `parseReturnUrl(url)`

  

### `promptAsync(discovery, promptOptions)`

  

Prompt a user to authorize for a code.

### `RefreshTokenRequest`

Type: Class extends `[TokenRequest](#tokenrequest)<[RefreshTokenRequestConfig](#refreshtokenrequestconfig)>` implements `[RefreshTokenRequestConfig](#refreshtokenrequestconfig)`

RefreshTokenRequest Properties

### `grantType`

RefreshTokenRequest Methods

### `getHeaders()`

### `getQueryBody()`

### `getRequestConfig()`

`{ clientId: string, clientSecret: undefined | string, extraParams: undefined | Record<string, string>, grantType: [GrantType](#granttype), refreshToken: undefined | string, scopes: undefined | string[] }`

### `performAsync(discovery)`

  

### `Request`

Request Methods

### `getQueryBody()`

### `getRequestConfig()`

### `performAsync(discovery)`

  

### `ResponseError`

Type: Class extends `CodedError`

ResponseError Properties

### `code`

### `description`

Used to assist the client developer in understanding the error that occurred.

### `info`

### `params`

Type:

`Record<string, string>`

Raw results of the error.

### `uri`

A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.

### `RevokeTokenRequest`

Type: Class extends `[Request](#request)<[RevokeTokenRequestConfig](#revoketokenrequestconfig), boolean>` implements `[RevokeTokenRequestConfig](#revoketokenrequestconfig)`

RevokeTokenRequest Methods

### `getHeaders()`

### `getQueryBody()`

### `getRequestConfig()`

`{ clientId: undefined | string, clientSecret: undefined | string, token: string, tokenTypeHint: undefined | [TokenTypeHint](#tokentypehint) }`

### `performAsync(discovery)`

  

Perform a token revocation request.

### `TokenError`

Type: Class extends `[ResponseError](#responseerror)`

TokenError Properties

### `code`

### `description`

Used to assist the client developer in understanding the error that occurred.

### `info`

### `params`

Type:

`Record<string, string>`

Raw results of the error.

### `uri`

A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.

### `TokenRequest`

Type: Class extends `[Request](#request)<T, [TokenResponse](#tokenresponse)>` implements `[TokenRequestConfig](#tokenrequestconfig)`

A generic token request.

TokenRequest Properties

### `grantType`

TokenRequest Methods

### `getHeaders()`

### `getQueryBody()`

### `getRequestConfig()`

### `performAsync(discovery)`

  

### `TokenResponse`

Type: Class implements `[TokenResponseConfig](#tokenresponseconfig)`

TokenResponse Methods

### `fromQueryParams(params)`

  

Creates a `TokenResponse` from query parameters returned from an `AuthRequest`.

### `getRequestConfig()`

### `isTokenFresh(token, secondsMargin)`

  

Determines whether a token refresh request must be made to refresh the tokens

### `refreshAsync(config, discovery)`

  

### `shouldRefresh()`

## Methods

### `AuthSession.dismiss()`

Cancels an active `AuthSession` if there is one.

### `AuthSession.exchangeCodeAsync(config, discovery)`

  

Exchange an authorization code for an access token that can be used to get data from the provider.

Returns a discovery document with a valid `tokenEndpoint` URL.

### `AuthSession.fetchDiscoveryAsync(issuer)`

  

Fetch a `DiscoveryDocument` from a well-known resource provider that supports auto discovery.

Returns a discovery document that can be used for authentication.

### `AuthSession.fetchUserInfoAsync(config, discovery)`

  

Fetch generic user info from the provider's OpenID Connect `userInfoEndpoint` (if supported).

### `AuthSession.getCurrentTimeInSeconds()`

Returns the current time in seconds.

### `AuthSession.getDefaultReturnUrl(urlPath, options)`

  

> Deprecated Use `makeRedirectUri()` instead.

### `AuthSession.getRedirectUrl(path)`

  

Get the URL that your authentication provider needs to redirect to. For example: `https://auth.expo.io/@your-username/your-app-slug`. You can pass an additional path component to be appended to the default redirect URL.

> Note This method will throw an exception if you're using the bare workflow on native.

Example

```
const url = AuthSession.getRedirectUrl('redirect');

// Managed: https://auth.expo.io/@your-username/your-app-slug/redirect
// Web: https://localhost:19006/redirect
```

### `AuthSession.issuerWithWellKnownUrl(issuer)`

  

### `AuthSession.loadAsync(config, issuerOrDiscovery)`

  

Build an `AuthRequest` and load it before returning.

Returns an instance of `AuthRequest` that can be used to prompt the user for authorization.

### `AuthSession.makeRedirectUri(options)`

  

Create a redirect url for the current platform and environment. You need to manually define the redirect that will be used in a bare workflow React Native app, or an Expo standalone app, this is because it cannot be inferred automatically.

*   Web: Generates a path based on the current `window.location`. For production web apps, you should hard code the URL as well.
*   Managed workflow: Uses the `scheme` property of your app config.
*   Bare workflow: Will fallback to using the `native` option for bare workflow React Native apps.

The `redirectUri` to use in an authentication request.

Example

```
const redirectUri = makeRedirectUri({
  scheme: 'my-scheme',
  path: 'redirect'
});
// Development Build: my-scheme://redirect
// Expo Go: exp://127.0.0.1:8081/--/redirect
// Web dev: https://localhost:19006/redirect
// Web prod: https://yourwebsite.com/redirect

const redirectUri2 = makeRedirectUri({
  scheme: 'scheme2',
  preferLocalhost: true,
  isTripleSlashed: true,
});
// Development Build: scheme2:///
// Expo Go: exp://localhost:8081
// Web dev: https://localhost:19006
// Web prod: https://yourwebsite.com
```

### `AuthSession.refreshAsync(config, discovery)`

  

Refresh an access token.

*   If the provider didn't return a `refresh_token` then the access token may not be refreshed.
*   If the provider didn't return a `expires_in` then it's assumed that the token does not expire.
*   Determine if a token needs to be refreshed via `TokenResponse.isTokenFresh()` or `shouldRefresh()` on an instance of `TokenResponse`.

Returns a discovery document with a valid `tokenEndpoint` URL.

### `AuthSession.requestAsync(requestUrl, fetchRequest)`

  

### `AuthSession.resolveDiscoveryAsync(issuerOrDiscovery)`

  

Utility method for resolving the discovery document from an issuer or object.

### `AuthSession.revokeAsync(config, discovery)`

  

Revoke a token with a provider. This makes the token unusable, effectively requiring the user to login again.

Returns a discovery document with a valid `revocationEndpoint` URL. Many providers do not support this feature.

## Types

### `AccessTokenRequestConfig`

Config used to exchange an authorization code for an access token.

Type: `[TokenRequestConfig](#tokenrequestconfig)` extended by:

### `AuthDiscoveryDocument`

Type: `[Pick](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)<[DiscoveryDocument](#discoverydocument), 'authorizationEndpoint'>`

### `AuthErrorConfig`

Type: `[ResponseErrorConfig](#responseerrorconfig)` extended by:

### `AuthRequestConfig`

Represents an OAuth authorization request as JSON.

### `AuthRequestPromptOptions`

Options passed to the `promptAsync()` method of `AuthRequest`s. This can be used to configure how the web browser should look and behave.

Type: `[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[WebBrowserOpenOptions](https://docs.expo.dev/versions/latest/sdk/webbrowser#webbrowseropenoptions), 'windowFeatures'>` extended by:

### `AuthSessionRedirectUriOptions`

Options passed to `makeRedirectUri`.

### `AuthSessionResult`

Object returned after an auth request has completed.

*   If the user cancelled the authentication session by closing the browser, the result is `{ type: 'cancel' }`.
*   If the authentication is dismissed manually with `AuthSession.dismiss()`, the result is `{ type: 'dismiss' }`.
*   If the authentication flow is successful, the result is `{ type: 'success', params: Object, event: Object }`.
*   If the authentication flow is returns an error, the result is `{ type: 'error', params: Object, error: string, event: Object }`.

Type: `object` shaped as below:

Or `object` shaped as below:

### `DiscoveryDocument`

### `FacebookAuthRequestConfig`

Type: `[ProviderAuthRequestConfig](#providerauthrequestconfig)` extended by:

### `FetchRequest`

### `GoogleAuthRequestConfig`

Type: `[ProviderAuthRequestConfig](#providerauthrequestconfig)` extended by:

### `Headers`

Type: `Record<string, string>` extended by:

### `Issuer`

URL using the `https` scheme with no query or fragment component that the OP asserts as its Issuer Identifier.

Type: `string`

### `IssuerOrDiscovery`

Literal Type: `union`

Acceptable values are: `[Issuer](#issuer)` | `[DiscoveryDocument](#discoverydocument)`

### `PromptMethod(options)`

### `ProviderAuthRequestConfig`

Type: `[AuthRequestConfig](#authrequestconfig)` extended by:

### `ProviderMetadata`

OpenID Providers have metadata describing their configuration. [ProviderMetadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)

Type: `Record<string, string | boolean | string[]>` `[ProviderMetadataEndpoints](#providermetadataendpoints)` extended by:

### `ProviderMetadataEndpoints`

### `RefreshTokenRequestConfig`

Config used to request a token refresh, or code exchange.

Type: `[TokenRequestConfig](#tokenrequestconfig)` extended by:

### `ResponseErrorConfig`

Server response error.

Type: `Record<string, any>` extended by:

### `RevokeTokenRequestConfig`

Config used to revoke a token.

Type: `[Partial](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)<[TokenRequestConfig](#tokenrequestconfig)>` extended by:

### `ServerTokenResponseConfig`

Object returned from the server after a token response.

### `TokenRequestConfig`

Config used to request a token refresh, revocation, or code exchange.

### `TokenResponseConfig`

### `TokenType`

Literal Type: `string`

Acceptable values are: `'bearer'` | `'mac'`

## Enums

### `CodeChallengeMethod`

#### `Plain`

`CodeChallengeMethod.Plain ï¼ "plain"`

This should not be used. When used, the code verifier will be sent to the server as-is.

#### `S256`

`CodeChallengeMethod.S256 ï¼ "S256"`

The default and recommended method for transforming the code verifier.

*   Convert the code verifier to ASCII.
*   Create a digest of the string using crypto method SHA256.
*   Convert the digest to Base64 and URL encode it.

### `GrantType`

Grant type values used in dynamic client registration and auth requests.

#### `AuthorizationCode`

`GrantType.AuthorizationCode ï¼ "authorization_code"`

Used for exchanging an authorization code for one or more tokens.

[Section 4.1.3](https://tools.ietf.org/html/rfc6749#section-4.1.3)

#### `ClientCredentials`

`GrantType.ClientCredentials ï¼ "client_credentials"`

#### `Implicit`

`GrantType.Implicit ï¼ "implicit"`

#### `RefreshToken`

`GrantType.RefreshToken ï¼ "refresh_token"`

Used when exchanging a refresh token for a new token.

[Section 6](https://tools.ietf.org/html/rfc6749#section-6)

### `Prompt`

Informs the server if the user should be prompted to login or consent again. This can be used to present a dialog for switching accounts after the user has already been logged in. You should use this in favor of clearing cookies (which is mostly not possible on iOS).

#### `Consent`

`Prompt.Consent ï¼ "consent"`

Server should prompt the user for consent before returning information to the client. If it cannot obtain consent, it must return an error, typically `consent_required`.

#### `Login`

`Prompt.Login ï¼ "login"`

The server should prompt the user to reauthenticate. If it cannot reauthenticate the End-User, it must return an error, typically `login_required`.

#### `None`

`Prompt.None ï¼ "none"`

Server must not display any auth or consent UI. Can be used to check for existing auth or consent. An error is returned if a user isn't already authenticated or the client doesn't have pre-configured consent for the requested claims, or does not fulfill other conditions for processing the request. The error code will typically be `login_required`, `interaction_required`, or another code defined in [Section 3.1.2.6](https://openid.net/specs/openid-connect-core-1_0.html#AuthError).

#### `SelectAccount`

`Prompt.SelectAccount ï¼ "select_account"`

Server should prompt the user to select an account. Can be used to switch accounts. If it can't obtain an account selection choice made by the user, it must return an error, typically `account_selection_required`.

### `ResponseType`

The client informs the authorization server of the desired grant type by using the response type.

#### `Code`

`ResponseType.Code ï¼ "code"`

For requesting an authorization code as described by [Section 4.1.1](https://tools.ietf.org/html/rfc6749#section-4.1.1).

#### `IdToken`

`ResponseType.IdToken ï¼ "id_token"`

A custom registered type for getting an `id_token` from Google OAuth.

#### `Token`

`ResponseType.Token ï¼ "token"`

For requesting an access token (implicit grant) as described by [Section 4.2.1](https://tools.ietf.org/html/rfc6749#section-4.2.1).

### `TokenTypeHint`

A hint about the type of the token submitted for revocation. If not included then the server should attempt to deduce the token type.

#### `AccessToken`

`TokenTypeHint.AccessToken ï¼ "access_token"`

#### `RefreshToken`

`TokenTypeHint.RefreshToken ï¼ "refresh_token"`

## Advanced usage

### Filtering out AuthSession events in Linking handlers

There are many reasons why you might want to handle inbound links into your app, such as push notifications or just regular deep linking (you can read more about this in the [Linking](https://docs.expo.dev/linking/overview)); authentication redirects are only one type of deep link, and `AuthSession` handles these particular links for you. In your own `Linking.addEventListener` handlers, you can filter out deep links that are handled by `AuthSession` by checking if the URL includes the `+expo-auth-session` string -- if it does, you can ignore it. This works because `AuthSession` adds `+expo-auth-session` to the default `returnUrl`; however, if you provide your own `returnUrl`, you may want to consider adding a similar identifier to enable you to filter out `AuthSession` events from other handlers.

### With React Navigation

If you are using deep linking with React Navigation, filtering through `Linking.addEventListener` will not be sufficient because deep linking is [handled differently](https://reactnavigation.org/docs/configuring-links/#advanced-cases). Instead, to filter these events, add a custom `getStateFromPath` function to your linking configuration, and then filter by URL in the same way as described above.

---

# av

## Expo AV

A universal library that provides separate APIs for Audio and Video playback.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-av)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-av/CHANGELOG.md)[](https://www.npmjs.com/package/expo-av)

> Deprecated: The `Video` and `Audio` APIs from `expo-av` have now been deprecated and replaced by improved versions in [`expo-video`](https://docs.expo.dev/versions/latest/sdk/video) and [`expo-audio`](https://docs.expo.dev/versions/latest/sdk/audio). We recommend using those libraries instead. `expo-av` is not receiving patches and will be removed in SDK 54.

The [`Audio.Sound`](https://docs.expo.dev/versions/latest/sdk/audio) objects and [`Video`](https://docs.expo.dev/versions/latest/sdk/video-av) components share a unified imperative API for media playback.

Note that for `Video`, all of the operations are also available via props on the component. However, we recommend using this imperative playback API for most applications where finer control over the state of the video playback is needed.

See the [playlist example app](https://github.com/expo/playlist-example) for an example on the playback API for both `Audio.Sound` and `Video`.

> Audio recording APIs are not available on tvOS (Apple TV).

## Installation

`npx expo install expo-av`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-av` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-av",
        {
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone."
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Usage

On this page, we reference operations on `playbackObject`. Here is an example of obtaining access to the reference for both sound and video:

### Example: `Audio.Sound`

```
await Audio.setAudioModeAsync({ playsInSilentModeIOS: true });

const playbackObject = new Audio.Sound();
// OR
const { sound: playbackObject } = await Audio.Sound.createAsync(
  { uri: 'http://foo/bar.mp3' },
  { shouldPlay: true }
);
```

See the [audio documentation](https://docs.expo.dev/versions/latest/sdk/audio-av) for further information on `Audio.Sound.createAsync()`.

### Example: `Video`

```
%%placeholder-start%%... %%placeholder-end%%
_handleVideoRef = component => {
  const playbackObject = component;
  ...
}
%%placeholder-start%%... %%placeholder-end%%

render() {
  return (
      <Video
        ref={this._handleVideoRef}
      />
      %%placeholder-start%%... %%placeholder-end%%
  )
}
```

See the [video documentation](https://docs.expo.dev/versions/latest/sdk/video-av) for further information.

### Example: `setOnPlaybackStatusUpdate()`

```
_onPlaybackStatusUpdate = playbackStatus => {
  if (!playbackStatus.isLoaded) {
    // Update your UI for the unloaded state
    if (playbackStatus.error) {
      console.log(`Encountered a fatal error during playback: ${playbackStatus.error}`);
      // Send Expo team the error on Slack or the forums so we can help you debug!
    }
  } else {
    // Update your UI for the loaded state

    if (playbackStatus.isPlaying) {
      // Update your UI for the playing state
    } else {
      // Update your UI for the paused state
    }

    if (playbackStatus.isBuffering) {
      // Update your UI for the buffering state
    }

    if (playbackStatus.didJustFinish && !playbackStatus.isLooping) {
      // The player has just finished playing and will stop. Maybe you want to play something else?
    }

    %%placeholder-start%%... %%placeholder-end%%
  }
};

// Load the playbackObject and obtain the reference.
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);
```

### Example: Loop media exactly 20 times

```
const N = 20;
%%placeholder-start%%... %%placeholder-end%%

_onPlaybackStatusUpdate = playbackStatus => {
  if (playbackStatus.didJustFinish) {
    if (this.state.numberOfLoops == N - 1) {
      playbackObject.setIsLooping(false);
    }
    this.setState({ numberOfLoops: this.state.numberOfLoops + 1 });
  }
};

%%placeholder-start%%... %%placeholder-end%%
this.setState({ numberOfLoops: 0 });
// Load the playbackObject and obtain the reference.
playbackObject.setOnPlaybackStatusUpdate(this._onPlaybackStatusUpdate);
playbackObject.setIsLooping(true);
```

## What is seek tolerance and why would I want to use itâ

When asked to seek an A/V item, native player in iOS sometimes may seek to a slightly different time. This technique, mentioned in [Apple documentation](https://developer.apple.com/documentation/avfoundation/avplayer/1387741-seek#discussion), is used to shorten the time of the `seekTo` call (the player may decide to play immediately from a different time than requested, instead of decoding the exact requested part and playing it with the decoding delay).

If precision is important, you can specify the tolerance with which the player will seek. However, this will result in an increased delay.

## API

```
import { Audio, Video } from 'expo-av';
```

## Constants

### `AV._DEFAULT_INITIAL_PLAYBACK_STATUS`

Type: `[AVPlaybackStatusToSet](https://docs.expo.dev/versions/latest/sdk/av#avplaybackstatustoset)`

The default initial `AVPlaybackStatusToSet` of all `Audio.Sound` objects and `Video` components is as follows:

```
{
  progressUpdateIntervalMillis: 500,
  positionMillis: 0,
  shouldPlay: false,
  rate: 1.0,
  shouldCorrectPitch: false,
  volume: 1.0,
  isMuted: false,
  isLooping: false,
}
```

This default initial status can be overwritten by setting the optional `initialStatus` in `loadAsync()` or `Audio.Sound.createAsync()`.

## Interfaces

### `AV`

AV Methods

### `getStatusAsync()`

Gets the `AVPlaybackStatus` of the `playbackObject`.

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject`.

### `setStatusAsync(status)`

  

Sets a new `AVPlaybackStatusToSet` on the `playbackObject`. This method can only be called if the media has been loaded.

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully, or rejects if setting the new status failed. See below for details on `AVPlaybackStatus`.

### `Playback`

Extends: `[AV](#av)`

On the `playbackObject` reference, the following API is provided.

Playback Methods

### `loadAsync(source, initialStatus, downloadAsync)`

  

Loads the media from `source` into memory and prepares it for playing. This must be called before calling `setStatusAsync()` or any of the convenience set status methods. This method can only be called if the `playbackObject` is in an unloaded state.

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is loaded, or rejects if loading failed. The `Promise` will also reject if the `playbackObject` was already loaded. See below for details on `AVPlaybackStatus`.

### `pauseAsync()`

This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false })`.

### `playAsync()`

This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true })`.

Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.

### `playFromPositionAsync(positionMillis, tolerances)`

  

This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: true, positionMillis, seekMillisToleranceAfter: tolerances.seekMillisToleranceAfter, seekMillisToleranceBefore: tolerances.seekMillisToleranceBefore })`.

Playback may not start immediately after calling this function for reasons such as buffering. Make sure to update your UI based on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`.

### `replayAsync(status)`

  

Replays the playback item. When using `playFromPositionAsync(0)` the item is seeked to the position at `0 ms`. On iOS this method uses internal implementation of the player and is able to play the item from the beginning immediately.

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once the new status has been set successfully, or rejects if setting the new status failed.

### `setIsLoopingAsync(isLooping)`

  

This is equivalent to `playbackObject.setStatusAsync({ isLooping })`.

### `setIsMutedAsync(isMuted)`

  

This is equivalent to `playbackObject.setStatusAsync({ isMuted })`.

### `setPositionAsync(positionMillis, tolerances)`

  

This is equivalent to `playbackObject.setStatusAsync({ positionMillis })`.

### `setProgressUpdateIntervalAsync(progressUpdateIntervalMillis)`

  

This is equivalent to `playbackObject.setStatusAsync({ progressUpdateIntervalMillis })`.

### `setRateAsync(rate, shouldCorrectPitch, pitchCorrectionQuality)`

  

This is equivalent to `playbackObject.setStatusAsync({ rate, shouldCorrectPitch, pitchCorrectionQuality })`.

### `setVolumeAsync(volume, audioPan)`

  

This is equivalent to `playbackObject.setStatusAsync({ volume, audioPan })`. Note: `audioPan` is currently only supported on Android using `androidImplementation: 'MediaPlayer'`

### `stopAsync()`

This is equivalent to `playbackObject.setStatusAsync({ shouldPlay: false, positionMillis: 0 })`.

### `unloadAsync()`

Unloads the media from memory. `loadAsync()` must be called again in order to be able to play the media.

> This cleanup function will be automatically called in the `Video` component's `componentWillUnmount`.

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the `playbackObject` once it is unloaded, or rejects if unloading failed.

## Types

### `AVMetadata`

Object passed to the `onMetadataUpdate` function.

### `AVPlaybackSource`

Literal Type: `union`

The following forms of source are supported:

*   A dictionary of the form `AVPlaybackSourceObject`. The `overrideFileExtensionAndroid` property may come in handy if the player receives an URL like `example.com/play` which redirects to `example.com/player.m3u8`. Setting this property to `m3u8` would allow the Android player to properly infer the content type of the media and use proper media file reader.
*   `require('path/to/file')` for a media file asset in the source code directory.
*   An [`Asset`](https://docs.expo.dev/versions/latest/sdk/asset) object for a media file asset.

The [iOS developer documentation](https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/OSX_Technology_Overview/MediaLayer/MediaLayer.html) lists the audio and video formats supported on iOS.

There are two sets of audio and video formats supported on Android: [formats supported by ExoPlayer](https://exoplayer.dev/supported-formats.html) and [formats supported by Android's MediaPlayer](https://developer.android.com/guide/topics/media/platform/supported-formats#formats-table). Expo uses ExoPlayer implementation by default. To use `MediaPlayer`, add `androidImplementation: 'MediaPlayer'` to the initial status of the AV object.

Acceptable values are: `number` | `[AVPlaybackSourceObject](#avplaybacksourceobject)` | `[Asset](https://docs.expo.dev/versions/latest/sdk/asset#asset)`

### `AVPlaybackSourceObject`

One of the possible forms of the `AVPlaybackSource`.

### `AVPlaybackStatus`

Literal Type: `union`

This is the structure returned from all playback API calls and describes the state of the `playbackObject` at that point in time. It can take a form of `AVPlaybackStatusSuccess` or `AVPlaybackStatusError` based on the `playbackObject` load status.

Acceptable values are: `[AVPlaybackStatusError](#avplaybackstatuserror)` | `[AVPlaybackStatusSuccess](#avplaybackstatussuccess)`

### `AVPlaybackStatusError`

### `AVPlaybackStatusSuccess`

### `AVPlaybackStatusToSet`

This is the structure passed to `setStatusAsync()` to modify the state of the `playbackObject`.

### `AVPlaybackTolerance`

## Enums

### `PitchCorrectionQuality`

#### `High`

`PitchCorrectionQuality.High ï¼ number`

Equivalent to `AVAudioTimePitchAlgorithmSpectral`.

#### `Low`

`PitchCorrectionQuality.Low ï¼ number`

Equivalent to `AVAudioTimePitchAlgorithmLowQualityZeroLatency`.

#### `Medium`

`PitchCorrectionQuality.Medium ï¼ number`

Equivalent to `AVAudioTimePitchAlgorithmTimeDomain`.

## Permissions

### Android

You must add the following permissions to your app.json inside the [`expo.android.permissions`](https://docs.expo.dev/versions/latest/config/app#permissions) array.

### iOS

The following usage description keys are used by this library:

---

# background-fetch

A library that provides API for performing background fetch tasks.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-background-fetch)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-background-fetch/CHANGELOG.md)[](https://www.npmjs.com/package/expo-background-fetch)

> Deprecated: The `expo-background-fetch` library is being replaced by a new version in [`expo-background-task`](https://docs.expo.dev/versions/latest/sdk/background-task). `expo-background-fetch` is not receiving patches and will be removed in an upcoming release.

`expo-background-fetch` provides an API to perform [background fetch](https://developer.apple.com/documentation/uikit/core_app/managing_your_app_s_life_cycle/preparing_your_app_to_run_in_the_background/updating_your_app_with_background_app_refresh) tasks, allowing you to run specific code periodically in the background to update your app. This module uses [TaskManager](https://docs.expo.dev/versions/latest/sdk/task-manager) Native API under the hood.

#### Known issuesâ

`BackgroundFetch` only works when the app is backgrounded, not if the app was terminated or upon device reboot. You can check out [the relevant GitHub issue](https://github.com/expo/expo/issues/3582) for more details.

On iOS the `BackgroundFetch` library requires you to use a [development build](https://docs.expo.dev/develop/development-builds/introduction) since Background Fetch is not enabled in the iOS Expo Go app.

## Installation

`npx expo install expo-background-fetch`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configurationâ

To be able to run background fetch tasks on iOS, you need to add the `fetch` value to the `UIBackgroundModes` array in your app's Info.plist file. This is required for background fetch to work properly.

If you're using [CNG](https://docs.expo.dev/workflow/continuous-native-generation), the required `UIBackgroundModes` configuration will be applied automatically by prebuild.

Configure UIBackgroundModes manually on iOS

## Usage

Below is an example that demonstrates how to use `expo-background-fetch`.

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

const BACKGROUND_FETCH_TASK = 'background-fetch';

// 1. Define the task by providing a name and the function that should be executed
// Note: This needs to be called in the global scope (e.g outside of your React components)
TaskManager.defineTask(BACKGROUND_FETCH_TASK, async () => {
  const now = Date.now();

  console.log(`Got background fetch call at date: ${new Date(now).toISOString()}`);

  // Be sure to return the successful result type!
  return BackgroundFetch.BackgroundFetchResult.NewData;
});

// 2. Register the task at some point in your app by providing the same name,
// and some configuration options for how the background fetch should behave
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 60 * 15, // 15 minutes
    stopOnTerminate: false, // android only,
    startOnBoot: true, // android only
  });
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background fetch calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundFetchAsync() {
  return BackgroundFetch.unregisterTaskAsync(BACKGROUND_FETCH_TASK);
}

export default function BackgroundFetchScreen() {
  const [isRegistered, setIsRegistered] = useState(false);
  const [status, setStatus] = useState(null);

  useEffect(() => {
    checkStatusAsync();
  }, []);

  const checkStatusAsync = async () => {
    const status = await BackgroundFetch.getStatusAsync();
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_FETCH_TASK);
    setStatus(status);
    setIsRegistered(isRegistered);
  };

  const toggleFetchTask = async () => {
    if (isRegistered) {
      await unregisterBackgroundFetchAsync();
    } else {
      await registerBackgroundFetchAsync();
    }

    checkStatusAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background fetch status:{' '}
          <Text style={styles.boldText}>
            {status && BackgroundFetch.BackgroundFetchStatus[status]}
          </Text>
        </Text>
        <Text>
          Background fetch task name:{' '}
          <Text style={styles.boldText}>
            {isRegistered ? BACKGROUND_FETCH_TASK : 'Not registered yet!'}
          </Text>
        </Text>
      </View>
      <View style={styles.textContainer}></View>
      <Button
        title={isRegistered ? 'Unregister BackgroundFetch task' : 'Register BackgroundFetch task'}
        onPress={toggleFetchTask}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});
```

## Triggering background fetches

Background fetches can be difficult to test because they can happen inconsistently. Fortunately, you can trigger background fetches manually when developing your apps.

For iOS, you can use the `Instruments` app on macOS to manually trigger background fetches:

1.  Open the Instruments app. The Instruments app can be searched through Spotlight (â + Space) or opened from `/Applications/Xcode.app/Contents/Applications/Instruments.app`
2.  Select `Time Profiler`
3.  Select your device / simulator and pick the `Expo Go` app
4.  Press the `Record` button in the top left corner
5.  Navigate to the `Document` Menu and select `Simulate Background Fetch - Expo Go`:

For Android, you can set the `minimumInterval` option of your task to a small number and background your application like so:

```
async function registerBackgroundFetchAsync() {
  return BackgroundFetch.registerTaskAsync(BACKGROUND_FETCH_TASK, {
    minimumInterval: 1 * 60, // task will fire 1 minute after app is backgrounded
  });
}
```

## API

```
import * as BackgroundFetch from 'expo-background-fetch';
```

## Methods

> Deprecated Use [`getStatusAsync()`](https://docs.expo.dev/versions/latest/sdk/background-task#backgroundtaskgetstatusasync) from `expo-background-task` instead. The `expo-background-fetch` package has been deprecated.

### `BackgroundFetch.getStatusAsync()`

Gets a status of background fetch.

Returns a promise which fulfils with one of `BackgroundFetchStatus` enum values.

> Deprecated Use [`registerTaskAsync()`](https://docs.expo.dev/versions/latest/sdk/background-task#backgroundtaskregistertaskasynctaskname-options) from `expo-background-task` instead. The `expo-background-fetch` package has been deprecated.

### `BackgroundFetch.registerTaskAsync(taskName, options)`

  

Registers background fetch task with given name. Registered tasks are saved in persistent storage and restored once the app is initialized.

Example

```
import * as BackgroundFetch from 'expo-background-fetch';
import * as TaskManager from 'expo-task-manager';

TaskManager.defineTask(YOUR_TASK_NAME, () => {
  try {
    const receivedNewData = // do your background fetch here
    return receivedNewData ? BackgroundFetch.BackgroundFetchResult.NewData : BackgroundFetch.BackgroundFetchResult.NoData;
  } catch (error) {
    return BackgroundFetch.BackgroundFetchResult.Failed;
  }
});
```

### `BackgroundFetch.setMinimumIntervalAsync(minimumInterval)`

  

Sets the minimum number of seconds that must elapse before another background fetch can be initiated. This value is advisory only and does not indicate the exact amount of time expected between fetch operations.

> This method doesn't take any effect on Android. It is a global value which means that it can overwrite settings from another application opened through Expo Go.

A promise which fulfils once the minimum interval is set.

> Deprecated Use [`unregisterTaskAsync()`](https://docs.expo.dev/versions/latest/sdk/background-task#backgroundtaskunregistertaskasynctaskname) from `expo-background-task` instead. The `expo-background-fetch` package has been deprecated.

### `BackgroundFetch.unregisterTaskAsync(taskName)`

  

Unregisters background fetch task, so the application will no longer be executing this task.

A promise which fulfils when the task is fully unregistered.

## Interfaces

### `BackgroundFetchOptions`

## Enums

### `BackgroundFetchResult`

This return value is to let iOS know what the result of your background fetch was, so the platform can better schedule future background fetches. Also, your app has up to 30 seconds to perform the task, otherwise your app will be terminated and future background fetches may be delayed.

#### `NoData`

`BackgroundFetchResult.NoData ï¼ 1`

There was no new data to download.

#### `NewData`

`BackgroundFetchResult.NewData ï¼ 2`

New data was successfully downloaded.

#### `Failed`

`BackgroundFetchResult.Failed ï¼ 3`

An attempt to download data was made but that attempt failed.

### `BackgroundFetchStatus`

#### `Denied`

`BackgroundFetchStatus.Denied ï¼ 1`

The user explicitly disabled background behavior for this app or for the whole system.

#### `Restricted`

`BackgroundFetchStatus.Restricted ï¼ 2`

Background updates are unavailable and the user cannot enable them again. This status can occur when, for example, parental controls are in effect for the current user.

#### `Available`

`BackgroundFetchStatus.Available ï¼ 3`

Background updates are available for the app.

## Permissions

### Android

On Android, this module might listen when the device is starting up. It's necessary to continue working on tasks started with `startOnBoot`. It also keeps devices "awake" that are going idle and asleep fast, to improve reliability of the tasks. Because of this both the `RECEIVE_BOOT_COMPLETED` and `WAKE_LOCK` permissions are added automatically.

---

# background-task

A library that provides an API for running background tasks.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-background-task)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-background-task/CHANGELOG.md)[](https://www.npmjs.com/package/expo-background-task)

`expo-background-task` provides an API to run deferrable background tasks in a way that optimizes battery and power consumption on the end user's device. This module uses the [`WorkManager`](https://developer.android.com/topic/libraries/architecture/workmanager) API on Android and the [`BGTaskScheduler`](https://developer.apple.com/documentation/backgroundtasks/bgtaskscheduler) API on iOS to schedule tasks. It also uses the [`expo-task-manager`](https://docs.expo.dev/versions/latest/sdk/task-manager) Native API to run JavaScript tasks.

[

Watch: Expo Background Task Deep Dive

](https://www.youtube.com/watch?v=4lFus7TvayI)

## Background tasks

A background task is a deferrable unit of work that is performed in the background, outside your app's lifecycle. This is useful for tasks that need to be executed when the app is inactive, such as syncing data with a server, fetching new content, or even checking if there are any [`expo-updates`](https://docs.expo.dev/versions/latest/sdk/updates).

### When are background tasks run?

The Expo Background Task API leverages each platform to execute tasks at the most optimal time for both the user and the device when the app is in the background.

This means that the task may not run immediately after it is scheduled, but it will run at some point in the future if the system decides so. You can specify a minimum interval in minutes for the task to run. The task will execute sometime after the interval has passed, provided the specified conditions are met.

A background task will only run if the battery has enough charge (or the device is plugged into power) and the network is available. Without these conditions, the task won't execute. The exact behavior will vary depending on the operating system.

### When will they be stopped?

Background tasks are managed by platform APIs and system constraints. Knowing when tasks stop helps plan their use effectively.

*   Background tasks are stopped if the user kills the app. Tasks resume when the app is restarted.
*   If the system stops the app or the device reboots, background tasks will resume, and the app will be restarted.

On Android, removing an app from the recent apps list doesn't completely stop it, whereas on iOS, swiping it away in the app switcher fully terminates it.

> On Android, behavior varies by device vendor. For example, some implementations treat removing an app from the recent apps list as killing it. Read more about these differences here: [https://dontkillmyapp.com](https://dontkillmyapp.com/).

## Platform differences

### Androidâ

On Android, the [`WorkManager`](https://developer.android.com/topic/libraries/architecture/workmanager) API allows specifying a minimum interval for a task to run (minimum 15 minutes). The task will execute sometime after the interval has passed, provided the specified conditions are met.

### iOSâ

On iOS, the [`BGTaskScheduler`](https://developer.apple.com/documentation/backgroundtasks/bgtaskscheduler) API decides the best time to launch your background task. The system will consider the battery level, the network availability, and the user's usage patterns to determine when to run the task. You can still specify a minimum interval for the task to run, but the system may choose to run the task at a later time.

## Known limitations

### iOSâ

The [`Background Tasks`](https://developer.apple.com/documentation/backgroundtasks) API is unavailable on iOS simulators. It is only available when running on a physical device.

## Installation

`npx expo install expo-background-task`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configurationâ

To be able to run background tasks on iOS, you need to add the `processing` value to the `UIBackgroundModes` array in your app's Info.plist file. This is required for background fetch to work properly.

If you're using [CNG](https://docs.expo.dev/workflow/continuous-native-generation), the required `UIBackgroundModes` configuration will be applied automatically by prebuild.

Configure UIBackgroundModes manually on iOS

## Usage

Below is an example that demonstrates how to use `expo-background-task`.

```
import * as BackgroundTask from 'expo-background-task';
import * as TaskManager from 'expo-task-manager';
import { useEffect, useState } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';

const BACKGROUND_TASK_IDENTIFIER = 'background-task';

// Register and create the task so that it is available also when the background task screen
// (a React component defined later in this example) is not visible.
// Note: This needs to be called in the global scope, not in a React component.
TaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, async () => {
  try {
    const now = Date.now();
    console.log(`Got background task call at date: ${new Date(now).toISOString()}`);
  } catch (error) {
    console.error('Failed to execute the background task:', error);
    return BackgroundTask.BackgroundTaskResult.Failed;
  }
  return BackgroundTask.BackgroundTaskResult.Success;
});

// 2. Register the task at some point in your app by providing the same name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function registerBackgroundTaskAsync() {
  return BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

// 3. (Optional) Unregister tasks by specifying the task name
// This will cancel any future background task calls that match the given name
// Note: This does NOT need to be in the global scope and CAN be used in your React components!
async function unregisterBackgroundTaskAsync() {
  return BackgroundTask.unregisterTaskAsync(BACKGROUND_TASK_IDENTIFIER);
}

export default function BackgroundTaskScreen() {
  const [isRegistered, setIsRegistered] = useState<boolean>(false);
  const [status, setStatus] = useState<BackgroundTask.BackgroundTaskStatus | null>(null);

  useEffect(() => {
    updateAsync();
  }, []);

  const updateAsync = async () => {
    const status = await BackgroundTask.getStatusAsync();
    setStatus(status);
    const isRegistered = await TaskManager.isTaskRegisteredAsync(BACKGROUND_TASK_IDENTIFIER);
    setIsRegistered(isRegistered);
  };

  const toggle = async () => {
    if (!isRegistered) {
      await registerBackgroundTaskAsync();
    } else {
      await unregisterBackgroundTaskAsync();
    }
    await updateAsync();
  };

  return (
    <View style={styles.screen}>
      <View style={styles.textContainer}>
        <Text>
          Background Task Service Availability:{' '}
          <Text style={styles.boldText}>
            {status ? BackgroundTask.BackgroundTaskStatus[status] : null}
          </Text>
        </Text>
      </View>
      <Button
        disabled={status === BackgroundTask.BackgroundTaskStatus.Restricted}
        title={isRegistered ? 'Cancel Background Task' : 'Schedule Background Task'}
        onPress={toggle}
      />
      <Button title="Check Background Task Status" onPress={updateAsync} />
    </View>
  );
}

const styles = StyleSheet.create({
  screen: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  textContainer: {
    margin: 10,
  },
  boldText: {
    fontWeight: 'bold',
  },
});
```

## Multiple background tasks

Since the Background Tasks API on iOS and the WorkManager API on Android limit the number of tasks that can be scheduled for a single app, Expo Background Task uses a single worker on both platforms. While you can define multiple JavaScript background tasks, they will all run through this single worker.

The last registered background task determines the minimum interval for execution.

## Testing background tasks

Background tasks can be tested using the [`triggerTaskWorkerForTestingAsync`](https://docs.expo.dev/versions/latest/sdk/background-task#backgroundtasktriggertaskworkerfortestingasync) method. This method will run all registered tasks directly on Android and invoke the `BGTaskScheduler` on iOS. This is useful for testing the behavior of your background tasks without having to wait for the system to trigger them.

This method is only available in development mode. It will not work in production builds.

```
import * as BackgroundTask from 'expo-background-task';
import { Button } from 'react-native';

function App() {
  const triggerTask = async () => {
    await BackgroundTask.triggerTaskWorkerForTestingAsync();
  };

  return <Button title="Trigger Background Task" onPress={triggerTask} />;
}
```

## Inspecting background tasksâ

To troubleshoot or debug issues with background tasks on Android, use the `adb` tool included with the Android SDK to inspect scheduled tasks:

`-`Â `adb shell dumpsys jobscheduler | grep -A 40 -m 1 -E "JOB #.* <package-name>`

The output from this command will show you the scheduled tasks for your app, including their status, constraints, and other information. Look for the `JOB` line to find the ID of the job and other details in the output:

```
JOB #u0a453/275: 216a359 <package-name>/androidx.work.impl.background.systemjob.SystemJobService
  u0a453 tag=*job*/<package-name>/androidx.work.impl.background.systemjob.SystemJobService#275
  Source: uid=u0a453 user=0 pkg=<package-name>
  ...
  Required constraints: TIMING_DELAY CONNECTIVITY UID_NOT_RESTRICTED [0x90100000]
  Preferred constraints:
  Dynamic constraints:
  Satisfied constraints: CONNECTIVITY DEVICE_NOT_DOZING BACKGROUND_NOT_RESTRICTED TARE_WEALTH WITHIN_QUOTA UID_NOT_RESTRICTED [0x1b500000]
  Unsatisfied constraints: TIMING_DELAY [0x80000000]
  ...
  Enqueue time: -8m12s280ms
  Run time: earliest=+6m47s715ms, latest=none, original latest=none
  Restricted due to: none.
  Ready: false (job=false user=true !restricted=true !pending=true !active=true !backingup=true comp=true)
```

The first line contains the Job ID (275). The `Run time: earliest` value indicates the earliest time the task may start, while `enqueue time` shows how long ago the task was scheduled.

To force a task to run, use the `adb shell am broadcast` command. Move your app to the background before running this command, as the task will not run if the app is in the foreground.

`-`Â `adb shell cmd jobscheduler run -f <package-name> <JOB_ID>`

Where `JOB_ID` would be the identifier of the job you want to run that you found in the previous step.

## Troubleshooting background tasksâ

iOS does not have a tool similar to `adb` for inspecting background tasks. To test background tasks on iOS, use the built-in [`triggerTaskWorkerForTestingAsync`](https://docs.expo.dev/versions/latest/sdk/background-task#backgroundtasktriggertaskworkerfortestingasync) method. This method simulates the system triggering the task.

You can trigger this method from your app in debug mode (it does not work in production builds) to test the behavior of your background tasks without waiting for the system. If your background task configuration is incorrect, you will see the error description in the Xcode console:

```
No task request with identifier com.expo.modules.backgroundtask.processing has been scheduled
```

The above error tells you that you need to run prebuild to apply the changes to your app's configuration.

This error also means you must run prebuild to apply your background task configuration to the app. Additionally, ensure you have defined and registered a background task as shown in [this example](https://docs.expo.dev/versions/latest/sdk/background-task#usage).

## API

```
import * as BackgroundTask from 'expo-background-task';
```

## Methods

### `BackgroundTask.getStatusAsync()`

Returns the status for the Background Task API. On web, it always returns `BackgroundTaskStatus.Restricted`, while on native platforms it returns `BackgroundTaskStatus.Available`.

A BackgroundTaskStatus enum value or `null` if not available.

### `BackgroundTask.registerTaskAsync(taskName, options)`

  

Registers a background task with the given name. Registered tasks are saved in persistent storage and restored once the app is initialized.

Example

```
import * as TaskManager from 'expo-task-manager';

// Register the task outside of the component
TaskManager.defineTask(BACKGROUND_TASK_IDENTIFIER, () => {
  try {
    await AsyncStorage.setItem(LAST_TASK_DATE_KEY, Date.now().toString());
  } catch (error) {
    console.error('Failed to save the last fetch date', error);
    return BackgroundTaskResult.Failed;
  }
  return BackgroundTaskResult.Success;
});
```

You can now use the `registerTaskAsync` function to register the task:

```
BackgroundTask.registerTaskAsync(BACKGROUND_TASK_IDENTIFIER, {});
```

### `BackgroundTask.triggerTaskWorkerForTestingAsync()`

When in debug mode this function will trigger running the background tasks. This function will only work for apps built in debug mode. @todo(chrfalch): When we have a usable devtools plugin we can enable this function.

A promise which fulfils when the task is triggered.

### `BackgroundTask.unregisterTaskAsync(taskName)`

  

Unregisters a background task, so the application will no longer be executing this task.

A promise which fulfils when the task is fully unregistered.

## Types

### `BackgroundTaskOptions`

Options for registering a background task

## Enums

### `BackgroundTaskResult`

Return value for background tasks.

#### `Success`

`BackgroundTaskResult.Success ï¼ 1`

The task finished successfully.

#### `Failed`

`BackgroundTaskResult.Failed ï¼ 2`

The task failed.

### `BackgroundTaskStatus`

Availability status for background tasks

#### `Restricted`

`BackgroundTaskStatus.Restricted ï¼ 1`

Background tasks are unavailable.

#### `Available`

`BackgroundTaskStatus.Available ï¼ 2`

Background tasks are available for the app.

---

# barometer

```
import { useState } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { Barometer } from 'expo-sensors';

export default function App() {
  const [{ pressure, relativeAltitude }, setData] = useState({ pressure: 0, relativeAltitude: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggleListener = () => {
    subscription ? unsubscribe() : subscribe();
  };

  const subscribe = () => {
    setSubscription(Barometer.addListener(setData));
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  return (
    <View style={styles.wrapper}>
      <Text>Barometer: Listener {subscription ? 'ACTIVE' : 'INACTIVE'}</Text>
      <Text>Pressure: {pressure} hPa</Text>
      <Text>
        Relative Altitude:{' '}
        {Platform.OS === 'ios' ? `${relativeAltitude} m` : `Only available on iOS`}
      </Text>
      <TouchableOpacity onPress={toggleListener} style={styles.button}>
        <Text>Toggle listener</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  button: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
    marginTop: 15,
  },
  wrapper: {
    flex: 1,
    alignItems: 'stretch',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
});
```


---

# battery

## Expo Battery

A library that provides battery information for the physical device, as well as corresponding event listeners.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-battery)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-battery/CHANGELOG.md)[](https://www.npmjs.com/package/expo-battery)

`expo-battery` provides battery information for the physical device (such as battery level, whether or not the device is charging, and more) as well as corresponding event listeners.

## Installation

`npx expo install expo-battery`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { useBatteryLevel } from 'expo-battery';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const batteryLevel = useBatteryLevel();

  return (
    <View style={styles.container}>
      <Text>Current Battery Level: {batteryLevel}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
```

## API

```
import * as Battery from 'expo-battery';
```

## Hooks

### `useBatteryLevel()`

Gets the device's battery level, as in [`getBatteryLevelAsync`](#getbatterylevelasync).

The battery level of the device.

Example

```
const batteryLevel = useBatteryLevel();
```

### `useBatteryState()`

Gets the device's battery state, as in [`getBatteryStateAsync`](#getbatterystateasync).

The battery state of the device.

Example

```
const batteryState = useBatteryState();
```

### `useLowPowerMode()`

Boolean that indicates if the device is in low power or power saver mode, as in [`isLowPowerModeEnabledAsync`](#islowpowermodeenabledasync).

Returns a boolean indicating if the device is in low power mode.

Example

```
const lowPowerMode = useLowPowerMode();
```

### `usePowerState()`

Gets the device's power state information, as in [`getPowerStateAsync`](#getpowerstateasync).

Returns power state information.

Example

```
const { lowPowerMode, batteryLevel, batteryState } = usePowerState();
```

## Methods

### `getBatteryLevelAsync()`

Gets the battery level of the device as a number between `0` and `1`, inclusive. If the device does not support retrieving the battery level, this method returns `-1`. On web, this method always returns `1`.

A `Promise` that fulfils with a number between `0` and `1` representing the battery level, or `-1` if the device does not provide it.

Example

```
await Battery.getBatteryLevelAsync();
// 0.759999
```

### `getBatteryStateAsync()`

Tells the battery's current state. On web, this always returns `BatteryState.UNKNOWN`.

Returns a `Promise` which fulfills with a [`Battery.BatteryState`](#batterystate) enum value for whether the device is any of the four states.

Example

```
await Battery.getBatteryStateAsync();
// BatteryState.CHARGING
```

### `getPowerStateAsync()`

Gets the power state of the device including the battery level, whether it is plugged in, and if the system is currently operating in Power Saver Mode (Android) or Low Power Mode (iOS). This method re-throws any errors that occur when retrieving any of the power-state information.

Returns a `Promise` which fulfills with [`PowerState`](#powerstate) object.

Example

```
await Battery.getPowerStateAsync();
// {
//   batteryLevel: 0.759999,
//   batteryState: BatteryState.UNPLUGGED,
//   lowPowerMode: true,
// }
```

### `isAvailableAsync()`

Resolves with whether the battery API is available on the current device. The value of this property is `true` on Android and physical iOS devices and `false` on iOS simulators. On web, it depends on whether the browser supports the web battery API.

### `isBatteryOptimizationEnabledAsync()`

Checks whether battery optimization is enabled for your application. If battery optimization is enabled for your app, background tasks might be affected when your app goes into doze mode state. (only on Android 6.0 or later)

Returns a `Promise` which fulfills with a `boolean` value of either `true` or `false`, indicating whether the battery optimization is enabled or disabled, respectively. (Android only)

Example

```
await Battery.isBatteryOptimizationEnabledAsync();
// true
```

### `isLowPowerModeEnabledAsync()`

Gets the current status of Power Saver mode on Android and Low Power mode on iOS. If a platform doesn't support Low Power mode reporting (like web, older Android devices), the reported low-power state is always `false`, even if the device is actually in low-power mode.

Returns a `Promise` which fulfills with a `boolean` value of either `true` or `false`, indicating whether low power mode is enabled or disabled.

Example

Power Saver Mode (Android) or Low Power Mode (iOS) are enabled.

```
await Battery.isLowPowerModeEnabledAsync();
// true
```

## Event Subscriptions

### `addBatteryLevelListener(listener)`

  

Subscribe to the battery level change updates.

On Android devices, the event fires only when significant changes happens, which is when the battery level drops below [`android.intent.action.BATTERY_LOW`](https://developer.android.com/reference/android/content/Intent#ACTION_BATTERY_LOW) or rises above [`android.intent.action.BATTERY_OKAY`](https://developer.android.com/reference/android/content/Intent#ACTION_BATTERY_OKAY) from a low battery level. See [Monitor the Battery Level and Charging State](https://developer.android.com/training/monitoring-device-state/battery-monitoring) in Android documentation for more information.

On iOS devices, the event fires when the battery level drops one percent or more, but is only fired once per minute at maximum.

On web, the event never fires.

A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.

### `addBatteryStateListener(listener)`

  

Subscribe to the battery state change updates to receive an object with a [`Battery.BatteryState`](#batterystate) enum value for whether the device is any of the four states.

On web, the event never fires.

A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.

### `addLowPowerModeListener(listener)`

  

Subscribe to Power Saver Mode (Android) or Low Power Mode (iOS) updates. The event fires whenever the power mode is toggled.

On web, the event never fires.

A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `BatteryLevelEvent`

### `BatteryStateEvent`

### `PowerModeEvent`

### `PowerState`

## Enums

### `BatteryState`

#### `UNKNOWN`

`BatteryState.UNKNOWN ï¼ 0`

If the battery state is unknown or inaccessible.

#### `UNPLUGGED`

`BatteryState.UNPLUGGED ï¼ 1`

If battery is not charging or discharging.

#### `CHARGING`

`BatteryState.CHARGING ï¼ 2`

If battery is charging.

#### `FULL`

`BatteryState.FULL ï¼ 3`

If the battery level is full.

---

# blur-view

## Expo BlurView

A React component that blurs everything underneath the view.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-blur)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-blur/CHANGELOG.md)[](https://www.npmjs.com/package/expo-blur)

A React component that blurs everything underneath the view. Common usage of this is for navigation bars, tab bars, and modals.

> `BlurView` on Android is an experimental feature. To enable it use the [`experimentalBlurMethod`](https://docs.expo.dev/versions/latest/sdk/blur-view#experimentalblurmethod) prop.

#### Known issues

The blur effect does not update when `BlurView` is rendered before dynamic content is rendered using, for example, `FlatList`. To fix this, make sure that `BlurView` is rendered after the dynamic content component. For example:

```
<View>
  <FlatList />
  <BlurView />
</View>
```

## Installation

`npx expo install expo-blur`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { Text, StyleSheet, View, SafeAreaView } from 'react-native';
import { BlurView } from 'expo-blur';

export default function App() {
  const text = 'Hello, my container is blurring contents underneath!';
  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.background}>
        {[...Array(20).keys()].map(i => (
          <View
            key={`box-${i}`}
            style={[styles.box, i % 2 === 1 ? styles.boxOdd : styles.boxEven]}
          />
        ))}
      </View>
      <BlurView intensity={100} style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={80} tint="light" style={styles.blurContainer}>
        <Text style={styles.text}>{text}</Text>
      </BlurView>
      <BlurView intensity={90} tint="dark" style={styles.blurContainer}>
        <Text style={[styles.text, { color: '#fff' }]}>{text}</Text>
      </BlurView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  blurContainer: {
    flex: 1,
    padding: 20,
    margin: 16,
    textAlign: 'center',
    justifyContent: 'center',
    overflow: 'hidden',
    borderRadius: 20,
  },
  background: {
    flex: 1,
    flexWrap: 'wrap',
    ...StyleSheet.absoluteFill,
  },
  box: {
    width: '25%',
    height: '20%',
  },
  boxEven: {
    backgroundColor: 'orangered',
  },
  boxOdd: {
    backgroundColor: 'gold',
  },
  text: {
    fontSize: 24,
    fontWeight: '600',
  },
});
```

## API

```
import { BlurView } from 'expo-blur';
```

## Component

### `BlurView`

Type: `React.[Component](https://react.dev/reference/react/Component)<[BlurViewProps](#blurviewprops)>`

BlurViewProps

### `blurReductionFactor`

OptionalâType:

`number`âDefault: `4`

A number by which the blur intensity will be divided on Android.

When using experimental blur methods on Android, the perceived blur intensity might differ from iOS at different intensity levels. This property can be used to fine tune it on Android to match it more closely with iOS.

### `experimentalBlurMethod`

OptionalâType:

`[ExperimentalBlurMethod](#experimentalblurmethod)`âDefault: `'none'`

Blur method to use on Android.

> Currently, `BlurView` support is experimental on Android and may cause performance and graphical issues. It can be enabled by setting this property.

### `intensity`

OptionalâType:

`number`âDefault: `50`

A number from `1` to `100` to control the intensity of the blur effect.

You can animate this property using `react-native-reanimated`.

### `tint`

OptionalâType:

`[BlurTint](#blurtint)`âDefault: `'default'`

A tint mode which will be applied to the view.

#### Inherited Props

## Types

### `BlurTint`

Literal Type: `string`

Acceptable values are: `'light'` | `'dark'` | `'default'` | `'extraLight'` | `'regular'` | `'prominent'` | `'systemUltraThinMaterial'` | `'systemThinMaterial'` | `'systemMaterial'` | `'systemThickMaterial'` | `'systemChromeMaterial'` | `'systemUltraThinMaterialLight'` | `'systemThinMaterialLight'` | `'systemMaterialLight'` | `'systemThickMaterialLight'` | `'systemChromeMaterialLight'` | `'systemUltraThinMaterialDark'` | `'systemThinMaterialDark'` | `'systemMaterialDark'` | `'systemThickMaterialDark'` | `'systemChromeMaterialDark'`

### `ExperimentalBlurMethod`

Literal Type: `string`

Blur method to use on Android.

*   `'none'` - Falls back to a semi-transparent view instead of rendering a blur effect.
```

```
*   `'dimezisBlurView'` - Uses a native blur view implementation based on [BlurView](https://github.com/Dimezis/BlurView) library. This method may lead to decreased performance and rendering issues during transitions made by `react-native-screens`.
```

```

Acceptable values are: `'none'` | `'dimezisBlurView'`

## Using `borderRadius` with `BlurView`

When using `BlurView` on Android and iOS, the `borderRadius` property is not applied when provided explicitly. To fix this, you can use the `overflow: 'hidden'` style since `BlurView` inherits props from `<View>`. See [Usage](https://docs.expo.dev/versions/latest/sdk/blur-view#usage) for an example.

---

# brightness

## Expo Brightness

A library that provides access to an API for getting and setting the screen brightness.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-brightness)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-brightness/CHANGELOG.md)[](https://www.npmjs.com/package/expo-brightness)

An API to get and set screen brightness.

On Android, there is a global system-wide brightness setting, and each app has its own brightness setting that can optionally override the global setting. It is possible to set either of these values with this API. On iOS, the system brightness setting cannot be changed programmatically; instead, any changes to the screen brightness will persist until the device is locked or powered off.

## Installation

`npx expo install expo-brightness`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration

Are you using this library in an existing React Native app?

## Usage

```
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Brightness from 'expo-brightness';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Brightness.requestPermissionsAsync();
      if (status === 'granted') {
        Brightness.setSystemBrightnessAsync(1);
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Brightness Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
```

## API

```
import * as Brightness from 'expo-brightness';
```

## Hooks

### `usePermissions(options)`

  

Check or request permissions to modify the system brightness. This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [permissionResponse, requestPermission] = Brightness.usePermissions();
```

## Methods

### `Brightness.getBrightnessAsync()`

Gets the current brightness level of the device's main screen.

A `Promise` that fulfils with a number between `0` and `1`, inclusive, representing the current screen brightness.

### `Brightness.getPermissionsAsync()`

Checks user's permissions for accessing system brightness.

A promise that fulfils with an object of type [PermissionResponse](#permissionresponse).

### `Brightness.getSystemBrightnessAsync()`

Gets the global system screen brightness.

A `Promise` that is resolved with a number between `0` and `1`, inclusive, representing the current system screen brightness.

### `Brightness.getSystemBrightnessModeAsync()`

Gets the system brightness mode (e.g. whether or not the OS will automatically adjust the screen brightness depending on ambient light).

A `Promise` that fulfils with a [`BrightnessMode`](#brightnessmode). Requires `SYSTEM_BRIGHTNESS` permissions.

### `Brightness.isAvailableAsync()`

Returns whether the Brightness API is enabled on the current device. This does not check the app permissions.

Async `boolean`, indicating whether the Brightness API is available on the current device. Currently this resolves `true` on iOS and Android only.

### `Brightness.isUsingSystemBrightnessAsync()`

Returns a boolean specifying whether or not the current activity is using the system-wide brightness value.

A `Promise` that fulfils with `true` when the current activity is using the system-wide brightness value, and `false` otherwise.

### `Brightness.requestPermissionsAsync()`

Asks the user to grant permissions for accessing system brightness.

A promise that fulfils with an object of type [PermissionResponse](#permissionresponse).

### `Brightness.restoreSystemBrightnessAsync()`

Resets the brightness setting of the current activity to use the system-wide brightness value rather than overriding it.

A `Promise` that fulfils when the setting has been successfully changed.

### `Brightness.setBrightnessAsync(brightnessValue)`

  

Sets the current screen brightness. On iOS, this setting will persist until the device is locked, after which the screen brightness will revert to the user's default setting. On Android, this setting only applies to the current activity; it will override the system brightness value whenever your app is in the foreground.

A `Promise` that fulfils when the brightness has been successfully set.

### `Brightness.setSystemBrightnessAsync(brightnessValue)`

  

Sets the global system screen brightness and changes the brightness mode to `MANUAL`. Requires `SYSTEM_BRIGHTNESS` permissions.

A `Promise` that fulfils when the brightness has been successfully set.

### `Brightness.setSystemBrightnessModeAsync(brightnessMode)`

  

Sets the system brightness mode.

> Deprecated Use [`restoreSystemBrightnessAsync`](#brightnessrestoresystembrightnessasync) method instead.

### `Brightness.useSystemBrightnessAsync()`

## Event Subscriptions

### `Brightness.addBrightnessListener(listener)`

  

Subscribe to brightness (iOS) updates. The event fires whenever the power mode is toggled.

On web and android the event never fires.

A `Subscription` object on which you can call `remove()` to unsubscribe from the listener.

## Types

### `BrightnessEvent`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

An object obtained by permissions get and request functions.

## Enums

### `BrightnessMode`

#### `UNKNOWN`

`BrightnessMode.UNKNOWN ï¼ 0`

Means that the current brightness mode cannot be determined.

#### `AUTOMATIC`

`BrightnessMode.AUTOMATIC ï¼ 1`

Mode in which the device OS will automatically adjust the screen brightness depending on the ambient light.

#### `MANUAL`

`BrightnessMode.MANUAL ï¼ 2`

Mode in which the screen brightness will remain constant and will not be adjusted by the OS.

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

## Error codes

### `ERR_BRIGHTNESS`

An error occurred when getting or setting the app brightness.

### `ERR_BRIGHTNESS_MODE`

An error occurred when getting or setting the system brightness mode. See the `nativeError` property of the thrown error for more information.

### `ERR_BRIGHTNESS_PERMISSIONS_DENIED`

An attempt to set the system brightness was made without the proper permissions from the user. The user did not grant `SYSTEM_BRIGHTNESS` permissions.

### `ERR_BRIGHTNESS_SYSTEM`

An error occurred when getting or setting the system brightness.

### `ERR_INVALID_ARGUMENT`

An invalid argument was passed. Only `BrightnessMode.MANUAL` or `BrightnessMode.AUTOMATIC` are allowed.

## Permissions

### Android

You must add the following permissions to your app.json inside the [`expo.android.permissions`](https://docs.expo.dev/versions/latest/config/app#permissions) array.

### iOS

_No permissions required_.

---

# build-properties

buildFromSource(optional)`boolean`

Enable building React Native from source. Turning this on will significantly increase the build times.

Default:`false`

buildToolsVersion(optional)`string`

Override the default `buildToolsVersion` version number in build.gradle.

compileSdkVersion(optional)`number`

Override the default `compileSdkVersion` version number in build.gradle.

enableBundleCompression(optional)`boolean`

Enable JavaScript Bundle compression. Turning this on will result in a smaller APK size but may have slower app startup times.

Default:`false`

enablePngCrunchInReleaseBuilds(optional)`boolean`

Enable [`crunchPngs`](https://developer.android.com/topic/performance/reduce-apk-size#crunch) in release builds to optimize PNG files. This property is enabled by default, but "might inflate PNG files that are already compressed", so you may want to disable it if you do your own PNG optimization.

Default:`true`

enableProguardInReleaseBuilds(optional)`boolean`

Enable [Proguard or R8](https://developer.android.com/studio/build/shrink-code) in release builds to obfuscate Java code and reduce app size.

enableShrinkResourcesInReleaseBuilds(optional)`boolean`

Enable [`shrinkResources`](https://developer.android.com/studio/build/shrink-code#shrink-resources) in release builds to remove unused resources from the app. This property should be used in combination with `enableProguardInReleaseBuilds`.

extraMavenRepos(optional)`(string | [AndroidMavenRepository](#androidmavenrepository))[]`

Add extra maven repositories to all gradle projects.

Takes an array of objects or strings. Strings are passed as the `url` property of the object with no credentials or authentication scheme.

This adds the following code to android/build.gradle:

```
allprojects {
 repositories {
  maven {
   url "https://foo.com/maven-releases"
 }
}
```

By using an `AndroidMavenRepository` object, you can specify credentials and an authentication scheme.

```
allprojects {
  repositories {
    maven {
      url "https://foo.com/maven-releases"
      credentials {
       username = "bar"
       password = "baz"
      }
      authentication {
       basic(BasicAuthentication)
      }
    }
  }
}
```

extraProguardRules(optional)`string`

Append custom [Proguard rules](https://www.guardsquare.com/manual/configuration/usage) to android/app/proguard-rules.pro.

kotlinVersion(optional)`string`

Override the Kotlin version used when building the app.

manifestQueries(optional)`[PluginConfigTypeAndroidQueries](#pluginconfigtypeandroidqueries)`

Specifies the set of other apps that an app intends to interact with. These other apps are specified by package name, by intent signature, or by provider authority.

minSdkVersion(optional)`number`

Override the default `minSdkVersion` version number in build.gradle.

networkInspector(optional)`boolean`

Enable the Network Inspector.

Default:`true`

newArchEnabled(optional)`boolean`

> Deprecated Use app config [`newArchEnabled`](https://docs.expo.dev/versions/latest/config/app/#newarchenabled) instead. Enable React Native new architecture for Android platform.

packagingOptions(optional)`[PluginConfigTypeAndroidPackagingOptions](#pluginconfigtypeandroidpackagingoptions)`

Interface representing available configuration for Android Gradle plugin [`PackagingOptions`](https://developer.android.com/reference/tools/gradle-api/7.0/com/android/build/api/dsl/PackagingOptions).

targetSdkVersion(optional)`number`

Override the default `targetSdkVersion` version number in build.gradle.

useDayNightTheme(optional)`boolean`

Changes the apps theme to a DayNight variant to correctly support dark mode.

useLegacyPackaging(optional)`boolean`

Instructs the Android Gradle plugin to compress native libraries in the APK using the legacy packaging system.

Default:`false`

usesCleartextTraffic(optional)`boolean`

Indicates whether the app intends to use cleartext network traffic.

Default:`false`

---

# calendar

## Expo Calendar

A library that provides an API for interacting with the device's system calendars, events, reminders, and associated records.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-calendar)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-calendar/CHANGELOG.md)[](https://www.npmjs.com/package/expo-calendar)

`expo-calendar` provides an API for interacting with the device's system calendars, events, reminders, and associated records.

Additionally, it provides methods to launch the [system-provided calendar UI](https://docs.expo.dev/versions/latest/sdk/calendar#launching-system-provided-calendar-dialogs) to allow user view or edit events. On Android, these methods start the system calendar app using an Intent. On iOS, they present either [`EKEventViewController`](https://developer.apple.com/documentation/eventkitui/ekeventviewcontroller) or [`EKEventEditViewController`](https://developer.apple.com/documentation/eventkitui/ekeventeditviewcontroller) as a modal.

## Installation

`npx expo install expo-calendar`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-calendar` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-calendar",
        {
          "calendarPermission": "The app needs to access your calendar."
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Usage

```
import { useEffect } from 'react';
import { StyleSheet, View, Text, Button, Platform } from 'react-native';
import * as Calendar from 'expo-calendar';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Calendar.requestCalendarPermissionsAsync();
      if (status === 'granted') {
        const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
        console.log('Here are all your calendars:');
        console.log({ calendars });
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Calendar Module Example</Text>
      <Button title="Create a new calendar" onPress={createCalendar} />
    </View>
  );
}

async function getDefaultCalendarSource() {
  const defaultCalendar = await Calendar.getDefaultCalendarAsync();
  return defaultCalendar.source;
}

async function createCalendar() {
  const defaultCalendarSource =
    Platform.OS === 'ios'
      ? await getDefaultCalendarSource()
      : { isLocalAccount: true, name: 'Expo Calendar' };
  const newCalendarID = await Calendar.createCalendarAsync({
    title: 'Expo Calendar',
    color: 'blue',
    entityType: Calendar.EntityTypes.EVENT,
    sourceId: defaultCalendarSource.id,
    source: defaultCalendarSource,
    name: 'internalCalendarName',
    ownerAccount: 'personal',
    accessLevel: Calendar.CalendarAccessLevel.OWNER,
  });
  console.log(`Your new calendar ID is: ${newCalendarID}`);
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'space-around',
  },
});
```

## API

```
import * as Calendar from 'expo-calendar';
```

## Launching system-provided calendar dialogs

### `createEventInCalendarAsync(eventData, presentationOptions)`

  

Launches the calendar UI provided by the OS to create a new event.

A promise which resolves with information about the dialog result.

### `editEventInCalendarAsync(params, presentationOptions)`

  

Launches the calendar UI provided by the OS to edit or delete an event. On Android, this is the same as `openEventInCalendarAsync`.

A promise which resolves with information about the dialog result.

> Deprecated Use [`openEventInCalendarAsync`](#openeventincalendarasyncparams-presentationoptions) instead.

### `openEventInCalendar(id)`

  

Sends an intent to open the specified event in the OS Calendar app.

### `openEventInCalendarAsync(params, presentationOptions)`

  

Launches the calendar UI provided by the OS to preview an event.

A promise which resolves with information about the dialog result.

## Hooks

### `useCalendarPermissions(options)`

  

Check or request permissions to access the calendar. This uses both `getCalendarPermissionsAsync` and `requestCalendarPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Calendar.useCalendarPermissions();
```

### `useRemindersPermissions(options)`

  

Check or request permissions to access reminders. This uses both `getRemindersPermissionsAsync` and `requestRemindersPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Calendar.useRemindersPermissions();
```

## Methods

### `Calendar.createAttendeeAsync(eventId, details)`

  

Creates a new attendee record and adds it to the specified event. Note that if `eventId` specifies a recurring event, this will add the attendee to every instance of the event.

A string representing the ID of the newly created attendee record.

### `Calendar.createCalendarAsync(details)`

  

Creates a new calendar on the device, allowing events to be added later and displayed in the OS Calendar app.

A string representing the ID of the newly created calendar.

### `Calendar.createEventAsync(calendarId, eventData)`

  

Creates a new event on the specified calendar.

A promise which fulfils with a string representing the ID of the newly created event.

### `Calendar.createReminderAsync(calendarId, reminder)`

  

Creates a new reminder on the specified calendar.

A promise which fulfils with a string representing the ID of the newly created reminder.

### `Calendar.deleteAttendeeAsync(id)`

  

Deletes an existing attendee record from the device. Use with caution.

### `Calendar.deleteCalendarAsync(id)`

  

Deletes an existing calendar and all associated events/reminders/attendees from the device. Use with caution.

### `Calendar.deleteEventAsync(id, recurringEventOptions)`

  

Deletes an existing event from the device. Use with caution.

### `Calendar.deleteReminderAsync(id)`

  

Deletes an existing reminder from the device. Use with caution.

### `Calendar.getAttendeesForEventAsync(id, recurringEventOptions)`

  

Gets all attendees for a given event (or instance of a recurring event).

A promise which fulfils with an array of [`Attendee`](#attendee) associated with the specified event.

### `Calendar.getCalendarPermissionsAsync()`

Checks user's permissions for accessing user's calendars.

A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).

### `Calendar.getCalendarsAsync(entityType)`

  

Gets an array of calendar objects with details about the different calendars stored on the device.

An array of [calendar objects](#calendar) matching the provided entity type (if provided).

### `Calendar.getDefaultCalendarAsync()`

Gets an instance of the default calendar object.

A promise resolving to the [Calendar](#calendar) object that is the user's default calendar.

### `Calendar.getEventAsync(id, recurringEventOptions)`

  

Returns a specific event selected by ID. If a specific instance of a recurring event is desired, the start date of this instance must also be provided, as instances of recurring events do not have their own unique and stable IDs on either iOS or Android.

A promise which fulfils with an [`Event`](#event) object matching the provided criteria, if one exists.

### `Calendar.getEventsAsync(calendarIds, startDate, endDate)`

  

Returns all events in a given set of calendars over a specified time period. The filtering has slightly different behavior per-platform - on iOS, all events that overlap at all with the `[startDate, endDate]` interval are returned, whereas on Android, only events that begin on or after the `startDate` and end on or before the `endDate` will be returned.

A promise which fulfils with an array of [`Event`](#event) objects matching the search criteria.

### `Calendar.getReminderAsync(id)`

  

Returns a specific reminder selected by ID.

A promise which fulfils with a [`Reminder`](#reminder) matching the provided ID, if one exists.

### `Calendar.getRemindersAsync(calendarIds, status, startDate, endDate)`

  

Returns a list of reminders matching the provided criteria. If `startDate` and `endDate` are defined, returns all reminders that overlap at all with the \[startDate, endDate\] interval - i.e. all reminders that end after the `startDate` or begin before the `endDate`.

A promise which fulfils with an array of [`Reminder`](#reminder) objects matching the search criteria.

### `Calendar.getRemindersPermissionsAsync()`

Checks user's permissions for accessing user's reminders.

A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).

### `Calendar.getSourceAsync(id)`

  

Returns a specific source selected by ID.

A promise which fulfils with an array of [`Source`](#source) object matching the provided ID, if one exists.

### `Calendar.getSourcesAsync()`

A promise which fulfils with an array of [`Source`](#source) objects all sources for calendars stored on the device.

### `Calendar.isAvailableAsync()`

Returns whether the Calendar API is enabled on the current device. This does not check the app permissions.

Async `boolean`, indicating whether the Calendar API is available on the current device. Currently, this resolves `true` on iOS and Android only.

### `Calendar.requestCalendarPermissionsAsync()`

Asks the user to grant permissions for accessing user's calendars.

A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).

> Deprecated Use [`requestCalendarPermissionsAsync()`](#calendarrequestcalendarpermissionsasync) instead.

### `Calendar.requestPermissionsAsync()`

### `Calendar.requestRemindersPermissionsAsync()`

Asks the user to grant permissions for accessing user's reminders.

A promise that resolves to an object of type [`PermissionResponse`](#permissionresponse).

### `Calendar.updateAttendeeAsync(id, details)`

  

Updates an existing attendee record. To remove a property, explicitly set it to `null` in `details`.

### `Calendar.updateCalendarAsync(id, details)`

  

Updates the provided details of an existing calendar stored on the device. To remove a property, explicitly set it to `null` in `details`.

### `Calendar.updateEventAsync(id, details, recurringEventOptions)`

  

Updates the provided details of an existing calendar stored on the device. To remove a property, explicitly set it to `null` in `details`.

### `Calendar.updateReminderAsync(id, details)`

  

Updates the provided details of an existing reminder stored on the device. To remove a property, explicitly set it to `null` in `details`.

## Types

### `Alarm`

A method for having the OS automatically remind the user about a calendar item.

### `AlarmLocation`

### `Attendee`

A person or entity that is associated with an event by being invited or fulfilling some other role.

### `Calendar`

A calendar record upon which events (or, on iOS, reminders) can be stored. Settings here apply to the calendar as a whole and how its events are displayed in the OS calendar app.

### `CalendarDialogParams`

### `DaysOfTheWeek`

### `DialogEventResult`

The result of presenting a calendar dialog for creating or editing an event.

### `Event`

An event record, or a single instance of a recurring event. On iOS, used in the Calendar app.

### `OpenEventDialogResult`

The result of presenting the calendar dialog for opening (viewing) an event.

### `OpenEventPresentationOptions`

Type: `[PresentationOptions](#presentationoptions)` extended by:

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

An object obtained by permissions get and request functions.

### `PresentationOptions`

### `RecurrenceRule`

A recurrence rule for events or reminders, allowing the same calendar item to recur multiple times. This type is based on [the iOS interface](https://developer.apple.com/documentation/eventkit/ekrecurrencerule/1507320-initrecurrencewithfrequency) which is in turn based on [the iCal RFC](https://tools.ietf.org/html/rfc5545#section-3.8.5.3) so you can refer to those to learn more about this potentially complex interface.

Not all the combinations make sense. For example, when frequency is `DAILY`, setting `daysOfTheMonth` makes no sense.

### `RecurringEventOptions`

### `Reminder`

A reminder record, used in the iOS Reminders app. No direct analog on Android.

### `Source`

A source account that owns a particular calendar. Expo apps will typically not need to interact with `Source` objects.

## Enums

### `AlarmMethod`

#### `ALARM`

`AlarmMethod.ALARM ï¼ "alarm"`

#### `ALERT`

`AlarmMethod.ALERT ï¼ "alert"`

#### `DEFAULT`

`AlarmMethod.DEFAULT ï¼ "default"`

#### `EMAIL`

`AlarmMethod.EMAIL ï¼ "email"`

#### `SMS`

`AlarmMethod.SMS ï¼ "sms"`

### `AttendeeRole`

#### `ATTENDEE`

`AttendeeRole.ATTENDEE ï¼ "attendee"`

#### `CHAIR`

`AttendeeRole.CHAIR ï¼ "chair"`

#### `NONE`

`AttendeeRole.NONE ï¼ "none"`

#### `NON_PARTICIPANT`

`AttendeeRole.NON_PARTICIPANT ï¼ "nonParticipant"`

#### `OPTIONAL`

`AttendeeRole.OPTIONAL ï¼ "optional"`

#### `ORGANIZER`

`AttendeeRole.ORGANIZER ï¼ "organizer"`

#### `PERFORMER`

`AttendeeRole.PERFORMER ï¼ "performer"`

#### `REQUIRED`

`AttendeeRole.REQUIRED ï¼ "required"`

#### `SPEAKER`

`AttendeeRole.SPEAKER ï¼ "speaker"`

#### `UNKNOWN`

`AttendeeRole.UNKNOWN ï¼ "unknown"`

### `AttendeeStatus`

#### `ACCEPTED`

`AttendeeStatus.ACCEPTED ï¼ "accepted"`

#### `COMPLETED`

`AttendeeStatus.COMPLETED ï¼ "completed"`

#### `DECLINED`

`AttendeeStatus.DECLINED ï¼ "declined"`

#### `DELEGATED`

`AttendeeStatus.DELEGATED ï¼ "delegated"`

#### `IN_PROCESS`

`AttendeeStatus.IN_PROCESS ï¼ "inProcess"`

#### `INVITED`

`AttendeeStatus.INVITED ï¼ "invited"`

#### `NONE`

`AttendeeStatus.NONE ï¼ "none"`

#### `PENDING`

`AttendeeStatus.PENDING ï¼ "pending"`

#### `TENTATIVE`

`AttendeeStatus.TENTATIVE ï¼ "tentative"`

#### `UNKNOWN`

`AttendeeStatus.UNKNOWN ï¼ "unknown"`

### `AttendeeType`

#### `GROUP`

`AttendeeType.GROUP ï¼ "group"`

#### `NONE`

`AttendeeType.NONE ï¼ "none"`

#### `OPTIONAL`

`AttendeeType.OPTIONAL ï¼ "optional"`

#### `PERSON`

`AttendeeType.PERSON ï¼ "person"`

#### `REQUIRED`

`AttendeeType.REQUIRED ï¼ "required"`

#### `RESOURCE`

`AttendeeType.RESOURCE ï¼ "resource"`

#### `ROOM`

`AttendeeType.ROOM ï¼ "room"`

#### `UNKNOWN`

`AttendeeType.UNKNOWN ï¼ "unknown"`

### `Availability`

#### `BUSY`

`Availability.BUSY ï¼ "busy"`

#### `FREE`

`Availability.FREE ï¼ "free"`

#### `NOT_SUPPORTED`

`Availability.NOT_SUPPORTED ï¼ "notSupported"`

#### `TENTATIVE`

`Availability.TENTATIVE ï¼ "tentative"`

#### `UNAVAILABLE`

`Availability.UNAVAILABLE ï¼ "unavailable"`

### `CalendarAccessLevel`

#### `CONTRIBUTOR`

`CalendarAccessLevel.CONTRIBUTOR ï¼ "contributor"`

#### `EDITOR`

`CalendarAccessLevel.EDITOR ï¼ "editor"`

#### `FREEBUSY`

`CalendarAccessLevel.FREEBUSY ï¼ "freebusy"`

#### `NONE`

`CalendarAccessLevel.NONE ï¼ "none"`

#### `OVERRIDE`

`CalendarAccessLevel.OVERRIDE ï¼ "override"`

#### `OWNER`

`CalendarAccessLevel.OWNER ï¼ "owner"`

#### `READ`

`CalendarAccessLevel.READ ï¼ "read"`

#### `RESPOND`

`CalendarAccessLevel.RESPOND ï¼ "respond"`

#### `ROOT`

`CalendarAccessLevel.ROOT ï¼ "root"`

### `CalendarDialogResultActions`

Enum containing all possible user responses to the calendar UI dialogs. Depending on what dialog is presented, a subset of the values applies.

#### `canceled`

`CalendarDialogResultActions.canceled ï¼ "canceled"`

The user canceled or dismissed the dialog.

#### `deleted`

`CalendarDialogResultActions.deleted ï¼ "deleted"`

The user deleted the event.

#### `done`

`CalendarDialogResultActions.done ï¼ "done"`

On Android, this is the only possible result because the OS doesn't provide enough information to determine the user's action - the user may have canceled the dialog, modified the event, or deleted it.

On iOS, this means the user simply closed the dialog.

#### `responded`

`CalendarDialogResultActions.responded ï¼ "responded"`

The user responded to and saved a pending event invitation.

#### `saved`

`CalendarDialogResultActions.saved ï¼ "saved"`

The user saved a new event or modified an existing one.

### `CalendarType`

#### `BIRTHDAYS`

`CalendarType.BIRTHDAYS ï¼ "birthdays"`

#### `CALDAV`

`CalendarType.CALDAV ï¼ "caldav"`

#### `EXCHANGE`

`CalendarType.EXCHANGE ï¼ "exchange"`

#### `LOCAL`

`CalendarType.LOCAL ï¼ "local"`

#### `SUBSCRIBED`

`CalendarType.SUBSCRIBED ï¼ "subscribed"`

#### `UNKNOWN`

`CalendarType.UNKNOWN ï¼ "unknown"`

### `DayOfTheWeek`

#### `Sunday`

`DayOfTheWeek.Sunday ï¼ 1`

#### `Monday`

`DayOfTheWeek.Monday ï¼ 2`

#### `Tuesday`

`DayOfTheWeek.Tuesday ï¼ 3`

#### `Wednesday`

`DayOfTheWeek.Wednesday ï¼ 4`

#### `Thursday`

`DayOfTheWeek.Thursday ï¼ 5`

#### `Friday`

`DayOfTheWeek.Friday ï¼ 6`

#### `Saturday`

`DayOfTheWeek.Saturday ï¼ 7`

### `EntityTypes`

platform ios

#### `EVENT`

`EntityTypes.EVENT ï¼ "event"`

#### `REMINDER`

`EntityTypes.REMINDER ï¼ "reminder"`

### `EventAccessLevel`

#### `CONFIDENTIAL`

`EventAccessLevel.CONFIDENTIAL ï¼ "confidential"`

#### `DEFAULT`

`EventAccessLevel.DEFAULT ï¼ "default"`

#### `PRIVATE`

`EventAccessLevel.PRIVATE ï¼ "private"`

#### `PUBLIC`

`EventAccessLevel.PUBLIC ï¼ "public"`

### `EventStatus`

#### `CANCELED`

`EventStatus.CANCELED ï¼ "canceled"`

#### `CONFIRMED`

`EventStatus.CONFIRMED ï¼ "confirmed"`

#### `NONE`

`EventStatus.NONE ï¼ "none"`

#### `TENTATIVE`

`EventStatus.TENTATIVE ï¼ "tentative"`

### `Frequency`

#### `DAILY`

`Frequency.DAILY ï¼ "daily"`

#### `MONTHLY`

`Frequency.MONTHLY ï¼ "monthly"`

#### `WEEKLY`

`Frequency.WEEKLY ï¼ "weekly"`

#### `YEARLY`

`Frequency.YEARLY ï¼ "yearly"`

### `MonthOfTheYear`

#### `January`

`MonthOfTheYear.January ï¼ 1`

#### `February`

`MonthOfTheYear.February ï¼ 2`

#### `March`

`MonthOfTheYear.March ï¼ 3`

#### `April`

`MonthOfTheYear.April ï¼ 4`

#### `May`

`MonthOfTheYear.May ï¼ 5`

#### `June`

`MonthOfTheYear.June ï¼ 6`

#### `July`

`MonthOfTheYear.July ï¼ 7`

#### `August`

`MonthOfTheYear.August ï¼ 8`

#### `September`

`MonthOfTheYear.September ï¼ 9`

#### `October`

`MonthOfTheYear.October ï¼ 10`

#### `November`

`MonthOfTheYear.November ï¼ 11`

#### `December`

`MonthOfTheYear.December ï¼ 12`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

### `ReminderStatus`

#### `COMPLETED`

`ReminderStatus.COMPLETED ï¼ "completed"`

#### `INCOMPLETE`

`ReminderStatus.INCOMPLETE ï¼ "incomplete"`

### `SourceType`

#### `BIRTHDAYS`

`SourceType.BIRTHDAYS ï¼ "birthdays"`

#### `CALDAV`

`SourceType.CALDAV ï¼ "caldav"`

#### `EXCHANGE`

`SourceType.EXCHANGE ï¼ "exchange"`

#### `LOCAL`

`SourceType.LOCAL ï¼ "local"`

#### `MOBILEME`

`SourceType.MOBILEME ï¼ "mobileme"`

#### `SUBSCRIBED`

`SourceType.SUBSCRIBED ï¼ "subscribed"`

## Permissions

### Android

If you only intend to use the [system-provided calendar UI](https://docs.expo.dev/versions/latest/sdk/calendar#launching-system-provided-calendar-dialogs), you don't need to request any permissions.

Otherwise, you must add the following permissions to your app.json inside the [`expo.android.permissions`](https://docs.expo.dev/versions/latest/config/app#permissions) array.

### iOS

The following usage description keys are used by this library:

---

# camera

## Expo Camera

A React component that renders a preview for the device's front or back camera.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-camera)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-camera/CHANGELOG.md)[](https://www.npmjs.com/package/expo-camera)

`expo-camera` provides a React component that renders a preview of the device's front or back camera. The camera's parameters such as zoom, torch, and flash mode are adjustable. Using `CameraView`, you can take photos and record videos that are saved to the app's cache. The component is also capable of detecting bar codes appearing in the preview. Run the [example](https://docs.expo.dev/versions/latest/sdk/camera#usage) on your device to see all these features working together.

## Installation

`npx expo install expo-camera`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-camera` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-camera",
        {
          "cameraPermission": "Allow $(PRODUCT_NAME) to access your camera",
          "microphonePermission": "Allow $(PRODUCT_NAME) to access your microphone",
          "recordAudioAndroid": true
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Usage

> Only one Camera preview can be active at any given time. If you have multiple screens in your app, you should unmount `Camera` components whenever a screen is unfocused.

```
import { CameraView, CameraType, useCameraPermissions } from 'expo-camera';
import { useState } from 'react';
import { Button, StyleSheet, Text, TouchableOpacity, View } from 'react-native';

export default function App() {
  const [facing, setFacing] = useState<CameraType>('back');
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    // Camera permissions are still loading.
    return <View />;
  }

  if (!permission.granted) {
    // Camera permissions are not granted yet.
    return (
      <View style={styles.container}>
        <Text style={styles.message}>We need your permission to show the camera</Text>
        <Button onPress={requestPermission} title="grant permission" />
      </View>
    );
  }

  function toggleCameraFacing() {
    setFacing(current => (current === 'back' ? 'front' : 'back'));
  }

  return (
    <View style={styles.container}>
      <CameraView style={styles.camera} facing={facing}>
        <View style={styles.buttonContainer}>
          <TouchableOpacity style={styles.button} onPress={toggleCameraFacing}>
            <Text style={styles.text}>Flip Camera</Text>
          </TouchableOpacity>
        </View>
      </CameraView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  message: {
    textAlign: 'center',
    paddingBottom: 10,
  },
  camera: {
    flex: 1,
  },
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'transparent',
    margin: 64,
  },
  button: {
    flex: 1,
    alignSelf: 'flex-end',
    alignItems: 'center',
  },
  text: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
  },
});
```

### Advanced usage

[

Camera app example

A complete example that shows how to take a picture and display it. Written in TypeScript.

](https://github.com/expo/examples/tree/master/with-camera)

## Web support

Most browsers support a version of web camera functionality, you can check out the [web camera browser support here](https://caniuse.com/#feat=stream). Image URIs are always returned as base64 strings because local file system paths are unavailable in the browser.

### Chrome `iframe` usage

When using Chrome versions 64+, if you try to use a web camera in a cross-origin iframe nothing will render. To add support for cameras in your iframe simply add the attribute `allow="microphone; camera;"` to the iframe element:

```
<iframe src="..." allow="microphone; camera;">
  <!-- <CameraView /> -->
</iframe>
```

## API

```
import { CameraView } from 'expo-camera';
```

## Component

### `CameraView`

Type: `React.[Component](https://react.dev/reference/react/Component)<[CameraViewProps](#cameraviewprops)>`

CameraViewProps

### `active`

OptionalâType:

`boolean`âDefault: `true`

A boolean that determines whether the camera should be active. Useful in situations where the camera may not have unmounted but you still want to stop the camera session.

### `animateShutter`

OptionalâType:

`boolean`âDefault: `true`

A boolean that determines whether the camera shutter animation should be enabled.

### `autofocus`

OptionalâType:

`[FocusMode](#focusmode)`âDefault: `off`

Indicates the focus mode to use.

### `barcodeScannerSettings`

OptionalâType:

`[BarcodeSettings](#barcodesettings)`

Example

```
<CameraView
  barcodeScannerSettings={{
    barcodeTypes: ["qr"],
  }}
/>
```

### `enableTorch`

OptionalâType:

`boolean`âDefault: `false`

A boolean to enable or disable the torch.

### `facing`

OptionalâType:

`[CameraType](#cameratype)`âDefault: `'back'`

Camera facing. Use one of `CameraType`. When `front`, use the front-facing camera. When `back`, use the back-facing camera.

### `flash`

OptionalâType:

`[FlashMode](#flashmode)`âDefault: `'off'`

Camera flash mode. Use one of `FlashMode` values. When `on`, the flash on your device will turn on when taking a picture. When `off`, it won't. Setting it to `auto` will fire flash if required.

### `mirror`

OptionalâType:

`boolean`âDefault: `false`

A boolean that determines whether the camera should mirror the image when using the front camera.

### `mode`

OptionalâType:

`[CameraMode](#cameramode)`âDefault: `'picture'`

Used to select image or video output.

### `mute`

OptionalâType:

`boolean`âDefault: `false`

If present, video will be recorded with no sound.

### `onAvailableLensesChanged`

OptionalâType:

`(event: [AvailableLenses](#availablelenses)) => void`

Callback invoked when the cameras available lenses change.

`event: [AvailableLenses](#availablelenses)`

result object that contains a `lenses` property containing an array of available lenses.

### `onBarcodeScanned`

OptionalâType:

`(scanningResult: [BarcodeScanningResult](#barcodescanningresult)) => void`

Callback that is invoked when a barcode has been successfully scanned. The callback is provided with an object of the [`BarcodeScanningResult`](#barcodescanningresult) shape, where the `type` refers to the barcode type that was scanned, and the `data` is the information encoded in the barcode (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.

### `onCameraReady`

OptionalâType:

`() => void`

Callback invoked when camera preview has been set.

### `onMountError`

OptionalâType:

`(event: [CameraMountError](#cameramounterror)) => void`

Callback invoked when camera preview could not start.

`event: [CameraMountError](#cameramounterror)`

Error object that contains a `message`.

### `onResponsiveOrientationChanged`

OptionalâType:

`(event: [ResponsiveOrientationChanged](#responsiveorientationchanged)) => void`

Callback invoked when responsive orientation changes. Only applicable if `responsiveOrientationWhenOrientationLocked` is `true`.

`event: [ResponsiveOrientationChanged](#responsiveorientationchanged)`

result object that contains updated orientation of camera

### `pictureSize`

A string representing the size of pictures [`takePictureAsync`](#takepictureasyncoptions) will take. Available sizes can be fetched with [`getAvailablePictureSizesAsync`](#getavailablepicturesizesasync). Setting this prop will cause the `ratio` prop to be ignored as the aspect ratio is determined by the selected size.

### `poster`

A URL for an image to be shown while the camera is loading.

### `ratio`

OptionalâType:

`[CameraRatio](#cameraratio)`

A string representing the aspect ratio of the preview. For example, `4:3` and `16:9`. Note: Setting the aspect ratio here will change the scaleType of the camera preview from `FILL` to `FIT`. Also, when using 1:1, devices only support certain sizes. If you specify an unsupported size, the closest supported ratio will be used.

### `responsiveOrientationWhenOrientationLocked`

Whether to allow responsive orientation of the camera when the screen orientation is locked (that is, when set to `true`, landscape photos will be taken if the device is turned that way, even if the app or device orientation is locked to portrait).

### `selectedLens`

OptionalâType:

`string`âDefault: `'builtInWideAngleCamera'`

Available lenses are emitted to the `onAvailableLensesChanged` callback whenever the currently selected camera changes or by calling [`getAvailableLensesAsync`](#getavailableaensesasync). You can read more about the available lenses in the [Apple documentation](https://developer.apple.com/documentation/avfoundation/avcapturedevice/devicetype-swift.struct).

### `videoBitrate`

The bitrate of the video recording in bits per second. Note: On iOS, you must specify the video codec when calling `recordAsync` to use this option.

### `videoQuality`

OptionalâType:

`[VideoQuality](#videoquality)`

Specify the quality of the recorded video. Use one of `VideoQuality` possible values: for 16:9 resolution `2160p`, `1080p`, `720p`, `480p` : `Android only` and for 4:3 `4:3` (the size is 640x480). If the chosen quality is not available for a device, the highest available is chosen.

### `videoStabilizationMode`

OptionalâType:

`[VideoStabilization](#videostabilization)`

The video stabilization mode used for a video recording. Use one of [`VideoStabilization.<value>`](#videostabilization). You can read more about each stabilization type in [Apple Documentation](https://developer.apple.com/documentation/avfoundation/avcapturevideostabilizationmode).

### `zoom`

OptionalâType:

`number`âDefault: `0`

A value between `0` and `1` being a percentage of device's max zoom, where `0` means not zoomed and `1` means maximum zoom.

#### Inherited Props

## Static Methods

### `dismissScanner()`

Dismiss the scanner presented by `launchScanner`.

> On Android, the scanner is dismissed automatically when a barcode is scanned.

### `getAvailableVideoCodecsAsync()`

Queries the device for the available video codecs that can be used in video recording.

A promise that resolves to a list of strings that represents available codecs.

### `isAvailableAsync()`

Check whether the current device has a camera. This is useful for web and simulators cases. This isn't influenced by the Permissions API (all platforms), or HTTP usage (in the browser). You will still need to check if the native permission has been accepted.

### `launchScanner(options)`

  

### `onModernBarcodeScanned(listener)`

  

Invokes the `listener` function when a bar code has been successfully scanned. The callback is provided with an object of the `ScanningResult` shape, where the `type` refers to the bar code type that was scanned and the `data` is the information encoded in the bar code (in this case of QR codes, this is often a URL). See [`BarcodeType`](#barcodetype) for supported values.

## Component Methods

### `getAvailableLensesAsync()`

Returns the available lenses for the currently selected camera.

Returns a Promise that resolves to an array of strings representing the lens type that can be passed to `selectedLens` prop.

### `getAvailablePictureSizesAsync()`

Get picture sizes that are supported by the device.

Returns a Promise that resolves to an array of strings representing picture sizes that can be passed to `pictureSize` prop. The list varies across Android devices but is the same for every iOS.

### `getSupportedFeatures()`

Returns an object with the supported features of the camera on the current device.

`{ isModernBarcodeScannerAvailable: boolean, toggleRecordingAsyncAvailable: boolean }`

### `pausePreview()`

Pauses the camera preview. It is not recommended to use `takePictureAsync` when preview is paused.

### `recordAsync(options)`

  

Starts recording a video that will be saved to cache directory. Videos are rotated to match device's orientation. Flipping camera during a recording results in stopping it.

`[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<undefined | { uri: string }>`

Returns a Promise that resolves to an object containing video file `uri` property and a `codec` property on iOS. The Promise is returned if `stopRecording` was invoked, one of `maxDuration` and `maxFileSize` is reached or camera preview is stopped.

### `resumePreview()`

Resumes the camera preview.

### `stopRecording()`

Stops recording if any is in progress.

### `takePictureAsync(options)`

  

Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation (if `options.skipProcessing` flag is not enabled) and scaled to match the preview.

> Note: Make sure to wait for the [`onCameraReady`](#oncameraready) callback before calling this method.

Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on Android, iOS, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify the dimensions of the image.

`base64` is included if the `base64` option was truthy, and is a string containing the JPEG data of the image in Base64. Prepend it with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source for an `Image` element for example.

`exif` is included if the `exif` option was truthy, and is an object containing EXIF data for the image. The names of its properties are EXIF tags and their values are the values for those tags.

> On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync`](https://docs.expo.dev/versions/latest/sdk/filesystem#filesystemcopyasyncoptions) to make a permanent copy of the image.

> Note: Avoid calling this method while the preview is paused. On Android, this will throw an error. On iOS, this will take a picture of the last frame that is currently on screen.

### `takePictureAsync(options)`

  

Takes a picture and saves it to app's cache directory. Photos are rotated to match device's orientation (if `options.skipProcessing` flag is not enabled) and scaled to match the preview.

> Note: Make sure to wait for the [`onCameraReady`](#oncameraready) callback before calling this method.

Returns a Promise that resolves to `CameraCapturedPicture` object, where `uri` is a URI to the local image file on Android, iOS, and a base64 string on web (usable as the source for an `Image` element). The `width` and `height` properties specify the dimensions of the image.

`base64` is included if the `base64` option was truthy, and is a string containing the JPEG data of the image in Base64. Prepend it with `'data:image/jpg;base64,'` to get a data URI, which you can use as the source for an `Image` element for example.

`exif` is included if the `exif` option was truthy, and is an object containing EXIF data for the image. The names of its properties are EXIF tags and their values are the values for those tags.

> On native platforms, the local image URI is temporary. Use [`FileSystem.copyAsync`](https://docs.expo.dev/versions/latest/sdk/filesystem#filesystemcopyasyncoptions) to make a permanent copy of the image.

> Note: Avoid calling this method while the preview is paused. On Android, this will throw an error. On iOS, this will take a picture of the last frame that is currently on screen.

### `toggleRecordingAsync()`

Pauses or resumes the video recording. Only has an effect if there is an active recording. On `iOS`, this method only supported on `iOS` 18.

Example

```
const { toggleRecordingAsyncAvailable } = getSupportedFeatures()

return (
 {toggleRecordingAsyncAvailable && (
   <Button title="Toggle Recording" onPress={toggleRecordingAsync} />
 )}
)
```

## Hooks

### `useCameraPermissions(options)`

  

Check or request permissions to access the camera. This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = useCameraPermissions();
```

### `useMicrophonePermissions(options)`

  

Check or request permissions to access the microphone. This uses both `requestMicrophonePermissionsAsync` and `getMicrophonePermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Camera.useMicrophonePermissions();
```

## Classes

### `CameraNativeModule`

Type: Class extends `[_default](#_default)<[CameraEvents](#cameraevents)>`

CameraNativeModule Properties

### `dismissScanner`

Read OnlyâType:

`() => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<void>`

### `getAvailableVideoCodecsAsync`

Read OnlyâType:

`() => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<[VideoCodec[]](#videocodec)>`

### `getCameraPermissionsAsync`

Read OnlyâType:

`() => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<[PermissionResponse](#permissionresponse)>`

### `getMicrophonePermissionsAsync`

Read OnlyâType:

`() => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<[PermissionResponse](#permissionresponse)>`

### `isAvailableAsync`

Read OnlyâType:

`() => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<boolean>`

### `isModernBarcodeScannerAvailable`

Read OnlyâType:

`boolean`

### `launchScanner`

Read OnlyâType:

`(options?: [ScanningOptions](#scanningoptions)) => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<void>`

### `requestCameraPermissionsAsync`

Read OnlyâType:

`() => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<[PermissionResponse](#permissionresponse)>`

### `requestMicrophonePermissionsAsync`

Read OnlyâType:

`() => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<[PermissionResponse](#permissionresponse)>`

### `scanFromURLAsync`

Read OnlyâType:

`(url: string, barcodeTypes?: [BarcodeType[]](#barcodetype)) => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<[BarcodeScanningResult[]](#barcodescanningresult)>`

### `toggleRecordingAsyncAvailable`

Read OnlyâType:

`boolean`

### `PictureRef`

Type: Class extends `[SharedRef](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedref)<'image'>`

A reference to a native instance of the image.

PictureRef Properties

### `height`

Height of the image.

### `nativeRefType`

The type of the native reference.

PictureRef Methods

### `savePictureAsync(options)`

  

Saves the image to the file system in the cache directory.

## Methods

### `Camera.scanFromURLAsync(url, barcodeTypes)`

  

Scan bar codes from the image at the given URL.

A possibly empty array of objects of the `BarcodeScanningResult` shape, where the type refers to the barcode type that was scanned and the data is the information encoded in the barcode.

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `AvailableLenses`

### `BarcodeBounds`

### `BarcodePoint`

Type: `[Point](#point)`

These coordinates are represented in the coordinate space of the camera source (e.g. when you are using the camera view, these values are adjusted to the dimensions of the view).

### `BarcodeScanningResult`

### `BarcodeSettings`

### `BarcodeSize`

### `BarcodeType`

Literal Type: `string`

The available barcode types that can be scanned.

Acceptable values are: `'aztec'` | `'ean13'` | `'ean8'` | `'qr'` | `'pdf417'` | `'upc_e'` | `'datamatrix'` | `'code39'` | `'code93'` | `'itf14'` | `'codabar'` | `'code128'` | `'upc_a'`

### `CameraCapturedPicture`

### `CameraEvents`

### `CameraMode`

Literal Type: `string`

Acceptable values are: `'picture'` | `'video'`

### `CameraMountError`

### `CameraOrientation`

Literal Type: `string`

Acceptable values are: `'portrait'` | `'portraitUpsideDown'` | `'landscapeLeft'` | `'landscapeRight'`

### `CameraPictureOptions`

### `CameraRatio`

Literal Type: `string`

Acceptable values are: `'4:3'` | `'16:9'` | `'1:1'`

### `CameraRecordingOptions`

### `CameraType`

Literal Type: `string`

Acceptable values are: `'front'` | `'back'`

### `FlashMode`

Literal Type: `string`

Acceptable values are: `'off'` | `'on'` | `'auto'`

### `FocusMode`

Literal Type: `string`

This option specifies the mode of focus on the device.

*   `on` - Indicates that the device should autofocus once and then lock the focus.
*   `off` - Indicates that the device should automatically focus when needed.

Acceptable values are: `'on'` | `'off'`

### `ImageType`

Literal Type: `string`

Acceptable values are: `'png'` | `'jpg'`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

An object obtained by permissions get and request functions.

### `PhotoResult`

### `Point`

### `ResponsiveOrientationChanged`

### `SavePictureOptions`

A map defining how modified image should be saved.

### `ScanningOptions`

### `ScanningResult`

Type: `[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[BarcodeScanningResult](#barcodescanningresult), 'bounds' | 'cornerPoints'>`

### `VideoCodec`

Literal Type: `string`

This option specifies what codec to use when recording a video.

Acceptable values are: `'avc1'` | `'hvc1'` | `'jpeg'` | `'apcn'` | `'ap4h'`

### `VideoQuality`

Literal Type: `string`

Acceptable values are: `'2160p'` | `'1080p'` | `'720p'` | `'480p'` | `'4:3'`

### `VideoStabilization`

Literal Type: `string`

This option specifies the stabilization mode to use when recording a video.

Acceptable values are: `'off'` | `'standard'` | `'cinematic'` | `'auto'`

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

This package automatically adds the `CAMERA` permission to your app. If you want to record videos with audio, you have to include the `RECORD_AUDIO` in your app.json inside the [`expo.android.permissions`](https://docs.expo.dev/versions/latest/config/app#permissions) array.

### iOS

The following usage description keys are used by this library:

---

# captureRef

A library that allows you to capture a React Native view and save it as an image.

[](https://github.com/gre/react-native-view-shot)[](https://www.npmjs.com/package/react-native-view-shot)

Given a view, `captureRef` will essentially screenshot that view and return an image for you. This is very useful for things like signature pads, where the user draws something, and then you want to save an image from it.

If you're interested in taking snapshots from the GLView, we recommend you use [GLView's takeSnapshotAsync](https://docs.expo.dev/versions/latest/sdk/gl-view#takesnapshotasyncoptions) instead.

## Installation

`npx expo install react-native-view-shot`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/gre/react-native-view-shot) provided in the library's README or documentation.

## Note on pixel values

Remember to take the device `PixelRatio` into account. When you work with pixel values in a UI, most of the time those units are "logical pixels" or "device-independent pixels". With images like PNG files, you often work with "physical pixels". You can get the `PixelRatio` of the device using the React Native API: `PixelRatio.get()`

For example, to save a 'FullHD' picture of `1080x1080`, you would do something like this:

```
const targetPixelCount = 1080; // If you want full HD pictures
const pixelRatio = PixelRatio.get(); // The pixel ratio of the device
// pixels * pixelRatio = targetPixelCount, so pixels = targetPixelCount / pixelRatio
const pixels = targetPixelCount / pixelRatio;

const result = await captureRef(this.imageContainer, {
  result: 'tmpfile',
  height: pixels,
  width: pixels,
  quality: 1,
  format: 'png',
});
```

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/gre/react-native-view-shot)

---

# cellular

## Expo Cellular

An API that provides information about the user's cellular service provider.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-cellular)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-cellular/CHANGELOG.md)[](https://www.npmjs.com/package/expo-cellular)

`expo-cellular` provides information about the user's cellular service provider, such as its unique identifier, cellular connection type, and whether it allows VoIP calls on its network.

## Installation

`npx expo install expo-cellular`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration

Are you using this library in an existing React Native app?

## API

```
import * as Cellular from 'expo-cellular';
```

## Constants

> Deprecated Use [`allowsVoipAsync()`](#cellularallowsvoipasync) instead.

### `Cellular.allowsVoip`

Type: `boolean | null`

Indicates if the carrier allows making VoIP calls on its network. On Android, this checks whether the system supports SIP-based VoIP API. See the [Android documentation](https://developer.android.com/reference/android/net/sip/SipManager.html#isVoipSupported\(android.content.Context\)) for more information.

On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the `boolean` value indicating the carrierâs policy regarding VoIP. If you then install a new SIM card, its VoIP policy `boolean` replaces the previous value of this property.

On web, this returns `null`.

Example

```
Cellular.allowsVoip; // true or false
```

> Deprecated Use [`getCarrierNameAsync()`](#cellulargetcarriernameasync) instead.

### `Cellular.carrier`

Type: `string | null`

The name of the userâs home cellular service provider. If the device has dual SIM cards, only the carrier for the currently active SIM card will be returned. On Android, this value is only available when the SIM state is [`SIM_STATE_READY`](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY). Otherwise, this returns `null`.

On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the name of the carrier. If you then install a new SIM card, its carrier name replaces the previous value of this property. The value for this property is `null` if the user never configured a carrier for the device.

On web, this returns `null`.

Example

```
Cellular.carrier; // "T-Mobile" or "Verizon"
```

> Deprecated Use [`getIsoCountryCodeAsync()`](#cellulargetisocountrycodeasync) instead.

### `Cellular.isoCountryCode`

Type: `string | null`

The ISO country code for the userâs cellular service provider. On iOS, the value is `null` if any of the following apply:

*   The device is in airplane mode.
*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
Cellular.isoCountryCode; // "us" or "au"
```

> Deprecated Use [`getMobileCountryCodeAsync()`](#cellulargetmobilecountrycodeasync) instead.

### `Cellular.mobileCountryCode`

Type: `string | null`

The mobile country code (MCC) for the userâs current registered cellular service provider. On Android, this value is only available when SIM state is [`SIM_STATE_READY`](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY). Otherwise, this returns `null`. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is `null` if any of the following apply:

*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
Cellular.mobileCountryCode; // "310"
```

> Deprecated Use [`getMobileNetworkCodeAsync()`](#cellulargetmobilenetworkcodeasync) instead.

### `Cellular.mobileNetworkCode`

Type: `string | null`

The ISO country code for the userâs cellular service provider. On iOS, the value is `null` if any of the following apply:

*   The device is in airplane mode.
*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
Cellular.mobileNetworkCode; // "260"
```

## Hooks

### `usePermissions(options)`

  

Check or request permissions to access the phone state. This uses both `Cellular.requestPermissionsAsync` and `Cellular.getPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Cellular.usePermissions();
```

## Methods

### `Cellular.allowsVoipAsync()`

Returns if the carrier allows making VoIP calls on its network. On Android, this checks whether the system supports SIP-based VoIP API. See [here](https://developer.android.com/reference/android/net/sip/SipManager.html#isVoipSupported\(android.content.Context\)) to view more information.

On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the `boolean` value indicating the carrierâs policy regarding VoIP. If you then install a new SIM card, its VoIP policy `boolean` replaces the previous value of this property.

On web, this returns `null`.

Example

```
await Cellular.allowsVoipAsync(); // true or false
```

### `Cellular.getCarrierNameAsync()`

Returns name of the userâs home cellular service provider. If the device has dual SIM cards, only the carrier for the currently active SIM card will be returned.

On Android, this value is only available when the SIM state is [`SIM_STATE_READY`](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY). Otherwise, this returns `null`.

On iOS, if you configure a device for a carrier and then remove the SIM card, this property retains the name of the carrier. If you then install a new SIM card, its carrier name replaces the previous value of this property. The value for this property is `null` if the user never configured a carrier for the device.

On web, this returns `null`.

Example

```
await Cellular.getCarrierNameAsync(); // "T-Mobile" or "Verizon"
```

### `Cellular.getCellularGenerationAsync()`

Returns a promise which fulfils with a [`Cellular.CellularGeneration`](#cellulargeneration) enum value that represents the current cellular-generation type.

You will need to check if the native permission has been accepted to obtain generation. If the permission is denied `getCellularGenerationAsync` will resolve to `Cellular.Cellular Generation.UNKNOWN`.

On web, this method uses [`navigator.connection.effectiveType`](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType) to detect the effective type of the connection using a combination of recently observed round-trip time and downlink values. See [here](https://developer.mozilla.org/en-US/docs/Web/API/Network_Information_API) to view browser compatibility.

Example

```
await Cellular.getCellularGenerationAsync();
// CellularGeneration.CELLULAR_4G
```

### `Cellular.getIsoCountryCodeAsync()`

Returns the ISO country code for the userâs cellular service provider.

On iOS, the value is `null` if any of the following apply:

*   The device is in airplane mode.
*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
await Cellular.getIsoCountryCodeAsync(); // "us" or "au"
```

### `Cellular.getMobileCountryCodeAsync()`

Returns mobile country code (MCC) for the userâs current registered cellular service provider.

On Android, this value is only available when SIM state is [`SIM_STATE_READY`](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY). Otherwise, this returns `null`. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is `null` if any of the following apply:

*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
await Cellular.getMobileCountryCodeAsync(); // "310"
```

### `Cellular.getMobileNetworkCodeAsync()`

Returns the mobile network code (MNC) for the userâs current registered cellular service provider.

On Android, this value is only available when SIM state is [`SIM_STATE_READY`](https://developer.android.com/reference/android/telephony/TelephonyManager.html#SIM_STATE_READY). Otherwise, this returns `null`. On iOS, the value may be null on hardware prior to iPhone 4S when in airplane mode. Furthermore, the value for this property is `null` if any of the following apply:

*   There is no SIM card in the device.
*   The device is outside of cellular service range.

On web, this returns `null`.

Example

```
await Cellular.getMobileNetworkCodeAsync(); // "310"
```

### `Cellular.getPermissionsAsync()`

Checks user's permissions for accessing phone state.

### `Cellular.requestPermissionsAsync()`

Asks the user to grant permissions for accessing the phone state.

## Enums

### `CellularGeneration`

Describes the current generation of the cellular connection. It is an enum with these possible values:

#### `UNKNOWN`

`CellularGeneration.UNKNOWN ï¼ 0`

Either we are not currently connected to a cellular network or type could not be determined.

#### `CELLULAR_2G`

`CellularGeneration.CELLULAR_2G ï¼ 1`

Currently connected to a 2G cellular network. Includes CDMA, EDGE, GPRS, and IDEN type connections.

#### `CELLULAR_3G`

`CellularGeneration.CELLULAR_3G ï¼ 2`

Currently connected to a 3G cellular network. Includes EHRPD, EVDO, HSPA, HSUPA, HSDPA, HSPAP, and UTMS type connections.

#### `CELLULAR_4G`

`CellularGeneration.CELLULAR_4G ï¼ 3`

Currently connected to a 4G cellular network. Includes LTE type connections.

#### `CELLULAR_5G`

`CellularGeneration.CELLULAR_5G ï¼ 4`

Currently connected to a 5G cellular network. Includes NR and NRNSA type connections.

## Error codes

## Permissions

### Android

You must add the following permissions to your app.json inside the [`expo.android.permissions`](https://docs.expo.dev/versions/latest/config/app#permissions) array.

### iOS

_No permissions required_.

---

# checkbox

```
import Checkbox from 'expo-checkbox';
import { useState } from 'react';
import { StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [isChecked, setChecked] = useState(false);

  return (
    <View style={styles.container}>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Normal checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox
          style={styles.checkbox}
          value={isChecked}
          onValueChange={setChecked}
          color={isChecked ? '#4630EB' : undefined}
        />
        <Text style={styles.paragraph}>Custom colored checkbox</Text>
      </View>
      <View style={styles.section}>
        <Checkbox style={styles.checkbox} disabled value={isChecked} onValueChange={setChecked} />
        <Text style={styles.paragraph}>Disabled checkbox</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginHorizontal: 16,
    marginVertical: 32,
  },
  section: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  paragraph: {
    fontSize: 15,
  },
  checkbox: {
    margin: 8,
  },
});
```


---

# clipboard

## Expo Clipboard

A universal library that allows getting and setting Clipboard content.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-clipboard)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-clipboard/CHANGELOG.md)[](https://www.npmjs.com/package/expo-clipboard)

`expo-clipboard` provides an interface for getting and setting Clipboard content on Android, iOS, and Web.

## Installation

`npx expo install expo-clipboard`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import * as Clipboard from 'expo-clipboard';

export default function App() {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = async () => {
    await Clipboard.setStringAsync('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getStringAsync();
    setCopiedText(text);
  };

  return (
    <View style={styles.container}>
      <Button title="Click here to copy to Clipboard" onPress={copyToClipboard} />
      <Button title="View copied text" onPress={fetchCopiedText} />
      <Text style={styles.copiedText}>{copiedText}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});
```

## API

```
import * as Clipboard from 'expo-clipboard';
```

> On Web, this module uses the [`AsyncClipboard` API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API), which might behave differently between browsers or not be fully supported. Especially on WebKit, there's an issue which makes this API unusable in asynchronous code. [Click here for more details](https://bugs.webkit.org/show_bug.cgi?id=222262).

## Component

### `ClipboardPasteButton`

Type: `React.Element<[ClipboardPasteButtonProps](#clipboardpastebuttonprops)>`

This component displays the `UIPasteControl` button on your screen. This allows pasting from the clipboard without requesting permission from the user.

You should only attempt to render this if [`Clipboard.isPasteButtonAvailable`](#ispastebuttonavailable) is `true`. This component will render nothing if it is not available, and you will get a warning in development mode (`__DEV__ === true`).

The properties of this component extend from `View`; however, you should not attempt to set `backgroundColor`, `color` or `borderRadius` with the `style` property. Apple restricts customisation of this view. Instead, you should use the backgroundColor and foregroundColor properties to set the colors of the button, the cornerStyle property to change the border radius, and the displayMode property to change the appearance of the icon and label. The word "Paste" is not editable and neither is the icon.

Make sure to attach height and width via the style props as without these styles, the button will not appear on the screen.

> See: [Apple Documentation](https://developer.apple.com/documentation/uikit/uipastecontrol) for more details.

ClipboardPasteButtonProps

### `acceptedContentTypes`

OptionalâType:

`[AcceptedContentType[]](#acceptedcontenttype)`âDefault: `['plain-text', 'image']`

An array of the content types that will cause the button to become active.

> Do not include `plain-text` and `html` at the same time as this will cause all text to be treated as `html`.

### `backgroundColor`

OptionalâLiteral type: `union`

The backgroundColor of the button. Leaving this as the default allows the color to adjust to the system theme settings.

Acceptable values are: `string` | `null`

### `cornerStyle`

OptionalâLiteral type: `union`âDefault: `'capsule'`

Acceptable values are: `[CornerStyleType](#cornerstyletype)` | `null`

### `displayMode`

OptionalâLiteral type: `union`âDefault: `'iconAndLabel'`

Acceptable values are: `[DisplayModeType](#displaymodetype)` | `null`

### `foregroundColor`

OptionalâLiteral type: `union`âDefault: `'white'`

The foregroundColor of the button.

Acceptable values are: `string` | `null`

### `imageOptions`

OptionalâLiteral type: `union`

The options to use when pasting an image from the clipboard.

Acceptable values are: `[GetImageOptions](#getimageoptions)` | `null`

### `onPress`

Type:

`(data: [PasteEventPayload](#pasteeventpayload)) => void`

A callback that is called with the result of the paste action. Inspect the `type` property to determine the type of the pasted data.

Can be one of `text` or `image`.

Example

```
onPress={(data) => {
    if (data.type === 'image') {
      setImageData(data);
   } else {
      setTextData(data);
    }
  }}
```

### `style`

OptionalâType:

`StyleProp<[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[ViewStyle](https://reactnative.dev/docs/view-style-props), 'backgroundColor' | 'borderRadius' | 'color'>>`

The custom style to apply to the button. Should not include `backgroundColor`, `borderRadius` or `color` properties.

#### Inherited Props

## Constants

### `isPasteButtonAvailable`

Type: `boolean`

Property that determines if the `ClipboardPasteButton` is available.

This requires the users device to be using at least iOS 16.

`true` if the component is available, and `false` otherwise.

## Methods

### `getImageAsync(options)`

  

Gets the image from the user's clipboard and returns it in the specified format. Please note that calling this method on web will prompt the user to grant your app permission to "see text and images copied to the clipboard."

If there was an image in the clipboard, the promise resolves to a [`ClipboardImage`](#clipboardimage) object containing the base64 string and metadata of the image. Otherwise, it resolves to `null`.

Example

```
const img = await Clipboard.getImageAsync({ format: 'png' });
// ...
<Image source={{ uri: img?.data }} style={{ width: 200, height: 200 }} />
```

### `getStringAsync(options)`

  

Gets the content of the user's clipboard. Please note that calling this method on web will prompt the user to grant your app permission to "see text and images copied to the clipboard."

A promise that resolves to the content of the clipboard.

### `getUrlAsync()`

Gets the URL from the user's clipboard.

A promise that fulfills to the URL in the clipboard.

### `hasImageAsync()`

Returns whether the clipboard has an image content.

On web, this requires the user to grant your app permission to _"see text and images copied to the clipboard"_.

A promise that fulfills to `true` if clipboard has image content, resolves to `false` otherwise.

### `hasStringAsync()`

Returns whether the clipboard has text content. Returns true for both plain text and rich text (e.g. HTML).

On web, this requires the user to grant your app permission to _"see text and images copied to the clipboard"_.

A promise that fulfills to `true` if clipboard has text content, resolves to `false` otherwise.

### `hasUrlAsync()`

Returns whether the clipboard has a URL content.

A promise that fulfills to `true` if clipboard has URL content, resolves to `false` otherwise.

### `setImageAsync(base64Image)`

  

Sets an image in the user's clipboard.

Example

```
const result = await ImagePicker.launchImageLibraryAsync({
  mediaTypes: ImagePicker.MediaTypeOptions.Images,
  base64: true,
});
await Clipboard.setImageAsync(result.base64);
```

> Deprecated Use [`setStringAsync()`](#setstringasynctext-options) instead.

### `setString(text)`

  

Sets the content of the user's clipboard.

On web, this returns a boolean value indicating whether or not the string was saved to the user's clipboard. On iOS and Android, nothing is returned.

### `setStringAsync(text, options)`

  

Sets the content of the user's clipboard.

On web, this returns a promise that fulfills to a boolean value indicating whether or not the string was saved to the user's clipboard. On iOS and Android, the promise always resolves to `true`.

### `setUrlAsync(url)`

  

Sets a URL in the user's clipboard.

This function behaves the same as [`setStringAsync()`](#setstringasynctext-options), except that it sets the clipboard content type to be a URL. It lets your app or other apps know that the clipboard contains a URL and behave accordingly.

## Event Subscriptions

### `addClipboardListener(listener)`

  

Adds a listener that will fire whenever the content of the user's clipboard changes. This method is a no-op on Web.

Example

```
Clipboard.addClipboardListener(({ contentTypes }: ClipboardEvent) => {
  if (contentTypes.includes(Clipboard.ContentType.PLAIN_TEXT)) {
    Clipboard.getStringAsync().then(content => {
      alert('Copy pasta! Here\'s the string that was copied: ' + content)
    });
  } else if (contentTypes.includes(Clipboard.ContentType.IMAGE)) {
    alert('Yay! Clipboard contains an image');
  }
});
```

### `removeClipboardListener(subscription)`

  

Removes the listener added by addClipboardListener. This method is a no-op on Web.

Example

```
const subscription = addClipboardListener(() => {
  alert('Copy pasta!');
});
removeClipboardListener(subscription);
```

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `AcceptedContentType`

Literal Type: `string`

Acceptable values are: `'plain-text'` | `'image'` | `'url'` | `'html'`

### `ClipboardEvent`

### `ClipboardImage`

### `CornerStyleType`

Literal Type: `string`

Acceptable values are: `'dynamic'` | `'fixed'` | `'capsule'` | `'large'` | `'medium'` | `'small'`

### `DisplayModeType`

Literal Type: `string`

Acceptable values are: `'iconAndLabel'` | `'iconOnly'` | `'labelOnly'`

### `GetImageOptions`

### `GetStringOptions`

### `ImagePasteEvent`

Type: `[ClipboardImage](#clipboardimage)` extended by:

### `PasteEventPayload`

Literal Type: `union`

Acceptable values are: `[TextPasteEvent](#textpasteevent)` | `[ImagePasteEvent](#imagepasteevent)`

### `SetStringOptions`

### `TextPasteEvent`

## Enums

### `ContentType`

Type used to define what type of data is stored in the clipboard.

#### `HTML`

`ContentType.HTML ï¼ "html"`

#### `IMAGE`

`ContentType.IMAGE ï¼ "image"`

#### `PLAIN_TEXT`

`ContentType.PLAIN_TEXT ï¼ "plain-text"`

#### `URL`

`ContentType.URL ï¼ "url"`

### `StringFormat`

Type used to determine string format stored in the clipboard.

#### `HTML`

`StringFormat.HTML ï¼ "html"`

#### `PLAIN_TEXT`

`StringFormat.PLAIN_TEXT ï¼ "plainText"`

---

# constants

## Expo Constants

An API that provides system information that remains constant throughout the lifetime of your app's installation.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-constants)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-constants/CHANGELOG.md)[](https://www.npmjs.com/package/expo-constants)

`expo-constants` provides system information that remains constant throughout the lifetime of your app's installation.

## Installation

`npx expo install expo-constants`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import Constants from 'expo-constants';
```

## Types

### `AndroidManifest`

Type: `Record<string, any>` extended by:

### `IOSManifest`

Type: `Record<string, any>` extended by:

### `NativeConstants`

Type: `Record<string, any>` extended by:

### `PlatformManifest`

Type: `Record<string, any>` extended by:

### `WebManifest`

Type: `Record<string, any>`

## Enums

### `AppOwnership`

> Deprecated Use [`Constants.executionEnvironment`](#executionenvironment) instead.

#### `Expo`

`AppOwnership.Expo ï¼ "expo"`

The experience is running inside the Expo Go app.

### `ExecutionEnvironment`

#### `Bare`

`ExecutionEnvironment.Bare ï¼ "bare"`

#### `Standalone`

`ExecutionEnvironment.Standalone ï¼ "standalone"`

#### `StoreClient`

`ExecutionEnvironment.StoreClient ï¼ "storeClient"`

### `UserInterfaceIdiom`

Current supported values are `handset`, `tablet`, `desktop` and `tv`. CarPlay will show up as `unsupported`.

#### `Desktop`

`UserInterfaceIdiom.Desktop ï¼ "desktop"`

#### `Handset`

`UserInterfaceIdiom.Handset ï¼ "handset"`

#### `Tablet`

`UserInterfaceIdiom.Tablet ï¼ "tablet"`

#### `TV`

`UserInterfaceIdiom.TV ï¼ "tv"`

#### `Unsupported`

`UserInterfaceIdiom.Unsupported ï¼ "unsupported"`

---

# contacts

## Expo Contacts

A library that provides access to the phone's system contacts.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-contacts)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-contacts/CHANGELOG.md)[](https://www.npmjs.com/package/expo-contacts)

`expo-contacts` provides access to the device's system contacts, allowing you to get contact information as well as adding, editing, or removing contacts.

On iOS, contacts have a multi-layered grouping system that you can also access through this API.

## Installation

`npx expo install expo-contacts`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-contacts` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-contacts",
        {
          "contactsPermission": "Allow $(PRODUCT_NAME) to access your contacts."
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Usage

```
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Contacts from 'expo-contacts';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await Contacts.requestPermissionsAsync();
      if (status === 'granted') {
        const { data } = await Contacts.getContactsAsync({
          fields: [Contacts.Fields.Emails],
        });

        if (data.length > 0) {
          const contact = data[0];
          console.log(contact);
        }
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Contacts Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
```

## API

```
import * as Contacts from 'expo-contacts';
```

## Component

### `ContactAccessButton`

Type: `React.[PureComponent](https://react.dev/reference/react/PureComponent)<[ContactAccessButtonProps](#contactaccessbuttonprops)>`

Creates a contact access button to quickly add contacts under limited-access authorization.

For more details, you can read the Apple docs about the underlying [`ContactAccessButton`](https://developer.apple.com/documentation/contactsui/contactaccessbutton) SwiftUI view.

ContactAccessButtonProps

### `backgroundColor`

OptionalâType:

`[ColorValue](https://reactnative.dev/docs/colors)`

A color of the button's background. Provided color should not be transparent, otherwise it may not satisfy platform requirements for button legibility.

### `caption`

OptionalâLiteral type: `string`

When the query produces a single result, the contact access button shows the caption under the matching contact name. It can be nothing (default), email address or phone number.

Acceptable values are: `'default'` | `'email'` | `'phone'`

### `ignoredEmails`

OptionalâType:

`string[]`

An array of email addresses. The search omits contacts matching query that also match any email address in this array.

### `ignoredPhoneNumbers`

OptionalâType:

`string[]`

An array of phone numbers. The search omits contacts matching query that also match any phone number in this set.

### `query`

A string to match against contacts not yet exposed to the app. You typically get this value from a search UI that your app presents, like a text field.

### `textColor`

OptionalâType:

`[ColorValue](https://reactnative.dev/docs/colors)`

A color of the button's title. Slightly dimmed version of this color is used for the caption text. Make sure there is a good contrast between the text and the background, otherwise platform requirements for button legibility may not be satisfied.

### `tintColor`

OptionalâType:

`[ColorValue](https://reactnative.dev/docs/colors)`

A tint color of the button and the modal that is presented when there is more than one match.

#### Inherited Props

## Static Methods

### `isAvailable()`

Returns a boolean whether the `ContactAccessButton` is available on the platform. This is `true` only on iOS 18.0 and newer.

## Methods

### `Contacts.addContactAsync(contact, containerId)`

  

Creates a new contact and adds it to the system.

> Note: For Android users, the Expo Go app does not have the required `WRITE_CONTACTS` permission to write to Contacts. You will need to create a [development build](https://docs.expo.dev/develop/development-builds/create-a-build) and add permission in there manually to use this method.

A promise that fulfills with ID of the new system contact.

Example

```
const contact = {
  [Contacts.Fields.FirstName]: 'Bird',
  [Contacts.Fields.LastName]: 'Man',
  [Contacts.Fields.Company]: 'Young Money',
};
const contactId = await Contacts.addContactAsync(contact);
```

### `Contacts.addExistingContactToGroupAsync(contactId, groupId)`

  

Add a contact as a member to a group. A contact can be a member of multiple groups.

Example

```
await Contacts.addExistingContactToGroupAsync(
  '665FDBCFAE55-D614-4A15-8DC6-161A368D',
  '161A368D-D614-4A15-8DC6-665FDBCFAE55'
);
```

### `Contacts.addExistingGroupToContainerAsync(groupId, containerId)`

  

Add a group to a container.

Example

```
await Contacts.addExistingGroupToContainerAsync(
  '161A368D-D614-4A15-8DC6-665FDBCFAE55',
  '665FDBCFAE55-D614-4A15-8DC6-161A368D'
);
```

### `Contacts.createGroupAsync(name, containerId)`

  

Create a group with a name, and add it to a container. If the container is `undefined`, the default container will be targeted.

A promise that fulfills with ID of the new group.

Example

```
const groupId = await Contacts.createGroupAsync('Sailor Moon');
```

### `Contacts.getContactByIdAsync(id, fields)`

  

Used for gathering precise data about a contact. Returns a contact matching the given `id`.

A promise that fulfills with `Contact` object with ID matching the input ID, or `undefined` if there is no match.

Example

```
const contact = await Contacts.getContactByIdAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
if (contact) {
  console.log(contact);
}
```

### `Contacts.getContactsAsync(contactQuery)`

  

Return a list of contacts that fit a given criteria. You can get all of the contacts by passing no criteria.

A promise that fulfills with `ContactResponse` object returned from the query.

Example

```
const { data } = await Contacts.getContactsAsync({
  fields: [Contacts.Fields.Emails],
});

if (data.length > 0) {
  const contact = data[0];
  console.log(contact);
}
```

### `Contacts.getContainersAsync(containerQuery)`

  

Query a list of system containers.

A promise that fulfills with array of containers that fit the query.

Example

```
const allContainers = await Contacts.getContainersAsync({
  contactId: '665FDBCFAE55-D614-4A15-8DC6-161A368D',
});
```

### `Contacts.getDefaultContainerIdAsync()`

Get the default container's ID.

A promise that fulfills with default container ID.

Example

```
const containerId = await Contacts.getDefaultContainerIdAsync();
```

### `Contacts.getGroupsAsync(groupQuery)`

  

Query and return a list of system groups.

A promise that fulfills with array of groups that fit the query.

Example

```
const groups = await Contacts.getGroupsAsync({ groupName: 'sailor moon' });
const allGroups = await Contacts.getGroupsAsync({});
```

### `Contacts.getPagedContactsAsync(contactQuery)`

  

### `Contacts.getPermissionsAsync()`

Checks user's permissions for accessing contacts data.

A promise that resolves to a [ContactsPermissionResponse](#contactspermissionresponse) object.

### `Contacts.isAvailableAsync()`

Returns whether the Contacts API is enabled on the current device. This method does not check the app permissions.

A promise that fulfills with a `boolean`, indicating whether the Contacts API is available on the current device. It always resolves to `false` on web.

### `Contacts.presentAccessPickerAsync()`

Presents a modal which allows the user to select which contacts the app has access to. Using this function is reasonable only when the app has "limited" permissions.

A promise that resolves with an array of contact identifiers that were newly granted to the app. Contacts which the app lost access to are not listed. On platforms other than iOS and below 18.0, the promise rejects immediately.

### `Contacts.presentContactPickerAsync()`

Presents a native contact picker to select a single contact from the system. On Android, the `READ_CONTACTS` permission is required. You can obtain this permission by calling the [`Contacts.requestPermissionsAsync()`](#contactsrequestpermissionsasync) method. On iOS, no permissions are required to use this method.

A promise that fulfills with a single `Contact` object if a contact is selected or `null` if no contact is selected (when selection is canceled).

### `Contacts.presentFormAsync(contactId, contact, formOptions)`

  

Present a native form for manipulating contacts.

Example

```
await Contacts.presentFormAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
```

### `Contacts.removeContactAsync(contactId)`

  

Delete a contact from the system.

Example

```
await Contacts.removeContactAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
```

### `Contacts.removeContactFromGroupAsync(contactId, groupId)`

  

Remove a contact's membership from a given group. This will not delete the contact.

Example

```
await Contacts.removeContactFromGroupAsync(
  '665FDBCFAE55-D614-4A15-8DC6-161A368D',
  '161A368D-D614-4A15-8DC6-665FDBCFAE55'
);
```

### `Contacts.removeGroupAsync(groupId)`

  

Delete a group from the device.

Example

```
await Contacts.removeGroupAsync('161A368D-D614-4A15-8DC6-665FDBCFAE55');
```

### `Contacts.requestPermissionsAsync()`

Asks the user to grant permissions for accessing contacts data.

A promise that resolves to a [ContactsPermissionResponse](#contactspermissionresponse) object.

### `Contacts.shareContactAsync(contactId, message, shareOptions)`

  

### `Contacts.updateContactAsync(contact)`

  

Mutate the information of an existing contact. Due to an iOS bug, `nonGregorianBirthday` field cannot be modified.

A promise that fulfills with ID of the updated system contact if mutation was successful.

Example

```
const contact = {
  id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',
  [Contacts.Fields.FirstName]: 'Drake',
  [Contacts.Fields.Company]: 'Young Money',
};
await Contacts.updateContactAsync(contact);
```

### `Contacts.updateGroupNameAsync(groupName, groupId)`

  

Change the name of an existing group.

Example

```
await Contacts.updateGroupName('Expo Friends', '161A368D-D614-4A15-8DC6-665FDBCFAE55');
```

### `Contacts.writeContactToFileAsync(contactQuery)`

  

Query a set of contacts and write them to a local URI that can be used for sharing.

A promise that fulfills with shareable local URI, or `undefined` if there was no match.

Example

```
const localUri = await Contacts.writeContactToFileAsync({
  id: '161A368D-D614-4A15-8DC6-665FDBCFAE55',
});
Share.share({ url: localUri, message: 'Call me!' });
```

## Types

### `Address`

### `CalendarFormatType`

Literal Type: `union`

Acceptable values are: `[CalendarFormats](#calendarformats)` | `{CalendarFormats}`

### `Contact`

A set of fields that define information about a single contact entity.

### `ContactQuery`

Used to query contacts from the user's device.

### `ContactResponse`

The return value for queried contact operations like `getContactsAsync`.

### `ContactSort`

String union of `[SortTypes](#sorttypes)` values.

### `ContactsPermissionResponse`

Type: `[PermissionResponse](#permissionresponse)` extended by:

### `ContactType`

Literal Type: `union`

Acceptable values are: `[ContactTypes](#contacttypes)` | `{ContactTypes}`

### `Container`

### `ContainerQuery`

Used to query native contact containers.

### `ContainerType`

Literal Type: `union`

Acceptable values are: `[ContainerTypes](#containertypes)` | `{ContainerTypes}`

### `Date`

### `Email`

### `FieldType`

Literal Type: `union`

Acceptable values are: `[Fields](#fields)` | `{Fields}`

### `FormOptions`

Denotes the functionality of a native contact form.

### `Group`

A parent to contacts. A contact can belong to multiple groups. Here are some query operations you can perform:

*   Child Contacts: `getContactsAsync({ groupId })`
*   Groups From Container: `getGroupsAsync({ containerId })`
*   Groups Named: `getContainersAsync({ groupName })`

### `GroupQuery`

Used to query native contact groups.

### `Image`

Information regarding thumbnail images.

> On Android you can get dimensions using [`Image.getSize`](https://reactnative.dev/docs/image#getsize) method.

### `InstantMessageAddress`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionResponse`

An object obtained by permissions get and request functions.

### `PhoneNumber`

### `Relationship`

### `SocialProfile`

### `UrlAddress`

## Enums

### `CalendarFormats`

This format denotes the common calendar format used to specify how a date is calculated in `nonGregorianBirthday` fields.

#### `Buddhist`

`CalendarFormats.Buddhist ï¼ "buddhist"`

#### `Chinese`

`CalendarFormats.Chinese ï¼ "chinese"`

#### `Coptic`

`CalendarFormats.Coptic ï¼ "coptic"`

#### `EthiopicAmeteAlem`

`CalendarFormats.EthiopicAmeteAlem ï¼ "ethiopicAmeteAlem"`

#### `EthiopicAmeteMihret`

`CalendarFormats.EthiopicAmeteMihret ï¼ "ethiopicAmeteMihret"`

#### `Gregorian`

`CalendarFormats.Gregorian ï¼ "gregorian"`

#### `Hebrew`

`CalendarFormats.Hebrew ï¼ "hebrew"`

#### `Indian`

`CalendarFormats.Indian ï¼ "indian"`

#### `Islamic`

`CalendarFormats.Islamic ï¼ "islamic"`

#### `IslamicCivil`

`CalendarFormats.IslamicCivil ï¼ "islamicCivil"`

#### `IslamicTabular`

`CalendarFormats.IslamicTabular ï¼ "islamicTabular"`

#### `IslamicUmmAlQura`

`CalendarFormats.IslamicUmmAlQura ï¼ "islamicUmmAlQura"`

#### `ISO8601`

`CalendarFormats.ISO8601 ï¼ "iso8601"`

#### `Japanese`

`CalendarFormats.Japanese ï¼ "japanese"`

#### `Persian`

`CalendarFormats.Persian ï¼ "persian"`

#### `RepublicOfChina`

`CalendarFormats.RepublicOfChina ï¼ "republicOfChina"`

### `ContactTypes`

#### `Company`

`ContactTypes.Company ï¼ "company"`

Contact is group or company.

#### `Person`

`ContactTypes.Person ï¼ "person"`

Contact is a human.

### `ContainerTypes`

#### `CardDAV`

`ContainerTypes.CardDAV ï¼ "cardDAV"`

With cardDAV protocol used for sharing.

#### `Exchange`

`ContainerTypes.Exchange ï¼ "exchange"`

In association with email server.

#### `Local`

`ContainerTypes.Local ï¼ "local"`

A local non-iCloud container.

#### `Unassigned`

`ContainerTypes.Unassigned ï¼ "unassigned"`

Unknown container.

### `Fields`

Possible fields to retrieve for a contact.

#### `Addresses`

`Fields.Addresses ï¼ "addresses"`

#### `Birthday`

`Fields.Birthday ï¼ "birthday"`

#### `Company`

`Fields.Company ï¼ "company"`

#### `ContactType`

`Fields.ContactType ï¼ "contactType"`

#### `Dates`

`Fields.Dates ï¼ "dates"`

#### `Department`

`Fields.Department ï¼ "department"`

#### `Emails`

`Fields.Emails ï¼ "emails"`

#### `ExtraNames`

`Fields.ExtraNames ï¼ "extraNames"`

#### `FirstName`

`Fields.FirstName ï¼ "firstName"`

#### `Image`

`Fields.Image ï¼ "image"`

#### `ImageAvailable`

`Fields.ImageAvailable ï¼ "imageAvailable"`

#### `InstantMessageAddresses`

`Fields.InstantMessageAddresses ï¼ "instantMessageAddresses"`

#### `IsFavorite`

`Fields.IsFavorite ï¼ "isFavorite"`

#### `JobTitle`

`Fields.JobTitle ï¼ "jobTitle"`

#### `LastName`

`Fields.LastName ï¼ "lastName"`

#### `MaidenName`

`Fields.MaidenName ï¼ "maidenName"`

#### `MiddleName`

`Fields.MiddleName ï¼ "middleName"`

#### `NamePrefix`

`Fields.NamePrefix ï¼ "namePrefix"`

#### `NameSuffix`

`Fields.NameSuffix ï¼ "nameSuffix"`

#### `Nickname`

`Fields.Nickname ï¼ "nickname"`

#### `NonGregorianBirthday`

`Fields.NonGregorianBirthday ï¼ "nonGregorianBirthday"`

#### `PhoneNumbers`

`Fields.PhoneNumbers ï¼ "phoneNumbers"`

#### `PhoneticFirstName`

`Fields.PhoneticFirstName ï¼ "phoneticFirstName"`

#### `PhoneticLastName`

`Fields.PhoneticLastName ï¼ "phoneticLastName"`

#### `PhoneticMiddleName`

`Fields.PhoneticMiddleName ï¼ "phoneticMiddleName"`

#### `RawImage`

`Fields.RawImage ï¼ "rawImage"`

#### `Relationships`

`Fields.Relationships ï¼ "relationships"`

#### `SocialProfiles`

`Fields.SocialProfiles ï¼ "socialProfiles"`

#### `UrlAddresses`

`Fields.UrlAddresses ï¼ "urlAddresses"`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

### `SortTypes`

#### `FirstName`

`SortTypes.FirstName ï¼ "firstName"`

Sort by first name in ascending order.

#### `LastName`

`SortTypes.LastName ï¼ "lastName"`

Sort by last name in ascending order.

#### `None`

`SortTypes.None ï¼ "none"`

No sorting should be applied.

#### `UserDefault`

`SortTypes.UserDefault ï¼ "userDefault"`

The user default method of sorting.

## Permissions

### Android

This library automatically adds `READ_CONTACTS` and `WRITE_CONTACTS` permissions to your app:

### iOS

The following usage description keys are used by this library:

---

# crypto

```
import { useEffect } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import * as Crypto from 'expo-crypto';

export default function App() {
  useEffect(() => {
    (async () => {
      const digest = await Crypto.digestStringAsync(
        Crypto.CryptoDigestAlgorithm.SHA256,
        'GitHub stars are neat ð'
      );
      console.log('Digest: ', digest);
      /* Some crypto operation... */
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Crypto Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
```


---

# date-time-picker

[](https://github.com/react-native-community/react-native-datetimepicker)

[

GitHub

](https://github.com/react-native-community/react-native-datetimepicker)

[

npm

](https://www.npmjs.com/package/@react-native-community/datetimepicker)

A component that provides access to the system UI for date and time selection.

[

GitHub

](https://github.com/react-native-community/react-native-datetimepicker)[

npm

](https://www.npmjs.com/package/@react-native-community/datetimepicker)

Android

iOS

Bundled version:

8.4.1

A component that provides access to the system UI for date and time selection.

## Installation

Terminal

`npx expo install @react-native-community/datetimepicker`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/react-native-datetimepicker/datetimepicker#getting-started) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/react-native-datetimepicker/datetimepicker)

---

# dev-client

## Expo DevClient

A library that allows creating a development build and includes useful development tools.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-dev-client)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-dev-client/CHANGELOG.md)[](https://www.npmjs.com/package/expo-dev-client)

`expo-dev-client` adds various useful development tools to your debug builds:

*   A configurable launcher UI, so you can launch updates (such as from [PR previews](https://docs.expo.dev/develop/development-builds/development-workflows#pr-previews)) and switch between development servers without needing to recompile the native app
*   Improved debugging tools (such as support for [inspecting network requests](https://docs.expo.dev/debugging/tools#inspecting-network-requests))
*   [A powerful and extensible developer menu UI](https://docs.expo.dev/debugging/tools#developer-menu)

Expo documentation refers to debug builds that include `expo-dev-client` as [development builds](https://docs.expo.dev/develop/development-builds/introduction).

## Installation

`npx expo install expo-dev-client`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), start by installing [`expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the instructions from [Install `expo-dev-client` in an existing React Native project](https://docs.expo.dev/bare/install-dev-builds-in-bare).

## Configuration in app config

You can configure development client launcher using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-dev-client",
        {
          "launchMode": "most-recent"
        }
      ]
    ]
  }
}
```

### Configurable properties

## API

```
import * as DevClient from 'expo-dev-client';
```

## Methods

### `DevClient.closeMenu()`

A method that closes development client menu when called.

### `DevClient.hideMenu()`

A method that hides development client menu when called.

### `DevClient.isDevelopmentBuild()`

A method that returns a boolean to indicate if the current application is a development build.

### `DevClient.openMenu()`

A method that opens development client menu when called.

### `DevClient.registerDevMenuItems(items)`

  

A method that allows to specify custom entries in the development client menu.

## Types

### `ExpoDevMenuItem`

An object representing the custom development client menu entry.

---

# device

## Expo Device

A universal library provides access to system information about the physical device.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-device)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-device/CHANGELOG.md)[](https://www.npmjs.com/package/expo-device)

`expo-device` provides access to system information about the physical device, such as its manufacturer and model.

## Installation

`npx expo install expo-device`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { Text, View } from 'react-native';
import * as Device from 'expo-device';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>
        {Device.manufacturer}: {Device.modelName}
      </Text>
    </View>
  );
}
```

## API

```
import * as Device from 'expo-device';
```

## Constants

### `Device.brand`

Type: `string | null`

The device brand. The consumer-visible brand of the product/hardware. On web, this value is always `null`.

Example

```
Device.brand; // Android: "google", "xiaomi"; iOS: "Apple"; web: null
```

### `Device.designName`

Type: `string | null`

The specific configuration or name of the industrial design. It represents the device's name when it was designed during manufacturing into mass production. On Android, it corresponds to [`Build.DEVICE`](https://developer.android.com/reference/android/os/Build#DEVICE). On web and iOS, this value is always `null`.

Example

```
Device.designName; // Android: "kminilte"; iOS: null; web: null
```

### `Device.deviceName`

Type: `string | null`

The human-readable name of the device, which may be set by the device's user. If the device name is unavailable, particularly on web, this value is `null`.

> On iOS 16 and newer, this value will be set to generic "iPhone" until you add the correct entitlement, see [iOS Capabilities page](https://docs.expo.dev/build-reference/ios-capabilities) to learn how to add one and check out [Apple documentation](https://developer.apple.com/documentation/uikit/uidevice/1620015-name#discussion) for more details on this change.

Example

```
Device.deviceName; // "Vivian's iPhone XS"
```

### `Device.deviceType`

Type: `[DeviceType](#devicetype) | null`

The type of the device as a [`DeviceType`](#devicetype) enum value.

On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate. If the screen diagonal length is between 3" and 6.9", the method returns `DeviceType.PHONE`. For lengths between 7" and 18", the method returns `DeviceType.TABLET`. Otherwise, the method returns `DeviceType.UNKNOWN`.

Example

```
Device.deviceType; // UNKNOWN, PHONE, TABLET, TV, DESKTOP
```

### `Device.deviceYearClass`

Type: `number | null`

The [device year class](https://github.com/facebook/device-year-class) of this device. On web, this value is always `null`.

### `Device.isDevice`

Type: `boolean`

`true` if the app is running on a real device and `false` if running in a simulator or emulator. On web, this is always set to `true`.

### `Device.manufacturer`

Type: `string | null`

The actual device manufacturer of the product or hardware. This value of this field may be `null` if it cannot be determined.

To view difference between `brand` and `manufacturer` on Android see [official documentation](https://developer.android.com/reference/android/os/Build).

Example

```
Device.manufacturer; // Android: "Google", "xiaomi"; iOS: "Apple"; web: "Google", null
```

### `Device.modelId`

Type: `any`

The internal model ID of the device. This is useful for programmatically identifying the type of device and is not a human-friendly string. On web and Android, this value is always `null`.

Example

```
Device.modelId; // iOS: "iPhone7,2"; Android: null; web: null
```

### `Device.modelName`

Type: `string | null`

The human-friendly name of the device model. This is the name that people would typically use to refer to the device rather than a programmatic model identifier. This value of this field may be `null` if it cannot be determined.

Example

```
Device.modelName; // Android: "Pixel 2"; iOS: "iPhone XS Max"; web: "iPhone", null
```

### `Device.osBuildFingerprint`

Type: `string | null`

A string that uniquely identifies the build of the currently running system OS. On Android, it follows this template:

*   `$(BRAND)/$(PRODUCT)/$(DEVICE)/$(BOARD):$(VERSION.RELEASE)/$(ID)/$(VERSION.INCREMENTAL):$(TYPE)/\$(TAGS)` On web and iOS, this value is always `null`.

Example

```
Device.osBuildFingerprint;
// Android: "google/sdk_gphone_x86/generic_x86:9/PSR1.180720.075/5124027:user/release-keys";
// iOS: null; web: null
```

### `Device.osBuildId`

Type: `string | null`

The build ID of the OS that more precisely identifies the version of the OS. On Android, this corresponds to `Build.DISPLAY` (not `Build.ID`) and currently is a string as described [here](https://source.android.com/setup/start/build-numbers). On iOS, this corresponds to `kern.osversion` and is the detailed OS version sometimes displayed next to the more human-readable version. On web, this value is always `null`.

Example

```
Device.osBuildId; // Android: "PSR1.180720.075"; iOS: "16F203"; web: null
```

### `Device.osInternalBuildId`

Type: `string | null`

The internal build ID of the OS running on the device. On Android, this corresponds to `Build.ID`. On iOS, this is the same value as [`Device.osBuildId`](#deviceosbuildid). On web, this value is always `null`.

Example

```
Device.osInternalBuildId; // Android: "MMB29K"; iOS: "16F203"; web: null,
```

### `Device.osName`

Type: `string | null`

The name of the OS running on the device.

Example

```
Device.osName; // Android: "Android"; iOS: "iOS" or "iPadOS"; web: "iOS", "Android", "Windows"
```

### `Device.osVersion`

Type: `string | null`

The human-readable OS version string. Note that the version string may not always contain three numbers separated by dots.

Example

```
Device.osVersion; // Android: "4.0.3"; iOS: "12.3.1"; web: "11.0", "8.1.0"
```

### `Device.platformApiLevel`

Type: `number | null`

The Android SDK version of the software currently running on this hardware device. This value never changes while a device is booted, but it may increase when the hardware manufacturer provides an OS update. See [here](https://developer.android.com/reference/android/os/Build.VERSION_CODES.html) to see all possible version codes and corresponding versions. On iOS and web, this value is always `null`.

Example

```
Device.platformApiLevel; // Android: 19; iOS: null; web: null
```

### `Device.productName`

Type: `string | null`

The device's overall product name chosen by the device implementer containing the development name or code name of the device. Corresponds to [`Build.PRODUCT`](https://developer.android.com/reference/android/os/Build#PRODUCT). On web and iOS, this value is always `null`.

Example

```
Device.productName; // Android: "kminiltexx"; iOS: null; web: null
```

### `Device.supportedCpuArchitectures`

Type: `string[] | null`

A list of supported processor architecture versions. The device expects the binaries it runs to be compiled for one of these architectures. This value is `null` if the supported architectures could not be determined, particularly on web.

Example

```
Device.supportedCpuArchitectures; // ['arm64 v8', 'Intel x86-64h Haswell', 'arm64-v8a', 'armeabi-v7a", 'armeabi']
```

### `Device.totalMemory`

Type: `number | null`

The device's total memory, in bytes. This is the total memory accessible to the kernel, but not necessarily to a single app. This is basically the amount of RAM the device has, not including below-kernel fixed allocations like DMA buffers, RAM for the baseband CPU, etcâ¦ On web, this value is always `null`.

Example

```
Device.totalMemory; // 17179869184
```

## Methods

### `Device.getDeviceTypeAsync()`

Checks the type of the device as a [`DeviceType`](#devicetype) enum value.

On Android, for devices other than TVs, the device type is determined by the screen resolution (screen diagonal size), so the result may not be completely accurate. If the screen diagonal length is between 3" and 6.9", the method returns `DeviceType.PHONE`. For lengths between 7" and 18", the method returns `DeviceType.TABLET`. Otherwise, the method returns `DeviceType.UNKNOWN`.

Returns a promise that resolves to a [`DeviceType`](#devicetype) enum value.

Example

```
await Device.getDeviceTypeAsync();
// DeviceType.PHONE
```

### `Device.getMaxMemoryAsync()`

Returns the maximum amount of memory that the Java VM will attempt to use. If there is no inherent limit then `Number.MAX_SAFE_INTEGER` is returned.

Returns a promise that resolves to the maximum available memory that the Java VM will use, in bytes.

Example

```
await Device.getMaxMemoryAsync();
// 402653184
```

### `Device.getPlatformFeaturesAsync()`

Gets a list of features that are available on the system. The feature names are platform-specific. See [Android documentation](https://developer.android.com/reference/android/content/pm/PackageManager#getSystemAvailableFeatures\(\)) to learn more about this implementation.

Returns a promise that resolves to an array of strings, each of which is a platform-specific name of a feature available on the current device. On iOS and web, the promise always resolves to an empty array.

Example

```
await Device.getPlatformFeaturesAsync();
// [
//   'android.software.adoptable_storage',
//   'android.software.backup',
//   'android.hardware.sensor.accelerometer',
//   'android.hardware.touchscreen',
// ]
```

### `Device.getUptimeAsync()`

Gets the uptime since the last reboot of the device, in milliseconds. Android devices do not count time spent in deep sleep.

Returns a promise that resolves to a `number` that represents the milliseconds since last reboot.

Example

```
await Device.getUptimeAsync();
// 4371054
```

### `Device.hasPlatformFeatureAsync(feature)`

  

Tells if the device has a specific system feature.

Returns a promise that resolves to a boolean value indicating whether the device has the specified system feature. On iOS and web, the promise always resolves to `false`.

Example

```
await Device.hasPlatformFeatureAsync('amazon.hardware.fire_tv');
// true or false
```

### `Device.isRootedExperimentalAsync()`

> This method is experimental and is not completely reliable. See description below.

Checks whether the device has been rooted (Android) or jailbroken (iOS). This is not completely reliable because there exist solutions to bypass root-detection on both [iOS](https://www.theiphonewiki.com/wiki/XCon) and [Android](https://tweakerlinks.com/how-to-bypass-apps-root-detection-in-android-device/). Further, many root-detection checks can be bypassed via reverse engineering.

*   On Android, it's implemented in a way to find all possible files paths that contain the `"su"` executable but some devices that are not rooted may also have this executable. Therefore, there's no guarantee that this method will always return correctly.
*   On iOS, [these jailbreak checks](https://www.theiphonewiki.com/wiki/Bypassing_Jailbreak_Detection) are used to detect if a device is rooted/jailbroken. However, since there are closed-sourced solutions such as [xCon](https://www.theiphonewiki.com/wiki/XCon) that aim to hook every known method and function responsible for informing an application of a jailbroken device, this method may not reliably detect devices that have xCon or similar packages installed.
*   On web, this always resolves to `false` even if the device is rooted.

Returns a promise that resolves to a `boolean` that specifies whether this device is rooted.

Example

```
await Device.isRootedExperimentalAsync();
// true or false
```

### `Device.isSideLoadingEnabledAsync()`

Using this method requires you to [add the `REQUEST_INSTALL_PACKAGES` permission](https://docs.expo.dev/versions/latest/config/app#permissions). Returns whether applications can be installed for this user via the system's [`ACTION_INSTALL_PACKAGE`](https://developer.android.com/reference/android/content/Intent.html#ACTION_INSTALL_PACKAGE) mechanism rather than through the OS's default app store, like Google Play.

Returns a promise that resolves to a `boolean` that represents whether the calling package is allowed to request package installation.

Example

```
await Device.isSideLoadingEnabledAsync();
// true or false
```

## Enums

### `DeviceType`

An enum representing the different types of devices supported by Expo.

#### `UNKNOWN`

`DeviceType.UNKNOWN ï¼ 0`

An unrecognized device type.

#### `PHONE`

`DeviceType.PHONE ï¼ 1`

Mobile phone handsets, typically with a touch screen and held in one hand.

#### `TABLET`

`DeviceType.TABLET ï¼ 2`

Tablet computers, typically with a touch screen that is larger than a usual phone.

#### `DESKTOP`

`DeviceType.DESKTOP ï¼ 3`

Desktop or laptop computers, typically with a keyboard and mouse.

#### `TV`

`DeviceType.TV ï¼ 4`

Device with TV-based interfaces.

Error codes
---------------------------

---

# devicemotion

A library that provides access to a device's motion and orientation sensors.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors/CHANGELOG.md)[](https://www.npmjs.com/package/expo-sensors)

`DeviceMotion` from `expo-sensors` provides access to the device motion and orientation sensors. All data is presented in terms of three axes that run through a device. According to portrait orientation: X runs from left to right, Y from bottom to top and Z perpendicularly through the screen from back to front.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `DeviceMotion` from `expo-sensor` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion."
        }
      ]
    ]
  }
}
```

### Configurable properties

| Name | Default | Description |
| --- | --- | --- |
| `motionPermission` | `"Allow $(PRODUCT_NAME) to access your device motion"` | 
Only for: iOS

  

A string to set the [`NSMotionUsageDescription`](#ios) permission message.

 |

Are you using this library in an existing React Native app?

If you're not using Continuous Native Generation ([CNG](https://docs.expo.dev/workflow/continuous-native-generation)) or you're using native ios project manually, then you need to configure `NSMotionUsageDescription` key in your native project to access `DeviceMotion` stats:

```
<key>NSMotionUsageDescription</key>
<string>Allow $(PRODUCT_NAME) to access your device motion</string>
```

## API

```
import { DeviceMotion } from 'expo-sensors';
```

## Constants

### `Gravity`

Type: `number`

Constant value representing standard gravitational acceleration for Earth (`9.80665` m/s^2).

## Classes

### `DeviceMotion`

Type: Class extends `[DeviceSensor](https://docs.expo.dev/versions/latest/sdk/sensors)<[DeviceMotionMeasurement](#devicemotionmeasurement)>`

A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type `Measurement`.

DeviceMotion Properties

### `Gravity`

Type:

`number`âDefault: `ExponentDeviceMotion.Gravity`

Constant value representing standard gravitational acceleration for Earth (`9.80665` m/s^2).

DeviceMotion Methods

### `addListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `Listener<[DeviceMotionMeasurement](#devicemotionmeasurement)>` | 
A callback that is invoked when a device motion sensor update is available. When invoked, the listener is provided a single argument that is a `DeviceMotionMeasurement` object.

 |

  

Subscribe for updates to the device motion sensor.

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Returns whether the accelerometer is enabled on the device.

On mobile web, you must first invoke `DeviceMotion.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module. If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.

On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as `DeviceMotion` is now considered a secure API. There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.

A promise that resolves to a `boolean` denoting the availability of device motion sensor.

### `removeAllListeners()`

Removes all registered listeners.

### `removeSubscription(subscription)`

| Parameter | Type | Description |
| --- | --- | --- |
| subscription | `EventSubscription` | 
A subscription to remove.

 |

  

Removes the given subscription.

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

### `setUpdateInterval(intervalMs)`

| Parameter | Type | Description |
| --- | --- | --- |
| intervalMs | `number` | 
Desired interval in milliseconds between sensor updates.

> Starting from Android 12 (API level 31), the system has a 200ms limit for each sensor updates.
> 
> If you need an update interval less than 200ms, you should:
> 
> *   add `android.permission.HIGH_SAMPLING_RATE_SENSORS` to [app.json `permissions` field](https://docs.expo.dev/versions/latest/config/app#permissions)
> *   or if you are using bare workflow, add `<uses-permission android:name="android.permission.HIGH_SAMPLING_RATE_SENSORS"/>` to AndroidManifest.xml.

 |

  

Set the sensor update interval.

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `DeviceMotionMeasurement`

| Property | Type | Description |
| --- | --- | --- |
| acceleration | `null | { timestamp: number, x: number, y: number, z: number }` | 
Device acceleration on the three axis as an object with `x`, `y`, `z` keys. Expressed in meters per second squared (m/s^2).

 |
| accelerationIncludingGravity | `{ timestamp: number, x: number, y: number, z: number }` | 

Device acceleration with the effect of gravity on the three axis as an object with `x`, `y`, `z` keys. Expressed in meters per second squared (m/s^2).

 |
| interval | `number` | 

Interval at which data is obtained from the native platform. Expressed in milliseconds (ms).

 |
| orientation | `[DeviceMotionOrientation](#devicemotionorientation)` | 

Device orientation based on screen rotation. Value is one of:

*   `0` (portrait),
*   `90` (right landscape),
*   `180` (upside down),
*   `-90` (left landscape).

 |
| rotation | `{ alpha: number, beta: number, gamma: number, timestamp: number }` | 

Device's orientation in space as an object with alpha, beta, gamma keys where alpha is for rotation around Z axis, beta for X axis rotation and gamma for Y axis rotation.

 |
| rotationRate | `null | { alpha: number, beta: number, gamma: number, timestamp: number }` | 

Device's rate of rotation in space expressed in degrees per second (deg/s).

 |

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionResponse`

An object obtained by permissions get and request functions.

| Property | Type | Description |
| --- | --- | --- |
| canAskAgain | `boolean` | 
Indicates if user can be asked again for specific permission. If not, one should be directed to the Settings app in order to enable/disable the permission.

 |
| expires | `[PermissionExpiration](#permissionexpiration)` | 

Determines time when the permission expires.

 |
| granted | `boolean` | 

A convenience boolean that indicates if the permission is granted.

 |
| status | `[PermissionStatus](#permissionstatus)` | 

Determines the status of the permission.

 |

## Enums

### `DeviceMotionOrientation`

#### `LeftLandscape`

`DeviceMotionOrientation.LeftLandscape ï¼ -90`

#### `Portrait`

`DeviceMotionOrientation.Portrait ï¼ 0`

#### `RightLandscape`

`DeviceMotionOrientation.RightLandscape ï¼ 90`

#### `UpsideDown`

`DeviceMotionOrientation.UpsideDown ï¼ 180`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### iOS

The following usage description keys are used by this library:

| Info.plist Key | Description |
| --- | --- |
| 
`NSMotionUsageDescription`

 | A message that tells the user why the app is requesting access to the deviceâs motion data. |

---

# document-picker

A library that provides access to the system's UI for selecting documents from the available providers on the user's device.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-document-picker)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-document-picker/CHANGELOG.md)[](https://www.npmjs.com/package/expo-document-picker)

`expo-document-picker` provides access to the system's UI for selecting documents from the available providers on the user's device.

## Installation

`npx expo install expo-document-picker`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-document-picker` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.

### Example app.json with config plugin

If you want to enable [iCloud storage features](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_icloud-services), set the `expo.ios.usesIcloudStorage` key to `true` in the [app config](https://docs.expo.dev/workflow/configuration) file as specified [configuration properties](https://docs.expo.dev/versions/latest/config/app#usesicloudstorage).

Running [EAS Build](https://docs.expo.dev/build/introduction) locally will use [iOS capabilities signing](https://docs.expo.dev/build-reference/ios-capabilities) to enable the required capabilities before building.

```
{
  "expo": {
    "plugins": [
      [
        "expo-document-picker",
        {
          "iCloudContainerEnvironment": "Production"
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Using with `expo-file-system`

When using `expo-document-picker` with [`expo-file-system`](https://docs.expo.dev/versions/latest/sdk/filesystem), it's not always possible for the file system to read the file immediately after the `expo-document-picker` picks it.

To allow the `expo-file-system` to read the file immediately after it is picked, you'll need to ensure that the [`copyToCacheDirectory`](https://docs.expo.dev/versions/latest/sdk/document-picker#documentpickeroptions) option is set to `true`.

## API

```
import * as DocumentPicker from 'expo-document-picker';
```

## Component

### `getDocumentAsync`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[DocumentPickerOptions](#documentpickeroptions)>`

Display the system UI for choosing a document. By default, the chosen file is copied to [the app's internal cache directory](https://docs.expo.dev/versions/latest/sdk/filesystem#filesystemcachedirectory).

> Notes for Web: The system UI can only be shown after user activation (e.g. a `Button` press). Therefore, calling `getDocumentAsync` in `componentDidMount`, for example, will not work as intended. The `cancel` event will not be returned in the browser due to platform restrictions and inconsistencies across browsers.

## Types

### `DocumentPickerAsset`

### `DocumentPickerCanceledResult`

Type representing canceled pick result.

### `DocumentPickerOptions`

### `DocumentPickerResult`

Literal Type: `union`

Type representing successful and canceled document pick result.

Acceptable values are: `[DocumentPickerSuccessResult](#documentpickersuccessresult)` | `[DocumentPickerCanceledResult](#documentpickercanceledresult)`

### `DocumentPickerSuccessResult`

Type representing successful pick result.

---

# expo

Set of common methods and types for Expo and related packages.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo)[](https://github.com/expo/expo/tree/sdk-53/packages/expo/CHANGELOG.md)[](https://www.npmjs.com/package/expo)

## Installation

## API

```
import * as Expo from 'expo';
```

### `expo/fetch` API

`expo/fetch` provides a [WinterCG-compliant Fetch API](https://fetch.spec.wintercg.org/) that works consistently across web and mobile environments, ensuring a standardized and cross-platform fetch experience within Expo applications.

```
import { fetch } from 'expo/fetch';

const resp = await fetch('https://httpbin.org/drip?numbytes=512&duration=2', {
  headers: { Accept: 'text/event-stream' },
});
const reader = resp.body.getReader();
const chunks = [];
while (true) {
  const { done, value } = await reader.read();
  if (done) {
    break;
  }
  chunks.push(value);
}
const buffer = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));
console.log(buffer.length); // 512
```

### Encoding APIs

`TextEncoder` and `TextDecoder` are built-in APIs that provide a way to encode and decode text in various character encodings. They are available on all platforms. Refer to the [browser and server runtime support](https://caniuse.com/textencoder) for web and Node.js.

```
// [104, 101, 108, 108, 111]
const hello = new TextEncoder().encode('hello');

// "hello"
const text = new TextDecoder().decode(hello);
```

The `TextEncoder` API is included in the Hermes engine. See the [source code in TextEncoder.cpp inside the Hermes GitHub repository](https://github.com/facebook/hermes/blob/9e2bbf8eda15936ee00aee4f8e024ceaa7cd800d/lib/VM/JSLib/TextEncoder.cpp#L1).

The `TextDecoder` API is not [spec-compliant](https://encoding.spec.whatwg.org/#textdecoder) on native platforms. Only the UTF-8 encoding is supported. If you need support for more encodings, use a polyfill like [`text-encoding`](https://www.npmjs.com/package/text-encoding).

### Streams API

Global support for standard web streams is available on native platforms to match the behavior of web and server platforms. Refer to the [browser and server runtime support](https://caniuse.com/streams) for specific web and Node.js support. EAS Hosting server runtime also includes support for the standard web streams API.

Globally access `ReadableStream`, `WritableStream`, and `TransformStream` classes.

```
const stream = new ReadableStream({
  start(controller) {
    controller.enqueue('Hello');
    controller.enqueue('World');
    controller.close();
  },
});
const reader = stream.getReader();
reader.read().then(({ done, value }) => {
  console.log(value); // Hello
});
reader.read().then(({ done, value }) => {
  console.log(value); // World
});
```

### URL API

`URL` provides the standard API on all platforms.

On native platforms, built-in `URL` and `URLSearchParams` implementations replace the shims in `react-native`. Refer to the [browser and server runtime support](https://caniuse.com/url) for web and Node.js.

```
const url = new URL('https://expo.dev');

const params = new URLSearchParams();
```

Expo's built-in `URL` support attempts to be fully [spec compliant](https://developer.mozilla.org/en-US/docs/Web/API/URL). The only missing exception is that native platforms do not currently support [non-ASCII characters](https://unicode.org/reports/tr46/) in the hostname.

```
console.log(new URL('http://ð¥').toString());

// This outputs the following:
// - Web, Node.js: http://xn--pr9h/
// - Android, iOS: http://ð¥/
```

## Constants

### `SharedRef`

Type: `SharedRefType`

## Hooks

### `useEvent(eventEmitter, eventName, initialValue)`

  

React hook that listens to events emitted by the given object. The returned value is an event parameter that gets updated whenever a new event is dispatched.

`InferEventParameter<TEventListener, TInitialValue>`

A parameter of the event listener.

Example

```
import { useEvent } from 'expo';
import { VideoPlayer } from 'expo-video';

export function PlayerStatus({ videoPlayer }: { videoPlayer: VideoPlayer }) {
  const { status } = useEvent(videoPlayer, 'statusChange', { status: videoPlayer.status });

  return <Text>{`Player status: ${status}`}</Text>;
}
```

### `useEventListener(eventEmitter, eventName, listener)`

  

React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched. The event listener is automatically added during the first render and removed when the component unmounts.

Example

```
import { useEventListener } from 'expo';
import { useVideoPlayer, VideoView } from 'expo-video';

export function VideoPlayerView() {
  const player = useVideoPlayer(videoSource);

  useEventListener(player, 'playingChange', ({ isPlaying }) => {
    console.log('Player is playing:', isPlaying);
  });

  return <VideoView player={player} />;
}
```

## Classes

### `EventEmitterType`

A class that provides a consistent API for emitting and listening to events. It shares many concepts with other emitter APIs, such as Node's EventEmitter and `fbemitter`. When the event is emitted, all of the functions attached to that specific event are called _synchronously_. Any values returned by the called listeners are _ignored_ and discarded. Its implementation is written in C++ and common for all the platforms.

EventEmitterType Methods

### `addListener(eventName, listener)`

  

Adds a listener for the given event name.

### `emit(eventName, ...args)`

  

Synchronously calls all the listeners attached to that specific event. The event can include any number of arguments that will be passed to the listeners.

### `listenerCount(eventName)`

  

Returns a number of listeners added to the given event.

### `removeAllListeners(eventName)`

  

Removes all listeners for the given event name.

### `removeListener(eventName, listener)`

  

Removes a listener for the given event name.

### `startObserving(eventName)`

  

Function that is automatically invoked when the first listener for an event with the given name is added. Override it in a subclass to perform some additional setup once the event started being observed.

### `stopObserving(eventName)`

  

Function that is automatically invoked when the last listener for an event with the given name is removed. Override it in a subclass to perform some additional cleanup once the event is no longer observed.

### `NativeModuleType`

Type: Class extends `[EventEmitter](https://docs.expo.dev/versions/v53.0.0/sdk/expo#eventemitter)<TEventsMap>`

A class for all native modules. Extends the [EventEmitter](#eventemitter) class.

### `SharedObjectType`

Type: Class extends `[EventEmitter](https://docs.expo.dev/versions/v53.0.0/sdk/expo#eventemitter)<TEventsMap>` implements `[EventEmitter](https://docs.expo.dev/versions/v53.0.0/sdk/expo#eventemitter)<TEventsMap>`

Base class for all shared objects that extends the [EventEmitter](#eventemitter) class. The implementation is written in C++, installed through JSI and common for mobile platforms.

SharedObjectType Methods

### `release()`

A function that detaches the JS and native objects to let the native object deallocate before the JS object gets deallocated by the JS garbage collector. Any subsequent calls to native functions of the object will throw an error as it is no longer associated with its native counterpart.

In most cases, you should never need to use this function, except some specific performance-critical cases when manual memory management makes sense and the native object is known to exclusively retain some native memory (such as binary data or image bitmap). Before calling this function, you should ensure that nothing else will use this object later on. Shared objects created by React hooks are usually automatically released in the effect's cleanup phase, for example: `useVideoPlayer()` from `expo-video` and `useImage()` from `expo-image`.

### `SharedRefType`

Type: Class extends `[SharedObject](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedobject)<TEventsMap>` implements `[SharedObject](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedobject)<TEventsMap>`

A [SharedObject](#sharedobject) that holds a reference to any native object. Allows passing references to native instances among different independent libraries.

For instance, `ImageRef` from `expo-image` references a [Drawable](https://developer.android.com/reference/android/graphics/drawable/Drawable) on Android and an [UIImage](https://developer.apple.com/documentation/uikit/uiimage) on iOS. Since both types are common on these platforms, different native modules can use them without depending on each other. In particular, this enables the `expo-image-manipulator` to pass the resulted image directly to the image view from `expo-image` without any additional writes and reads from the file system.

SharedRefType Properties

### `nativeRefType`

The type of the native reference.

## Methods

### `isRunningInExpoGo()`

Returns a boolean value whether the app is running in Expo Go.

### `registerRootComponent(component)`

  

Sets the initial React component to render natively in the app's root React Native view on Android, iOS, tvOS and the web.

This method does the following:

*   Invokes React Native's `AppRegistry.registerComponent`.
*   Invokes React Native web's `AppRegistry.runApplication` on web to render to the root `index.html` file.
*   Polyfills the `process.nextTick` function globally.

This method also adds the following dev-only features that are removed in production bundles.

*   Adds the Fast Refresh and bundle splitting indicator to the app.
*   Asserts if the `expo-updates` package is misconfigured.
*   Asserts if `react-native` is not aliased to `react-native-web` when running in the browser.

> See: For information on how to setup `registerRootComponent` in an existing (bare) React Native app, see [Common questions](#rootregistercomponent-setup-for-existing-react-native-projects) below.

### `registerWebModule(moduleImplementation, moduleName)`

  

Registers a web module.

A singleton instance of the class passed into arguments.

### `reloadAppAsync(reason)`

  

Reloads the app. This method works for both release and debug builds.

Unlike [`Updates.reloadAsync()`](https://docs.expo.dev/versions/latest/sdk/updates#updatesreloadasync), this function does not use a new update even if one is available. It only reloads the app using the same JavaScript bundle that is currently running.

### `requireNativeModule(moduleName)`

  

Imports the native module registered with given name. In the first place it tries to load the module installed through the JSI host object and then falls back to the bridge proxy module. Notice that the modules loaded from the proxy may not support some features like synchronous functions.

Object representing the native module.

### `requireNativeView(moduleName, viewName)`

  

A drop-in replacement for `requireNativeComponent`.

### `requireOptionalNativeModule(moduleName)`

  

Imports the native module registered with the given name. The same as `requireNativeModule`, but returns `null` when the module cannot be found instead of throwing an error.

Object representing the native module or `null` when it cannot be found.

## Event Subscriptions

### `useEventListener(eventEmitter, eventName, listener)`

  

React hook that listens to events emitted by the given object and calls the listener function whenever a new event is dispatched. The event listener is automatically added during the first render and removed when the component unmounts.

Example

```
import { useEventListener } from 'expo';
import { useVideoPlayer, VideoView } from 'expo-video';

export function VideoPlayerView() {
  const player = useVideoPlayer(videoSource);

  useEventListener(player, 'playingChange', ({ isPlaying }) => {
    console.log('Player is playing:', isPlaying);
  });

  return <VideoView player={player} />;
}
```

## Common questions

Some common questions about using the `expo` package in your project.

`rootRegisterComponent` setup for existing React Native projects What if I want to name my main app file something other than App.js or app/\_layout.tsx?

---

# filesystem

## Expo FileSystem

A library that provides access to the local file system on the device.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-file-system)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-file-system/CHANGELOG.md)[](https://www.npmjs.com/package/expo-file-system)

`expo-file-system` provides access to a file system stored locally on the device. It is also capable of uploading and downloading files from network URLs.

Diagram explaining how expo-file-system interacts with different resources How expo-file-system works differently inside of the Expo Go app

## Installation

`npx expo install expo-file-system`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

### Downloading files

```
const callback = downloadProgress => {
  const progress = downloadProgress.totalBytesWritten / downloadProgress.totalBytesExpectedToWrite;
  this.setState({
    downloadProgress: progress,
  });
};

const downloadResumable = FileSystem.createDownloadResumable(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4',
  {},
  callback
);

try {
  const { uri } = await downloadResumable.downloadAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

try {
  await downloadResumable.pauseAsync();
  console.log('Paused download operation, saving for future retrieval');
  AsyncStorage.setItem('pausedDownload', JSON.stringify(downloadResumable.savable()));
} catch (e) {
  console.error(e);
}

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}

//To resume a download across app restarts, assuming the DownloadResumable.savable() object was stored:
const downloadSnapshotJson = await AsyncStorage.getItem('pausedDownload');
const downloadSnapshot = JSON.parse(downloadSnapshotJson);
const downloadResumable = new FileSystem.DownloadResumable(
  downloadSnapshot.url,
  downloadSnapshot.fileUri,
  downloadSnapshot.options,
  callback,
  downloadSnapshot.resumeData
);

try {
  const { uri } = await downloadResumable.resumeAsync();
  console.log('Finished downloading to ', uri);
} catch (e) {
  console.error(e);
}
```

### Managing Giphy's

```
import * as FileSystem from 'expo-file-system';

const gifDir = FileSystem.cacheDirectory + 'giphy/';
const gifFileUri = (gifId: string) => gifDir + `gif_${gifId}_200.gif`;
const gifUrl = (gifId: string) => `https://media1.giphy.com/media/${gifId}/200.gif`;

// Checks if gif directory exists. If not, creates it
async function ensureDirExists() {
  const dirInfo = await FileSystem.getInfoAsync(gifDir);
  if (!dirInfo.exists) {
    console.log("Gif directory doesn't exist, creatingâ¦");
    await FileSystem.makeDirectoryAsync(gifDir, { intermediates: true });
  }
}

// Downloads all gifs specified as array of IDs
export async function addMultipleGifs(gifIds: string[]) {
  try {
    await ensureDirExists();

    console.log('Downloading', gifIds.length, 'gif filesâ¦');
    await Promise.all(gifIds.map(id => FileSystem.downloadAsync(gifUrl(id), gifFileUri(id))));
  } catch (e) {
    console.error("Couldn't download gif files:", e);
  }
}

// Returns URI to our local gif file
// If our gif doesn't exist locally, it downloads it
export async function getSingleGif(gifId: string) {
  await ensureDirExists();

  const fileUri = gifFileUri(gifId);
  const fileInfo = await FileSystem.getInfoAsync(fileUri);

  if (!fileInfo.exists) {
    console.log("Gif isn't cached locally. Downloadingâ¦");
    await FileSystem.downloadAsync(gifUrl(gifId), fileUri);
  }

  return fileUri;
}

// Exports shareable URI - it can be shared outside your app
export async function getGifContentUri(gifId: string) {
  return FileSystem.getContentUriAsync(await getSingleGif(gifId));
}

// Deletes whole giphy directory with all its content
export async function deleteAllGifs() {
  console.log('Deleting all GIF filesâ¦');
  await FileSystem.deleteAsync(gifDir);
}
```

### Server: handling multipart requests

The simple server in Node.js, which can save uploaded images to disk:

```
const express = require('express');
const app = express();
const fs = require('fs');
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });

// This method will save the binary content of the request as a file.
app.patch('/binary-upload', (req, res) => {
  req.pipe(fs.createWriteStream('./uploads/image' + Date.now() + '.png'));
  res.end('OK');
});

// This method will save a "photo" field from the request as a file.
app.patch('/multipart-upload', upload.single('photo'), (req, res) => {
  // You can access other HTTP parameters. They are located in the body object.
  console.log(req.body);
  res.end('OK');
});

app.listen(3000, () => {
  console.log('Working on port 3000');
});
```

## API

```
import * as FileSystem from 'expo-file-system';
```

### Directories

The API takes `file://` URIs pointing to local files on the device to identify files. Each app only has read and write access to locations under the following directories:

So, for example, the URI to a file named `'myFile'` under `'myDirectory'` in the app's user documents directory would be `FileSystem.documentDirectory + 'myDirectory/myFile'`.

Expo APIs that create files generally operate within these directories. This includes `Audio` recordings, `Camera` photos, `ImagePicker` results, `SQLite` databases and `takeSnapShotAsync()` results. This allows their use with the `FileSystem` API.

Some `FileSystem` functions are able to read from (but not write to) other locations.

### SAF URI

A SAF URI is a URI that is compatible with the Storage Access Framework. It should look like this `content://com.android.externalstorage.*`. The easiest way to obtain such URI is by [`requestDirectoryPermissionsAsync`](https://docs.expo.dev/versions/latest/sdk/filesystem#requestdirectorypermissionsasyncinitialfileurl) method.

## Constants

### `FileSystem.bundleDirectory`

Type: `null | string`

URI to the directory where assets bundled with the application are stored.

### `FileSystem.cacheDirectory`

Type: `null | string`

`file://` URI pointing to the directory where temporary files used by this app will be stored. Files stored here may be automatically deleted by the system when low on storage. Example uses are for downloaded or generated files that the app just needs for one-time usage.

### `FileSystem.documentDirectory`

Type: `null | string`

`file://` URI pointing to the directory where user documents for this app will be stored. Files stored here will remain until explicitly deleted by the app. Ends with a trailing `/`. Example uses are for files the user saves that they expect to see again.

## Classes

### `DownloadResumable`

Type: Class extends `[FileSystemCancellableNetworkTask](#filesystemcancellablenetworktask)<[DownloadProgressData](#downloadprogressdata)>`

DownloadResumable Properties

### `fileUri`

DownloadResumable Methods

### `cancelAsync()`

### `downloadAsync()`

Download the contents at a remote URI to a file in the app's file system.

Returns a Promise that resolves to `FileSystemDownloadResult` object, or to `undefined` when task was cancelled.

### `pauseAsync()`

Pause the current download operation. `resumeData` is added to the `DownloadResumable` object after a successful pause operation. Returns an object that can be saved with `AsyncStorage` for future retrieval (the same object that is returned from calling `FileSystem.DownloadResumable.savable()`).

Returns a Promise that resolves to `DownloadPauseState` object.

### `resumeAsync()`

Resume a paused download operation.

Returns a Promise that resolves to `FileSystemDownloadResult` object, or to `undefined` when task was cancelled.

### `savable()`

Method to get the object which can be saved with `AsyncStorage` for future retrieval.

Returns object in shape of `DownloadPauseState` type.

### `FileSystemCancellableNetworkTask`

FileSystemCancellableNetworkTask Methods

### `cancelAsync()`

### `UploadTask`

Type: Class extends `[FileSystemCancellableNetworkTask](#filesystemcancellablenetworktask)<[UploadProgressData](#uploadprogressdata)>`

UploadTask Methods

### `cancelAsync()`

### `uploadAsync()`

## Methods

### `FileSystem.copyAsync(options)`

  

Create a copy of a file or directory. Directories are recursively copied with all of their contents. It can be also used to copy content shared by other apps to local filesystem.

### `FileSystem.createDownloadResumable(uri, fileUri, options, callback, resumeData)`

  

Create a `DownloadResumable` object which can start, pause, and resume a download of contents at a remote URI to a file in the app's file system.

> Note: You need to call `downloadAsync()`, on a `DownloadResumable` instance to initiate the download. The `DownloadResumable` object has a callback that provides download progress updates. Downloads can be resumed across app restarts by using `AsyncStorage` to store the `DownloadResumable.savable()` object for later retrieval. The `savable` object contains the arguments required to initialize a new `DownloadResumable` object to resume the download after an app restart. The directory for a local file uri must exist prior to calling this function.

### `FileSystem.createUploadTask(url, fileUri, options, callback)`

  

### `FileSystem.deleteAsync(fileUri, options)`

  

Delete a file or directory. If the URI points to a directory, the directory and all its contents are recursively deleted.

### `FileSystem.deleteLegacyDocumentDirectoryAndroid()`

### `FileSystem.downloadAsync(uri, fileUri, options)`

  

Download the contents at a remote URI to a file in the app's file system. The directory for a local file uri must exist prior to calling this function.

Returns a Promise that resolves to a `FileSystemDownloadResult` object.

Example

```
FileSystem.downloadAsync(
  'http://techslides.com/demos/sample-videos/small.mp4',
  FileSystem.documentDirectory + 'small.mp4'
)
  .then(({ uri }) => {
    console.log('Finished downloading to ', uri);
  })
  .catch(error => {
    console.error(error);
  });
```

### `FileSystem.getContentUriAsync(fileUri)`

  

Takes a `file://` URI and converts it into content URI (`content://`) so that it can be accessed by other applications outside of Expo.

Returns a Promise that resolves to a `string` containing a `content://` URI pointing to the file. The URI is the same as the `fileUri` input parameter but in a different format.

Example

```
FileSystem.getContentUriAsync(uri).then(cUri => {
  console.log(cUri);
  IntentLauncher.startActivityAsync('android.intent.action.VIEW', {
    data: cUri,
    flags: 1,
  });
});
```

### `FileSystem.getFreeDiskStorageAsync()`

Gets the available internal disk storage size, in bytes. This returns the free space on the data partition that hosts all of the internal storage for all apps on the device.

Returns a Promise that resolves to the number of bytes available on the internal disk.

### `FileSystem.getInfoAsync(fileUri, options)`

  

Get metadata information about a file, directory or external content/asset.

A Promise that resolves to a `FileInfo` object. If no item exists at this URI, the returned Promise resolves to `FileInfo` object in form of `{ exists: false, isDirectory: false }`.

### `FileSystem.getTotalDiskCapacityAsync()`

Gets total internal disk storage size, in bytes. This is the total capacity of the data partition that hosts all the internal storage for all apps on the device.

Returns a Promise that resolves to a number that specifies the total internal disk storage capacity in bytes.

### `FileSystem.makeDirectoryAsync(fileUri, options)`

  

Create a new empty directory.

### `FileSystem.moveAsync(options)`

  

Move a file or directory to a new location.

### `FileSystem.readAsStringAsync(fileUri, options)`

  

Read the entire contents of a file as a string. Binary will be returned in raw format, you will need to append `data:image/png;base64,` to use it as Base64.

A Promise that resolves to a string containing the entire contents of the file.

### `FileSystem.readDirectoryAsync(fileUri)`

  

Enumerate the contents of a directory.

A Promise that resolves to an array of strings, each containing the name of a file or directory contained in the directory at `fileUri`.

### `FileSystem.uploadAsync(url, fileUri, options)`

  

Upload the contents of the file pointed by `fileUri` to the remote url.

Returns a Promise that resolves to `FileSystemUploadResult` object.

Example

Client

```
import * as FileSystem from 'expo-file-system';

try {
  const response = await FileSystem.uploadAsync(`http://192.168.0.1:1234/binary-upload`, fileUri, {
    fieldName: 'file',
    httpMethod: 'PATCH',
    uploadType: FileSystem.FileSystemUploadType.BINARY_CONTENT,
  });
  console.log(JSON.stringify(response, null, 4));
} catch (error) {
  console.log(error);
}
```

Server

Please refer to the "[Server: Handling multipart requests](#server-handling-multipart-requests)" example - there is code for a simple Node.js server.

### `FileSystem.writeAsStringAsync(fileUri, contents, options)`

  

Write the entire contents of a file as a string.

## Namespaces

### `StorageAccessFramework`

The `StorageAccessFramework` is a namespace inside of the `expo-file-system` module, which encapsulates all functions which can be used with [SAF URIs](#saf-uri). You can read more about SAF in the [Android documentation](https://developer.android.com/guide/topics/providers/document-provider).

Example

#### Basic Usage

```
import { StorageAccessFramework } from 'expo-file-system';

// Requests permissions for external directory
const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync();

if (permissions.granted) {
  // Gets SAF URI from response
  const uri = permissions.directoryUri;

  // Gets all files inside of selected directory
  const files = await StorageAccessFramework.readDirectoryAsync(uri);
  alert(`Files inside ${uri}:\n\n${JSON.stringify(files)}`);
}
```

#### Migrating an album

```
import * as MediaLibrary from 'expo-media-library';
import * as FileSystem from 'expo-file-system';
const { StorageAccessFramework } = FileSystem;

async function migrateAlbum(albumName: string) {
  // Gets SAF URI to the album
  const albumUri = StorageAccessFramework.getUriForDirectoryInRoot(albumName);

  // Requests permissions
  const permissions = await StorageAccessFramework.requestDirectoryPermissionsAsync(albumUri);
  if (!permissions.granted) {
    return;
  }

  const permittedUri = permissions.directoryUri;
  // Checks if users selected the correct folder
  if (!permittedUri.includes(albumName)) {
    return;
  }

  const mediaLibraryPermissions = await MediaLibrary.requestPermissionsAsync();
  if (!mediaLibraryPermissions.granted) {
    return;
  }

  // Moves files from external storage to internal storage
  await StorageAccessFramework.moveAsync({
    from: permittedUri,
    to: FileSystem.documentDirectory!,
  });

  const outputDir = FileSystem.documentDirectory! + albumName;
  const migratedFiles = await FileSystem.readDirectoryAsync(outputDir);

  // Creates assets from local files
  const [newAlbumCreator, ...assets] = await Promise.all(
    migratedFiles.map<Promise<MediaLibrary.Asset>>(
      async fileName => await MediaLibrary.createAssetAsync(outputDir + '/' + fileName)
    )
  );

  // Album was empty
  if (!newAlbumCreator) {
    return;
  }

  // Creates a new album in the scoped directory
  const newAlbum = await MediaLibrary.createAlbumAsync(albumName, newAlbumCreator, false);
  if (assets.length) {
    await MediaLibrary.addAssetsToAlbumAsync(assets, newAlbum, false);
  }
}
```

StorageAccessFramework Methods

### `copyAsync(options)`

  

Alias for [`copyAsync`](#filesystemcopyasyncoptions) method.

### `createFileAsync(parentUri, fileName, mimeType)`

  

Creates a new empty file.

A Promise that resolves to a [SAF URI](#saf-uri) to the created file.

### `deleteAsync(fileUri, options)`

  

Alias for [`deleteAsync`](#filesystemdeleteasyncfileuri-options) method.

### `getUriForDirectoryInRoot(folderName)`

  

Gets a [SAF URI](#saf-uri) pointing to a folder in the Android root directory. You can use this function to get URI for `StorageAccessFramework.requestDirectoryPermissionsAsync()` when you trying to migrate an album. In that case, the name of the album is the folder name.

Returns a [SAF URI](#saf-uri) to a folder.

### `makeDirectoryAsync(parentUri, dirName)`

  

Creates a new empty directory.

A Promise that resolves to a [SAF URI](#saf-uri) to the created directory.

### `moveAsync(options)`

  

Alias for [`moveAsync`](#filesystemmoveasyncoptions) method.

### `readAsStringAsync(fileUri, options)`

  

Alias for [`readAsStringAsync`](#filesystemreadasstringasyncfileuri-options) method.

A Promise that resolves to a string containing the entire contents of the file.

### `readDirectoryAsync(dirUri)`

  

Enumerate the contents of a directory.

A Promise that resolves to an array of strings, each containing the full [SAF URI](#saf-uri) of a file or directory contained in the directory at `fileUri`.

### `requestDirectoryPermissionsAsync(initialFileUrl)`

  

Allows users to select a specific directory, granting your app access to all of the files and sub-directories within that directory.

Returns a Promise that resolves to `FileSystemRequestDirectoryPermissionsResult` object.

### `writeAsStringAsync(fileUri, contents, options)`

  

Alias for [`writeAsStringAsync`](#filesystemwriteasstringasyncfileuri-contents-options) method.

## Types

### `DeletingOptions`

### `DownloadOptions`

### `DownloadPauseState`

> Deprecated use `FileSystemNetworkTaskProgressCallback<DownloadProgressData>` instead.

### `DownloadProgressCallback`

Type: `[FileSystemNetworkTaskProgressCallback](#filesystemnetworktaskprogresscallback)<[DownloadProgressData](#downloadprogressdata)>`

### `DownloadProgressData`

> Deprecated Use `FileSystemDownloadResult` instead.

### `DownloadResult`

Type: `[FileSystemDownloadResult](#filesystemdownloadresult)`

### `FileInfo`

Type: `object` shaped as below:

Or `object` shaped as below:

### `FileSystemAcceptedUploadHttpMethod`

Literal Type: `string`

Acceptable values are: `'POST'` | `'PUT'` | `'PATCH'`

### `FileSystemDownloadResult`

Type: `[FileSystemHttpResult](#filesystemhttpresult)` extended by:

### `FileSystemHttpResult`

### `FileSystemNetworkTaskProgressCallback(data)`

### `FileSystemRequestDirectoryPermissionsResult`

Type: `object` shaped as below:

Or `object` shaped as below:

### `FileSystemUploadOptions`

Type: `[UploadOptionsBinary](#uploadoptionsbinary) | [UploadOptionsMultipart](#uploadoptionsmultipart)` extended by:

### `FileSystemUploadResult`

Type: `[FileSystemHttpResult](#filesystemhttpresult)` extended by:

### `InfoOptions`

### `MakeDirectoryOptions`

### `ProgressEvent`

### `ReadingOptions`

### `RelocatingOptions`

### `UploadOptionsBinary`

Upload options when upload type is set to binary.

### `UploadOptionsMultipart`

Upload options when upload type is set to multipart.

### `UploadProgressData`

### `WritingOptions`

## Enums

### `EncodingType`

These values can be used to define how file system data is read / written.

#### `Base64`

`EncodingType.Base64 ï¼ "base64"`

Binary, radix-64 representation.

#### `UTF8`

`EncodingType.UTF8 ï¼ "utf8"`

Standard encoding format.

### `FileSystemSessionType`

These values can be used to define how sessions work on iOS.

#### `BACKGROUND`

`FileSystemSessionType.BACKGROUND ï¼ 0`

Using this mode means that the downloading/uploading session on the native side will work even if the application is moved to background. If the task completes while the application is in background, the Promise will be either resolved immediately or (if the application execution has already been stopped) once the app is moved to foreground again.

> Note: The background session doesn't fail if the server or your connection is down. Rather, it continues retrying until the task succeeds or is canceled manually.

#### `FOREGROUND`

`FileSystemSessionType.FOREGROUND ï¼ 1`

Using this mode means that downloading/uploading session on the native side will be terminated once the application becomes inactive (e.g. when it goes to background). Bringing the application to foreground again would trigger Promise rejection.

### `FileSystemUploadType`

#### `BINARY_CONTENT`

`FileSystemUploadType.BINARY_CONTENT ï¼ 0`

The file will be sent as a request's body. The request can't contain additional data.

#### `MULTIPART`

`FileSystemUploadType.MULTIPART ï¼ 1`

An [RFC 2387-compliant](https://www.ietf.org/rfc/rfc2387.txt) request body. The provided file will be encoded into HTTP request. This request can contain additional data represented by [`UploadOptionsMultipart`](#uploadoptionsmultipart) type.

## Supported URI schemes

In this table, you can see what type of URI can be handled by each method. For example, if you have an URI, which begins with `content://`, you cannot use `FileSystem.readAsStringAsync()`, but you can use `FileSystem.copyAsync()` which supports this scheme.

> On Android no scheme defaults to a bundled resource.

## Permissions

### Android

The following permissions are added automatically through this library's AndroidManifest.xml.

### iOS

_No permissions required_.

---

# filesystem-next

A library that provides access to the local file system on the device.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-file-system/next)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-file-system/next/CHANGELOG.md)[](https://www.npmjs.com/package/expo-file-system)

> The `next` version of the FileSystem API is included in the `expo-file-system` library. It can be used alongside the previous API, and offers a simplified, object oriented way of performing filesystem operations.

> To provide quicker updates, `expo-file-system/next` is currently unsupported in Expo Go and Snack. To use it, create a [development build](https://docs.expo.dev/develop/development-builds/create-a-build).

`expo-file-system/next` provides access to the file system stored locally on the device. It can also download files from the network.

## Installation

`npx expo install expo-file-system`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

### Writing and reading text files

```
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.cache, 'example.txt');
  file.create(); // can throw an error if the file already exists or no permission to create it
  file.write('Hello, world!');
  console.log(file.text()); // Hello, world!
} catch (error) {
  console.error(error);
}
```

### Downloading files

Using `downloadFileAsync`:

```
import { Directory, File, Paths } from 'expo-file-system/next';

const url = 'https://pdfobject.com/pdf/sample.pdf';
const destination = new Directory(Paths.cache, 'pdfs');
try {
  destination.create();
  const output = await File.downloadFileAsync(url, destination);
  console.log(output.exists); // true
  console.log(output.uri); // path to the downloaded file, e.g. '${cacheDirectory}/pdfs/sample.pdf'
} catch (error) {
  console.error(error);
}
```

Or using `expo/fetch`:

```
import { fetch } from 'expo/fetch';
import { File } from 'expo-file-system/next';

const url = 'https://pdfobject.com/pdf/sample.pdf';
const response = await fetch(url);
const src = new File(testDirectory, 'file.pdf');
src.write(await response.bytes());
```

### Uploading files using `expo/fetch`

You can upload files as blobs directly with `fetch` built into the Expo package:

```
import { fetch } from 'expo/fetch';
import { File } from 'expo-file-system/next';

const src = new File(testDirectory, 'file.txt');
file.write('Hello, world!');
const blob = src.blob();

const response = await fetch('https://example.com', {
  method: 'POST',
  body: blob,
});
```

Or using the `FormData` constructor:

```
import { fetch } from 'expo/fetch';

const src = new File(testDirectory, 'file.txt');
file.write('Hello, world!');
const blob = src.blob();

const formData = new FormData();
formData.append('data', blob);

const response = await fetch('https://example.com', {
  method: 'POST',
  body: formData,
});
```

### Moving and copying files

```
import { Directory, File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.document, 'example.txt');
  file.create();
  console.log(file.uri); // '${documentDirectory}/example.txt'
  file.move(Paths.cache);
  console.log(file.uri); // '${cacheDirectory}/example.txt'
  file.move(new Directory(Paths.cache, 'newFolder'));
  console.log(file.uri); // '${cacheDirectory}/newFolder/example.txt'
} catch (error) {
  console.error(error);
}
```

### Using legacy FileSystem API

```
import * as FileSystem from 'expo-file-system';
import { File, Paths } from 'expo-file-system/next';

try {
  const file = new File(Paths.cache, 'example.txt');
  const content = await FileSystem.readAsStringAsync(file.uri);
  console.log(content);
} catch (error) {
  console.error(error);
}
```

### Listing directory contents recursively

```
import { Directory, Paths } from 'expo-file-system/next';

function printDirectory(directory: Directory, indent: number = 0) {
  console.log(`${' '.repeat(indent)} + ${directory.name}`);
  const contents = directory.list();
  for (const item of contents) {
    if (item instanceof Directory) {
      printDirectory(item, indent + 2);
    } else {
      console.log(`${' '.repeat(indent + 2)} - ${item.name} (${item.size} bytes)`);
    }
  }
}

try {
  printDirectory(new Directory(Paths.cache));
} catch (error) {
  console.error(error);
}
```

## API

## Classes

### `Directory`

Type: Class extends `FileSystemDirectory`

Represents a directory on the filesystem.

A `Directory` instance can be created for any path, and does not need to exist on the filesystem during creation.

Directory Properties

### `exists`

A boolean representing if a directory exists. `true` if the directory exists, `false` otherwise. Also, `false` if the application does not have read access to the file.

### `uri`

Represents the directory URI. The field is read-only, but it may change as a result of calling some methods such as `move`.

### `parentDirectory`

Directory containing the file.

Directory Methods

### `copy(destination)`

  

### `create(options)`

  

Creates a directory that the current uri points to.

### `delete()`

Deletes a directory. Also deletes all files and directories inside the directory.

### `list()`

Lists the contents of a directory. Calling this method if the parent directory does not exist will throw an error.

An array of `Directory` and `File` instances.

### `move(destination)`

  

Moves a directory. Updates the `uri` property that now points to the new location.

### `File`

Type: Class extends `FileSystemFile`

File Properties

### `exists`

A boolean representing if a file exists. `true` if the file exists, `false` otherwise. Also, `false` if the application does not have read access to the file.

### `md5`

Literal type: `union`

A md5 hash of the file. Null if the file does not exist, or it cannot be read.

Acceptable values are: `null` | `string`

### `size`

Literal type: `union`

A size of the file in bytes. Null if the file does not exist, or it cannot be read.

Acceptable values are: `null` | `number`

### `type`

Literal type: `union`

A mime type of the file. Null if the file does not exist, or it cannot be read.

Acceptable values are: `null` | `string`

### `uri`

Represents the file URI. The field is read-only, but it may change as a result of calling some methods such as `move`.

### `extension`

### `name`

File name. Includes the extension.

### `parentDirectory`

Directory containing the file.

File Methods

### `base64()`

Retrieves content of the file as base64.

The contents of the file as a base64 string.

### `blob()`

Returns the file as a `Blob`. The blob can be used in `@expo/fetch` to send files over network and for other uses.

### `bytes()`

Retrieves byte content of the entire file.

The contents of the file as a Uint8Array.

### `copy(destination)`

  

### `create(options)`

  

### `delete()`

### `downloadFileAsync(url, destination)`

  

A static method that downloads a file from the network.

A promise that resolves to the downloaded file.

Example

```
const file = await File.downloadFileAsync("https://example.com/image.png", new Directory(Paths.document));
```

### `move(destination)`

  

Moves a directory. Updates the `uri` property that now points to the new location.

### `open()`

Returns a FileHandle object that can be used to read and write data to the file.

### `readableStream()`

### `text()`

Retrieves text from the file.

The contents of the file as string.

### `writableStream()`

### `write(content)`

  

Writes content to the file.

### `FileHandle`

FileHandle Properties

### `offset`

Literal type: `union`

A property that indicates the current byte offset in the file. Calling `readBytes` or `writeBytes` will read or write a specified amount of bytes starting from this offset. The offset is incremented by the number of bytes read or written. The offset can be set to any value within the file size. If the offset is set to a value greater than the file size, the next write operation will append data to the end of the file. Null if the file handle is closed.

Acceptable values are: `null` | `number`

### `size`

Literal type: `union`

A size of the file in bytes or `null` if the file handle is closed.

Acceptable values are: `null` | `number`

FileHandle Methods

### `close()`

Closes the file handle. This allows the file to be deleted, moved or read by a different process. Subsequent calls to `readBytes` or `writeBytes` will throw an error.

### `readBytes(length)`

  

Reads the specified amount of bytes from the file at the current offset.

### `writeBytes(bytes)`

  

Writes the specified bytes to the file at the current offset.

### `Paths`

Type: Class extends `PathUtilities`

Paths Properties

### `appleSharedContainers`

Type:

`Record<string, [Directory](#directory)>`

### `cache`

A property containing the cache directory â a place to store files that can be deleted by the system when the device runs low on storage.

### `document`

A property containing the document directory â a place to store files that are safe from being deleted by the system.

Paths Methods

### `basename(path, ext)`

  

Returns the base name of a path.

A string representing the base name.

### `dirname(path)`

  

Returns the directory name of a path.

A string representing the directory name.

### `extname(path)`

  

Returns the extension of a path.

A string representing the extension.

### `isAbsolute(path)`

  

Checks if a path is absolute.

`true` if the path is absolute, `false` otherwise.

### `join(...paths)`

  

Joins path segments into a single path.

A string representing the joined path.

### `normalize(path)`

  

Normalizes a path.

A string representing the normalized path.

### `parse(path)`

  

Parses a path into its components.

`{ base: string, dir: string, ext: string, name: string, root: string }`

An object containing the parsed path components.

### `relative(from, to)`

  

Resolves a relative path to an absolute path.

A string representing the resolved path.

## Types

### `CreateOptions`

---

# fingerprint

A library to generate a fingerprint from a React Native project.

[](https://github.com/expo/expo/tree/sdk-53/packages/@expo/fingerprint)[](https://github.com/expo/expo/tree/sdk-53/packages/@expo/fingerprint/CHANGELOG.md)[](https://www.npmjs.com/package/@expo/fingerprint)

`@expo/fingerprint` provides an API to generate a fingerprint (hash) of your project for use in determining compatibility between the native layer and JavaScript layer of your app. The hash calculation is configurable, but is by default derived from hashing app dependencies, custom native code, native project files, and configuration.

## Installation

`@expo/fingerprint` is included with [`expo`](https://docs.expo.dev/versions/latest/sdk/expo) and [`expo-updates`](https://docs.expo.dev/versions/latest/sdk/updates) by default.

If you wish to use `@expo/fingerprint` as a standalone package, you can install it by running the command:

`npx expo install @expo/fingerprint`

## CLI Usage

`npx @expo/fingerprint --help`

## Configuration

`@expo/fingerprint` provides defaults that should work for most projects, but also provides a few ways to configure the fingerprinting process to better fit your app structure and workflow.

### .fingerprintignore

Placed in your project root, .fingerprintignore is a [.gitignore](https://git-scm.com/docs/gitignore#_pattern_format)\-like ignore mechanism used to exclude files from hash calculation. All pattern paths are relative to the project root. It behaves similarly but instead uses `minimatch` for pattern matching which has some [limitations](https://docs.expo.dev/versions/latest/sdk/fingerprint#limitations) (see documentation for `ignorePaths` under [Options](https://docs.expo.dev/versions/latest/sdk/fingerprint#options)).

Here is an example .fingerprintignore configuration:

```
# Ignore the entire android directory
android/**/*

# Ignore the entire ios directory but still keep ios/Podfile and ios/Podfile.lock
ios/**/*
!ios/Podfile
!ios/Podfile.lock

# Ignore specific package in node_modules
node_modules/some-package/**/*

# Same as above but having broader scope because packages may be nested
**/node_modules/some-package/**/*
```

### fingerprint.config.js

Placed in your project root, fingerprint.config.js allows you to specify custom hash calculation configuration beyond what is configurable in the .fingerprintignore. For supported configurations, see [Config](https://docs.expo.dev/versions/latest/sdk/fingerprint#config) and [`SourceSkips`](https://docs.expo.dev/versions/latest/sdk/fingerprint#sourceskips).

Below is an example fingerprint.config.js configuration, assuming you have `@expo/fingerprint` installed as a direct dependency:

```
/** @type {import('@expo/fingerprint').Config} */
const config = {
  sourceSkips: [
    'ExpoConfigRuntimeVersionIfString',
    'ExpoConfigVersions',
    'PackageJsonAndroidAndIosScriptsIfNotContainRun',
  ],
};
module.exports = config;
```

If you are using `@expo/fingerprint` through `expo` (where `@expo/fingerprint` is installed as a transitive dependency), you can import fingerprint from `expo/fingerprint`:

```
/** @type {import('expo/fingerprint').Config} */
```

Advanced: Customize sources before fingerprint hashing

## Limitations

Limited support for `@expo/config-plugins` raw functions

## API

```
import * as Fingerprint from '@expo/fingerprint';
```

## Constants

### `Fingerprint.DEFAULT_IGNORE_PATHS`

Node

Type: `string[]`

### `Fingerprint.DEFAULT_SOURCE_SKIPS`

Node

Type: `[PackageJsonAndroidAndIosScriptsIfNotContainRun](#packagejsonandroidandiosscriptsifnotcontainrun)`

## Methods

### `Fingerprint.createFingerprintAsync(projectRoot, options)`

Node

  

Create a fingerprint for a project.

Example

```
const fingerprint = await createFingerprintAsync('/app');
console.log(fingerprint);
```

### `Fingerprint.createProjectHashAsync(projectRoot, options)`

Node

  

Create a native hash value for a project.

Example

```
const hash = await createProjectHashAsync('/app');
console.log(hash);
```

### `Fingerprint.diffFingerprintChangesAsync(fingerprint, projectRoot, options)`

Node

  

Diff the fingerprint with the fingerprint of the provided project.

Example

```
// Create a fingerprint for the project
const fingerprint = await createFingerprintAsync('/app');

// Make some changes to the project

// Calculate the diff
const diff = await diffFingerprintChangesAsync(fingerprint, '/app');
console.log(diff);
```

### `Fingerprint.diffFingerprints(fingerprint1, fingerprint2)`

Node

  

Diff two fingerprints. The implementation assumes that the sources are sorted.

Example

```
// Create a fingerprint for the project
const fingerprint = await createFingerprintAsync('/app');

// Make some changes to the project

// Create a fingerprint again
const fingerprint2 = await createFingerprintAsync('/app');
const diff = await diffFingerprints(fingerprint, fingerprint2);
console.log(diff);
```

## Interfaces

## Types

Supported options for use in fingerprint.config.js

Type: `[Pick](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)<Options, 'concurrentIoLimit' | 'hashAlgorithm' | 'ignorePaths' | 'extraSources' | 'enableReactImportsPatcher' | 'useRNCoreAutolinkingFromExpo' | 'debug' | 'fileHookTransform'>` extended by:

Literal Type: `union`

Acceptable values are: `[DebugInfoFile](#debuginfofile)` | `[DebugInfoDir](#debuginfodir)` | `[DebugInfoContents](#debuginfocontents)`

### `FileHookTransformFunction(source, chunk, isEndOfFile, encoding)`

Node

Hook function to transform file content sources before hashing.

### `FileHookTransformSource`

Node

The `source` parameter for `FileHookTransformFunction`.

Type: `object` shaped as below:

Or `object` shaped as below:

Type: `object` shaped as below:

Or `object` shaped as below:

Or `object` shaped as below:

Type: `[HashSource](#hashsource)` extended by:

Literal Type: `union`

Acceptable values are: `[HashResultFile](#hashresultfile)` | `[HashResultDir](#hashresultdir)` | `[HashResultContents](#hashresultcontents)`

Literal Type: `union`

Acceptable values are: `[HashSourceFile](#hashsourcefile)` | `[HashSourceDir](#hashsourcedir)` | `[HashSourceContents](#hashsourcecontents)`

Literal Type: `string`

Acceptable values are: `'android'` | `'ios'`

## Enums

Bitmask of values that can be used to skip certain parts of the sourcers when generating a fingerprint.

#### `None`

`SourceSkips.None ï¼ 0`

Skip nothing

#### `ExpoConfigVersions`

`SourceSkips.ExpoConfigVersions ï¼ 1`

Versions in app.json, including Android versionCode and iOS buildNumber

#### `ExpoConfigRuntimeVersionIfString`

`SourceSkips.ExpoConfigRuntimeVersionIfString ï¼ 2`

runtimeVersion in app.json if it is a string

#### `ExpoConfigNames`

`SourceSkips.ExpoConfigNames ï¼ 4`

App names in app.json, including shortName and description

#### `ExpoConfigAndroidPackage`

`SourceSkips.ExpoConfigAndroidPackage ï¼ 8`

Android package name in app.json

#### `ExpoConfigIosBundleIdentifier`

`SourceSkips.ExpoConfigIosBundleIdentifier ï¼ 16`

iOS bundle identifier in app.json

#### `ExpoConfigSchemes`

`SourceSkips.ExpoConfigSchemes ï¼ 32`

Schemes in app.json

#### `ExpoConfigEASProject`

`SourceSkips.ExpoConfigEASProject ï¼ 64`

EAS project information in app.json

#### `ExpoConfigAssets`

`SourceSkips.ExpoConfigAssets ï¼ 128`

Assets in app.json, including icons and splash assets

#### `ExpoConfigAll`

`SourceSkips.ExpoConfigAll ï¼ 256`

Skip the whole ExpoConfig. Prefer the other ExpoConfig source skips when possible and use this flag with caution. This will potentially ignore some native changes that should be part of most fingerprints. E.g., adding a new config plugin, changing the app icon, or changing the app name.

#### `PackageJsonAndroidAndIosScriptsIfNotContainRun`

`SourceSkips.PackageJsonAndroidAndIosScriptsIfNotContainRun ï¼ 512`

package.json scripts if android and ios items do not contain "run". Because prebuild will change the scripts in package.json, this is useful to generate a consistent fingerprint before and after prebuild.

#### `PackageJsonScriptsAll`

`SourceSkips.PackageJsonScriptsAll ï¼ 1024`

Skip the whole `scripts` section in the project's package.json.

#### `GitIgnore`

`SourceSkips.GitIgnore ï¼ 2048`

Skip .gitignore files.

#### `ExpoConfigExtraSection`

`SourceSkips.ExpoConfigExtraSection ï¼ 4096`

The [extra](https://docs.expo.dev/versions/latest/config/app/#extra) section in app.json

---

# flash-list

[](https://github.com/shopify/flash-list)

[

GitHub

](https://github.com/shopify/flash-list)

[

npm

](https://www.npmjs.com/package/@shopify/flash-list)

A React Native component that provides a fast and performant way to render lists.

[

GitHub

](https://github.com/shopify/flash-list)[

npm

](https://www.npmjs.com/package/@shopify/flash-list)

Android

iOS

tvOS

Web

Bundled version:

1.7.6

`@shopify/flash-list` is a "Fast and performant React Native list" component that is a drop-in replacement for React Native's `<FlatList>` component. It "recycles components under the hood to maximize performance."

## Installation

Terminal

`npx expo install @shopify/flash-list`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://shopify.github.io/flash-list/docs/) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://shopify.github.io/flash-list/)

---

# font

## Expo Font

A library that allows loading fonts at runtime and using them in React Native components.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-font)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-font/CHANGELOG.md)[](https://www.npmjs.com/package/expo-font)

`expo-font` allows loading fonts from the web and using them in React Native components. See more detailed usage information in the [Fonts](https://docs.expo.dev/develop/user-interface/fonts) guide.

## Installation

`npx expo install expo-font`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

There are two ways to add fonts to your app: using the `expo-font` config plugin (recommended) or loading them at runtime.

The plugin allows you to embed font files at build time which is more efficient than [`useFonts`](https://docs.expo.dev/versions/latest/sdk/font#usefontsmap) or [`loadAsync`](https://docs.expo.dev/versions/latest/sdk/font#loadasyncfontfamilyorfontmap-source). After you set up the config plugin and run [prebuild](https://docs.expo.dev/workflow/continuous-native-generation#usage), you can render custom fonts right away. The plugin can be configured in different ways, see the [Fonts](https://docs.expo.dev/develop/user-interface/fonts#with-expo-font-config-plugin) guide on how to use it.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-font",
        {
          "fonts": ["./path/to/file.ttf"],
          "android": {
            "fonts": [
              {
                "fontFamily": "Source Serif 4",
                "fontDefinitions": [
                  {
                    "path": "./path/to/SourceSerif4-ExtraBold.ttf",
                    "weight": 800
                  }
                ]
              }
            ]
          }
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Usage

If you don't want to use the [config plugin](https://docs.expo.dev/versions/latest/sdk/font#configuration-in-app-config), you can load a font at runtime with the `useFonts` hook, as shown in the snippet:

```
import { useFonts } from 'expo-font';
import * as SplashScreen from 'expo-splash-screen';
import { useEffect } from 'react';
import { Text, View, StyleSheet } from 'react-native';

SplashScreen.preventAutoHideAsync();

export default function App() {
  // Use `useFonts` only if you can't use the config plugin.
  const [loaded, error] = useFonts({
    'Inter-Black': require('./assets/fonts/Inter-Black.otf'),
  });

  useEffect(() => {
    if (loaded || error) {
      SplashScreen.hideAsync();
    }
  }, [loaded, error]);

  if (!loaded && !error) {
    return null;
  }

  return (
    <View style={styles.container}>
      <Text style={{ fontFamily: 'Inter-Black', fontSize: 30 }}>Inter Black</Text>
      <Text style={{ fontSize: 30 }}>Platform Default</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```

## API

```
import * as Font from 'expo-font';
```

## Hooks

### `useFonts(map)`

  

Load a map of fonts with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are loaded and ready to use. It also returns an error if something went wrong, to use in development.

> Note, the fonts are not "reloaded" when you dynamically change the font map.

*   loaded (`boolean`) - A boolean to detect if the font for `fontFamily` has finished loading.
*   error (`Error | null`) - An error encountered when loading the fonts.

Example

```
const [loaded, error] = useFonts({ ... });
```

## Methods

### `getLoadedFonts()`

Synchronously get all the fonts that have been loaded. This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.

Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).

### `isLoaded(fontFamily)`

  

Synchronously detect if the font for `fontFamily` has finished loading.

Returns `true` if the font has fully loaded.

### `isLoading(fontFamily)`

  

Synchronously detect if the font for `fontFamily` is still being loaded.

Returns `true` if the font is still loading.

### `loadAsync(fontFamilyOrFontMap, source)`

  

An efficient method for loading fonts from static or remote resources which can then be used with the platform's native text elements. In the browser, this generates a `@font-face` block in a shared style sheet for fonts. No CSS is needed to use this method.

> Note: We recommend using the [config plugin](#configuration-in-appjsonappconfigjs) instead whenever possible.

Returns a promise that fulfils when the font has loaded. Often you may want to wrap the method in a `try/catch/finally` to ensure the app continues if the font fails to load.

### `renderToImageAsync(glyphs, options)`

  

Creates an image with provided text.

Promise which fulfils with uri to image.

## Types

### `FontResource`

An object used to dictate the resource that is loaded into the provided font namespace when used with [`loadAsync`](#loadasyncfontfamilyorfontmap-source).

### `FontSource`

Literal Type: `union`

The different types of assets you can provide to the [`loadAsync()`](#loadasyncfontfamilyorfontmap-source) function. A font source can be a URI, a module ID, or an Expo Asset.

Acceptable values are: `string` | `number` | `[Asset](https://docs.expo.dev/versions/latest/sdk/asset#asset)` | `[FontResource](#fontresource)`

## Enums

### `FontDisplay`

Sets the [font-display](https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display) for a given typeface. The default font value on web is `FontDisplay.AUTO`. Even though setting the `fontDisplay` does nothing on native platforms, the default behavior emulates `FontDisplay.SWAP` on flagship devices like iOS, Samsung, Pixel, etc. Default functionality varies on One Plus devices. In the browser this value is set in the generated `@font-face` CSS block and not as a style property meaning you cannot dynamically change this value based on the element it's used in.

#### `AUTO`

`FontDisplay.AUTO ï¼ "auto"`

(Default) The font display strategy is defined by the user agent or platform. This generally defaults to the text being invisible until the font is loaded. Good for buttons or banners that require a specific treatment.

#### `BLOCK`

`FontDisplay.BLOCK ï¼ "block"`

The text will be invisible until the font has loaded. If the font fails to load then nothing will appear - it's best to turn this off when debugging missing text.

#### `FALLBACK`

`FontDisplay.FALLBACK ï¼ "fallback"`

Splits the behavior between `SWAP` and `BLOCK`. There will be a [100ms timeout](https://developers.google.com/web/updates/2016/02/font-display?hl=en) where the text with a custom font is invisible, after that the text will either swap to the styled text or it'll show the unstyled text and continue to load the custom font. This is good for buttons that need a custom font but should also be quickly available to screen-readers.

#### `OPTIONAL`

`FontDisplay.OPTIONAL ï¼ "optional"`

This works almost identically to `FALLBACK`, the only difference is that the browser will decide to load the font based on slow connection speed or critical resource demand.

#### `SWAP`

`FontDisplay.SWAP ï¼ "swap"`

Fallback text is rendered immediately with a default font while the desired font is loaded. This is good for making the content appear to load instantly and is usually preferred.

Error codes
---------------------------

---

# gesture-handler

A library that provides an API for handling complex gestures.

[](https://github.com/software-mansion/react-native-gesture-handler)[](https://www.npmjs.com/package/react-native-gesture-handler)

`react-native-gesture-handler` is a library for handling complex gestures. From it's README:

> This library provides an API that exposes mobile platform-specific native capabilities of touch and gesture handling and recognition. It allows for defining complex gesture handling and recognition logic that runs 100% in the native thread and is therefore deterministic.

## Installation

`npx expo install react-native-gesture-handler`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://docs.swmansion.com/react-native-gesture-handler/)

---

# gl-view

## Expo GLView

A library that provides GLView that acts as an OpenGL ES render target and provides GLContext. Useful for rendering 2D and 3D graphics.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-gl)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-gl/CHANGELOG.md)[](https://www.npmjs.com/package/expo-gl)

`expo-gl` provides a `View` that acts as an OpenGL ES render target, useful for rendering 2D and 3D graphics. On mounting, an OpenGL ES context is created. Its drawing buffer is presented as the contents of the `View` every frame.

## Installation

`npx expo install expo-gl`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { View } from 'react-native';
import { GLView } from 'expo-gl';

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView style={{ width: 300, height: 300 }} onContextCreate={onContextCreate} />
    </View>
  );
}

function onContextCreate(gl) {
  gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
  gl.clearColor(0, 1, 1, 1);

  // Create vertex shader (shape & position)
  const vert = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(
    vert,
    `
    void main(void) {
      gl_Position = vec4(0.0, 0.0, 0.0, 1.0);
      gl_PointSize = 150.0;
    }
  `
  );
  gl.compileShader(vert);

  // Create fragment shader (color)
  const frag = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(
    frag,
    `
    void main(void) {
      gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
    }
  `
  );
  gl.compileShader(frag);

  // Link together into a program
  const program = gl.createProgram();
  gl.attachShader(program, vert);
  gl.attachShader(program, frag);
  gl.linkProgram(program);
  gl.useProgram(program);

  gl.clear(gl.COLOR_BUFFER_BIT);
  gl.drawArrays(gl.POINTS, 0, 1);

  gl.flush();
  gl.endFrameEXP();
}
```

## High-level APIs

Since the WebGL API is quite low-level, it can be helpful to use higher-level graphics APIs rendering through a `GLView` underneath. The following libraries integrate popular graphics APIs:

Any WebGL-supporting library that expects a [WebGLRenderingContext](https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14) could be used. Some times such libraries assume a web JavaScript context (such as assuming `document`). Usually this is for resource loading or event handling, with the main rendering logic still only using pure WebGL. So these libraries can usually still be used with a couple workarounds. The Expo-specific integrations above include workarounds for some popular libraries.

## Integration with Reanimated worklets

To use this API inside Reanimated worklet, you need to pass the GL context ID to the worklet and recreate the GL object like in the example below.

```
import { View } from 'react-native';
import { runOnUI } from 'react-native-reanimated';
import { GLView } from 'expo-gl';

function render(gl) {
  'worklet';
  // add your WebGL code here
}

function onContextCreate(gl) {
  runOnUI((contextId: number) => {
    'worklet';
    const gl = GLView.getWorkletContext(contextId);
    render(gl);
  })(gl.contextId);
}

export default function App() {
  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <GLView
        style={{ width: 300, height: 300 }}
        enableExperimentalWorkletSupport
        onContextCreate={onContextCreate}
      />
    </View>
  );
}
```

For more in-depth example on how to use `expo-gl` with Reanimated and Gesture Handler you can check [this example](https://github.com/expo/expo/tree/main/apps/native-component-list/src/screens/GL/GLReanimatedExample.tsx).

### Limitations

Worklet runtime is imposing some limitations on the code that runs inside it, so if you have existing WebGL code, it'll likely require some modifications to run inside a worklet thread.

*   Third-party libraries like Pixi.js or Three.js won't work inside the worklet, you can only use functions that have `'worklet'` added at the start.
*   If you need to load some assets to pass to the WebGL code, it needs to be done on the main thread and passed via some reference to the worklet. If you are using `expo-assets` you can just pass asset object returned by `Asset.fromModule` or from hook `useAssets` to the `runOnUI` function.
*   To implement a rendering loop you need to use `requestAnimationFrame`, APIs like `setTimeout` are not supported.
*   It's supported only on Android and iOS, it doesn't work on Web.

Check [Reanimated documentation](https://docs.swmansion.com/react-native-reanimated/docs/guides/worklets/) to learn more.

## Remote debugging and GLView

This API does not function as intended with remote debugging enabled. The React Native debugger runs JavaScript on your computer, not the mobile device. GLView requires synchronous native calls that are not supported in Chrome.

## API

```
import { GLView } from 'expo-gl';
```

## Component

### `GLView`

Type: `React.[Component](https://react.dev/reference/react/Component)<[GLViewProps](#glviewprops)>`

A View that acts as an OpenGL ES render target. On mounting, an OpenGL ES context is created. Its drawing buffer is presented as the contents of the View every frame.

GLViewProps

### `enableExperimentalWorkletSupport`

Type:

`boolean`âDefault: `false`

Enables support for interacting with a `gl` object from code running on the Reanimated worklet thread.

### `msaaSamples`

Type:

`number`âDefault: `4`

`GLView` can enable iOS's built-in [multisampling](https://www.khronos.org/registry/OpenGL/extensions/APPLE/APPLE_framebuffer_multisample.txt). This prop specifies the number of samples to use. Setting this to `0` turns off multisampling.

### `onContextCreate`

Type:

`(gl: [ExpoWebGLRenderingContext](#expowebglrenderingcontext)) => void`

A function that will be called when the OpenGL ES context is created. The function is passed a single argument `gl` that extends a [WebGLRenderingContext](https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14) interface.

#### Inherited Props

## Static Methods

### `createContextAsync()`

Imperative API that creates headless context which is devoid of underlying view. It's useful for headless rendering or in case you want to keep just one context per application and share it between multiple components. It is slightly faster than usual context as it doesn't swap framebuffers and doesn't present them on the canvas, however it may require you to take a snapshot in order to present its results. Also, keep in mind that you need to set up a viewport and create your own framebuffer and texture that you will be drawing to, before you take a snapshot.

A promise that resolves to WebGL context object. See [WebGL API](#webgl-api) for more details.

### `destroyContextAsync(exgl)`

  

Destroys given context.

A promise that resolves to boolean value that is `true` if given context existed and has been destroyed successfully.

### `takeSnapshotAsync(exgl, options)`

  

Takes a snapshot of the framebuffer and saves it as a file to app's cache directory.

A promise that resolves to `GLSnapshot` object.

## Component Methods

### `createCameraTextureAsync(cameraRefOrHandle)`

  

### `destroyObjectAsync(glObject)`

  

### `startARSessionAsync()`

### `takeSnapshotAsync(options)`

  

Same as static [`takeSnapshotAsync()`](#takesnapshotasyncoptions), but uses WebGL context that is associated with the view on which the method is called.

## Methods

### `GLView.getWorkletContext(contextId)`

  

## Interfaces

### `ExpoWebGLRenderingContext`

Extends: `[WebGL2RenderingContext](https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext)`

ExpoWebGLRenderingContext Methods

### `__expoSetLogging(option)`

  

### `_expo_texImage2D(...props)`

  

### `_expo_texSubImage2D(...props)`

  

### `endFrameEXP()`

### `flushEXP()`

## Types

### `ComponentOrHandle`

Literal Type: `union`

Acceptable values are: `null` | `number` | `[Component](https://react.dev/reference/react/Component)<any, any>` | `ComponentClass<any>`

### `GLSnapshot`

### `SnapshotOptions`

### `SurfaceCreateEvent`

### `WebGLObject`

## Enums

### `GLLoggingOption`

#### `DISABLED`

`GLLoggingOption.DISABLED ï¼ 0`

Disables logging entirely.

#### `METHOD_CALLS`

`GLLoggingOption.METHOD_CALLS ï¼ 1`

Logs method calls, their parameters and results.

#### `GET_ERRORS`

`GLLoggingOption.GET_ERRORS ï¼ 2`

Calls `gl.getError()` after each other method call and prints an error if any is returned. This option has a significant impact on the performance as this method is blocking.

#### `RESOLVE_CONSTANTS`

`GLLoggingOption.RESOLVE_CONSTANTS ï¼ 4`

Resolves parameters of type `number` to their constant names.

#### `TRUNCATE_STRINGS`

`GLLoggingOption.TRUNCATE_STRINGS ï¼ 8`

When this option is enabled, long strings will be truncated. It's useful if your shaders are really big and logging them significantly reduces performance.

#### `ALL`

`GLLoggingOption.ALL ï¼ 15`

Enables all other options. It implies `GET_ERRORS` so be aware of the slowdown.

## WebGL API

Once the component is mounted and the OpenGL ES context has been created, the `gl` object received through the `onContextCreate` prop becomes the interface to the OpenGL ES context, providing a WebGL API. It resembles a [WebGL2RenderingContext](https://www.khronos.org/registry/webgl/specs/latest/2.0/#3.7) in the WebGL 2 spec.

Some older Android devices may not support WebGL2 features. To check whether the device supports WebGL2 it's recommended to use `gl instanceof WebGL2RenderingContext`.

An additional method `gl.endFrameEXP()` is present, which notifies the context that the current frame is ready to present. This is similar to a 'swap buffers' API call in other OpenGL platforms.

The following WebGL2RenderingContext methods are currently unimplemented:

*   `getFramebufferAttachmentParameter()`
*   `getRenderbufferParameter()`
*   `compressedTexImage2D()`
*   `compressedTexSubImage2D()`
*   `getTexParameter()`
*   `getUniform()`
*   `getVertexAttrib()`
*   `getVertexAttribOffset()`
*   `getBufferSubData()`
*   `getInternalformatParameter()`
*   `renderbufferStorageMultisample()`
*   `compressedTexImage3D()`
*   `compressedTexSubImage3D()`
*   `fenceSync()`
*   `isSync()`
*   `deleteSync()`
*   `clientWaitSync()`
*   `waitSync()`
*   `getSyncParameter()`
*   `getActiveUniformBlockParameter()`

The `pixels` argument of [`texImage2D()`](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D) must be `null`, an `ArrayBuffer` with pixel data, or an object of the form `{ localUri }` where `localUri` is the `file://` URI of an image in the device's file system. Thus, an `Asset` object is used once `.downloadAsync()` has been called on it (and completed) to fetch the resource.

For efficiency reasons, the current implementations of the methods don't perform type or bounds checking on their arguments. So, passing invalid arguments may cause a native crash. There are plans to update the API to perform argument checking in upcoming SDK versions.

Currently, the priority for error checking is low since engines generally don't rely on the OpenGL API to perform argument checking; otherwise, checks performed by the underlying OpenGL ES implementation are often sufficient.

---

# gyroscope

## Expo Gyroscope

A library that provides access to the device's gyroscope sensor.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors/CHANGELOG.md)[](https://www.npmjs.com/package/expo-sensors)

`Gyroscope` from `expo-sensors` provides access to the device's gyroscope sensor to respond to changes in rotation in three-dimensional space.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Gyroscope } from 'expo-sensors';

export default function App() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Gyroscope.setUpdateInterval(1000);
  const _fast = () => Gyroscope.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Gyroscope.addListener(gyroscopeData => {
        setData(gyroscopeData);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Gyroscope:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});
```

## API

```
import { Gyroscope } from 'expo-sensors';
```

## Classes

### `Gyroscope`

Type: Class extends `[DeviceSensor](https://docs.expo.dev/versions/latest/sdk/sensors)<[GyroscopeMeasurement](#gyroscopemeasurement)>`

A base class for subscribable sensors. The events emitted by this class are measurements specified by the parameter type `Measurement`.

Gyroscope Methods

### `addListener(listener)`

  

Subscribe for updates to the gyroscope.

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Returns whether the gyroscope is enabled on the device.

On mobile web, you must first invoke `Gyroscope.requestPermissionsAsync()` in a user interaction (i.e. touch event) before you can use this module. If the `status` is not equal to `granted` then you should inform the end user that they may have to open settings.

On web this starts a timer and waits to see if an event is fired. This should predict if the iOS device has the device orientation API disabled in Settings > Safari > Motion & Orientation Access. Some devices will also not fire if the site isn't hosted with HTTPS as `DeviceMotion` is now considered a secure API. There is no formal API for detecting the status of `DeviceMotion` so this API can sometimes be unreliable on web.

A promise that resolves to a `boolean` denoting the availability of the gyroscope.

### `removeAllListeners()`

Removes all registered listeners.

### `removeSubscription(subscription)`

  

Removes the given subscription.

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

### `setUpdateInterval(intervalMs)`

  

Set the sensor update interval.

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `GyroscopeMeasurement`

Each of these keys represents the rotation along that particular axis measured in radians per second (rad/s).

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionResponse`

An object obtained by permissions get and request functions.

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

---

# haptics

## Expo Haptics

A library that provides access to the system's vibration effects on Android, the haptics engine on iOS, and the Web Vibration API on web.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-haptics)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-haptics/CHANGELOG.md)[](https://www.npmjs.com/package/expo-haptics)

`expo-haptics` provides haptic (touch) feedback for:

*   Android devices using Vibrator system service.
*   iOS 10+ devices using the Taptic Engine.
*   Web platforms using the Web Vibration API.

On iOS, the Taptic engine will do nothing if any of the following conditions are true on a user's device:

*   Low Power Mode is enabled. This can be detected with [`expo-battery`](https://docs.expo.dev/versions/latest/sdk/battery).
*   User disabled the Taptic Engine in settings.
*   iOS Camera is active (to prevent destabilization).
*   iOS dictation is active (to not disturb the microphone input).

On web, the library uses the Web Vibration API. Note the following:

*   The API must be supported by the browser (check [browser compatibility](https://caniuse.com/vibration))
*   The device must have vibration hardware
*   The user must grant permission to use vibration (usually automatic)
*   Some browsers may ignore vibration in certain contexts (for example, background tabs)

## Installation

`npx expo install expo-haptics`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration

On Android, this library requires permission to control vibration on the device. The `VIBRATE` permission is added automatically.

## Usage

```
import { StyleSheet, View, Text, Button } from 'react-native';
import * as Haptics from 'expo-haptics';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Haptics.selectionAsync</Text>
      <View style={styles.buttonContainer}>
        <Button title="Selection" onPress={() => Haptics.selectionAsync()} />
      </View>
      <Text style={styles.text}>Haptics.notificationAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Success"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Success
              )
          }
        />
        <Button
          title="Error"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Error
              )
          }
        />
        <Button
          title="Warning"
          onPress={
            () =>
              Haptics.notificationAsync(
                Haptics.NotificationFeedbackType.Warning
              )
          }
        />
      </View>
      <Text style={styles.text}>Haptics.impactAsync</Text>
      <View style={styles.buttonContainer}>
        <Button
          title="Light"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light)
          }
        />
        <Button
          title="Medium"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium)
          }
        />
        <Button
          title="Heavy"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Heavy)
          }
        />
        <Button
          title="Rigid"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Rigid)
          }
        />
        <Button
          title="Soft"
          onPress={
            () => Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Soft)
          }
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 16,
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 10,
    marginBottom: 30,
    justifyContent: 'space-between',
  },
});
```

## API

```
import * as Haptics from 'expo-haptics';
```

## Methods

### `Haptics.impactAsync(style)`

  

A `Promise` which fulfils once native size haptics functionality is triggered.

> See: Android's `Vibrator` API is not recommended for implementing haptics feedback. Instead, you should use [`performAndroidHapticsAsync`](#hapticsperformandroidhapticsasynctype), which is similar to iOS haptic feedback and does not require `VIBRATE` permission.

### `Haptics.notificationAsync(type)`

  

The kind of notification response used in the feedback.

A `Promise` which fulfils once native size haptics functionality is triggered.

### `Haptics.performAndroidHapticsAsync(type)`

  

Use the device haptics engine to provide physical feedback to the user.

### `Haptics.selectionAsync()`

Used to let a user know when a selection change has been registered.

A `Promise` which fulfils once native size haptics functionality is triggered.

## Enums

### `AndroidHaptics`

#### `Clock_Tick`

`AndroidHaptics.Clock_Tick ï¼ "clock-tick"`

The user has pressed either an hour or minute tick of a Clock.

#### `Confirm`

`AndroidHaptics.Confirm ï¼ "confirm"`

A haptic effect to signal the confirmation or successful completion of a user interaction.

#### `Context_Click`

`AndroidHaptics.Context_Click ï¼ "context-click"`

The user has performed a context click on an object.

#### `Drag_Start`

`AndroidHaptics.Drag_Start ï¼ "drag-start"`

The user has started a drag-and-drop gesture. The drag target has just been "picked up".

#### `Gesture_End`

`AndroidHaptics.Gesture_End ï¼ "gesture-end"`

The user has finished a gesture (for example, on the soft keyboard).

#### `Gesture_Start`

`AndroidHaptics.Gesture_Start ï¼ "gesture-start"`

The user has started a gesture (for example, on the soft keyboard).

#### `Keyboard_Press`

`AndroidHaptics.Keyboard_Press ï¼ "keyboard-press"`

The user has pressed a virtual or software keyboard key.

#### `Keyboard_Release`

`AndroidHaptics.Keyboard_Release ï¼ "keyboard-release"`

The user has released a virtual keyboard key.

#### `Keyboard_Tap`

`AndroidHaptics.Keyboard_Tap ï¼ "keyboard-tap"`

The user has pressed a soft keyboard key.

#### `Long_Press`

`AndroidHaptics.Long_Press ï¼ "long-press"`

The user has performed a long press on an object that results in an action being performed.

#### `No_Haptics`

`AndroidHaptics.No_Haptics ï¼ "no-haptics"`

No haptic feedback should be performed.

#### `Reject`

`AndroidHaptics.Reject ï¼ "reject"`

A haptic effect to signal the rejection or failure of a user interaction.

#### `Segment_Frequent_Tick`

`AndroidHaptics.Segment_Frequent_Tick ï¼ "segment-frequent-tick"`

The user is switching between a series of many potential choices. For example, minutes on a clock face or individual percentages. This constant is expected to be very soft, so as not to be uncomfortable when performed a lot in quick succession. If the device can't make a suitably soft vibration, then it may not make any vibration.

#### `Segment_Tick`

`AndroidHaptics.Segment_Tick ï¼ "segment-tick"`

The user is switching between a series of potential choices. For example, items in a list or discrete points on a slider.

#### `Text_Handle_Move`

`AndroidHaptics.Text_Handle_Move ï¼ "text-handle-move"`

The user has performed a selection/insertion handle move on text field.

#### `Toggle_Off`

`AndroidHaptics.Toggle_Off ï¼ "toggle-off"`

The user has toggled a switch or button into the off position.

#### `Toggle_On`

`AndroidHaptics.Toggle_On ï¼ "toggle-on"`

The user has toggled a switch or button into the on position.

#### `Virtual_Key`

`AndroidHaptics.Virtual_Key ï¼ "virtual-key"`

The user has pressed on a virtual on-screen key.

#### `Virtual_Key_Release`

`AndroidHaptics.Virtual_Key_Release ï¼ "virtual-key-release"`

The user has released a virtual key.

### `ImpactFeedbackStyle`

The mass of the objects in the collision simulated by a `UIImpactFeedbackGenerator` object [`UINotificationFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackgenerator/feedbackstyle).

#### `Heavy`

`ImpactFeedbackStyle.Heavy ï¼ "heavy"`

A collision between large, heavy user interface elements.

#### `Light`

`ImpactFeedbackStyle.Light ï¼ "light"`

A collision between small, light user interface elements.

#### `Medium`

`ImpactFeedbackStyle.Medium ï¼ "medium"`

A collision between moderately sized user interface elements.

#### `Rigid`

`ImpactFeedbackStyle.Rigid ï¼ "rigid"`

A collision between user interface elements that are rigid, exhibiting a small amount of compression or elasticity.

#### `Soft`

`ImpactFeedbackStyle.Soft ï¼ "soft"`

A collision between user interface elements that are soft, exhibiting a large amount of compression or elasticity.

### `NotificationFeedbackType`

The type of notification feedback generated by a `UINotificationFeedbackGenerator` object. [`UINotificationFeedbackType`](https://developer.apple.com/documentation/uikit/uinotificationfeedbackgenerator/feedbacktype).

#### `Error`

`NotificationFeedbackType.Error ï¼ "error"`

A notification feedback type indicating that a task has failed.

#### `Success`

`NotificationFeedbackType.Success ï¼ "success"`

A notification feedback type indicating that a task has completed successfully.

#### `Warning`

`NotificationFeedbackType.Warning ï¼ "warning"`

A notification feedback type indicating that a task has produced a warning.

---

# image

## Expo Image

A cross-platform and performant React component that loads and renders images.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-image)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-image/CHANGELOG.md)[](https://www.npmjs.com/package/expo-image)

`expo-image` is a cross-platform React component that loads and renders images.

Main features:

*   Designed for speed
*   Support for many image formats (including animated ones)
*   Disk and memory caching
*   Supports [BlurHash](https://blurha.sh/) and [ThumbHash](https://evanw.github.io/thumbhash/) - compact representations of a placeholder for an image
*   Transitioning between images when the source changes (no more flickering!)
*   Implements the CSS [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) and [`object-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) properties (see [`contentFit`](https://docs.expo.dev/versions/latest/sdk/image#contentfit) and [`contentPosition`](https://docs.expo.dev/versions/latest/sdk/image#contentposition) props)
*   Uses performant [`SDWebImage`](https://github.com/SDWebImage/SDWebImage) and [`Glide`](https://github.com/bumptech/glide) under the hood

#### Supported image formats

## Installation

`npx expo install expo-image`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { Image } from 'expo-image';
import { StyleSheet, View } from 'react-native';

const blurhash =
  '|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM{M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya}j[ayfQa{oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[';

export default function App() {
  return (
    <View style={styles.container}>
      <Image
        style={styles.image}
        source="https://picsum.photos/seed/696/3000/2000"
        placeholder={{ blurhash }}
        contentFit="cover"
        transition={1000}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    flex: 1,
    width: '100%',
    backgroundColor: '#0553',
  },
});
```

## API

```
import { Image } from 'expo-image';
```

## Components

### `Image`

Type: `React.[PureComponent](https://react.dev/reference/react/PureComponent)<[ImageProps](#imageprops)>`

Some props are from React Native Image that Expo Image supports (more or less) for easier migration, but all of them are deprecated and might be removed in the future.

ImageProps

### `accessibilityLabel`

OptionalâType:

`string`âDefault: `undefined`

The text that's read by the screen reader when the user interacts with the image. Sets the the `alt` tag on web which is used for web crawlers and link traversal.

### `accessible`

OptionalâType:

`boolean`âDefault: `false`

When true, indicates that the view is an accessibility element. When a view is an accessibility element, it groups its children into a single selectable component.

On Android, the `accessible` property will be translated into the native `isScreenReaderFocusable`, so it's only affecting the screen readers behaviour.

### `allowDownscaling`

OptionalâType:

`boolean`âDefault: `true`

Whether the image should be downscaled to match the size of the view container. Turning off this functionality could negatively impact the application's performance, particularly when working with large assets. However, it would result in smoother image resizing, and end-users would always have access to the highest possible asset quality.

Downscaling is never used when the `contentFit` prop is set to `none` or `fill`.

### `alt`

OptionalâType:

`string`âDefault: `undefined`

The text that's read by the screen reader when the user interacts with the image. Sets the the `alt` tag on web which is used for web crawlers and link traversal. Is an alias for `accessibilityLabel`.

### `autoplay`

OptionalâType:

`boolean`âDefault: `true`

Determines if an image should automatically begin playing if it is an animated image.

### `blurRadius`

OptionalâType:

`number`âDefault: `0`

The radius of the blur in points, `0` means no blur effect. This effect is not applied to placeholders.

### `cachePolicy`

OptionalâLiteral type: `union`âDefault: `'disk'`

Determines whether to cache the image and where: on the disk, in the memory or both.

*   `'none'` - Image is not cached at all.
```

```
*   `'disk'` - Image is queried from the disk cache if exists, otherwise it's downloaded and then stored on the disk.
```

```
*   `'memory'` - Image is cached in memory. Might be useful when you render a high-resolution picture many times. Memory cache may be purged very quickly to prevent high memory usage and the risk of out of memory exceptions.
```

```
*   `'memory-disk'` - Image is cached in memory, but with a fallback to the disk cache.
```

```

Acceptable values are: `null` | `'none'` | `'disk'` | `'memory'` | `'memory-disk'`

### `contentFit`

OptionalâType:

`[ImageContentFit](#imagecontentfit)`âDefault: `'cover'`

Determines how the image should be resized to fit its container. This property tells the image to fill the container in a variety of ways; such as "preserve that aspect ratio" or "stretch up and take up as much space as possible". It mirrors the CSS [`object-fit`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit) property.

*   `'cover'` - The image is sized to maintain its aspect ratio while filling the container box. If the image's aspect ratio does not match the aspect ratio of its box, then the object will be clipped to fit.
```

```
*   `'contain'` - The image is scaled down or up to maintain its aspect ratio while fitting within the container box.
```

```
*   `'fill'` - The image is sized to entirely fill the container box. If necessary, the image will be stretched or squished to fit.
```

```
*   `'none'` - The image is not resized and is centered by default. When specified, the exact position can be controlled with [`contentPosition`](#contentposition) prop.
```

```
*   `'scale-down'` - The image is sized as if `none` or `contain` were specified, whichever would result in a smaller concrete image size.
```

```

### `contentPosition`

OptionalâType:

`[ImageContentPosition](#imagecontentposition)`âDefault: `'center'`

It is used together with [`contentFit`](#contentfit) to specify how the image should be positioned with x/y coordinates inside its own container. An equivalent of the CSS [`object-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/object-position) property.

### `decodeFormat`

OptionalâType:

`[ImageDecodeFormat](#imagedecodeformat)`âDefault: `'argb'`

### `defaultSource`

OptionalâLiteral type: `union`

Acceptable values are: `null` | `[ImageSource](#imagesource)`

### `enableLiveTextInteraction`

OptionalâType:

`boolean`âDefault: `false`

Enables Live Text interaction with the image. Check official [Apple documentation](https://developer.apple.com/documentation/visionkit/enabling_live_text_interactions_with_images) for more details.

### `fadeDuration`

### `focusable`

OptionalâType:

`boolean`âDefault: `false`

Whether this View should be focusable with a non-touch input device and receive focus with a hardware keyboard.

### `loadingIndicatorSource`

OptionalâLiteral type: `union`

Acceptable values are: `null` | `[ImageSource](#imagesource)`

### `onDisplay`

OptionalâType:

`() => void`

Called when the image view successfully rendered the source image.

### `onError`

OptionalâType:

`(event: [ImageErrorEventData](#imageerroreventdata)) => void`

Called on an image fetching error.

### `onLoad`

OptionalâType:

`(event: [ImageLoadEventData](#imageloadeventdata)) => void`

Called when the image load completes successfully.

### `onLoadEnd`

OptionalâType:

`() => void`

Called when the image load either succeeds or fails.

### `onLoadStart`

OptionalâType:

`() => void`

Called when the image starts to load.

### `onProgress`

OptionalâType:

`(event: [ImageProgressEventData](#imageprogresseventdata)) => void`

Called when the image is loading. Can be called multiple times before the image has finished loading. The event object provides details on how many bytes were loaded so far and what's the expected total size.

### `placeholder`

OptionalâLiteral type: `union`

An image to display while loading the proper image and no image has been displayed yet or the source is unset.

> Note: The default value for placeholder's content fit is 'scale-down', which differs from the source image's default value. Using a lower-resolution placeholder may cause flickering due to scaling differences between it and the final image. To prevent this, you can set the [`placeholderContentFit`](#placeholdercontentfit) to match the [`contentFit`](#contentfit) value.

Acceptable values are: `null` | `string` | `number` | `[ImageSource](#imagesource)` | `[SharedRef](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedref)<'image'>` | `[ImageSource[]](#imagesource)` | `string[]`

### `placeholderContentFit`

OptionalâType:

`[ImageContentFit](#imagecontentfit)`âDefault: `'scale-down'`

Determines how the placeholder should be resized to fit its container. Available resize modes are the same as for the [`contentFit`](#contentfit) prop.

### `priority`

OptionalâLiteral type: `union`âDefault: `'normal'`

Priorities for completing loads. If more than one load is queued at a time, the load with the higher priority will be started first. Priorities are considered best effort, there are no guarantees about the order in which loads will start or finish.

Acceptable values are: `null` | `'low'` | `'normal'` | `'high'`

### `recyclingKey`

OptionalâLiteral type: `union`âDefault: `null`

Changing this prop resets the image view content to blank or a placeholder before loading and rendering the final image. This is especially useful for any kinds of recycling views like [FlashList](https://github.com/shopify/flash-list) to prevent showing the previous source before the new one fully loads.

Acceptable values are: `null` | `string`

### `resizeMode`

OptionalâLiteral type: `string`

Acceptable values are: `'cover'` | `'contain'` | `'center'` | `'stretch'` | `'repeat'`

### `responsivePolicy`

OptionalâLiteral type: `string`âDefault: `'static'`

Controls the selection of the image source based on the container or viewport size on the web.

If set to `'static'`, the browser selects the correct source based on user's viewport width. Works with static rendering. Make sure to set the `'webMaxViewportWidth'` property on each source for best results. For example, if an image occupies 1/3 of the screen width, set the `'webMaxViewportWidth'` to 3x the image width. The source with the largest `'webMaxViewportWidth'` is used even for larger viewports.

If set to `'initial'`, the component will select the correct source during mount based on container size. Does not work with static rendering.

If set to `'live'`, the component will select the correct source on every resize based on container size. Does not work with static rendering.

Acceptable values are: `'live'` | `'initial'` | `'static'`

### `source`

OptionalâLiteral type: `union`

The image source, either a remote URL, a local file resource or a number that is the result of the `require()` function. When provided as an array of sources, the source that fits best into the container size and is closest to the screen scale will be chosen. In this case it is important to provide `width`, `height` and `scale` properties.

Acceptable values are: `null` | `string` | `number` | `[ImageSource](#imagesource)` | `[SharedRef](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedref)<'image'>` | `[ImageSource[]](#imagesource)` | `string[]`

### `tintColor`

OptionalâLiteral type: `union`âDefault: `null`

A color used to tint template images (a bitmap image where only the opacity matters). The color is applied to every non-transparent pixel, causing the imageâs shape to adopt that color. This effect is not applied to placeholders.

Acceptable values are: `null` | `string`

### `transition`

OptionalâLiteral type: `union`

Describes how the image view should transition the contents when switching the image source.  
If provided as a number, it is the duration in milliseconds of the `'cross-dissolve'` effect.

Acceptable values are: `null` | `number` | `[ImageTransition](#imagetransition)`

### `useAppleWebpCodec`

OptionalâType:

`boolean`âDefault: `true`

Whether to use the Apple's default WebP codec.

Set this prop to `false` to use the official standard-compliant [libwebp](https://github.com/webmproject/libwebp) codec for WebP images. The default implementation from Apple is faster and uses less memory but may render animated images with incorrect blending or play them at the wrong framerate.

### `ImageBackground`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[ImageBackgroundProps](#imagebackgroundprops)>`

ImageBackgroundProps

### `imageStyle`

OptionalâType:

`StyleProp<[ImageStyle](#imagestyle)>`

Style object for the image

### `style`

OptionalâType:

`StyleProp<[ViewStyle](https://reactnative.dev/docs/view-style-props)>`

The style of the image container

#### Inherited Props

*   `[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[ImageProps](#imageprops), 'style'>`

## Static Methods

### `clearDiskCache()`

Asynchronously clears all images from the disk cache.

A promise resolving to `true` when the operation succeeds. It may resolve to `false` on Android when the activity is no longer available. Resolves to `false` on Web.

### `clearMemoryCache()`

Asynchronously clears all images stored in memory.

A promise resolving to `true` when the operation succeeds. It may resolve to `false` on Android when the activity is no longer available. Resolves to `false` on Web.

### `generateBlurhashAsync(url, numberOfComponents)`

  

Asynchronously generates a [Blurhash](https://blurha.sh/) from an image.

A promise resolving to the blurhash string.

### `getCachePathAsync(cacheKey)`

  

Asynchronously checks if an image exists in the disk cache and resolves to the path of the cached image if it does.

A promise resolving to the path of the cached image. It will resolve to `null` if the image does not exist in the cache.

### `loadAsync(source, options)`

  

Loads an image from the given source to memory and resolves to an object that references the native image instance.

### `prefetch(urls, cachePolicy)`

  

Preloads images at the given URLs that can be later used in the image view. Preloaded images are cached to the memory and disk by default, so make sure to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).

A promise resolving to `true` as soon as all images have been successfully prefetched. If an image fails to be prefetched, the promise will immediately resolve to `false` regardless of whether other images have finished prefetching.

### `prefetch(urls, options)`

  

Preloads images at the given URLs that can be later used in the image view. Preloaded images are cached to the memory and disk by default, so make sure to use `disk` (default) or `memory-disk` [cache policy](#cachepolicy).

A promise resolving to `true` as soon as all images have been successfully prefetched. If an image fails to be prefetched, the promise will immediately resolve to `false` regardless of whether other images have finished prefetching.

## Component Methods

### `getAnimatableRef()`

### `lockResourceAsync()`

Prevents the resource from being reloaded by locking it.

### `reloadAsync()`

Reloads the resource, ignoring lock.

### `startAnimating()`

Asynchronously starts playback of the view's image if it is animated.

### `stopAnimating()`

Asynchronously stops the playback of the view's image if it is animated.

### `unlockResourceAsync()`

Releases the lock on the resource, allowing it to be reloaded.

## Hooks

### `useImage(source, options, dependencies)`

  

A hook that loads an image from the given source and returns a reference to the native image instance, or `null` until the first image is successfully loaded.

It loads a new image every time the `uri` of the provided source changes. To trigger reloads in some other scenarios, you can provide an additional dependency list.

Example

```
import { useImage, Image } from 'expo-image';
import { Text } from 'react-native';

export default function MyImage() {
  const image = useImage('https://picsum.photos/1000/800', {
    maxWidth: 800,
    onError(error, retry) {
      console.error('Loading failed:', error.message);
    }
  });

  if (!image) {
    return <Text>Image is loading...</Text>;
  }

  return <Image source={image} style={{ width: image.width / 2, height: image.height / 2 }} />;
}
```

## Classes

### `ImageRef`

Type: Class extends `[SharedRef](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedref)<'image'>`

An object that is a reference to a native image instance â [Drawable](https://developer.android.com/reference/android/graphics/drawable/Drawable) on Android and [UIImage](https://developer.apple.com/documentation/uikit/uiimage) on iOS. Instances of this class can be passed as a source to the [Image](#image) component in which case the image is rendered immediately since its native representation is already available in the memory.

ImageRef Properties

### `height`

Logical height of the image. Multiply it by the value in the `scale` property to get the height in pixels.

### `isAnimated`

OptionalâRead OnlyâType:

`boolean`

Whether the referenced image is an animated image.

### `mediaType`

Read OnlyâLiteral type: `union`

Media type (also known as MIME type) of the image, based on its format. Returns `null` when the format is unknown or not supported.

Acceptable values are: `null` | `string`

### `nativeRefType`

The type of the native reference.

### `scale`

On iOS, if you load an image from a file whose name includes the `@2x` modifier, the scale is set to 2.0. All other images are assumed to have a scale factor of 1.0. On Android, it calculates the scale based on the bitmap density divided by screen density.

On all platforms, if you multiply the logical size of the image by this value, you get the dimensions of the image in pixels.

### `width`

Logical width of the image. Multiply it by the value in the `scale` property to get the width in pixels.

## Types

### `ImageContentPosition`

Specifies the position of the image inside its container. One value controls the x-axis and the second value controls the y-axis.

Additionally, it supports stringified shorthand form that specifies the edges to which to align the image content:  
`'center'`, `'top'`, `'right'`, `'bottom'`, `'left'`, `'top center'`, `'top right'`, `'top left'`, `'right center'`, `'right top'`, `'right bottom'`, `'bottom center'`, `'bottom right'`, `'bottom left'`, `'left center'`, `'left top'`, `'left bottom'`.  
If only one keyword is provided, then the other dimension is set to `'center'` (`'50%'`), so the image is placed in the middle of the specified edge.  
As an example, `'top right'` is the same as `{ top: 0, right: 0 }` and `'bottom'` is the same as `{ bottom: 0, left: '50%' }`.

Type: `[ImageContentPositionString](#imagecontentpositionstring)` or `object` shaped as below:

Or `object` shaped as below:

Or `object` shaped as below:

Or `object` shaped as below:

### `ImageContentPositionValue`

Literal Type: `union`

A value that represents the relative position of a single axis.

If `number`, it is a distance in points (logical pixels) from the respective edge.  
If `string`, it must be a percentage value where `'100%'` is the difference in size between the container and the image along the respective axis, or `'center'` which is an alias for `'50%'` that is the default value. You can read more regarding percentages on the MDN docs for [`background-position`](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position#regarding_percentages) that describes this concept well.

Acceptable values are: `number` | `string` | `{number}%` | `{number}` | `'center'`

### `ImageErrorEventData`

### `ImageLoadEventData`

### `ImageLoadOptions`

An object with options for the [`useImage`](#useimage) hook.

### `ImagePrefetchOptions`

### `ImageProgressEventData`

### `ImageSource`

### `ImageTransition`

An object that describes the smooth transition when switching the image source.

## Generating a blurhash on a server

Images can significantly improve the visual experience, however, they can also slow down app/page loading times due to their large file sizes. To overcome this, you can create placeholder images using blurhash algorithm that provides an immersive experience while deferring the loading of the actual picture until later.

This guide demonstrates how to create a blurhash of an uploaded image on the backend using JavaScript and Express.js. The same techniques and principles apply to other languages and server technologies.

Start by installing a few dependencies: [`multer`](https://github.com/expressjs/multer) for handling multipart requests, [`sharp`](https://github.com/lovell/sharp) for converting files to a data buffer, and the official [`blurhash` JavaScript package](https://github.com/woltapp/blurhash/tree/master/TypeScript).

`npm install multer sharp blurhash`

Next, import all required functions from installed packages and initialize `multer`:

```
// Multer is a middleware for handling `multipart/form-data`.
const multer = require('multer');
// Sharp allows you to receive a data buffer from the uploaded image.
const sharp = require('sharp');
// Import the encode function from the blurhash package.
const { encode } = require('blurhash');

// Initialize `multer`.
const upload = multer();
```

Assuming the `app` is a variable that holds a reference to the Express server, an endpoint can be created that accepts an image and returns a JSON response containing the generated blurhash.

```
app.post('/blurhash', upload.single('image'), async (req, res) => {
  const { file } = req;
  // If the file is not available we're returning with error.
  if (file === null) {
    res.status(400).json({ message: 'Image is missing' });
    return;
  }

  // Users can specify number of components in each axes.
  const componentX = req.body.componentX ?? 4;
  const componentY = req.body.componentY ?? 3;

  // We're converting provided image to a byte buffer.
  // Sharp currently supports multiple common formats like JPEG, PNG, WebP, GIF, and AVIF.
  const { data, info } = await sharp(file.buffer).ensureAlpha().raw().toBuffer({
    resolveWithObject: true,
  });

  const blurhash = encode(
    new Uint8ClampedArray(data),
    info.width,
    info.height,
    componentX,
    componentY
  );
  res.json({ blurhash });
});
```

Additionally, the request can include two parameters: `componentX` and `componentY`, are passed through the algorithm. These values can be calculated or hard-coded on the server or specified by the user. However, they must be within the range of 1 to 9 and have an aspect ratio similar to the uploaded image. A value of 9 will give the best results but may take longer to generate the hash.

The process of generating a blurhash can be accomplished in various languages and server technologies, similar to the one using JavaScript. The key step is to locate an encoder for your chosen language, which can often be found in the [`woltapp/blurhash`](https://github.com/woltapp/blurhash#implementations) repository. Once you have the encoder, you will need to obtain a representation of the image. Some libraries use a default image class (for example, the Swift implementation uses `UIImage`). In other cases, you will have to provide raw byte data. Make sure to check the encoder's documentation to confirm the expected data format.

> When working with raw byte data, ensure that the alpha layer is present (each pixel is represented by red, green, blue, and alpha values). Failing to do so will lead to errors such as "width and height must match the pixels array".

---

# imagemanipulator

```
import { useState } from 'react';
import { Button, Image, StyleSheet, View } from 'react-native';
import { Asset } from 'expo-asset';
import { FlipType, SaveFormat, useImageManipulator } from 'expo-image-manipulator';

const IMAGE = Asset.fromModule(require('./assets/snack-icon.png'));

export default function App() {
  const [image, setImage] = useState(IMAGE);
  const context = useImageManipulator(IMAGE.uri);

  const rotate90andFlip = async () => {
    context.rotate(90).flip(FlipType.Vertical);
    const image = await context.renderAsync();
    const result = await image.saveAsync({
      format: SaveFormat.PNG,
    });

    setImage(result);
  };

  return (
    <View style={styles.container}>
      <View style={styles.imageContainer}>
        <Image source={{ uri: image.localUri || image.uri }} style={styles.image} />
      </View>
      <Button title="Rotate and Flip" onPress={rotate90andFlip} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
  },
  imageContainer: {
    marginVertical: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 300,
    height: 300,
    resizeMode: 'contain',
  },
});
```


---

# imagepicker

## Expo ImagePicker

A library that provides access to the system's UI for selecting images and videos from the phone's library or taking a photo with the camera.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-image-picker)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-image-picker/CHANGELOG.md)[](https://www.npmjs.com/package/expo-image-picker)

`expo-image-picker` provides access to the system's UI for selecting images and videos from the phone's library or taking a photo with the camera.

## Installation

`npx expo install expo-image-picker`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

#### Known issuesâ

On iOS, when an image (usually of a [higher resolution](http://www.openradar.me/49866214)) is picked from the camera roll, the result of the cropped image gives the wrong value for the cropped rectangle in some cases. Unfortunately, this issue is with the underlying `UIImagePickerController` due to a bug in the closed-source tools built into iOS.

## Configuration in app config

You can configure `expo-image-picker` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-image-picker",
        {
          "photosPermission": "The app accesses your photos to let you share them with your friends."
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Usage

```
import { useState } from 'react';
import { Button, Image, View, StyleSheet } from 'react-native';
import * as ImagePicker from 'expo-image-picker';

export default function ImagePickerExample() {
  const [image, setImage] = useState<string | null>(null);

  const pickImage = async () => {
    // No permissions request is necessary for launching the image library
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['images', 'videos'],
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.canceled) {
      setImage(result.assets[0].uri);
    }
  };

  return (
    <View style={styles.container}>
      <Button title="Pick an image from camera roll" onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={styles.image} />}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  image: {
    width: 200,
    height: 200,
  },
});
```

When you run this example and pick an image, you will see the image that you picked show up in your app, and a similar log will be shown in the console:

```
{
  "assets": [
    {
      "assetId": "C166F9F5-B5FE-4501-9531",
      "base64": null,
      "duration": null,
      "exif": null,
      "fileName": "IMG.HEIC",
      "fileSize": 6018901,
      "height": 3025,
      "type": "image",
      "uri": "file:///data/user/0/host.exp.exponent/cache/cropped1814158652.jpg"
      "width": 3024
    }
  ],
  "canceled": false
}
```

### With AWS S3

[

AWS storage example

An example of how to use AWS storage can be found in with-aws-storage-upload.

](https://github.com/expo/examples/tree/master/with-aws-storage-upload)

See [Amplify documentation](https://docs.amplify.aws/) guide to set up your project correctly.

### With Firebase

[

Firebase storage example

An example of how to use Firebase storage can be found in with-firebase-storage-upload.

](https://github.com/expo/examples/tree/master/with-firebase-storage-upload)

See [Using Firebase](https://docs.expo.dev/guides/using-firebase) guide to set up your project correctly.

## API

```
import * as ImagePicker from 'expo-image-picker';
```

## Hooks

### `useCameraPermissions(options)`

  

Check or request permissions to access the camera. This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = ImagePicker.useCameraPermissions();
```

### `useMediaLibraryPermissions(options)`

  

Check or request permissions to access the media library. This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.

`[null | [MediaLibraryPermissionResponse](#medialibrarypermissionresponse), RequestPermissionMethod<[MediaLibraryPermissionResponse](#medialibrarypermissionresponse)>, GetPermissionMethod<[MediaLibraryPermissionResponse](#medialibrarypermissionresponse)>]`

Example

```
const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();
```

## Methods

### `ImagePicker.getCameraPermissionsAsync()`

Checks user's permissions for accessing camera.

A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).

### `ImagePicker.getMediaLibraryPermissionsAsync(writeOnly)`

  

Checks user's permissions for accessing photos.

A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).

### `ImagePicker.getPendingResultAsync()`

Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this happens, we lose the data selected using the `ImagePicker`. However, you can retrieve the lost data by calling `getPendingResultAsync`. You can test this functionality by turning on `Don't keep activities` in the developer options.

*   On Android: a promise that resolves to an object of exactly same type as in `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker` finished successfully. Otherwise, an object of type [`ImagePickerErrorResult`](#imagepickerimagepickererrorresult).
*   On other platforms: `null`

### `ImagePicker.launchCameraAsync(options)`

  

Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`. On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be called immediately in a user interaction like a button press, otherwise the browser will block the request without a warning.

> Note: Make sure that you handle `MainActivity` destruction on Android. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync). Notes for Web: The system UI can only be shown after user activation (e.g. a `Button` press). Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will not work as intended. The `cancelled` event will not be returned in the browser due to platform restrictions and inconsistencies across browsers.

A promise that resolves to an object with `canceled` and `assets` fields. When the user canceled the action the `assets` is always `null`, otherwise it's an array of the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).

### `ImagePicker.launchImageLibraryAsync(options)`

  

Display the system UI for choosing an image or a video from the phone's library. Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be called immediately in a user interaction like a button press, otherwise the browser will block the request without a warning.

Animated GIFs support: On Android, if the selected image is an animated GIF, the result image will be an animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`. Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.

> Notes for Web: The system UI can only be shown after user activation (e.g. a `Button` press). Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will not work as intended. The `cancelled` event will not be returned in the browser due to platform restrictions and inconsistencies across browsers.

A promise that resolves to an object with `canceled` and `assets` fields. When the user canceled the action the `assets` is always `null`, otherwise it's an array of the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).

### `ImagePicker.requestCameraPermissionsAsync()`

Asks the user to grant permissions for accessing camera. This does nothing on web because the browser camera is not used.

A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).

### `ImagePicker.requestMediaLibraryPermissionsAsync(writeOnly)`

  

Asks the user to grant permissions for accessing user's photo. This method does nothing on web.

A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).

## Types

### `CameraPermissionResponse`

Type: `[PermissionResponse](#permissionresponse)`

Alias for `PermissionResponse` type exported by `expo-modules-core`.

### `DefaultTab`

Literal Type: `string`

The default tab with which the image picker will be opened.

*   `'photos'` - the photos/videos tab will be opened.
*   `'albums'` - the albums tab will be opened.

Acceptable values are: `'photos'` | `'albums'`

### `ImagePickerAsset`

Represents an asset (image or video) returned by the image picker or camera.

### `ImagePickerCanceledResult`

Type representing canceled pick result.

### `ImagePickerErrorResult`

### `ImagePickerOptions`

### `ImagePickerResult`

Literal Type: `union`

Type representing successful and canceled pick result.

Acceptable values are: `[ImagePickerSuccessResult](#imagepickersuccessresult)` | `[ImagePickerCanceledResult](#imagepickercanceledresult)`

### `ImagePickerSuccessResult`

Type representing successful pick result.

### `MediaLibraryPermissionResponse`

Extends `PermissionResponse` type exported by `expo-modules-core`, containing additional iOS-specific field.

Type: `[PermissionResponse](#permissionresponse)` extended by:

### `MediaType`

Literal Type: `string`

Media types that can be picked by the image picker.

*   `'images'` - for images.
*   `'videos'` - for videos.
*   `'livePhotos'` - for live photos (iOS only).

> When the `livePhotos` type is added to the media types array and a live photo is selected, the resulting `ImagePickerAsset` will contain an unaltered image and the `pairedVideoAsset` field will contain a video asset paired with the image. This option will be ignored when the `allowsEditing` option is enabled. Due to platform limitations live photos are returned at original quality, regardless of the `quality` option.

> When on Android or Web `livePhotos` type passed as a media type will be ignored.

Acceptable values are: `'images'` | `'videos'` | `'livePhotos'`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

An object obtained by permissions get and request functions.

## Enums

### `CameraType`

#### `back`

`CameraType.back ï¼ "back"`

Back/rear camera.

#### `front`

`CameraType.front ï¼ "front"`

Front camera

> Deprecated To set media types available in the image picker use an array of [`MediaType`](#mediatype) instead.

### `MediaTypeOptions`

#### `All`

`MediaTypeOptions.All ï¼ "All"`

Images and videos.

#### `Images`

`MediaTypeOptions.Images ï¼ "Images"`

Only images.

#### `Videos`

`MediaTypeOptions.Videos ï¼ "Videos"`

Only videos.

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

### `UIImagePickerControllerQualityType`

#### `High`

`UIImagePickerControllerQualityType.High ï¼ 0`

Highest available resolution.

#### `Medium`

`UIImagePickerControllerQualityType.Medium ï¼ 1`

Depends on the device.

#### `Low`

`UIImagePickerControllerQualityType.Low ï¼ 2`

Depends on the device.

#### `VGA640x480`

`UIImagePickerControllerQualityType.VGA640x480 ï¼ 3`

640 Ã 480

#### `IFrame1280x720`

`UIImagePickerControllerQualityType.IFrame1280x720 ï¼ 4`

1280 Ã 720

#### `IFrame960x540`

`UIImagePickerControllerQualityType.IFrame960x540 ï¼ 5`

960 Ã 540

### `UIImagePickerPreferredAssetRepresentationMode`

#### `Automatic`

`UIImagePickerPreferredAssetRepresentationMode.Automatic ï¼ "automatic"`

A mode that indicates that the system chooses the appropriate asset representation.

#### `Compatible`

`UIImagePickerPreferredAssetRepresentationMode.Compatible ï¼ "compatible"`

A mode that uses the most compatible asset representation.

#### `Current`

`UIImagePickerPreferredAssetRepresentationMode.Current ï¼ "current"`

A mode that uses the current representation to avoid transcoding, if possible.

### `UIImagePickerPresentationStyle`

#### `AUTOMATIC`

`UIImagePickerPresentationStyle.AUTOMATIC ï¼ "automatic"`

The default presentation style chosen by the system. On older iOS versions, falls back to `WebBrowserPresentationStyle.FullScreen`.

#### `CURRENT_CONTEXT`

`UIImagePickerPresentationStyle.CURRENT_CONTEXT ï¼ "currentContext"`

A presentation style where the picker is displayed over the app's content.

#### `FORM_SHEET`

`UIImagePickerPresentationStyle.FORM_SHEET ï¼ "formSheet"`

A presentation style that displays the picker centered in the screen.

#### `FULL_SCREEN`

`UIImagePickerPresentationStyle.FULL_SCREEN ï¼ "fullScreen"`

A presentation style in which the presented picker covers the screen.

#### `OVER_CURRENT_CONTEXT`

`UIImagePickerPresentationStyle.OVER_CURRENT_CONTEXT ï¼ "overCurrentContext"`

A presentation style where the picker is displayed over the app's content.

#### `OVER_FULL_SCREEN`

`UIImagePickerPresentationStyle.OVER_FULL_SCREEN ï¼ "overFullScreen"`

A presentation style in which the picker view covers the screen.

#### `PAGE_SHEET`

`UIImagePickerPresentationStyle.PAGE_SHEET ï¼ "pageSheet"`

A presentation style that partially covers the underlying content.

#### `POPOVER`

`UIImagePickerPresentationStyle.POPOVER ï¼ "popover"`

A presentation style where the picker is displayed in a popover view.

### `VideoExportPreset`

#### `Passthrough`

`VideoExportPreset.Passthrough ï¼ 0`

Resolution: Unchanged Video compression: None Audio compression: None

#### `LowQuality`

`VideoExportPreset.LowQuality ï¼ 1`

Resolution: Depends on the device Video compression: H.264 Audio compression: AAC

#### `MediumQuality`

`VideoExportPreset.MediumQuality ï¼ 2`

Resolution: Depends on the device Video compression: H.264 Audio compression: AAC

#### `HighestQuality`

`VideoExportPreset.HighestQuality ï¼ 3`

Resolution: Depends on the device Video compression: H.264 Audio compression: AAC

#### `H264_640x480`

`VideoExportPreset.H264_640x480 ï¼ 4`

Resolution: 640 Ã 480 Video compression: H.264 Audio compression: AAC

#### `H264_960x540`

`VideoExportPreset.H264_960x540 ï¼ 5`

Resolution: 960 Ã 540 Video compression: H.264 Audio compression: AAC

#### `H264_1280x720`

`VideoExportPreset.H264_1280x720 ï¼ 6`

Resolution: 1280 Ã 720 Video compression: H.264 Audio compression: AAC

#### `H264_1920x1080`

`VideoExportPreset.H264_1920x1080 ï¼ 7`

Resolution: 1920 Ã 1080 Video compression: H.264 Audio compression: AAC

#### `H264_3840x2160`

`VideoExportPreset.H264_3840x2160 ï¼ 8`

Resolution: 3840 Ã 2160 Video compression: H.264 Audio compression: AAC

#### `HEVC_1920x1080`

`VideoExportPreset.HEVC_1920x1080 ï¼ 9`

Resolution: 1920 Ã 1080 Video compression: HEVC Audio compression: AAC

#### `HEVC_3840x2160`

`VideoExportPreset.HEVC_3840x2160 ï¼ 10`

Resolution: 3840 Ã 2160 Video compression: HEVC Audio compression: AAC

## Permissions

### Android

The following permissions are added automatically through the library's AndroidManifest.xml.

### iOS

The following usage description keys are used by the APIs in this library.

---

# intent-launcher

A library that provides an API to launch Android intents.

`expo-intent-launcher` provides a way to launch Android intents. For example, you can use this API to open a specific settings screen.

### `ActivityAction`

#### `ACCESSIBILITY_SETTINGS`

`ActivityAction.ACCESSIBILITY_SETTINGS ï¼ "android.settings.ACCESSIBILITY_SETTINGS"`

#### `APP_NOTIFICATION_REDACTION`

`ActivityAction.APP_NOTIFICATION_REDACTION ï¼ "android.settings.ACTION_APP_NOTIFICATION_REDACTION"`

#### `CONDITION_PROVIDER_SETTINGS`

`ActivityAction.CONDITION_PROVIDER_SETTINGS ï¼ "android.settings.ACTION_CONDITION_PROVIDER_SETTINGS"`

#### `NOTIFICATION_LISTENER_SETTINGS`

`ActivityAction.NOTIFICATION_LISTENER_SETTINGS ï¼ "android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS"`

#### `PRINT_SETTINGS`

`ActivityAction.PRINT_SETTINGS ï¼ "android.settings.ACTION_PRINT_SETTINGS"`

#### `ADD_ACCOUNT_SETTINGS`

`ActivityAction.ADD_ACCOUNT_SETTINGS ï¼ "android.settings.ADD_ACCOUNT_SETTINGS"`

#### `AIRPLANE_MODE_SETTINGS`

`ActivityAction.AIRPLANE_MODE_SETTINGS ï¼ "android.settings.AIRPLANE_MODE_SETTINGS"`

#### `APN_SETTINGS`

`ActivityAction.APN_SETTINGS ï¼ "android.settings.APN_SETTINGS"`

#### `APP_NOTIFICATION_SETTINGS`

`ActivityAction.APP_NOTIFICATION_SETTINGS ï¼ "android.settings.APP_NOTIFICATION_SETTINGS"`

#### `APP_OPS_SETTINGS`

`ActivityAction.APP_OPS_SETTINGS ï¼ "android.settings.APP_OPS_SETTINGS"`

#### `APPLICATION_DETAILS_SETTINGS`

`ActivityAction.APPLICATION_DETAILS_SETTINGS ï¼ "android.settings.APPLICATION_DETAILS_SETTINGS"`

#### `APPLICATION_DEVELOPMENT_SETTINGS`

`ActivityAction.APPLICATION_DEVELOPMENT_SETTINGS ï¼ "android.settings.APPLICATION_DEVELOPMENT_SETTINGS"`

#### `APPLICATION_SETTINGS`

`ActivityAction.APPLICATION_SETTINGS ï¼ "android.settings.APPLICATION_SETTINGS"`

#### `BATTERY_SAVER_SETTINGS`

`ActivityAction.BATTERY_SAVER_SETTINGS ï¼ "android.settings.BATTERY_SAVER_SETTINGS"`

#### `BLUETOOTH_SETTINGS`

`ActivityAction.BLUETOOTH_SETTINGS ï¼ "android.settings.BLUETOOTH_SETTINGS"`

#### `CAPTIONING_SETTINGS`

`ActivityAction.CAPTIONING_SETTINGS ï¼ "android.settings.CAPTIONING_SETTINGS"`

#### `CAST_SETTINGS`

`ActivityAction.CAST_SETTINGS ï¼ "android.settings.CAST_SETTINGS"`

#### `DATA_ROAMING_SETTINGS`

`ActivityAction.DATA_ROAMING_SETTINGS ï¼ "android.settings.DATA_ROAMING_SETTINGS"`

#### `DATE_SETTINGS`

`ActivityAction.DATE_SETTINGS ï¼ "android.settings.DATE_SETTINGS"`

#### `DEVICE_INFO_SETTINGS`

`ActivityAction.DEVICE_INFO_SETTINGS ï¼ "android.settings.DEVICE_INFO_SETTINGS"`

#### `DEVICE_NAME`

`ActivityAction.DEVICE_NAME ï¼ "android.settings.DEVICE_NAME"`

#### `DISPLAY_SETTINGS`

`ActivityAction.DISPLAY_SETTINGS ï¼ "android.settings.DISPLAY_SETTINGS"`

#### `DREAM_SETTINGS`

`ActivityAction.DREAM_SETTINGS ï¼ "android.settings.DREAM_SETTINGS"`

#### `HARD_KEYBOARD_SETTINGS`

`ActivityAction.HARD_KEYBOARD_SETTINGS ï¼ "android.settings.HARD_KEYBOARD_SETTINGS"`

#### `HOME_SETTINGS`

`ActivityAction.HOME_SETTINGS ï¼ "android.settings.HOME_SETTINGS"`

#### `IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS`

`ActivityAction.IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS ï¼ "android.settings.IGNORE_BACKGROUND_DATA_RESTRICTIONS_SETTINGS"`

#### `IGNORE_BATTERY_OPTIMIZATION_SETTINGS`

`ActivityAction.IGNORE_BATTERY_OPTIMIZATION_SETTINGS ï¼ "android.settings.IGNORE_BATTERY_OPTIMIZATION_SETTINGS"`

#### `INPUT_METHOD_SETTINGS`

`ActivityAction.INPUT_METHOD_SETTINGS ï¼ "android.settings.INPUT_METHOD_SETTINGS"`

#### `INPUT_METHOD_SUBTYPE_SETTINGS`

`ActivityAction.INPUT_METHOD_SUBTYPE_SETTINGS ï¼ "android.settings.INPUT_METHOD_SUBTYPE_SETTINGS"`

#### `INTERNAL_STORAGE_SETTINGS`

`ActivityAction.INTERNAL_STORAGE_SETTINGS ï¼ "android.settings.INTERNAL_STORAGE_SETTINGS"`

#### `LOCALE_SETTINGS`

`ActivityAction.LOCALE_SETTINGS ï¼ "android.settings.LOCALE_SETTINGS"`

#### `LOCATION_SOURCE_SETTINGS`

`ActivityAction.LOCATION_SOURCE_SETTINGS ï¼ "android.settings.LOCATION_SOURCE_SETTINGS"`

#### `MANAGE_ALL_APPLICATIONS_SETTINGS`

`ActivityAction.MANAGE_ALL_APPLICATIONS_SETTINGS ï¼ "android.settings.MANAGE_ALL_APPLICATIONS_SETTINGS"`

#### `MANAGE_APPLICATIONS_SETTINGS`

`ActivityAction.MANAGE_APPLICATIONS_SETTINGS ï¼ "android.settings.MANAGE_APPLICATIONS_SETTINGS"`

#### `MANAGE_DEFAULT_APPS_SETTINGS`

`ActivityAction.MANAGE_DEFAULT_APPS_SETTINGS ï¼ "android.settings.MANAGE_DEFAULT_APPS_SETTINGS"`

#### `MEMORY_CARD_SETTINGS`

`ActivityAction.MEMORY_CARD_SETTINGS ï¼ "android.settings.MEMORY_CARD_SETTINGS"`

#### `MONITORING_CERT_INFO`

`ActivityAction.MONITORING_CERT_INFO ï¼ "android.settings.MONITORING_CERT_INFO"`

#### `NETWORK_OPERATOR_SETTINGS`

`ActivityAction.NETWORK_OPERATOR_SETTINGS ï¼ "android.settings.NETWORK_OPERATOR_SETTINGS"`

#### `NFC_PAYMENT_SETTINGS`

`ActivityAction.NFC_PAYMENT_SETTINGS ï¼ "android.settings.NFC_PAYMENT_SETTINGS"`

#### `NFC_SETTINGS`

`ActivityAction.NFC_SETTINGS ï¼ "android.settings.NFC_SETTINGS"`

#### `NFCSHARING_SETTINGS`

`ActivityAction.NFCSHARING_SETTINGS ï¼ "android.settings.NFCSHARING_SETTINGS"`

#### `NIGHT_DISPLAY_SETTINGS`

`ActivityAction.NIGHT_DISPLAY_SETTINGS ï¼ "android.settings.NIGHT_DISPLAY_SETTINGS"`

#### `NOTIFICATION_POLICY_ACCESS_SETTINGS`

`ActivityAction.NOTIFICATION_POLICY_ACCESS_SETTINGS ï¼ "android.settings.NOTIFICATION_POLICY_ACCESS_SETTINGS"`

#### `NOTIFICATION_SETTINGS`

`ActivityAction.NOTIFICATION_SETTINGS ï¼ "android.settings.NOTIFICATION_SETTINGS"`

#### `PAIRING_SETTINGS`

`ActivityAction.PAIRING_SETTINGS ï¼ "android.settings.PAIRING_SETTINGS"`

#### `PRIVACY_SETTINGS`

`ActivityAction.PRIVACY_SETTINGS ï¼ "android.settings.PRIVACY_SETTINGS"`

#### `QUICK_LAUNCH_SETTINGS`

`ActivityAction.QUICK_LAUNCH_SETTINGS ï¼ "android.settings.QUICK_LAUNCH_SETTINGS"`

#### `REQUEST_IGNORE_BATTERY_OPTIMIZATIONS`

`ActivityAction.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS ï¼ "android.settings.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS"`

#### `SECURITY_SETTINGS`

`ActivityAction.SECURITY_SETTINGS ï¼ "android.settings.SECURITY_SETTINGS"`

#### `SETTINGS`

`ActivityAction.SETTINGS ï¼ "android.settings.SETTINGS"`

#### `SHOW_ADMIN_SUPPORT_DETAILS`

`ActivityAction.SHOW_ADMIN_SUPPORT_DETAILS ï¼ "android.settings.SHOW_ADMIN_SUPPORT_DETAILS"`

#### `SHOW_INPUT_METHOD_PICKER`

`ActivityAction.SHOW_INPUT_METHOD_PICKER ï¼ "android.settings.SHOW_INPUT_METHOD_PICKER"`

#### `SHOW_REGULATORY_INFO`

`ActivityAction.SHOW_REGULATORY_INFO ï¼ "android.settings.SHOW_REGULATORY_INFO"`

#### `SHOW_REMOTE_BUGREPORT_DIALOG`

`ActivityAction.SHOW_REMOTE_BUGREPORT_DIALOG ï¼ "android.settings.SHOW_REMOTE_BUGREPORT_DIALOG"`

#### `SOUND_SETTINGS`

`ActivityAction.SOUND_SETTINGS ï¼ "android.settings.SOUND_SETTINGS"`

#### `STORAGE_MANAGER_SETTINGS`

`ActivityAction.STORAGE_MANAGER_SETTINGS ï¼ "android.settings.STORAGE_MANAGER_SETTINGS"`

#### `SYNC_SETTINGS`

`ActivityAction.SYNC_SETTINGS ï¼ "android.settings.SYNC_SETTINGS"`

#### `SYSTEM_UPDATE_SETTINGS`

`ActivityAction.SYSTEM_UPDATE_SETTINGS ï¼ "android.settings.SYSTEM_UPDATE_SETTINGS"`

#### `TETHER_PROVISIONING_UI`

`ActivityAction.TETHER_PROVISIONING_UI ï¼ "android.settings.TETHER_PROVISIONING_UI"`

#### `TRUSTED_CREDENTIALS_USER`

`ActivityAction.TRUSTED_CREDENTIALS_USER ï¼ "android.settings.TRUSTED_CREDENTIALS_USER"`

#### `USAGE_ACCESS_SETTINGS`

`ActivityAction.USAGE_ACCESS_SETTINGS ï¼ "android.settings.USAGE_ACCESS_SETTINGS"`

#### `USER_DICTIONARY_INSERT`

`ActivityAction.USER_DICTIONARY_INSERT ï¼ "android.settings.USER_DICTIONARY_INSERT"`

#### `USER_DICTIONARY_SETTINGS`

`ActivityAction.USER_DICTIONARY_SETTINGS ï¼ "android.settings.USER_DICTIONARY_SETTINGS"`

#### `USER_SETTINGS`

`ActivityAction.USER_SETTINGS ï¼ "android.settings.USER_SETTINGS"`

#### `VOICE_CONTROL_AIRPLANE_MODE`

`ActivityAction.VOICE_CONTROL_AIRPLANE_MODE ï¼ "android.settings.VOICE_CONTROL_AIRPLANE_MODE"`

#### `VOICE_CONTROL_BATTERY_SAVER_MODE`

`ActivityAction.VOICE_CONTROL_BATTERY_SAVER_MODE ï¼ "android.settings.VOICE_CONTROL_BATTERY_SAVER_MODE"`

#### `VOICE_CONTROL_DO_NOT_DISTURB_MODE`

`ActivityAction.VOICE_CONTROL_DO_NOT_DISTURB_MODE ï¼ "android.settings.VOICE_CONTROL_DO_NOT_DISTURB_MODE"`

#### `VOICE_INPUT_SETTINGS`

`ActivityAction.VOICE_INPUT_SETTINGS ï¼ "android.settings.VOICE_INPUT_SETTINGS"`

#### `VPN_SETTINGS`

`ActivityAction.VPN_SETTINGS ï¼ "android.settings.VPN_SETTINGS"`

#### `VR_LISTENER_SETTINGS`

`ActivityAction.VR_LISTENER_SETTINGS ï¼ "android.settings.VR_LISTENER_SETTINGS"`

#### `WEBVIEW_SETTINGS`

`ActivityAction.WEBVIEW_SETTINGS ï¼ "android.settings.WEBVIEW_SETTINGS"`

#### `WIFI_IP_SETTINGS`

`ActivityAction.WIFI_IP_SETTINGS ï¼ "android.settings.WIFI_IP_SETTINGS"`

#### `WIFI_SETTINGS`

`ActivityAction.WIFI_SETTINGS ï¼ "android.settings.WIFI_SETTINGS"`

#### `WIRELESS_SETTINGS`

`ActivityAction.WIRELESS_SETTINGS ï¼ "android.settings.WIRELESS_SETTINGS"`

#### `ZEN_MODE_AUTOMATION_SETTINGS`

`ActivityAction.ZEN_MODE_AUTOMATION_SETTINGS ï¼ "android.settings.ZEN_MODE_AUTOMATION_SETTINGS"`

#### `ZEN_MODE_EVENT_RULE_SETTINGS`

`ActivityAction.ZEN_MODE_EVENT_RULE_SETTINGS ï¼ "android.settings.ZEN_MODE_EVENT_RULE_SETTINGS"`

#### `ZEN_MODE_EXTERNAL_RULE_SETTINGS`

`ActivityAction.ZEN_MODE_EXTERNAL_RULE_SETTINGS ï¼ "android.settings.ZEN_MODE_EXTERNAL_RULE_SETTINGS"`

#### `ZEN_MODE_PRIORITY_SETTINGS`

`ActivityAction.ZEN_MODE_PRIORITY_SETTINGS ï¼ "android.settings.ZEN_MODE_PRIORITY_SETTINGS"`

#### `ZEN_MODE_SCHEDULE_RULE_SETTINGS`

`ActivityAction.ZEN_MODE_SCHEDULE_RULE_SETTINGS ï¼ "android.settings.ZEN_MODE_SCHEDULE_RULE_SETTINGS"`

#### `ZEN_MODE_SETTINGS`

`ActivityAction.ZEN_MODE_SETTINGS ï¼ "android.settings.ZEN_MODE_SETTINGS"`

### `ResultCode`

#### `Success`

`ResultCode.Success ï¼ -1`

Indicates that the activity operation succeeded.

#### `Canceled`

`ResultCode.Canceled ï¼ 0`

Means that the activity was canceled, for example, by tapping on the back button.

#### `FirstUser`

`ResultCode.FirstUser ï¼ 1`

First custom, user-defined value that can be returned by the activity.

---

# keep-awake

## Expo KeepAwake

A React component that prevents the screen from sleeping when rendered.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-keep-awake)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-keep-awake/CHANGELOG.md)[](https://www.npmjs.com/package/expo-keep-awake)

`expo-keep-awake` provides a React hook that prevents the screen from sleeping and a pair of functions to enable this behavior imperatively.

## Installation

`npx expo install expo-keep-awake`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

### Example: hook

```
import { useKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Text, View } from 'react-native';

export default function KeepAwakeExample() {
  useKeepAwake();
  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>This screen will never sleep!</Text>
    </View>
  );
}
```

### Example: functions

```
import { activateKeepAwake, deactivateKeepAwake } from 'expo-keep-awake';
import React from 'react';
import { Button, View } from 'react-native';

export default class KeepAwakeExample extends React.Component {
  render() {
    return (
      <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
        <Button onPress={this._activate} title="Activate" />
        <Button onPress={this._deactivate} title="Deactivate" />
      </View>
    );
  }

  _activate = () => {
    activateKeepAwake();
    alert('Activated!');
  };

  _deactivate = () => {
    deactivateKeepAwake();
    alert('Deactivated!');
  };
}
```

## API

```
import * as KeepAwake from 'expo-keep-awake';
```

## Constants

### `KeepAwake.ExpoKeepAwakeTag`

Type: `'ExpoKeepAwakeDefaultTag'`

Default tag, used when no tag has been specified in keep awake method calls.

## Hooks

### `useKeepAwake(tag, options)`

  

A React hook to keep the screen awake for as long as the owner component is mounted. The optionally provided `tag` argument is used when activating and deactivating the keep-awake feature. If unspecified, an ID unique to the owner component is used. See the documentation for `activateKeepAwakeAsync` below to learn more about the `tag` argument.

## Methods

> Deprecated use `activateKeepAwakeAsync` instead.

### `KeepAwake.activateKeepAwake(tag)`

  

Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.

If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake` with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.

Web support [is limited](https://caniuse.com/wake-lock).

### `KeepAwake.activateKeepAwakeAsync(tag)`

  

Prevents the screen from sleeping until `deactivateKeepAwake` is called with the same `tag` value.

If the `tag` argument is specified, the screen will not sleep until you call `deactivateKeepAwake` with the same `tag` argument. When using multiple `tags` for activation you'll have to deactivate each one in order to re-enable screen sleep. If tag is unspecified, the default `tag` is used.

Web support [is limited](https://caniuse.com/wake-lock).

### `KeepAwake.deactivateKeepAwake(tag)`

  

Releases the lock on screen-sleep prevention associated with the given `tag` value. If `tag` is unspecified, it defaults to the same default tag that `activateKeepAwake` uses.

### `KeepAwake.isAvailableAsync()`

## Event Subscriptions

### `KeepAwake.addListener(tagOrListener, listener)`

  

Observe changes to the keep awake timer. On web, this changes when navigating away from the active window/tab. No-op on native.

Example

```
KeepAwake.addListener(({ state }) => {
  // ...
});
```

## Types

### `KeepAwakeEvent`

### `KeepAwakeListener(event)`

### `KeepAwakeOptions`

## Enums

### `KeepAwakeEventState`

#### `RELEASE`

`KeepAwakeEventState.RELEASE ï¼ "release"`

---

# light-sensor

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View, Platform } from 'react-native';
import { LightSensor } from 'expo-sensors';

export default function App() {
  const [{ illuminance }, setData] = useState({ illuminance: 0 });
  const [subscription, setSubscription] = useState(null);

  const toggle = () => {
    if (subscription) {
      unsubscribe();
    } else {
      subscribe();
    }
  };

  const subscribe = () => {
    setSubscription(
      LightSensor.addListener(sensorData => {
        setData(sensorData);
      })
    );
  };

  const unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    subscribe();
    return () => unsubscribe();
  }, []);

  return (
    <View style={styles.sensor}>
      <Text>Light Sensor:</Text>
      <Text>
        Illuminance: {Platform.OS === 'android' ? `${illuminance} lx` : `Only available on Android`}
      </Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={toggle} style={styles.button}>
          <Text>Toggle</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  sensor: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 10,
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
});
```


---

# linear-gradient

A universal React component that renders a gradient view.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-linear-gradient)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-linear-gradient/CHANGELOG.md)[](https://www.npmjs.com/package/expo-linear-gradient)

`expo-linear-gradient` provides a native React view that transitions between multiple colors in a linear direction.

## Installation

`npx expo install expo-linear-gradient`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { StyleSheet, Text, View } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

export default function App() {
  return (
    <View style={styles.container}>
      <LinearGradient
        // Background Linear Gradient
        colors={['rgba(0,0,0,0.8)', 'transparent']}
        style={styles.background}
      />
      <LinearGradient
        // Button Linear Gradient
        colors={['#4c669f', '#3b5998', '#192f6a']}
        style={styles.button}>
        <Text style={styles.text}>Sign in with Facebook</Text>
      </LinearGradient>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'orange',
  },
  background: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    height: 300,
  },
  button: {
    padding: 15,
    alignItems: 'center',
    borderRadius: 5,
  },
  text: {
    backgroundColor: 'transparent',
    fontSize: 15,
    color: '#fff',
  },
});
```

## API

```
import { LinearGradient } from 'expo-linear-gradient';
```

## Component

### `LinearGradient`

Type: `React.[Component](https://react.dev/reference/react/Component)<[LinearGradientProps](#lineargradientprops)>`

Renders a native view that transitions between multiple colors in a linear direction.

LinearGradientProps

### `colors`

Type:

`readonly [[ColorValue](https://reactnative.dev/docs/colors), [ColorValue](https://reactnative.dev/docs/colors), [object Object][]]`

A readonly array of colors that represent stops in the gradient. At least two colors are required (for a single-color background, use the `style.backgroundColor` prop on a `View` component).

For TypeScript to know the provided array has 2 or more values, it should be provided "inline" or typed `as const`.

### `dither`

OptionalâType:

`boolean`âDefault: `true`

Enables or disables paint dithering. Dithering can reduce the gradient color banding issue. Setting `false` may improve gradient rendering performance.

### `end`

OptionalâLiteral type: `union`

For example, `{ x: 0.1, y: 0.2 }` means that the gradient will end `10%` from the left and `20%` from the bottom.

On web, this only changes the angle of the gradient because CSS gradients don't support changing the end position.

Acceptable values are: `[LinearGradientPoint](#lineargradientpoint)` | `null`

### `locations`

OptionalâLiteral type: `union`âDefault: `[]`

A readonly array that contains `number`s ranging from `0` to `1`, inclusive, and is the same length as the `colors` property. Each number indicates a color-stop location where each respective color should be located. If not specified, the colors will be distributed evenly across the gradient.

For example, `[0.5, 0.8]` would render:

*   the first color, solid, from the beginning of the gradient view to 50% through (the middle);
*   a gradient from the first color to the second from the 50% point to the 80% point; and
*   the second color, solid, from the 80% point to the end of the gradient view.

> The color-stop locations must be ascending from least to greatest.

Acceptable values are: `readonly [number, number, number[][]]` | `null`

### `start`

OptionalâLiteral type: `union`

For example, `{ x: 0.1, y: 0.2 }` means that the gradient will start `10%` from the left and `20%` from the top.

On web, this only changes the angle of the gradient because CSS gradients don't support changing the starting position.

Acceptable values are: `[LinearGradientPoint](#lineargradientpoint)` | `null`

#### Inherited Props

## Types

### `LinearGradientPoint`

An object `{ x: number; y: number }` or array `[x, y]` that represents the point at which the gradient starts or ends, as a fraction of the overall size of the gradient ranging from `0` to `1`, inclusive.

Type: `[NativeLinearGradientPoint](#nativelineargradientpoint)` or `object` shaped as below:

### `NativeLinearGradientPoint`

Tuple: `[x: number, y: number]`

---

# linking

## Expo Linking

An API that provides methods to create and open deep links universally.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-linking)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-linking/CHANGELOG.md)[](https://www.npmjs.com/package/expo-linking)

`expo-linking` provides utilities for your app to interact with other installed apps using deep links. It also provides helper methods for constructing and parsing deep links into your app. This library is an extension of the React Native [`Linking`](https://reactnative.dev/docs/linking).

For a more comprehensive explanation of how to use `expo-linking`, refer to the [Linking into other apps](https://docs.expo.dev/linking/into-other-apps).

## Installation

`npx expo install expo-linking`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import * as Linking from 'expo-linking';
```

## Hooks

### `useLinkingURL()`

Returns the linking URL followed by any subsequent changes to the URL. Always returns the initial URL immediately on reload.

Returns the initial URL or `null`.

### `useURL()`

Returns the initial URL followed by any subsequent changes to the URL.

Returns the initial URL or `null`.

## Methods

### `Linking.canOpenURL(url)`

  

Determine whether or not an installed app can handle a given URL. On web this always returns `true` because there is no API for detecting what URLs can be opened.

### `Linking.collectManifestSchemes()`

Collect a list of platform schemes from the manifest.

This method is based on the `Scheme` modules from `@expo/config-plugins` which are used for collecting the schemes before prebuilding a native app.

*   Android: `scheme` -> `android.scheme` -> `android.package`
*   iOS: `scheme` -> `ios.scheme` -> `ios.bundleIdentifier`

### `Linking.createURL(path, namedParameters)`

  

Helper method for constructing a deep link into your app, given an optional path and set of query parameters. Creates a URI scheme with two slashes by default.

The scheme must be defined in the [app config](https://docs.expo.dev/versions/latest/config/app) under `expo.scheme` or `expo.{android,ios}.scheme`. Platform-specific schemes defined under `expo.{android,ios}.scheme` take precedence over universal schemes defined under `expo.scheme`.

#### Examples

*   Development and production builds: `<scheme>://path` - uses the optional `scheme` property if provided, and otherwise uses the first scheme defined by your app config
*   Web (dev): `https://localhost:19006/path`
*   Web (prod): `https://myapp.com/path`
*   Expo Go (dev): `exp://128.0.0.1:8081/--/path`

The behavior of this method in Expo Go for published updates is undefined and should not be relied upon. The created URL in this case is neither stable nor predictable during the lifetime of the app. If a stable URL is needed, for example in authorization callbacks, a build (or development build) of your application should be used and the scheme provided.

A URL string which points to your app with the given deep link information.

### `Linking.getInitialURL()`

Get the URL that was used to launch the app if it was launched by a link.

The URL string that launched your app, or `null`.

### `Linking.getLinkingURL()`

Get the URL that was used to launch the app if it was launched by a link.

The URL string that launched your app, or `null`.

### `Linking.hasConstantsManifest()`

Ensure the user has linked the expo-constants manifest in bare workflow.

### `Linking.hasCustomScheme()`

### `Linking.openSettings()`

Open the operating system settings app and displays the appâs custom settings, if it has any.

### `Linking.openURL(url)`

  

Attempt to open the given URL with an installed app. See the [Linking guide](https://docs.expo.dev/guides/linking) for more information.

A `Promise` that is fulfilled with `true` if the link is opened operating system automatically or the user confirms the prompt to open the link. The `Promise` rejects if there are no applications registered for the URL or the user cancels the dialog.

### `Linking.parse(url)`

  

Helper method for parsing out deep link information from a URL.

### `Linking.parseInitialURLAsync()`

Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`. Parses the deep link information out of the URL used to open the experience initially. If no link opened the app, all the fields will be `null`.

> On the web it parses the current window URL.

A promise that resolves with `ParsedURL` object.

### `Linking.resolveScheme(options)`

  

### `Linking.sendIntent(action, extras)`

  

Launch an Android intent with extras.

> Use [`expo-intent-launcher`](https://docs.expo.dev/versions/latest/sdk/intent-launcher) instead. `sendIntent` is only included in `Linking` for API compatibility with React Native's Linking API.

## Event Subscriptions

### `Linking.addEventListener(type, handler)`

  

Add a handler to `Linking` changes by listening to the `url` event type and providing the handler. It is recommended to use the [`useURL()`](#useurl) hook instead.

An EmitterSubscription that has the remove method from EventSubscription

## Types

### `CreateURLOptions`

### `EventType`

### `NativeURLListener(nativeEvent)`

### `ParsedURL`

### `QueryParams`

Type: `Record<string, undefined | string | string[]>`

### `SendIntentExtras`

### `URLListener(event)`

---

# live-photo

## Expo LivePhoto

A library that allows displaying Live Photos on iOS.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-live-photo)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-live-photo/CHANGELOG.md)[](https://www.npmjs.com/package/expo-live-photo)

## Installation

`npx expo install expo-live-photo`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

Here's a simple example of `expo-live-photo` usage combined with `expo-image-picker`.

```
import * as ImagePicker from 'expo-image-picker';
import { LivePhotoAsset, LivePhotoView, LivePhotoViewType } from 'expo-live-photo';
import { useRef, useState } from 'react';
import { View, StyleSheet, Text, Button } from 'react-native';

export default function LivePhotoScreen() {
  const viewRef = useRef<LivePhotoViewType>(null);
  const [livePhoto, setLivePhoto] = useState<LivePhotoAsset | null>(null);

  const pickImage = async () => {
    const result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ['livePhotos'],
    });

    if (!result.canceled && result.assets[0].pairedVideoAsset?.uri) {
      setLivePhoto({
        photoUri: result.assets[0].uri,
        pairedVideoUri: result.assets[0].pairedVideoAsset.uri,
      });
    } else {
      console.error('Failed to pick a live photo');
    }
  };

  if (!LivePhotoView.isAvailable()) {
    return (
      <View style={styles.container}>
        <Text>expo-live-photo is not available on this platform ð</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <LivePhotoView
        ref={viewRef}
        source={livePhoto}
        style={[styles.livePhotoView, { display: livePhoto ? 'flex' : 'none' }]}
        onLoadComplete={() => {
          console.log('Live photo loaded successfully!');
        }}
        onLoadError={error => {
          console.error('Failed to load the live photo: ', error.message);
        }}
      />
      <View style={livePhoto ? styles.pickImageCollapsed : styles.pickImageExpanded}>
        <Button title={livePhoto ? 'Change Image' : 'Pick an image'} onPress={pickImage} />
      </View>
      <Button title="Start Playback Hint" onPress={() => viewRef.current?.startPlayback('hint')} />
      <Button title="Start Playback" onPress={() => viewRef.current?.startPlayback('full')} />
      <Button title="Stop Playback" onPress={() => viewRef.current?.stopPlayback()} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: 20,
    paddingHorizontal: 40,
  },
  livePhotoView: {
    alignSelf: 'stretch',
    height: 300,
  },
  pickImageExpanded: {
    alignSelf: 'stretch',
    height: 300,
    justifyContent: 'center',
  },
  pickImageCollapsed: {
    marginVertical: 10,
  },
  button: {
    marginVertical: 10,
  },
});
```

## API

```
import { LivePhotoView } from 'expo-live-photo';
```

## Component

### `LivePhotoView`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[LivePhotoViewProps](#livephotoviewprops)>`

LivePhotoViewProps

### `contentFit`

OptionalâType:

`[ContentFit](#contentfit)`âDefault: `'contain'`

Determines how the image should be scaled to fit the container.

*   `'contain'` - Scales the image so that its larger dimension fits the target size.
*   `'cover'` - Scales the image so that it completely fills the target size.

### `isMuted`

OptionalâType:

`boolean`âDefault: `true`

Determines whether the live photo should also play audio.

### `onLoadComplete`

OptionalâType:

`() => void`

Called when the live photo is loaded and ready to play.

### `onLoadError`

OptionalâType:

`(error: [LivePhotoLoadError](#livephotoloaderror)) => void`

Called when an error occurred while loading.

### `onLoadStart`

OptionalâType:

`() => void`

Called when the live photo starts loading.

### `onPlaybackStart`

OptionalâType:

`() => void`

Called when the playback starts.

### `onPlaybackStop`

OptionalâType:

`() => void`

Called when the playback stops.

### `onPreviewPhotoLoad`

OptionalâType:

`() => void`

Called when the live photo preview photo is loaded.

### `source`

OptionalâLiteral type: `union`

The live photo asset to display.

Acceptable values are: `null` | `[LivePhotoAsset](#livephotoasset)`

### `useDefaultGestureRecognizer`

OptionalâType:

`boolean`âDefault: `true`

Determines whether the default iOS gesture recognizer should be used. When `true` the playback will start if the user presses and holds on the `LivePhotoView`.

#### Inherited Props

## Component Methods

### `isAvailable()`

Determines whether the current device is capable of displaying live photos.

## Types

### `ContentFit`

Literal Type: `string`

Determines how the image should be scaled to fit the container.

*   `'contain'` - Scales the image so that its larger dimension fits the target size.
*   `'cover'` - Scales the image so that it completely fills the target size.

Acceptable values are: `'contain'` | `'cover'`

### `LivePhotoAsset`

A live photo asset.

> Note: Due to native limitations, the photo and video parts of the live photo must come from a valid live photo file and be unaltered. When taken, the photo is paired with the video via metadata. If the pairing is broken, joining them into a live photo is impossible.

### `LivePhotoLoadError`

### `LivePhotoViewType`

### `PlaybackStyle`

Literal Type: `string`

Determines what style to use when playing the live photo.

*   `'hint'` - A short part of the video will be played to indicate that a live photo is being displayed.
*   `'full'` - The full video part will be played.

Acceptable values are: `'hint'` | `'full'`

---

# local-authentication

A library that provides functionality for implementing the Fingerprint API (Android) or FaceID and TouchID (iOS) to authenticate the user with a face or fingerprint scan.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-local-authentication)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-local-authentication/CHANGELOG.md)[](https://www.npmjs.com/package/expo-local-authentication)

`expo-local-authentication` allows you to use the Biometric Prompt (Android) or FaceID and TouchID (iOS) to authenticate the user with a fingerprint or face scan.

## Known limitation

### iOSâ

The FaceID authentication for iOS is not supported in Expo Go. You will need to create a [development build](https://docs.expo.dev/develop/development-builds/introduction) to test FaceID.

## Installation

`npx expo install expo-local-authentication`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-local-authentication` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-local-authentication",
        {
          "faceIDPermission": "Allow $(PRODUCT_NAME) to use Face ID."
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## API

```
import * as LocalAuthentication from 'expo-local-authentication';
```

## Methods

### `LocalAuthentication.authenticateAsync(options)`

  

Attempts to authenticate via Fingerprint/TouchID (or FaceID if available on the device).

> Note: Apple requires apps which use FaceID to provide a description of why they use this API. If you try to use FaceID on an iPhone with FaceID without providing `infoPlist.NSFaceIDUsageDescription` in `app.json`, the module will authenticate using device passcode. For more information about usage descriptions on iOS, see [permissions guide](https://docs.expo.dev/guides/permissions#ios).

Returns a promise which fulfils with [`LocalAuthenticationResult`](#localauthenticationresult).

### `LocalAuthentication.cancelAuthenticate()`

Cancels authentication flow.

### `LocalAuthentication.getEnrolledLevelAsync()`

Determine what kind of authentication is enrolled on the device.

Returns a promise which fulfils with [`SecurityLevel`](#securitylevel).

> Note: On Android devices prior to M, `SECRET` can be returned if only the SIM lock has been enrolled, which is not the method that [`authenticateAsync`](#localauthenticationauthenticateasyncoptions) prompts.

### `LocalAuthentication.hasHardwareAsync()`

Determine whether a face or fingerprint scanner is available on the device.

Returns a promise which fulfils with a `boolean` value indicating whether a face or fingerprint scanner is available on this device.

### `LocalAuthentication.isEnrolledAsync()`

Determine whether the device has saved fingerprints or facial data to use for authentication.

Returns a promise which fulfils to `boolean` value indicating whether the device has saved fingerprints or facial data for authentication.

### `LocalAuthentication.supportedAuthenticationTypesAsync()`

Determine what kinds of authentications are available on the device.

Returns a promise which fulfils to an array containing [`AuthenticationType`s](#authenticationtype).

Devices can support multiple authentication methods - i.e. `[1,2]` means the device supports both fingerprint and facial recognition. If none are supported, this method returns an empty array.

## Types

### `BiometricsSecurityLevel`

Literal Type: `string`

Security level of the biometric authentication to allow.

Acceptable values are: `'weak'` | `'strong'`

### `LocalAuthenticationError`

Literal Type: `string`

One of the error values returned by the [`LocalAuthenticationResult`](#localauthenticationresult) object.

Acceptable values are: `'not_enrolled'` | `'user_cancel'` | `'app_cancel'` | `'not_available'` | `'lockout'` | `'no_space'` | `'timeout'` | `'unable_to_process'` | `'unknown'` | `'system_cancel'` | `'user_fallback'` | `'invalid_context'` | `'passcode_not_set'` | `'authentication_failed'`

### `LocalAuthenticationOptions`

### `LocalAuthenticationResult`

Type: `object` shaped as below:

Or `object` shaped as below:

## Enums

### `AuthenticationType`

#### `FINGERPRINT`

`AuthenticationType.FINGERPRINT ï¼ 1`

Indicates fingerprint support.

#### `FACIAL_RECOGNITION`

`AuthenticationType.FACIAL_RECOGNITION ï¼ 2`

Indicates facial recognition support.

#### `IRIS`

`AuthenticationType.IRIS ï¼ 3`

Indicates iris recognition support.

### `SecurityLevel`

#### `NONE`

`SecurityLevel.NONE ï¼ 0`

Indicates no enrolled authentication.

#### `SECRET`

`SecurityLevel.SECRET ï¼ 1`

Indicates non-biometric authentication (e.g. PIN, Pattern).

#### `BIOMETRIC_WEAK`

`SecurityLevel.BIOMETRIC_WEAK ï¼ 2`

Indicates weak biometric authentication. For example, a 2D image-based face unlock.

> There are currently no weak biometric authentication options on iOS.

#### `BIOMETRIC_STRONG`

`SecurityLevel.BIOMETRIC_STRONG ï¼ 3`

Indicates strong biometric authentication. For example, a fingerprint scan or 3D face unlock.

## Permissions

### Android

The following permissions are added automatically through this library's AndroidManifest.xml:

### iOS

The following usage description keys are used by this library:

---

# localization

A library that provides an interface for native user localization information.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-localization)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-localization/CHANGELOG.md)[](https://www.npmjs.com/package/expo-localization)

`expo-localization` allows you to Localize your app, customizing the experience for specific regions, languages, or cultures. It also provides access to the locale data on the native device. Using a localization library such as [`lingui-js`](https://lingui.dev/introduction), [`react-i18next`](https://react.i18next.com/), [`react-intl`](https://formatjs.io/docs/getting-started/installation/) or [`i18n-js`](https://github.com/fnando/i18n-js) with `expo-localization` will enable you to create a very accessible experience for users.

## Installation

`npx expo install expo-localization`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-localization` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": ["expo-localization"]
  }
}
```

## Usage

Find more information about using `expo-localization` and adding support for right-to-left languages in the [Localization](https://docs.expo.dev/guides/localization) guide.

## API

```
import { getLocales, getCalendars } from 'expo-localization';
```

### Behavior

You can use synchronous `getLocales()` and `getCalendars()` methods to get the locale settings of the user device. On iOS, the results will remain the same while the app is running.

On Android, the user can change locale preferences in Settings without restarting apps. To keep the localization current, you can rerun the `getLocales()` and `getCalendars()` methods every time the app returns to the foreground. Use `AppState` to detect this.

## Constants

> Deprecated Use [`Localization.getLocales()`](#localizationgetlocales) instead. An [IETF BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag), consisting of a two-character language code and optional script, region and variant codes.

### `Localization.locale`

Type: `string`

Example

`'en'`, `'en-US'`, `'zh-Hans'`, `'zh-Hans-CN'`, `'en-emodeng'`

## Hooks

### `useCalendars()`

A hook providing a list of user's preferred calendars, returned as an array of objects of type `Calendar`. Guaranteed to contain at least 1 element. For now always returns a single element, but it's likely to return a user preference list on some platforms in the future. If the OS settings change, the hook will rerender with a new list of calendars.

Example

```
[{
  "calendar": "gregory",
  "timeZone": "Europe/Warsaw",
  "uses24hourClock": true,
  "firstWeekday": 1
}]
```

### `useLocales()`

A hook providing a list of user's locales, returned as an array of objects of type `Locale`. Guaranteed to contain at least 1 element. These are returned in the order the user defines in their device settings. On the web currency and measurements systems are not provided, instead returned as null. If needed, you can infer them from the current region using a lookup table. If the OS settings change, the hook will rerender with a new list of locales.

Example

```
[{
  "languageTag": "pl-PL",
  "languageCode": "pl",
  "textDirection": "ltr",
  "digitGroupingSeparator": " ",
  "decimalSeparator": ",",
  "measurementSystem": "metric",
  "currencyCode": "PLN",
  "currencySymbol": "zÅ",
  "regionCode": "PL",
  "temperatureUnit": "celsius"
}]
```

## Methods

### `Localization.getCalendars()`

List of user's preferred calendars, returned as an array of objects of type `Calendar`. Guaranteed to contain at least 1 element. For now always returns a single element, but it's likely to return a user preference list on some platforms in the future.

Example

```
[{
  "calendar": "gregory",
  "timeZone": "Europe/Warsaw",
  "uses24hourClock": true,
  "firstWeekday": 1
}]
```

### `Localization.getLocales()`

List of user's locales, returned as an array of objects of type `Locale`. Guaranteed to contain at least 1 element. These are returned in the order the user defines in their device settings. On the web currency and measurements systems are not provided, instead returned as null. If needed, you can infer them from the current region using a lookup table.

Example

```
[{
  "languageTag": "pl-PL",
  "languageCode": "pl",
  "textDirection": "ltr",
  "digitGroupingSeparator": " ",
  "decimalSeparator": ",",
  "measurementSystem": "metric",
  "currencyCode": "PLN",
  "currencySymbol": "zÅ",
  "regionCode": "PL",
  "temperatureUnit": "celsius"
}]
```

## Types

### `Calendar`

### `Locale`

### `Localization`

## Enums

### `CalendarIdentifier`

The calendar identifier, one of [Unicode calendar types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar). Gregorian calendar is aliased and can be referred to as both `CalendarIdentifier.GREGORIAN` and `CalendarIdentifier.GREGORY`.

#### `BUDDHIST`

`CalendarIdentifier.BUDDHIST ï¼ "buddhist"`

Thai Buddhist calendar

#### `CHINESE`

`CalendarIdentifier.CHINESE ï¼ "chinese"`

Traditional Chinese calendar

#### `COPTIC`

`CalendarIdentifier.COPTIC ï¼ "coptic"`

Coptic calendar

#### `DANGI`

`CalendarIdentifier.DANGI ï¼ "dangi"`

Traditional Korean calendar

#### `ETHIOAA`

`CalendarIdentifier.ETHIOAA ï¼ "ethioaa"`

Ethiopic calendar, Amete Alem (epoch approx. 5493 B.C.E)

#### `ETHIOPIC`

`CalendarIdentifier.ETHIOPIC ï¼ "ethiopic"`

Ethiopic calendar, Amete Mihret (epoch approx, 8 C.E.)

#### `GREGORIAN`

`CalendarIdentifier.GREGORIAN ï¼ "gregory"`

Gregorian calendar (alias)

#### `GREGORY`

`CalendarIdentifier.GREGORY ï¼ "gregory"`

Gregorian calendar

#### `HEBREW`

`CalendarIdentifier.HEBREW ï¼ "hebrew"`

Traditional Hebrew calendar

#### `INDIAN`

`CalendarIdentifier.INDIAN ï¼ "indian"`

Indian calendar

#### `ISLAMIC`

`CalendarIdentifier.ISLAMIC ï¼ "islamic"`

Islamic calendar

#### `ISLAMIC_CIVIL`

`CalendarIdentifier.ISLAMIC_CIVIL ï¼ "islamic-civil"`

Islamic calendar, tabular (intercalary years \[2,5,7,10,13,16,18,21,24,26,29\] - civil epoch)

#### `ISLAMIC_RGSA`

`CalendarIdentifier.ISLAMIC_RGSA ï¼ "islamic-rgsa"`

Islamic calendar, Saudi Arabia sighting

#### `ISLAMIC_TBLA`

`CalendarIdentifier.ISLAMIC_TBLA ï¼ "islamic-tbla"`

Islamic calendar, tabular (intercalary years \[2,5,7,10,13,16,18,21,24,26,29\] - astronomical epoch)

#### `ISLAMIC_UMALQURA`

`CalendarIdentifier.ISLAMIC_UMALQURA ï¼ "islamic-umalqura"`

Islamic calendar, Umm al-Qura

#### `ISO8601`

`CalendarIdentifier.ISO8601 ï¼ "iso8601"`

ISO calendar (Gregorian calendar using the ISO 8601 calendar week rules)

#### `JAPANESE`

`CalendarIdentifier.JAPANESE ï¼ "japanese"`

Japanese imperial calendar

#### `PERSIAN`

`CalendarIdentifier.PERSIAN ï¼ "persian"`

Persian calendar

#### `ROC`

`CalendarIdentifier.ROC ï¼ "roc"`

Civil (algorithmic) Arabic calendar

### `Weekday`

An enum mapping days of the week in Gregorian calendar to their index as returned by the `firstWeekday` property.

#### `TUESDAY`

`Weekday.TUESDAY ï¼ 3`

#### `WEDNESDAY`

`Weekday.WEDNESDAY ï¼ 4`

#### `THURSDAY`

`Weekday.THURSDAY ï¼ 5`

#### `SATURDAY`

`Weekday.SATURDAY ï¼ 7`

---

# location

## Expo Location

A library that provides access to reading geolocation information, polling current location or subscribing location update events from the device.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-location)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-location/CHANGELOG.md)[](https://www.npmjs.com/package/expo-location)

`expo-location` allows reading geolocation information from the device. Your app can poll for the current location or subscribe to location update events.

## Installation

`npx expo install expo-location`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-location` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-location",
        {
          "locationAlwaysAndWhenInUsePermission": "Allow $(PRODUCT_NAME) to use your location."
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

### Background location

Background location allows your app to receive location updates while it is running in the background and includes both location updates and region monitoring through geofencing. This feature is subject to platform API limitations and system constraints:

*   Background location will stop if the user terminates the app.
*   Background location resumes if the user restarts the app.
*   A terminated app will not automatically restart when a location or geofencing event occurs due to platform limitations.
*   The system will restart the terminated app when a new geofence event occurs.

> On Android, the result of removing an app from the recent apps list varies by device vendor. For example, some implementations treat removing an app from the recent apps list as killing it. Read more about these differences here: [https://dontkillmyapp.com](https://dontkillmyapp.com/).

### Background location configurationâ

To be able to run background location on iOS, you need to add the `location` value to the `UIBackgroundModes` array in your app's Info.plist file.

If you're using [CNG](https://docs.expo.dev/workflow/continuous-native-generation), the required `UIBackgroundModes` configuration will be applied automatically by prebuild.

Configure UIBackgroundModes manually on iOS

### Background location methods

To use Background Location methods, the following requirements apply:

*   Location permissions must be granted.
*   Background location task must be defined in the top-level scope, using [`TaskManager.defineTask`](https://docs.expo.dev/versions/latest/sdk/task-manager#taskmanagerdefinetasktaskname-taskexecutor).
*   `"location"` background mode must be specified in Info.plist file. See [Background location configuration](https://docs.expo.dev/versions/latest/sdk/location#background-location-configuration).
*   You must use a [development build](https://docs.expo.dev/develop/development-builds/introduction) to use background location since it is not supported in the Expo Go app.

### Geofencing methods

To use Geofencing methods, the following requirements apply:

*   Location permissions must be granted.
*   The Geofencing task must be defined in the top-level scope, using [`TaskManager.defineTask`](https://docs.expo.dev/versions/latest/sdk/task-manager#taskmanagerdefinetasktaskname-taskexecutor).

When using Geofencing, the following platform differences apply:

*   You are allowed [up to 100](https://developer.android.com/develop/sensors-and-location/location/geofencing) active geofences per app.
*   Expo Location will report the initial state of the registered geofence(s) at app startup.
*   There is a [limit of 20](https://developer.apple.com/documentation/corelocation/monitoring_the_user_s_proximity_to_geographic_regions) `regions` that can be simultaneously monitored.

### Background permissions

To use location tracking or Geofencing in the background, you must request the appropriate permissions:

*   On Android, you must request both foreground and background permissions.
*   On iOS, it must be granted with the `Always` option using [`requestBackgroundPermissionsAsync`](https://docs.expo.dev/versions/latest/sdk/location#locationrequestbackgroundpermissionsasync).

Expo and iOS permissions

## Deferred locations

When using background locations, you can configure the location manager to defer updates. This helps save battery by reducing update frequency. You can set updates to trigger only after the device has moved a certain distance or after a specified time interval.

Deferred updates are configured through [`LocationTaskOptions`](https://docs.expo.dev/versions/latest/sdk/location#locationtaskoptions) using the [`deferredUpdatesDistance`](https://docs.expo.dev/versions/latest/sdk/location#locationtaskoptions), [`deferredUpdatesInterval`](https://docs.expo.dev/versions/latest/sdk/location#locationtaskoptions) and [`deferredTimeout`](https://docs.expo.dev/versions/latest/sdk/location#locationtaskoptions) properties.

> Deferred locations apply only when the app is in the background.

## Usage

If you're using the Android Emulator or iOS Simulator, ensure that [Location is enabled](https://docs.expo.dev/versions/latest/sdk/location#enable-emulator-location).

```
import { useState, useEffect } from 'react';
import { Platform, Text, View, StyleSheet } from 'react-native';
%%placeholder-start%%%%placeholder-end%%import * as Device from 'expo-device';
import * as Location from 'expo-location';

export default function App() {
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [errorMsg, setErrorMsg] = useState<string | null>(null);

  useEffect(() => {
    async function getCurrentLocation() {
      %%placeholder-start%%%%placeholder-end%%if (Platform.OS === 'android' && !Device.isDevice) {
        setErrorMsg(
          'Oops, this will not work on Snack in an Android Emulator. Try it on your device!'
        );
        return;
      }
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    }

    getCurrentLocation();
  }, []);

  let text = 'Waiting...';
  if (errorMsg) {
    text = errorMsg;
  } else if (location) {
    text = JSON.stringify(location);
  }

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>{text}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  paragraph: {
    fontSize: 18,
    textAlign: 'center',
  },
});
```

## Enable emulator location

### Android Emulator

Open Android Studio, and launch the Android Emulator. Inside it, go to Settings > Location and enable Use location.

If you don't receive the locations in the emulator, you may have to turn off the Improve Location Accuracy setting. This will turn off Wi-Fi location and only use GPS. Then you can manipulate the location with GPS data through the emulator.

For Android 12 and higher, go to Settings > Location > Location Services > Google Location Accuracy, and turn off Improve Location Accuracy. For Android 11 and lower, go to Settings > Location > Advanced > Google Location Accuracy, and turn off Google Location Accuracy.

### iOS Simulator

With Simulator open, go to Features > Location and choose any option besides None.

## API

```
import * as Location from 'expo-location';
```

## Hooks

### `useBackgroundPermissions(options)`

  

Check or request permissions for the background location. This uses both `requestBackgroundPermissionsAsync` and `getBackgroundPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = Location.useBackgroundPermissions();
```

### `useForegroundPermissions(options)`

  

Check or request permissions for the foreground location. This uses both `requestForegroundPermissionsAsync` and `getForegroundPermissionsAsync` to interact with the permissions.

`[null | [LocationPermissionResponse](#locationpermissionresponse), RequestPermissionMethod<[LocationPermissionResponse](#locationpermissionresponse)>, GetPermissionMethod<[LocationPermissionResponse](#locationpermissionresponse)>]`

Example

```
const [status, requestPermission] = Location.useForegroundPermissions();
```

## Methods

### `Location.enableNetworkProviderAsync()`

Asks the user to turn on high accuracy location mode which enables network provider that uses Google Play services to improve location accuracy and location-based services.

A promise resolving as soon as the user accepts the dialog. Rejects if denied.

### `Location.geocodeAsync(address)`

  

Geocode an address string to latitude-longitude location.

On Android, you must request location permissions with [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync) before geocoding can be used.

> Note: Geocoding is resource consuming and has to be used reasonably. Creating too many requests at a time can result in an error, so they have to be managed properly. It's also discouraged to use geocoding while the app is in the background and its results won't be shown to the user immediately.

A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedLocation`](#locationgeocodedlocation) objects.

### `Location.getBackgroundPermissionsAsync()`

Checks user's permissions for accessing location while the app is in the background.

A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).

### `Location.getCurrentPositionAsync(options)`

  

Requests for one-time delivery of the user's current location. Depending on given `accuracy` option it may take some time to resolve, especially when you're inside a building.

> Note: Calling it causes the location manager to obtain a location fix which may take several seconds. Consider using [`getLastKnownPositionAsync`](#locationgetlastknownpositionasyncoptions) if you expect to get a quick response and high accuracy is not required.

A promise which fulfills with an object of type [`LocationObject`](#locationobject).

### `Location.getForegroundPermissionsAsync()`

Checks user's permissions for accessing location while the app is in the foreground.

A promise that fulfills with an object of type [`LocationPermissionResponse`](#locationpermissionresponse).

### `Location.getHeadingAsync()`

Gets the current heading information from the device. To simplify, it calls `watchHeadingAsync` and waits for a couple of updates, and then returns the one that is accurate enough.

A promise which fulfills with an object of type [`LocationHeadingObject`](#locationheadingobject).

### `Location.getLastKnownPositionAsync(options)`

  

Gets the last known position of the device or `null` if it's not available or doesn't match given requirements such as maximum age or required accuracy. It's considered to be faster than `getCurrentPositionAsync` as it doesn't request for the current location, but keep in mind the returned location may not be up-to-date.

A promise which fulfills with an object of type [`LocationObject`](#locationobject) or `null` if it's not available or doesn't match given requirements such as maximum age or required accuracy.

### `Location.getProviderStatusAsync()`

Check status of location providers.

A promise which fulfills with an object of type [`LocationProviderStatus`](#locationproviderstatus).

### `Location.hasServicesEnabledAsync()`

Checks whether location services are enabled by the user.

A promise which fulfills to `true` if location services are enabled on the device, or `false` if not.

### `Location.hasStartedGeofencingAsync(taskName)`

  

A promise which fulfills with boolean value indicating whether the geofencing task is started or not.

### `Location.hasStartedLocationUpdatesAsync(taskName)`

  

A promise which fulfills with boolean value indicating whether the location task is started or not.

### `Location.installWebGeolocationPolyfill()`

Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.

### `Location.isBackgroundLocationAvailableAsync()`

### `Location.requestBackgroundPermissionsAsync()`

Asks the user to grant permissions for location while the app is in the background. On Android 11 or higher: this method will open the system settings page - before that happens you should explain to the user why your application needs background location permission. For example, you can use `Modal` component from `react-native` to do that.

> Note: Foreground permissions should be granted before asking for the background permissions (your app can't obtain background permission without foreground permission).

A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).

### `Location.requestForegroundPermissionsAsync()`

Asks the user to grant permissions for location while the app is in the foreground.

A promise that fulfills with an object of type [`LocationPermissionResponse`](#locationpermissionresponse).

### `Location.reverseGeocodeAsync(location)`

  

Reverse geocode a location to postal address.

On Android, you must request location permissions with [`requestForegroundPermissionsAsync`](#locationrequestforegroundpermissionsasync) before geocoding can be used.

> Note: Geocoding is resource consuming and has to be used reasonably. Creating too many requests at a time can result in an error, so they have to be managed properly. It's also discouraged to use geocoding while the app is in the background and its results won't be shown to the user immediately.

A promise which fulfills with an array (in most cases its size is 1) of [`LocationGeocodedAddress`](#locationgeocodedaddress) objects.

### `Location.startGeofencingAsync(taskName, regions)`

  

Starts geofencing for given regions. When the new event comes, the task with specified name will be called with the region that the device enter to or exit from. If you want to add or remove regions from already running geofencing task, you can just call `startGeofencingAsync` again with the new array of regions.

#### Task parameters

Geofencing task will be receiving following data:

*   `eventType` - Indicates the reason for calling the task, which can be triggered by entering or exiting the region. See [`GeofencingEventType`](#geofencingeventtype).
*   `region` - Object containing details about updated region. See [`LocationRegion`](#locationregion) for more details.

A promise resolving as soon as the task is registered.

Example

```
import { GeofencingEventType } from 'expo-location';
import * as TaskManager from 'expo-task-manager';

 TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { eventType, region }, error }) => {
  if (error) {
    // check `error.message` for more details.
    return;
  }
  if (eventType === GeofencingEventType.Enter) {
    console.log("You've entered region:", region);
  } else if (eventType === GeofencingEventType.Exit) {
    console.log("You've left region:", region);
  }
});
```

### `Location.startLocationUpdatesAsync(taskName, options)`

  

Registers for receiving location updates that can also come when the app is in the background.

#### Task parameters

Background location task will be receiving following data:

*   `locations` - An array of the new locations.

A promise resolving once the task with location updates is registered.

Example

```
import * as TaskManager from 'expo-task-manager';

TaskManager.defineTask(YOUR_TASK_NAME, ({ data: { locations }, error }) => {
 if (error) {
   // check `error.message` for more details.
   return;
 }
 console.log('Received new locations', locations);
});
```

### `Location.stopGeofencingAsync(taskName)`

  

Stops geofencing for specified task. It unregisters the background task so the app will not be receiving any updates, especially in the background.

A promise resolving as soon as the task is unregistered.

### `Location.stopLocationUpdatesAsync(taskName)`

  

Stops location updates for specified task.

A promise resolving as soon as the task is unregistered.

### `Location.watchHeadingAsync(callback, errorHandler)`

  

Subscribe to compass updates from the device.

A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.

### `Location.watchPositionAsync(options, callback, errorHandler)`

  

Subscribe to location updates from the device. Please note that updates will only occur while the application is in the foreground. To get location updates while in background you'll need to use [`startLocationUpdatesAsync`](#locationstartlocationupdatesasynctaskname-options).

A promise which fulfills with a [`LocationSubscription`](#locationsubscription) object.

## Types

### `LocationCallback(location)`

Represents `watchPositionAsync` callback.

### `LocationErrorCallback(reason)`

Error callback for location methods.

### `LocationGeocodedAddress`

Type representing a result of `reverseGeocodeAsync`.

### `LocationGeocodedLocation`

Type representing a result of `geocodeAsync`.

### `LocationHeadingCallback(location)`

Represents `watchHeadingAsync` callback.

### `LocationHeadingObject`

Type of the object containing heading details and provided by `watchHeadingAsync` callback.

### `LocationLastKnownOptions`

Type representing options object that can be passed to `getLastKnownPositionAsync`.

### `LocationObject`

Type representing the location object.

### `LocationObjectCoords`

Type representing the location GPS related data.

### `LocationOptions`

Type representing options argument in `getCurrentPositionAsync`.

### `LocationPermissionResponse`

`LocationPermissionResponse` extends [`PermissionResponse`](#permissionresponse) type exported by `expo-modules-core` and contains additional platform-specific fields.

Type: `[PermissionResponse](#permissionresponse)` extended by:

### `LocationProviderStatus`

Represents the object containing details about location provider.

### `LocationRegion`

Type representing geofencing region object.

### `LocationSubscription`

Represents subscription object returned by methods watching for new locations or headings.

### `LocationTaskOptions`

Type representing background location task options.

Type: `[LocationOptions](#locationoptions)` extended by:

### `LocationTaskServiceOptions`

### `PermissionDetailsLocationAndroid`

### `PermissionDetailsLocationIOS`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

An object obtained by permissions get and request functions.

## Enums

### `Accuracy`

Enum with available location accuracies.

#### `Lowest`

`Accuracy.Lowest ï¼ 1`

Accurate to the nearest three kilometers.

#### `Low`

`Accuracy.Low ï¼ 2`

Accurate to the nearest kilometer.

#### `Balanced`

`Accuracy.Balanced ï¼ 3`

Accurate to within one hundred meters.

#### `High`

`Accuracy.High ï¼ 4`

Accurate to within ten meters of the desired target.

#### `Highest`

`Accuracy.Highest ï¼ 5`

The best level of accuracy available.

#### `BestForNavigation`

`Accuracy.BestForNavigation ï¼ 6`

The highest possible accuracy that uses additional sensor data to facilitate navigation apps.

### `ActivityType`

Enum with available activity types of background location tracking.

#### `Other`

`ActivityType.Other ï¼ 1`

Default activity type. Use it if there is no other type that matches the activity you track.

#### `AutomotiveNavigation`

`ActivityType.AutomotiveNavigation ï¼ 2`

Location updates are being used specifically during vehicular navigation to track location changes to the automobile.

#### `Fitness`

`ActivityType.Fitness ï¼ 3`

Use this activity type if you track fitness activities such as walking, running, cycling, and so on.

#### `OtherNavigation`

`ActivityType.OtherNavigation ï¼ 4`

Activity type for movements for other types of vehicular navigation that are not automobile related.

#### `Airborne`

`ActivityType.Airborne ï¼ 5`

Intended for airborne activities. Fall backs to `ActivityType.Other` if unsupported.

### `GeofencingEventType`

A type of the event that geofencing task can receive.

#### `Enter`

`GeofencingEventType.Enter ï¼ 1`

Emitted when the device entered observed region.

#### `Exit`

`GeofencingEventType.Exit ï¼ 2`

Occurs as soon as the device left observed region

### `GeofencingRegionState`

State of the geofencing region that you receive through the geofencing task.

#### `Unknown`

`GeofencingRegionState.Unknown ï¼ 0`

Indicates that the device position related to the region is unknown.

#### `Inside`

`GeofencingRegionState.Inside ï¼ 1`

Indicates that the device is inside the region.

#### `Outside`

`GeofencingRegionState.Outside ï¼ 2`

Inverse of inside state.

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

> Foreground and background services are not available in Expo Go for Android. Instead, we recommend using a [development build](https://docs.expo.dev/develop/development-builds/introduction) to avoid limitations.

When you install the `expo-location` module, it automatically adds the following permissions:

*   `ACCESS_COARSE_LOCATION`: for approximate device location
*   `ACCESS_FINE_LOCATION`: for precise device location

The following permissions are optional:

*   `FOREGROUND_SERVICE` and `FOREGROUND_SERVICE_LOCATION`: to be able to access location while the app is open but backgrounded. `FOREGROUND_SERVICE_LOCATION` is only required as of Android 14. When you enable this in a new build, you will need to [submit your app for review and request access to use the foreground service permission](https://support.google.com/googleplay/android-developer/answer/13392821?hl=en).
*   `ACCESS_BACKGROUND_LOCATION`: to be able to access location while the app is backgrounded or closed. When you enable this in a new build, you will need to [submit your app for review and request access to use the background location permission](https://support.google.com/googleplay/android-developer/answer/9799150?hl=en).

#### Excluding a permission

> Note: Excluding a required permission from a module in your app can break the functionality corresponding to that permission. Always make sure to include all permissions a module is dependent on.

When your Expo project doesn't benefit from having particular permission included, you can omit it. For example, if your application doesn't need access to the precise location, you can exclude the `ACCESS_FINE_LOCATION` permission.

Another example can be stated using [available location accuracies](https://docs.expo.dev/versions/latest/sdk/location#accuracy). Android defines the approximate location accuracy estimation within about 3 square kilometers, and the precise location accuracy estimation within about 50 meters. For example, if the location accuracy value is [Low](https://docs.expo.dev/versions/latest/sdk/location#low), you can exclude `ACCESS_FINE_LOCATION` permission. To learn more about levels of location accuracies, see [Android documentation](https://developer.android.com/training/location/permissions#accuracy).

To learn more on how to exclude permission, see [Excluding Android permissions](https://docs.expo.dev/guides/permissions#excluding-android-permissions).

### iOS

The following usage description keys are used by this library:

NSLocationAlwaysUsageDescription and NSLocationWhenInUseUsageDescription are deprecated in favor of NSLocationAlwaysAndWhenInUseUsageDescription from iOS 11.

---

# lottie

```
import { useRef, useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';
import LottieView from 'lottie-react-native';

export default function App() {
  const animation = useRef<LottieView>(null);
  useEffect(() => {
    // You can control the ref programmatically, rather than using autoPlay
    // animation.current?.play();
  }, []);

  return (
    <View style={styles.animationContainer}>
      <LottieView
        autoPlay
        ref={animation}
        style={{
          width: 200,
          height: 200,
          backgroundColor: '#eee',
        }}
        // Find more Lottie files at https://lottiefiles.com/featured
        source={require('./assets/gradientBall.json')}
      />
      <View style={styles.buttonContainer}>
        <Button
          title="Restart Animation"
          onPress={() => {
            animation.current?.reset();
            animation.current?.play();
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  animationContainer: {
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    flex: 1,
  },
  buttonContainer: {
    paddingTop: 20,
  },
});
```


---

# magnetometer

A library that provides access to the device's magnetometer sensor.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors/CHANGELOG.md)[](https://www.npmjs.com/package/expo-sensors)

`Magnetometer` from `expo-sensors` provides access to the device magnetometer sensor(s) to respond to and measure the changes in the magnetic field measured in microtesla (`Î¼T`).

You can access the calibrated values with `Magnetometer` and uncalibrated raw values with `MagnetometerUncalibrated`.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { Magnetometer } from 'expo-sensors';

export default function Compass() {
  const [{ x, y, z }, setData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [subscription, setSubscription] = useState(null);

  const _slow = () => Magnetometer.setUpdateInterval(1000);
  const _fast = () => Magnetometer.setUpdateInterval(16);

  const _subscribe = () => {
    setSubscription(
      Magnetometer.addListener(result => {
        setData(result);
      })
    );
  };

  const _unsubscribe = () => {
    subscription && subscription.remove();
    setSubscription(null);
  };

  useEffect(() => {
    _subscribe();
    return () => _unsubscribe();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Magnetometer:</Text>
      <Text style={styles.text}>x: {x}</Text>
      <Text style={styles.text}>y: {y}</Text>
      <Text style={styles.text}>z: {z}</Text>
      <View style={styles.buttonContainer}>
        <TouchableOpacity onPress={subscription ? _unsubscribe : _subscribe} style={styles.button}>
          <Text>{subscription ? 'On' : 'Off'}</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>
          <Text>Slow</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={_fast} style={styles.button}>
          <Text>Fast</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  text: {
    textAlign: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'stretch',
    marginTop: 15,
  },
  button: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#eee',
    padding: 10,
  },
  middleButton: {
    borderLeftWidth: 1,
    borderRightWidth: 1,
    borderColor: '#ccc',
  },
});
```

## API

```
import { Magnetometer, MagnetometerUncalibrated } from 'expo-sensors';
```

## Classes

### `Magnetometer`

Type: Class extends `[DeviceSensor](https://docs.expo.dev/versions/latest/sdk/sensors)<[MagnetometerMeasurement](#magnetometermeasurement)>`

Magnetometer Methods

### `addListener(listener)`

  

Subscribe for updates to the magnetometer.

A subscription that you can call `remove()` on when you would like to unsubscribe the listener.

### `getListenerCount()`

Returns the registered listeners count.

### `getPermissionsAsync()`

Checks user's permissions for accessing sensor.

### `hasListeners()`

Returns boolean which signifies if sensor has any listeners registered.

### `isAvailableAsync()`

> You should always check the sensor availability before attempting to use it.

Check the availability of the device magnetometer. Requires at least Android 2.3 (API Level 9) and iOS 8.

A promise that resolves to a `boolean` denoting the availability of the sensor.

### `removeAllListeners()`

Removes all registered listeners.

### `removeSubscription(subscription)`

  

Removes the given subscription.

### `requestPermissionsAsync()`

Asks the user to grant permissions for accessing sensor.

### `setUpdateInterval(intervalMs)`

  

Set the sensor update interval.

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `MagnetometerMeasurement`

Each of these keys represents the strength of magnetic field along that particular axis measured in microteslas (`Î¼T`).

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionResponse`

An object obtained by permissions get and request functions.

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

---

# mail-composer

A library that provides functionality to compose and send emails with the system's specific UI.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-mail-composer)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-mail-composer/CHANGELOG.md)[](https://www.npmjs.com/package/expo-mail-composer)

`expo-mail-composer` allows you to compose and send emails quickly and easily using the OS UI. This module can't be used on iOS Simulators since you can't sign into a mail account on them.

## Installation

`npx expo install expo-mail-composer`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import * as MailComposer from 'expo-mail-composer';
```

## Methods

### `MailComposer.composeAsync(options)`

  

Opens a mail modal for iOS and a mail app intent for Android and fills the fields with provided data. On iOS you will need to be signed into the Mail app.

A promise fulfilled with an object containing a `status` field that specifies whether an email was sent, saved, or cancelled. Android does not provide this info, so the status is always set as if the email were sent.

### `MailComposer.getClients()`

Retrieves a list of available email clients installed on the device. This can be used to present options to the user for sending emails through their preferred email client, or to open an email client so the user can access their mailbox â for example, to open a confirmation email sent by your app.

An array of available mail clients.

### `MailComposer.isAvailableAsync()`

Determine if the `MailComposer` API can be used in this app.

A promise resolves to `true` if the API can be used, and `false` otherwise.

*   Returns `true` when the device has a default email setup for sending mail.
*   Can return `false` on iOS if an MDM profile is setup to block outgoing mail. If this is the case, you may want to use the Linking API instead.
*   Always returns `true` in the browser.

## Types

### `MailClient`

Represents a mail client available on the device.

### `MailComposerOptions`

A map defining the data to fill the mail.

### `MailComposerResult`

## Enums

### `MailComposerStatus`

#### `CANCELLED`

`MailComposerStatus.CANCELLED ï¼ "cancelled"`

#### `SAVED`

`MailComposerStatus.SAVED ï¼ "saved"`

#### `SENT`

`MailComposerStatus.SENT ï¼ "sent"`

#### `UNDETERMINED`

`MailComposerStatus.UNDETERMINED ï¼ "undetermined"`

---

# manifests

## Expo Manifests

A library that provides types for Expo Manifests.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-manifests)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-manifests/CHANGELOG.md)[](https://www.npmjs.com/package/expo-manifests)

## Installation

`npx expo install expo-manifests`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import * as Manifests from 'expo-manifests';
```

## Types

> Deprecated Renamed to `EmbeddedManifest`, will be removed in a few versions.

### `BareManifest`

Type: `[EmbeddedManifest](https://docs.expo.dev/versions/latest/sdk/manifests#embeddedmanifest)`

### `ClientScopingConfig`

### `EASConfig`

### `EmbeddedManifest`

An embedded manifest.

Generated during build in createManifest.js build step script.

### `ExpoGoConfig`

### `ExpoGoPackagerOpts`

Type: `Record<string, any>` extended by:

### `ExpoUpdatesManifest`

A `expo-updates` manifest.

### `ManifestAsset`

> Deprecated renamed to `ExpoUpdatesManifest`, will be removed in a few versions.

### `NewManifest`

Type: `[ExpoUpdatesManifest](https://docs.expo.dev/versions/latest/sdk/manifests#expoupdatesmanifest)`

---

# map-view

A library that provides a Map component that uses Google Maps on Android and Apple Maps or Google Maps on iOS.

[](https://github.com/react-native-maps/react-native-maps)[](https://www.npmjs.com/package/react-native-maps)

`react-native-maps` provides a Map component that uses Google Maps on Android and Apple Maps or Google Maps on iOS.

No additional setup is required when testing your project using Expo Go. However, to deploy the app binary on app stores additional steps are required for Google Maps. For more information, see the [instructions below](https://docs.expo.dev/versions/latest/sdk/map-view#deploy-app-with-google-maps).

## Installation

`npx expo install react-native-maps`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/react-native-maps/react-native-maps/blob/master/docs/installation.md) provided in the library's README or documentation.

## Usage

See full documentation at [`react-native-maps/react-native-maps`](https://github.com/react-native-maps/react-native-maps).

```
import React from 'react';
import MapView from 'react-native-maps';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <MapView style={styles.map} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  map: {
    width: '100%',
    height: '100%',
  },
});
```

## Deploy app with Google Maps

### Android

> If you have already registered a project for another Google service on Android, such as Google Sign In, you enable the Maps SDK for Android on your project and jump to step 4.

1

#### Register a Google Cloud API project and enable the Maps SDK for Android

*   Open your browser to the [Google API Manager](https://console.developers.google.com/apis) and create a project.
*   Once it's created, go to the project and enable the Maps SDK for Android.

2

#### Copy your app's SHA-1 certificate fingerprint

*   If you are deploying your app to the Google Play Store, you'll need to [upload your app binary to Google Play console](https://docs.expo.dev/submit/android) at least once. This is required for Google to generate your app signing credentials.
*   Go to the [Google Play Console](https://play.google.com/console) > (your app) > Release > Setup > App integrity > App Signing.
*   Copy the value of SHA-1 certificate fingerprint.

*   If you have already created a [development build](https://docs.expo.dev/develop/development-builds/introduction), your project will be signed using a debug keystore.
*   After the build is complete, go to your [project's dashboard](https://expo.dev/accounts/%5Busername%5D/projects/%5Bproject-name%5D), then, under Configure > click Credentials.
*   Under Application Identifiers, click your project's package name and under Android Keystore copy the value of SHA-1 Certificate Fingerprint.

3

#### Create an API key

*   Go to [Google Cloud Credential manager](https://console.cloud.google.com/apis/credentials) and click Create Credentials, then API Key.
*   In the modal, click Edit API key.
*   Under Key restrictions > Application restrictions, choose Android apps.
*   Under Restrict usage to your Android apps, click Add an item.
*   Add your `android.package` from app.json (for example: `com.company.myapp`) to the package name field.
*   Then, add the SHA-1 certificate fingerprint's value from step 2.
*   Click Done and then click Save.

4

#### Add the API key to your project

*   Copy your API Key into your your to either a .env file and then add it to your app.json under the `android.config.googleMaps.apiKey` field like or copy it:

```
"android": {
      "config": {
        "googleMaps": {
          "apiKey": "process.env.GOOGLE_MAPS_API_KEY",
        },
      },
    }
```

*   In your code, import `{ PROVIDER_GOOGLE }` from `react-native-maps` and add the property `provider={PROVIDER_GOOGLE}` to your `<MapView>`. This property works on both Android and iOS.
*   Rebuild the app binary (or re-submit to the Google Play Store in case your app is already uploaded). An easy way to test if the configuration was successful is to do an [emulator build](https://docs.expo.dev/develop/development-builds/create-a-build#create-a-development-build-for-emulatorsimulator).

### iOS

> If you have already registered a project for another Google service on iOS, such as Google Sign In, you enable the Maps SDK for iOS on your project and jump to step 3.

1

#### Register a Google Cloud API project and enable the Maps SDK for iOS

*   Open your browser to the [Google API Manager](https://console.developers.google.com/apis) and create a project.
*   Then, go to the project, click Enable APIs and Services and enable the Maps SDK for iOS.

2

#### Create an API key

*   Go to [Google Cloud Credential manager](https://console.cloud.google.com/apis/credentials) and click Create Credentials, then API Key.
*   In the modal, click Edit API key.
*   Under Key restrictions > Application restrictions, choose iOS apps.
*   Under Accept requests from an iOS application with one of these bundle identifiers, click the Add an item button.
*   Add your `ios.bundleIdentifier` from app.json (for example: `com.company.myapp`) to the bundle ID field.
*   Click Done and then click Save.

3

#### Add the API key to your project

*   Copy your API Key into your your to either a .env file and then add it to your app.json under the `ios.config.googleMapsApiKey` field like or copy it:

```
"ios": {
      "config": {
        "googleMapsApiKey":  "process.env.GOOGLE_MAPS_API_KEY",
        },
      }
```

*   In your code, import `{ PROVIDER_GOOGLE }` from `react-native-maps` and add the property `provider={PROVIDER_GOOGLE}` to your `<MapView>`. This property works on both Android and iOS.
*   Rebuild the app binary. An easy way to test if the configuration was successful is to do a [simulator build](https://docs.expo.dev/develop/development-builds/create-a-build#create-a-development-build-for-emulatorsimulator).

---

# maps

## Expo Maps

A library that provides access to Google Maps on Android and Apple Maps on iOS.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-maps)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-maps/CHANGELOG.md)[](https://www.npmjs.com/package/expo-maps)

> This library is currently in alpha and will frequently experience breaking changes. It is not available in the Expo Go app â use [development builds](https://docs.expo.dev/develop/development-builds/introduction) to try it out.

## Installation

`npx expo install expo-maps`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

  
[

Watch: Expo Maps Deep Dive

](https://www.youtube.com/watch?v=jDCuaIQ9vd0)

## Configuration

Expo Maps provides access to the platform native map APIs on Android and iOS.

*   Apple Maps (available on only). No additional configuration is required to use it after installing this package.
*   Google Maps (available on only). While Google provides a Google Maps SDK for iOS, Expo Maps supports it exclusively on Android. If you want to use Google Maps on iOS, you can look into using an [alternative library](https://reactnative.directory/) or [writing your own](https://docs.expo.dev/modules/overview).

### Google Cloud API setup

Before you can use Google Maps on Android, you need to register a Google Cloud API project, enable the Maps SDK for Android, and add the associated configuration to your Expo project.

Set up Google Maps on Android

## Permissions

To display the user's location on the map, you need to declare and request location permission beforehand. You can configure this using the built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-maps",
        {
          "requestLocationPermission": true,
          "locationPermission": "Allow $(PRODUCT_NAME) to use your location"
        }
      ]
    ]
  }
}
```

### Configurable properties

## Usage

```
import { AppleMaps, GoogleMaps } from 'expo-maps';
import { Platform, Text } from 'react-native';

export default function App() {
  if (Platform.OS === 'ios') {
    return <AppleMaps.View style={{ flex: 1 }} />;
  } else if (Platform.OS === 'android') {
    return <GoogleMaps.View style={{ flex: 1 }} />;
  } else {
    return <Text>Maps are only available on Android and iOS</Text>;
  }
}
```

## API

```
import { AppleMaps, GoogleMaps } from 'expo-maps';

// ApplesMaps.View and GoogleMaps.View are the React components
```

## Components

### `AppleMapsView`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[AppleMapsViewProps](#applemapsviewprops), 'ref'>>`

### `annotations`

OptionalâType:

`[AppleMapsAnnotation[]](#applemapsannotation)`

The array of annotations to display on the map.

### `cameraPosition`

OptionalâType:

`[CameraPosition](https://docs.expo.dev/versions/v53.0.0/sdk/maps#cameraposition-2)`

The initial camera position of the map.

### `markers`

OptionalâType:

`[AppleMapsMarker[]](#applemapsmarker)`

The array of markers to display on the map.

### `onCameraMove`

OptionalâType:

`(event: { bearing: number, coordinates: [Coordinates](#coordinates), tilt: number, zoom: number }) => void`

Lambda invoked when the map was moved by the user.

### `onMapClick`

OptionalâType:

`(event: { coordinates: [Coordinates](#coordinates) }) => void`

Lambda invoked when the user clicks on the map. It won't be invoked if the user clicks on POI or a marker.

### `onMarkerClick`

OptionalâType:

`(event: [AppleMapsMarker](#applemapsmarker)) => void`

Lambda invoked when the marker is clicked

### `onPolylineClick`

OptionalâType:

`(event: [AppleMapsPolyline](#applemapspolyline)) => void`

Lambda invoked when the polyline is clicked

### `polylines`

OptionalâType:

`[AppleMapsPolyline[]](#applemapspolyline)`

The array of polylines to display on the map.

### `properties`

OptionalâType:

`[AppleMapsProperties](#applemapsproperties)`

The properties for the map.

### `ref`

OptionalâType:

`[Ref](#ref)<[AppleMapsViewType](#applemapsviewtype)>`

### `uiSettings`

OptionalâType:

`[AppleMapsUISettings](#applemapsuisettings)`

The `MapUiSettings` to be used for UI-specific settings on the map.

### `GoogleMapsView`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[GoogleMapsViewProps](#googlemapsviewprops), 'ref'>>`

### `cameraPosition`

OptionalâType:

`[CameraPosition](https://docs.expo.dev/versions/v53.0.0/sdk/maps#cameraposition-2)`

The initial camera position of the map.

### `colorScheme`

OptionalâType:

`[GoogleMapsColorScheme](#googlemapscolorscheme)`

Defines the color scheme for the map.

### `markers`

OptionalâType:

`[GoogleMapsMarker[]](#googlemapsmarker)`

The array of markers to display on the map.

### `onCameraMove`

OptionalâType:

`(event: { bearing: number, coordinates: [Coordinates](#coordinates), tilt: number, zoom: number }) => void`

Lambda invoked when the map was moved by the user.

### `onMapClick`

OptionalâType:

`(event: { coordinates: [Coordinates](#coordinates) }) => void`

Lambda invoked when the user clicks on the map. It won't be invoked if the user clicks on POI or a marker.

### `onMapLoaded`

OptionalâType:

`() => void`

Lambda invoked when the map is loaded.

### `onMapLongClick`

OptionalâType:

`(event: { coordinates: [Coordinates](#coordinates) }) => void`

Lambda invoked when the user long presses on the map.

### `onMarkerClick`

OptionalâType:

`(event: [GoogleMapsMarker](#googlemapsmarker)) => void`

Lambda invoked when the marker is clicked

### `onPOIClick`

OptionalâType:

`(event: { coordinates: [Coordinates](#coordinates), name: string }) => void`

Lambda invoked when a POI is clicked.

### `onPolylineClick`

OptionalâType:

`(event: [GoogleMapsPolyline](#googlemapspolyline)) => void`

Lambda invoked when the polyline is clicked.

### `polylines`

OptionalâType:

`[GoogleMapsPolyline[]](#googlemapspolyline)`

The array of polylines to display on the map.

### `properties`

OptionalâType:

`[GoogleMapsProperties](#googlemapsproperties)`

The properties for the map.

### `ref`

OptionalâType:

`[Ref](#ref)<[GoogleMapsViewType](#googlemapsviewtype)>`

### `uiSettings`

OptionalâType:

`[GoogleMapsUISettings](#googlemapsuisettings)`

The `MapUiSettings` to be used for UI-specific settings on the map.

### `userLocation`

OptionalâType:

`[GoogleMapsUserLocation](#googlemapsuserlocation)`

User location, overrides default behavior.

### `GoogleStreetView`

Type: `React.Element<[GoogleStreetViewProps](#googlestreetviewprops)>`

### `isPanningGesturesEnabled`

### `isStreetNamesEnabled`

### `isUserNavigationEnabled`

### `isZoomGesturesEnabled`

### `position`

Type:

`[StreetViewCameraPosition](#streetviewcameraposition)`

## Hooks

### `useLocationPermissions(options)`

  

Check or request permissions to access the location. This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = useLocationPermissions();
```

## Methods

### `Maps.getPermissionsAsync()`

Checks user's permissions for accessing location.

A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).

### `Maps.requestPermissionsAsync()`

Asks the user to grant permissions for location.

A promise that fulfills with an object of type [`PermissionResponse`](#permissionresponse).

## Types

### `AppleMapsAnnotation`

Type: `[AppleMapsMarker](#applemapsmarker)` extended by:

### `AppleMapsMarker`

### `AppleMapsPolyline`

### `AppleMapsProperties`

### `AppleMapsUISettings`

### `AppleMapsViewType`

### `CameraPosition`

### `Coordinates`

### `GoogleMapsMarker`

### `GoogleMapsPolyline`

### `GoogleMapsProperties`

### `GoogleMapsUISettings`

### `GoogleMapsUserLocation`

### `GoogleMapsViewType`

### `StreetViewCameraPosition`

## Enums

### `AppleMapsContourStyle`

The style of the polyline.

#### `GEODESIC`

`AppleMapsContourStyle.GEODESIC ï¼ "GEODESIC"`

A geodesic line.

#### `STRAIGHT`

`AppleMapsContourStyle.STRAIGHT ï¼ "STRAIGHT"`

A straight line.

### `AppleMapsMapType`

The type of map to display.

#### `HYBRID`

`AppleMapsMapType.HYBRID ï¼ "HYBRID"`

A satellite image of the area with road and road name layers on top.

#### `IMAGERY`

`AppleMapsMapType.IMAGERY ï¼ "IMAGERY"`

A satellite image of the area.

#### `STANDARD`

`AppleMapsMapType.STANDARD ï¼ "STANDARD"`

A street map that shows the position of all roads and some road names.

### `GoogleMapsColorScheme`

#### `DARK`

`GoogleMapsColorScheme.DARK ï¼ "DARK"`

#### `FOLLOW_SYSTEM`

`GoogleMapsColorScheme.FOLLOW_SYSTEM ï¼ "FOLLOW_SYSTEM"`

#### `LIGHT`

`GoogleMapsColorScheme.LIGHT ï¼ "LIGHT"`

### `GoogleMapsMapType`

The type of map to display.

#### `HYBRID`

`GoogleMapsMapType.HYBRID ï¼ "HYBRID"`

Satellite imagery with roads and points of interest overlayed.

#### `NORMAL`

`GoogleMapsMapType.NORMAL ï¼ "NORMAL"`

Standard road map.

#### `SATELLITE`

`GoogleMapsMapType.SATELLITE ï¼ "SATELLITE"`

Satellite imagery.

#### `TERRAIN`

`GoogleMapsMapType.TERRAIN ï¼ "TERRAIN"`

Topographic data.

## Permissions

### Android

To show the user's location on the map, the `expo-maps` library requires the following permissions:

*   `ACCESS_COARSE_LOCATION`: for approximate device location
*   `ACCESS_FINE_LOCATION`: for precise device location

### iOS

The following usage description keys are used by this library:

---

# masked-view

A library that provides a masked view.

[](https://github.com/react-native-masked-view/masked-view)[](https://www.npmjs.com/package/@react-native-masked-view/masked-view)

`@react-native-masked-view/masked-view` provides a masked view that only displays the pixels that overlap with the view rendered in its mask element.

> You can only have one of either `@react-native-community/masked-view` (deprecated) or `@react-native-masked-view/masked-view` installed in your project at any given time. React Navigation v6 and above requires `@react-native-masked-view/masked-view`, so you should use that package instead if you are using the latest version of React Navigation.

> Android support for this library is experimental and you may encounter inconsistencies in behavior across platforms. Report issues you encounter to [`react-native-masked-view` GitHub repository](https://github.com/react-native-masked-view/masked-view).

## Installation

`npx expo install @react-native-masked-view/masked-view`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/react-native-masked-view/masked-view#getting-started) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/react-native-masked-view/masked-view)

---

# media-library

A library that provides access to the device's media library.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-media-library)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-media-library/CHANGELOG.md)[](https://www.npmjs.com/package/expo-media-library)

`expo-media-library` provides access to the user's media library, allowing them to access their existing images and videos from your app, as well as save new ones. You can also subscribe to any updates made to the user's media library.

> Android allows full access to the media library (which is the purpose of this package) only for applications needing broad access to photos. See [Details on Google Play's Photo and Video Permissions policy](https://support.google.com/googleplay/android-developer/answer/14115180).

## Installation

`npx expo install expo-media-library`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-media-library` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-media-library",
        {
          "photosPermission": "Allow $(PRODUCT_NAME) to access your photos.",
          "savePhotosPermission": "Allow $(PRODUCT_NAME) to save photos.",
          "isAccessMediaLocationEnabled": true
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Usage

```
import { useState, useEffect } from 'react';
import { Button, Text, SafeAreaView, ScrollView, StyleSheet, Image, View, Platform } from 'react-native';
import * as MediaLibrary from 'expo-media-library';

export default function App() {
  const [albums, setAlbums] = useState(null);
  const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();

  async function getAlbums() {
    if (permissionResponse.status !== 'granted') {
      await requestPermission();
    }
    const fetchedAlbums = await MediaLibrary.getAlbumsAsync({
      includeSmartAlbums: true,
    });
    setAlbums(fetchedAlbums);
  }

  return (
    <SafeAreaView style={styles.container}>
      <Button onPress={getAlbums} title="Get albums" />
      <ScrollView>
        {albums && albums.map((album) => <AlbumEntry album={album} />)}
      </ScrollView>
    </SafeAreaView>
  );
}

function AlbumEntry({ album }) {
  const [assets, setAssets] = useState([]);

  useEffect(() => {
    async function getAlbumAssets() {
      const albumAssets = await MediaLibrary.getAssetsAsync({ album });
      setAssets(albumAssets.assets);
    }
    getAlbumAssets();
  }, [album]);

  return (
    <View key={album.id} style={styles.albumContainer}>
      <Text>
        {album.title} - {album.assetCount ?? 'no'} assets
      </Text>
      <View style={styles.albumAssetsContainer}>
        {assets && assets.map((asset) => (
          <Image source={{ uri: asset.uri }} width={50} height={50} />
        ))}
      </View>
    </View>
  );
}

%%placeholder-start%%const styles = StyleSheet.create({ ... }); %%placeholder-end%%const styles = StyleSheet.create({
  container: {
    flex: 1,
    gap: 8,
    justifyContent: 'center',
    ...Platform.select({
      android: {
        paddingTop: 40,
      },
    }),
  },
  albumContainer: {
    paddingHorizontal: 20,
    marginBottom: 12,
    gap: 4,
  },
  albumAssetsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
});
```

## API

```
import * as MediaLibrary from 'expo-media-library';
```

## Component

### `getAlbumsAsync`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[AlbumsOptions](#albumsoptions)>`

Queries for user-created albums in media gallery.

## Constants

### `MediaLibrary.MediaType`

Type: `[MediaTypeObject](#mediatypeobject)`

Possible media types.

### `MediaLibrary.SortBy`

Type: `[SortByObject](#sortbyobject)`

Supported keys that can be used to sort `getAssetsAsync` results.

## Hooks

### `usePermissions(options)`

  

Check or request permissions to access the media library. This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [permissionResponse, requestPermission] = MediaLibrary.usePermissions();
```

## Methods

### `MediaLibrary.addAssetsToAlbumAsync(assets, album, copy)`

  

Adds array of assets to the album.

On Android, by default it copies assets from the current album to provided one, however it's also possible to move them by passing `false` as `copyAssets` argument. In case they're copied you should keep in mind that `getAssetsAsync` will return duplicated assets.

Returns promise which fulfils with `true` if the assets were successfully added to the album.

### `MediaLibrary.albumNeedsMigrationAsync(album)`

  

Checks if the album should be migrated to a different location. In other words, it checks if the application has the write permission to the album folder. If not, it returns `true`, otherwise `false`.

> Note: For Android below R, web or iOS, this function always returns `false`.

Returns a promise which fulfils with `true` if the album should be migrated.

### `MediaLibrary.createAlbumAsync(albumName, asset, copyAsset, initialAssetLocalUri)`

  

Creates an album with given name and initial asset. The asset parameter is required on Android, since it's not possible to create empty album on this platform. On Android, by default it copies given asset from the current album to the new one, however it's also possible to move it by passing `false` as `copyAsset` argument. In case it's copied you should keep in mind that `getAssetsAsync` will return duplicated asset.

> On Android, it's not possible to create an empty album. You must provide an existing asset to copy or move into the album or an uri of a local file, which will be used to create an initial asset for the album.

### `MediaLibrary.createAssetAsync(localUri, album)`

  

Creates an asset from existing file. The most common use case is to save a picture taken by [Camera](https://docs.expo.dev/versions/latest/sdk/camera). This method requires `CAMERA_ROLL` permission.

A promise which fulfils with an object representing an [`Asset`](#asset).

Example

```
const { uri } = await Camera.takePictureAsync();
const asset = await MediaLibrary.createAssetAsync(uri);
```

### `MediaLibrary.deleteAlbumsAsync(albums, assetRemove)`

  

Deletes given albums from the library. On Android by default it deletes assets belonging to given albums from the library. On iOS it doesn't delete these assets, however it's possible to do by passing `true` as `deleteAssets`.

Returns a promise which fulfils with `true` if the albums were successfully deleted from the library.

### `MediaLibrary.deleteAssetsAsync(assets)`

  

Deletes assets from the library. On iOS it deletes assets from all albums they belong to, while on Android it keeps all copies of them (album is strictly connected to the asset). Also, there is additional dialog on iOS that requires user to confirm this action.

Returns promise which fulfils with `true` if the assets were successfully deleted.

### `MediaLibrary.getAlbumAsync(title)`

  

Queries for an album with a specific name.

An object representing an [`Album`](#album), if album with given name exists, otherwise returns `null`.

### `MediaLibrary.getAssetInfoAsync(asset, options)`

  

Provides more information about an asset, including GPS location, local URI and EXIF metadata.

An [AssetInfo](#assetinfo) object, which is an `Asset` extended by an additional fields.

### `MediaLibrary.getAssetsAsync(assetsOptions)`

  

Fetches a page of assets matching the provided criteria.

A promise that fulfils with to [`PagedInfo`](#pagedinfo) object with array of [`Asset`](#asset)s.

### `MediaLibrary.getMomentsAsync()`

Fetches a list of moments, which is a group of assets taken around the same place and time.

An array of [albums](#album) whose type is `moment`.

### `MediaLibrary.getPermissionsAsync(writeOnly, granularPermissions)`

  

Checks user's permissions for accessing media library.

A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.

### `MediaLibrary.isAvailableAsync()`

Returns whether the Media Library API is enabled on the current device.

A promise which fulfils with a `boolean`, indicating whether the Media Library API is available on the current device.

### `MediaLibrary.migrateAlbumIfNeededAsync(album)`

  

Moves album content to the special media directories on Android R or above if needed. Those new locations are in line with the Android `scoped storage` - so your application won't lose write permission to those directories in the future.

This method does nothing if:

*   app is running on iOS, web or Android below R
*   app has write permission to the album folder

The migration is possible when the album contains only compatible files types. For instance, movies and pictures are compatible with each other, but music and pictures are not. If automatic migration isn't possible, the function rejects. In that case, you can use methods from the `expo-file-system` to migrate all your files manually.

#### Why do you need to migrate files?

Android R introduced a lot of changes in the storage system. Now applications can't save anything to the root directory. The only available locations are from the `MediaStore` API. Unfortunately, the media library stored albums in folders for which, because of those changes, the application doesn't have permissions anymore. However, it doesn't mean you need to migrate all your albums. If your application doesn't add assets to albums, you don't have to migrate. Everything will work as it used to. You can read more about scoped storage in [the Android documentation](https://developer.android.com/about/versions/11/privacy/storage).

A promise which fulfils to `void`.

### `MediaLibrary.presentPermissionsPickerAsync(mediaTypes)`

  

Allows the user to update the assets that your app has access to. The system modal is only displayed if the user originally allowed only `limited` access to their media library, otherwise this method is a no-op.

A promise that either rejects if the method is unavailable, or resolves to `void`.

> Note: This method doesn't inform you if the user changes which assets your app has access to. That information is only exposed by iOS, and to obtain it, you need to subscribe for updates to the user's media library using [`addListener()`](#medialibraryaddlistenerlistener). If `hasIncrementalChanges` is `false`, the user changed their permissions.

### `MediaLibrary.removeAssetsFromAlbumAsync(assets, album)`

  

Removes given assets from album.

On Android, album will be automatically deleted if there are no more assets inside.

Returns promise which fulfils with `true` if the assets were successfully removed from the album.

### `MediaLibrary.removeSubscription(subscription)`

  

### `MediaLibrary.requestPermissionsAsync(writeOnly, granularPermissions)`

  

Asks the user to grant permissions for accessing media in user's media library.

A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.

### `MediaLibrary.saveToLibraryAsync(localUri)`

  

Saves the file at given `localUri` to the user's media library. Unlike [`createAssetAsync()`](#medialibrarycreateassetasynclocaluri), This method doesn't return created asset. On iOS 11+, it's possible to use this method without asking for `CAMERA_ROLL` permission, however then yours `Info.plist` should have `NSPhotoLibraryAddUsageDescription` key.

## Event Subscriptions

### `MediaLibrary.addListener(listener)`

  

Subscribes for updates in user's media library.

An [`Subscription`](#subscription) object that you can call `remove()` on when you would like to unsubscribe the listener.

### `MediaLibrary.removeAllListeners()`

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `Album`

### `AlbumRef`

Literal Type: `union`

Acceptable values are: `[Album](#album)` | `string`

### `AlbumsOptions`

### `AlbumType`

Literal Type: `string`

Acceptable values are: `'album'` | `'moment'` | `'smartAlbum'`

### `Asset`

### `AssetInfo`

Type: `[Asset](https://docs.expo.dev/versions/latest/sdk/asset#asset)` extended by:

### `AssetRef`

Literal Type: `union`

Acceptable values are: `[Asset](https://docs.expo.dev/versions/latest/sdk/asset#asset)` | `string`

### `AssetsOptions`

### `EXPermissionResponse`

An object obtained by permissions get and request functions.

### `GranularPermission`

Literal Type: `string`

Determines the type of media that the app will ask the OS to get access to.

Acceptable values are: `'audio'` | `'photo'` | `'video'`

### `Location`

### `MediaLibraryAssetInfoQueryOptions`

### `MediaLibraryAssetsChangeEvent`

### `MediaSubtype`

Literal Type: `string`

Constants identifying specific variations of asset media, such as panorama or screenshot photos, and time-lapse or high-frame-rate video. Maps to [these values](https://developer.apple.com/documentation/photokit/phassetmediasubtype#1603888).

Acceptable values are: `'depthEffect'` | `'hdr'` | `'highFrameRate'` | `'livePhoto'` | `'panorama'` | `'screenshot'` | `'stream'` | `'timelapse'`

### `MediaTypeFilter`

Literal Type: `string`

Represents the possible types of media that the app will ask the OS to get access to when calling [`presentPermissionsPickerAsync()`](#medialibrarypresentpermissionspickerasyncmediatypes).

Acceptable values are: `'photo'` | `'video'`

### `MediaTypeObject`

### `MediaTypeValue`

Literal Type: `string`

Acceptable values are: `'audio'` | `'photo'` | `'video'` | `'unknown'` | `'pairedVideo'`

### `PagedInfo`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

Type: `[EXPermissionResponse](#expermissionresponse)` extended by:

### `SortByKey`

Literal Type: `string`

Acceptable values are: `'default'` | `'mediaType'` | `'width'` | `'height'` | `'creationTime'` | `'modificationTime'` | `'duration'`

### `SortByObject`

### `SortByValue`

Literal Type: `union`

Acceptable values are: `[[SortByKey](#sortbykey), boolean]` | `[SortByKey](#sortbykey)`

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

The following permissions are added automatically through this library's AndroidManifest.xml:

### iOS

The following usage description keys are used by this library:

---

# mesh-gradient

A module that exposes MeshGradient view from SwiftUI to React Native.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-mesh-gradient)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-mesh-gradient/CHANGELOG.md)[](https://www.npmjs.com/package/expo-mesh-gradient)

## Installation

`npx expo install expo-mesh-gradient`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import { MeshGradientView } from 'expo-mesh-gradient';

function App() {
  return (
    <MeshGradientView
      style={{ flex: 1 }}
      columns={3}
      rows={3}
      colors={['red', 'purple', 'indigo', 'orange', 'white', 'blue', 'yellow', 'green', 'cyan']}
      points={[
        [0.0, 0.0],
        [0.5, 0.0],
        [1.0, 0.0],
        [0.0, 0.5],
        [0.5, 0.5],
        [1.0, 0.5],
        [0.0, 1.0],
        [0.5, 1.0],
        [1.0, 1.0],
      ]}
    />
  );
}
```

## Component

### `MeshGradientView`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<ComponentType<[MeshGradientViewProps](#meshgradientviewprops)>>`

MeshGradientViewProps

### `colors`

OptionalâType:

`string[]`âDefault: `[]`

An array of colors. Must contain `columns * rows` elements.

### `columns`

OptionalâType:

`number`âDefault: `0`

Width of the mesh, i.e. the number of vertices per row.

### `ignoresSafeArea`

OptionalâType:

`boolean`âDefault: `true`

Whether to ignore safe areas when positioning the view.

### `mask`

OptionalâType:

`boolean`âDefault: `false`

Masks the gradient using the alpha channel of the given children views.

> Note: When this option is enabled, all user interactions (gestures) on children views are ignored.

### `points`

OptionalâType:

`number[][]`âDefault: `[]`

An array of two-dimensional points on the mesh. Must contain `columns * rows` elements.

### `rows`

OptionalâType:

`number`âDefault: `0`

Height of the mesh, i.e. the number of vertices per column.

### `smoothsColors`

OptionalâType:

`boolean`âDefault: `true`

Whether cubic (smooth) interpolation should be used for the colors in the mesh rather than only for the shape of the mesh.

#### Inherited Props

---

# navigation-bar

A library that provides access to various interactions with the native navigation bar on Android.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-navigation-bar)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-navigation-bar/CHANGELOG.md)[](https://www.npmjs.com/package/expo-navigation-bar)

`expo-navigation-bar` enables you to modify and observe the native navigation bar on Android devices. Due to some Android platform restrictions, parts of this API overlap with the `expo-status-bar` API.

Properties are named after style properties; visibility, position, backgroundColor, borderColor, and so on.

The APIs in this package have no impact when "Gesture Navigation" is enabled on the Android device. There is currently no native Android API to detect if "Gesture Navigation" is enabled or not.

## Installation

`npx expo install expo-navigation-bar`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import * as NavigationBar from 'expo-navigation-bar';
```

## Hooks

### `useVisibility()`

React hook that statefully updates with the visibility of the system navigation bar.

Visibility of the navigation bar, `null` during async initialization.

Example

```
function App() {
  const visibility = NavigationBar.useVisibility()
  // React Component...
}
```

## Methods

### `NavigationBar.getBackgroundColorAsync()`

Gets the navigation bar's background color.

> This method is supported only when edge-to-edge is disabled.

Current navigation bar color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).

Example

```
const color = await NavigationBar.getBackgroundColorAsync();
```

### `NavigationBar.getBehaviorAsync()`

Gets the behavior of the status and navigation bars when the user swipes or touches the screen.

> This method is supported only when edge-to-edge is disabled.

Navigation bar interaction behavior. Returns `inset-touch` on unsupported platforms (iOS, web).

Example

```
await NavigationBar.getBehaviorAsync()
```

### `NavigationBar.getBorderColorAsync()`

Gets the navigation bar's top border color, also known as the "divider color".

> This method is supported only when edge-to-edge is disabled.

Navigation bar top border color in hex format. Returns `#00000000` (transparent) on unsupported platforms (iOS, web).

Example

```
const color = await NavigationBar.getBorderColorAsync();
```

### `NavigationBar.getButtonStyleAsync()`

Gets the navigation bar's button color styles.

> This method is supported only when edge-to-edge is disabled.

Navigation bar foreground element color settings. Returns `light` on unsupported platforms (iOS, web).

Example

```
const style = await NavigationBar.getButtonStyleAsync();
```

### `NavigationBar.getVisibilityAsync()`

Get the navigation bar's visibility.

Navigation bar's current visibility status. Returns `hidden` on unsupported platforms (iOS, web).

Example

```
const visibility = await NavigationBar.getVisibilityAsync("hidden");
```

### `NavigationBar.setBackgroundColorAsync(color)`

  

Changes the navigation bar's background color.

> This method is supported only when edge-to-edge is disabled.

Example

```
NavigationBar.setBackgroundColorAsync("white");
```

### `NavigationBar.setBehaviorAsync(behavior)`

  

Sets the behavior of the status bar and navigation bar when they are hidden and the user wants to reveal them.

For example, if the navigation bar is hidden (`setVisibilityAsync(false)`) and the behavior is `'overlay-swipe'`, the user can swipe from the bottom of the screen to temporarily reveal the navigation bar.

*   `'overlay-swipe'`: Temporarily reveals the System UI after a swipe gesture (bottom or top) without insetting your App's content.
*   `'inset-swipe'`: Reveals the System UI after a swipe gesture (bottom or top) and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.
*   `'inset-touch'`: Reveals the System UI after a touch anywhere on the screen and insets your App's content (Safe Area). The System UI is visible until you explicitly hide it again.

> This method is supported only when edge-to-edge is disabled.

Example

```
await NavigationBar.setBehaviorAsync('overlay-swipe')
```

### `NavigationBar.setBorderColorAsync(color)`

  

Changes the navigation bar's border color.

> This method is supported only when edge-to-edge is disabled.

Example

```
NavigationBar.setBorderColorAsync("red");
```

### `NavigationBar.setButtonStyleAsync(style)`

  

Changes the navigation bar's button colors between white (`light`) and a dark gray color (`dark`).

Example

```
NavigationBar.setButtonStyleAsync("light");
```

### `NavigationBar.setPositionAsync(position)`

  

Sets positioning method used for the navigation bar (and status bar). Setting position `absolute` will float the navigation bar above the content, whereas position `relative` will shrink the screen to inline the navigation bar.

When drawing behind the status and navigation bars, ensure the safe area insets are adjusted accordingly.

> This method is supported only when edge-to-edge is disabled.

Example

```
// enables edge-to-edge mode
await NavigationBar.setPositionAsync('absolute')
// transparent backgrounds to see through
await NavigationBar.setBackgroundColorAsync('#ffffff00')
```

### `NavigationBar.setStyle(style)`

  

Sets the style of the navigation bar.

> This will have an effect when the following conditions are met:
> 
> *   Edge-to-edge is enabled
> *   The `enforceNavigationBarContrast` option of the `react-native-edge-to-edge` plugin is set to `false`.
> *   The device is using the three-button navigation bar.

> Due to a bug in the Android 15 emulator this function may have no effect. Try a physical device or an emulator with a different version of Android.

### `NavigationBar.setVisibilityAsync(visibility)`

  

Set the navigation bar's visibility.

Example

```
NavigationBar.setVisibilityAsync("hidden");
```

### `NavigationBar.unstable_getPositionAsync()`

Whether the navigation and status bars float above the app (absolute) or sit inline with it (relative). This value can be incorrect if `androidNavigationBar.visible` is used instead of the config plugin `position` property.

This method is unstable because the position can be set via another native module and get out of sync. Alternatively, you can get the position by measuring the insets returned by `react-native-safe-area-context`.

> This method is supported only when edge-to-edge is disabled.

Navigation bar positional rendering mode. Returns `relative` on unsupported platforms (iOS, web).

Example

```
await NavigationBar.unstable_getPositionAsync()
```

## Event Subscriptions

### `NavigationBar.addVisibilityListener(listener)`

  

Observe changes to the system navigation bar. Due to platform constraints, this callback will also be triggered when the status bar visibility changes.

Example

```
NavigationBar.addVisibilityListener(({ visibility }) => {
  // ...
});
```

## Types

### `NavigationBarBehavior`

Literal Type: `string`

Interaction behavior for the system navigation bar.

Acceptable values are: `'overlay-swipe'` | `'inset-swipe'` | `'inset-touch'`

### `NavigationBarButtonStyle`

Literal Type: `string`

Appearance of the foreground elements in the navigation bar, i.e. the color of the menu, back, home button icons.

*   `dark` makes buttons darker to adjust for a mostly light nav bar.
*   `light` makes buttons lighter to adjust for a mostly dark nav bar.

Acceptable values are: `'light'` | `'dark'`

### `NavigationBarPosition`

Literal Type: `string`

Navigation bar positional mode.

Acceptable values are: `'relative'` | `'absolute'`

### `NavigationBarStyle`

Literal Type: `string`

Navigation bar style.

*   `auto` will automatically adjust based on the current theme.
*   `light` a light navigation bar with dark content.
*   `dark` a dark navigation bar with light content.
*   `inverted` the bar colors are inverted in relation to the current theme.

Acceptable values are: `'auto'` | `'inverted'` | `'light'` | `'dark'`

### `NavigationBarVisibility`

Literal Type: `string`

Visibility of the navigation bar.

Acceptable values are: `'visible'` | `'hidden'`

### `NavigationBarVisibilityEvent`

Current system UI visibility state. Due to platform constraints, this will return when the status bar visibility changes as well as the navigation bar.

---

# netinfo

A cross-platform API that provides access to network information.

[](https://github.com/react-native-community/react-native-netinfo)[](https://www.npmjs.com/package/@react-native-community/netinfo)

`@react-native-community/netinfo` allows you to get information about connection type and connection quality.

## Installation

`npx expo install @react-native-community/netinfo`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/react-native-community/react-native-netinfo#getting-started) provided in the library's README or documentation.

## API

To import this library, use:

```
import NetInfo from '@react-native-community/netinfo';
```

If you want to grab information about the network connection just once, you can use:

```
NetInfo.fetch().then(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});
```

Or, if you'd rather subscribe to updates about the network state (which then allows you to run code/perform actions anytime the network state changes) use:

```
const unsubscribe = NetInfo.addEventListener(state => {
  console.log('Connection type', state.type);
  console.log('Is connected?', state.isConnected);
});

// To unsubscribe to these update, just use:
unsubscribe();
```

## Accessing the SSID

To access the `ssid` property (available under `state.details.ssid`), there are a few additional configuration steps:

### iOS only

*   Add the `com.apple.developer.networking.wifi-info` entitlement to your app.json under `ios.entitlements`:
```
"ios": {
        "entitlements": {
          "com.apple.developer.networking.wifi-info": true
        }
      }
```
*   Check the Access Wi-Fi Information box in your app's App Identifier, [which can be found here](https://developer.apple.com/account/resources/identifiers/list).
```

```
*   Rebuild your app with [`eas build --platform ios`](https://docs.expo.dev/build/setup#4-run-a-build) or [`npx expo run:ios`](https://docs.expo.dev/more/expo-cli#compiling).
```

```

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/react-native-netinfo/react-native-netinfo)

---

# network

## Expo Network

A library that provides access to the device's network such as its IP address, MAC address, and airplane mode status.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-network)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-network/CHANGELOG.md)[](https://www.npmjs.com/package/expo-network)

`expo-network` provides useful information about the device's network such as its IP address, MAC address, and airplane mode status.

## Installation

`npx expo install expo-network`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration

On Android, this module requires permissions to access the network and Wi-Fi state. The permissions `ACCESS_NETWORK_STATE` and `ACCESS_WIFI_STATE` are added automatically.

## API

```
import * as Network from 'expo-network';
```

## Hooks

### `useNetworkState()`

Returns the current network state of the device. This method initiates a listener for network state changes and cleans up before unmounting.

The current network state of the device, including connectivity and type.

Example

```
const networkState = useNetworkState();
console.log(`Current network type: ${networkState.type}`);
```

## Methods

### `Network.getIpAddressAsync()`

Gets the device's current IPv4 address. Returns `0.0.0.0` if the IP address could not be retrieved.

On web, this method uses the third-party [`ipify service`](https://www.ipify.org/) to get the public IP address of the current device.

A `Promise` that fulfils with a `string` of the current IP address of the device's main network interface. Can only be IPv4 address.

Example

```
await Network.getIpAddressAsync();
// "92.168.32.44"
```

### `Network.getNetworkStateAsync()`

Gets the device's current network connection state.

On web, `navigator.connection.type` is not available on browsers. So if there is an active network connection, the field `type` returns `NetworkStateType.UNKNOWN`. Otherwise, it returns `NetworkStateType.NONE`.

A `Promise` that fulfils with a `NetworkState` object.

Example

```
await Network.getNetworkStateAsync();
// {
//   type: NetworkStateType.CELLULAR,
//   isConnected: true,
//   isInternetReachable: true,
// }
```

### `Network.isAirplaneModeEnabledAsync()`

Tells if the device is in airplane mode.

Returns a `Promise` that fulfils with a `boolean` value for whether the device is in airplane mode or not.

Example

```
await Network.isAirplaneModeEnabledAsync();
// false
```

## Event Subscriptions

### `Network.addNetworkStateListener(listener)`

| Parameter | Type | Description |
| --- | --- | --- |
| listener | `(event: [NetworkState](#networkstate)) => void` | 
Callback to execute when the network state changes. The callback is provided with a single argument that is an object containing information about the network state.

 |

  

Adds a listener that will fire whenever the network state changes.

A subscription object with a remove function to unregister the listener.

Example

```
const subscription = addNetworkStateListener(({ type, isConnected, isInternetReachable }) => {
  console.log(`Network type: ${type}, Connected: ${isConnected}, Internet Reachable: ${isInternetReachable}`);
});
```

## Types

### `NetworkState`

| Property | Type | Description |
| --- | --- | --- |
| isConnected(optional) | `boolean` | 
If there is an active network connection. Note that this does not mean that internet is reachable. This field is `false` if the type is either `Network.NetworkStateType.NONE` or `Network.NetworkStateType.UNKNOWN`, `true` otherwise.

 |
| isInternetReachable(optional) | `boolean` | 

If the internet is reachable with the currently active network connection. On Android, this depends on `NetInfo.isConnected()` (API level < 29) or `ConnectivityManager.getActiveNetwork()` (API level >= 29). On iOS, this value will always be the same as `isConnected`.

 |
| type(optional) | `[NetworkStateType](#networkstatetype)` | 

A [`NetworkStateType`](#networkstatetype) enum value that represents the current network connection type.

 |

### `NetworkStateEvent`

Type: `[NetworkState](#networkstate)`

Represents an event that provides the updated network state when there is a change in the network status. This is passed as the argument to listeners registered with [`addNetworkStateListener()`](#networkaddnetworkstatelistenerlistener).

## Enums

### `NetworkStateType`

An enum of the different types of devices supported by Expo.

#### `BLUETOOTH`

`NetworkStateType.BLUETOOTH ï¼ "BLUETOOTH"`

Active network connection over Bluetooth.

#### `CELLULAR`

`NetworkStateType.CELLULAR ï¼ "CELLULAR"`

Active network connection over mobile data or [`DUN-specific`](https://developer.android.com/reference/android/net/ConnectivityManager#TYPE_MOBILE_DUN) mobile connection when setting an upstream connection for tethering.

#### `ETHERNET`

`NetworkStateType.ETHERNET ï¼ "ETHERNET"`

Active network connection over Ethernet.

#### `NONE`

`NetworkStateType.NONE ï¼ "NONE"`

No active network connection detected.

#### `OTHER`

`NetworkStateType.OTHER ï¼ "OTHER"`

Active network connection over other network connection types.

#### `UNKNOWN`

`NetworkStateType.UNKNOWN ï¼ "UNKNOWN"`

The connection type could not be determined.

#### `VPN`

`NetworkStateType.VPN ï¼ "VPN"`

Active network connection over VPN.

#### `WIFI`

`NetworkStateType.WIFI ï¼ "WIFI"`

Active network connection over Wi-Fi.

#### `WIMAX`

`NetworkStateType.WIMAX ï¼ "WIMAX"`

Active network connection over WiMAX.

## Error codes

| Code | Description |
| --- | --- |
| ERR\_NETWORK\_IP\_ADDRESS | On Android, there may be an unknown Wi-Fi host when trying to access `WifiManager` in `getIpAddressAsync`. On iOS, no network interfaces could be retrieved. |
| ERR\_NETWORK\_UNDEFINED\_INTERFACE | An undefined `interfaceName` was passed as an argument in `getMacAddressAsync`. |
| ERR\_NETWORK\_SOCKET\_EXCEPTION | An error was encountered in creating or accessing the socket in `getMacAddressAsync`. |
| ERR\_NETWORK\_INVALID\_PERMISSION\_INTERNET | There are invalid permissions for [`android.permission.ACCESS_WIFI_STATE`](https://developer.android.com/reference/android/Manifest.permission#ACCESS_WIFI_STATE) in `getMacAddressAsync`. |
| ERR\_NETWORK\_NO\_ACCESS\_NETWORKINFO | Unable to access network information |

---

# notifications

A library that provides an API to fetch push notification tokens and to present, schedule, receive and respond to notifications.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-notifications)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-notifications/CHANGELOG.md)[](https://www.npmjs.com/package/expo-notifications)

`expo-notifications` provides an API to fetch push notification tokens and to present, schedule, receive and respond to notifications.

[

Notification guides

Do not miss our guides on how to set up, send, and handle push notifications.

](https://docs.expo.dev/push-notifications/overview)

> Push notifications (remote notifications) functionality provided by `expo-notifications` is unavailable in Expo Go on Android from SDK 53. A [development build](https://docs.expo.dev/develop/development-builds/introduction) is required to use push notifications. Local notifications (in-app notifications) remain available in Expo Go.

## Features

*   Schedule a one-off notification for a specific date or some time from now
*   Schedule a notification repeating in some time interval (or a calendar date match on iOS)
*   Get and set the application badge icon number
*   Obtain a native device push token, so you can send push notifications with FCM (for Android) and APNs (for iOS)
*   Obtain an Expo push token, so you can send push notifications with [Expo Push Service](https://docs.expo.dev/push-notifications/sending-notifications)
*   Listen to incoming notifications in the foreground and background
*   Listen to interactions with notifications
*   Handle notifications when the app is in the foreground
*   Imperatively dismiss notifications from Notification Center/tray
*   Create, update, and delete [Android notification channels](https://developer.android.com/develop/ui/views/notifications/channels)
*   Set custom icon and color for notifications on Android

## Installation

`npx expo install expo-notifications`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

Then proceed to [configuration](https://docs.expo.dev/versions/latest/sdk/notifications#configuration) to set up the [config plugin](https://docs.expo.dev/versions/latest/sdk/notifications#app-config) and obtain the [credentials](https://docs.expo.dev/versions/latest/sdk/notifications#credentials) for push notifications.

## Usage

Check out the example Snack below to see Notifications in action, make sure to use a physical device to test it. Push notifications don't work on emulators/simulators.

```
import { useState, useEffect, useRef } from 'react';
import { Text, View, Button, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldPlaySound: false,
    shouldSetBadge: false,
    shouldShowBanner: true,
    shouldShowList: true,
  }),
});

export default function App() {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [channels, setChannels] = useState<Notifications.NotificationChannel[]>([]);
  const [notification, setNotification] = useState<Notifications.Notification | undefined>(
    undefined
  );

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => token && setExpoPushToken(token));

    if (Platform.OS === 'android') {
      Notifications.getNotificationChannelsAsync().then(value => setChannels(value ?? []));
    }
    const notificationListener = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    const responseListener = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      notificationListener.remove();
      responseListener.remove();
    };
  }, []);

  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'space-around',
      }}>
      <Text>Your expo push token: {expoPushToken}</Text>
      <Text>{`Channels: ${JSON.stringify(
        channels.map(c => c.id),
        null,
        2
      )}`}</Text>
      <View style={{ alignItems: 'center', justifyContent: 'center' }}>
        <Text>Title: {notification && notification.request.content.title} </Text>
        <Text>Body: {notification && notification.request.content.body}</Text>
        <Text>Data: {notification && JSON.stringify(notification.request.content.data)}</Text>
      </View>
      <Button
        title="Press to schedule a notification"
        onPress={async () => {
          await schedulePushNotification();
        }}
      />
    </View>
  );
}

async function schedulePushNotification() {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: "You've got mail! ð¬",
      body: 'Here is the notification body',
      data: { data: 'goes here', test: { test1: 'more data' } },
    },
    trigger: {
      type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
      seconds: 2,
    },
  });
}

async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('myNotificationChannel', {
      name: 'A channel is needed for the permissions prompt to appear',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    // Learn more about projectId:
    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid
    // EAS projectId is used here.
    try {
      const projectId =
        Constants?.expoConfig?.extra?.eas?.projectId ?? Constants?.easConfig?.projectId;
      if (!projectId) {
        throw new Error('Project ID not found');
      }
      token = (
        await Notifications.getExpoPushTokenAsync({
          projectId,
        })
      ).data;
      console.log(token);
    } catch (e) {
      token = `${e}`;
    }
  } else {
    alert('Must use physical device for Push Notifications');
  }

  return token;
}
```

### Present a local (in-app) notification to the user

```
import * as Notifications from 'expo-notifications';

// First, set the handler that will cause the notification
// to show the alert
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowBanner: true,
    shouldShowList: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

// Second, call scheduleNotificationAsync()
Notifications.scheduleNotificationAsync({
  content: {
    title: 'Look at that notification',
    body: "I'm so proud of myself!",
  },
  trigger: null,
});
```

### Handle push notifications with navigation

If you'd like to deep link to a specific screen in your app when you receive a push notification, you can configure either of Expo's navigation systems to do that.

You can use Expo Router's [built-in deep linking](https://docs.expo.dev/router/basics/core-concepts#2-all-pages-have-a-url) to handle incoming URLs from push notifications. Simply configure the root layout to listen for incoming and initial notification events.

```
import { useEffect } from 'react';
import * as Notifications from 'expo-notifications';
import { router } from 'expo-router';

function useNotificationObserver() {
  useEffect(() => {
    let isMounted = true;

    function redirect(notification: Notifications.Notification) {
      const url = notification.request.content.data?.url;
      if (url) {
        router.push(url);
      }
    }

    Notifications.getLastNotificationResponseAsync()
      .then(response => {
        if (!isMounted || !response?.notification) {
          return;
        }
        redirect(response?.notification);
      });

    const subscription = Notifications.addNotificationResponseReceivedListener(response => {
      redirect(response.notification);
    });

    return () => {
      isMounted = false;
      subscription.remove();
    };
  }, []);
}

export default function Layout() {
  useNotificationObserver();

  return <Slot />;
}
```

React Navigation's manual [linking configuration](https://reactnavigation.org/docs/navigation-container#linking) can be configured to handle incoming redirects from push notifications:

```
import React from 'react';
import { Linking } from 'react-native';
import * as Notifications from 'expo-notifications';
import { NavigationContainer } from '@react-navigation/native';

export default function App() {
  return (
    <NavigationContainer
      linking={{
        config: {
          // Configuration for linking
        },
        async getInitialURL() {
          // First, you may want to do the default deep link handling
          // Check if app was opened from a deep link
          const url = await Linking.getInitialURL();

          if (url != null) {
            return url;
          }

          // Handle URL from expo push notifications
          const response = await Notifications.getLastNotificationResponseAsync();

          return response?.notification.request.content.data.url;
        },
        subscribe(listener) {
          const onReceiveURL = ({ url }: { url: string }) => listener(url);

          // Listen to incoming links from deep linking
          const eventListenerSubscription = Linking.addEventListener('url', onReceiveURL);

          // Listen to expo push notifications
          const subscription = Notifications.addNotificationResponseReceivedListener(response => {
            const url = response.notification.request.content.data.url;

            // Any custom logic to see whether the URL needs to be handled
            //...

            // Let React Navigation handle the URL
            listener(url);
          });

          return () => {
            // Clean up the event listeners
            eventListenerSubscription.remove();
            subscription.remove();
          };
        },
      }}>
      {/* Your app content */}
    </NavigationContainer>
  );
}
```

See more details on [React Navigation documentation](https://reactnavigation.org/docs/deep-linking/#third-party-integrations).

## Configuration

### Credentials

Follow the [setup guide](https://docs.expo.dev/push-notifications/push-notifications-setup#get-credentials-for-development-builds).

### App config

To configure `expo-notifications`, use the built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) in the app config (app.json or app.config.js) for [EAS Build](https://docs.expo.dev/build/introduction) or with `npx expo run:[android|ios]`. The plugin allows you to configure the following properties that cannot be set at runtime and require building a new app binary to take effect:

### Configurable properties

Here is an example of using the config plugin in the app config file:

```
{
  "expo": {
    "plugins": [
      [
        "expo-notifications",
        {
          "icon": "./local/assets/notification_icon.png",
          "color": "#ffffff",
          "defaultChannel": "default",
          "sounds": [
            "./local/assets/notification_sound.wav",
            "./local/assets/notification_sound_other.wav"
          ],
          "enableBackgroundRemoteNotifications": false
        }
      ]
    ]
  }
}
```

> The iOS APNs entitlement is _always_ set to 'development'. Xcode automatically changes this to 'production' in the archive generated by a release build. [Learn more](https://stackoverflow.com/a/42293632/4047926).

Are you using this library in an existing React Native app?

## Permissions

### Android

*   On Android, this module requires permission to subscribe to the device boot. It's used to set up scheduled notifications when the device (re)starts. The `RECEIVE_BOOT_COMPLETED` permission is added automatically through the library's AndroidManifest.xml.
```

```
*   Starting from Android 12 (API level 31), to schedule a notification that triggers at an exact time, you need to add `<uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM"/>` to AndroidManifest.xml. Read more about the [exact alarm permission](https://developer.android.com/about/versions/12/behavior-changes-12#exact-alarm-permission).
```

```
*   On Android 13, app users must opt-in to receive notifications via a permissions prompt automatically triggered by the operating system. This prompt will not appear until at least one notification channel is created. The `setNotificationChannelAsync` must be called before `getDevicePushTokenAsync` or `getExpoPushTokenAsync` to obtain a push token. You can read more about the new notification permission behavior for Android 13 in the [official documentation](https://developer.android.com/develop/ui/views/notifications/notification-permission#new-apps).
```

```

### iOS

No usage description is required, see [notification-related permissions](https://docs.expo.dev/versions/latest/sdk/notifications#fetch-information-about-notifications-related-permissions).

### Interpret the iOS permissions response

On iOS, permissions for sending notifications are a little more granular than they are on Android. This is why you should rely on the `NotificationPermissionsStatus`'s `ios.status` field, instead of the root `status` field.

This value will be one of the following, accessible under `Notifications.IosAuthorizationStatus`:

*   `NOT_DETERMINED`: The user hasn't yet made a choice about whether the app is allowed to schedule notifications
*   `DENIED`: The app isn't authorized to schedule or receive notifications
*   `AUTHORIZED`: The app is authorized to schedule or receive notifications
*   `PROVISIONAL`: The app is provisionally authorized to post noninterruptive user notifications
*   `EPHEMERAL`: The app is authorized to schedule or receive notifications for a limited amount of time

## Notification events listeners

Notification events include incoming notifications, interactions your users perform with notifications (this can be tapping on a notification, or interacting with it via [notification categories](https://docs.expo.dev/versions/latest/sdk/notifications#manage-notification-categories-interactive-notifications)), and rare occasions when your notifications may be dropped.

Several listeners are exposed and documented in the [Push notification behaviors](https://docs.expo.dev/push-notifications/what-you-need-to-know#push-notification-behaviors) section.

## Headless (Background) notifications

See the [definition](https://docs.expo.dev/push-notifications/what-you-need-to-know#headless-background-notifications) of Headless Background Notifications in the [What you need to know](https://docs.expo.dev/push-notifications/what-you-need-to-know) guide.

To handle notifications while the app is in the background or not running, you need to do the following:

*   Add `expo-task-manager` package to your project.
*   [Configure background notifications](https://docs.expo.dev/versions/latest/sdk/notifications#background-notification-configuration).
*   In your application code, set up a [background task](https://docs.expo.dev/versions/latest/sdk/notifications#registertaskasynctaskname) to run when the notification is received.

Then send a push notification which:

*   Contains only the `data` key (no `title`, `body`)
*   Has `_contentAvailable: true` set for iOS â see the [Expo push notification service payload format](https://docs.expo.dev/push-notifications/sending-notifications#message-request-format)

### Background notification configurationâ

To be able to use background push notifications on iOS, the `remote-notification` value needs to be present in the `UIBackgroundModes` array in your app's Info.plist file.

If you're using [CNG](https://docs.expo.dev/workflow/continuous-native-generation), set the [`enableBackgroundRemoteNotifications` property](https://docs.expo.dev/versions/latest/sdk/notifications#configurable-properties) of the config plugin to true, and the correct configuration will be applied automatically by prebuild.

Configure UIBackgroundModes manually on iOS

## Additional information

### Set custom notification sounds

To add custom push notification sounds to your app, add the `expo-notifications` plugin to your app.json file and then under the `sounds` key, provide an array of local paths to sound files that can be used as custom notification sounds. These local paths are local to your project.

```
{
  "expo": {
    "plugins": [
      [
        "expo-notifications",
        {
          "sounds": ["local/path/to/mySoundFile.wav"]
        }
      ]
    ]
  }
}
```

After building your app, the array of files will be available for use in both [`NotificationContentInput`](https://docs.expo.dev/versions/latest/sdk/notifications#notificationcontentinput) and [`NotificationChannelInput`](https://docs.expo.dev/versions/latest/sdk/notifications#notificationchannelinput). You only need to provide the base filename. Here's an example using the config above:

```
await Notifications.setNotificationChannelAsync('new_emails', {
  name: 'E-mail notifications',
  importance: Notifications.AndroidImportance.HIGH,
  sound: 'mySoundFile.wav', // Provide ONLY the base filename
});

await Notifications.scheduleNotificationAsync({
  content: {
    title: "You've got mail! ð¬",
    sound: 'mySoundFile.wav', // Provide ONLY the base filename
  },
  trigger: {
    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
    seconds: 2,
    channelId: 'new_emails',
  },
});
```

You can also manually add notification files to your Android and iOS projects if you prefer:

Manually adding notification sounds on Android Manually adding notification sounds on iOS

### Push notification payload specification

See [Message request format](https://docs.expo.dev/push-notifications/sending-notifications#message-request-format).

### Manage notification categories for interactive notifications

Notification categories allow you to create interactive push notifications, so that a user can respond directly to the incoming notification either via buttons or a text response. A category defines the set of actions a user can take, and then those actions are applied to a notification by specifying the `categoryIdentifier` in the [`NotificationContent`](https://docs.expo.dev/versions/latest/sdk/notifications#notificationcontent).

On iOS, notification categories also allow you to customize your notifications further. With each category, not only can you set interactive actions a user can take, but you can also configure things like the placeholder text to display when the user disables notification previews for your app.

## Platform-specific guides

### Handling notification channelsâ

Starting in Android 8.0 (API level 26), all notifications must be assigned to a channel. For each channel, you can set the visual and auditory behavior that is applied to all notifications in that channel. Then, users can change these settings and decide which notification channels from your app should be intrusive or visible at all, as [Android developer docs](https://developer.android.com/training/notify-user/channels) states.

If you do not specify a notification channel, `expo-notifications` will create a fallback channel for you, named Miscellaneous. We encourage you to always ensure appropriate channels with informative names are set up for the application and to always send notifications to these channels.

> Calling these methods is a no-op for platforms that do not support this feature (Android below version 8.0 (26) and iOS).

### Custom notification icon and colorsâ

You can configure the [`notification.icon`](https://docs.expo.dev/versions/latest/config/app#notification) and [`notification.color`](https://docs.expo.dev/versions/latest/config/app#notification) keys in the project's app.json if you are using [Expo Prebuild](https://docs.expo.dev/workflow/prebuild) or by using the [`expo-notifications` config plugin directly](https://docs.expo.dev/versions/latest/sdk/notifications#configurable-properties). These are build-time settings, so you'll need to recompile your native Android app with `eas build -p android` or `npx expo run:android` to see the changes.

For your notification icon, make sure you follow [Google's design guidelines](https://material.io/design/iconography/product-icons.html#design-principles) (the icon must be all white with a transparent background) or else it may not be displayed as intended.

You can also set a custom notification color per-notification directly in your [`NotificationContentInput`](https://docs.expo.dev/versions/latest/sdk/notifications#notificationcontentinput) under the `color` attribute.

## API

```
import * as Notifications from 'expo-notifications';
```

## Fetch tokens for push notifications

### `addPushTokenListener(listener)`

  

In rare situations, a push token may be changed by the push notification service while the app is running. When a token is rolled, the old one becomes invalid and sending notifications to it will fail. A push token listener will let you handle this situation gracefully by registering the new token with your backend right away.

An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.

Example

```
import React from 'react';
import * as Notifications from 'expo-notifications';

import { registerDevicePushTokenAsync } from '../api';

export default function App() {
  React.useEffect(() => {
    const subscription = Notifications.addPushTokenListener(registerDevicePushTokenAsync);
    return () => subscription.remove();
  }, []);

  return (
    // Your app content
  );
}
```

### `getDevicePushTokenAsync()`

Returns a native FCM, APNs token or a [`PushSubscription` data](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription) that can be used with another push notification service.

### `getExpoPushTokenAsync(options)`

  

Returns an Expo token that can be used to send a push notification to the device using Expo's push notifications service.

This method makes requests to the Expo's servers. It can get rejected in cases where the request itself fails (for example, due to the device being offline, experiencing a network timeout, or other HTTPS request failures). To provide offline support to your users, you should `try/catch` this method and implement retry logic to attempt to get the push token later, once the device is back online.

> For Expo's backend to be able to send notifications to your app, you will need to provide it with push notification keys. For more information, see [credentials](https://docs.expo.dev/push-notifications/push-notifications-setup#get-credentials-for-development-builds) in the push notifications setup.

Returns a `Promise` that resolves to an object representing acquired push token.

Example

```
import * as Notifications from 'expo-notifications';

export async function registerForPushNotificationsAsync(userId: string) {
  const expoPushToken = await Notifications.getExpoPushTokenAsync({
   projectId: 'your-project-id',
  });

  await fetch('https://example.com/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      userId,
      expoPushToken,
    }),
  });
}
```

> Deprecated call `remove()` on the subscription object instead.
> 
> Removes a push token subscription returned by an `addPushTokenListener` call.

### `removePushTokenSubscription(subscription)`

  

## Listen to notification events

### `addNotificationReceivedListener(listener)`

  

Listeners registered by this method will be called whenever a notification is received while the app is running.

An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.

Example

```
import React from 'react';
import * as Notifications from 'expo-notifications';

export default function App() {
  React.useEffect(() => {
    const subscription = Notifications.addNotificationReceivedListener(notification => {
      console.log(notification);
    });
    return () => subscription.remove();
  }, []);

  return (
    // Your app content
  );
}
```

### `addNotificationResponseReceivedListener(listener)`

  

Listeners registered by this method will be called whenever a user interacts with a notification (for example, taps on it).

An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.

Example

```
import React from 'react';
import { Linking } from 'react-native';
import * as Notifications from 'expo-notifications';

export default function Container() {
  React.useEffect(() => {
    const subscription = Notifications.addNotificationResponseReceivedListener(response => {
      const url = response.notification.request.content.data.url;
      Linking.openURL(url);
    });
    return () => subscription.remove();
  }, []);

  return (
    // Your app content
  );
}
```

### `addNotificationsDroppedListener(listener)`

  

Listeners registered by this method will be called whenever some notifications have been dropped by the server. Applicable only to Firebase Cloud Messaging which we use as a notifications service on Android. It corresponds to `onDeletedMessages()` callback. More information can be found in [Firebase docs](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages).

An [`EventSubscription`](#eventsubscription) object represents the subscription of the provided listener.

> Deprecated call `remove()` on the subscription object instead.
> 
> Removes a notification subscription returned by an `addNotificationListener` call.

### `removeNotificationSubscription(subscription)`

  

### `useLastNotificationResponse()`

A React hook which returns the notification response that was received most recently (a notification response designates an interaction with a notification, such as tapping on it).

To clear the last notification response, use [`clearLastNotificationResponseAsync()`](#notificationsclearlastnotificationresponseasync).

> If you don't want to use a hook, you can use `Notifications.getLastNotificationResponseAsync()` instead.

The hook may return one of these three types/values:

*   `undefined` - until we're sure of what to return,
*   `null` - if no notification response has been received yet,
*   a [`NotificationResponse`](#notificationresponse) object - if a notification response was received.

Example

Responding to a notification tap by opening a URL that could be put into the notification's `data` (opening the URL is your responsibility and is not a part of the `expo-notifications` API):

```
import * as Notifications from 'expo-notifications';
import { Linking } from 'react-native';

export default function App() {
  const lastNotificationResponse = Notifications.useLastNotificationResponse();
  React.useEffect(() => {
    if (
      lastNotificationResponse &&
      lastNotificationResponse.notification.request.content.data.url &&
      lastNotificationResponse.actionIdentifier === Notifications.DEFAULT_ACTION_IDENTIFIER
    ) {
      Linking.openURL(lastNotificationResponse.notification.request.content.data.url);
    }
  }, [lastNotificationResponse]);
  return (
    // Your app content
  );
}
```

## Present incoming notifications when the app is running

### `setNotificationHandler(handler)`

  

When a notification is received while the app is running, using this function you can set a callback that will decide whether the notification should be shown to the user or not.

When a notification is received, `handleNotification` is called with the incoming notification as an argument. The function should respond with a behavior object within 3 seconds, otherwise, the notification will be discarded. If the notification is handled successfully, `handleSuccess` is called with the identifier of the notification, otherwise (or on timeout) `handleError` will be called.

The default behavior when the handler is not set or does not respond in time is not to show the notification.

Example

```
import * as Notifications from 'expo-notifications';

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowBanner: true,
    shouldShowList: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});
```

## Run JavaScript in response to incoming notifications

### `registerTaskAsync(taskName)`

  

Call `registerTaskAsync` to set a callback (task) that runs when a notification is received while the app is in foreground, background, or terminated. Only on Android, the task also runs in response to a notification action press when the app is backgrounded or terminated. When the app is terminated, only a [Headless Background Notification](https://docs.expo.dev/push-notifications/what-you-need-to-know#headless-background-notifications) triggers the task execution. However, the OS may decide not to deliver the notification to your app in some cases (e.g. when the device is in Doze mode on Android, or when you send too many notifications - Apple recommends to not ["send more than two or three per hour"](https://developer.apple.com/documentation/usernotifications/pushing-background-updates-to-your-app#overview)).

Under the hood, this function is run using `expo-task-manager`. You must define the task first, with [`TaskManager.defineTask`](https://docs.expo.dev/versions/latest/sdk/task-manager#taskmanagerdefinetasktaskname-taskexecutor) and register it with `registerTaskAsync`.

Make sure you define and register the task in the module scope of a JS module which is required early by your app (e.g. in the `index.js` file). `expo-task-manager` loads your app's JS bundle in the background and executes the task, as well as any side effects which may happen as a consequence of requiring any JS modules.

The callback function you define with `TaskManager.defineTask` receives an object with the following fields:

*   `data`: The remote payload delivered by either FCM (Android) or APNs (iOS). See [`NotificationTaskPayload`](#notificationtaskpayload) for details.
*   `error`: The error (if any) that occurred during execution of the task.
*   `executionInfo`: JSON object of additional info related to the task, including the `taskName`.

Example

```
import * as TaskManager from 'expo-task-manager';
import * as Notifications from 'expo-notifications';

const BACKGROUND_NOTIFICATION_TASK = 'BACKGROUND-NOTIFICATION-TASK';

defineTask<Notifications.NotificationTaskPayload>(BACKGROUND_NOTIFICATION_TASK, ({ data, error, executionInfo }) => {
  console.log('Received a notification task payload!');
  const isNotificationResponse = 'actionIdentifier' in taskPayload;
  if (isNotificationResponse) {
    // Do something with the notification response from user
  } else {
    // Do something with the data from notification that was received
  }
});

Notifications.registerTaskAsync(BACKGROUND_NOTIFICATION_TASK);
```

### `unregisterTaskAsync(taskName)`

  

Used to unregister tasks registered with `registerTaskAsync` method.

## Fetch information about notifications-related permissions

### `getPermissionsAsync()`

Calling this function checks current permissions settings related to notifications. It lets you verify whether the app is currently allowed to display alerts, play sounds, etc. There is no user-facing effect of calling this.

It returns a `Promise` resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)). On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).

Example

```
import * as Notifications from 'expo-notifications';

export async function allowsNotificationsAsync() {
  const settings = await Notifications.getPermissionsAsync();
  return (
    settings.granted || settings.ios?.status === Notifications.IosAuthorizationStatus.PROVISIONAL
  );
}
```

### `requestPermissionsAsync(permissions)`

  

Prompts the user for notification permissions according to request. Request defaults to asking the user to allow displaying alerts, setting badge count and playing sounds.

It returns a Promise resolving to an object represents permission settings ([`NotificationPermissionsStatus`](#notificationpermissionsstatus)). On iOS, make sure you [properly interpret the permissions response](#interpret-the-ios-permissions-response).

Example

```
import * as Notifications from 'expo-notifications';

export function requestPermissionsAsync() {
  return Notifications.requestPermissionsAsync({
    ios: {
      allowAlert: true,
      allowBadge: true,
      allowSound: true,
    },
  });
}
```

## Manage application badge icon

### `getBadgeCountAsync()`

Fetches the number currently set as the badge of the app icon on device's home screen. A `0` value means that the badge is not displayed.

> Note: Not all Android launchers support application badges. If the launcher does not support icon badges, the method will always resolve to `0`.

Returns a Promise resolving to a number that represents the current badge of the app icon.

### `setBadgeCountAsync(badgeCount, options)`

  

Sets the badge of the app's icon to the specified number. Setting it to `0` clears the badge. On iOS, this method requires that you have requested the user's permission for `allowBadge` via [`requestPermissionsAsync`](#requestpermissionsasyncpermissions), otherwise it will automatically return `false`.

> Note: Not all Android launchers support application badges. If the launcher does not support icon badges, the method will resolve to `false`.

It returns a Promise resolving to a boolean representing whether the setting of the badge succeeded.

## Schedule notifications

### `cancelAllScheduledNotificationsAsync()`

Cancels all scheduled notifications.

A Promise that resolves once all the scheduled notifications are successfully canceled, or if there are no scheduled notifications.

### `cancelScheduledNotificationAsync(identifier)`

  

Cancels a single scheduled notification. The scheduled notification of given ID will not trigger.

A Promise resolves once the scheduled notification is successfully canceled or if there is no scheduled notification for a given identifier.

Example

```
import * as Notifications from 'expo-notifications';

async function scheduleAndCancel() {
  const identifier = await Notifications.scheduleNotificationAsync({
    content: {
      title: 'Hey!',
    },
    trigger: { seconds: 60, repeats: true },
  });
  await Notifications.cancelScheduledNotificationAsync(identifier);
}
```

### `getAllScheduledNotificationsAsync()`

Fetches information about all scheduled notifications.

Returns a Promise resolving to an array of objects conforming to the [`Notification`](#notification) interface.

### `getNextTriggerDateAsync(trigger)`

  

Allows you to check what will be the next trigger date for given notification trigger input.

If the return value is `null`, the notification won't be triggered. Otherwise, the return value is the Unix timestamp in milliseconds at which the notification will be triggered.

Example

```
import * as Notifications from 'expo-notifications';

async function logNextTriggerDate() {
  try {
    const nextTriggerDate = await Notifications.getNextTriggerDateAsync({
      hour: 9,
      minute: 0,
    });
    console.log(nextTriggerDate === null ? 'No next trigger date' : new Date(nextTriggerDate));
  } catch (e) {
    console.warn(`Couldn't have calculated next trigger date: ${e}`);
  }
}
```

### `scheduleNotificationAsync(request)`

  

Schedules a notification to be triggered in the future.

> Note: This does not mean that the notification will be presented when it is triggered. For the notification to be presented you have to set a notification handler with [`setNotificationHandler`](#setnotificationhandlerhandler) that will return an appropriate notification behavior. For more information see the example below.

Returns a Promise resolving to a string which is a notification identifier you can later use to cancel the notification or to identify an incoming notification.

Example

#### Schedule the notification that will trigger once, in one minute from now

```
import * as Notifications from 'expo-notifications';

Notifications.scheduleNotificationAsync({
  content: {
    title: "Time's up!",
    body: 'Change sides!',
  },
  trigger: {
    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
    seconds: 60,
  },
});
```

#### Schedule the notification that will trigger repeatedly, every 20 minutes

```
import * as Notifications from 'expo-notifications';

Notifications.scheduleNotificationAsync({
  content: {
    title: 'Remember to drink water!',
  },
  trigger: {
    type: Notifications.SchedulableTriggerInputTypes.TIME_INTERVAL,
    seconds: 60 * 20,
    repeats: true,
  },
});
```

#### Schedule the notification that will trigger once, at the beginning of next hour

```
import * as Notifications from 'expo-notifications';

const date = new Date(Date.now() + 60 * 60 * 1000);
date.setMinutes(0);
date.setSeconds(0);

Notifications.scheduleNotificationAsync({
  content: {
    title: 'Happy new hour!',
  },
  trigger: {
    type: Notifications.SchedulableTriggerInputTypes.DATE,
    date
  },
});
```

## Dismiss notifications

### `dismissAllNotificationsAsync()`

Removes all application's notifications displayed in the notification tray (Notification Center).

A Promise which resolves once the request to dismiss the notifications is successfully dispatched to the notifications manager.

### `dismissNotificationAsync(notificationIdentifier)`

  

Removes notification displayed in the notification tray (Notification Center).

A Promise which resolves once the request to dismiss the notification is successfully dispatched to the notifications manager.

### `getPresentedNotificationsAsync()`

Fetches information about all notifications present in the notification tray (Notification Center).

> This method is not supported on Android below 6.0 (API level 23) â on these devices it will resolve to an empty array.

A Promise which resolves with a list of notifications ([`Notification`](#notification)) currently present in the notification tray (Notification Center).

## Manage notification channels (Android-specific)

### `deleteNotificationChannelAsync(channelId)`

  

Removes the notification channel.

A Promise which resolving once the channel is removed (or if there was no channel for given identifier).

### `deleteNotificationChannelGroupAsync(groupId)`

  

Removes the notification channel group and all notification channels that belong to it.

A Promise which resolves once the channel group is removed (or if there was no channel group for given identifier).

### `getNotificationChannelAsync(channelId)`

  

Fetches information about a single notification channel.

A Promise which resolves to the channel object (of type [`NotificationChannel`](#notificationchannel)) or to `null` if there was no channel found for this identifier. On platforms that do not support notification channels, it will always resolve to `null`.

### `getNotificationChannelGroupAsync(groupId)`

  

Fetches information about a single notification channel group.

A Promise which resolves to the channel group object (of type [`NotificationChannelGroup`](#notificationchannelgroup)) or to `null` if there was no channel group found for this identifier. On platforms that do not support notification channels, it will always resolve to `null`.

### `getNotificationChannelGroupsAsync()`

Fetches information about all known notification channel groups.

A Promise which resoles to an array of channel groups. On platforms that do not support notification channel groups, it will always resolve to an empty array.

### `getNotificationChannelsAsync()`

Fetches information about all known notification channels.

A Promise which resolves to an array of channels. On platforms that do not support notification channels, it will always resolve to an empty array.

### `setNotificationChannelAsync(channelId, channel)`

  

Assigns the channel configuration to a channel of a specified name (creating it if need be). This method lets you assign given notification channel to a notification channel group.

> Note: After a channel has been created, you can modify only its name and description. This limitation is imposed by the Android OS.

> Note: For some settings to be applied on all Android versions, it may be necessary to duplicate the configuration across both a single notification and its respective notification channel.

For example, for a notification to play a custom sound on Android versions below 8.0, the custom notification sound has to be set on the notification (through the [`NotificationContentInput`](#notificationcontentinput)), and for the custom sound to play on Android versions above 8.0, the relevant notification channel must have the custom sound configured (through the [`NotificationChannelInput`](#notificationchannelinput)). For more information, see [Set custom notification sounds on Android](#set-custom-notification-sounds).

A Promise which resolving to the object (of type [`NotificationChannel`](#notificationchannel)) describing the modified channel or to `null` if the platform does not support notification channels.

### `setNotificationChannelGroupAsync(groupId, group)`

  

Assigns the channel group configuration to a channel group of a specified name (creating it if need be).

A `Promise` resolving to the object (of type [`NotificationChannelGroup`](#notificationchannelgroup)) describing the modified channel group or to `null` if the platform does not support notification channels.

## Manage notification categories (interactive notifications)

### `deleteNotificationCategoryAsync(identifier)`

  

Deletes the category associated with the provided identifier.

A Promise which resolves to `true` if the category was successfully deleted, or `false` if it was not. An example of when this method would return `false` is if you try to delete a category that doesn't exist.

### `getNotificationCategoriesAsync()`

Fetches information about all known notification categories.

A Promise which resolves to an array of `NotificationCategory`s. On platforms that do not support notification channels, it will always resolve to an empty array.

### `setNotificationCategoryAsync(identifier, actions, options)`

  

Sets the new notification category.

A Promise which resolves to the category you just have created.

## Constants

### `Notifications.DEFAULT_ACTION_IDENTIFIER`

Type: `'expo.modules.notifications.actions.DEFAULT'`

## Methods

### `Notifications.clearLastNotificationResponseAsync()`

Clears the notification response that was received most recently. May be used when an app selects a route based on the notification response, and it is undesirable to continue selecting the route after the response has already been handled.

If a component is using the [`useLastNotificationResponse`](#uselastnotificationresponse) hook, this call will also clear the value returned by the hook.

A promise that resolves if the native call was successful.

### `Notifications.getLastNotificationResponseAsync()`

Gets the notification response that was received most recently (a notification response designates an interaction with a notification, such as tapping on it).

*   `null` - if no notification response has been received yet
*   a [`NotificationResponse`](#notificationresponse) object - if a notification response was received

### `Notifications.unregisterForNotificationsAsync()`

## Interfaces

### `AudioAttributes`

### `BeaconRegion`

Extends: `[Region](#region)`

A region used to detect the presence of iBeacon devices. Based on Core Location [`CLBeaconRegion`](https://developer.apple.com/documentation/corelocation/clbeaconregion) class.

### `CalendarNotificationTrigger`

### `CircularRegion`

Extends: `[Region](#region)`

A circular geographic region, specified as a center point and radius. Based on Core Location [`CLCircularRegion`](https://developer.apple.com/documentation/corelocation/clcircularregion) class.

### `DailyNotificationTrigger`

A trigger related to a daily notification.

> The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.

### `EventSubscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

EventSubscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

### `ExpoPushToken`

Object which contains the Expo push token in the `data` field. Use the value from `data` to send notifications via Expo Notifications service.

### `ExpoPushTokenOptions`

### `FirebaseRemoteMessage`

A Firebase `RemoteMessage` that caused the notification to be delivered to the app.

### `FirebaseRemoteMessageNotification`

### `IosNotificationPermissionsRequest`

Available configuration for permission request on iOS platform. See Apple documentation for [`UNAuthorizationOptions`](https://developer.apple.com/documentation/usernotifications/unauthorizationoptions) to learn more.

### `LocationNotificationTrigger`

### `MonthlyNotificationTrigger`

A trigger related to a monthly notification.

> The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.

### `NativeDevicePushToken`

### `Notification`

An object which represents a single notification that has been triggered by some request ([`NotificationRequest`](#notificationrequest)) at some point in time.

### `NotificationAction`

### `NotificationBehavior`

An object which represents behavior that should be applied to the incoming notification. On Android, this influences whether the notification is shown, a sound is played, and priority. On iOS, this maps directly to [`UNNotificationPresentationOptions`](https://developer.apple.com/documentation/usernotifications/unnotificationpresentationoptions).

> On Android, setting `shouldPlaySound: false` will result in the drop-down notification alert not showing, no matter what the priority is. This setting will also override any channel-specific sounds you may have configured.

### `NotificationCategory`

### `NotificationChannel`

An object which represents a notification channel.

### `NotificationChannelGroup`

An object which represents a notification channel group.

### `NotificationChannelGroupInput`

An object which represents a notification channel group to be set.

### `NotificationChannelGroupManager`

Extends: `ProxyNativeModule`

### `NotificationChannelManager`

Extends: `ProxyNativeModule`

### `NotificationHandler`

### `NotificationPermissionsRequest`

An interface representing the permissions request scope configuration. Each option corresponds to a different native platform authorization option.

### `NotificationPermissionsStatus`

Extends: `[PermissionResponse](#permissionresponse)`

An object obtained by permissions get and request functions.

### `NotificationRequest`

An object represents a request to present a notification. It has content â how it's being represented, and a trigger â what triggers the notification. Many notifications ([`Notification`](#notification)) may be triggered with the same request (for example, a repeating notification).

### `NotificationRequestInput`

An object which represents a notification request you can pass into `scheduleNotificationAsync`.

### `NotificationResponse`

An object which represents user's interaction with the notification.

> Note: If the user taps on a notification, `actionIdentifier` will be equal to [`Notifications.DEFAULT_ACTION_IDENTIFIER`](#notificationsdefault_action_identifier).

### `Region`

The region used to determine when the system sends the notification.

### `TimeIntervalNotificationTrigger`

A trigger related to an elapsed time interval. May be repeating (see `repeats` field).

### `UnknownNotificationTrigger`

Represents a notification trigger that is unknown to `expo-notifications` and that it didn't know how to serialize for JS.

### `WeeklyNotificationTrigger`

A trigger related to a weekly notification.

> The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.

### `YearlyNotificationTrigger`

A trigger related to a yearly notification.

> The same functionality will be achieved on iOS with a `CalendarNotificationTrigger`.

## Types

### `CalendarTriggerInput`

This trigger input will cause the notification to be delivered once or many times (controlled by the value of `repeats`) when the date components match the specified values. Corresponds to native [`UNCalendarNotificationTrigger`](https://developer.apple.com/documentation/usernotifications/uncalendarnotificationtrigger?language=objc).

### `ChannelAwareTriggerInput`

A trigger that will cause the notification to be delivered immediately.

### `DailyTriggerInput`

This trigger input will cause the notification to be delivered once per day when the `hour` and `minute` date components match the specified values.

### `DateTriggerInput`

This trigger input will cause the notification to be delivered once on the specified value of the `date` property. The value of `repeats` will be ignored for this trigger type.

### `DevicePushToken`

Literal Type: `union`

In simple terms, an object of `type: Platform.OS` and `data: any`. The `data` type depends on the environment - on a native device it will be a string, which you can then use to send notifications via Firebase Cloud Messaging (Android) or APNs (iOS).

Acceptable values are: `[ExplicitlySupportedDevicePushToken](#explicitlysupporteddevicepushtoken)` | `[ImplicitlySupportedDevicePushToken](#implicitlysupporteddevicepushtoken)`

### `ExplicitlySupportedDevicePushToken`

Type: `[NativeDevicePushToken](#nativedevicepushtoken)`

### `ImplicitlySupportedDevicePushToken`

### `MaybeNotificationResponse`

Literal Type: `union`

Acceptable values are: `[NotificationResponse](#notificationresponse)` | `null` | `undefined`

### `MonthlyTriggerInput`

This trigger input will cause the notification to be delivered once per month when the `day`, `hour`, and `minute` date components match the specified values.

> Note: All properties are specified in JavaScript `Date` object's ranges (i.e. January is represented as 0).

### `NativeNotificationPermissionsRequest`

Literal Type: `union`

Acceptable values are: `[IosNotificationPermissionsRequest](#iosnotificationpermissionsrequest)` | `object`

### `NotificationCategoryOptions`

### `NotificationChannelInput`

Type: `[RequiredBy](#requiredby)<[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[NotificationChannel](#notificationchannel), 'id' | 'audioAttributes' | 'sound'> & { audioAttributes: [AudioAttributesInput](#audioattributesinput), sound: string | null }, 'name' | 'importance'>`

An object which represents a notification channel to be set.

### `NotificationContent`

An object represents notification's content.

Type: `[NotificationContentIos](#notificationcontentios) | [NotificationContentAndroid](#notificationcontentandroid)` extended by:

### `NotificationContentAndroid`

### `NotificationContentAttachmentIos`

### `NotificationContentInput`

An object which represents notification content that you pass in as a part of `NotificationRequestInput`.

### `NotificationContentIos`

### `NotificationHandlingError`

Literal Type: `union`

Acceptable values are: `NotificationTimeoutError` | `[Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)`

### `NotificationTaskPayload`

Payload for the background notification handler task. [Read more](#run-javascript-in-response-to-incoming-notifications).

Type: `[NotificationResponse](#notificationresponse)` or `object` shaped as below:

### `NotificationTrigger`

Literal Type: `union`

A union type containing different triggers which may cause the notification to be delivered to the application.

Acceptable values are: `[PushNotificationTrigger](#pushnotificationtrigger)` | `[LocationNotificationTrigger](#locationnotificationtrigger)` | `[NotificationTriggerInput](#notificationtriggerinput)` | `[UnknownNotificationTrigger](#unknownnotificationtrigger)`

### `NotificationTriggerInput`

Literal Type: `union`

A type which represents possible triggers with which you can schedule notifications. A `null` trigger means that the notification should be scheduled for delivery immediately.

Acceptable values are: `null` | `[ChannelAwareTriggerInput](#channelawaretriggerinput)` | `[SchedulableNotificationTriggerInput](#schedulablenotificationtriggerinput)`

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionResponse`

An object obtained by permissions get and request functions.

### `PushNotificationTrigger`

### `PushTokenListener(token)`

A function accepting a device push token ([`DevicePushToken`](#devicepushtoken)) as an argument.

> Note: You should not call `getDevicePushTokenAsync` inside this function, as it triggers the listener and may lead to an infinite loop.

### `SchedulableNotificationTriggerInput`

Literal Type: `union`

Input for time-based, schedulable triggers. For these triggers you can check the next trigger date with [`getNextTriggerDateAsync`](#getnexttriggerdateasynctrigger). If you pass in a `number` (Unix timestamp) or `Date`, it will be processed as a trigger input of type [`SchedulableTriggerInputTypes.DATE`](#date). Otherwise, the input must be an object, with a `type` value set to one of the allowed values in [`SchedulableTriggerInputTypes`](#schedulabletriggerinputtypes). If the input is an object, date components passed in will be validated, and an error is thrown if they are outside their allowed range (for example, the `minute` and `second` components must be between 0 and 59 inclusive).

Acceptable values are: `[CalendarTriggerInput](#calendartriggerinput)` | `[TimeIntervalTriggerInput](#timeintervaltriggerinput)` | `[DailyTriggerInput](#dailytriggerinput)` | `[WeeklyTriggerInput](#weeklytriggerinput)` | `[MonthlyTriggerInput](#monthlytriggerinput)` | `[YearlyTriggerInput](#yearlytriggerinput)` | `[DateTriggerInput](#datetriggerinput)`

> Deprecated use the [`EventSubscription`](#eventsubscription) type instead

### `Subscription`

Type: `EventSubscription`

### `TimeIntervalTriggerInput`

This trigger input will cause the notification to be delivered once or many times (depends on the `repeats` field) after `seconds` time elapse.

> On iOS, when `repeats` is `true`, the time interval must be 60 seconds or greater. Otherwise, the notification won't be triggered.

### `WeeklyTriggerInput`

This trigger input will cause the notification to be delivered once every week when the `weekday`, `hour`, and `minute` date components match the specified values.

> Note: Weekdays are specified with a number from `1` through `7`, with `1` indicating Sunday.

### `YearlyTriggerInput`

This trigger input will cause the notification to be delivered once every year when the `day`, `month`, `hour`, and `minute` date components match the specified values.

> Note: All properties are specified in JavaScript `Date` object's ranges (i.e. January is represented as 0).

## Enums

### `AndroidAudioContentType`

#### `UNKNOWN`

`AndroidAudioContentType.UNKNOWN ï¼ 0`

#### `SPEECH`

`AndroidAudioContentType.SPEECH ï¼ 1`

#### `MUSIC`

`AndroidAudioContentType.MUSIC ï¼ 2`

#### `MOVIE`

`AndroidAudioContentType.MOVIE ï¼ 3`

#### `SONIFICATION`

`AndroidAudioContentType.SONIFICATION ï¼ 4`

### `AndroidAudioUsage`

#### `UNKNOWN`

`AndroidAudioUsage.UNKNOWN ï¼ 0`

#### `MEDIA`

`AndroidAudioUsage.MEDIA ï¼ 1`

#### `VOICE_COMMUNICATION`

`AndroidAudioUsage.VOICE_COMMUNICATION ï¼ 2`

#### `VOICE_COMMUNICATION_SIGNALLING`

`AndroidAudioUsage.VOICE_COMMUNICATION_SIGNALLING ï¼ 3`

#### `ALARM`

`AndroidAudioUsage.ALARM ï¼ 4`

#### `NOTIFICATION`

`AndroidAudioUsage.NOTIFICATION ï¼ 5`

#### `NOTIFICATION_RINGTONE`

`AndroidAudioUsage.NOTIFICATION_RINGTONE ï¼ 6`

#### `NOTIFICATION_COMMUNICATION_REQUEST`

`AndroidAudioUsage.NOTIFICATION_COMMUNICATION_REQUEST ï¼ 7`

#### `NOTIFICATION_COMMUNICATION_INSTANT`

`AndroidAudioUsage.NOTIFICATION_COMMUNICATION_INSTANT ï¼ 8`

#### `NOTIFICATION_COMMUNICATION_DELAYED`

`AndroidAudioUsage.NOTIFICATION_COMMUNICATION_DELAYED ï¼ 9`

#### `NOTIFICATION_EVENT`

`AndroidAudioUsage.NOTIFICATION_EVENT ï¼ 10`

#### `ASSISTANCE_ACCESSIBILITY`

`AndroidAudioUsage.ASSISTANCE_ACCESSIBILITY ï¼ 11`

#### `ASSISTANCE_NAVIGATION_GUIDANCE`

`AndroidAudioUsage.ASSISTANCE_NAVIGATION_GUIDANCE ï¼ 12`

#### `ASSISTANCE_SONIFICATION`

`AndroidAudioUsage.ASSISTANCE_SONIFICATION ï¼ 13`

#### `GAME`

`AndroidAudioUsage.GAME ï¼ 14`

### `AndroidImportance`

#### `UNKNOWN`

`AndroidImportance.UNKNOWN ï¼ 0`

#### `UNSPECIFIED`

`AndroidImportance.UNSPECIFIED ï¼ 1`

#### `NONE`

`AndroidImportance.NONE ï¼ 2`

#### `MIN`

`AndroidImportance.MIN ï¼ 3`

#### `LOW`

`AndroidImportance.LOW ï¼ 4`

#### `DEFAULT`

`AndroidImportance.DEFAULT ï¼ 5`

#### `HIGH`

`AndroidImportance.HIGH ï¼ 6`

#### `MAX`

`AndroidImportance.MAX ï¼ 7`

### `AndroidNotificationPriority`

An enum corresponding to values appropriate for Android's [`Notification#priority`](https://developer.android.com/reference/android/app/Notification#priority) field.

#### `DEFAULT`

`AndroidNotificationPriority.DEFAULT ï¼ "default"`

#### `HIGH`

`AndroidNotificationPriority.HIGH ï¼ "high"`

#### `LOW`

`AndroidNotificationPriority.LOW ï¼ "low"`

#### `MAX`

`AndroidNotificationPriority.MAX ï¼ "max"`

#### `MIN`

`AndroidNotificationPriority.MIN ï¼ "min"`

### `AndroidNotificationVisibility`

#### `UNKNOWN`

`AndroidNotificationVisibility.UNKNOWN ï¼ 0`

#### `PUBLIC`

`AndroidNotificationVisibility.PUBLIC ï¼ 1`

#### `PRIVATE`

`AndroidNotificationVisibility.PRIVATE ï¼ 2`

#### `SECRET`

`AndroidNotificationVisibility.SECRET ï¼ 3`

### `IosAlertStyle`

#### `NONE`

`IosAlertStyle.NONE ï¼ 0`

#### `BANNER`

`IosAlertStyle.BANNER ï¼ 1`

#### `ALERT`

`IosAlertStyle.ALERT ï¼ 2`

### `IosAllowsPreviews`

#### `NEVER`

`IosAllowsPreviews.NEVER ï¼ 0`

#### `ALWAYS`

`IosAllowsPreviews.ALWAYS ï¼ 1`

#### `WHEN_AUTHENTICATED`

`IosAllowsPreviews.WHEN_AUTHENTICATED ï¼ 2`

### `IosAuthorizationStatus`

#### `NOT_DETERMINED`

`IosAuthorizationStatus.NOT_DETERMINED ï¼ 0`

#### `DENIED`

`IosAuthorizationStatus.DENIED ï¼ 1`

#### `AUTHORIZED`

`IosAuthorizationStatus.AUTHORIZED ï¼ 2`

#### `PROVISIONAL`

`IosAuthorizationStatus.PROVISIONAL ï¼ 3`

#### `EPHEMERAL`

`IosAuthorizationStatus.EPHEMERAL ï¼ 4`

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

### `SchedulableTriggerInputTypes`

Schedulable trigger inputs (that are not a plain date value or time value) must have the "type" property set to one of these values.

#### `CALENDAR`

`SchedulableTriggerInputTypes.CALENDAR ï¼ "calendar"`

#### `DAILY`

`SchedulableTriggerInputTypes.DAILY ï¼ "daily"`

#### `DATE`

`SchedulableTriggerInputTypes.DATE ï¼ "date"`

#### `MONTHLY`

`SchedulableTriggerInputTypes.MONTHLY ï¼ "monthly"`

#### `TIME_INTERVAL`

`SchedulableTriggerInputTypes.TIME_INTERVAL ï¼ "timeInterval"`

#### `WEEKLY`

`SchedulableTriggerInputTypes.WEEKLY ï¼ "weekly"`

#### `YEARLY`

`SchedulableTriggerInputTypes.YEARLY ï¼ "yearly"`

---

# pedometer

```
import { useState, useEffect } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import { Pedometer } from 'expo-sensors';

export default function App() {
  const [isPedometerAvailable, setIsPedometerAvailable] = useState('checking');
  const [pastStepCount, setPastStepCount] = useState(0);
  const [currentStepCount, setCurrentStepCount] = useState(0);

  const subscribe = async () => {
    const isAvailable = await Pedometer.isAvailableAsync();
    setIsPedometerAvailable(String(isAvailable));

    if (isAvailable) {
      const end = new Date();
      const start = new Date();
      start.setDate(end.getDate() - 1);

      const pastStepCountResult = await Pedometer.getStepCountAsync(start, end);
      if (pastStepCountResult) {
        setPastStepCount(pastStepCountResult.steps);
      }

      return Pedometer.watchStepCount(result => {
        setCurrentStepCount(result.steps);
      });
    }
  };

  useEffect(() => {
    const subscription = subscribe();
    return () => subscription && subscription.remove();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Pedometer.isAvailableAsync(): {isPedometerAvailable}</Text>
      <Text>Steps taken in the last 24 hours: {pastStepCount}</Text>
      <Text>Walk! And watch this go up: {currentStepCount}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
```


---

# picker

[](https://github.com/react-native-picker/picker)

[

GitHub

](https://github.com/react-native-picker/picker)

[

npm

](https://www.npmjs.com/package/@react-native-picker/picker)

A cross-platform component that provides access to the system UI for picking between several options.

[

GitHub

](https://github.com/react-native-picker/picker)[

npm

](https://www.npmjs.com/package/@react-native-picker/picker)

Android

iOS

macOS

Web

Bundled version:

2.11.1

A component that provides access to the system UI for picking between several options.

## Installation

Terminal

`npx expo install @react-native-picker/picker`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/react-native-picker/picker#getting-started) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/react-native-picker/picker)

---

# print

```
import { useState } from 'react';
import { View, StyleSheet, Button, Platform, Text } from 'react-native';
import * as Print from 'expo-print';
import { shareAsync } from 'expo-sharing';

const html = `
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no" />
  </head>
  <body style="text-align: center;">
    <h1 style="font-size: 50px; font-family: Helvetica Neue; font-weight: normal;">
      Hello Expo!
    </h1>
    <img
      src="https://d30j33t1r58ioz.cloudfront.net/static/guides/sdk.png"
      style="width: 90vw;" />
  </body>
</html>
`;

export default function App() {
  const [selectedPrinter, setSelectedPrinter] = useState();

  const print = async () => {
    // On iOS/android prints the given html. On web prints the HTML from the current page.
    await Print.printAsync({
      html,
      printerUrl: selectedPrinter?.url, // iOS only
    });
  };

  const printToFile = async () => {
    // On iOS/android prints the given html. On web prints the HTML from the current page.
    const { uri } = await Print.printToFileAsync({ html });
    console.log('File has been saved to:', uri);
    await shareAsync(uri, { UTI: '.pdf', mimeType: 'application/pdf' });
  };

  const selectPrinter = async () => {
    const printer = await Print.selectPrinterAsync(); // iOS only
    setSelectedPrinter(printer);
  };

  return (
    <View style={styles.container}>
      <Button title="Print" onPress={print} />
      <View style={styles.spacer} />
      <Button title="Print to PDF file" onPress={printToFile} />
      {Platform.OS === 'ios' && (
        <>
          <View style={styles.spacer} />
          <Button title="Select printer" onPress={selectPrinter} />
          <View style={styles.spacer} />
          {selectedPrinter ? (
            <Text style={styles.printer}>{`Selected printer: ${selectedPrinter.name}`}</Text>
          ) : undefined}
        </>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    flexDirection: 'column',
    padding: 8,
  },
  spacer: {
    height: 8,
  },
  printer: {
    textAlign: 'center',
  },
});
```


---

# reanimated

A library that provides an API that greatly simplifies the process of creating smooth, powerful, and maintainable animations.

[](https://github.com/software-mansion/react-native-reanimated)[](https://www.npmjs.com/package/react-native-reanimated)

[`react-native-reanimated`](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/) provides an API that greatly simplifies the process of creating smooth, powerful, and maintainable animations.

> Reanimated uses React Native APIs that are incompatible with "Remote JS Debugging" for JavaScriptCore. To use a debugger with your app with `react-native-reanimated`, you'll need to use the [Hermes JavaScript engine](https://docs.expo.dev/guides/using-hermes) and the [JavaScript Inspector for Hermes](https://docs.expo.dev/guides/using-hermes#javascript-inspector-for-hermes).

## Installation

`npx expo install react-native-reanimated`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/getting-started/#platform-specific-setup) provided in the library's README or documentation.

No additional configuration is required. [Reanimated Babel plugin](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#reanimated-babel-plugin) is automatically configured in [`babel-preset-expo`](https://www.npmjs.com/package/babel-preset-expo) when you install the library.

## Usage

The following example shows how to use the `react-native-reanimated` library to create a simple animation.

```
import Animated, {
  useSharedValue,
  withTiming,
  useAnimatedStyle,
  Easing,
} from 'react-native-reanimated';
import { View, Button, StyleSheet } from 'react-native';

export default function AnimatedStyleUpdateExample() {
  const randomWidth = useSharedValue(10);

  const config = {
    duration: 500,
    easing: Easing.bezier(0.5, 0.01, 0, 1),
  };

  const style = useAnimatedStyle(() => {
    return {
      width: withTiming(randomWidth.value, config),
    };
  });

  return (
    <View style={styles.container}>
      <Animated.View style={[styles.box, style]} />
      <Button
        title="toggle"
        onPress={() => {
          randomWidth.value = Math.random() * 350;
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  box: {
    width: 100,
    height: 80,
    backgroundColor: 'black',
    margin: 30,
  },
});
```

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/your-first-animation)

---

# router

## Expo Router

A file-based routing library for React Native and web applications.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-router)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-router/CHANGELOG.md)[](https://www.npmjs.com/package/expo-router)

`expo-router` is a routing library for React Native and web apps. It enables navigation management using a file-based routing system and provides native navigation components and is built on top of [React Navigation](https://reactnavigation.org/).

[

Expo Router guides

Learn about Expo Router basics, navigation patterns, core concepts, and more.

](https://docs.expo.dev/router/introduction)

## Installation

To use Expo Router in your project, you need to install. Follow the instructions from the Expo Router's installation guide:

[

Install Expo Router

Learn how to install Expo Router in your project.

](https://docs.expo.dev/router/installation)

## Configuration in app config

If you are using the [default](https://docs.expo.dev/more/create-expo#--template) template to create a new project, `expo-router` [config plugin](https://docs.expo.dev/config-plugins/introduction) is automatically configured in the app config automatically.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": ["expo-router"]
  }
}
```

## Usage

For information core concepts, notation patterns, navigation layouts, and common navigation patterns, start with Router 101 section:

[](https://docs.expo.dev/router/basics/core-concepts)

## API

```
import { Stack, Tabs, Link } from 'expo-router';
```

## Components

### `ErrorBoundary`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[ErrorBoundaryProps](#errorboundaryprops)>`

Props passed to a page's `ErrorBoundary` export.

ErrorBoundaryProps

### `error`

The error that was thrown.

### `retry`

Type:

`() => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<void>`

A function that will re-render the route component by clearing the `error` state.

### `Link`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<PropsWithChildren<[LinkProps](#linkprops)>>`

Component that renders a link using [`href`](#href) to another route. By default, it accepts children and wraps them in a `<Text>` component.

Uses an anchor tag (`<a>`) on web and performs a client-side navigation to preserve the state of the website and navigate faster. The web-only attributes such as `target`, `rel`, and `download` are supported and passed to the anchor tag on web. See [`WebAnchorProps`](#webanchorprops) for more details.

> Note: Client-side navigation works with both single-page apps, and [static-rendering](https://docs.expo.dev/router/reference/static-rendering).

Example

```
import { Link } from 'expo-router';
import { View } from 'react-native';

export default function Route() {
 return (
  <View>
   <Link href="/about">About</Link>
  </View>
 );
}
```

### `asChild`

Used to customize the `Link` component. It will forward all props to the first child of the `Link`. Note that the child component must accept `onPress` or `onClick` props. The `href` and `role` are also passed to the child.

Example

```
import { Link } from 'expo-router';
import { Pressable, Text } from 'react-native';

export default function Route() {
 return (
  <View>
   <Link href="/home" asChild>
     <Pressable>
      <Text>Home</Text>
     </Pressable>
   </Link>
  </View>
 );
}
```

### `className`

On native, this can be used with CSS interop tools like Nativewind. On web, this sets the HTML `class` directly.

### `dangerouslySingular`

OptionalâType:

`[SingularOptions](#singularoptions)`

When navigating in a Stack, if the target is valid then screens in the history that matches the uniqueness constraint will be removed.

If used with `push`, the history will be filtered even if no navigation occurs.

### `dismissTo`

While in a stack, this will dismiss screens until the provided `href` is reached. If the href is not found, it will instead replace the current screen with the provided `href`.

Example

```
import { Link } from 'expo-router';
import { View } from 'react-native';

export default function Route() {
 return (
  <View>
    <Link dismissTo href="/feed">Close modal</Link>
  </View>
 );
}
```

### `href`

Literal type: `union`

The path of the route to navigate to. It can either be:

*   string: A full path like `/profile/settings` or a relative path like `../settings`.
*   object: An object with a `pathname` and optional `params`. The `pathname` can be a full path like `/profile/settings` or a relative path like `../settings`. The params can be an object of key-value pairs.

Example

```
import { Link } from 'expo-router';
import { View } from 'react-native';

export default function Route() {
 return (
  <View>
   <Link href="/about">About</Link>
   <Link
    href={{
      pathname: '/user/[id]',
      params: { id: 'bacon' }
    }}>
      View user
   </Link>
  </View>
 );
}
```

Acceptable values are: `string` | `[HrefObject](#hrefobject)`

### `onPress`

OptionalâType:

`(event: [MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent)<[HTMLAnchorElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement)> | GestureResponderEvent) => void`

This function is called on press. Text intrinsically supports press handling with a default highlight state (which can be disabled with suppressHighlighting).

### `prefetch`

Prefetches the route when the component is rendered on a focused screen.

### `push`

Always pushes a new route, and never pops or replaces to existing route. You can push the current route multiple times or with new parameters.

Example

```
import { Link } from 'expo-router';
import { View } from 'react-native';

export default function Route() {
 return (
  <View>
    <Link push href="/feed">Login</Link>
  </View>
 );
}
```

### `relativeToDirectory`

Relative URL references are either relative to the directory or the document. By default, relative paths are relative to the document.

### `replace`

Removes the current route from the history and replace it with the specified URL. This is useful for [redirects](https://docs.expo.dev/router/reference/redirects).

Example

```
import { Link } from 'expo-router';
import { View } from 'react-native';

export default function Route() {
 return (
  <View>
    <Link replace href="/feed">Login</Link>
  </View>
 );
}
```

### `withAnchor`

Replaces the initial screen with the current route.

### `Redirect`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[RedirectProps](#redirectprops)>`

Redirects to the `href` as soon as the component is mounted.

Example

```
import { View, Text } from 'react-native';
import { Redirect } from 'expo-router';

export default function Page() {
 const { user } = useAuth();

 if (!user) {
   return <Redirect href="/login" />;
 }

 return (
   <View>
     <Text>Welcome Back!</Text>
   </View>
 );
}
```

RedirectProps

### `href`

The path of the route to navigate to. It can either be:

*   string: A full path like `/profile/settings` or a relative path like `../settings`.
*   object: An object with a `pathname` and optional `params`. The `pathname` can be a full path like `/profile/settings` or a relative path like `../settings`. The params can be an object of key-value pairs.

Example

```
import { Redirect } from 'expo-router';

export default function RedirectToAbout() {
 return (
   <Redirect href="/about">
 );
}
```

### `relativeToDirectory`

Relative URL references are either relative to the directory or the document. By default, relative paths are relative to the document.

### `withAnchor`

Replaces the initial screen with the current route.

### `Slot`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<[NavigatorProps](#navigatorprops)<any>, 'children'>>`

Renders the currently selected content.

There are actually two different implementations of `<Slot/>`:

*   Used inside a `_layout` as the `Navigator`
*   Used inside a `Navigator` as the content

Since a custom `Navigator` will set the `NavigatorContext.contextKey` to the current `_layout`, you can use this to determine if you are inside a custom navigator or not.

## Hooks

### `useFocusEffect(effect, do_not_pass_a_second_prop)`

  

Hook to run an effect whenever a route is focused. Similar to [`React.useEffect`](https://react.dev/reference/react/useEffect).

This can be used to perform side-effects such as fetching data or subscribing to events. The passed callback should be wrapped in [`React.useCallback`](https://react.dev/reference/react/useCallback) to avoid running the effect too often.

Example

```
import { useFocusEffect } from 'expo-router';
import { useCallback } from 'react';

export default function Route() {
  useFocusEffect(
    // Callback should be wrapped in `React.useCallback` to avoid running the effect too often.
    useCallback(() => {
      // Invoked whenever the route is focused.
      console.log('Hello, I'm focused!');

      // Return function is invoked whenever the route gets out of focus.
      return () => {
        console.log('This route is now unfocused.');
      };
    }, []);
   );

 return </>;
}
```

### `useGlobalSearchParams()`

Returns URL parameters for globally selected route, including dynamic path segments. This function updates even when the route is not focused. Useful for analytics or other background operations that don't draw to the screen.

Route URL example: `acme://profile/baconbrix?extra=info`.

When querying search params in a stack, opt-towards using [`useLocalSearchParams`](#uselocalsearchparams) because it will only update when the route is focused.

`RouteParams<TRoute> & TParams`

Example

```
import { Text } from 'react-native';
import { useGlobalSearchParams } from 'expo-router';

export default function Route() {
  // user=baconbrix & extra=info
  const { user, extra } = useGlobalSearchParams();

  return <Text>User: {user}</Text>;
}
```

### `useLocalSearchParams()`

Returns the URL parameters for the contextually focused route. Useful for stacks where you may push a new screen that changes the query parameters. For dynamic routes, both the route parameters and the search parameters are returned.

Route URL example: `acme://profile/baconbrix?extra=info`.

To observe updates even when the invoking route is not focused, use [`useGlobalSearchParams`](#useglobalsearchparams).

`RouteParams<TRoute> & TParams`

Example

```
import { Text } from 'react-native';
import { useLocalSearchParams } from 'expo-router';

export default function Route() {
 // user=baconbrix & extra=info
 const { user, extra } = useLocalSearchParams();

 return <Text>User: {user}</Text>;
}
```

### `useNavigation(parent)`

  

Returns the underlying React Navigation [`navigation` object](https://reactnavigation.org/docs/navigation-object) to imperatively access layout-specific functionality like `navigation.openDrawer()` in a [Drawer](https://docs.expo.dev/router/advanced/drawer) layout.

The navigation object for the current route.

> See: React Navigation documentation on [navigation dependent functions](https://reactnavigation.org/docs/navigation-object/#navigator-dependent-functions) for more information.

Example

```
import { useNavigation } from 'expo-router';

export default function Route() {
  // Access the current navigation object for the current route.
  const navigation = useNavigation();

  return (
    <View>
      <Text onPress={() => {
        // Open the drawer view.
        navigation.openDrawer();
      }}>
        Open Drawer
      </Text>
    </View>
  );
}
```

When using nested layouts, you can access higher-order layouts by passing a secondary argument denoting the layout route. For example, `/menu/_layout.tsx` is nested inside `/app/orders/`, you can use `useNavigation('/orders/menu/')`.

Example

```
import { useNavigation } from 'expo-router';

export default function MenuRoute() {
  const rootLayout = useNavigation('/');
  const ordersLayout = useNavigation('/orders');

  // Same as the default results of `useNavigation()` when invoked in this route.
  const parentLayout = useNavigation('/orders/menu');
}
```

If you attempt to access a layout that doesn't exist, an error such as `Could not find parent navigation with route "/non-existent"` is thrown.

### `useNavigationContainerRef()`

The root `<NavigationContainer />` ref for the app. The `ref.current` may be `null` if the `<NavigationContainer />` hasn't mounted yet.

### `usePathname()`

Returns the currently selected route location without search parameters. For example, `/acme?foo=bar` returns `/acme`. Segments will be normalized. For example, `/[id]?id=normal` becomes `/normal`.

Example

```
import { Text } from 'react-native';
import { usePathname } from 'expo-router';

export default function Route() {
  // pathname = "/profile/baconbrix"
  const pathname = usePathname();

  return <Text>User: {user}</Text>;
}
```

> Deprecated Use [`useNavigationContainerRef`](#usenavigationcontainerref) instead, which returns a React `ref`.

### `useRootNavigation()`

### `useRootNavigationState()`

Returns the [navigation state](https://reactnavigation.org/docs/navigation-state/) of the navigator which contains the current screen.

Example

```
import { useRootNavigationState } from 'expo-router';

export default function Route() {
 const { routes } = useRootNavigationState();

 return <Text>{routes[0].name}</Text>;
}
```

### `useRouter()`

Returns the [Router](#router) object for imperative navigation.

Example

```
import { useRouter } from 'expo-router';
import { Text } from 'react-native';

export default function Route() {
 const router = useRouter();

 return (
  <Text onPress={() => router.push('/home')}>Go Home</Text>
 );
}
```

### `useSegments()`

Returns a list of selected file segments for the currently selected route. Segments are not normalized, so they will be the same as the file path. For example, `/[id]?id=normal` becomes `["[id]"]`.

Example

```
import { Text } from 'react-native';
import { useSegments } from 'expo-router';

export default function Route() {
  // segments = ["profile", "[user]"]
  const segments = useSegments();

  return <Text>Hello</Text>;
}
```

`useSegments` can be typed using an abstract. Consider the following file structure:

```
- app
  - [user]
    - index.tsx
    - followers.tsx
  - settings.tsx
```

This can be strictly typed using the following abstract with `useSegments` hook:

```
const [first, second] = useSegments<['settings'] | ['[user]'] | ['[user]', 'followers']>()
```

## Methods

### `Sitemap()`

### `withLayoutContext(Nav, processor)`

  

Returns a navigator that automatically injects matched routes and renders nothing when there are no children. Return type with `children` prop optional.

Enables use of other built-in React Navigation navigators and other navigators built with the React Navigation custom navigator API.

`[Component](https://react.dev/reference/react/Component)<PropsWithoutRef<[PickPartial](#pickpartial)<ComponentProps<T>, 'children'>>> & { Protected: [FunctionComponent](#functioncomponent)<[ProtectedProps](#protectedprops)>, Screen: (props: [ScreenProps](#screenprops)<TOptions, TState, TEventMap>) => null }`

Example

```
import { ParamListBase, TabNavigationState } from "@react-navigation/native";
import {
  createMaterialTopTabNavigator,
  MaterialTopTabNavigationOptions,
  MaterialTopTabNavigationEventMap,
} from "@react-navigation/material-top-tabs";
import { withLayoutContext } from "expo-router";

const MaterialTopTabs = createMaterialTopTabNavigator();

const ExpoRouterMaterialTopTabs = withLayoutContext<
  MaterialTopTabNavigationOptions,
  typeof MaterialTopTabs.Navigator,
  TabNavigationState<ParamListBase>,
  MaterialTopTabNavigationEventMap
>(MaterialTopTabs.Navigator);

export default function TabLayout() {
  return <ExpoRouterMaterialTopTabs />;
}
```

## Types

### `EffectCallback()`

Memoized callback containing the effect, should optionally return a cleanup function.

`undefined | void | () => void`

### `ExternalPathString`

Literal Type: `union`

Acceptable values are: `{string}:{string}` | `//{string}`

### `Href<T>`

The main routing type for Expo Router. It includes all available routes with strongly typed parameters. It can either be:

*   string: A full path like `/profile/settings` or a relative path like `../settings`.
*   object: An object with a `pathname` and optional `params`. The `pathname` can be a full path like `/profile/settings` or a relative path like `../settings`. The params can be an object of key-value pairs.

An Href can either be a string or an object.

Generic: `T`

Type: `T ? T[href] : string | [HrefObject](#hrefobject)`

### `HrefObject`

### `NativeIntent`

Created by using a special file called `+native-intent.tsx` at the top-level of your project's app directory. It exports `redirectSystemPath` or `legacy_subscribe` functions, both methods designed to handle URL/path processing.

Useful for re-writing URLs to correctly target a route when unique/referred URLs are incoming from third-party providers or stale URLs from previous versions.

> See: For more information on how to use `NativeIntent`, see [Customizing links](https://docs.expo.dev/router/advanced/native-intent).

### `PickPartial`

Literal Type: `union`

The list of input keys will become optional, everything else will remain the same.

Acceptable values are: `[Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittype-keys)<T, K>` | `[Partial](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)<[Pick](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)<T, K>>`

### `RedirectConfig`

### `RelativePathString`

Literal Type: `union`

Acceptable values are: `./{string}` | `../{string}` | `'..'`

### `Router`

Returns `router` object for imperative navigation API.

Example

```
import { router } from 'expo-router';
import { Text } from 'react-native';

export default function Route() {

 return (
  <Text onPress={() => router.push('/home')}>Go Home</Text>
 );
}
```

### `ScreenProps`

### `SearchOrHash`

Literal Type: `union`

Acceptable values are: `?{string}` | `#{string}`

### `SingularOptions`

Type: `boolean` or `object` shaped as below:

#### `` (name, params) => `string | undefined` ``

### `WebAnchorProps`

---

# router-ui

## Expo Router UI

An Expo Router submodule that provides headless tab components to create custom tab layouts.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-router)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-router/CHANGELOG.md)[](https://www.npmjs.com/package/expo-router)

`expo-router/ui` is a submodule of `expo-router` library and exports components and hooks to build custom tab layouts, rather than using the default [React Navigation](https://reactnavigation.org/) navigators provided by `expo-router`.

> See the [Expo Router](https://docs.expo.dev/versions/latest/sdk/router) reference for more information about the file-based routing library for native and web app.

## Installation

To use `expo-router/ui` in your project, you need to install `expo-router` in your project. Follow the instructions from the Expo Router's installation guide:

[

Install Expo Router

Learn how to install Expo Router in your project.

](https://docs.expo.dev/router/installation)

## Configuration in app config

If you are using the [default](https://docs.expo.dev/more/create-expo#--template) template to create a new project, `expo-router` [config plugin](https://docs.expo.dev/config-plugins/introduction) is automatically configured in the app config automatically.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": ["expo-router"]
  }
}
```

## Usage

For information about using `expo-router/ui` in Custom tab layouts guide:

[](https://docs.expo.dev/router/advanced/custom-tabs)

## API

```
import { Tabs, TabList, TabTrigger, TabSlot } from 'expo-router/ui';
```

## Components

### `TabList`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[TabListProps](#tablistprops)>`

Wrapper component for `TabTriggers`. `TabTriggers` within the `TabList` define the tabs.

Example

```
<Tabs>
 <TabSlot />
 <TabList>
  <TabTrigger name="home" href="/" />
 </TabList>
</Tabs>
```

TabListProps

### `asChild`

Forward props to child component and removes the extra `<View>`. Useful for custom wrappers.

#### Inherited Props

### `Tabs`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[TabsProps](#tabsprops)>`

Root component for the headless tabs.

> See: [`useTabsWithChildren`](#usetabswithchildrenoptions) for a hook version of this component.

Example

```
<Tabs>
 <TabSlot />
 <TabList>
  <TabTrigger name="home" href="/" />
 </TabList>
</Tabs>
```

TabsProps

### `asChild`

Forward props to child component and removes the extra `<View>`. Useful for custom wrappers.

### `options`

OptionalâType:

`[UseTabsOptions](#usetabsoptions)`

#### Inherited Props

### `TabSlot`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[TabSlotProps](#tabslotprops)>`

Renders the current tab.

> See: [`useTabSlot`](#usetabslot) for a hook version of this component.

Example

```
<Tabs>
 <TabSlot />
 <TabList>
  <TabTrigger name="home" href="/" />
 </TabList>
</Tabs>
```

TabSlotProps

### `detachInactiveScreens`

Remove inactive screens.

### `renderFn`

OptionalâType:

`defaultTabsSlotRender`

Override how the `Screen` component is rendered.

#### Inherited Props

*   `ComponentProps<ScreenContainer>`

### `TabTrigger`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[TabTriggerProps](#tabtriggerprops)>`

Creates a trigger to navigate to a tab. When used as child of `TabList`, its functionality slightly changes since the `href` prop is required, and the trigger also defines what routes are present in the `Tabs`.

When used outside of `TabList`, this component no longer requires an `href`.

Example

```
<Tabs>
 <TabSlot />
 <TabList>
  <TabTrigger name="home" href="/" />
 </TabList>
</Tabs>
```

TabTriggerProps

### `asChild`

Forward props to child component. Useful for custom wrappers.

### `href`

Name of tab. Required when used within a `TabList`.

### `name`

Name of tab. When used within a `TabList` this sets the name of the tab. Otherwise, this references the name.

### `reset`

OptionalâLiteral type: `union`

Resets the route when switching to a tab.

Acceptable values are: `SwitchToOptions[reset]` | `'onLongPress'`

### `useTabSlot`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[TabSlotProps](#tabslotprops)>`

Returns a `ReactElement` of the current tab.

Example

```
function MyTabSlot() {
  const slot = useTabSlot();

  return slot;
}
```

## Hooks

### `useTabSlot(namedParameters)`

  

Returns a `ReactElement` of the current tab.

Example

```
function MyTabSlot() {
  const slot = useTabSlot();

  return slot;
}
```

### `useTabsWithChildren(options)`

  

Hook version of `Tabs`. The returned NavigationContent component should be rendered. Using the hook requires using the `<TabList />` and `<TabTrigger />` components exported from Expo Router.

The `useTabsWithTriggers()` hook can be used for custom components.

> See: [`Tabs`](#tabs) for the component version of this hook.

Example

```
export function MyTabs({ children }) {
 const { NavigationContent } = useTabsWithChildren({ children })

 return <NavigationContent />
}
```

### `useTabsWithTriggers(options)`

  

Alternative hook version of `Tabs` that uses explicit triggers instead of `children`.

> See: [`Tabs`](#tabs) for the component version of this hook.

Example

```
export function MyTabs({ children }) {
  const { NavigationContent } = useTabsWithChildren({ triggers: [] })

  return <NavigationContent />
}
```

### `useTabTrigger(options)`

  

Utility hook creating custom `TabTrigger`.

## Types

### `ExpoTabsNavigatorScreenOptions`

### `ExpoTabsResetValue`

Literal Type: `string`

Acceptable values are: `'always'` | `'onFocus'` | `'never'`

### `ExpoTabsScreenOptions`

Type: `[Pick](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys)<[BottomTabNavigationOptions](#bottomtabnavigationoptions), 'title' | 'lazy' | 'freezeOnBlur'>` extended by:

### `SwitchToOptions`

Options for `switchTab` function.

### `TabNavigationEventMap`

### `TabsContextValue`

Type: `[ReturnType](#returntype)<useNavigationBuilder>`

The React Navigation custom navigator.

> See: [`useNavigationBuilder`](https://reactnavigation.org/docs/custom-navigators/#usenavigationbuilder) hook from React Navigation for more information.

### `TabsSlotRenderOptions`

Options provided to the `UseTabSlotOptions`.

### `TabTriggerOptions`

### `Trigger`

Type: extended by:

### `UseTabsWithChildrenOptions`

Type: `PropsWithChildren<[UseTabsOptions](#usetabsoptions)>`

### `UseTabsWithTriggersOptions`

Type: `[UseTabsOptions](#usetabsoptions)` extended by:

### `UseTabTriggerResult`

---

# safe-area-context

A library with a flexible API for accessing the device's safe area inset information.

[](https://github.com/th3rdwave/react-native-safe-area-context)[](https://www.npmjs.com/package/react-native-safe-area-context)

`react-native-safe-area-context` provides a flexible API for accessing device safe area inset information. This allows you to position your content appropriately around notches, status bars, home indicators, and other such device and operating system interface elements. It also provides a `SafeAreaView` component that you can use in place of `View` to automatically inset your views to account for safe areas.

## Installation

`npx expo install react-native-safe-area-context`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/th3rdwave/react-native-safe-area-context#getting-started) provided in the library's README or documentation.

## API

```
import {
  SafeAreaView,
  SafeAreaProvider,
  SafeAreaInsetsContext,
  useSafeAreaInsets,
} from 'react-native-safe-area-context';
```

## Components

### `SafeAreaView`

`SafeAreaView` is a regular `View` component with the safe area edges applied as padding.

If you set your own padding on the view, it will be added to the padding from the safe area.

> If you are targeting web, you must set up `SafeAreaProvider` as described in the [Context](https://docs.expo.dev/versions/latest/sdk/safe-area-context#context) section.

```
import { SafeAreaView } from 'react-native-safe-area-context';

function SomeComponent() {
  return (
    <SafeAreaView>
      <View />
    </SafeAreaView>
  );
}
```

SafeAreaView Props

### `edges`

OptionalâType: [`Edge[]`](https://docs.expo.dev/versions/latest/sdk/safe-area-context#edge)âDefault: `["top", "right", "bottom", "left"]`

Sets the edges to apply the safe area insets to.

### `emulateUnlessSupported`

OptionalâType: `boolean`âDefault: `true`

On iOS 10+, emulate the safe area using the status bar height and home indicator sizes.

## Hooks

### `useSafeAreaInsets()`

Hook gives you direct access to the safe area insets. This is a more advanced use-case, and might perform worse than `SafeAreaView` when rotating the device.

Example

```
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function HookComponent() {
  const insets = useSafeAreaInsets();

  return <View style={{ paddingTop: insets.top }} />;
}
```

Returns

[`EdgeInsets`](https://docs.expo.dev/versions/latest/sdk/safe-area-context#edgeinsets)

## Types

### `Edge`

String union of possible edges.

Acceptable values are: `'top'`, `'right'`, `'bottom'`, `'left'`.

### `EdgeInsets`

Represent the hook result.

EdgeInsets Properties

## Guides

### Context

To use safe area context, you need to add `SafeAreaProvider` in your app root component.

> You may need to add it in other places too, including at the root of any modals any routes when using `react-native-screen`.

```
import { SafeAreaProvider } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider>...</SafeAreaProvider>;
}
```

Then, you can use [`useSafeAreaInsets()`](https://docs.expo.dev/versions/latest/sdk/safe-area-context#usesafeareainsets) hook and also consumer API to access inset data:

```
import { SafeAreaInsetsContext } from 'react-native-safe-area-context';

function Component() {
  return (
    <SafeAreaInsetsContext.Consumer>
      {insets => <View style={{ paddingTop: insets.top }} />}
    </SafeAreaInsetsContext.Consumer>
  );
}
```

### Optimization

If you can, use `SafeAreaView`. It's implemented natively so when rotating the device, there is no delay from the asynchronous bridge.

To speed up the initial render, you can import `initialWindowMetrics` from this package and set as the `initialMetrics` prop on the provider as described in Web SSR. You cannot do this if your provider remounts, or you are using `react-native-navigation`.

```
import { SafeAreaProvider, initialWindowMetrics } from 'react-native-safe-area-context';

function App() {
  return <SafeAreaProvider initialMetrics={initialWindowMetrics}>...</SafeAreaProvider>;
}
```

### Web SSR

If you are doing server side rendering on the web, you can use `initialSafeAreaInsets` to inject values based on the device the user has, or simply pass zero. Otherwise, insets measurement will break rendering your page content since it is async.

### Migrating from CSS

#### Before

In a web-only app, you would use CSS environment variables to get the size of the screen's safe area insets.

```
div {
  padding-top: env(safe-area-inset-top);
  padding-left: env(safe-area-inset-left);
  padding-bottom: env(safe-area-inset-bottom);
  padding-right: env(safe-area-inset-right);
}
```

#### After

Universally, the hook `useSafeAreaInsets()` can provide access to this information.

```
import { useSafeAreaInsets } from 'react-native-safe-area-context';

function App() {
  const insets = useSafeAreaInsets();
  return (
    <View
      style={{
        paddingTop: insets.top,
        paddingLeft: insets.left,
        paddingBottom: insets.bottom,
        paddingRight: insets.right,
      }}
    />
  );
}
```


---

# screen-capture

A library that allows you to protect screens in your app from being captured or recorded.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-screen-capture)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-screen-capture/CHANGELOG.md)[](https://www.npmjs.com/package/expo-screen-capture)

`expo-screen-capture` allows you to protect screens in your app from being captured or recorded, as well as be notified if a screenshot is taken while your app is foregrounded. The two most common reasons you may want to prevent screen capture are:

*   If a screen is displaying sensitive information (password, credit card data, and so on)
*   You are displaying paid content that you don't want to be recorded and shared

This is especially important on Android since the [`android.media.projection`](https://developer.android.com/about/versions/android-5.0.html#ScreenCapture) API allows third-party apps to perform screen capture or screen sharing (even if the app is in the background).

On Android, the screen capture callback works without additional permissions only for Android 14+. You don't need to request or check permissions for blocking screen capture or using the callback on Android 14+.

If you want to use the screen capture callback on Android 13 or lower, you need to add the `READ_MEDIA_IMAGES` permission to your AndroidManifest.xml file. You can use the `android.permissions` key in your app config. See [Android permissions](https://docs.expo.dev/guides/permissions#android) for more information.

> The `READ_MEDIA_IMAGES` permission can be added only for apps needing broad access to photos. See [Details on Google Play's Photo and Video Permissions policy](https://support.google.com/googleplay/android-developer/answer/14115180).

> Currently, taking screenshots on iOS cannot be prevented. This is due to underlying OS limitations.

> For testing screen capture functionality: On Android Emulator, run `adb shell input keyevent 120` in a separate terminal to trigger a screenshot. On iOS Simulator, you can trigger screenshots using Device > Trigger Screenshot from the menu bar.

## Installation

`npx expo install expo-screen-capture`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

### Example: hook

```
import { usePreventScreenCapture } from 'expo-screen-capture';
import { Text, View } from 'react-native';

export default function ScreenCaptureExample() {
  usePreventScreenCapture();

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      <Text>As long as this component is mounted, this screen is unrecordable!</Text>
    </View>
  );
}
```

### Example: Blocking screen capture imperatively

```
import * as ScreenCapture from 'expo-screen-capture';
import { useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';

export default function ScreenCaptureExample() {
  const activate = async () => {
    await ScreenCapture.preventScreenCaptureAsync();
  };

  const deactivate = async () => {
    await ScreenCapture.allowScreenCaptureAsync();
  };

  return (
    <View style={styles.container}>
      <Button title="Activate" onPress={activate} />
      <Button title="Deactivate" onPress={deactivate} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
```

### Example: Callback for screen capture

```
import * as ScreenCapture from 'expo-screen-capture';
import { useEffect } from 'react';
import { Button, StyleSheet, View } from 'react-native';

export default function useScreenCaptureCallback() {
  // Only use this if you add the READ_MEDIA_IMAGES permission to your AndroidManifest.xml
  const hasPermissions = async () => {
    const { status } = await ScreenCapture.requestPermissionsAsync();
    return status === 'granted';
  };

  useEffect(() => {
    let subscription;

    const addListenerAsync = async () => {
      if (await hasPermissions()) {
        subscription = ScreenCapture.addScreenshotListener(() => {
          alert('Thanks for screenshotting my beautiful app ð');
        });
      } else {
        console.error('Permissions needed to subscribe to screenshot events are missing!');
      }
    };
    addListenerAsync();

    return () => {
      subscription?.remove();
    };
  }, []);
}
```

## API

```
import * as ScreenCapture from 'expo-screen-capture';
```

## Hooks

### `usePermissions(options)`

  

Check or request permissions necessary for detecting when a screenshot is taken. This uses both [`requestPermissionsAsync`](#screencapturerequestpermissionsasync) and [`getPermissionsAsync`](#screencapturegetpermissionsasync) to interact with the permissions.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = ScreenCapture.usePermissions();
```

### `usePreventScreenCapture(key)`

  

A React hook to prevent screen capturing for as long as the owner component is mounted.

## Methods

### `ScreenCapture.allowScreenCaptureAsync(key)`

  

Re-allows the user to screen record or screenshot your app. If you haven't called `preventScreenCapture()` yet, this method does nothing.

### `ScreenCapture.getPermissionsAsync()`

Checks user's permissions for detecting when a screenshot is taken.

> Only Android requires additional permissions to detect screenshots. On iOS devices, this method will always resolve to a `granted` permission response.

A promise that resolves to a [`PermissionResponse`](#permissionresponse) object.

### `ScreenCapture.isAvailableAsync()`

Returns whether the Screen Capture API is available on the current device.

A promise that resolves to a `boolean` indicating whether the Screen Capture API is available on the current device.

### `ScreenCapture.preventScreenCaptureAsync(key)`

  

Prevents screenshots and screen recordings until `allowScreenCaptureAsync` is called or the app is restarted. If you are already preventing screen capture, this method does nothing (unless you pass a new and unique `key`).

> Please note that on iOS, this will only prevent screen recordings, and is only available on iOS 11 and newer. On older iOS versions, this method does nothing.

### `ScreenCapture.requestPermissionsAsync()`

Asks the user to grant permissions necessary for detecting when a screenshot is taken.

> Only Android requires additional permissions to detect screenshots. On iOS devices, this method will always resolve to a `granted` permission response.

A promise that resolves to a [`PermissionResponse`](#permissionresponse) object.

## Event Subscriptions

### `ScreenCapture.addScreenshotListener(listener)`

  

Adds a listener that will fire whenever the user takes a screenshot while the app is foregrounded. On Android, this method requires the `READ_EXTERNAL_STORAGE` permission. You can request this with [`MediaLibrary.requestPermissionsAsync()`](https://docs.expo.dev/versions/latest/sdk/media-library#medialibraryrequestpermissionsasync).

A `Subscription` object that you can use to unregister the listener, either by calling `remove()` or passing it to `removeScreenshotListener`.

### `ScreenCapture.removeScreenshotListener(subscription)`

  

Removes the subscription you provide, so that you are no longer listening for screenshots. You can also call `remove()` on that `Subscription` object.

Example

```
let mySubscription = addScreenshotListener(() => {
  console.log("You took a screenshot!");
});
...
mySubscription.remove();
// OR
removeScreenshotListener(mySubscription);
```

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

An object obtained by permissions get and request functions.

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

---

# screen-orientation

A universal library for managing a device's screen orientation.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-screen-orientation)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-screen-orientation/CHANGELOG.md)[](https://www.npmjs.com/package/expo-screen-orientation)

Screen Orientation is defined as the orientation in which graphics are painted on the device. For example, the figure below has a device in a vertical and horizontal physical orientation, but a portrait screen orientation. For physical device orientation, see the orientation section of [Device Motion](https://docs.expo.dev/versions/latest/sdk/devicemotion).

On both Android and iOS platforms, changes to the screen orientation will override any system settings or user preferences. On Android, it is possible to change the screen orientation while taking the user's preferred orientation into account. On iOS, user and system settings are not accessible by the application and any changes to the screen orientation will override existing settings.

## Installation

`npx expo install expo-screen-orientation`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

### Warning

Apple added support for _split view_ mode to iPads in iOS 9. This changed how the screen orientation is handled by the system. To put the matter shortly, for iOS, your iPad is always in landscape mode unless you open two applications side by side. To be able to lock screen orientation using this module you will need to disable support for this feature. For more information about the _split view_ mode, check out [the official Apple documentation](https://support.apple.com/en-us/HT207582).

## Configuration in app config

You can configure `expo-screen-orientation` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "ios": {
      "requireFullScreen": true
    },
    "plugins": [
      [
        "expo-screen-orientation",
        {
          "initialOrientation": "DEFAULT"
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## API

```
import * as ScreenOrientation from 'expo-screen-orientation';
```

## Methods

### `ScreenOrientation.getOrientationAsync()`

Gets the current screen orientation.

Returns a promise that fulfils with an [`Orientation`](#orientation) value that reflects the current screen orientation.

### `ScreenOrientation.getOrientationLockAsync()`

Gets the current screen orientation lock type.

Returns a promise which fulfils with an [`OrientationLock`](#orientationlock) value.

### `ScreenOrientation.getPlatformOrientationLockAsync()`

Gets the platform specific screen orientation lock type.

Returns a promise which fulfils with a [`PlatformOrientationInfo`](#platformorientationinfo) value.

### `ScreenOrientation.lockAsync(orientationLock)`

  

Lock the screen orientation to a particular `OrientationLock`.

Returns a promise with `void` value, which fulfils when the orientation is set.

Example

```
async function changeScreenOrientation() {
  await ScreenOrientation.lockAsync(ScreenOrientation.OrientationLock.LANDSCAPE_LEFT);
}
```

### `ScreenOrientation.lockPlatformAsync(options)`

  

Returns a promise with `void` value, resolving when the orientation is set and rejecting if an invalid option or value is passed.

### `ScreenOrientation.supportsOrientationLockAsync(orientationLock)`

  

Returns whether the [`OrientationLock`](#orientationlock) policy is supported on the device.

Returns a promise that resolves to a `boolean` value that reflects whether or not the orientationLock is supported.

### `ScreenOrientation.unlockAsync()`

Sets the screen orientation back to the `OrientationLock.DEFAULT` policy.

Returns a promise with `void` value, which fulfils when the orientation is set.

## Event Subscriptions

### `ScreenOrientation.addOrientationChangeListener(listener)`

  

Invokes the `listener` function when the screen orientation changes from `portrait` to `landscape` or from `landscape` to `portrait`. For example, it won't be invoked when screen orientation change from `portrait up` to `portrait down`, but it will be called when there was a change from `portrait up` to `landscape left`.

### `ScreenOrientation.removeOrientationChangeListener(subscription)`

  

Unsubscribes the listener associated with the `Subscription` object from all orientation change updates.

### `ScreenOrientation.removeOrientationChangeListeners()`

Removes all listeners subscribed to orientation change updates.

## Interfaces

### `Subscription`

A subscription object that allows to conveniently remove an event listener from the emitter.

Subscription Methods

### `remove()`

Removes an event listener for which the subscription has been created. After calling this function, the listener will no longer receive any events from the emitter.

## Types

### `OrientationChangeEvent`

### `OrientationChangeListener(event)`

### `PlatformOrientationInfo`

### `ScreenOrientationInfo`

## Enums

### `Orientation`

#### `UNKNOWN`

`Orientation.UNKNOWN ï¼ 0`

An unknown screen orientation. For example, the device is flat, perhaps on a table.

#### `PORTRAIT_UP`

`Orientation.PORTRAIT_UP ï¼ 1`

Right-side up portrait interface orientation.

#### `PORTRAIT_DOWN`

`Orientation.PORTRAIT_DOWN ï¼ 2`

Upside down portrait interface orientation.

#### `LANDSCAPE_LEFT`

`Orientation.LANDSCAPE_LEFT ï¼ 3`

Left landscape interface orientation.

#### `LANDSCAPE_RIGHT`

`Orientation.LANDSCAPE_RIGHT ï¼ 4`

Right landscape interface orientation.

### `OrientationLock`

An enum whose values can be passed to the [`lockAsync`](#screenorientationlockasyncorientationlock) method.

> Note: `OrientationLock.ALL` and `OrientationLock.PORTRAIT` are invalid on devices which don't support `OrientationLock.PORTRAIT_DOWN`.

#### `DEFAULT`

`OrientationLock.DEFAULT ï¼ 0`

The default orientation. On iOS, this will allow all orientations except `Orientation.PORTRAIT_DOWN`. On Android, this lets the system decide the best orientation.

#### `ALL`

`OrientationLock.ALL ï¼ 1`

All four possible orientations

#### `PORTRAIT`

`OrientationLock.PORTRAIT ï¼ 2`

Any portrait orientation.

#### `PORTRAIT_UP`

`OrientationLock.PORTRAIT_UP ï¼ 3`

Right-side up portrait only.

#### `PORTRAIT_DOWN`

`OrientationLock.PORTRAIT_DOWN ï¼ 4`

Upside down portrait only.

#### `LANDSCAPE`

`OrientationLock.LANDSCAPE ï¼ 5`

Any landscape orientation.

#### `LANDSCAPE_LEFT`

`OrientationLock.LANDSCAPE_LEFT ï¼ 6`

Left landscape only.

#### `LANDSCAPE_RIGHT`

`OrientationLock.LANDSCAPE_RIGHT ï¼ 7`

Right landscape only.

#### `OTHER`

`OrientationLock.OTHER ï¼ 8`

A platform specific orientation. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).

#### `UNKNOWN`

`OrientationLock.UNKNOWN ï¼ 9`

An unknown screen orientation lock. This is not a valid policy that can be applied in [`lockAsync`](#screenorientationlockasyncorientationlock).

### `SizeClassIOS`

Each iOS device has a default set of [size classes](https://developer.apple.com/documentation/uikit/uiuserinterfacesizeclass) that you can use as a guide when designing your interface.

#### `UNKNOWN`

`SizeClassIOS.UNKNOWN ï¼ 0`

#### `COMPACT`

`SizeClassIOS.COMPACT ï¼ 1`

#### `REGULAR`

`SizeClassIOS.REGULAR ï¼ 2`

### `WebOrientation`

#### `LANDSCAPE_PRIMARY`

`WebOrientation.LANDSCAPE_PRIMARY ï¼ "landscape-primary"`

#### `LANDSCAPE_SECONDARY`

`WebOrientation.LANDSCAPE_SECONDARY ï¼ "landscape-secondary"`

#### `PORTRAIT_PRIMARY`

`WebOrientation.PORTRAIT_PRIMARY ï¼ "portrait-primary"`

#### `PORTRAIT_SECONDARY`

`WebOrientation.PORTRAIT_SECONDARY ï¼ "portrait-secondary"`

### `WebOrientationLock`

An enum representing the lock policies that can be applied on the web platform, modelled after the [W3C specification](https://w3c.github.io/screen-orientation/#dom-orientationlocktype). These values can be applied through the [`lockPlatformAsync`](#screenorientationlockplatformasyncoptions) method.

#### `ANY`

`WebOrientationLock.ANY ï¼ "any"`

#### `LANDSCAPE`

`WebOrientationLock.LANDSCAPE ï¼ "landscape"`

#### `LANDSCAPE_PRIMARY`

`WebOrientationLock.LANDSCAPE_PRIMARY ï¼ "landscape-primary"`

#### `LANDSCAPE_SECONDARY`

`WebOrientationLock.LANDSCAPE_SECONDARY ï¼ "landscape-secondary"`

#### `NATURAL`

`WebOrientationLock.NATURAL ï¼ "natural"`

#### `PORTRAIT`

`WebOrientationLock.PORTRAIT ï¼ "portrait"`

#### `PORTRAIT_PRIMARY`

`WebOrientationLock.PORTRAIT_PRIMARY ï¼ "portrait-primary"`

#### `PORTRAIT_SECONDARY`

`WebOrientationLock.PORTRAIT_SECONDARY ï¼ "portrait-secondary"`

#### `UNKNOWN`

`WebOrientationLock.UNKNOWN ï¼ "unknown"`

---

# screens

A library that provides native primitives to represent screens for better operating system behavior and screen optimizations.

[](https://github.com/software-mansion/react-native-screens)[](https://www.npmjs.com/package/react-native-screens)

`react-native-screens` provides native primitives to represent screens instead of plain `<View>` components To better take advantage of operating system behavior and optimizations around screens. This capability is used by library authors and is unlikely to be used directly by most app developers. It also provides the native components needed for React Navigation's [`createNativeStackNavigator`](https://reactnavigation.org/docs/native-stack-navigator).

## Installation

`npx expo install react-native-screens`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/software-mansion/react-native-screens#installation) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://docs.swmansion.com/react-native-screens/)

---

# securestore

## Expo SecureStore

A library that provides a way to encrypt and securely store key-value pairs locally on the device.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-secure-store)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-secure-store/CHANGELOG.md)[](https://www.npmjs.com/package/expo-secure-store)

`expo-secure-store` provides a way to encrypt and securely store key-value pairs locally on the device. Each Expo project has a separate storage system and has no access to the storage of other Expo projects.

Size limit for a value is 2048 bytes. An attempt to store larger values may fail. Currently, we print a warning when the limit is reached, however, in a future SDK version an error might be thrown.

The `requireAuthentication` option is not supported in Expo Go when biometric authentication is available due to a missing `NSFaceIDUsageDescription` key.

> This API is not compatible with devices running Android 5 or lower.

## Installation

`npx expo install expo-secure-store`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-secure-store` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-secure-store",
        {
          "configureAndroidBackup": true,
          "faceIDPermission": "Allow $(PRODUCT_NAME) to access your Face ID biometric data."
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Platform value storage

### Android

On Android, values are stored in [`SharedPreferences`](https://developer.android.com/training/data-storage/shared-preferences), encrypted with [Android's Keystore system](https://developer.android.com/training/articles/keystore.html).

### iOS

> For iOS standalone apps, data stored with `expo-secure-store` can persist across app installs.

On iOS, values are stored using the [keychain services](https://developer.apple.com/documentation/security/keychain_services) as `kSecClassGenericPassword`. iOS has the additional option of being able to set the value's `kSecAttrAccessible` attribute, which controls when the value is available to be fetched.

## Data persistence

`expo-secure-store` is designed to provide a persistent data storage solution across app restarts and updates. However, it is important not to rely on it as a single source of truth for irreplaceable, critical data. Data saved using `expo-secure-store` will not be preserved upon app uninstallation. Additionally, any data protected with the `requireAuthentication` option set to `true` will become inaccessible if there are changes to the user's biometric settings, such as adding a new fingerprint.

#### Exempting encryption prompt

Apple App Store Connect prompts you to select the type of encryption algorithm your app implements. This is known as Export Compliance Information. It is asked when publishing the app or submitting for TestFlight.

When using `expo-secure-store`, you can set the [`ios.config.usesNonExemptEncryption`](https://docs.expo.dev/versions/latest/config/app#usesnonexemptencryption) property to `false` in the app config:

```
{
  "expo": {
    "ios": {
      "config": {
        "usesNonExemptEncryption": false
      }
      %%placeholder-start%%... %%placeholder-end%%
    }
  }
}
```

Setting this property automatically handles the compliance information prompt.

## Android Auto Backup

[Android Auto Backup for Apps](https://developer.android.com/identity/data/autobackup) automatically backs up a user's data from apps that target and run on Android 6.0 (API level 23) or higher.

The Auto Backup system has to be configured to exclude `expo-secure-store` shared preferences entries, as it's impossible to decrypt them after restoring the backup â app's entries are deleted from the Android Key Store when the app is uninstalled.

If your app doesn't have any custom backup configuration, `expo-secure-store` will automatically configure the Auto Backup system to ignore the `expo-secure-store` data.

If you are using your own Auto Backup configuration, you should exclude the `SecureStore` under the `sharedpref` domain and set the `configureAndroidBackup` to `false` in the [config plugin configuration](https://docs.expo.dev/versions/latest/sdk/securestore#example-appjson-with-config-plugin).

```
<!--  Auto Backup configuration for Android 12 and higher -->
<data-extraction-rules>
  <cloud-backup>
    <include domain="sharedpref" path="."/>
    <exclude domain="sharedpref" path="SecureStore"/>
  </cloud-backup>
  <device-transfer>
    <include domain="sharedpref" path="."/>
    <exclude domain="sharedpref" path="SecureStore"/>
  </device-transfer>
</data-extraction-rules>
```

```
<!--  Auto Backup configuration for Android 11 and lower -->
<full-backup-content>
  <include domain="sharedpref" path="."/>
  <exclude domain="sharedpref" path="SecureStore"/>
</full-backup-content>
```

## Usage

```
import { useState } from 'react';
import { Text, View, StyleSheet, TextInput, Button } from 'react-native';
import * as SecureStore from 'expo-secure-store';

async function save(key, value) {
  await SecureStore.setItemAsync(key, value);
}

async function getValueFor(key) {
  let result = await SecureStore.getItemAsync(key);
  if (result) {
    alert("ð Here's your value ð \n" + result);
  } else {
    alert('No values stored under that key.');
  }
}

export default function App() {
  const [key, onChangeKey] = useState('Your key here');
  const [value, onChangeValue] = useState('Your value here');

  return (
    <View style={styles.container}>
      <Text style={styles.paragraph}>Save an item, and grab it later!</Text>
      {%%placeholder-start%%Add some TextInput components... %%placeholder-end%%}

      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeKey(text)}
        value={key}
      />
      <TextInput
        style={styles.textInput}
        clearTextOnFocus
        onChangeText={text => onChangeValue(text)}
        value={value}
      />
      {}
      <Button
        title="Save this key/value pair"
        onPress={() => {
          save(key, value);
          onChangeKey('Your key here');
          onChangeValue('Your value here');
        }}
      />
      <Text style={styles.paragraph}>ð Enter your key ð</Text>
      <TextInput
        style={styles.textInput}
        onSubmitEditing={event => {
          getValueFor(event.nativeEvent.text);
        }}
        placeholder="Enter the key for the value you want to get"
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 10,
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
  paragraph: {
    marginTop: 34,
    margin: 24,
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  textInput: {
    height: 35,
    borderColor: 'gray',
    borderWidth: 0.5,
    padding: 4,
  },
});
```

## API

```
import * as SecureStore from 'expo-secure-store';
```

## Constants

### `SecureStore.AFTER_FIRST_UNLOCK`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

The data in the keychain item cannot be accessed after a restart until the device has been unlocked once by the user. This may be useful if you need to access the item when the phone is locked.

### `SecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

Similar to `AFTER_FIRST_UNLOCK`, except the entry is not migrated to a new device when restoring from a backup.

> Deprecated Use an accessibility level that provides some user protection, such as `AFTER_FIRST_UNLOCK`.

### `SecureStore.ALWAYS`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

The data in the keychain item can always be accessed regardless of whether the device is locked. This is the least secure option.

> Deprecated Use an accessibility level that provides some user protection, such as `AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY`.

### `SecureStore.ALWAYS_THIS_DEVICE_ONLY`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

Similar to `ALWAYS`, except the entry is not migrated to a new device when restoring from a backup.

### `SecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

Similar to `WHEN_UNLOCKED_THIS_DEVICE_ONLY`, except the user must have set a passcode in order to store an entry. If the user removes their passcode, the entry will be deleted.

### `SecureStore.WHEN_UNLOCKED`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

The data in the keychain item can be accessed only while the device is unlocked by the user.

### `SecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY`

Type: `[KeychainAccessibilityConstant](#keychainaccessibilityconstant)`

Similar to `WHEN_UNLOCKED`, except the entry is not migrated to a new device when restoring from a backup.

## Methods

### `SecureStore.canUseBiometricAuthentication()`

Checks if the value can be saved with `requireAuthentication` option enabled.

`true` if the device supports biometric authentication and the enrolled method is sufficiently secure. Otherwise, returns `false`. Always returns false on tvOS.

### `SecureStore.deleteItemAsync(key, options)`

  

Delete the value associated with the provided key.

A promise that rejects if the value can't be deleted.

### `SecureStore.getItem(key, options)`

  

Synchronously reads the stored value associated with the provided key.

> Note: This function blocks the JavaScript thread, so the application may not be interactive when reading a value with `requireAuthentication` option set to `true` until the user authenticates.

Previously stored value. It resolves with `null` if there is no entry for the given key or if the key has been invalidated.

### `SecureStore.getItemAsync(key, options)`

  

Reads the stored value associated with the provided key.

A promise that resolves to the previously stored value. It resolves with `null` if there is no entry for the given key or if the key has been invalidated. It rejects if an error occurs while retrieving the value.

> Keys are invalidated by the system when biometrics change, such as adding a new fingerprint or changing the face profile used for face recognition. After a key has been invalidated, it becomes impossible to read its value. This only applies to values stored with `requireAuthentication` set to `true`.

### `SecureStore.isAvailableAsync()`

Returns whether the SecureStore API is enabled on the current device. This does not check the app permissions.

Promise which fulfils with a `boolean`, indicating whether the SecureStore API is available on the current device. Currently, this resolves `true` on Android and iOS only.

### `SecureStore.setItem(key, value, options)`

  

Stores a keyâvalue pair synchronously.

> Note: This function blocks the JavaScript thread, so the application may not be interactive when the `requireAuthentication` option is set to `true` until the user authenticates.

### `SecureStore.setItemAsync(key, value, options)`

  

Stores a keyâvalue pair.

A promise that rejects if value cannot be stored on the device.

## Types

### `KeychainAccessibilityConstant`

Type: `number`

### `SecureStoreOptions`

---

# segmented-control

A React Native library that provides a component to render UISegmentedControl from iOS.

[](https://github.com/react-native-community/segmented-control)[](https://www.npmjs.com/package/@react-native-segmented-control/segmented-control)

It's like a fancy radio button, or in Apple's words: "A horizontal control that consists of multiple segments, each segment functioning as a discrete button" ([source](https://developer.apple.com/documentation/uikit/uisegmentedcontrol)). This component renders to a [`UISegmentedControl`](https://developer.apple.com/documentation/uikit/uisegmentedcontrol) on iOS, and to faithful recreations of that control on Android and web (because no equivalent exists on those platforms' standard libraries).

## Installation

`npx expo install @react-native-segmented-control/segmented-control`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/react-native-segmented-control/segmented-control#getting-started) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/react-native-community/segmented-control)

---

# sensors

## Expo Sensors

A library that provides access to a device's accelerometer, barometer, motion, gyroscope, light, magnetometer, and pedometer.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sensors/CHANGELOG.md)[](https://www.npmjs.com/package/expo-sensors)

`expo-sensors` provide various APIs for accessing device sensors to measure motion, orientation, pressure, magnetic fields, ambient light, and step count.

## Installation

`npx expo install expo-sensors`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-sensors` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-sensors",
        {
          "motionPermission": "Allow $(PRODUCT_NAME) to access your device motion"
        }
      ]
    ]
  }
}
```

### Configurable properties

## API

```
import * as Sensors from 'expo-sensors';
// OR
import {
  Accelerometer,
  Barometer,
  DeviceMotion,
  Gyroscope,
  LightSensor,
  Magnetometer,
  MagnetometerUncalibrated,
  Pedometer,
} from 'expo-sensors';
```

## Permissions

### Android

Starting in Android 12 (API level 31), the system has a 200Hz limit for each sensor updates.

If you need an update interval of less than 200Hz, you must add the following permissions to your app.json inside the [`expo.android.permissions`](https://docs.expo.dev/versions/latest/config/app#permissions) array.

Are you using this library in an existing React Native app?

### iOS

The following usage description keys are used by this library:

## Available sensors

For more information, see the documentation for the sensor you are interested in:

[

Accelerometer

Measures device acceleration on all platforms.

](https://docs.expo.dev/versions/latest/sdk/accelerometer)[

Barometer

Measures pressure on Android and iOS platforms.

](https://docs.expo.dev/versions/latest/sdk/barometer)[

DeviceMotion

Measures device motion on all platforms.

](https://docs.expo.dev/versions/latest/sdk/devicemotion)[

Gyroscope

Measures device rotation on all platforms.

](https://docs.expo.dev/versions/latest/sdk/gyroscope)[

Magnetometer

Measures magnetic fields on Android and iOS platforms.

](https://docs.expo.dev/versions/latest/sdk/magnetometer)[

LightSensor

Measures ambient light on Android platform.

](https://docs.expo.dev/versions/latest/sdk/light-sensor)[

Pedometer

Measures steps count on Android and iOS platforms.

](https://docs.expo.dev/versions/latest/sdk/pedometer)

---

# sharing

## Expo Sharing

A library that provides implementing sharing files.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sharing)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sharing/CHANGELOG.md)[](https://www.npmjs.com/package/expo-sharing)

`expo-sharing` allows you to share files directly with other compatible applications.

#### Sharing limitations on web

*   `expo-sharing` for web is built on top of the Web Share API, which still has [very limited browser support](https://caniuse.com/#feat=web-share). Be sure to check that the API can be used before calling it by using `Sharing.isAvailableAsync()`.
*   HTTPS required on web: The Web Share API is only available on web when the page is served over https. Run your app with `npx expo start --tunnel` to enable it.
*   No local file sharing on web: Sharing local files by URI works on Android and iOS, but not on web. You cannot share local files on web by URI â you will need to upload them somewhere and share that URI.

#### Sharing to your app from other apps

Currently `expo-sharing` only supports sharing _from your app to other apps_ and you cannot register to your app to have content shared to it through the native share dialog on native platforms. You can read more [in the related feature request](https://expo.canny.io/feature-requests/p/share-extension-ios-share-intent-android). You can setup this functionality manually in Xcode and Android Studio and create an [Expo Config Plugin](https://docs.expo.dev/config-plugins/introduction) to continue using [Expo Prebuild](https://docs.expo.dev/workflow/prebuild).

## Installation

`npx expo install expo-sharing`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import * as Sharing from 'expo-sharing';
```

## Methods

### `Sharing.isAvailableAsync()`

Determine if the sharing API can be used in this app.

A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.

### `Sharing.shareAsync(url, options)`

| Parameter | Type | Description |
| --- | --- | --- |
| url | `string` | 
Local file URL to share.

 |
| options(optional) | `[SharingOptions](#sharingoptions)` | 

A map of share options.

Default:`{}`

 |

  

Opens action sheet to share file to different applications which can handle this type of file.

## Types

### `SharingOptions`

| Property | Type | Description |
| --- | --- | --- |
| anchor(optional) | `{ height: number, width: number, x: number, y: number }` | 
Only for: iOS

  

set the anchor point for iPad

 |
| dialogTitle(optional) | `string` | 

Only for: Android, Web

  

Sets share dialog title.

 |
| mimeType(optional) | `string` | 

Only for: Android

  

Sets `mimeType` for `Intent`.

 |
| UTI(optional) | `string` | 

Only for: iOS

  

[Uniform Type Identifier](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html)

*   the type of the target file.

 |

---

# skia

[](https://github.com/shopify/react-native-skia)

[

GitHub

](https://github.com/shopify/react-native-skia)

[

npm

](https://www.npmjs.com/package/@shopify/react-native-skia)

A React Native library for creating graphics using Skia.

[

GitHub

](https://github.com/shopify/react-native-skia)[

npm

](https://www.npmjs.com/package/@shopify/react-native-skia)

Android

iOS

Web

Bundled version:

V2.0.0-next.4

`@shopify/react-native-skia` brings the Skia Graphics Library to React Native. Skia serves as the graphics engine for Google Chrome and Chrome OS, Android, Flutter, Mozilla Firefox and Firefox OS, and many other products.

## Installation

Terminal

`npx expo install @shopify/react-native-skia`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://shopify.github.io/react-native-skia/docs/getting-started/installation/) provided in the library's README or documentation.

### Web

If you want to use Skia on web, you will need to follow [web installation instructions](https://shopify.github.io/react-native-skia/docs/getting-started/web/#expo) to load CanvasKit.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://shopify.github.io/react-native-skia/)

---

# slider

[](https://github.com/callstack/react-native-slider)

[

GitHub

](https://github.com/callstack/react-native-slider)

[

npm

](https://www.npmjs.com/package/@react-native-community/slider)

A React Native component library that provides access to the system UI for a slider control.

[

GitHub

](https://github.com/callstack/react-native-slider)[

npm

](https://www.npmjs.com/package/@react-native-community/slider)

Android

iOS

Web

Bundled version:

4.5.6

A component library that provides access to the system UI for a slider control, that allows users to pick among a range of values by dragging an anchor.

## Installation

Terminal

`npx expo install @react-native-community/slider`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/callstack/react-native-slider#installation--usage) provided in the library's README or documentation.

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/callstack/react-native-slider)

---

# sms

## Expo SMS

A library that provides access to the system's UI/app for sending SMS messages.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sms)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sms/CHANGELOG.md)[](https://www.npmjs.com/package/expo-sms)

`expo-sms` provides access to the system's UI/app for sending SMS messages.

## Installation

`npx expo install expo-sms`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import * as SMS from 'expo-sms';
```

## Methods

### `SMS.isAvailableAsync()`

Determines whether SMS is available. Always returns `false` in the iOS simulator, and in browser.

Returns a promise that fulfils with a `boolean`, indicating whether SMS is available on this device.

Example

```
const isAvailable = await SMS.isAvailableAsync();
if (isAvailable) {
  // do your SMS stuff here
} else {
  // misfortune... there's no SMS available on this device
}
```

### `SMS.sendSMSAsync(addresses, message, options)`

  

Opens the default UI/app for sending SMS messages with prefilled addresses and message.

Returns a Promise that fulfils with the SMS action is invoked by the user, with corresponding result:

*   If the user cancelled the SMS sending process: `{ result: 'cancelled' }`.
*   If the user has sent/scheduled message for sending: `{ result: 'sent' }`.
*   If the status of the SMS message cannot be determined: `{ result: 'unknown' }`.

Android does not provide information about the status of the SMS message, so on Android devices the Promise will always resolve with `{ result: 'unknown' }`.

> Note: The only feedback collected by this module is whether any message has been sent. That means we do not check actual content of message nor recipients list.

Example

```
const { result } = await SMS.sendSMSAsync(
  ['0123456789', '9876543210'],
  'My sample HelloWorld message',
  {
    attachments: {
      uri: 'path/myfile.png',
      mimeType: 'image/png',
      filename: 'myfile.png',
    },
  }
);
```

## Types

### `SMSAttachment`

An object that is used to describe an attachment that is included with a SMS message.

### `SMSOptions`

### `SMSResponse`

---

# speech

## Expo Speech

A library that provides access to text-to-speech functionality.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-speech)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-speech/CHANGELOG.md)[](https://www.npmjs.com/package/expo-speech)

`expo-speech` provides an API that allows you to utilize Text-to-speech functionality in your app.

> On iOS physical devices, `expo-speech` won't produce sound if the device is in silent mode. Make sure silent mode is turned off.

## Installation

`npx expo install expo-speech`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { View, StyleSheet, Button } from 'react-native';
import * as Speech from 'expo-speech';

export default function App() {
  const speak = () => {
    const thingToSay = '1';
    Speech.speak(thingToSay);
  };

  return (
    <View style={styles.container}>
      <Button title="Press to hear some words" onPress={speak} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
    padding: 8,
  },
});
```

## API

```
import * as Speech from 'expo-speech';
```

## Constants

### `Speech.maxSpeechInputLength`

Type: `number`

Maximum possible text length acceptable by `Speech.speak()` method. It is platform-dependent. On iOS, this returns `Number.MAX_VALUE`.

## Methods

### `Speech.getAvailableVoicesAsync()`

Returns list of all available voices.

### `Speech.isSpeakingAsync()`

Determine whether the Text-to-speech utility is currently speaking. Will return `true` if speaker is paused.

Returns a Promise that fulfils with a boolean, `true` if speaking, `false` if not.

### `Speech.pause()`

Pauses current speech. This method is not available on Android.

### `Speech.resume()`

Resumes speaking previously paused speech or does nothing if there's none. This method is not available on Android.

### `Speech.speak(text, options)`

  

Speak out loud the text given options. Calling this when another text is being spoken adds an utterance to queue.

### `Speech.stop()`

Interrupts current speech and deletes all in queue.

## Types

### `SpeechEventCallback(this, ev)`

### `SpeechOptions`

### `Voice`

Object describing the available voices on the device.

### `WebVoice`

Type: `[Voice](#voice)` extended by:

## Enums

### `VoiceQuality`

Enum representing the voice quality.

#### `Default`

`VoiceQuality.Default ï¼ "Default"`

#### `Enhanced`

`VoiceQuality.Enhanced ï¼ "Enhanced"`

---

# splash-screen

A library that provides access to controlling the visibility behavior of native splash screen.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-splash-screen)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-splash-screen/CHANGELOG.md)[](https://www.npmjs.com/package/expo-splash-screen)

The `SplashScreen` module from the `expo-splash-screen` library is used to tell the splash screen to remain visible until it has been explicitly told to hide. This is useful to do tasks that will happen behind the scenes such as making API calls, pre-loading fonts, animating the splash screen and so on.

> From SDK 52, due to changes supporting the latest Android splash screen API, Expo Go and development builds cannot fully replicate the splash screen experience your users will see in your [standalone app](https://docs.expo.dev/more/glossary-of-terms#standalone-app). Expo Go will show your app icon instead of the splash screen, and the splash screen on development builds will not reflect all properties set in the config plugin. It is highly recommended that you test your splash screen on a release build to ensure it looks as expected.

Also, see the guide on [creating a splash screen image](https://docs.expo.dev/develop/user-interface/splash-screen-and-app-icon#splash-screen), or [quickly generate an icon and splash screen using your browser](https://buildicon.netlify.app/).

## Installation

`npx expo install expo-splash-screen`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

This example shows how to keep the splash screen visible while loading app resources and then hide the splash screen when the app has rendered some initial content.

```
import { useCallback, useEffect, useState } from 'react';
import { Text, View } from 'react-native';
import Entypo from '@expo/vector-icons/Entypo';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';

// Keep the splash screen visible while we fetch resources
SplashScreen.preventAutoHideAsync();

// Set the animation options. This is optional.
SplashScreen.setOptions({
  duration: 1000,
  fade: true,
});

export default function App() {
  const [appIsReady, setAppIsReady] = useState(false);

  useEffect(() => {
    async function prepare() {
      try {
        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync(Entypo.font);
        // Artificially delay for two seconds to simulate a slow loading
        // experience. Remove this if you copy and paste the code!
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (e) {
        console.warn(e);
      } finally {
        // Tell the application to render
        setAppIsReady(true);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = useCallback(() => {
    if (appIsReady) {
      // This tells the splash screen to hide immediately! If we call this after
      // `setAppIsReady`, then we may see a blank screen while the app is
      // loading its initial state and rendering its first pixels. So instead,
      // we hide the splash screen once we know the root view has already
      // performed layout.
      SplashScreen.hide();
    }
  }, [appIsReady]);

  if (!appIsReady) {
    return null;
  }

  return (
    <View
      style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}
      onLayout={onLayoutRootView}>
      <Text>SplashScreen Demo! ð</Text>
      <Entypo name="rocket" size={30} />
    </View>
  );
}
```

## Configuration

You can configure `expo-splash-screen` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.

Using the config plugin, as shown below, is the recommended method for configuring the splash screen. The other methods are now considered legacy and will be removed in the future.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-splash-screen",
        {
          "backgroundColor": "#232323",
          "image": "./assets/splash-icon.png",
          "dark": {
            "image": "./assets/splash-icon-dark.png",
            "backgroundColor": "#000000"
          },
          "imageWidth": 200
        }
      ]
    ],
  }
}
```

### Configurable properties

You can also configure `expo-splash-screen`, using the following [app config](https://docs.expo.dev/workflow/configuration) properties but the config plugin should be preferred.

Are you using this library in an existing React Native app?

### Animating the splash screen

`SplashScreen` provides an out-of-the-box fade animation. It can be configured using the `setOptions` method.

```
SplashScreen.setOptions({
  duration: 1000,
  fade: true,
});
```

If you prefer to use custom animation, see the [`with-splash-screen`](https://github.com/expo/examples/tree/master/with-splash-screen) example on how to apply any arbitrary animations to your splash screen. You can initialize a new project from this example by running `npx create-expo-app --example with-splash-screen`.

## API

```
import * as SplashScreen from 'expo-splash-screen';
```

## Methods

### `SplashScreen.hide()`

Hides the native splash screen immediately. Be careful to ensure that your app has content ready to display when you hide the splash screen, or you may see a blank screen briefly. See the ["Usage"](#usage) section for an example.

### `SplashScreen.hideAsync()`

Hides the native splash screen immediately. This method is provided for backwards compatability. See the ["Usage"](#usage) section for an example.

### `SplashScreen.preventAutoHideAsync()`

Makes the native splash screen (configured in `app.json`) remain visible until `hideAsync` is called.

> Important note: It is recommended to call this in global scope without awaiting, rather than inside React components or hooks, because otherwise this might be called too late, when the splash screen is already hidden.

Example

```
import * as SplashScreen from 'expo-splash-screen';

SplashScreen.preventAutoHideAsync();

export default function App() {
 // ...
}
```

### `SplashScreen.setOptions(options)`

  

Configures the splashscreens default animation behavior.

## Types

### `SplashScreenOptions`

---

# sqlite

## Expo SQLite

A library that provides access to a database that can be queried through a SQLite API.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sqlite)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-sqlite/CHANGELOG.md)[](https://www.npmjs.com/package/expo-sqlite)

`expo-sqlite` gives your app access to a database that can be queried through a SQLite API. The database is persisted across restarts of your app.

## Installation

`npx expo install expo-sqlite`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-sqlite` for advanced configurations using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-sqlite",
        {
          "enableFTS": true,
          "useSQLCipher": true,
          "android": {
            // Override the shared configuration for Android
            "enableFTS": false,
            "useSQLCipher": false
          },
          "ios": {
            // You can also override the shared configurations for iOS
            "customBuildFlags": ["-DSQLITE_ENABLE_DBSTAT_VTAB=1 -DSQLITE_ENABLE_SNAPSHOT=1"]
          }
        }
      ]
    ]
  }
}
```

### Configurable properties

## Web setup

> Web support is still experimental and may be unstable. [Create an issue on GitHub](https://github.com/expo/expo/issues) if you encounter any issues.

To use `expo-sqlite` on web, you need to configure Metro bundler to support wasm files and add HTTP headers to allow [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) usage.

Add the following configuration to your metro.config.js. If you don't have the metro.config.js yet, you can run `npx expo customize metro.config.js`. [Learn more](https://docs.expo.dev/guides/customizing-metro).

If you deploy your app to web hosting services, you will also need to add the `Cross-Origin-Embedder-Policy` and `Cross-Origin-Opener-Policy` headers to your web server. [Learn more about the `COEP`, `COOP` headers, and `SharedArrayBuffer`](https://developer.chrome.com/blog/enabling-shared-array-buffer/).

## Usage

Import the module from `expo-sqlite`.

```
import * as SQLite from 'expo-sqlite';
```

### Basic CRUD operations

```
const db = await SQLite.openDatabaseAsync('databaseName');

// `execAsync()` is useful for bulk queries when you want to execute altogether.
// Note that `execAsync()` does not escape parameters and may lead to SQL injection.
await db.execAsync(`
PRAGMA journal_mode = WAL;
CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
INSERT INTO test (value, intValue) VALUES ('test1', 123);
INSERT INTO test (value, intValue) VALUES ('test2', 456);
INSERT INTO test (value, intValue) VALUES ('test3', 789);
`);

// `runAsync()` is useful when you want to execute some write operations.
const result = await db.runAsync('INSERT INTO test (value, intValue) VALUES (?, ?)', 'aaa', 100);
console.log(result.lastInsertRowId, result.changes);
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', 999, 'aaa'); // Binding unnamed parameters from variadic arguments
await db.runAsync('UPDATE test SET intValue = ? WHERE value = ?', [999, 'aaa']); // Binding unnamed parameters from array
await db.runAsync('DELETE FROM test WHERE value = $value', { $value: 'aaa' }); // Binding named parameters from object

// `getFirstAsync()` is useful when you want to get a single row from the database.
const firstRow = await db.getFirstAsync('SELECT * FROM test');
console.log(firstRow.id, firstRow.value, firstRow.intValue);

// `getAllAsync()` is useful when you want to get all results as an array of objects.
const allRows = await db.getAllAsync('SELECT * FROM test');
for (const row of allRows) {
  console.log(row.id, row.value, row.intValue);
}

// `getEachAsync()` is useful when you want to iterate SQLite query cursor.
for await (const row of db.getEachAsync('SELECT * FROM test')) {
  console.log(row.id, row.value, row.intValue);
}
```

### Prepared statements

Prepared statements allow you to compile your SQL query once and execute it multiple times with different parameters. You can get a prepared statement by calling [`prepareAsync()`](https://docs.expo.dev/versions/latest/sdk/sqlite#prepareasyncsource) or [`prepareSync()`](https://docs.expo.dev/versions/latest/sdk/sqlite#preparesyncsource) method on a database instance. The prepared statement can fulfill CRUD operations by calling [`executeAsync()`](https://docs.expo.dev/versions/latest/sdk/sqlite#executeasyncparams) or [`executeSync()`](https://docs.expo.dev/versions/latest/sdk/sqlite#executesyncparams) method.

> Note: Remember to call [`finalizeAsync()`](https://docs.expo.dev/versions/latest/sdk/sqlite#finalizeasync) or [`finalizeSync()`](https://docs.expo.dev/versions/latest/sdk/sqlite#finalizesync) method to release the prepared statement after you finish using the statement. `try-finally` block is recommended to ensure the prepared statement is finalized.

```
const statement = await db.prepareAsync(
  'INSERT INTO test (value, intValue) VALUES ($value, $intValue)'
);
try {
  let result = await statement.executeAsync({ $value: 'bbb', $intValue: 101 });
  console.log('bbb and 101:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ccc', $intValue: 102 });
  console.log('ccc and 102:', result.lastInsertRowId, result.changes);

  result = await statement.executeAsync({ $value: 'ddd', $intValue: 103 });
  console.log('ddd and 103:', result.lastInsertRowId, result.changes);
} finally {
  await statement.finalizeAsync();
}

const statement2 = await db.prepareAsync('SELECT * FROM test WHERE intValue >= $intValue');
try {
  const result = await statement2.executeAsync<{ value: string; intValue: number }>({
    $intValue: 100,
  });

  // `getFirstAsync()` is useful when you want to get a single row from the database.
  const firstRow = await result.getFirstAsync();
  console.log(firstRow.id, firstRow.value, firstRow.intValue);

  // Reset the SQLite query cursor to the beginning for the next `getAllAsync()` call.
  await result.resetAsync();

  // `getAllAsync()` is useful when you want to get all results as an array of objects.
  const allRows = await result.getAllAsync();
  for (const row of allRows) {
    console.log(row.value, row.intValue);
  }

  // Reset the SQLite query cursor to the beginning for the next `for-await-of` loop.
  await result.resetAsync();

  // The result object is also an async iterable. You can use it in `for-await-of` loop to iterate SQLite query cursor.
  for await (const row of result) {
    console.log(row.value, row.intValue);
  }
} finally {
  await statement2.finalizeAsync();
}
```

### `useSQLiteContext()` hook

```
import { SQLiteProvider, useSQLiteContext, type SQLiteDatabase } from 'expo-sqlite';
import { useEffect, useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}

export function Header() {
  const db = useSQLiteContext();
  const [version, setVersion] = useState('');
  useEffect(() => {
    async function setup() {
      const result = await db.getFirstAsync<{ 'sqlite_version()': string }>(
        'SELECT sqlite_version()'
      );
      setVersion(result['sqlite_version()']);
    }
    setup();
  }, []);
  return (
    <View style={styles.headerContainer}>
      <Text style={styles.headerText}>SQLite version: {version}</Text>
    </View>
  );
}

interface Todo {
  value: string;
  intValue: number;
}

export function Content() {
  const db = useSQLiteContext();
  const [todos, setTodos] = useState<Todo[]>([]);

  useEffect(() => {
    async function setup() {
      const result = await db.getAllAsync<Todo>('SELECT * FROM todos');
      setTodos(result);
    }
    setup();
  }, []);

  return (
    <View style={styles.contentContainer}>
      {todos.map((todo, index) => (
        <View style={styles.todoItemContainer} key={index}>
          <Text>{`${todo.intValue} - ${todo.value}`}</Text>
        </View>
      ))}
    </View>
  );
}

async function migrateDbIfNeeded(db: SQLiteDatabase) {
  const DATABASE_VERSION = 1;
  let { user_version: currentDbVersion } = await db.getFirstAsync<{ user_version: number }>(
    'PRAGMA user_version'
  );
  if (currentDbVersion >= DATABASE_VERSION) {
    return;
  }
  if (currentDbVersion === 0) {
    await db.execAsync(`
PRAGMA journal_mode = 'wal';
CREATE TABLE todos (id INTEGER PRIMARY KEY NOT NULL, value TEXT NOT NULL, intValue INTEGER);
`);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'hello', 1);
    await db.runAsync('INSERT INTO todos (value, intValue) VALUES (?, ?)', 'world', 2);
    currentDbVersion = 1;
  }
  // if (currentDbVersion === 1) {
  //   Add more migrations
  // }
  await db.execAsync(`PRAGMA user_version = ${DATABASE_VERSION}`);
}

const styles = StyleSheet.create({
  // Your styles...
});
```

### `useSQLiteContext()` hook with `React.Suspense`

As with the [`useSQLiteContext()`](https://docs.expo.dev/versions/latest/sdk/sqlite#usesqlitecontext-hook) hook, you can also integrate the [`SQLiteProvider`](https://docs.expo.dev/versions/latest/sdk/sqlite#sqliteprovider) with [`React.Suspense`](https://react.dev/reference/react/Suspense) to show a fallback component until the database is ready. To enable the integration, pass the `useSuspense` prop to the `SQLiteProvider` component.

```
import { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';
import { Suspense } from 'react';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <Suspense fallback={<Fallback />}>
        <SQLiteProvider databaseName="test.db" onInit={migrateDbIfNeeded} useSuspense>
          <Header />
          <Content />
        </SQLiteProvider>
      </Suspense>
    </View>
  );
}
```

### Executing queries within an async transaction

```
const db = await SQLite.openDatabaseAsync('databaseName');

await db.withTransactionAsync(async () => {
  const result = await db.getFirstAsync('SELECT COUNT(*) FROM USERS');
  console.log('Count:', result.rows[0]['COUNT(*)']);
});
```

Due to the nature of async/await, any query that runs while the transaction is active will be included in the transaction. This includes query statements that are outside of the scope function passed to `withTransactionAsync()` and may be surprising behavior. For example, the following test case runs queries inside and outside of a scope function passed to `withTransactionAsync()`. However, all of the queries will run within the actual SQL transaction because the second `UPDATE` query runs before the transaction finishes.

```
Promise.all([
  // 1. A new transaction begins
  db.withTransactionAsync(async () => {
    // 2. The value "first" is inserted into the test table and we wait 2
    //    seconds
    await db.execAsync('INSERT INTO test (data) VALUES ("first")');
    await sleep(2000);

    // 4. Two seconds in, we read the latest data from the table
    const row = await db.getFirstAsync<{ data: string }>('SELECT data FROM test');

    // â The data in the table will be "second" and this expectation will fail.
    //    Additionally, this expectation will throw an error and roll back the
    //    transaction, including the `UPDATE` query below since it ran within
    //    the transaction.
    expect(row.data).toBe('first');
  }),
  // 3. One second in, the data in the test table is updated to be "second".
  //    This `UPDATE` query runs in the transaction even though its code is
  //    outside of it because the transaction happens to be active at the time
  //    this query runs.
  sleep(1000).then(async () => db.execAsync('UPDATE test SET data = "second"')),
]);
```

The [`withExclusiveTransactionAsync()`](https://docs.expo.dev/versions/latest/sdk/sqlite#withexclusivetransactionasynctask) function addresses this. Only queries that run within the scope function passed to `withExclusiveTransactionAsync()` will run within the actual SQL transaction.

### Executing PRAGMA queries

```
const db = await SQLite.openDatabaseAsync('databaseName');
await db.execAsync('PRAGMA journal_mode = WAL');
await db.execAsync('PRAGMA foreign_keys = ON');
```

> Tip: Enable [WAL journal mode](https://www.sqlite.org/wal.html) when you create a new database to improve performance in general.

### Import an existing database

To open a new SQLite database using an existing .db file you already have, you can use the [`SQLiteProvider`](https://docs.expo.dev/versions/latest/sdk/sqlite#sqliteprovider) with [`assetSource`](https://docs.expo.dev/versions/latest/sdk/sqlite#assetsource).

```
import { SQLiteProvider, useSQLiteContext } from 'expo-sqlite';
import { View, Text, StyleSheet } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" assetSource={{ assetId: require('./assets/test.db') }}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}
```

### Sharing a database between apps/extensions (iOS)

To share a database with other apps/extensions in the same App Group, you can use shared containers by following the steps below:

1

Configure the App Group in app config:

```
{
  "expo": {
    "ios": {
      "bundleIdentifier": "com.myapp",
      "entitlements": {
        "com.apple.security.application-groups": ["group.com.myapp"]
      }
    }
  }
}
```

2

Use [`Paths.appleSharedContainers`](https://docs.expo.dev/versions/latest/sdk/filesystem-next#applesharedcontainers) from the [`expo-file-system`](https://docs.expo.dev/versions/latest/sdk/filesystem-next) library to retrieve the path to the shared container:

```
import { SQLiteProvider, defaultDatabaseDirectory } from 'expo-sqlite';
import { Paths } from 'expo-file-system/next';
import { useMemo } from 'react';
import { Platform, View } from 'react-native';

export default function App() {
  const dbDirectory = useMemo(() => {
    if (Platform.OS === 'ios') {
      return Object.values(Paths.appleSharedContainers)?.[0]?.uri;
      // or `Paths.appleSharedContainers['group.com.myapp']?.uri` to choose specific container
    }
    return defaultDatabaseDirectory;
  }, []);

  return (
    <View style={styles.container}>
      <SQLiteProvider databaseName="test.db" directory={dbDirectory}>
        <Header />
        <Content />
      </SQLiteProvider>
    </View>
  );
}
```

### Passing binary data

Use [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) to pass binary data to the database:

```
await db.execAsync(`
DROP TABLE IF EXISTS blobs;
CREATE TABLE IF NOT EXISTS blobs (id INTEGER PRIMARY KEY NOT NULL, data BLOB);
`);

const blob = new Uint8Array([0x00, 0x01, 0x02, 0x03, 0x04, 0x05]);
await db.runAsync('INSERT INTO blobs (data) VALUES (?)', blob);

const row = await db.getFirstAsync<{ data: Uint8Array }>('SELECT * FROM blobs');
expect(row.data).toEqual(blob);
```

### Browse an on-device database

You can inspect a database, execute queries against it, and explore data with the [`drizzle-studio-expo` dev tools plugin](https://github.com/drizzle-team/drizzle-studio-expo). This plugin enables you to launch [Drizzle Studio](https://orm.drizzle.team/drizzle-studio/overview), connected to a database in your app, directly from Expo CLI. This plugin can be used with any `expo-sqlite` configuration. It does not require that you use [Drizzle ORM](https://docs.expo.dev/versions/latest/sdk/sqlite#drizzle-orm) in your app. [Learn how to install and use the plugin](https://github.com/drizzle-team/drizzle-studio-expo).

### Key-value storage

The `expo-sqlite` library provides [`Storage`](https://docs.expo.dev/versions/latest/sdk/sqlite#sqlitestorage) as a drop-in replacement for the [`@react-native-async-storage/async-storage`](https://github.com/react-native-async-storage/async-storage) library. This key-value store is backed by SQLite. If your project already uses `expo-sqlite`, you can leverage `expo-sqlite/kv-store` without needing to add another dependency.

[`Storage`](https://docs.expo.dev/versions/latest/sdk/sqlite#sqlitestorage) provides the same API as `@react-native-async-storage/async-storage`:

```
// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.
import Storage from 'expo-sqlite/kv-store';

await Storage.setItem('key', JSON.stringify({ entity: 'value' }));
const value = await Storage.getItem('key');
const entity = JSON.parse(value);
console.log(entity); // { entity: 'value' }
```

A key benefit of using `expo-sqlite/kv-store` is the addition of synchronous APIs for added convenience:

```
// The storage API is the default export, you can call it Storage, AsyncStorage, or whatever you prefer.
import Storage from 'expo-sqlite/kv-store';

Storage.setItemSync('key', 'value');
const value = Storage.getItemSync('key');
```

If you're currently using `@react-native-async-storage/async-storage` in your project, switching to `expo-sqlite/kv-store` is as simple as changing the import statement:

```
- import AsyncStorage from '@react-native-async-storage/async-storage';
+ import AsyncStorage from 'expo-sqlite/kv-store';
```

## Third-party library integrations

The `expo-sqlite` library is designed to be a solid SQLite foundation. It enables broader integrations with third-party libraries for more advanced higher-level features. Here are some of the libraries that you can use with `expo-sqlite`.

### Drizzle ORM

[Drizzle](https://orm.drizzle.team/) is a ["headless TypeScript ORM with a head"](https://orm.drizzle.team/docs/overview). It runs on Node.js, Bun, Deno, and React Native. It also has a CLI companion called [`drizzle-kit`](https://orm.drizzle.team/kit-docs/overview) for generating SQL migrations.

Check out the [Drizzle ORM documentation](https://orm.drizzle.team/) and the [`expo-sqlite` integration guide](https://orm.drizzle.team/docs/get-started/expo-new) for more details.

### Knex.js

[Knex.js](https://knexjs.org/) is a SQL query builder that is ["flexible, portable, and fun to use!"](https://github.com/knex/knex)

Check out the [`expo-sqlite` integration guide](https://github.com/expo/knex-expo-sqlite-dialect) for more details.

## SQLCipher

> Note: SQLCipher is not supported on [Expo Go](https://expo.dev/go).

[SQLCipher](https://www.zetetic.net/sqlcipher/) is a fork of SQLite that adds encryption and authentication to the database. The `expo-sqlite` library supports SQLCipher for Android, iOS, and macOS. To use SQLCipher, you need to add the `useSQLCipher` config to your app.json as shown in the [Configuration in app config](https://docs.expo.dev/versions/latest/sdk/sqlite#configuration-in-app-config) section and run `npx expo prebuild`.

Right after you open a database, you need to set a password for the database using the `PRAGMA key = 'password'` statement.

```
const db = await SQLite.openDatabaseAsync('databaseName');
await db.execAsync(`PRAGMA key = 'password'`);
```

## API

### Cheatsheet for the common API

The following table summarizes the common API for [`SQLiteDatabase`](https://docs.expo.dev/versions/latest/sdk/sqlite#sqlitedatabase) and [`SQLiteStatement`](https://docs.expo.dev/versions/latest/sdk/sqlite#sqlitestatement) classes:

## Component

### `SQLiteProvider`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[SQLiteProviderProps](#sqliteproviderprops)>`

Context.Provider component that provides a SQLite database to all children. All descendants of this component will be able to access the database using the [`useSQLiteContext`](#usesqlitecontext) hook.

SQLiteProviderProps

### `assetSource`

OptionalâType:

`[SQLiteProviderAssetSource](#sqliteproviderassetsource)`

Import a bundled database file from the specified asset module.

Example

```
assetSource={{ assetId: require('./assets/db.db') }}
```

### `children`

The children to render.

### `databaseName`

The name of the database file to open.

### `directory`

OptionalâType:

`string`âDefault: `defaultDatabaseDirectory`

The directory where the database file is located.

### `onError`

OptionalâType:

`(error: [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)) => void`âDefault: `rethrow the error`

Handle errors from SQLiteProvider.

### `onInit`

OptionalâType:

`(db: [SQLiteDatabase](#sqlitedatabase)) => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<void>`

A custom initialization handler to run before rendering the children. You can use this to run database migrations or other setup tasks.

### `options`

OptionalâType:

`[SQLiteOpenOptions](#sqliteopenoptions)`

Open options.

### `useSuspense`

OptionalâType:

`boolean`âDefault: `false`

Enable [`React.Suspense`](https://react.dev/reference/react/Suspense) integration.

Example

```
export default function App() {
  return (
    <Suspense fallback={<Text>Loading...</Text>}>
      <SQLiteProvider databaseName="test.db" useSuspense={true}>
        <Main />
      </SQLiteProvider>
    </Suspense>
  );
}
```

## Constants

### `SQLite.AsyncStorage`

Type: `[SQLiteStorage](#sqlitestorage)`

### `SQLite.defaultDatabaseDirectory`

Type: `any`

The default directory for SQLite databases.

### `SQLite.Storage`

Type: `[SQLiteStorage](#sqlitestorage)`

Alias for [`AsyncStorage`](#sqliteasyncstorage), given the storage not only offers asynchronous methods.

## Hooks

### `useSQLiteContext()`

A global hook for accessing the SQLite database across components. This hook should only be used within a [`<SQLiteProvider>`](#sqliteprovider) component.

Example

```
export default function App() {
  return (
    <SQLiteProvider databaseName="test.db">
      <Main />
    </SQLiteProvider>
  );
}

export function Main() {
  const db = useSQLiteContext();
  console.log('sqlite version', db.getFirstSync('SELECT sqlite_version()'));
  return <View />
}
```

## Classes

### `SQLiteDatabase`

A SQLite database.

SQLiteDatabase Properties

### `databasePath`

### `nativeDatabase`

Read OnlyâType:

`[NativeDatabase](#nativedatabase)`

### `options`

Read OnlyâType:

`[SQLiteOpenOptions](#sqliteopenoptions)`

SQLiteDatabase Methods

### `closeAsync()`

### `closeSync()`

### `createSessionAsync(dbName)`

  

Create a new session for the database.

### `createSessionSync(dbName)`

  

Create a new session for the database.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `execAsync(source)`

  

Execute all SQL queries in the supplied string.

> Note: The queries are not escaped for you! Be careful when constructing your queries.

### `execSync(source)`

  

Execute all SQL queries in the supplied string.

> Note: The queries are not escaped for you! Be careful when constructing your queries.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `getAllAsync(source, params)`

  

A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), [`SQLiteExecuteAsyncResult.getAllAsync()`](#getallasync), and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).

Example

```
// For unnamed parameters, you pass values in an array.
db.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', [1, 'Hello']);

// For unnamed parameters, you pass values in variadic arguments.
db.getAllAsync('SELECT * FROM test WHERE intValue = ? AND name = ?', 1, 'Hello');

// For named parameters, you should pass values in object.
db.getAllAsync('SELECT * FROM test WHERE intValue = $intValue AND name = $name', { $intValue: 1, $name: 'Hello' });
```

### `getAllSync(source, params)`

  

A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult.getAllSync()`](#getallsync), and [`SQLiteStatement.finalizeSync()`](#finalizesync).

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `getEachAsync(source, params)`

  

A convenience wrapper around [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource), [`SQLiteStatement.executeAsync()`](#executeasyncparams), [`SQLiteExecuteAsyncResult`](#sqliteexecuteasyncresult) `AsyncIterator`, and [`SQLiteStatement.finalizeAsync()`](#finalizeasync).

Rather than returning Promise, this function returns an [`AsyncIterableIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator). You can use `for await...of` to iterate over the rows from the SQLite query result.

### `getEachSync(source, params)`

  

A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult`](#sqliteexecutesyncresult) `Iterator`, and [`SQLiteStatement.finalizeSync()`](#finalizesync).

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

This function returns an [`IterableIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator). You can use `for...of` to iterate over the rows from the SQLite query result.

### `getFirstAsync(source, params)`

  

### `getFirstSync(source, params)`

  

A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), [`SQLiteExecuteSyncResult.getFirstSync()`](#getfirstsync), and [`SQLiteStatement.finalizeSync()`](#finalizesync).

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `isInTransactionAsync()`

Asynchronous call to return whether the database is currently in a transaction.

### `isInTransactionSync()`

Synchronous call to return whether the database is currently in a transaction.

### `prepareAsync(source)`

  

### `prepareSync(source)`

  

Create a [prepared SQLite statement](https://www.sqlite.org/c3ref/prepare.html).

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `runAsync(source, params)`

  

### `runSync(source, params)`

  

A convenience wrapper around [`SQLiteDatabase.prepareSync()`](#preparesyncsource), [`SQLiteStatement.executeSync()`](#executesyncparams), and [`SQLiteStatement.finalizeSync()`](#finalizesync).

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `serializeAsync(databaseName)`

  

### `serializeSync(databaseName)`

  

[Serialize the database](https://sqlite.org/c3ref/serialize.html) as `Uint8Array`.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `syncLibSQL()`

Synchronize the local database with the remote libSQL server. This method is only available from libSQL integration.

### `withExclusiveTransactionAsync(task)`

  

Execute a transaction and automatically commit/rollback based on the `task` result.

The transaction may be exclusive. As long as the transaction is converted into a write transaction, the other async write queries will abort with `database is locked` error.

> Note: This function is not supported on web.

Example

```
db.withExclusiveTransactionAsync(async (txn) => {
  await txn.execAsync('UPDATE test SET name = "aaa"');
});
```

### `withTransactionAsync(task)`

  

Execute a transaction and automatically commit/rollback based on the `task` result.

> Note: This transaction is not exclusive and can be interrupted by other async queries.

Example

```
db.withTransactionAsync(async () => {
  await db.execAsync('UPDATE test SET name = "aaa"');

  //
  // We cannot control the order of async/await order, so order of execution is not guaranteed.
  // The following UPDATE query out of transaction may be executed here and break the expectation.
  //

  const result = await db.getFirstAsync<{ name: string }>('SELECT name FROM Users');
  expect(result?.name).toBe('aaa');
});
db.execAsync('UPDATE test SET name = "bbb"');
```

If you worry about the order of execution, use `withExclusiveTransactionAsync` instead.

### `withTransactionSync(task)`

  

Execute a transaction and automatically commit/rollback based on the `task` result.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `SQLiteSession`

A class that represents an instance of the SQLite session extension.

SQLiteSession Methods

### `applyChangesetAsync(changeset)`

  

Apply a changeset asynchronously.

### `applyChangesetSync(changeset)`

  

Apply a changeset synchronously.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `attachAsync(table)`

  

Attach a table to the session asynchronously.

### `attachSync(table)`

  

Attach a table to the session synchronously.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `closeAsync()`

Close the session asynchronously.

### `closeSync()`

Close the session synchronously.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `createChangesetAsync()`

Create a changeset asynchronously.

### `createChangesetSync()`

Create a changeset synchronously.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `createInvertedChangesetAsync()`

Create an inverted changeset asynchronously. This is a shorthand for [`createChangesetAsync()`](#createchangesetasync) + [`invertChangesetAsync()`](#invertchangesetasyncchangeset).

### `createInvertedChangesetSync()`

Create an inverted changeset synchronously. This is a shorthand for [`createChangesetSync()`](#createchangesetsync) + [`invertChangesetSync()`](#invertchangesetsyncchangeset).

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `enableAsync(enabled)`

  

Enable or disable the session asynchronously.

### `enableSync(enabled)`

  

Enable or disable the session synchronously.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `invertChangesetAsync(changeset)`

  

Invert a changeset asynchronously.

### `invertChangesetSync(changeset)`

  

Invert a changeset synchronously.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `SQLiteStatement`

A prepared statement returned by [`SQLiteDatabase.prepareAsync()`](#prepareasyncsource) or [`SQLiteDatabase.prepareSync()`](#preparesyncsource) that can be binded with parameters and executed.

SQLiteStatement Methods

### `executeAsync(params)`

  

Run the prepared statement and return the [`SQLiteExecuteAsyncResult`](#sqliteexecuteasyncresult) instance.

### `executeSync(params)`

  

Run the prepared statement and return the [`SQLiteExecuteSyncResult`](#sqliteexecutesyncresult) instance.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `finalizeAsync()`

Finalize the prepared statement. This will call the [`sqlite3_finalize()`](https://www.sqlite.org/c3ref/finalize.html) C function under the hood.

Attempting to access a finalized statement will result in an error.

> Note: While `expo-sqlite` will automatically finalize any orphaned prepared statements upon closing the database, it is considered best practice to manually finalize prepared statements as soon as they are no longer needed. This helps to prevent resource leaks. You can use the `try...finally` statement to ensure that prepared statements are finalized even if an error occurs.

### `finalizeSync()`

Finalize the prepared statement. This will call the [`sqlite3_finalize()`](https://www.sqlite.org/c3ref/finalize.html) C function under the hood.

Attempting to access a finalized statement will result in an error.

> Note: While `expo-sqlite` will automatically finalize any orphaned prepared statements upon closing the database, it is considered best practice to manually finalize prepared statements as soon as they are no longer needed. This helps to prevent resource leaks. You can use the `try...finally` statement to ensure that prepared statements are finalized even if an error occurs.

### `getColumnNamesAsync()`

Get the column names of the prepared statement.

### `getColumnNamesSync()`

Get the column names of the prepared statement.

### `SQLiteStorage`

Key-value store backed by SQLite. This class accepts a `databaseName` parameter in its constructor, which is the name of the database file to use for the storage.

SQLiteStorage Methods

### `clear()`

Alias for [`clearAsync()`](#clearasync) method.

### `clearAsync()`

Clears all key-value pairs from the storage asynchronously.

### `clearSync()`

Clears all key-value pairs from the storage synchronously.

### `close()`

Alias for [`closeAsync()`](#closeasync-1) method.

### `closeAsync()`

Closes the database connection asynchronously.

### `closeSync()`

Closes the database connection synchronously.

### `getAllKeys()`

Alias for [`getAllKeysAsync()`](#getallkeysasync) method.

### `getAllKeysAsync()`

Retrieves all keys stored in the storage asynchronously.

### `getAllKeysSync()`

Retrieves all keys stored in the storage synchronously.

### `getItem(key)`

  

Alias for [`getItemAsync()`](#getitemasynckey) method.

### `getItemAsync(key)`

  

Retrieves the value associated with the given key asynchronously.

### `getItemSync(key)`

  

Retrieves the value associated with the given key synchronously.

### `mergeItem(key, value)`

  

Merges the given value with the existing value for the given key asynchronously. If the existing value is a JSON object, performs a deep merge.

### `multiGet(keys)`

  

Retrieves the values associated with the given keys asynchronously.

### `multiMerge(keyValuePairs)`

  

Merges multiple key-value pairs asynchronously. If existing values are JSON objects, performs a deep merge.

### `multiRemove(keys)`

  

Removes the values associated with the given keys asynchronously.

### `multiSet(keyValuePairs)`

  

Sets multiple key-value pairs asynchronously.

### `removeItem(key)`

  

Alias for [`removeItemAsync()`](#removeitemasynckey) method.

### `removeItemAsync(key)`

  

Removes the value associated with the given key asynchronously.

### `removeItemSync(key)`

  

Removes the value associated with the given key synchronously.

### `setItem(key, value)`

  

Alias for [`setItemAsync()`](#setitemasynckey-value).

### `setItemAsync(key, value)`

  

Sets the value for the given key asynchronously. If a function is provided, it computes the new value based on the previous value.

### `setItemSync(key, value)`

  

Sets the value for the given key synchronously. If a function is provided, it computes the new value based on the previous value.

## Methods

### `SQLite.backupDatabaseAsync(options)`

  

Backup a database to another database.

### `SQLite.backupDatabaseSync(options)`

  

Backup a database to another database.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `SQLite.deleteDatabaseAsync(databaseName, directory)`

  

### `SQLite.deleteDatabaseSync(databaseName, directory)`

  

Delete a database file.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `SQLite.deserializeDatabaseAsync(serializedData, options)`

  

### `SQLite.deserializeDatabaseSync(serializedData, options)`

  

Given a `Uint8Array` data and [deserialize to memory database](https://sqlite.org/c3ref/deserialize.html).

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

### `SQLite.openDatabaseAsync(databaseName, options, directory)`

  

### `SQLite.openDatabaseSync(databaseName, options, directory)`

  

Open a database.

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

## Event Subscriptions

### `SQLite.addDatabaseChangeListener(listener)`

  

Add a listener for database changes.

> Note: to enable this feature, you must set [`enableChangeListener` to `true`](#sqliteopenoptions) when opening the database.

A `Subscription` object that you can call `remove()` on when you would like to unsubscribe the listener.

## Interfaces

### `SQLiteExecuteAsyncResult`

Extends: `[AsyncIterableIterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator)<T>`

A result returned by [`SQLiteStatement.executeAsync()`](#executeasyncparams).

Example

The result includes the [`lastInsertRowId`](https://www.sqlite.org/c3ref/last_insert_rowid.html) and [`changes`](https://www.sqlite.org/c3ref/changes.html) properties. You can get the information from the write operations.

```
const statement = await db.prepareAsync('INSERT INTO test (value) VALUES (?)');
try {
  const result = await statement.executeAsync(101);
  console.log('lastInsertRowId:', result.lastInsertRowId);
  console.log('changes:', result.changes);
} finally {
  await statement.finalizeAsync();
}
```

Example

The result implements the [`AsyncIterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator) interface, so you can use it in `for await...of` loops.

```
const statement = await db.prepareAsync('SELECT value FROM test WHERE value > ?');
try {
  const result = await statement.executeAsync<{ value: number }>(100);
  for await (const row of result) {
    console.log('row value:', row.value);
  }
} finally {
  await statement.finalizeAsync();
}
```

Example

If your write operations also return values, you can mix all of them together.

```
const statement = await db.prepareAsync('INSERT INTO test (name, value) VALUES (?, ?) RETURNING name');
try {
  const result = await statement.executeAsync<{ name: string }>('John Doe', 101);
  console.log('lastInsertRowId:', result.lastInsertRowId);
  console.log('changes:', result.changes);
  for await (const row of result) {
    console.log('name:', row.name);
  }
} finally {
  await statement.finalizeAsync();
}
```

SQLiteExecuteAsyncResult Methods

### `getAllAsync()`

Get all rows of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling [`resetAsync()`](#resetasync). Otherwise, an error will be thrown.

### `getFirstAsync()`

Get the first row of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling [`resetAsync()`](#resetasync). Otherwise, an error will be thrown.

### `resetAsync()`

Reset the prepared statement cursor. This will call the [`sqlite3_reset()`](https://www.sqlite.org/c3ref/reset.html) C function under the hood.

### `SQLiteExecuteSyncResult`

Extends: `[IterableIterator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator)<T>`

A result returned by [`SQLiteStatement.executeSync()`](#executesyncparams).

> Note: Running heavy tasks with this function can block the JavaScript thread and affect performance.

Example

The result includes the [`lastInsertRowId`](https://www.sqlite.org/c3ref/last_insert_rowid.html) and [`changes`](https://www.sqlite.org/c3ref/changes.html) properties. You can get the information from the write operations.

```
const statement = db.prepareSync('INSERT INTO test (value) VALUES (?)');
try {
  const result = statement.executeSync(101);
  console.log('lastInsertRowId:', result.lastInsertRowId);
  console.log('changes:', result.changes);
} finally {
  statement.finalizeSync();
}
```

Example

The result implements the [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) interface, so you can use it in `for...of` loops.

```
const statement = db.prepareSync('SELECT value FROM test WHERE value > ?');
try {
  const result = statement.executeSync<{ value: number }>(100);
  for (const row of result) {
    console.log('row value:', row.value);
  }
} finally {
  statement.finalizeSync();
}
```

Example

If your write operations also return values, you can mix all of them together.

```
const statement = db.prepareSync('INSERT INTO test (name, value) VALUES (?, ?) RETURNING name');
try {
  const result = statement.executeSync<{ name: string }>('John Doe', 101);
  console.log('lastInsertRowId:', result.lastInsertRowId);
  console.log('changes:', result.changes);
  for (const row of result) {
    console.log('name:', row.name);
  }
} finally {
  statement.finalizeSync();
}
```

SQLiteExecuteSyncResult Methods

### `getAllSync()`

Get all rows of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling [`resetSync()`](#resetsync). Otherwise, an error will be thrown.

### `getFirstSync()`

Get the first row of the result set. This requires the SQLite cursor to be in its initial state. If you have already retrieved rows from the result set, you need to reset the cursor first by calling [`resetSync()`](#resetsync). Otherwise, an error will be thrown.

### `resetSync()`

Reset the prepared statement cursor. This will call the [`sqlite3_reset()`](https://www.sqlite.org/c3ref/reset.html) C function under the hood.

### `SQLiteOpenOptions`

Options for opening a database.

### `SQLiteProviderAssetSource`

### `SQLiteRunResult`

A result returned by [`SQLiteDatabase.runAsync`](#runasyncsource-params) or [`SQLiteDatabase.runSync`](#runsyncsource-params).

## Types

### `Changeset`

Type: `[Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)`

A type that represents a changeset.

### `DatabaseChangeEvent`

The event payload for the listener of [`addDatabaseChangeListener`](#sqliteadddatabasechangelistenerlistener)

### `SQLiteBindParams`

Literal Type: `Record`

Acceptable values are: `Record<string, [SQLiteBindValue](#sqlitebindvalue)>`

### `SQLiteBindValue`

Literal Type: `union`

Bind parameters to the prepared statement. You can either pass the parameters in the following forms:

Example

A single array for unnamed parameters.

```
const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');
const result = await statement.executeAsync(['test1', 789]);
const firstRow = await result.getFirstAsync();
```

Example

Variadic arguments for unnamed parameters.

```
const statement = await db.prepareAsync('SELECT * FROM test WHERE value = ? AND intValue = ?');
const result = await statement.executeAsync('test1', 789);
const firstRow = await result.getFirstAsync();
```

Example

A single object for [named parameters](https://www.sqlite.org/lang_expr.html)

We support multiple named parameter forms such as `:VVV`, `@VVV`, and `$VVV`. We recommend using `$VVV` because JavaScript allows using `$` in identifiers without escaping.

```
const statement = await db.prepareAsync('SELECT * FROM test WHERE value = $value AND intValue = $intValue');
const result = await statement.executeAsync({ $value: 'test1', $intValue: 789 });
const firstRow = await result.getFirstAsync();
```

Acceptable values are: `string` | `number` | `null` | `boolean` | `[Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)`

### `SQLiteStorageSetItemUpdateFunction(prevValue)`

Update function for the [`setItemAsync()`](#setitemasynckey-value) or [`setItemSync()`](#setitemsynckey-value) method. It computes the new value based on the previous value. The function returns the new value to set for the key.

### `SQLiteVariadicBindParams`

Type: `[SQLiteBindValue[]](#sqlitebindvalue)`

---

# status-bar

## Expo StatusBar

A library that provides the same interface as the React Native StatusBar API, but with slightly different defaults to work great in Expo environments.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-status-bar)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-status-bar/CHANGELOG.md)[](https://www.npmjs.com/package/expo-status-bar)

`expo-status-bar` gives you a component and imperative interface to control the app status bar to change its text color, background color, hide it, make it translucent or opaque, and apply animations to any of these changes. Exactly what you are able to do with the `StatusBar` component depends on the platform you're using.

> tvOS and web support
> 
> For tvOS, the `expo-status-bar` code will compile and run, but no status bar will show.
> 
> For web, there is no API available to control the operating system's status bar, so `expo-status-bar` will do nothing and won't throw an error.

## Installation

`npx expo install expo-status-bar`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { StyleSheet, Text, View } from 'react-native';
import { StatusBar } from 'expo-status-bar';

export default function App() {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>Notice that the status bar has light text!</Text>
      <StatusBar style="light" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    color: '#fff',
  },
});
```

## API

```
import { StatusBar } from 'expo-status-bar';
```

## Component

### `StatusBar`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[StatusBarProps](#statusbarprops)>`

A component that allows you to configure your status bar without directly calling imperative methods like `setBarStyle`.

You will likely have multiple `StatusBar` components mounted in the same app at the same time. For example, if you have multiple screens in your app, you may end up using one per screen. The props of each `StatusBar` component will be merged in the order that they were mounted. This component is built on top of the [StatusBar](https://reactnative.dev/docs/statusbar) component exported from React Native, and it provides defaults that work better for Expo users.

StatusBarProps

### `animated`

If the transition between status bar property changes should be animated. Supported for `backgroundColor`, `barStyle` and `hidden`.

### `backgroundColor`

The background color of the status bar.

### `hidden`

If the status bar is hidden.

### `hideTransitionAnimation`

OptionalâType:

`[StatusBarAnimation](#statusbaranimation)`âDefault: `'fade'`

The transition effect when showing and hiding the status bar using the hidden prop.

### `networkActivityIndicatorVisible`

If the network activity indicator should be visible.

### `style`

OptionalâType:

`[StatusBarStyle](#statusbarstyle)`âDefault: `'auto'`

Sets the color of the status bar text. Default value is `"auto"` which picks the appropriate value according to the active color scheme, eg: if your app is dark mode, the style will be `"light"`.

### `translucent`

If the status bar is translucent. When translucent is set to `true`, the app will draw under the status bar. This is the default behaviour in projects created with Expo tools because it is consistent with iOS.

## Methods

### `StatusBar.setStatusBarBackgroundColor(backgroundColor, animated)`

| Parameter | Type | Description |
| --- | --- | --- |
| backgroundColor | `[ColorValue](https://reactnative.dev/docs/colors)` | 
The background color of the status bar.

 |
| animated(optional) | `boolean` | 

`true` to animate the background color change, `false` to change immediately.

 |

  

Set the background color of the status bar.

### `StatusBar.setStatusBarHidden(hidden, animation)`

| Parameter | Type | Description |
| --- | --- | --- |
| hidden | `boolean` | 
If the status bar should be hidden.

 |
| animation(optional) | `[StatusBarAnimation](#statusbaranimation)` | 

Animation to use when toggling hidden, defaults to `'none'`.

 |

  

Toggle visibility of the status bar.

### `StatusBar.setStatusBarNetworkActivityIndicatorVisible(visible)`

| Parameter | Type | Description |
| --- | --- | --- |
| visible | `boolean` | 
If the network activity indicator should be visible.

 |

  

Toggle visibility of the network activity indicator.

### `StatusBar.setStatusBarStyle(style, animated)`

| Parameter | Type | Description |
| --- | --- | --- |
| style | `[StatusBarStyle](#statusbarstyle)` | 
The color of the status bar text.

 |
| animated(optional) | `boolean` | 

If the transition should be animated.

 |

  

Set the bar style of the status bar.

### `StatusBar.setStatusBarTranslucent(translucent)`

| Parameter | Type | Description |
| --- | --- | --- |
| translucent | `boolean` | 
Whether the app can draw under the status bar. When `true`, content will be rendered under the status bar. This is always `true` on iOS and cannot be changed.

 |

  

Set the translucency of the status bar.

## Types

### `StatusBarAnimation`

Literal Type: `string`

Acceptable values are: `'none'` | `'fade'` | `'slide'`

### `StatusBarStyle`

Literal Type: `string`

Acceptable values are: `'auto'` | `'inverted'` | `'light'` | `'dark'`

---

# storereview

## Expo StoreReview

A library that provides access to native APIs for in-app reviews.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-store-review)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-store-review/CHANGELOG.md)[](https://www.npmjs.com/package/expo-store-review)

`expo-store-review` is a library that provides access to `ReviewManager` API on Android 5+ and `SKStoreReviewController` API on iOS. It allows you to ask the user to rate your app without leaving the app itself.

## Installation

`npx expo install expo-store-review`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

It is important that you follow the [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/ratings-and-reviews) for iOS and [Guidelines](https://developer.android.com/guide/playcore/in-app-review#when-to-request) for Android when using this API.

Specifically:

*   Don't call `StoreReview.requestReview()` from a button - instead try calling it after the user has finished some signature interaction in the app.
*   Don't spam the user.
*   Don't request a review when the user is doing something time sensitive like navigating.
*   Don't ask the user any questions before or while presenting the rating button or card.

### Write reviews

#### Android

There is no equivalent redirect on Android, you can still open the Play Store to the reviews sections using the query parameter `showAllReviews=true` like this:

Android Play Store example

```
const androidPackageName = 'host.exp.exponent';
// Open the Android Play Store in the browser -> redirects to Play Store on Android
Linking.openURL(
  `https://play.google.com/store/apps/details?id=${androidPackageName}&showAllReviews=true`
);
// Open the Android Play Store directly
Linking.openURL(`market://details?id=${androidPackageName}&showAllReviews=true`);
```

#### iOS

You can redirect an app user to the "Write a Review" screen for an app in the iOS App Store by using the query parameter `action=write-review`. For example:

```
const itunesItemId = 982107779;
// Open the iOS App Store in the browser -> redirects to App Store on iOS
Linking.openURL(`https://apps.apple.com/app/apple-store/id${itunesItemId}?action=write-review`);
// Open the iOS App Store directly
Linking.openURL(
  `itms-apps://itunes.apple.com/app/viewContentsUserReviews/id${itunesItemId}?action=write-review`
);
```

## API

```
import * as StoreReview from 'expo-store-review';
```

## Methods

### `StoreReview.hasAction()`

This returns a promise that fulfills to `true` if `StoreReview.requestReview()` is capable directing the user to some kind of store review flow. If the app config (`app.json`) does not contain store URLs and native store review capabilities are not available then the promise will fulfill to `false`.

Example

```
if (await StoreReview.hasAction()) {
  // you can call StoreReview.requestReview()
}
```

### `StoreReview.isAvailableAsync()`

Determines if the platform has the capabilities to use `StoreReview.requestReview()`.

This returns a promise fulfills with `boolean`, depending on the platform:

*   On iOS, it will resolve to `true` unless the app is distributed through TestFlight.
*   On Android, it will resolve to `true` if the device is running Android 5.0+.
*   On Web, it will resolve to `false`.

### `StoreReview.requestReview()`

In ideal circumstances this will open a native modal and allow the user to select a star rating that will then be applied to the App Store, without leaving the app. If the device is running a version of Android lower than 5.0, this will attempt to get the store URL and link the user to it.

### `StoreReview.storeUrl()`

This uses the `Constants` API to get the `Constants.expoConfig.ios.appStoreUrl` on iOS, or the `Constants.expoConfig.android.playStoreUrl` on Android.

On Web this will return `null`.

## Error codes

### `ERR_STORE_REVIEW_FAILED`

This error occurs when the store review request was not successful.

---

# stripe

A library that provides access to native APIs for integrating Stripe payments.

[](https://github.com/stripe/stripe-react-native)[](https://www.npmjs.com/package/@stripe/stripe-react-native)

Expo includes support for [`@stripe/stripe-react-native`](https://github.com/stripe/stripe-react-native), which allows you to build delightful payment experiences in your native Android and iOS apps using React Native and Expo. This library provides powerful and customizable UI screens and elements that can be used out-of-the-box to collect your users' payment details.

[

Watch: Universal Full-Stack Expo Stripe Payment Integration

](https://www.youtube.com/watch?v=J0tyxUV_omY)

## Installation

Each Expo SDK version requires a specific `@stripe/stripe-react-native` version. See the [Stripe CHANGELOG](https://github.com/stripe/stripe-react-native/blob/master/CHANGELOG.md) for a mapping of versions. To automatically install the correct version for your Expo SDK version, run:

`npx expo install @stripe/stripe-react-native`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/stripe/stripe-react-native) provided in the library's README or documentation.

### Config plugin setup (optional)

If you're using EAS Build, you can do most of your Stripe setup using the `@stripe/stripe-react-native` [config plugin](https://docs.expo.dev/config-plugins/introduction). To set up, just add the config plugin to the `plugins` array of your app.json or app.config.js as shown below, then rebuild the app.

```
{
  "expo": {
    %%placeholder-start%%... %%placeholder-end%%
    "plugins": [
      [
        "@stripe/stripe-react-native",
        {
          "merchantIdentifier": string | string [],
          "enableGooglePay": boolean
        }
      ]
    ],
  }
}
```

*   merchantIdentifier: iOS only. This is the [Apple merchant ID obtained here](https://stripe.com/docs/apple-pay?platform=react-native). Otherwise, Apple Pay will not work as expected. If you have multiple merchantIdentifiers, you can set them in an array.
*   enableGooglePay: Android only. Boolean indicating whether or not Google Pay is enabled. Defaults to `false`.

## Example

Trying out Stripe takes just a few seconds. Connect to [this Snack](https://snack.expo.dev/@charliecruzan/stripe-react-native-example?platform=mydevice) on your device.

Under the hood, that example connects to [this Glitch server code](https://glitch.com/edit/#!/expo-stripe-server-example), so you'll need to open that page to spin up the server. Feel free to run your own Glitch server and copy that code!

## Usage

For usage information and detailed documentation, see the following resources:

### Common issues

#### Browser pop-ups are not redirecting back to my app

If you're relying on redirects, you'll need to pass in a `urlScheme` to `initStripe`. To make sure you always use the proper `urlScheme`, pass in:

```
import * as Linking from 'expo-linking';
import Constants from 'expo-constants';

urlScheme:
  Constants.appOwnership === 'expo'
    ? Linking.createURL('/--/')
    : Linking.createURL(''),
```

[`Linking.createURL()`](https://docs.expo.dev/versions/latest/sdk/linking#createurloptions) will ensure you're using the proper scheme, whether you're running in Expo Go or your production app. `'/--/'` is necessary in Expo Go because it indicates that the substring after it corresponds to the deep link path, and is not part of the path to the app itself.

#### PaymentSheet localization on iOS

On Android, the translation of `PaymentSheet` is automatically detected based on a device's language settings.

On iOS, you must enable `CFBundleAllowMixedLocalizations` and add the preferred language using `CFBundleLocalizations` under [`ios.infoPlist`](https://docs.expo.dev/versions/latest/config/app#infoplist) in the app config:

```
{
  "expo": {
    "ios": {
      "infoPlist": {
        "CFBundleAllowMixedLocalizations": true,
        "CFBundleLocalizations": ["fr"]
        %%placeholder-start%%... %%placeholder-end%%
      }
      %%placeholder-start%%... %%placeholder-end%%
    }
  }
}
```

## Limitations

### Google Pay

Google Pay is not supported in [Expo Go](https://expo.dev/go). To use Google Pay, you must create a [development build](https://docs.expo.dev/develop/development-builds/create-a-build). This can be done with [EAS Build](https://docs.expo.dev/build/introduction), or locally by running `npx expo run:android`.

### Apple Pay

Apple Pay is not supported in [Expo Go](https://expo.dev/go). To use Apple Pay, you must create a [development build](https://docs.expo.dev/develop/development-builds/create-a-build). This can be done with [EAS Build](https://docs.expo.dev/build/introduction), or locally by running `npx expo run:ios`.

---

# svg

A library that allows using SVGs in your app.

[](https://github.com/react-native-community/react-native-svg)[](https://www.npmjs.com/package/react-native-svg)

`react-native-svg` allows you to use SVGs in your app, with support for interactivity and animation.

## Installation

`npx expo install react-native-svg`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/react-native-community/react-native-svg#with-react-native-cli) provided in the library's README or documentation.

## API

```
import * as Svg from 'react-native-svg';
```

### `Svg`

A set of drawing primitives such as `Circle`, `Rect`, `Path`, `ClipPath`, and `Polygon`. It supports most SVG elements and properties. The implementation is provided by [react-native-svg](https://github.com/react-native-community/react-native-svg), and documentation is provided in that repository.

```
import Svg, { Circle, Rect } from 'react-native-svg';

export default function SvgComponent(props) {
  return (
    <Svg height="50%" width="50%" viewBox="0 0 100 100" {...props}>
      <Circle cx="50" cy="50" r="45" stroke="blue" strokeWidth="2.5" fill="green" />
      <Rect x="15" y="15" width="70" height="70" stroke="red" strokeWidth="2" fill="yellow" />
    </Svg>
  );
}
```

### Tips

Here are some helpful links that will get you moving fast!

*   Looking for SVGs? Try the [noun project](https://thenounproject.com/).
*   Create or modify your own SVGs for free using [Figma](https://www.figma.com/).
*   Optimize your SVG with [SVGOMG](https://jakearchibald.github.io/svgomg/). This will make the code smaller and easier to work with. Be sure not to remove the `viewbox` for best results on Android.
*   Convert your SVG to an Expo component in the browser using [SVGR](https://react-svgr.com/playground/?native=true&typescript=true).

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/software-mansion/react-native-svg)

---

# symbols

## Expo Symbols

A library that allows access to native symbols.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-symbols)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-symbols/CHANGELOG.md)[](https://www.npmjs.com/package/expo-symbols)

> This library is currently in beta and subject to breaking changes.

`expo-symbols` provides access to the [SF Symbols](https://developer.apple.com/sf-symbols/) library on iOS.

## Installation

`npx expo install expo-symbols`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

```
import { SymbolView, SymbolViewProps, SFSymbol } from 'expo-symbols';
import { StyleSheet, View } from 'react-native';

export default function App() {
  return (
    <View style={styles.container}>
      <SymbolView name="airpods.chargingcase" style={styles.symbol} type="hierarchical" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  symbol: {
    width: 35,
    height: 35,
    margin: 5,
  },
});
```

## API

```
import { SymbolView } from 'expo-symbols';
```

## Component

### `SymbolView`

Type: `React.[Element](https://www.typescriptlang.org/docs/handbook/jsx.html#function-component)<[SymbolViewProps](#symbolviewprops)>`

SymbolViewProps

### `animationSpec`

OptionalâType:

`[AnimationSpec](#animationspec)`

The animation configuration to apply to the symbol.

### `colors`

OptionalâLiteral type: `union`

An array of colors to use when the [SymbolType](#symboltype) is `palette`.

Acceptable values are: `[ColorValue](https://reactnative.dev/docs/colors)` | `[ColorValue[]](https://reactnative.dev/docs/colors)`

### `fallback`

OptionalâType:

`React.ReactNode`

Fallback to render on Android and Web where `SF Symbols` are not available.

### `name`

### `resizeMode`

OptionalâType:

`[ContentMode](#contentmode)`âDefault: `'scaleToAspectFit'`

Determines how the image should be resized to fit its container.

### `scale`

OptionalâType:

`[SymbolScale](#symbolscale)`âDefault: `'unspecified'`

The scale of the symbol to render.

### `size`

OptionalâType:

`number`âDefault: `24`

The size of the symbol.

### `tintColor`

The tint color to apply to the symbol.

### `type`

OptionalâType:

`[SymbolType](#symboltype)`âDefault: `'monochrome'`

Determines the symbol variant to use.

### `weight`

OptionalâType:

`[SymbolWeight](#symbolweight)`âDefault: `'unspecified'`

The weight of the symbol to render.

## Types

### `AnimationEffect`

| Property | Type | Description |
| --- | --- | --- |
| direction(optional) | `'up' | 'down'` | 
The direction of the animation.

 |
| type | `[AnimationType](#animationtype)` | 

The type of animation to apply to the symbol.

 |
| wholeSymbol(optional) | `boolean` | 

Whether the entire symbol should animate or just the individual layers.

Default:`false`

 |

### `AnimationSpec`

The animation configuration to apply to the symbol.

| Property | Type | Description |
| --- | --- | --- |
| effect(optional) | `[AnimationEffect](#animationeffect)` | 
The effect to apply to the symbol.

 |
| repeatCount(optional) | `number` | 

The number of times the animation should repeat.

 |
| repeating(optional) | `boolean` | 

If the animation should repeat.

 |
| speed(optional) | `number` | 

The duration of the animation in seconds.

 |
| variableAnimationSpec(optional) | `[VariableAnimationSpec](#variableanimationspec)` | 

An object that specifies how the symbolâs layers should animate.

 |

### `AnimationType`

Literal Type: `string`

The type of animation to apply to the symbol.

Acceptable values are: `'bounce'` | `'pulse'` | `'scale'`

### `ContentMode`

Literal Type: `string`

Determines how the image should be resized to fit its container.

Acceptable values are: `'scaleToFill'` | `'scaleAspectFit'` | `'scaleAspectFill'` | `'redraw'` | `'center'` | `'top'` | `'bottom'` | `'left'` | `'right'` | `'topLeft'` | `'topRight'` | `'bottomLeft'` | `'bottomRight'`

### `SymbolScale`

Literal Type: `string`

The scale of the symbol to render.

Acceptable values are: `'default'` | `'unspecified'` | `'small'` | `'medium'` | `'large'`

### `SymbolType`

Literal Type: `string`

Determines the symbol variant to use.

*   `'monochrome'` - Creates a color configuration that specifies that the symbol image uses its monochrome variant.
```

```
*   `'hierarchical'` - Creates a color configuration with a color scheme that originates from one color.
```

```
*   `'palette'` - Creates a color configuration with a color scheme from a palette of multiple colors.
```

```
*   `'multicolor'` - Creates a color configuration that specifies that the symbol image uses its multicolor variant, if one exists.
```

```

Acceptable values are: `'monochrome'` | `'hierarchical'` | `'palette'` | `'multicolor'`

### `SymbolWeight`

Literal Type: `string`

The weight of the symbol to render.

Acceptable values are: `'unspecified'` | `'ultraLight'` | `'thin'` | `'light'` | `'regular'` | `'medium'` | `'semibold'` | `'bold'` | `'heavy'` | `'black'`

### `VariableAnimationSpec`

A variable color animation draws attention to a symbol by changing the opacity of the symbolâs layers. You can choose to apply the effect to layers either cumulatively or iteratively. For cumulative animations, each layerâs opacity remains changed until the end of the animation cycle. For iterative animations, each layerâs opacity changes briefly before returning to its original state. These effects are compounding, each value set to `true` will add an additional effect.

| Property | Type | Description |
| --- | --- | --- |
| cumulative(optional) | `boolean` | 
This effect enables each successive variable layer, and the layer remains enabled until the end of the animation cycle. This effect cancels the iterative variant.

 |
| dimInactiveLayers(optional) | `boolean` | 

An effect that dims inactive layers of a symbol. This effect draws inactive layers with reduced, but nonzero, opacity.

 |
| hideInactiveLayers(optional) | `boolean` | 

An effect that hides inactive layers of a symbol. This effect hides inactive layers completely, rather than drawing them with reduced, but nonzero, opacity.

 |
| iterative(optional) | `boolean` | 

An effect that momentarily enables each layer of a symbol in sequence.

 |
| nonReversing(optional) | `boolean` | 

An effect that doesnât reverse each time it repeats.

 |
| reversing(optional) | `boolean` | 

An effect that reverses each time it repeats.

 |

---

# system-ui

## Expo SystemUI

A library that allows interacting with system UI elements.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-system-ui)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-system-ui/CHANGELOG.md)[](https://www.npmjs.com/package/expo-system-ui)

`expo-system-ui` enables you to interact with UI elements that fall outside of the React tree. Specifically the root view background color, and locking the user interface style globally on Android.

## Installation

`npx expo install expo-system-ui`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## API

```
import * as SystemUI from 'expo-system-ui';
```

## Methods

### `SystemUI.getBackgroundColorAsync()`

Gets the root view background color.

Current root view background color in hex format. Returns `null` if the background color is not set.

Example

```
const color = await SystemUI.getBackgroundColorAsync();
```

### `SystemUI.setBackgroundColorAsync(color)`

  

Changes the root view background color. Call this function in the root file outside of your component.

Example

```
SystemUI.setBackgroundColorAsync("black");
```


---

# task-manager

```
import React from 'react';
import { Button, View, StyleSheet } from 'react-native';
import * as TaskManager from 'expo-task-manager';
import * as Location from 'expo-location';

const LOCATION_TASK_NAME = 'background-location-task';

const requestPermissions = async () => {
  const { status: foregroundStatus } = await Location.requestForegroundPermissionsAsync();
  if (foregroundStatus === 'granted') {
    const { status: backgroundStatus } = await Location.requestBackgroundPermissionsAsync();
    if (backgroundStatus === 'granted') {
      await Location.startLocationUpdatesAsync(LOCATION_TASK_NAME, {
        accuracy: Location.Accuracy.Balanced,
      });
    }
  }
};

const PermissionsButton = () => (
  <View style={styles.container}>
    <Button onPress={requestPermissions} title="Enable background location" />
  </View>
);

TaskManager.defineTask(LOCATION_TASK_NAME, ({ data, error }) => {
  if (error) {
    // Error occurred - check `error.message` for more details.
    return;
  }
  if (data) {
    const { locations } = data;
    // do something with the locations captured in the background
  }
});

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default PermissionsButton;
```


---

# third-party-overview

[](https://github.com/expo/expo/edit/main/docs/pages/versions/unversioned/sdk/third-party-overview.mdx)

[

Edit this page

](https://github.com/expo/expo/edit/main/docs/pages/versions/unversioned/sdk/third-party-overview.mdx)

A set of third-party libraries which support for is included by default in Expo Go environment.

[

Edit this page

](https://github.com/expo/expo/edit/main/docs/pages/versions/unversioned/sdk/third-party-overview.mdx)

The Expo Go sandbox enables you to quickly experiment with building native Android and iOS apps. It supports a curated list of third-party libraries that are community-driven, provide APIs for common app functionalities, and are tested with each Expo SDK release.

The difference between libraries listed in this section, and any other third-party library is that the support for former is built-in in Expo Go environment. You may use any library of your choice with development builds.

## Learn more

[

Using other third-party libraries

Learn how to use other third-party npm libraries in your project.

](https://docs.expo.dev/workflow/using-libraries#third-party-libraries)[

Introduction to development builds

Learn why use development builds, and how to get started.

](https://docs.expo.dev/develop/development-builds/introduction)

---

# tracking-transparency

A library for requesting permission to track the users on devices using iOS 14 and higher.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-tracking-transparency)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-tracking-transparency/CHANGELOG.md)[](https://www.npmjs.com/package/expo-tracking-transparency)

A library for requesting permission to track the user or their device. Examples of data used for tracking include email address, device ID, advertising ID, and more. This permission is only necessary on iOS 14 and higher; on iOS 13 and below this permission is always granted. If the "Allow Apps to Request to Track" device-level setting is off, this permission will be denied. Be sure to add `NSUserTrackingUsageDescription` to your [Info.plist](https://docs.expo.dev/versions/latest/config/app#infoplist) to explain how the user will be tracked. Otherwise, your app will be rejected by Apple.

For more information on Apple's new App Tracking Transparency framework, see their [documentation](https://developer.apple.com/app-store/user-privacy-and-data-use/).

## Installation

`npx expo install expo-tracking-transparency`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-tracking-transparency` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-tracking-transparency",
        {
          "userTrackingPermission": "This identifier will be used to deliver personalized ads to you."
        }
      ]
    ]
  }
}
```

### Configurable properties

Are you using this library in an existing React Native app?

## Usage

```
import { useEffect } from 'react';
import { Text, StyleSheet, View } from 'react-native';
import { requestTrackingPermissionsAsync } from 'expo-tracking-transparency';

export default function App() {
  useEffect(() => {
    (async () => {
      const { status } = await requestTrackingPermissionsAsync();
      if (status === 'granted') {
        console.log('Yay! I have user permission to track data');
      }
    })();
  }, []);

  return (
    <View style={styles.container}>
      <Text>Tracking Transparency Module Example</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
});
```

## API

```
import * as ExpoTrackingTransparency from 'expo-tracking-transparency';
```

## Hooks

### `useTrackingPermissions(options)`

  

Check or request the user to authorize or deny access to app-related data that can be used for tracking the user or the device. Examples of data used for tracking include email address, device ID, advertising ID, etc. On iOS 14.5 and above, if the user denies this permission, any attempt to collect the IDFA will return a string of 0s.

The system remembers the userâs choice and doesnât prompt again unless a user uninstalls and then reinstalls the app on the device.

On Android, web, and iOS 13 and below, this method always returns that the permission was granted.

`[null | [PermissionResponse](#permissionresponse), RequestPermissionMethod<[PermissionResponse](#permissionresponse)>, GetPermissionMethod<[PermissionResponse](#permissionresponse)>]`

Example

```
const [status, requestPermission] = useTrackingPermissions();
```

## Methods

### `getAdvertisingId()`

Gets the advertising ID, a UUID string intended only for advertising. Use this string for frequency capping, attribution, conversion events, estimating the number of unique users, advertising fraud detection, and debugging.

As a best practice, don't store the advertising ID. Instead, call this function each time your app needs to use the advertising ID. Users can change whether they allow app tracking and can reset their advertising ID at any time in their system settings. Check your app's authorization using `getTrackingPermissionsAsync()` to determine the user's intent.

On Android, this function returns the "Android Advertising ID" ([AAID](https://developers.google.com/android/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient.Info#public-string-getid)). On Android devices that support multiple users, including guest users, it's possible for your app to obtain different advertising IDs on the same device. These different IDs correspond to different users who could be signed in on that device. See Google's documentation for more information: [Get a user-resettable advertising ID](https://developer.android.com/training/articles/ad-id).

On iOS, this function returns the "Identifier for Advertisers" ([IDFA](https://developer.apple.com/documentation/adsupport/asidentifiermanager/advertisingidentifier)), a string that's unique to each device. On devices running iOS 14.5 and newer, your app must request tracking authorization using `requestTrackingPermissionsAsync()` before it can get the advertising identifier.

Returns either a UUID `string` or `null`. It returns null in the following cases:

*   On Android, when `isLimitAdTrackingEnabled()` is `true`
*   In the iOS simulator, regardless of any settings
*   On devices running iOS 14.5 and later if you haven't received permission using `requestTrackingPermissionsAsync()`
*   On iOS, if you've requested permission and the user declines
*   On iOS, when a profile or configuration restricts access to the advertising identifier, such as when the user has turned off the system-wide "Allow Apps to Request to Track" setting

Example

```
TrackingTransparency.getAdvertisingId();
// "E9228286-4C4E-4789-9D95-15827DCB291B"
```

### `getTrackingPermissionsAsync()`

Checks whether or not the user has authorized the app to access app-related data that can be used for tracking the user or the device. See `requestTrackingPermissionsAsync` for more details.

On Android, web, and iOS 13 and below, this method always returns that the permission was granted.

Example

```
const { granted } = await getTrackingPermissionsAsync();

if (granted) {
  // Your app is authorized to track the user or their device
}
```

### `isAvailable()`

Returns whether the TrackingTransparency API is available on the current device.

On devices where the Tracking Transparency API is unavailable, the get and request permissions methods will always resolve to `granted`.

### `requestTrackingPermissionsAsync()`

Requests the user to authorize or deny access to app-related data that can be used for tracking the user or the device. Examples of data used for tracking include email address, device ID, advertising ID, etc. On iOS 14.5 and above, if the user denies this permission, any attempt to collect the IDFA will return a string of 0s.

The system remembers the userâs choice and doesnât prompt again unless a user uninstalls and then reinstalls the app on the device.

On Android, web, and iOS 13 and below, this method always returns that the permission was granted.

Example

```
const { granted } = await requestTrackingPermissionsAsync();

if (granted) {
  // Your app is authorized to track the user or their device
}
```

## Types

### `PermissionExpiration`

Literal Type: `union`

Permission expiration time. Currently, all permissions are granted permanently.

Acceptable values are: `'never'` | `number`

### `PermissionHookOptions`

Literal Type: `union`

Acceptable values are: `PermissionHookBehavior` | `Options`

### `PermissionResponse`

An object obtained by permissions get and request functions.

## Enums

### `PermissionStatus`

#### `DENIED`

`PermissionStatus.DENIED ï¼ "denied"`

User has denied the permission.

#### `GRANTED`

`PermissionStatus.GRANTED ï¼ "granted"`

User has granted the permission.

#### `UNDETERMINED`

`PermissionStatus.UNDETERMINED ï¼ "undetermined"`

User hasn't granted or denied the permission yet.

## Permissions

### Android

The following permissions are added automatically through the library's AndroidManifest.xml.

### iOS

The following usage description keys are used by this library:

---

# ui

A set of components that allow you to build UIs directly with SwiftUI and Jetpack Compose from React.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-ui)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-ui/CHANGELOG.md)[](https://www.npmjs.com/package/@expo/ui)

> This library is currently in alpha and will frequently experience breaking changes. It is not available in the Expo Go app â use [development builds](https://docs.expo.dev/develop/development-builds/introduction) to try it out.

`@expo/ui` is a set of native input components that allows you to build fully native interfaces with SwiftUI and Jetpack Compose. It aims to provide the commonly used features and components that a typical app will need.

## Installation

`npx expo install @expo/ui`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Swift UI examples

### BottomSheet

```
import { BottomSheet } from '@expo/ui/swift-ui';

<BottomSheet isOpened={isOpened} onIsOpenedChange={e => setIsOpened(e)}>
  <Text>Hello, world!</Text>
</BottomSheet>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/view/sheet\(ispresented:ondismiss:content:\))_

### Button

```
import { Button } from '@expo/ui/swift-ui';

<Button
  style={{ flex: 1 }}
  variant="default"
  onPress={() => {
    setEditingProfile(true);
  }}>
  Edit profile
</Button>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/button)_

### CircularProgress

```
import { CircularProgress } from '@expo/ui/swift-ui';

<CircularProgress progress={0.5} style={{ width: 300 }} color="blue" />
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/progressview)_

### ColorPicker

```
import { ColorPicker } from '@expo/ui/swift-ui';

<ColorPicker
  label="Select a color"
  selection={color}
  onValueChanged={setColor}
  style={{ width: 400, height: 200 }}
/>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/colorpicker)_

### ContextMenu

> Note: Also known as DropdownMenu.

```
import { ContextMenu } from '@expo/ui/swift-ui';

<ContextMenu style={{ width: 150, height: 50 }}>
  <ContextMenu.Items>
    <Button
      systemImage="person.crop.circle.badge.xmark"
      onPress={() => console.log('Pressed1')}>
      Hello
    </Button>
    <Button
      variant="bordered"
      systemImage="heart"
      onPress={() => console.log('Pressed2')}>
      Love it
    </Button>
    <Picker
      label="Doggos"
      options={['very', 'veery', 'veeery', 'much']}
      variant="menu"
      selectedIndex={selectedIndex}
      onOptionSelected={({ nativeEvent: { index } }) => setSelectedIndex(index)}
    />
  </ContextMenu.Items>
  <ContextMenu.Trigger>
    <Button variant="bordered" style={{ width: 150, height: 50 }}>
      Show Menu
    </Button>
  </ContextMenu.Trigger>
</ContextMenu>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/view/contextmenu\(menuitems:\))_

### DateTimePicker (date)

```
import { DateTimePicker } from '@expo/ui/swift-ui';

<DateTimePicker
  onDateSelected={date => {
    setSelectedDate(date);
  }}
  displayedComponents='date'
  initialDate={selectedDate.toISOString()}
  variant='wheel'
/>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/datepicker)_

### DateTimePicker (time)

```
import { DateTimePicker } from '@expo/ui/swift-ui';

<DateTimePicker
  onDateSelected={date => {
    setSelectedDate(date);
  }}
  displayedComponents='hourAndMinute'
  initialDate={selectedDate.toISOString()}
  variant='wheel'
/>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/datepicker)_

### Gauge

```
import { Gauge } from "@expo/ui/swift-ui";

<Gauge
  max={{ value: 1, label: '1' }}
  min={{ value: 0, label: '0' }}
  current={{ value: 0.5 }}
  color={[
    PlatformColor('systemRed'),
    PlatformColor('systemOrange'),
    PlatformColor('systemYellow'),
    PlatformColor('systemGreen'),
  ]}
  type="circularCapacity"
/>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/gauge)_

### LinearProgress

```
import { LinearProgress } from '@expo/ui/swift-ui';

<LinearProgress progress={0.5} style={{ width: 300 }} color="red" />
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/progressview)_

### List

```
import { List } from '@expo/ui/swift-ui';

<List
  scrollEnabled={false}
  editModeEnabled={editModeEnabled}
  onSelectionChange={(items) => alert(`indexes of selected items: ${items.join(', ')}`)}
  moveEnabled={moveEnabled}
  onMoveItem={(from, to) => alert(`moved item at index ${from} to index ${to}`)}
  onDeleteItem={(item) => alert(`deleted item at index: ${item}`)}
  style={{ flex: 1 }}
  listStyle='automatic'
  deleteEnabled={deleteEnabled}
  selectEnabled={selectEnabled}>
  {data.map((item, index) => (
    <LabelPrimitive key={index} title={item.text} systemImage={item.systemImage} color={color} />
  ))}
</List>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/list)_

### Picker (segmented)

```
import { Picker } from '@expo/ui/swift-ui';

  <Picker
    options={['$', '$$', '$$$', '$$$$']}
    selectedIndex={selectedIndex}
    onOptionSelected={({ nativeEvent: { index } }) => {
      setSelectedIndex(index);
    }}
    variant="segmented"
  />
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/picker#Styling-pickers)_

### Picker (wheel)

```
import { Picker } from '@expo/ui/swift-ui';

<Picker
  options={['$', '$$', '$$$', '$$$$']}
  selectedIndex={selectedIndex}
  onOptionSelected={({ nativeEvent: { index } }) => {
    setSelectedIndex(index);
  }}
  variant="wheel"
  style={{
    height: 100,
  }}
/>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/pickerstyle/wheel)_

### Slider

```
import { Slider } from '@expo/ui/swift-ui';

<Slider
  style={{ minHeight: 60 }}
  value={value}
  onValueChange={(value) => {
    setValue(value);
  }}
/>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/slider)_

### Switch (toggle)

> Note: Also known as Toggle.

```
import { Switch } from '@expo/ui/swift-ui';

<Switch
  checked={checked}
  onValueChange={checked => {
    setChecked(checked);
  }}
  color="#ff0000"
  label="Play music"
  variant="switch"
/>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/toggle)_

### Switch (checkbox)

```
import { Switch } from '@expo/ui/swift-ui';

<Switch
  checked={checked}
  onValueChange={checked => {
    setChecked(checked);
  }}
  label="Play music"
  variant="checkbox"
/>
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/toggle)_

### TextInput

```
import { TextInput } from '@expo/ui/swift-ui';

<TextInput autocorrection={false} defaultValue="A single line text input" onChangeText={setValue} />
```

_See also: [official SwiftUI documentation](https://developer.apple.com/documentation/swiftui/textfield)_

## Jetpack Compose examples

### Button

```
import { Button } from '@expo/ui/jetpack-compose';

<Button
  style={{ flex: 1 }}
  variant="default"
  onPress={() => {
    setEditingProfile(true);
  }}>
  Edit profile
</Button>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/button)_

### CircularProgress

```
import { CircularProgress } from '@expo/ui/jetpack-compose';

<CircularProgress progress={0.5} style={{ width: 300 }} color="blue" elementColors={{ trackColor: '#cccccc' }} />
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/progress)_

### ContextMenu

> Note: Also known as DropdownMenu.

```
import { ContextMenu } from '@expo/ui/jetpack-compose';

<ContextMenu style={{ width: 150, height: 50 }}>
  <ContextMenu.Items>
    <Button
      elementColors={{ containerColor: '#0000ff', contentColor: '#00ff00' }}
      onPress={() => console.log('Pressed1')}>
      Hello
    </Button>
    <Button
      variant="bordered"
      color="#ff0000"
      onPress={() => console.log('Pressed2')}>
      Love it
    </Button>
    <Picker
      label="Doggos"
      options={['very', 'veery', 'veeery', 'much']}
      variant="menu"
      selectedIndex={selectedIndex}
      onOptionSelected={({ nativeEvent: { index } }) => setSelectedIndex(index)}
    />
  </ContextMenu.Items>
  <ContextMenu.Trigger>
    <Button variant="bordered" style={{ width: 150, height: 50 }}>
      Show Menu
    </Button>
  </ContextMenu.Trigger>
</ContextMenu>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/menu)_

### DateTimePicker (date)

```
import { DateTimePicker } from '@expo/ui/jetpack-compose';

<DateTimePicker
  onDateSelected={date => {
    setSelectedDate(date);
  }}
  displayedComponents='date'
  initialDate={selectedDate.toISOString()}
  variant='picker'
/>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/datepickers)_

### DateTimePicker (time)

```
import { DateTimePicker } from '@expo/ui/jetpack-compose';

<DateTimePicker
  onDateSelected={date => {
    setSelectedDate(date);
  }}
  displayedComponents='hourAndMinute'
  initialDate={selectedDate.toISOString()}
  variant='picker'
/>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/time-pickers)_

### LinearProgress

### Picker (radio)

```
import { Picker } from '@expo/ui/jetpack-compose';

<Picker
  options={['$', '$$', '$$$', '$$$$']}
  selectedIndex={selectedIndex}
  onOptionSelected={({ nativeEvent: { index } }) => {
    setSelectedIndex(index);
  }}
  variant="radio"
/>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/radio-button)_

### Picker (segmented)

```
import { Picker } from '@expo/ui/jetpack-compose';

<Picker
  options={['$', '$$', '$$$', '$$$$']}
  selectedIndex={selectedIndex}
  onOptionSelected={({ nativeEvent: { index } }) => {
    setSelectedIndex(index);
  }}
  variant="segmented"
/>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/segmented-button)_

### Slider

```
import { Slider } from '@expo/ui/jetpack-compose';

<Slider
  style={{ minHeight: 60 }}
  value={value}
  onValueChange={(value) => {
    setValue(value);
  }}
/>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/slider)_

### Switch (toggle)

> Note: Also known as Toggle.

```
import { Switch } from '@expo/ui/jetpack-compose';

<Switch
  value={checked}
  onValueChange={checked => {
    setChecked(checked);
  }}
  color="#ff0000"
  label="Play music"
  variant="switch"
/>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/switch)_

### Switch (checkbox)

```
import { Switch } from '@expo/ui/jetpack-compose';

<Switch
  value={checked}
  onValueChange={checked => {
    setChecked(checked);
  }}
  label="Play music"
  color="#ff0000"
  variant="checkbox"
/>
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/components/checkbox)_

### TextInput

```
import { TextInput } from '@expo/ui/jetpack-compose';

<TextInput autocorrection={false} defaultValue="A single line text input" onChangeText={setValue} />
```

_See also: [official Jetpack Compose documentation](https://developer.android.com/develop/ui/compose/text/user-input)_

## API

Full documentation is not yet available. Use TypeScript types to explore the API.

```
// Import from the SwiftUI package
import { BottomSheet } from '@expo/ui/swift-ui';
```

```
// Import from the Jetpack Compose package
import { Button } from '@expo/ui/jetpack-compose';
```


---

# updates

## Expo Updates

A library that enables your app to manage remote updates to your application code.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-updates)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-updates/CHANGELOG.md)[](https://www.npmjs.com/package/expo-updates)

`expo-updates` is a library that enables your app to manage remote updates to your application code. It communicates with the configured remote update service to get information about available updates.

## Installation

The `expo-updates` library can be automatically configured using [EAS Update](https://docs.expo.dev/eas-update/introduction), which is a hosted service that manages and serves updates to your app. To get started with EAS Update, follow the instructions in the [Get started](https://docs.expo.dev/eas-update/getting-started) guide.

Alternatively, it is also possible to configure the `expo-updates` library manually in cases where a different remote update service is required or configuration is only specified in native files.

Manual installation, configuration, and custom remote update services

## Configuration

There are build-time configuration options that control the behavior of the library. For most apps, these configuration values are set in the [app config](https://docs.expo.dev/workflow/configuration) under the [`updates` property](https://docs.expo.dev/versions/latest/config/app#updates).

The two core required configuration options are:

*   [`updates.url`](https://docs.expo.dev/versions/latest/config/app#updates): the URL at which the library fetches remote updates
*   [`runtimeVersion`](https://docs.expo.dev/versions/latest/config/app#runtimeversion): a [runtime version](https://docs.expo.dev/versions/latest/sdk/updates#runtime-version)

These are configured automatically when following the EAS Update [Get started](https://docs.expo.dev/eas-update/getting-started) guide.

#### Runtime version

Each time you build a binary for your app it includes the native code and configuration present at the time of the build as well as native configuration, and this unique combination is represented by a string called a runtime version. A remote update targets one runtime version, indicating that only binaries with a matching runtime version can load the remote update.

Manual configuration Automatic configuration using runtime version policies

#### Native configuration and overriding

If your project does not use Continuous Native Generation, these configuration values may also be set in your app's native configuration files or overridden at during initialization in native code.

Native configuration instructions

## Usage

By default, `expo-updates` checks for updates when the app launches. If an update is available, it downloads the update and applies it the next time the app is restarted. You can tune this startup behavior using the `checkAutomatically` and `fallbackToCacheTimeout` configuration options above.

The library also provides a variety of constants to inspect the current update and functions to customize update behavior from your application code (after startup). For example, one common alternative usage pattern is to manually check for updates after the app has started instead of doing the default check on launch.

Example: Check for updates manually

## Testing

Most of the methods and constants in this library can be used or tested only in release builds. In debug builds, the default behavior is to always load the latest JavaScript from a development server. It is possible to [build a debug version of your app with the same updates behavior as a release build](https://docs.expo.dev/eas-update/debug-advanced#debugging-of-native-code-while-loading-the-app-through-expo-updates). Such an app will not open the latest JavaScript from your development server â it will load published updates just as a release build does. This may be useful for debugging the behavior of your app when it is not connected to a development server.

To test the content of an update in a development build, run [`eas update`](https://docs.expo.dev/eas-update/getting-started) and then browse to the update in your development build. Note that this only simulates what an update will look like in your app, and most of the [Updates API](https://docs.expo.dev/versions/latest/sdk/updates#api) is unavailable when running in a development build.

To test updates in a release build, you can create a [.apk](https://docs.expo.dev/build-reference/apk) or a [simulator build](https://docs.expo.dev/build-reference/simulators), or make a release build locally with `npx expo run:android --variant release` and `npx expo run:ios --configuration Release` (you don't need to submit this build to the store to test). The full [Updates API](https://docs.expo.dev/versions/latest/sdk/updates#api) is available in a release build.

To test the content of an update in Expo Go, run [`eas update`](https://docs.expo.dev/eas-update/getting-started) and then browse to the update in Expo Go. Note that this only simulates what an update will look like in your app, and most of the [Updates API](https://docs.expo.dev/versions/latest/sdk/updates#api) is unavailable when running in Expo Go. Also note that only updates using [Expo Go-compatible libraries](https://docs.expo.dev/workflow/using-libraries#determining-third-party-library-compatibility) are supported.

## API

```
import * as Updates from 'expo-updates';
```

## Constants

### `Updates.channel`

Type: `string | null`

The channel name of the current build, if configured for use with EAS Update. `null` otherwise.

Expo Go and development builds are not set to a specific channel and can run any updates compatible with their native runtime. Therefore, this value will always be `null` when running an update on Expo Go or a development build.

### `Updates.checkAutomatically`

Type: `[UpdatesCheckAutomaticallyValue](#updatescheckautomaticallyvalue) | null`

Determines if and when `expo-updates` checks for and downloads updates automatically on startup.

### `Updates.createdAt`

Type: `[Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) | null`

If `expo-updates` is enabled, this is a `Date` object representing the creation time of the update that's currently running (whether it was embedded or downloaded at runtime).

In development mode, or any other environment in which `expo-updates` is disabled, this value is null.

### `Updates.emergencyLaunchReason`

Type: `null | string`

If `isEmergencyLaunch` is set to true, this will contain a string error message describing what failed during initialization.

### `Updates.isEmbeddedLaunch`

Type: `boolean`

This will be true if the currently running update is the one embedded in the build, and not one downloaded from the updates server.

### `Updates.isEmergencyLaunch`

Type: `boolean`

`expo-updates` does its very best to always launch monotonically newer versions of your app so you don't need to worry about backwards compatibility when you put out an update. In very rare cases, it's possible that `expo-updates` may need to fall back to the update that's embedded in the app binary, even after newer updates have been downloaded and run (an "emergency launch"). This boolean will be `true` if the app is launching under this fallback mechanism and `false` otherwise. If you are concerned about backwards compatibility of future updates to your app, you can use this constant to provide special behavior for this rare case.

### `Updates.isEnabled`

Type: `boolean`

Whether `expo-updates` is enabled. This may be false in a variety of cases including:

*   enabled set to false in configuration
*   missing or invalid URL in configuration
*   missing runtime version or SDK version in configuration
*   error accessing storage on device during initialization

When false, the embedded update is loaded.

### `Updates.latestContext`

Type: `[UpdatesNativeStateMachineContext](#updatesnativestatemachinecontext)`

### `Updates.launchDuration`

Type: `null | number`

Number of milliseconds it took to launch.

### `Updates.manifest`

Type: `[Partial](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)<[Manifest](#manifest)>`

If `expo-updates` is enabled, this is the [manifest](https://docs.expo.dev/versions/latest/sdk/constants#manifest) (or [classic manifest](https://docs.expo.dev/versions/latest/sdk/constants#appmanifest)) object for the update that's currently running.

In development mode, or any other environment in which `expo-updates` is disabled, this object is empty.

### `Updates.runtimeVersion`

Type: `string | null`

The runtime version of the current build.

### `Updates.updateId`

Type: `string | null`

The UUID that uniquely identifies the currently running update. The UUID is represented in its canonical string form and will always use lowercase letters. This value is `null` when running in a local development environment or any other environment where `expo-updates` is disabled.

Example

`"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"`

## Hooks

### `useUpdates()`

Hook that obtains information on available updates and on the currently running update.

the structures with information on currently running and available updates.

Example

```
import { StatusBar } from 'expo-status-bar';
import * as Updates from 'expo-updates';
import { useEffect } from 'react';
import { Button, Text, View } from 'react-native';

export default function UpdatesDemo() {
  const {
    currentlyRunning,
    isUpdateAvailable,
    isUpdatePending
  } = Updates.useUpdates();

  useEffect(() => {
    if (isUpdatePending) {
      // Update has successfully downloaded; apply it now
      Updates.reloadAsync();
    }
  }, [isUpdatePending]);

  // If true, we show the button to download and run the update
  const showDownloadButton = isUpdateAvailable;

  // Show whether or not we are running embedded code or an update
  const runTypeMessage = currentlyRunning.isEmbeddedLaunch
    ? 'This app is running from built-in code'
    : 'This app is running an update';

  return (
    <View style={styles.container}>
      <Text style={styles.headerText}>Updates Demo</Text>
      <Text>{runTypeMessage}</Text>
      <Button onPress={() => Updates.checkForUpdateAsync()} title="Check manually for updates" />
      {showDownloadButton ? (
        <Button onPress={() => Updates.fetchUpdateAsync()} title="Download and run update" />
      ) : null}
      <StatusBar style="auto" />
    </View>
  );
}
```

## Classes

### `ExpoUpdatesModule`

Type: Class extends `[_default](#_default)<[UpdatesEvents](#updatesevents)>` implements `[UpdatesModuleInterface](#updatesmoduleinterface)`

## Methods

### `Updates.checkForUpdateAsync()`

Checks the server to see if a newly deployed update to your project is available. Does not actually download the update. This method cannot be used in development mode, and the returned promise will be rejected if you try to do so.

Checking for an update uses a device's bandwidth and battery life like any network call. Additionally, updates served by Expo may be rate limited. A good rule of thumb to check for updates judiciously is to check when the user launches or foregrounds the app. Avoid polling for updates in a frequent loop.

A promise that fulfills with an [`UpdateCheckResult`](#updatecheckresult) object.

The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or timeout communicating with the server. It also rejects when `expo-updates` is not enabled.

### `Updates.clearLogEntriesAsync()`

Clears existing `expo-updates` log entries.

> For now, this operation does nothing on the client. Once log persistence has been implemented, this operation will actually remove existing logs.

A promise that fulfills if the clear operation was successful.

The promise rejects if there is an unexpected error in clearing the logs.

### `Updates.fetchUpdateAsync()`

Downloads the most recently deployed update to your project from server to the device's local storage. This method cannot be used in development mode, and the returned promise will be rejected if you try to do so.

> Note: [`reloadAsync()`](#updatesreloadasync) can be called after promise resolution to reload the app using the most recently downloaded version. Otherwise, the update will be applied on the next app cold start.

A promise that fulfills with an [`UpdateFetchResult`](#updatefetchresult) object.

The promise rejects in Expo Go or if the app is in development mode, or if there is an unexpected error or timeout communicating with the server. It also rejects when `expo-updates` is not enabled.

### `Updates.getExtraParamsAsync()`

Retrieves the current extra params.

This method cannot be used in Expo Go or development mode. It also rejects when `expo-updates` is not enabled.

### `Updates.readLogEntriesAsync(maxAge)`

  

Retrieves the most recent `expo-updates` log entries.

A promise that fulfills with an array of [`UpdatesLogEntry`](#updateslogentry) objects;

The promise rejects if there is an unexpected error in retrieving the logs.

### `Updates.reloadAsync()`

Instructs the app to reload using the most recently downloaded version. This is useful for triggering a newly downloaded update to launch without the user needing to manually restart the app. Unlike `Expo.reloadAppAsync()` provided by the `expo` package, this function not only reloads the app but also changes the loaded JavaScript bundle to that of the most recently downloaded update.

It is not recommended to place any meaningful logic after a call to `await Updates.reloadAsync()`. This is because the promise is resolved after verifying that the app can be reloaded, and immediately before posting an asynchronous task to the main thread to actually reload the app. It is unsafe to make any assumptions about whether any more JS code will be executed after the `Updates.reloadAsync` method call resolves, since that depends on the OS and the state of the native module and main threads.

This method cannot be used in Expo Go or development mode, and the returned promise will be rejected if you try to do so. It also rejects when `expo-updates` is not enabled.

A promise that fulfills right before the reload instruction is sent to the JS runtime, or rejects if it cannot find a reference to the JS runtime. If the promise is rejected in production mode, it most likely means you have installed the module incorrectly. Double check you've followed the installation instructions. In particular, on iOS ensure that you set the `bridge` property on `EXUpdatesAppController` with a pointer to the `RCTBridge` you want to reload, and on Android ensure you either call `UpdatesController.initialize` with the instance of `ReactApplication` you want to reload, or call `UpdatesController.setReactNativeHost` with the proper instance of `ReactNativeHost`.

### `Updates.setExtraParamAsync(key, value)`

  

Sets an extra param if value is non-null, otherwise unsets the param. Extra params are sent as an [Expo Structured Field Value Dictionary](https://docs.expo.dev/technical-specs/expo-sfv-0) in the `Expo-Extra-Params` header of update requests. A compliant update server may use these params when selecting an update to serve.

This method cannot be used in Expo Go or development mode. It also rejects when `expo-updates` is not enabled.

### `Updates.setUpdateURLAndRequestHeadersOverride(configOverride)`

  

Overrides updates URL and reuqest headers in runtime from build time. This method allows you to load specific updates from a URL that you provide. Use this method at your own risk, as it may cause unexpected behavior. [Learn more about use cases and limitations](https://docs.expo.dev/eas-update/override/).

## Interfaces

### `UpdatesModuleInterface`

Common interface for all native module implementations (android, ios, web).

## Types

### `CurrentlyRunningInfo`

Structure encapsulating information on the currently running app (either the embedded bundle or a downloaded update).

### `UpdateCheckResult`

Literal Type: `union`

The result of checking for a new update.

Acceptable values are: `[UpdateCheckResultRollBack](#updatecheckresultrollback)` | `[UpdateCheckResultAvailable](#updatecheckresultavailable)` | `[UpdateCheckResultNotAvailable](#updatecheckresultnotavailable)`

### `UpdateCheckResultAvailable`

The update check result when a new update is found on the server.

### `UpdateCheckResultNotAvailable`

The update check result if no new update was found.

### `UpdateCheckResultRollBack`

The update check result when a rollback directive is received.

### `UpdateFetchResult`

Literal Type: `union`

The result of fetching a new update.

Acceptable values are: `[UpdateFetchResultSuccess](#updatefetchresultsuccess)` | `[UpdateFetchResultFailure](#updatefetchresultfailure)` | `[UpdateFetchResultRollBackToEmbedded](#updatefetchresultrollbacktoembedded)`

### `UpdateFetchResultFailure`

The failed result of fetching a new update.

### `UpdateFetchResultRollBackToEmbedded`

The roll back to embedded result of fetching a new update.

### `UpdateFetchResultSuccess`

The successful result of fetching a new update.

### `UpdateInfo`

Literal Type: `union`

Combined structure representing any type of update.

Acceptable values are: `[UpdateInfoNew](#updateinfonew)` | `[UpdateInfoRollback](#updateinforollback)`

### `UpdateInfoNew`

Structure representing a new update.

### `UpdateInfoRollback`

Structure representing a rollback directive.

### `UpdatesCheckAutomaticallyNativeValue`

Literal Type: `string`

Acceptable values are: `'ALWAYS'` | `'ERROR_RECOVERY_ONLY'` | `'NEVER'` | `'WIFI_ONLY'`

### `UpdatesEvents`

### `UpdatesLogEntry`

An object representing a single log entry from `expo-updates` logging on the client.

### `UseUpdatesReturnType`

The type returned by [`useUpdates()`](#useupdates).

## Enums

### `UpdateCheckResultNotAvailableReason`

#### `NO_UPDATE_AVAILABLE_ON_SERVER`

`UpdateCheckResultNotAvailableReason.NO_UPDATE_AVAILABLE_ON_SERVER ï¼ "noUpdateAvailableOnServer"`

No update manifest or rollback directive received from the update server.

#### `ROLLBACK_NO_EMBEDDED`

`UpdateCheckResultNotAvailableReason.ROLLBACK_NO_EMBEDDED ï¼ "rollbackNoEmbeddedConfiguration"`

A rollback directive was received from the update server, but this app has no embedded update.

#### `ROLLBACK_REJECTED_BY_SELECTION_POLICY`

`UpdateCheckResultNotAvailableReason.ROLLBACK_REJECTED_BY_SELECTION_POLICY ï¼ "rollbackRejectedBySelectionPolicy"`

A rollback directive was received from the update server, but the directive does not pass the configured selection policy.

#### `UPDATE_PREVIOUSLY_FAILED`

`UpdateCheckResultNotAvailableReason.UPDATE_PREVIOUSLY_FAILED ï¼ "updatePreviouslyFailed"`

An update manifest was received from the update server, but the update has been previously launched on this device and never successfully launched.

#### `UPDATE_REJECTED_BY_SELECTION_POLICY`

`UpdateCheckResultNotAvailableReason.UPDATE_REJECTED_BY_SELECTION_POLICY ï¼ "updateRejectedBySelectionPolicy"`

An update manifest was received from the update server, but the update is not launchable, or does not pass the configured selection policy.

### `UpdateInfoType`

The different possible types of updates. Currently, the only supported type is `UpdateInfoType.NEW`, indicating a new update that can be downloaded and launched on the device. In the future, other types of updates may be added to this list.

#### `NEW`

`UpdateInfoType.NEW ï¼ "new"`

This is the type for new updates found on or downloaded from the update server, that are launchable on the device.

#### `ROLLBACK`

`UpdateInfoType.ROLLBACK ï¼ "rollback"`

This type is used when an update is a directive to roll back to the embedded bundle.

### `UpdatesCheckAutomaticallyValue`

The possible settings that determine if `expo-updates` will check for updates on app startup. By default, Expo will check for updates every time the app is loaded. Set this to `ON_ERROR_RECOVERY` to disable automatic checking unless recovering from an error. Set this to `NEVER` to completely disable automatic checking.

#### `NEVER`

`UpdatesCheckAutomaticallyValue.NEVER ï¼ "NEVER"`

Automatic update checks are off, and update checks must be done through the JS API.

#### `ON_ERROR_RECOVERY`

`UpdatesCheckAutomaticallyValue.ON_ERROR_RECOVERY ï¼ "ON_ERROR_RECOVERY"`

Only checks for updates when the app starts up after an error recovery.

#### `ON_LOAD`

`UpdatesCheckAutomaticallyValue.ON_LOAD ï¼ "ON_LOAD"`

Checks for updates whenever the app is loaded. This is the default setting.

#### `WIFI_ONLY`

`UpdatesCheckAutomaticallyValue.WIFI_ONLY ï¼ "WIFI_ONLY"`

Only checks for updates when the app starts and has a Wi-Fi connection.

### `UpdatesLogEntryCode`

The possible code values for `expo-updates` log entries

#### `ASSETS_FAILED_TO_LOAD`

`UpdatesLogEntryCode.ASSETS_FAILED_TO_LOAD ï¼ "AssetsFailedToLoad"`

#### `INITIALIZATION_ERROR`

`UpdatesLogEntryCode.INITIALIZATION_ERROR ï¼ "InitializationError"`

#### `JS_RUNTIME_ERROR`

`UpdatesLogEntryCode.JS_RUNTIME_ERROR ï¼ "JSRuntimeError"`

#### `NONE`

`UpdatesLogEntryCode.NONE ï¼ "None"`

#### `NO_UPDATES_AVAILABLE`

`UpdatesLogEntryCode.NO_UPDATES_AVAILABLE ï¼ "NoUpdatesAvailable"`

#### `UNKNOWN`

`UpdatesLogEntryCode.UNKNOWN ï¼ "Unknown"`

#### `UPDATE_ASSETS_NOT_AVAILABLE`

`UpdatesLogEntryCode.UPDATE_ASSETS_NOT_AVAILABLE ï¼ "UpdateAssetsNotAvailable"`

#### `UPDATE_CODE_SIGNING_ERROR`

`UpdatesLogEntryCode.UPDATE_CODE_SIGNING_ERROR ï¼ "UpdateCodeSigningError"`

#### `UPDATE_FAILED_TO_LOAD`

`UpdatesLogEntryCode.UPDATE_FAILED_TO_LOAD ï¼ "UpdateFailedToLoad"`

#### `UPDATE_HAS_INVALID_SIGNATURE`

`UpdatesLogEntryCode.UPDATE_HAS_INVALID_SIGNATURE ï¼ "UpdateHasInvalidSignature"`

#### `UPDATE_SERVER_UNREACHABLE`

`UpdatesLogEntryCode.UPDATE_SERVER_UNREACHABLE ï¼ "UpdateServerUnreachable"`

### `UpdatesLogEntryLevel`

The possible log levels for `expo-updates` log entries

#### `DEBUG`

`UpdatesLogEntryLevel.DEBUG ï¼ "debug"`

#### `ERROR`

`UpdatesLogEntryLevel.ERROR ï¼ "error"`

#### `FATAL`

`UpdatesLogEntryLevel.FATAL ï¼ "fatal"`

#### `INFO`

`UpdatesLogEntryLevel.INFO ï¼ "info"`

#### `TRACE`

`UpdatesLogEntryLevel.TRACE ï¼ "trace"`

#### `WARN`

`UpdatesLogEntryLevel.WARN ï¼ "warn"`

Error codes
---------------------------

---

# video

A library that provides an API to implement video playback in apps.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-video)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-video/CHANGELOG.md)[](https://www.npmjs.com/package/expo-video)

`expo-video` is a cross-platform, performant video component for React Native and Expo with Web support.

## Installation

`npx expo install expo-video`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-video` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure various properties that cannot be set at runtime and require building a new app binary to take effect. If your app does not use EAS Build, then you'll need to manually configure the package.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-video",
        {
          "supportsBackgroundPlayback": true,
          "supportsPictureInPicture": true
        }
      ]
    ],
  }
}
```

### Configurable properties

## Usage

Here's a simple example of a video with a play and pause button.

```
import { useEvent } from 'expo';
import { useVideoPlayer, VideoView } from 'expo-video';
import { StyleSheet, View, Button } from 'react-native';

const videoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';

export default function VideoScreen() {
  const player = useVideoPlayer(videoSource, player => {
    player.loop = true;
    player.play();
  });

  const { isPlaying } = useEvent(player, 'playingChange', { isPlaying: player.playing });

  return (
    <View style={styles.contentContainer}>
      <VideoView style={styles.video} player={player} allowsFullscreen allowsPictureInPicture />
      <View style={styles.controlsContainer}>
        <Button
          title={isPlaying ? 'Pause' : 'Play'}
          onPress={() => {
            if (isPlaying) {
              player.pause();
            } else {
              player.play();
            }
          }}
        />
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  contentContainer: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 50,
  },
  video: {
    width: 350,
    height: 275,
  },
  controlsContainer: {
    padding: 10,
  },
});
```

### Receiving events

The changes in properties of the [`VideoPlayer`](https://docs.expo.dev/versions/latest/sdk/video#videoplayer) do not update the React state. Therefore, to display the information about the current state of the `VideoPlayer`, it is necessary to listen to the [events](https://docs.expo.dev/versions/latest/sdk/video#videoplayerevents) it emits. The event system is based on the [`EventEmitter`](https://docs.expo.dev/versions/latest/sdk/expo#eventemitter) class and [hooks](https://docs.expo.dev/versions/latest/sdk/expo#hooks) from the [`expo`](https://docs.expo.dev/versions/latest/sdk/expo) package. There are a few ways to listen to events:

#### `useEvent` hook

Creates a listener that will return a stateful value that can be used in a component. It also cleans up automatically when the component unmounts.

```
import { useEvent } from 'expo';
// ... Other imports, definition of the component, creating the player etc.

const { status, error } = useEvent(player, 'statusChange', { status: player.status });
// Rest of the component...
```

#### `useEventListener` hook

Built around the `Player.addListener` and `Player.removeListener` methods, creates an event listener with automatic cleanup.

```
import { useEventListener } from 'expo';
// ...Other imports, definition of the component, creating the player etc.

useEventListener(player, 'statusChange', ({ status, error }) => {
  setPlayerStatus(status);
  setPlayerError(error);
  console.log('Player status changed: ', status);
});
// Rest of the component...
```

#### `Player.addListener` method

Most flexible way to listen to events, but requires manual cleanup and more boilerplate code.

```
// ...Imports, definition of the component, creating the player etc.

useEffect(() => {
  const subscription = player.addListener('statusChange', ({ status, error }) => {
    setPlayerStatus(status);
    setPlayerError(error);
    console.log('Player status changed: ', status);
  });

  return () => {
    subscription.remove();
  };
}, []);
// Rest of the component...
```

### Playing local media from the assets directory

`expo-video` supports playing local media loaded using the `require` function. You can use the result as a source directly, or assign it to the `assetId` parameter of a [`VideoSource`](https://docs.expo.dev/versions/latest/sdk/video#videosource) if you also want to configure other properties.

```
import { VideoSource } from 'expo-video';

const assetId = require('./assets/bigbuckbunny.mp4');

const videoSource: VideoSource = {
  assetId,
  metadata: {
    title: 'Big Buck Bunny',
    artist: 'The Open Movie Project',
  },
};

const player1 = useVideoPlayer(assetId); // You can use the `asset` directly as a video source
const player2 = useVideoPlayer(videoSource);
```

### Preloading videos

While another video is playing, a video can be loaded before showing it in the view. This allows for quicker transitions between subsequent videos and a better user experience.

To preload a video, you have to create a `VideoPlayer` with a video source. Even when the player is not connected to a `VideoView`, it will fill the buffers. Once it is connected to the `VideoView`, it will be able to start playing without buffering.

In some cases, it is beneficial to preload a video later in the screen lifecycle. In that case, a `VideoPlayer` with a `null` source should be created. To start preloading, replace the player source with a video source using the `replace()` function.

Here is an example of how to preload a video:

```
import { useVideoPlayer, VideoView, VideoSource } from 'expo-video';
import { useState, useCallback } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';

const bigBuckBunnySource: VideoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4';

const elephantsDreamSource: VideoSource =
  'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4';

export default function PreloadingVideoPlayerScreen() {
  const player1 = useVideoPlayer(bigBuckBunnySource, player => {
    player.play();
  });

  const player2 = useVideoPlayer(elephantsDreamSource, player => {
    player.currentTime = 20;
  });

  const [currentPlayer, setCurrentPlayer] = useState(player1);

  const replacePlayer = useCallback(async () => {
    currentPlayer.pause();
    if (currentPlayer === player1) {
      setCurrentPlayer(player2);
      player1.pause();
      player2.play();
    } else {
      setCurrentPlayer(player1);
      player2.pause();
      player1.play();
    }
  }, [player1, currentPlayer]);

  return (
    <View style={styles.contentContainer}>
      <VideoView player={currentPlayer} style={styles.video} nativeControls={false} />
      <TouchableOpacity style={styles.button} onPress={replacePlayer}>
        <Text style={styles.buttonText}>Replace Player</Text>
      </TouchableOpacity>
    </View>
  );
}

const styles = StyleSheet.create({
  contentContainer: {
    flex: 1,
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 50,
  },
  button: {
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 3,
    paddingVertical: 8,
    paddingHorizontal: 12,
    backgroundColor: '#4630ec',
  },
  buttonText: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#eeeeee',
    textAlign: 'center',
  },
  video: {
    width: 300,
    height: 168.75,
    marginVertical: 20,
  },
});
```

### Using the VideoPlayer directly

In most cases, the [`useVideoPlayer`](https://docs.expo.dev/versions/latest/sdk/video#usevideoplayersource-setup) hook should be used to create a `VideoPlayer` instance. It manages the player's lifecycle and ensures that it is properly disposed of when the component is unmounted. However, in some advanced use cases, it might be necessary to create a `VideoPlayer` that does not get automatically destroyed when the component is unmounted. In those cases, the `VideoPlayer` can be created using the [`createVideoPlayer`](https://docs.expo.dev/versions/latest/sdk/video#videocreatevideoplayersource) function. You need be aware of the risks that come with this approach, as it is your responsibility to call the [`release()`](https://docs.expo.dev/versions/latest/sdk/expo#release) method when the player is no longer needed. If not handled properly, this approach may lead to memory leaks.

```
import { createVideoPlayer } from 'expo-video';
const player = createVideoPlayer(videoSource);
```

> On Android, mounting multiple `VideoView` components at the same time with the same `VideoPlayer` instance will not work due to a [platform limitation](https://github.com/expo/expo/issues/35012).

### Caching videos

If your app frequently replays the same video, caching can be utilized to minimize network usage and enhance user experience, albeit at the cost of increased device storage usage. `expo-video` supports video caching on `Android` and `iOS` platforms. This feature can be activated by setting the [`useCaching`](https://docs.expo.dev/versions/latest/sdk/video#videosource) property of a [`VideoSource`](https://docs.expo.dev/versions/latest/sdk/video#videosource) object to `true`.

The cache is persistent and will be cleared on a least-recently-used basis once the preferred size is exceeded. Furthermore, the system can clear the cache due to low storage availability, so it's not advisable to depend on the cache to store critical data.

The cache functions offline. If a portion or the entirety of a video is cached, it can be played from the cache even when the device is offline until the cached data is exhausted.

> Due to platform limitations, the cache cannot be used with HLS video sources on iOS. Caching DRM-protected videos is not supported on Android and iOS.

### Managing the cache

*   The preferred cache size in bytes can be defined using the [`setVideoCacheSizeAsync`](https://docs.expo.dev/versions/latest/sdk/video#videosetvideocachesizeasyncsizebytes) function. The default cache size is 1GB.
*   The [`getCurrentVideoCacheSize`](https://docs.expo.dev/versions/latest/sdk/video#videogetcurrentvideocachesize) can be used to get the current storage occupied by the cache in bytes.
*   All cached videos can be cleared using the [`clearVideoCacheAsync`](https://docs.expo.dev/versions/latest/sdk/video#videoclearvideocacheasync) function.

## API

```
import { VideoView, useVideoPlayer } from 'expo-video';
```

## Component

### `VideoView`

Type: `React.[PureComponent](https://react.dev/reference/react/PureComponent)<[VideoViewProps](#videoviewprops)>`

VideoViewProps

### `allowsFullscreen`

OptionalâType:

`boolean`âDefault: `true`

Determines whether fullscreen mode is allowed or not.

### `allowsPictureInPicture`

Determines whether the player allows Picture in Picture (PiP) mode.

> Note: The `supportsPictureInPicture` property of the [config plugin](#configuration-in-app-config) has to be configured for the PiP to work.

### `allowsVideoFrameAnalysis`

OptionalâType:

`boolean`âDefault: `true`

Specifies whether to perform video frame analysis (Live Text in videos). Check official [Apple documentation](https://developer.apple.com/documentation/avkit/avplayerviewcontroller/allowsvideoframeanalysis) for more details.

### `contentFit`

OptionalâType:

`[VideoContentFit](#videocontentfit)`âDefault: `'contain'`

Describes how the video should be scaled to fit in the container. Options are `'contain'`, `'cover'`, and `'fill'`.

### `contentPosition`

OptionalâType:

`{ dx: number, dy: number }`

Determines the position offset of the video inside the container.

### `nativeControls`

OptionalâType:

`boolean`âDefault: `true`

Determines whether native controls should be displayed or not.

### `onFirstFrameRender`

OptionalâType:

`() => void`

A callback to call after the mounted `VideoPlayer` has rendered the first frame into the `VideoView`. This event can be used to hide any cover images that conceal the initial loading of the player.

> Note: This event may also be called during playback when the current video track changes (for example when the player switches video quality).

### `onFullscreenEnter`

OptionalâType:

`() => void`

A callback to call after the video player enters fullscreen mode.

### `onFullscreenExit`

OptionalâType:

`() => void`

A callback to call after the video player exits fullscreen mode.

### `onPictureInPictureStart`

OptionalâType:

`() => void`

A callback to call after the video player enters Picture in Picture (PiP) mode.

### `onPictureInPictureStop`

OptionalâType:

`() => void`

A callback to call after the video player exits Picture in Picture (PiP) mode.

### `player`

A video player instance. Use [`useVideoPlayer()`](#usevideoplayersource-setup) hook to create one.

### `playsInline`

Determines whether a video should be played "inline", that is, within the element's playback area.

### `requiresLinearPlayback`

OptionalâType:

`boolean`âDefault: `false`

Determines whether the player allows the user to skip media content.

### `showsTimecodes`

OptionalâType:

`boolean`âDefault: `true`

Determines whether the timecodes should be displayed or not.

### `startsPictureInPictureAutomatically`

OptionalâType:

`boolean`âDefault: `false`

Determines whether the player should start Picture in Picture (PiP) automatically when the app is in the background.

> Note: Only one player can be in Picture in Picture (PiP) mode at a time.

> Note: The `supportsPictureInPicture` property of the [config plugin](#configuration-in-app-config) has to be configured for the PiP to work.

### `surfaceType`

OptionalâType:

`[SurfaceType](#surfacetype)`âDefault: `'surfaceView'`

Determines the type of the surface used to render the video.

> This prop should not be changed at runtime.

### `useExoShutter`

OptionalâType:

`boolean`âDefault: `true`

Determines whether the player should use the default ExoPlayer shutter that covers the `VideoView` before the first video frame is rendered. Setting this property to `false` makes the Android behavior the same as iOS.

#### Inherited Props

## Component Methods

### `enterFullscreen()`

### `exitFullscreen()`

### `startPictureInPicture()`

Enters Picture in Picture (PiP) mode. Throws an exception if the device does not support PiP.

> Note: Only one player can be in Picture in Picture (PiP) mode at a time.

> Note: The `supportsPictureInPicture` property of the [config plugin](#configuration-in-app-config) has to be configured for the PiP to work.

### `stopPictureInPicture()`

Exits Picture in Picture (PiP) mode.

## Hooks

### `useVideoPlayer(source, setup)`

  

Creates a `VideoPlayer`, which will be automatically cleaned up when the component is unmounted.

## Classes

### `VideoPlayer`

Type: Class extends `[SharedObject](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedobject)<[VideoPlayerEvents](#videoplayerevents)>`

A class that represents an instance of the video player.

VideoPlayer Properties

### `allowsExternalPlayback`

Type:

`boolean`âDefault: `true`

Determines whether the player should allow external playback.

### `audioMixingMode`

Type:

`[AudioMixingMode](#audiomixingmode)`âDefault: `'auto'`

Determines how the player will interact with other audio playing in the system.

### `availableSubtitleTracks`

Read OnlyâType:

`[SubtitleTrack[]](#subtitletrack)`

An array of subtitle tracks available for the current video.

### `availableVideoTracks`

Read OnlyâType:

`[VideoTrack[]](#videotrack)`

An array of video tracks available for the current video.

> On iOS, when using a HLS source, make sure that the uri contains `.m3u8` extension or that the [`contentType`](#contenttype) property of the [`VideoSource`](#videosource) has been set to `'hls'`. Otherwise, the video tracks will not be available.

### `bufferedPosition`

Float value indicating how far the player has buffered the video in seconds.

This value is 0 when the player has not buffered up to the current playback time. When it's impossible to determine the buffer state (for example, when the player isn't playing any media), this value is -1.

### `bufferOptions`

Specifies buffer options which will be used by the player when buffering the video.

> You should provide a `BufferOptions` object when setting this property. Setting individual buffer properties is not supported.

### `currentLiveTimestamp`

Read OnlyâLiteral type: `union`

The exact timestamp when the currently displayed video frame was sent from the server, based on the `EXT-X-PROGRAM-DATE-TIME` tag in the livestream metadata. If this metadata is missing, this property will return `null`.

Acceptable values are: `null` | `number`

### `currentOffsetFromLive`

Read OnlyâLiteral type: `union`

Float value indicating the latency of the live stream in seconds. If a livestream doesn't have the required metadata, this will return `null`.

Acceptable values are: `null` | `number`

### `currentTime`

Float value indicating the current playback time in seconds.

If the player is not yet playing, this value indicates the time position at which playback will begin once the `play()` method is called.

Setting `currentTime` to a new value seeks the player to the given time. Note that frame accurate seeking may incur additional decoding delay which can impact seeking performance. Consider using the [`seekBy`](#seekbyseconds) function if the time does not have to be set precisely.

### `duration`

Float value indicating the duration of the current video in seconds.

### `isLive`

Read OnlyâType:

`boolean`

Boolean value indicating whether the player is currently playing a live stream.

### `loop`

Type:

`boolean`âDefault: `false`

Determines whether the player should automatically replay after reaching the end of the video.

### `muted`

Type:

`boolean`âDefault: `false`

Boolean value whether the player is currently muted. Setting this property to `true`/`false` will mute/unmute the player.

### `playbackRate`

Type:

`number`âDefault: `1.0`

Float value between `0` and `16.0` indicating the current playback speed of the player.

### `playing`

Read OnlyâType:

`boolean`

Boolean value whether the player is currently playing.

> Use `play` and `pause` methods to control the playback.

### `preservesPitch`

Type:

`boolean`âDefault: `true`

Boolean value indicating if the player should correct audio pitch when the playback speed changes.

### `showNowPlayingNotification`

Type:

`boolean`âDefault: `false`

Boolean value determining whether the player should show the now playing notification.

### `status`

Read OnlyâType:

`[VideoPlayerStatus](#videoplayerstatus)`

Indicates the current status of the player.

### `staysActiveInBackground`

Type:

`boolean`âDefault: `false`

Determines whether the player should continue playing after the app enters the background.

### `subtitleTrack`

Literal type: `union`âDefault: `null`

Specifies the subtitle track which is currently displayed by the player. `null` when no subtitles are displayed.

> To ensure a valid subtitle track, always assign one of the subtitle tracks from the [`availableSubtitleTracks`](#availablesubtitletracks) array.

Acceptable values are: `null` | `[SubtitleTrack](#subtitletrack)`

### `targetOffsetFromLive`

Float value indicating the time offset from the live in seconds.

### `timeUpdateEventInterval`

Type:

`number`âDefault: `0`

Float value indicating the interval in seconds at which the player will emit the [`timeUpdate`](#videoplayerevents) event. When the value is equal to `0`, the event will not be emitted.

### `videoTrack`

Read OnlyâLiteral type: `union`âDefault: `null`

Specifies the video track currently played by the player. `null` when no video is displayed.

Acceptable values are: `null` | `[VideoTrack](#videotrack)`

### `volume`

Type:

`number`âDefault: `1.0`

Float value between `0` and `1.0` representing the current volume. Muting the player doesn't affect the volume. In other words, when the player is muted, the volume is the same as when unmuted. Similarly, setting the volume doesn't unmute the player.

VideoPlayer Methods

### `generateThumbnailsAsync(times, options)`

  

Generates thumbnails from the currently played asset. The thumbnails are references to native images, thus they can be used as a source of the `Image` component from `expo-image`.

### `pause()`

### `play()`

### `replace(source, disableWarning)`

  

Replaces the current source with a new one.

> On iOS, this method loads the asset data synchronously on the UI thread and can block it for extended periods of time. Use `replaceAsync` to load the asset asynchronously and avoid UI lags.

> This method will be deprecated in the future.

### `replaceAsync(source)`

  

Replaces the current source with a new one, while offloading loading of the asset to a different thread.

> On Android and Web, this method is equivalent to `replace`.

### `replay()`

Seeks the playback to the beginning.

### `seekBy(seconds)`

  

Seeks the playback by the given number of seconds. The time to which the player seeks may differ from the specified requested time for efficiency, depending on the encoding and what is currently buffered by the player. Use this function to implement playback controls that seek by specific amount of time, in which case, the actual time usually does not have to be precise. For frame accurate seeking, use the [`currentTime`](#currenttime) property.

### `VideoThumbnail`

Type: Class extends `[SharedRef](https://docs.expo.dev/versions/v53.0.0/sdk/expo#sharedref)<'image'>`

Represents a video thumbnail that references a native image. Instances of this class can be passed as a source to the `Image` component from `expo-image`.

VideoThumbnail Properties

### `actualTime`

The time in seconds at which the thumbnail was actually generated.

### `height`

Height of the created thumbnail.

### `nativeRefType`

The type of the native reference.

### `requestedTime`

The time in seconds at which the thumbnail was to be created.

### `width`

Width of the created thumbnail.

## Methods

### `Video.clearVideoCacheAsync()`

Clears all video cache.

> This function can be called only if there are no existing `VideoPlayer` instances.

A promise that fulfills after the cache has been cleaned.

### `Video.createVideoPlayer(source)`

  

Creates a direct instance of `VideoPlayer` that doesn't release automatically.

> For most use cases you should use the [`useVideoPlayer`](#usevideoplayer) hook instead. See the [Using the VideoPlayer Directly](#using-the-videoplayer-directly) section for more details.

### `Video.getCurrentVideoCacheSize()`

Returns the space currently occupied by the video cache in bytes.

### `Video.isPictureInPictureSupported()`

Returns whether the current device supports Picture in Picture (PiP) mode.

A `boolean` which is `true` if the device supports PiP mode, and `false` otherwise.

### `Video.setVideoCacheSizeAsync(sizeBytes)`

  

Sets desired video cache size in bytes. The default video cache size is 1GB. Value set by this function is persistent. The cache size is not guaranteed to be exact and the actual cache size may be slightly larger. The cache is evicted on a least-recently-used basis.

> This function can be called only if there are no existing `VideoPlayer` instances.

A promise that fulfills after the cache size has been set.

## Types

### `AudioMixingMode`

Literal Type: `string`

Specifies the audio mode that the player should use. Audio mode is set on per-app basis, if there are multiple players playing and have different a `AudioMode` specified, the highest priority mode will be used. Priority order: 'doNotMix' > 'auto' > 'duckOthers' > 'mixWithOthers'.

*   `mixWithOthers`: The player will mix its audio output with other apps.
*   `duckOthers`: The player will lower the volume of other apps if any of the active players is outputting audio.
*   `auto`: The player will allow other apps to keep playing audio only when it is muted. On iOS it will always interrupt other apps when `showNowPlayingNotification` is `true` due to system requirements.
*   `doNotMix`: The player will pause playback in other apps, even when it's muted.

> On iOS, the Now Playing notification is dependent on the audio mode. If the audio mode is different from `doNotMix` or `auto` this feature will not work.

Acceptable values are: `'mixWithOthers'` | `'duckOthers'` | `'auto'` | `'doNotMix'`

### `BufferOptions`

Specifies buffer options which will be used by the player when buffering the video.

### `ContentType`

Literal Type: `string`

Specifies the content type of the source.

*   `auto`: The player will automatically determine the content type of the video.
*   `progressive`: The player will use progressive download content type. This is the default `ContentType` when the uri does not contain an extension.
*   `hls`: The player will use HLS content type.
*   `dash`: The player will use DASH content type (Android-only).
*   `smoothStreaming`: The player will use SmoothStreaming content type (Android-only).

Acceptable values are: `'auto'` | `'progressive'` | `'hls'` | `'dash'` | `'smoothStreaming'`

### `DRMOptions`

Specifies DRM options which will be used by the player while loading the video.

### `DRMType`

Literal Type: `string`

Specifies which type of DRM to use:

*   Android supports ClearKey, PlayReady and Widevine.
*   iOS supports FairPlay.

Acceptable values are: `'clearkey'` | `'fairplay'` | `'playready'` | `'widevine'`

### `MutedChangeEventPayload`

Data delivered with the [`mutedChange`](#videoplayerevents) event.

### `PlaybackRateChangeEventPayload`

Data delivered with the [`playbackRateChange`](#videoplayerevents) event.

### `PlayerError`

Contains information about any errors that the player encountered during the playback

### `PlayingChangeEventPayload`

Data delivered with the [`playingChange`](#videoplayerevents) event.

### `SourceChangeEventPayload`

Data delivered with the [`sourceChange`](#videoplayerevents) event.

### `SourceLoadEventPayload`

Data delivered with the [`sourceLoad`](#videoplayerevents) event, contains information about the video source that has finished loading.

### `StatusChangeEventPayload`

Data delivered with the [`statusChange`](#videoplayerevents) event.

### `SubtitleTrack`

### `SurfaceType`

Literal Type: `string`

Describes the type of the surface used to render the video.

*   `surfaceView`: Uses the `SurfaceView` to render the video. This value should be used in the majority of cases. Provides significantly lower power consumption, better performance, and more features.
*   `textureView`: Uses the `TextureView` to render the video. Should be used in cases where the SurfaceView is not supported or causes issues (for example, overlapping video views).

You can learn more about surface types in the official [ExoPlayer documentation](https://developer.android.com/media/media3/ui/playerview#surfacetype).

Acceptable values are: `'textureView'` | `'surfaceView'`

### `TimeUpdateEventPayload`

Data delivered with the [`timeUpdate`](#videoplayerevents) event, contains information about the current playback progress.

### `VideoContentFit`

Literal Type: `string`

Describes how a video should be scaled to fit in a container.

*   `contain`: The video maintains its aspect ratio and fits inside the container, with possible letterboxing/pillarboxing.
*   `cover`: The video maintains its aspect ratio and covers the entire container, potentially cropping some portions.
*   `fill`: The video stretches/squeezes to completely fill the container, potentially causing distortion.

Acceptable values are: `'contain'` | `'cover'` | `'fill'`

### `VideoMetadata`

Contains information that will be displayed in the now playing notification when the video is playing.

### `VideoPlayerEvents`

Handlers for events which can be emitted by the player.

### `VideoPlayerStatus`

Literal Type: `string`

Describes the current status of the player.

*   `idle`: The player is not playing or loading any videos.
*   `loading`: The player is loading video data from the provided source
*   `readyToPlay`: The player has loaded enough data to start playing or to continue playback.
*   `error`: The player has encountered an error while loading or playing the video.

Acceptable values are: `'idle'` | `'loading'` | `'readyToPlay'` | `'error'`

### `VideoSize`

Specifies the size of a video track.

### `VideoSource`

Type: `string` or `number` or `null` or `object` shaped as below:

### `VideoThumbnailOptions`

Additional options for video thumbnails generation.

### `VideoTrack`

Specifies a VideoTrack loaded from a [`VideoSource`](#videosource).

### `VolumeChangeEventPayload`

Data delivered with the [`volumeChange`](#videoplayerevents) event.

---

# video-av

A library that provides an API to implement video playback and recording in apps.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-av)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-av/CHANGELOG.md)[](https://www.npmjs.com/package/expo-av)

> Deprecated: The `Video` component from `expo-av`, which is documented on this page, has now been deprecated and replaced by an improved version in `expo-video`. [Learn about `expo-video`](https://docs.expo.dev/versions/latest/sdk/video).

The `Video` component from `expo-av` displays a video inline with the other UI elements in your app.

Much of Video and Audio have common APIs that are documented in [AV documentation](https://docs.expo.dev/versions/latest/sdk/av). This page covers video-specific props and APIs. We encourage you to skim through this document to get basic video working, and then move on to [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more advanced functionality. The audio experience of video (such as whether to interrupt music already playing in another app, or whether to play sound while the phone is on silent mode) can be customized using the [Audio API](https://docs.expo.dev/versions/latest/sdk/audio).

## Installation

`npx expo install expo-av`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Usage

Here's a simple example of a video with a play/pause button.

```
import { useState, useRef } from 'react';
import { View, StyleSheet, Button } from 'react-native';
import { Video, ResizeMode } from 'expo-av';

export default function App() {
  const video = useRef(null);
  const [status, setStatus] = useState({});
  return (
    <View style={styles.container}>
      <Video
        ref={video}
        style={styles.video}
        source={{
          uri: 'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        }}
        useNativeControls
        resizeMode={ResizeMode.CONTAIN}
        isLooping
        onPlaybackStatusUpdate={status => setStatus(() => status)}
      />
      <View style={styles.buttons}>
        <Button
          title={status.isPlaying ? 'Pause' : 'Play'}
          onPress={() =>
            status.isPlaying ? video.current.pauseAsync() : video.current.playAsync()
          }
        />
      </View>
    </View>
  );
}

%%placeholder-start%%const styles = StyleSheet.create({ ... }); %%placeholder-end%%const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#ecf0f1',
  },
  video: {
    alignSelf: 'center',
    width: 320,
    height: 200,
  },
  buttons: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```

For more advanced examples, check out the [Playlist example](https://github.com/expo/playlist-example/blob/master/App.js), and the [custom `VideoPlayer` controls component](https://github.com/ihmpavel/expo-video-player/blob/master/lib/index.tsx) that wraps `<Video>`, adds custom controls and use the `<Video>` API extensively. The `VideoPlayer` controls is used in [this app](https://github.com/expo/harvard-cs50-app).

## API

```
import { Video } from 'expo-av';
```

## Component

### `Video`

Type: `React.[Component](https://react.dev/reference/react/Component)<[VideoProps](#videoprops), [VideoState](#videostate)>`

The Video component props can be divided into following groups:

*   The `source` and `posterSource` props customize the source of the video content.
*   The `useNativeControls`, `resizeMode`, and `usePoster` props customize the UI of the component.
*   The `onPlaybackStatusUpdate`, `onReadyForDisplay`, and `onIOSFullscreenUpdate` props pass information of the state of the `Video` component.
*   The `onLoadStart`, `onLoad`, and `onError` props are also provided for backwards compatibility with `Image` (but they are redundant with `onPlaybackStatusUpdate`). Finally, the rest of props are available to control the playback of the video, but we recommend that, for finer control, you use the methods available on the `ref` described in the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av).

VideoProps

### `audioPan`

The desired audio panning value of the audio for this media. This value must be between `-1.0` (full left) and `1.0` (full right). See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

### `isLooping`

A boolean describing if the media should play once (`false`) or loop indefinitely (`true`). See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

### `isMuted`

A boolean describing if the audio of this media should be muted. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

### `onError`

OptionalâType:

`(error: string) => void`

A function to be called if load or playback have encountered a fatal error. The function is passed a single error message string as a parameter. Errors sent here are also set on `playbackStatus.error` that are passed into the `onPlaybackStatusUpdate` callback.

### `onFullscreenUpdate`

OptionalâType:

`(event: [VideoFullscreenUpdateEvent](#videofullscreenupdateevent)) => void`

A function to be called when the state of the native iOS fullscreen view changes (controlled via the `presentFullscreenPlayer()` and `dismissFullscreenPlayer()` methods on the `Video`'s `ref`).

### `onLoad`

OptionalâType:

`(status: [AVPlaybackStatus](https://docs.expo.dev/versions/latest/sdk/av#avplaybackstatus)) => void`

A function to be called once the video has been loaded. The data is streamed so all of it may not have been fetched yet, just enough to render the first frame. The function is called with the `AVPlaybackStatus` of the video as its parameter. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for further information.

### `onLoadStart`

OptionalâType:

`() => void`

A function to be called when the video begins to be loaded into memory. Called without any arguments.

### `onPlaybackStatusUpdate`

OptionalâType:

`(status: [AVPlaybackStatus](https://docs.expo.dev/versions/latest/sdk/av#avplaybackstatus)) => void`

A function to be called regularly with the `AVPlaybackStatus` of the video. You will likely be using this a lot. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for further information on `onPlaybackStatusUpdate`, and the interval at which it is called.

### `onReadyForDisplay`

OptionalâType:

`(event: [VideoReadyForDisplayEvent](#videoreadyfordisplayevent)) => void`

A function to be called when the video is ready for display. Note that this function gets called whenever the video's natural size changes.

### `positionMillis`

The desired position of playback in milliseconds. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

### `PosterComponent`

OptionalâType:

`React.ComponentType<{ source: ImageProps[source], style: ImageProps[style] }>`

A react-native `Image` like component to display the poster image.

### `posterSource`

OptionalâType:

`ImageProps[source]`

The source of an optional image to display over the video while it is loading. The following forms are supported:

*   A dictionary of the form `{ uri: 'http://path/to/file' }` with a network URL pointing to an image file on the web.
*   `require('path/to/file')` for an image file asset in the source code directory.

### `posterStyle`

OptionalâType:

`ImageProps[style]`

An optional property to pass custom styles to the poster image.

### `progressUpdateIntervalMillis`

A number describing the new minimum interval in milliseconds between calls of `onPlaybackStatusUpdate`. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

### `rate`

The desired playback rate of the media. This value must be between `0.0` and `32.0`. Only available on Android API version 23 and later and iOS. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

### `resizeMode`

OptionalâType:

`[ResizeMode](#resizemode)`

A string describing how the video should be scaled for display in the component view bounds. Must be one of the [`ResizeMode`](#resizemode-1) enum values.

### `shouldCorrectPitch`

A boolean describing if we should correct the pitch for a changed rate. If set to `true`, the pitch of the audio will be corrected (so a rate different than `1.0` will timestretch the audio). See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

### `shouldPlay`

A boolean describing if the media is supposed to play. Playback may not start immediately after setting this value for reasons such as buffering. Make sure to update your UI based on the `isPlaying` and `isBuffering` properties of the `AVPlaybackStatus`. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

### `status`

A dictionary setting a new `AVPlaybackStatusToSet` on the video. See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av#default-initial--avplaybackstatustoset) for more information on `AVPlaybackStatusToSet`.

### `useNativeControls`

A boolean which, if set to `true`, will display native playback controls (such as play and pause) within the `Video` component. If you'd prefer to use custom controls, you can write them yourself, and/or check out the [`VideoPlayer` component](https://github.com/ihmpavel/expo-video-player).

### `usePoster`

A boolean which, if set to `true`, will display an image (whose source is set via the prop `posterSource`) while the video is loading.

### `videoStyle`

OptionalâType:

`StyleProp<[ViewStyle](https://reactnative.dev/docs/view-style-props)>`

An optional property to pass custom styles to the internal video component.

### `volume`

The desired volume of the audio for this media. This value must be between `0.0` (silence) and `1.0` (maximum volume). See the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av) for more information.

#### Inherited Props

## Component Methods

### `dismissFullscreenPlayer()`

This dismisses the fullscreen video view.

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished dismissing, or rejects if there was an error, or if this was called on an Android device.

### `presentFullscreenPlayer()`

This presents a fullscreen view of your video component on top of your app's UI. Note that even if `useNativeControls` is set to `false`, native controls will be visible in fullscreen mode.

A `Promise` that is fulfilled with the `AVPlaybackStatus` of the video once the fullscreen player has finished presenting, or rejects if there was an error, or if this was called on an Android device.

### `setOnPlaybackStatusUpdate(onPlaybackStatusUpdate)`

  

Sets a function to be called regularly with the `AVPlaybackStatus` of the playback object.

`onPlaybackStatusUpdate` will be called whenever a call to the API for this playback object completes (such as `setStatusAsync()`, `getStatusAsync()`, or `unloadAsync()`), nd will also be called at regular intervals while the media is in the loaded state.

Set `progressUpdateIntervalMillis` via `setStatusAsync()` or `setProgressUpdateIntervalAsync()` to modify the interval with which `onPlaybackStatusUpdate` is called while loaded.

## Types

### `VideoFullscreenUpdateEvent`

### `VideoNaturalSize`

### `VideoReadyForDisplayEvent`

### `VideoState`

## Enums

### `ResizeMode`

#### `CONTAIN`

`ResizeMode.CONTAIN ï¼ "contain"`

Fit within component bounds while preserving aspect ratio.

#### `COVER`

`ResizeMode.COVER ï¼ "cover"`

Fill component bounds while preserving aspect ratio.

#### `STRETCH`

`ResizeMode.STRETCH ï¼ "stretch"`

Stretch to fill component bounds.

### `VideoFullscreenUpdate`

#### `PLAYER_WILL_PRESENT`

`VideoFullscreenUpdate.PLAYER_WILL_PRESENT ï¼ 0`

Describing that the fullscreen player is about to present.

#### `PLAYER_DID_PRESENT`

`VideoFullscreenUpdate.PLAYER_DID_PRESENT ï¼ 1`

Describing that the fullscreen player just finished presenting.

#### `PLAYER_WILL_DISMISS`

`VideoFullscreenUpdate.PLAYER_WILL_DISMISS ï¼ 2`

Describing that the fullscreen player is about to dismiss.

#### `PLAYER_DID_DISMISS`

`VideoFullscreenUpdate.PLAYER_DID_DISMISS ï¼ 3`

Describing that the fullscreen player just finished dismissing.

## Unified API

The rest of the API on the `Video` component `ref` is the same as the API for `Audio.Sound` - see the [AV documentation](https://docs.expo.dev/versions/latest/sdk/av#playback) for further information.

---

# video-thumbnails

```
import { useState } from 'react';
import { StyleSheet, Button, View, Image, Text } from 'react-native';
import * as VideoThumbnails from 'expo-video-thumbnails';

export default function App() {
  const [image, setImage] = useState(null);

  const generateThumbnail = async () => {
    try {
      const { uri } = await VideoThumbnails.getThumbnailAsync(
        'https://d23dyxeqlo5psv.cloudfront.net/big_buck_bunny.mp4',
        {
          time: 15000,
        }
      );
      setImage(uri);
    } catch (e) {
      console.warn(e);
    }
  };

  return (
    <View style={styles.container}>
      <Button onPress={generateThumbnail} title="Generate thumbnail" />
      {image && <Image source={{ uri: image }} style={styles.image} />}
      <Text>{image}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  image: {
    width: 200,
    height: 200,
  },
});
```


---

# view-pager

```
import { StyleSheet, View, Text } from 'react-native';
import PagerView from 'react-native-pager-view';

export default function MyPager() {
  return (
    <View style={styles.container}>
      <PagerView style={styles.container} initialPage={0}>
        <View style={styles.page} key="1">
          <Text>First page</Text>
          <Text>Swipe â¡ï¸</Text>
        </View>
        <View style={styles.page} key="2">
          <Text>Second page</Text>
        </View>
        <View style={styles.page} key="3">
          <Text>Third page</Text>
        </View>
      </PagerView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  page: {
    justifyContent: 'center',
    alignItems: 'center',
  },
});
```


---

# webbrowser

## Expo WebBrowser

A library that provides access to the system's web browser and supports handling redirects.

[](https://github.com/expo/expo/tree/sdk-53/packages/expo-web-browser)[](https://github.com/expo/expo/tree/sdk-53/packages/expo-web-browser/CHANGELOG.md)[](https://www.npmjs.com/package/expo-web-browser)

`expo-web-browser` provides access to the system's web browser and supports handling redirects. On Android, it uses `ChromeCustomTabs` and on iOS, it uses `SFSafariViewController` or `ASWebAuthenticationSession`, depending on the method you call. As of iOS 11, `SFSafariViewController` no longer shares cookies with Safari, so if you are using `WebBrowser` for authentication you will want to use `WebBrowser.openAuthSessionAsync`, and if you just want to open a webpage (such as your app privacy policy), then use `WebBrowser.openBrowserAsync`.

## Installation

`npx expo install expo-web-browser`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project.

## Configuration in app config

You can configure `expo-web-browser` using its built-in [config plugin](https://docs.expo.dev/config-plugins/introduction) if you use config plugins in your project ([EAS Build](https://docs.expo.dev/build/introduction) or `npx expo run:[android|ios]`). The plugin allows you to configure a property that cannot be set at runtime and require building a new app binary to take effect.

### Example app.json with config plugin

```
{
  "expo": {
    "plugins": [
      [
        "expo-web-browser",
        {
          "experimentalLauncherActivity": true
        }
      ]
    ]
  }
}
```

### Configurable properties

## Usage

```
import { useState } from 'react';
import { Button, Text, View, StyleSheet } from 'react-native';
import * as WebBrowser from 'expo-web-browser';
%%placeholder-start%%%%placeholder-end%%import Constants from 'expo-constants';

export default function App() {
  const [result, setResult] = useState(null);

  const _handlePressButtonAsync = async () => {
    let result = await WebBrowser.openBrowserAsync('https://expo.dev');
    setResult(result);
  };
  return (
    <View style={styles.container}>
      <Button title="Open WebBrowser" onPress={_handlePressButtonAsync} />
      <Text>{result && JSON.stringify(result)}</Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: Constants.statusBarHeight,
    backgroundColor: '#ecf0f1',
  },
});
```

### Handling deep links from the WebBrowser

If your project uses Expo Router, deep links are handled automatically.

If you use the `WebBrowser` window for authentication or another use case where you want to pass information back into your app through a deep link, add a handler with `Linking.addEventListener` before opening the browser. When the listener fires, you should call [`dismissBrowser`](https://docs.expo.dev/versions/latest/sdk/webbrowser#webbrowserdismissbrowser). It will not automatically be dismissed when a deep link is handled. Aside from that, redirects from `WebBrowser` work the same as other deep links. Read more about it in [Linking](https://docs.expo.dev/linking/into-your-app#handle-urls).

## API

```
import * as WebBrowser from 'expo-web-browser';
```

## Methods

### `WebBrowser.coolDownAsync(browserPackage)`

  

This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage) or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call this method once you don't need them to avoid potential memory leaks. However, those binding would be cleared once your application is destroyed, which might be sufficient in most cases.

The promise which fulfils with `WebBrowserCoolDownResult` when cooling is performed, or an empty object when there was no connection to be dismissed.

### `WebBrowser.dismissAuthSession()`

Dismisses the current authentication session. On web, it will close the popup window associated with auth process.

The `void` on the successful attempt or throws an error if dismiss functionality is not available.

### `WebBrowser.dismissBrowser()`

Dismisses the presented web browser.

`[Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)<{ type: WebBrowserResultType.DISMISS }>`

The promise that resolves with `{ type: 'dismiss' }` on the successful attempt or throws an error if dismiss functionality is not available.

### `WebBrowser.getCustomTabsSupportingBrowsersAsync()`

Returns a list of applications package names supporting Custom Tabs, Custom Tabs service, user chosen and preferred one. This may not be fully reliable, since it uses `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be present in browserPackages list once another browser is set to default.)

The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.

### `WebBrowser.maybeCompleteAuthSession(options)`

  

Possibly completes an authentication session on web in a window popup. The method should be invoked on the page that the window redirects to.

Returns an object with message about why the redirect failed or succeeded:

If `type` is set to `failed`, the reason depends on the message:

*   `Not supported on this platform`: If the platform doesn't support this method (Android, iOS).
*   `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR or node environment.
*   `No auth session is currently in progress`: (the cached state wasn't found in local storage). This can happen if the window redirects to an origin (website) that is different to the initial website origin. If this happens in development, it may be because the auth started on localhost and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl` and `returnUrl`.
*   `Current URL "<URL>" and original redirect URL "<URL>" do not match`: This can occur when the redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test in development by passing `{ skipRedirectCheck: true }` to the function.

If `type` is set to `success`, the parent window will attempt to close the child window immediately.

If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was reloaded before the auth was completed. In this case you'll need to close the child window manually.

### `WebBrowser.mayInitWithUrlAsync(url, browserPackage)`

  

This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl) and calls its `mayLaunchUrl` method for browser specified by the package.

A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.

### `WebBrowser.openAuthSessionAsync(url, redirectUrl, options)`

  

#### On Android:

This will be done using a "custom Chrome tabs" browser, [AppState](https://reactnative.dev/docs/appstate), and [Linking](https://docs.expo.dev/versions/latest/sdk/linking) APIs.

#### On iOS:

Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked whether to allow the app to authenticate using the given url. To handle redirection back to the mobile application, the redirect URI set in the authentication server has to use the protocol provided as the scheme in app.json [`expo.scheme`](https://docs.expo.dev/versions/latest/config/app#scheme). For example, `demo://` not `https://` protocol. Using `Linking.addEventListener` is not needed and can have side effects.

#### On web:

> This API can only be used in a secure environment (localhost/https). to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#err_web_browser_crypto) will be thrown. This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.

*   _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.
*   _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.

How this works on web:

*   A crypto state will be created for verifying the redirect.
```
*   This means you need to run with `npx expo start --https`
```
*   The state will be added to the window's `localstorage`. This ensures that auth cannot complete unless it's done from a page running with the same origin as it was started. Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession` must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different website, or even a different host like `https://128.0.0.*:19006` for example will not work.
*   A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.

> On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) which takes too long to fire after a user interaction. This method must be invoked immediately after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#err_web_browser_blocked) will be thrown.

*   If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.
*   If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.
*   If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise fulfills with `{ type: 'dismiss' }` object.

### `WebBrowser.openBrowserAsync(url, browserParams)`

  

Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller), and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs) on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-options).

The promise behaves differently based on the platform. On Android promise resolves with `{ type: 'opened' }` if we were able to open browser. On iOS:

*   If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.
*   If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.

### `WebBrowser.warmUpAsync(browserPackage)`

  

This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup\(long\)) for specified package.

A promise which fulfils with `WebBrowserWarmUpResult` object.

## Types

### `AuthSessionOpenOptions`

If there is no native AuthSession implementation available (which is the case on Android) the params inherited from [`WebBrowserOpenOptions`](#webbrowseropenoptions) will be used in the browser polyfill. Otherwise, the browser parameters will be ignored.

Type: `[WebBrowserOpenOptions](https://docs.expo.dev/versions/latest/sdk/webbrowser#webbrowseropenoptions)` extended by:

### `WebBrowserAuthSessionResult`

Literal Type: `union`

Acceptable values are: `[WebBrowserRedirectResult](#webbrowserredirectresult)` | `[WebBrowserResult](#webbrowserresult)`

### `WebBrowserCompleteAuthSessionOptions`

### `WebBrowserCompleteAuthSessionResult`

### `WebBrowserCoolDownResult`

Type: `ServiceActionResult`

### `WebBrowserCustomTabsResults`

### `WebBrowserMayInitWithUrlResult`

Type: `ServiceActionResult`

### `WebBrowserOpenOptions`

### `WebBrowserRedirectResult`

### `WebBrowserResult`

### `WebBrowserWarmUpResult`

Type: `ServiceActionResult`

### `WebBrowserWindowFeatures`

Type: `Record<string, number | boolean | string>`

## Enums

### `WebBrowserPresentationStyle`

#### `AUTOMATIC`

`WebBrowserPresentationStyle.AUTOMATIC ï¼ "automatic"`

The default presentation style chosen by the system. On older iOS versions, falls back to `WebBrowserPresentationStyle.FullScreen`.

#### `CURRENT_CONTEXT`

`WebBrowserPresentationStyle.CURRENT_CONTEXT ï¼ "currentContext"`

A presentation style where the browser is displayed over the app's content.

#### `FORM_SHEET`

`WebBrowserPresentationStyle.FORM_SHEET ï¼ "formSheet"`

A presentation style that displays the browser centered in the screen.

#### `FULL_SCREEN`

`WebBrowserPresentationStyle.FULL_SCREEN ï¼ "fullScreen"`

A presentation style in which the presented browser covers the screen.

#### `OVER_CURRENT_CONTEXT`

`WebBrowserPresentationStyle.OVER_CURRENT_CONTEXT ï¼ "overCurrentContext"`

A presentation style where the browser is displayed over the app's content.

#### `OVER_FULL_SCREEN`

`WebBrowserPresentationStyle.OVER_FULL_SCREEN ï¼ "overFullScreen"`

A presentation style in which the browser view covers the screen.

#### `PAGE_SHEET`

`WebBrowserPresentationStyle.PAGE_SHEET ï¼ "pageSheet"`

A presentation style that partially covers the underlying content.

#### `POPOVER`

`WebBrowserPresentationStyle.POPOVER ï¼ "popover"`

A presentation style where the browser is displayed in a popover view.

### `WebBrowserResultType`

#### `CANCEL`

`WebBrowserResultType.CANCEL ï¼ "cancel"`

#### `DISMISS`

`WebBrowserResultType.DISMISS ï¼ "dismiss"`

#### `LOCKED`

`WebBrowserResultType.LOCKED ï¼ "locked"`

#### `OPENED`

`WebBrowserResultType.OPENED ï¼ "opened"`

## Error codes

### `ERR_WEB_BROWSER_REDIRECT`

Web only: The window cannot complete the redirect request because the invoking window doesn't have a reference to its parent. This can happen if the parent window was reloaded.

### `ERR_WEB_BROWSER_BLOCKED`

Web only: The popup window was blocked by the browser or failed to open. This can happen in mobile browsers when the `window.open()` method was invoked too long after a user input was fired.

Mobile browsers do this to prevent malicious websites from opening many unwanted popups on mobile.

You're method can still run in an async function but there cannot be any long running tasks before it. You can use hooks to disable user-inputs until any other processes have finished loading.

### `ERR_WEB_BROWSER_CRYPTO`

Web only: The current environment doesn't support crypto. Ensure you are running from a secure origin (localhost/https).

---

# webview

A library that provides a WebView component.

[](https://github.com/react-native-webview/react-native-webview)[](https://www.npmjs.com/package/react-native-webview)

`react-native-webview` provides a `WebView` component that renders web content in a native view.

## Installation

`npx expo install react-native-webview`

If you are installing this in an [existing React Native app](https://docs.expo.dev/bare/overview), make sure to [install `expo`](https://docs.expo.dev/bare/installing-expo-modules) in your project. Then, follow the [installation instructions](https://github.com/react-native-webview/react-native-webview/blob/master/docs/Getting-Started.md#react-native-webview-getting-started-guide) provided in the library's README or documentation.

## Usage

```
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      source={{ uri: 'https://expo.dev' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});
```

### With inline HTML

```
import { WebView } from 'react-native-webview';
import Constants from 'expo-constants';
import { StyleSheet } from 'react-native';

export default function App() {
  return (
    <WebView
      style={styles.container}
      originWhitelist={['*']}
      source={{ html: '<h1><center>Hello world</center></h1>' }}
    />
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: Constants.statusBarHeight,
  },
});
```

## Learn more

[

Visit official documentation

Get full information on API and its usage.

](https://github.com/react-native-webview/react-native-webview/blob/master/docs/Guide.md)

---

